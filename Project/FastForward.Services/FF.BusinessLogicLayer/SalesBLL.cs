using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using FF.DataAccessLayer;
using FF.BusinessObjects.Sales;
using FF.BusinessObjects;
using FF.Interfaces;
using System.Data;

using System.DirectoryServices;
using System.Net;
using System.Transactions;
using System.Globalization;
using System.ServiceModel;
using System.Net.Mail;
using System.Text.RegularExpressions;
using System.Threading;
using System.ComponentModel;
using FF.BusinessObjects.General;
using FF.BusinessObjects.InventoryNew;
using FF.BusinessObjects.ToursNew;
using FF.BusinessObjects.BITool;
using FF.BusinessObjects.Financial;
using System.Runtime.InteropServices;

namespace FF.BusinessLogicLayer
{
    /// <summary>
    /// 
    /// </summary>
    [ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)]
    public class SalesBLL : ISales
    {
        SalesDAL _salesDAL = null;
        InventoryDAL _inventoryDAL = null;
        FMS_InventoryDAL _fmsInventoryDal = null;
        GeneralDAL _generalDAL = null;
        ReptCommonDAL _inventoryRepDAL = null;
        SCMCommonDAL _ScmCommonDAL = null;
        ReptDAL _reptDAL = null;
        ReptCommonDAL _reportDAL = null;
        FinancialDAL _financialDAL = null;
        CustServiceDAL _CustServiceDAL = null;
        SecurityDAL _securityDAL = null;
        ToursDAL _ToursDAL = null;

        public List<MasterInvoiceType> GetInvoiceTypeByCode(string _code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceTypeByCode(_code);
        }
        public DataTable SP_CHECK_MST_SYS_PARA_MRN(string _com, string _pc, string _loc, string _item, decimal _qty)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SP_CHECK_MST_SYS_PARA_MRN(_com, _pc, _loc, _item, _qty);
        }
        public DataTable GetItemByJobRegNo(string _regNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetItemByJobRegNo(_regNo);
        }
        public DataTable GetReqAppByType(string _com, string _Pc, string _type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReqAppByType(_com, _Pc, _type);
        }
        public REF_ITM_CATE4 GetItemCate4(string _cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetItemCate4(_cd);
        }
        public REF_ITM_CATE5 GetItemCate5(string _cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetItemCate5(_cd);
        }
        public DataTable GetSchDetByPriceCirc(string _circ, string _type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchDetByPriceCirc(_circ, _type);
        }
        public DataTable GET_SI_ITEMS(string _si, Int32 _wfoc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GET_SI_ITEMS(_si, _wfoc);
        }
        public DataTable GET_SI_4_Price(string _com, string _si, DateTime _from, DateTime _to, string _item, string _cat1, string _cat2, string _model)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GET_SI_4_Price(_com, _si, _from, _to, _item, _cat1, _cat2, _model);
        }
        public DataTable getProVouRdmPb(Int32 _seq)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getProVouRdmPb(_seq);
        }
        public DataTable getReqAppByCrNo(string _com, string _crno, string _anal5)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getReqAppByCrNo(_com, _crno, _anal5);
        }
        public Int32 DeleteTempPromoVoucherRedeemPB(string CreateUser)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            _salesDAL.BeginTransaction();

            Int32 _eff = _salesDAL.DeleteTempPromoVoucherRedeemPB(CreateUser);

            _salesDAL.TransactionCommit();
            return _eff;

        }
        //kapila
        public Int32 SaveTempPromoVoucherRedeemPB(List<PromoVouRedeemPB> _lstRdmPB)
        {
            Int32 _eff = 0;
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            _salesDAL.BeginTransaction();

            foreach (PromoVouRedeemPB _list in _lstRdmPB)
            {
                _eff = _salesDAL.SaveTempPromoVoucherRedeemPB(_list);
            }

            _salesDAL.TransactionCommit();
            return _eff;

        }
        public DataTable GetCreditInvoices(DateTime _from, DateTime _to, string _cust, string _com, Int32 _isall, Int32 _outs)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCreditInvoices(_from, _to, _cust, _com, _isall, _outs);
        }
        public Boolean IsExchangeReqFound(string _ser, Int32 _isinv)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.IsExchangeReqFound(_ser, _isinv);
        }

        public Int32 SavePVoucherPages(List<GiftVoucherPages> _voucherList)
        {
            Int32 _eff = 0;
            _fmsInventoryDal = new FMS_InventoryDAL();
            _fmsInventoryDal.ConnectionOpen();
            _fmsInventoryDal.BeginTransaction();

            foreach (GiftVoucherPages _list in _voucherList)
            {
                _eff = _fmsInventoryDal.SaveGiftVoucherPages(_list);
            }

            _fmsInventoryDal.TransactionCommit();
            return _eff;

        }
        public DataTable GetInvoiceAdj(string _invoice)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceAdj(_invoice);
        }
        public Int32 Update_Item_Tax(string _com, string _pc, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            Int32 eff = _salesDAL.Update_Item_Tax(_com, _pc, _date);
            return eff;

        }

        public DataTable SP_CHECK_MST_SYS_PARA(string _com, string _pc, string _loc, string _item)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SP_CHECK_MST_SYS_PARA(_com, _pc, _loc, _item);
        }
        public DataTable GetTransPBSupplier(string _com, string _pb, string _level)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetTransPBSupplier(_com, _pb, _level);
        }

        //kapila
        public Int32 SaveVehRegCompany(List<VehicleRegCompany> _RegComp)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                foreach (VehicleRegCompany regcomp in _RegComp)
                {
                    effect = _salesDAL.SaveVehRegCompany(regcomp);
                }
                _salesDAL.TransactionCommit();

                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _salesDAL.TransactionRollback();
            }
            return effect;

        }
        //kapila
        public Int32 SaveMyAbansDetails(MyAbans _myab, MasterBusinessEntity _businessEntity, GroupBussinessEntity _groupCus, LoyaltyMemeber _loyal, Boolean _isExist)
        {
            Int32 effect = 0;
            Int32 _eff = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();

                if (_isExist == false)
                {
                    MasterAutoNumber _auto = new MasterAutoNumber();
                    _auto.Aut_moduleid = "CUS";
                    _auto.Aut_number = 0;
                    _auto.Aut_start_char = "CONT";

                    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                    string _cusNo = _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_auto);
                    _businessEntity.Mbe_cd = _cusNo;
                    _groupCus.Mbg_cd = _cusNo;
                    string customerCD = _cusNo;

                    effect = _salesDAL.SaveBusinessEntityDetailGroup(_groupCus);
                    effect = _salesDAL.SaveBusinessEntityDetail(_businessEntity);
                }
                else
                {
                    effect = _salesDAL.SaveBusinessEntityDetailGroup(_groupCus);
                    effect = _salesDAL.UpdateBusinessEntityProfile(_businessEntity, 1);
                }

                //kapila 26/7/2016
                MasterAutoNumber _auto1 = new MasterAutoNumber();
                _auto1.Aut_moduleid = "MYAB";
                _auto1.Aut_number = 0;
                _auto1.Aut_start_char = "MYAB";

                MasterAutoNumber _number1 = _inventoryDAL.GetAutoNumber(_auto1.Aut_moduleid, _auto1.Aut_direction, _auto1.Aut_start_char, _auto1.Aut_cate_tp, _auto1.Aut_cate_cd, _auto1.Aut_modify_dt, _auto1.Aut_year);
                string _cardSer = _number1.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_auto1);

                //   string _cd_no = _number1.Aut_number.ToString();
                //  _cd_no = Convert.ToInt32(_cd_no).ToString("000000", CultureInfo.InvariantCulture);

                //string _cardSerNew = _cardSer.Substring(0, 3) + " " + _cardSer.Substring(3, 3) + " " + _cd_no;
                string _cardSerNew = "000 000 " + _cardSer;

                _loyal.Salcm_cd_ser = _cardSerNew;

                _myab.Myab_ser_no = _number1.Aut_number.ToString();     //kapila 14/12/2016
                effect = _salesDAL.SaveMyAbansDetails(_myab);


                _loyal.Salcm_no = _myab.Myab_ser_no;    //kapila 14/12/2016
                _eff = _salesDAL.SaveLoyaltyMembership(_loyal);


                _salesDAL.TransactionCommit();

                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _salesDAL.TransactionRollback();
            }
            return effect;
        }
        //kapila
        public Int32 UpdateAccountManager(List<HpAccount> accNoList, string _newmgrcd, string _user)
        {
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                int result = 0;

                foreach (HpAccount AccNo in accNoList)
                {
                    result = _salesDAL.UpdateAccountManager(AccNo.Hpa_com, AccNo.Hpa_pc, AccNo.Hpa_acc_no, _newmgrcd);
                    int _x = _salesDAL.UpdateAccountManagerLog(AccNo.Hpa_pc, AccNo.Hpa_acc_no, AccNo.Hpa_mgr_cd, _newmgrcd, _user);
                }
                _salesDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                return -1;
            }

            return 1;
        }
        //kapila
        public DataTable GetLoyaltyMemberByCardNo(string _cardNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetLoyaltyMemberByCardNo(_cardNo);
        }
        //kapila
        public DataTable GetSalesHdrByReq(string _com, string _req)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSalesHdrByReq(_com, _req);
        }
        //kapila
        public DataTable GetinvBySer(string _com, string _loc, string _ser, string _war)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetinvBySer(_com, _loc, _ser, _war);
        }
        //kapila
        public DataTable getSubLocationByCode(string _com, string _mloc, string _sloc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getSubLocationByCode(_com, _mloc, _sloc);
        }
        //kapila
        public DataTable GetSalesDetailsByLine(string _invNo, Int32 _line)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSalesDetailsByLine(_invNo, _line);
        }
        //kapila
        public List<RecieptItem> GetReceiptItemsByInvoice(string _inv)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReceiptItemsByInvoice(_inv);
        }
        //kapila
        public Int32 SaveVehInsuarance(VehicleInsuarance _Insuarance)
        {
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            _salesDAL.ConnectionOpen();
            _inventoryDAL.ConnectionOpen();
            _salesDAL.BeginTransaction();
            Int32 _insSeq = _inventoryDAL.GetSerialID();
            _Insuarance.Svit_seq = _insSeq;

            MasterAutoNumber _masterAutoNumber = new MasterAutoNumber();
            _masterAutoNumber.Aut_cate_cd = _Insuarance.Svit_pc;
            _masterAutoNumber.Aut_cate_tp = "PC";
            _masterAutoNumber.Aut_direction = null;
            _masterAutoNumber.Aut_modify_dt = null;
            _masterAutoNumber.Aut_moduleid = "RECEIPT";
            _masterAutoNumber.Aut_number = 5;//what is Aut_number
            _masterAutoNumber.Aut_start_char = "AUTO";
            _masterAutoNumber.Aut_year = null;

            Int32 _autoNo = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
            String _documentNo = _masterAutoNumber.Aut_cate_cd + _masterAutoNumber.Aut_start_char + string.Format("{0:0000}", _autoNo);

            _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);  //kapila 15/12/2016

            _Insuarance.Svit_ref_no = _documentNo;
            Int32 _eff = _salesDAL.SaveVehInsuarance(_Insuarance);
            _salesDAL.TransactionCommit();
            return _eff;
        }
        //kapila
        public DataTable GetHPSalesDet(string _com, DateTime _frmDt, DateTime _toDt, string _cus, string _invNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHPSalesDet(_com, _frmDt, _toDt, _cus, _invNo);
        }
        //kapila
        public DataTable GetCustomerHPSalesDet(string _com, DateTime _frmDt, DateTime _toDt, string _cus, string _invNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCustomerHPSalesDet(_com, _frmDt, _toDt, _cus, _invNo);
        }
        //kapila
        public DataTable getReqHdrByReqNo(string _com, string _pc, string _req)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getReqHdrByReqNo(_com, _pc, _req);
        }
        //kapila
        public DataTable GetMailPBLevels(string _promocode)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetMailPBLevels(_promocode);
        }
        //kapila
        public Int16 CancelSerialPrice(List<PriceSerialRef> _priceRef)
        {
            Int16 _effects = 0;
            try
            {
                _salesDAL = new SalesDAL();

                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                if (_priceRef != null)
                {
                    foreach (PriceSerialRef _lstPriceRef in _priceRef)
                    {
                        _salesDAL.CancelSerialPrice(_lstPriceRef.Sars_pbook, _lstPriceRef.Sars_price_lvl, _lstPriceRef.Sars_itm_cd, _lstPriceRef.Sars_ser_no, _lstPriceRef.Sars_circular_no, _lstPriceRef.Sars_mod_by, _lstPriceRef.Sars_val_to);
                    }
                }

                _salesDAL.TransactionCommit();
                _effects = 1;

            }
            catch (Exception err)
            {
                _effects = -1;
                _salesDAL.TransactionRollback();
            }
            return _effects;
        }

        #region SalesInvoice

        /// <summary>
        /// Get Invoice header details.
        /// Code By : M.Geeganage on 18/04/2012  
        /// </summary>
        /// <param name="_invoiceNo"></param>
        /// <returns></returns>
        public InvoiceHeader GetInvoiceHeaderDetails(string _invoiceNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceHeaderDetails(_invoiceNo);
        }
        //subodana
        public List<InvoiceItem> GetInvoiceHeaderDetailsList(string _invoiceNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceHeaderDetailsList(_invoiceNo);
        }
        public List<InvoiceItem> GetRefInvHeaderDetailsList(string _invoiceNo, int status)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRefInvHeaderDetailsList(_invoiceNo, status);
        }

        /// <summary>
        /// Get Pending Invoice details.
        /// Code By : Shani on 28/04/2012  
        /// </summary>
        /// <param name="p_prof_center"></param>
        /// <param name="p_company"></param>
        /// <param name="p_from_dt"></param>
        /// <param name="p_to_date"></param>
        /// <returns></returns>
        public DataTable GetPendingInvoiceDetails(string prof_center, string company, string from_dt, string to_date, string _del_loc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPendingInvoiceDetails(prof_center, company, from_dt, to_date, _del_loc);
        }

        public DataTable GetPendingInvoicesToDO(string _company, DateTime _fromDate, DateTime _toDate, string _delLoc, string _custCode, string _invoiceNo, Int32 _delanyloc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPendingInvoicesToDO(_company, _fromDate, _toDate, _delLoc, _custCode, _invoiceNo, _delanyloc);
        }

        #endregion

        public DataTable GetInvoicesToChangeCust(string _company, DateTime _fromDate, DateTime _toDate, string _delLoc, string _custCode, string _invoiceNo, Int32 _delanyloc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoicesToChangeCust(_company, _fromDate, _toDate, _delLoc, _custCode, _invoiceNo, _delanyloc);
        }

        public Int32 Update_CustomerName(string _invNo, string _custCode, string _custName, string _custAdd1, string _custAdd2, string _com, string _user)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            int result = 0;
            result = _salesDAL.Update_CustomerName(_invNo, _custCode, _custName, _custAdd1, _custAdd2, _com, _user);
            _salesDAL.ConnectionClose();
            return result;
        }


        //kapila
        public List<ReptPickSerials> GetInvoiceSerial_Rep(string _company, string _location, string _user, string _session, string _defBin, string _invoice, int _baseRefline)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceSerial_Rep(_company, _location, _user, _session, _defBin, _invoice, _baseRefline);
        }
        //kapila
        public Boolean IsMainItemReplace(string _item)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.IsMainItemReplace(_item);
        }
        //kapila
        public Int32 Process_Service_Agreement(SCV_AGR_HDR oHeader, MasterAutoNumber _Auto, List<SCV_AGR_ITM> oAgrItems, List<SCV_AGR_SES> oAgrSes, List<SCV_AGR_COVER_ITM> oAgrCovItm, List<scv_agr_cha> oAgrCha, List<scv_agr_payshed> oAgrPayShed, MasterAutoNumber _invoiceAuto, out string GenAgr)
        {
            Int32 _effects = 0;
            string _db = string.Empty;
            bool isInsert = true;
            try
            {
                //_custServiceDAL = new CustServiceDAL();
                //_custServiceDAL.ConnectionOpen();
                //_custServiceDAL.BeginTransaction();

                _db = DataBase._ems;

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _generalDAL = new GeneralDAL();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();

                int GenSeq = -99;

                if (oHeader.Sag_seq_no == -99)
                {
                    oHeader.Sag_seq_no = _salesDAL.GetEstimateSeq();
                }

                string _ESTNO = string.Empty;
                if (oHeader.Sag_agr_no == "" || oHeader.Sag_agr_no == null)
                {
                    MasterAutoNumber _reversInv = _inventoryDAL.GetAutoNumber(_Auto.Aut_moduleid, _Auto.Aut_direction, _Auto.Aut_start_char, _Auto.Aut_cate_tp, _Auto.Aut_cate_cd, _Auto.Aut_modify_dt, _Auto.Aut_year);

                    _reversInv.Aut_direction = null;
                    _reversInv.Aut_modify_dt = null;
                    _ESTNO = _reversInv.Aut_cate_cd + "-" + _reversInv.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _reversInv.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                    _inventoryDAL.UpdateAutoNumber(_reversInv);

                    oHeader.Sag_agr_no = _ESTNO;
                    isInsert = true;
                    int resultHDr = _salesDAL.SaveAgreementHeader(oHeader);
                    GenAgr = _ESTNO;
                }
                else
                {
                    isInsert = false;
                    _ESTNO = oHeader.Sag_agr_no;
                    _salesDAL.SaveAgreementHeader(oHeader);
                    GenSeq = oHeader.Sag_seq_no;
                    GenAgr = oHeader.Sag_agr_no;
                }

                foreach (SCV_AGR_ITM item in oAgrItems)
                {
                    if (isInsert == true)
                        item.Sai_seq_no = oHeader.Sag_seq_no;

                    item.Sai_agr_no = _ESTNO;
                    _effects += _salesDAL.SaveAgreementItem(item);

                }

                foreach (scv_agr_cha cha in oAgrCha)
                {
                    if (isInsert == true)
                        cha.Sac_seq = oHeader.Sag_seq_no;

                    cha.Sac_agr_no = _ESTNO;
                    _effects += _salesDAL.SaveAgreementCharges(cha);

                }
                foreach (scv_agr_payshed payShed in oAgrPayShed)
                {
                    if (isInsert == true)
                        payShed.Sap_seq = oHeader.Sag_seq_no;

                    payShed.Sap_agr_no = _ESTNO;
                    _effects += _salesDAL.SaveAgreementPayShed(payShed);

                }

                foreach (SCV_AGR_SES sess in oAgrSes)
                {
                    if (isInsert == true)
                        sess.Saga_seq_no = oHeader.Sag_seq_no;

                    sess.Saga_agr_no = _ESTNO;
                    _effects += _salesDAL.SaveAgreementSess(sess);

                }
                foreach (SCV_AGR_COVER_ITM _cov in oAgrCovItm)
                {
                    if (isInsert == true)
                        _cov.Saic_seq_no = oHeader.Sag_seq_no;

                    _cov.Saic_agr_no = _ESTNO;
                    _effects += _salesDAL.SaveAgreementCoverItem(_cov);

                }


                //string _invNo = "";
                //string _DONo = "";
                //string _recNo = "";
                string _error = "";
                //string _invoiceSeq = "";
                //string _recieptSeq = "";
                //InventoryHeader _invHdr = new InventoryHeader();
                //DataTable _dataTable = null;

                //if (_recieptHeader.Sar_tot_settle_amt > 0)
                //{
                //    Service_SaveInvoiceWithDeliveryOrderWithTransaction(_invoiceHeader, _invoiceItem, _invoiceSerial, _recieptHeader, _recieptItem, null, null, null, _invoiceAuto, _recieptAuto, null, false, out _invNo, out _recNo, out _DONo, _inventoryDAL, _salesDAL, _generalDAL, _inventoryRepDAL, false, false, out _error, false, out _invoiceSeq, out _recieptSeq, out _invHdr, out _dataTable);

                //    //update auto number
                //    _invoiceAuto.Aut_year = null;
                //    MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
                //    _invNo = _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                //    _invoiceAuto.Aut_year = null;
                //    _invoiceAuto.Aut_modify_dt = null;
                //    if (_salesDAL.CheckSalesNo("sp_getinvno", "p_inv_no", _invNo) == 1)
                //    {
                //        _error = "Invoice process terminated. Please re-process.(Hint - Duplicating Invoice No)";
                //        //_invoiceNo = string.Empty;
                //        //_receiptNo = string.Empty;
                //        //_deliveryOrder = string.Empty;
                //        //_errorlist = _error;
                //        _effects = -1;

                //        _salesDAL.TransactionRollback();
                //        _inventoryDAL.TransactionRollback();
                //        return _effects;

                //    }
                //    _salesDAL.UpdateInvoiceWithTaxCommission(_invNo, string.Empty, Convert.ToInt32(_invoiceSeq), Convert.ToInt32(_recieptSeq));
                //    _salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
                //}

                if (!string.IsNullOrEmpty(_error))
                {
                    //_custServiceDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                    _salesDAL.TransactionRollback();
                    _generalDAL.TransactionRollback();
                    _effects = -1;
                    GenAgr = _error;
                    return _effects;
                }

                //_custServiceDAL.TransactionCommit();
                //_custServiceDAL.ConnectionClose();

                _db = DataBase._ems;
                _inventoryDAL.TransactionCommit();

                _db = DataBase._ems;
                _salesDAL.TransactionCommit();

                _db = DataBase._ems;
                _generalDAL.TransactionCommit();

                return _effects;
            }
            catch (Exception ex)
            {
                //_custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _effects = -1;
                GenAgr = ex.Message;
                return _effects;
            }
        }
        //kapila
        public Int32 SaveGiftVoucherPages(List<GiftVoucherPages> _voucherList)
        {
            Int32 _eff = 0;
            _fmsInventoryDal = new FMS_InventoryDAL();
            _fmsInventoryDal.ConnectionOpen();
            _fmsInventoryDal.BeginTransaction();

            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();

            MasterAutoNumber _auto = new MasterAutoNumber();
            _auto.Aut_moduleid = "SGV";
            _auto.Aut_number = 0;
            _auto.Aut_start_char = "SGV";

            MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);

            string _ref = _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
            _inventoryDAL.UpdateAutoNumber(_auto);

            foreach (GiftVoucherPages _list in _voucherList)
            {
                _list.Gvp_ref = _ref;
                _eff = _fmsInventoryDal.SaveGiftVoucherPages(_list);
            }

            _inventoryDAL.ConnectionClose();
            _fmsInventoryDal.TransactionCommit();
            return _eff;

        }

        public Int32 UpdateVouTransfer(List<GiftVoucherPages> _voucherList)
        {
            Int32 _eff = 0;
            _fmsInventoryDal = new FMS_InventoryDAL();
            _fmsInventoryDal.ConnectionOpen();
            _fmsInventoryDal.BeginTransaction();

            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();



            foreach (GiftVoucherPages _list in _voucherList)
            {
                _eff = _fmsInventoryDal.UpdateVouTransfer(_list.Gvp_com, _list.Gvp_pc, _list.Gvp_gv_cd, _list.Gvp_book, _list.Gvp_page, _list.Gvp_cre_by);
            }

            _inventoryDAL.ConnectionClose();
            _fmsInventoryDal.TransactionCommit();
            return _eff;

        }


        //kapila
        public Int32 UpdateBulkToDipositBank(string _com, string _pc, string _ref, string _curBankCd, string _dipBankCd, string _modby)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            _salesDAL.BeginTransaction();
            Int32 _eff = _salesDAL.UpdateBulkToDipositBank(_com, _pc, _ref, _curBankCd, _dipBankCd, _modby);
            _salesDAL.TransactionCommit();
            return _eff;
        }

        //kapila
        public DataTable GetReceiptByRecNo(string _recNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReceiptByRecNo(_recNo);
        }

        public Int32 SavePromotorCommDef(List<HPPrmotorCommDef> _Promolst, out string _msg)
        {
            Int32 _eff = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                foreach (HPPrmotorCommDef _list in _Promolst)
                {
                    _salesDAL.SavePromotorCommDef(_list);
                }

                _salesDAL.TransactionCommit();
                _msg = "";
                _eff = 1;
            }
            catch (Exception ex)
            {
                _msg = "ERROR : " + ex.Message.ToString();
                _eff = -1;

                _salesDAL.TransactionRollback();

            }
            return _eff;
        }

        public Int32 SaveBulkSaleInvReservation(MasterBusinessEntity _businessEntity, Int32 _seqno, string _batch_no, string _com, string _loc, string _itm_cd, string _itm_stus, string _ser1, string _ser2, string _ref_no, string _last_modi_by, string _rem, DateTime _date, Int32 _isNIC, Int32 _isPP, Int32 _isPID, Int32 _isDL, Int32 _isBRNo, Int32 _isIID, Int32 _isFoundBOCProj, string _recno, out string customerCD)
        {
            Int32 effect = 0;
            Int32 _eff = 0;
            customerCD = "";
            try
            {
                {
                    _salesDAL = new SalesDAL();
                    _salesDAL.ConnectionOpen();
                    _salesDAL.BeginTransaction();

                    _inventoryDAL = new InventoryDAL();
                    _inventoryDAL.ConnectionOpen();
                    _inventoryDAL.BeginTransaction();

                    //if (_businessEntity.Mbe_cd == null || _businessEntity.Mbe_cd == "")
                    //{
                    //    //new customer
                    //    MasterAutoNumber _auto = new MasterAutoNumber();
                    //    _auto.Aut_moduleid = "CUS";
                    //    _auto.Aut_number = 0;
                    //    _auto.Aut_start_char = "CONT";

                    //    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);

                    //    string _cusNo = _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    //    _inventoryDAL.UpdateAutoNumber(_auto);
                    //    _businessEntity.Mbe_cd = _cusNo;

                    //    customerCD = _cusNo;
                    //    effect = _salesDAL.SaveBusinessEntityDetail(_businessEntity);
                    //}
                    //else
                    //{
                    //    customerCD = _businessEntity.Mbe_cd;
                    //    effect = _salesDAL.UpdateCustomerProfile(_businessEntity);
                    //}

                    if (_isFoundBOCProj == 0)
                    {
                        _eff = _salesDAL.SaveTempBOCProject(_batch_no, _com, _loc, _businessEntity.Mbe_cd, _itm_cd, _itm_stus, _ser1, _ser2, _ref_no, _last_modi_by, _rem, _date, _isNIC, _isPP, _isPID, _isDL, _isBRNo, _isIID, _recno);
                        _inventoryDAL.Update_serial_status(_com, _loc, _itm_cd, _ser1, -1, _seqno);
                    }

                    if (_seqno != 0)
                    {
                        //Int32 _eff = _salesDAL.SaveTempBOCProject(_batch_no, _com, _loc, _businessEntity.Mbe_cd, _itm_cd, _itm_stus, _ser1, _ser2, _ref_no, _last_modi_by);
                        //_inventoryDAL.Update_serial_status(_com, _loc, _itm_cd, _ser1, -1, _seqno);
                        // _inventoryDAL.UpdateLocationRes(_com, _loc, _itm_cd, _itm_stus, _last_modi_by, 1);
                    }

                    _salesDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();
                }
            }
            catch (Exception ex)
            {
                customerCD = string.Empty;
                customerCD = "ERROR : " + ex.Message.ToString();
                _eff = -1;

                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();

            }
            return _eff;
        }

        public Int32 UpdateBulkSaleInvReservation(MasterBusinessEntity _businessEntity, Int32 _seqno, string _batch_no, string _com, string _loc, string _itm_cd, string _itm_stus, string _ser1, string _ser2, string _ref_no, string _last_modi_by, Int32 _seqno2, string _itm_cd2, string _itm_stus2, string _ser12, string _ser22, string _ref_no2, string _rem, DateTime _date, Int32 _isNIC, Int32 _isPP, Int32 _isPID, Int32 _isDL, Int32 _isBRNo, Int32 _isIID, string _recno, out string customerCD)
        {
            Int32 effect = 0;
            customerCD = "";
            try
            {

                _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen(); _salesDAL.BeginTransaction();
                _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen(); _inventoryDAL.BeginTransaction();

                Int32 _effect = _salesDAL.UpdateCustomerProfile(_businessEntity);

                Int32 _eff = _salesDAL.SaveTempBOCProject(_batch_no, _com, _loc, _businessEntity.Mbe_cd, _itm_cd2, _itm_stus2, _ser12, _ser22, _ref_no2, _last_modi_by, _rem, _date, _isNIC, _isPP, _isPID, _isDL, _isBRNo, _isIID, _recno);
                _inventoryDAL.Update_serial_status(_com, _loc, _itm_cd, _ser1, 1, _seqno);

                //update new serial
                _inventoryDAL.Update_serial_status(_com, _loc, _itm_cd2, _ser12, -1, _seqno2);

                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                effect = 1;

            }
            catch (Exception ex)
            {
                customerCD = string.Empty;
                customerCD = "ERROR : " + ex.Message.ToString();
                effect = -1;

                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();

            }
            return effect;
        }

        public Int32 SaveCustomerPriorityLevel(List<MST_BUSPRIT_LVL> _custLevel, string _cusCode)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            _salesDAL.deleteCustPrioLevels(_cusCode);

            foreach (MST_BUSPRIT_LVL _list in _custLevel)
            {
                _salesDAL.SaveCustomerPriorityLevel(_list);
            }
            _salesDAL.ConnectionClose();
            return 1;
        }

        //Written By Prabhath on 28/04/2012
        public List<InvoiceItem> GetAllSaleDocumentItemList(string _company, string _profitCenter, string _documentType, string _invoiceNo, string _status)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAllSaleDocumentItemList(_company, _profitCenter, _documentType, _invoiceNo, _status);
        }

        public DataTable getReceiptByEngNo(string _com, string _pc, string _eng)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getReceiptByEngNo(_com, _pc, _eng);
        }

        //Written By Chamal on 12/06/2012
        public InvoiceHeader GetPendingInvoiceHeader(string _company, string _profitCenter, string _documentType, string _invoiceNo, string _status)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPendingInvoiceHeader(_company, _profitCenter, _documentType, _invoiceNo, _status);
        }

        //kapila 20/8/2014
        public DataTable GetCustInBOCProject(string _company, string _loc, string _custID)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCustInBOCProject(_company, _loc, _custID);
        }

        //written by darshana on 16/06/2012
        public List<InvoiceItem> GetPendingInvoiceItems(string _inv)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPendingInvoiceItems(_inv);
        }

        //written by chamal on 15/08/2012
        public InvoiceItem GetPendingInvoiceItemsByItem(string _inv, string _itemcode)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPendingInvoiceItemsByItem(_inv, _itemcode);
        }

        //written by darshana 19/07/2012
        public List<InvoiceItem> GetAllInvoiceItems(string _inv)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAllInvoiceItems(_inv);
        }

        //Written by darshana on 16/06/2012
        public List<InvoiceHeader> GetPendingInvoices(string _com, string _pc, string _cus, string _inv, string _status, string _fdate, string _tdate)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPendingInvoices(_com, _pc, _cus, _inv, _status, _fdate, _tdate);

        }
        public List<InvoiceHeader> GetPendingInvoicesweb(string _com, string _pc, string _cus, string _inv, string _status, string _fdate, string _tdate)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPendingInvoicesweb(_com, _pc, _cus, _inv, _status, _fdate, _tdate);

        }
        //kapila
        public DataTable GetMailLocations(string _pb, string _lvl)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetMailLocations(_pb, _lvl);
        }
        //Written by darshana on 16/06/2012
        public List<InvoiceHeaderTBS> GetPendingInvoicesTBS(string _com, string _pc, string _cus, string _inv, string _status, string _fdate, string _tdate)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPendingInvoicesTBS(_com, _pc, _cus, _inv, _status, _fdate, _tdate);

        }

        //written by darshana 18/07/2012
        public List<InvoiceHeader> GetHireSaleInvoiceForReverse(string _com, string _pc, string _cus, string _inv, string _fdate, string _tdate, string _AccNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHireSaleInvoiceForReverse(_com, _pc, _cus, _inv, _fdate, _tdate, _AccNo);
        }

        public DataTable GetAllSaleDocumentItemTable(string _company, string _profitCenter, string _documentType, string _invoiceNo, string _status)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAllSaleDocumentItemTable(_company, _profitCenter, _documentType, _invoiceNo, _status);
        }

        public MasterProfitCenter GetProfitCenter(string _company, string _profitCenter)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetProfitCenter(_company, _profitCenter);

        }

        public List<MasterProfitCenter> GetProfitCenterList(string _company, string _profitCenter)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetProfitCenterList(_company, _profitCenter);

        }

        public List<MasterProfitCenter> GetProfitCenterListbyLike(string _company, string _profitCenter, string _description)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetProfitCenterListbyLike(_company, _profitCenter, _description);

        }

        public DataTable GetProfitCenterTable(string _company, string _profitCenter)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetProfitCenterTable(_company, _profitCenter);
        }

        public PriceBookLevelRef GetPriceLevel(string _company, string _book, string _level)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceLevel(_company, _book, _level);
        }

        public List<PriceBookLevelRef> GetPriceLevelList(string _company, string _book, string _level)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceLevelList(_company, _book, _level);
        }

        public DataTable GetPriceLevelTable(string _company, string _book, string _level)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceLevelTable(_company, _book, _level);
        }

        public PriceBookRef GetPriceBook(string _company, string _book)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceBook(_company, _book);
        }

        public DataTable GetPriceBookTable(string _company, string _book)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceBookTable(_company, _book);
        }

        public List<PriceBookRef> GetPriceBooklist(string _company)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceBooklist(_company);
        }
        //dilshan 29/09/2017
        public List<GetPCCategory> GetPCCatlist(string _company)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPCCatlist(_company);
        }
        //public DataTable GetPCCatlist(string _company)
        //{
        //    _salesDAL = new SalesDAL();
        //    return _salesDAL.GetPCCatlist(_company);
        //}

        public List<PriceDetailRef> GetPrice(string _company, string _profitCenter, string _invType, string _priceBook, string _priceLevel, string _customer, string _item, decimal _qty, DateTime _currentDate)
        {

            _salesDAL = new SalesDAL();
            //Check the price for the specific customer availabillity (even for special promotions)
            //Check the price for special promotion without Customer
            //Check the price for normal price
            //If no price =>message

            List<PriceDetailRef> _priceDetailRef = new List<PriceDetailRef>();
            List<PriceDetailRef> _returnlist = new List<PriceDetailRef>();
            DataTable _dtChnl = new DataTable();

            //1.With customer
            _priceDetailRef = _salesDAL.GetPriceDetail(_priceBook, _priceLevel, _item, _qty, _currentDate, _customer);

            //2.Without Customer
            if (_priceDetailRef.Count <= 0)
            {
                _priceDetailRef = _salesDAL.GetPriceDetail(_priceBook, _priceLevel, _item, _qty, _currentDate, string.Empty);
            }

            List<PriceDetailRef> _lists = new List<PriceDetailRef>();
            var _types = _priceDetailRef.Select(x => x.Sapd_price_type).Distinct();
            foreach (var _type in _types)
            {
                if (_type != 0)
                {
                    var _lst = _priceDetailRef.Where(x => x.Sapd_price_type == _type).ToList();
                    if (_lst != null)
                        if (_lst.Count > 0)
                            _lists.AddRange(_lst);
                }
                else
                {
                    var _lst = _priceDetailRef.Where(x => x.Sapd_price_type == _type).ToList();
                    if (_lst != null)
                        if (_lst.Count > 0)
                            _lists.Add(_lst[0]);
                }
            }

            var _promo = _lists.Where(x => x.Sapd_price_type != 0).ToList();
            var _normal = _lists.Where(x => x.Sapd_price_type == 0).ToList();

            if (_promo != null)
                if (_promo.Count > 0)
                    foreach (PriceDetailRef i in _promo)
                    {
                        List<PriceProfitCenterPromotion> _lst = new List<PriceProfitCenterPromotion>();
                        _lst = _salesDAL.CheckPromotion(_company, _profitCenter, i.Sapd_promo_cd, i.Sapd_pb_seq, "PC");
                        if (_lst != null)
                        {
                            if (_lst.Count > 0)
                                _returnlist.Add(i);
                        }
                        else
                        {
                            _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitCenter, "SCHNL");
                            _lst = _salesDAL.CheckPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), i.Sapd_promo_cd, i.Sapd_pb_seq, "SCHNL");
                            if (_lst != null)
                            {
                                if (_lst.Count > 0)
                                    _returnlist.Add(i);
                            }
                            else
                            {
                                _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitCenter, "CHNL");
                                _lst = _salesDAL.CheckPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), i.Sapd_promo_cd, i.Sapd_pb_seq, "CHNL");
                                if (_lst != null)
                                {
                                    if (_lst.Count > 0)
                                        _returnlist.Add(i);
                                }
                            }
                        }
                    }
            if (_normal != null)
                if (_normal.Count > 0) _returnlist.AddRange(_normal);





            return _returnlist;

        }

        public PriceDefinitionRef GetPriceDefinition(string _company, string _profitCenter, string _invType, string _book, string _level)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceDefinition(_company, _profitCenter, _invType, _book, _level);
        }

        public List<PriceDefinitionRef> GetPriceDefinitionByBookAndLevel(string _company, string _book, string _level, string _invoiceType, string _profitCenter)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceDefinitionByBookAndLevel(_company, _book, _level, _invoiceType, _profitCenter);
        }

        public List<SAR_DOC_CHANNEL_PRICE_DEFN> GetPriceDefinitionByBookAndLevelSubChannel(string _company, string _book, string _level, string _invoiceType, string _subchannel)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceDefinitionByBookAndLevelSubChannel(_company, _book, _level, _invoiceType, _subchannel);
        }


        public DataTable GetPriceDefinitionByBookAndLevelTable(string _company, string _book, string _level, string _invoiceType, string _profitCenter)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceDefinitionByBookAndLevelTable(_company, _book, _level, _invoiceType, _profitCenter);
        }

        public bool IsValidInvoiceType(string _company, string _profitCenter, string _invType)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.IsValidInvoiceType(_company, _profitCenter, _invType);
        }

        public MasterBusinessEntity GetBusinessCompanyDetail(string _company, string _businessCompanyCode, string _nic, string _mobile, string _businessType)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetBusinessCompanyDetail(_company, _businessCompanyCode, _nic, _mobile, _businessType);
        }

        public MasterBusinessEntity GetActiveBusinessCompanyDetail(string _company, string _businessCompanyCode, string _nic, string _mobile, string _businessType)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetActiveBusinessCompanyDetail(_company, _businessCompanyCode, _nic, _mobile, _businessType);
        }

        public MasterBankAccount GetBankDetails(string _company, string _BankCode, string _AccCode)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetBankDetails(_company, _BankCode, _AccCode);
        }

        public List<RecieptItem> GetReceiptItemList(string _invoice)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReceiptItemList(_invoice);
        }

        public DataTable GetReceiptItemTable(string _invoice)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReceiptItemTable(_invoice);
        }

        #region Quotation
        //created by shani
        //#region QuotationSave 
        //public Int16 QuotationSave(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo)
        //{
        //    using (TransactionScope _tr = new TransactionScope())
        //    {
        //        _inventoryRepDAL = new ReptCommonDAL();
        //        _inventoryDAL = new InventoryDAL();

        //        _inventoryRepDAL.ConnectionOpen();
        //        _inventoryDAL.ConnectionOpen();

        //        Int16 effect = SaveInwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub);
        //        effect = UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "+", out _docNo);

        //        _inventoryRepDAL.ConnectionClose();
        //        _inventoryDAL.ConnectionClose();
        //        _tr.Complete();
        //        return effect;
        //    }
        //}
        //#endregion
        #region Quotation Saving
        public Int32 Quotation_save(QuotationHeader header, List<QoutationDetails> det_line_list, MasterAutoNumber _masterAutoNumber, List<QuotationSerial> _saveQuoSer, InventoryRequest _inventoryRequest, List<QuotationSerial> _saveQuoSerSCM, MasterAutoNumber _mastAutoNo, Boolean _isSer, ReptPickHeader _pickHeader, List<ReptPickSerials> _pickSerials, out string docno)
        {
            Int32 effect_ = 0;
            Int32 _seqNo = 0;
            Int32 result = 0;
            Int32 result_1 = 0;
            //using (TransactionScope _tr = new TransactionScope())
            //{
            try
            {
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                _inventoryRepDAL = new ReptCommonDAL();
                // _ScmCommonDAL = new SCMCommonDAL();



                // _ScmCommonDAL.ConnectionOpen(); _ScmCommonDAL.BeginTransaction();
                _salesDAL.ConnectionOpen(); _salesDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen(); _inventoryDAL.BeginTransaction();
                _inventoryRepDAL.ConnectionOpen(); _inventoryRepDAL.BeginTransaction();

                if (header.Qh_no == null)
                {
                    _seqNo = _inventoryDAL.GetSerialID();

                    List<QoutationDetails> _saveList = new List<QoutationDetails>();
                    header.Qh_seq_no = _seqNo;
                    header.Qh_no = _seqNo.ToString();

                    foreach (QoutationDetails line in det_line_list)
                    {
                        line.Qd_seq_no = _seqNo;
                        line.Qd_no = _seqNo.ToString();
                        _saveList.Add(line);
                    }

                    effect_ = _salesDAL.Save_QuotationHDR(header);
                    effect_ = _salesDAL.Save_QuotationDET(_saveList);

                    foreach (QoutationDetails _itm in det_line_list)
                    {
                        List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                        _itmTax = _salesDAL.GetItemTax(header.Qh_com, _itm.Qd_itm_cd, _itm.Qd_itm_stus, string.Empty, string.Empty);

                        Int32 _taxLine = 0;
                        foreach (MasterItemTax _one in _itmTax)
                        {

                            QuotationItemTax _tax = new QuotationItemTax();
                            _taxLine = _taxLine + 1;
                            _tax.Qdt_itm_cd = _itm.Qd_itm_cd;
                            _tax.Qdt_itm_tp = "";
                            _tax.Qdt_line_no = _itm.Qd_line_no;
                            _tax.Qdt_no = _seqNo.ToString();
                            _tax.Qdt_seq_no = _seqNo;
                            _tax.Qdt_tax_amt = ((_itm.Qd_amt - _itm.Qd_dis_amt) * _one.Mict_tax_rate / 100);
                            _tax.Qdt_tax_rate = _one.Mict_tax_rate;
                            _tax.Qdt_tax_tp = _one.Mict_taxrate_cd;
                            _tax.Qdt_tline_no = _taxLine;
                            _salesDAL.SaveQuoItemTax(_tax);
                        }
                    }

                    foreach (QuotationSerial _two in _saveQuoSer)
                    {
                        _two.Qs_seq_no = _seqNo;
                        _two.Qs_no = _seqNo.ToString();

                        //if (_isSer == true)
                        //{
                        //    _inventoryDAL.Update_serial_status(header.Qh_com, _two.Qs_ser_loc, _two.Qs_item, _two.Qs_ser, -1, _two.Qs_ser_id);
                        //}
                        _salesDAL.SaveQuoSerial(_two);

                    }
                    //kapila 3/8/2016
                    if (_saveQuoSerSCM != null)
                    {
                        foreach (QuotationSerial _tree in _saveQuoSerSCM)
                        {
                            _tree.Qs_seq_no = _seqNo;
                            _tree.Qs_no = _seqNo.ToString();

                            _salesDAL.SaveQuoSerial(_tree);

                        }
                    }

                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                    string _documentNo = _masterAutoNumber.Aut_cate_cd + "-" + _masterAutoNumber.Aut_start_char + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);

                    // string _documentNo = "QUO/" + string.Format(_autoNo.ToString(), "000000");

                    effect_ = _salesDAL.UpdateQuotationDocNo(header.Qh_seq_no, _documentNo);

                    effect_ = _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);

                    if (_isSer == true)
                    {
                        if (_pickHeader != null)
                        {

                            _pickHeader.Tuh_doc_no = _documentNo;

                            //Generate pick header header
                            _inventoryRepDAL.SavePickedHeader(_pickHeader);


                            if (_pickSerials != null)
                            {
                                foreach (ReptPickSerials _list in _pickSerials)
                                {
                                    //_lineNo = _lineNo + 1;

                                    _list.Tus_base_doc_no = _pickHeader.Tuh_doc_no;

                                    if (_list.Tus_ser_1 != "N/A")   //kapila 16/3/2017 req by chamal/dulanga
                                    {
                                        _inventoryRepDAL.SavePickedItemSerials(_list);
                                        _inventoryDAL.Update_serial_status(_list.Tus_com, _list.Tus_loc, _list.Tus_itm_cd, _list.Tus_ser_1, -1, _list.Tus_seq_no);
                                        //Added by Prabhath on 12/12/2013 -- reservation on inr_loc
                                        _inventoryDAL.UpdateLocationRes(_list.Tus_com, _list.Tus_loc, _list.Tus_itm_cd, _list.Tus_itm_stus, _pickHeader.Tuh_usr_id, _list.Tus_qty);
                                    }

                                }
                            }
                        }
                    }

                    //kapila 13/7/2016-------------------------------------------------
                    if (_inventoryRequest != null)
                    {
                        if (_inventoryRequest.Itr_req_no != null)
                        {
                            _inventoryRequest.Itr_ref = _documentNo;
                            result_1 = _inventoryDAL.SaveInventoryRequest(_inventoryRequest);

                            //Save InventoryRequest Item details.
                            if ((_inventoryRequest.InventoryRequestItemList != null) && (_inventoryRequest.InventoryRequestItemList.Count > 0))
                            {
                                foreach (InventoryRequestItem _inventoryRequestItem in _inventoryRequest.InventoryRequestItemList)
                                {
                                    _inventoryRequestItem.Itri_seq_no = result_1;
                                    _inventoryDAL.SaveInventoryRequestItem(_inventoryRequestItem);
                                }

                                if (_inventoryRequest.InventoryRequestSerialsList != null)
                                {
                                    foreach (InventoryRequestSerials _inventoryRequestSerial in _inventoryRequest.InventoryRequestSerialsList)
                                    {
                                        _inventoryRequestSerial.Itrs_seq_no = result_1;
                                        _inventoryDAL.SaveInventoryRequestSerials(_inventoryRequestSerial);
                                    }
                                }

                            }

                            //update  SCM1 tables
                            string _scmItmStus = "";
                            DataTable _dtItmStus = new DataTable();
                            MasterItem _mstItm = new MasterItem();
                            DataTable _dtAUto = new DataTable();
                            Int32 _aotoNumber = 0;

                            _dtAUto = _inventoryDAL.getAutoNumberSCM(_inventoryRequest.Itr_loc, "SRA");
                            _aotoNumber = Convert.ToInt32(_dtAUto.Rows[0]["number_n"]);
                            string _docDisReq = _inventoryRequest.Itr_loc + "-SRA" + _aotoNumber.ToString("00000", CultureInfo.InvariantCulture);
                            _inventoryDAL.UpdateAutoNumberSCM(_inventoryRequest.Itr_loc, "SRA");

                            _dtAUto = _inventoryDAL.getAutoNumberSCM(_inventoryRequest.Itr_issue_from, "MRNA");
                            _aotoNumber = Convert.ToInt32(_dtAUto.Rows[0]["number_n"]);
                            string _docDisWH = _inventoryRequest.Itr_issue_from + "-MRNA" + _aotoNumber.ToString("000000", CultureInfo.InvariantCulture);
                            _inventoryDAL.UpdateAutoNumberSCM(_inventoryRequest.Itr_issue_from, "MRNA");


                            result = _inventoryDAL.save_dispatch_request(_inventoryRequest, _docDisReq);

                            result = _inventoryDAL.save_dispatch_req_whouse_hdr(_inventoryRequest, _docDisWH, _docDisReq);


                            foreach (InventoryRequestItem _inventoryRequestItem in _inventoryRequest.InventoryRequestItemList)
                            {
                                _dtItmStus = _inventoryDAL.GetItemStatusMaster(_inventoryRequestItem.Itri_itm_stus, null);
                                _scmItmStus = _dtItmStus.Rows[0]["mis_old_cd"].ToString();
                                _mstItm = _inventoryDAL.GetItem(_inventoryRequest.Itr_com, _inventoryRequestItem.Itri_itm_cd);

                                result = _inventoryDAL.save_dispatch_request_details(_inventoryRequestItem, _docDisReq, _inventoryRequest.Itr_dt, _scmItmStus, _mstItm.Mi_shortdesc, _mstItm.Mi_model, _mstItm.Mi_brand);

                                result = _inventoryDAL.save_dispatch_req_whouse_det(_inventoryRequestItem, _docDisWH, _docDisReq, _scmItmStus);

                            }

                            //reserve serial in SCM
                            foreach (QuotationSerial _tree in _saveQuoSerSCM)
                            {
                                result = _inventoryDAL.ReserveSerialSCM(_docDisWH, _inventoryRequest.Itr_com, _inventoryRequest.Itr_issue_from, _tree.Qs_item, _tree.Qs_ser);
                            }

                        nx:
                            Int32 _auto_No = _inventoryDAL.GetAutoNumber(_mastAutoNo.Aut_moduleid, _mastAutoNo.Aut_direction, _mastAutoNo.Aut_start_char, _mastAutoNo.Aut_cate_tp, _mastAutoNo.Aut_cate_cd, _mastAutoNo.Aut_modify_dt, _mastAutoNo.Aut_year).Aut_number;
                            string _document_No = _inventoryRequest.Itr_loc + "-" + _mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _auto_No.ToString("00000", CultureInfo.InvariantCulture);
                            _inventoryDAL.UpdateAutoNumber(_mastAutoNo);
                            //Check Save Req No
                            if (_inventoryDAL.CheckInventoryNo("sp_getreqno", "p_req_no", _document_No) == 1)
                            {
                                goto nx;
                            }
                            // Update document no in Request Header table.
                            _inventoryDAL.UpdateInventoryRequestDocNo(result_1, _document_No);

                            //update document no in dispatch request
                            _inventoryDAL.UpdateDispatchRequestDocNo(_inventoryRequest.Itr_req_no, _document_No);

                            // _docNo = _document_No;


                        }

                    }


                    //------------------------------------------------------------------
                    // docno = "Successfully created, Quotation # : " + header.Qh_no;
                    docno = _documentNo;
                }
                else
                {
                    _seqNo = header.Qh_seq_no;
                    effect_ = _salesDAL.Save_QuotationHDR(header);
                    // docno = "Successfully updated, Quotation # : " + header.Qh_no;
                    docno = header.Qh_no;
                }



                //_salesDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();
                // _ScmCommonDAL.TransactionCommit();

                //_tr.Complete();
                //return effect_;
                effect_ = 1;
            }
            catch (Exception err)
            {
                effect_ = -1;
                docno = "ERROR : " + err.Message.ToString();
                //documentNoGRN = documentNo;
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                //_ScmCommonDAL.TransactionRollback();

            }
            return effect_;
        }
        #endregion

        public Int32 Save_QuotationHDR(QuotationHeader header)
        {

            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int32 effect = _salesDAL.Save_QuotationHDR(header);
            _salesDAL.ConnectionClose();
            return effect;
        }

        public Int32 SaveQuotationHDR(QuotationHeader header)
        {

            //_salesDAL = new SalesDAL();

            Int32 effect = _salesDAL.Save_QuotationHDR(header);

            return effect;
        }

        public Int32 SaveQuotationDET(List<QoutationDetails> det_line_list)
        {

            //_salesDAL = new SalesDAL();

            Int32 effect = _salesDAL.Save_QuotationDET(det_line_list);

            return effect;
        }
        public Int32 Save_QuotationDET(List<QoutationDetails> det_line_list)
        {
            //DO NOT DELETE THIS METHOD
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int32 effect = _salesDAL.Save_QuotationDET(det_line_list);
            _salesDAL.ConnectionClose();
            return effect;
        }
        public Int32 Delete_Quotation_DET(string quotation_no)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int32 effect = _salesDAL.Delete_Quotation_DET(quotation_no);
            _salesDAL.ConnectionClose();
            return effect;
        }


        public Int32 Update_Quotation_HDR_status(string quotation_no, string newStatus)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int32 effect = _salesDAL.Update_Quotation_HDR_status(quotation_no, newStatus);
            _salesDAL.ConnectionClose();
            return effect;
        }

        public QuotationHeader Get_Quotation_HDR(string quotation_no)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_Quotation_HDR(quotation_no);
        }




        public List<QoutationDetails> Get_all_linesForQoutation(string qoutation_no)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_all_linesForQoutation(qoutation_no);
        }

        public List<QuotationHeader> Get_all_Quotations(string company, string profCenter, string supCD, string status, string fromDT, string toDT)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_all_Quotations(company, profCenter, supCD, status, fromDT, toDT);
        }
        #endregion

        public Int32 SavePriceLevel(PriceBookLevelRef _level)
        {
            Int32 _effect = 0;
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _effect = _salesDAL.SavePriceLevel(_level);
                _salesDAL.ConnectionClose();
                _effect = 1;
                _tr.Complete();
            }
            return _effect;
        }

        public Int32 UpdateManagerIssueReceipt(string _com, string _pc, string _recno, string _user)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int32 _effect = _salesDAL.UpdateManagerIssueReceipt(_com, _pc, _recno, _user);
            _salesDAL.ConnectionClose();
            return _effect;
        }

        public Int32 SavePriceBook(List<PriceBookRef> _book)
        {
            Int32 _effect = 0;
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                foreach (PriceBookRef _list in _book)
                {
                    _salesDAL.SavePriceBook(_list);
                }

                _salesDAL.ConnectionClose();
                _effect = 1;
                _tr.Complete();
            }
            return _effect;
        }



        public Int32 SavePriceBookDefinition(sar_pb_def _pbdef, List<sar_pb_def_det> _pbdet, out string _docNo)
        {
            Int32 _effect = 0;
            Int32 _line = 0;
            try
            { // Nadeeka
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                int SeqNum = _salesDAL.GetPricedefSeq();
                _pbdef.Spd_seq = SeqNum;
                _salesDAL.SavePriceBookDefinition(_pbdef);
                _salesDAL.DeletepbDefDet(_pbdef.Spd_seq);
                foreach (sar_pb_def_det _list in _pbdet)
                {
                    _line = _line + 1;
                    _list.Spdd_seq = SeqNum;
                    _list.Spdd_line_no = _line;
                    _salesDAL.SavePriceBookDefinitionDet(_list);
                }
                _salesDAL.TransactionCommit();
                _salesDAL.ConnectionClose();
                _effect = 1;
                _docNo = "Saved";

            }


            catch (Exception err)
            {
                _effect = -1;
                _docNo = "ERROR : " + err.Message.ToString();

                _salesDAL.TransactionRollback();

            }
            return _effect;
        }


        public List<MasterInvoiceType> GetAllInvoiceType()
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAllInvoiceType();
        }

        public Int32 SavePriceDefinition(List<PriceDefinitionRef> _priceDef)
        {
            Int32 _effect = 0;
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                foreach (PriceDefinitionRef _list in _priceDef)
                {
                    _salesDAL.SavePriceDefinition(_list);
                }


                _salesDAL.ConnectionClose();
                _effect = 1;
                _tr.Complete();
            }
            return _effect;
        }

        public List<PriceCategoryRef> GetAllPriceCategory(string _code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAllPriceCategory(_code);
        }

        public List<PriceTypeRef> GetAllPriceType(string _code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAllPriceType(_code);
        }

        public bool IsValidBook(string _company, string _book)
        {
            _salesDAL = new SalesDAL();
            bool _isActive = false;
            PriceBookRef _is = _salesDAL.GetPriceBook(_company, _book);
            if (_is != null)
            {
                _isActive = true;
            }
            else
            {
                _isActive = false;
            }
            return _isActive;
        }

        public bool IsValidLevel(string _company, string _book, string _level)
        {
            _salesDAL = new SalesDAL();
            bool _isActive = false;
            PriceBookLevelRef _is = _salesDAL.GetPriceLevel(_company, _book, _level);
            if (_is != null)
            {
                _isActive = true;
            }
            else
            {
                _isActive = false;
            }
            return _isActive;
        }

        public List<PriceSerialRef> GetAllPriceSerial(string _book, string _level, string _item, DateTime _date, string _customer, string _company, string _profitcenter)
        {
            _salesDAL = new SalesDAL();

            List<PriceSerialRef> _list = new List<PriceSerialRef>();
            List<PriceSerialRef> _returnlist = new List<PriceSerialRef>();
            DataTable _dtChnl = new DataTable();

            _list = _salesDAL.GetAllPriceSerial(_book, _level, _item, _date, _customer);

            if (_list.Count <= 0)
            {
                _list = _salesDAL.GetAllPriceSerial(_book, _level, _item, _date, string.Empty);
            }

            //List<PriceSerialRef> _lists = new List<PriceSerialRef>();
            //var _types = _list.Select(x => x.Sars_price_type).Distinct();
            //foreach (var _type in _types)
            //{
            //    _lists.Add(_list.Where(x => x.Sars_price_type == _type).ToList()[0]);
            //}

            var _promo = _list.Where(x => x.Sars_price_type != 0).ToList();
            var _normal = _list.Where(x => x.Sars_price_type == 0).ToList();

            if (_promo != null)
                if (_promo.Count > 0)
                    foreach (PriceSerialRef i in _promo)
                    {
                        List<PriceProfitCenterPromotion> _lst = new List<PriceProfitCenterPromotion>();
                        _lst = _salesDAL.CheckPromotion(_company, _profitcenter, i.Sars_promo_cd, i.Sars_pb_seq, "PC");
                        if (_lst != null)
                        {
                            if (_lst.Count > 0)
                                _returnlist.Add(i);
                        }
                        else
                        {
                            _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitcenter, "SCHNL");
                            _lst = _salesDAL.CheckPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), i.Sars_promo_cd, i.Sars_pb_seq, "SCHNL");
                            if (_lst != null)
                            {
                                if (_lst.Count > 0)
                                    _returnlist.Add(i);
                            }
                            else
                            {
                                _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitcenter, "CHNL");
                                _lst = _salesDAL.CheckPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), i.Sars_promo_cd, i.Sars_pb_seq, "CHNL");
                                if (_lst != null)
                                {
                                    if (_lst.Count > 0)
                                        _returnlist.Add(i);
                                }
                            }
                        }
                    }
            if (_normal != null)
                if (_normal.Count > 0) _returnlist.AddRange(_normal);

            return _returnlist;
        }

        public DataTable GetAllPriceSerialData(string _book, string _level, string _item, DateTime _date, string _customer, string _serial)
        {
            _salesDAL = new SalesDAL();

            DataTable _dt = null;

            _dt = _salesDAL.GetAllPriceSerialData(_book, _level, _item, _date, _customer, _serial);

            if (_dt.Rows.Count <= 0)
            {
                _dt = _salesDAL.GetAllPriceSerialData(_book, _level, _item, _date, string.Empty, _serial);
            }
            return _dt;
        }

        public List<PriceSerialRef> GetAllPriceSerialFromSerial(string _book, string _level, string _item, DateTime _date, string _customer, string _company, string _profitcenter, string _serial)
        {
            _salesDAL = new SalesDAL();

            List<PriceSerialRef> _list = new List<PriceSerialRef>();
            List<PriceSerialRef> _returnlist = new List<PriceSerialRef>();
            DataTable _dtChnl = new DataTable();

            _list = _salesDAL.GetAllPriceSerialFromSerial(_book, _level, _item, _date, _customer, _serial);

            if (_list.Count <= 0)
            {
                _list = _salesDAL.GetAllPriceSerialFromSerial(_book, _level, _item, _date, string.Empty, _serial);
            }

            //List<PriceSerialRef> _lists = new List<PriceSerialRef>();
            //var _types = _list.Select(x => x.Sars_price_type).Distinct();
            //foreach (var _type in _types)
            //{
            //    _lists.Add(_list.Where(x => x.Sars_price_type == _type).ToList()[0]);
            //}

            var _promo = _list.Where(x => x.Sars_price_type != 0).ToList();
            var _normal = _list.Where(x => x.Sars_price_type == 0).ToList();

            if (_promo != null)
                if (_promo.Count > 0)
                    foreach (PriceSerialRef i in _promo)
                    {
                        List<PriceProfitCenterPromotion> _lst = new List<PriceProfitCenterPromotion>();
                        _lst = _salesDAL.CheckPromotion(_company, _profitcenter, i.Sars_promo_cd, i.Sars_pb_seq, "PC");
                        if (_lst != null)
                        {
                            if (_lst.Count > 0)
                                _returnlist.Add(i);
                        }
                        else
                        {
                            _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitcenter, "SCHNL");
                            _lst = _salesDAL.CheckPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), i.Sars_promo_cd, i.Sars_pb_seq, "SCHNL");
                            if (_lst != null)
                            {
                                if (_lst.Count > 0)
                                    _returnlist.Add(i);
                            }
                            else
                            {
                                _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitcenter, "CHNL");
                                _lst = _salesDAL.CheckPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), i.Sars_promo_cd, i.Sars_pb_seq, "CHNL");
                                if (_lst != null)
                                {
                                    if (_lst.Count > 0)
                                        _returnlist.Add(i);
                                }
                            }
                        }
                    }
            if (_normal != null)
                if (_normal.Count > 0) _returnlist.AddRange(_normal);
            #region add by tharanga
            if (_returnlist.Count == 0) //ADD BY THARANGA 2018/08/02
            {
                _inventoryDAL = new InventoryDAL();
                DataTable ODT = _inventoryDAL.GetItemComponentTableNew(_item);

                foreach (DataRow drow in ODT.Rows)
                {
                    if (drow["mi_itm_tp"].ToString() == "M")
                    {
                        _item = drow["micp_comp_itm_cd"].ToString();
                        _list = _salesDAL.GetAllPriceSerialFromSerial(_book, _level, _item, _date, _customer, _serial);

                        if (_list.Count <= 0)
                        {
                            _list = _salesDAL.GetAllPriceSerialFromSerial(_book, _level, _item, _date, string.Empty, _serial);
                        }

                        //List<PriceSerialRef> _lists = new List<PriceSerialRef>();
                        //var _types = _list.Select(x => x.Sars_price_type).Distinct();
                        //foreach (var _type in _types)
                        //{
                        //    _lists.Add(_list.Where(x => x.Sars_price_type == _type).ToList()[0]);
                        //}

                        _promo = _list.Where(x => x.Sars_price_type != 0).ToList();
                        _normal = _list.Where(x => x.Sars_price_type == 0).ToList();

                        if (_promo != null)
                            if (_promo.Count > 0)
                                foreach (PriceSerialRef i in _promo)
                                {
                                    List<PriceProfitCenterPromotion> _lst = new List<PriceProfitCenterPromotion>();
                                    _lst = _salesDAL.CheckPromotion(_company, _profitcenter, i.Sars_promo_cd, i.Sars_pb_seq, "PC");
                                    if (_lst != null)
                                    {
                                        if (_lst.Count > 0)
                                            _returnlist.Add(i);
                                    }
                                    else
                                    {
                                        _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitcenter, "SCHNL");
                                        _lst = _salesDAL.CheckPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), i.Sars_promo_cd, i.Sars_pb_seq, "SCHNL");
                                        if (_lst != null)
                                        {
                                            if (_lst.Count > 0)
                                                _returnlist.Add(i);
                                        }
                                        else
                                        {
                                            _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitcenter, "CHNL");
                                            _lst = _salesDAL.CheckPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), i.Sars_promo_cd, i.Sars_pb_seq, "CHNL");
                                            if (_lst != null)
                                            {
                                                if (_lst.Count > 0)
                                                    _returnlist.Add(i);
                                            }
                                        }
                                    }
                                }
                        if (_normal != null)
                            if (_normal.Count > 0) _returnlist.AddRange(_normal);
                    }

                  
                }
            }
#endregion add by tharanga
            return _returnlist;
        }

        public List<PriceCombinedItemRef> GetPriceCombinedItem(Int32 _priceBookSeq, string _mainItem, string _mainSerial)
        {
            _salesDAL = new SalesDAL();
            List<PriceCombinedItemRef> _list = new List<PriceCombinedItemRef>();
            _list = _salesDAL.GetPriceCombinedItem(_priceBookSeq, _mainItem, _mainSerial);
            return _list;
        }

        public List<PriceCombinedItemRef> GetPriceCombinedItemLine(Int32 _priceBookSeq, Int32 _priceitemseq, string _mainItem, string _mainSerial)
        {
            _salesDAL = new SalesDAL();
            List<PriceCombinedItemRef> _list = new List<PriceCombinedItemRef>();
            _list = _salesDAL.GetPriceCombinedItem(_priceBookSeq, _priceitemseq, _mainItem, _mainSerial);
            return _list;
        }

        private bool _connectionopen = false;
        //Written By Prabhath on 01/06/2012
        public List<MasterItemTax> GetItemTax(string _company, string _item, string _status, string _taxCode, string _taxRateCode)
        {
            if (!_connectionopen) _salesDAL = new SalesDAL();
            List<MasterItemTax> _list = new List<MasterItemTax>();
            _list = _salesDAL.GetItemTax(_company, _item, _status, _taxCode, _taxRateCode);
            return _list;
        }

        public List<MasterItemTax> GetItemTax_strucbase(string _company, string _item, string _status, string _taxCode, string _taxRateCode, string _struc)
        {
            if (!_connectionopen) _salesDAL = new SalesDAL();
            List<MasterItemTax> _list = new List<MasterItemTax>();
            _list = _salesDAL.GetItemTax_strucbase(_company, _item, _status, _taxCode, _taxRateCode, _struc);
            return _list;
        }

        public List<MasterItemTax> GetTax_strucbase(string _company, string _item, string _status, string _taxCode, string _taxRateCode, string _struc)
        {
            if (!_connectionopen) _salesDAL = new SalesDAL();
            List<MasterItemTax> _WStatus = new List<MasterItemTax>();
            List<MasterItemTax> _list = new List<MasterItemTax>();

            _WStatus = _salesDAL.GetItemTax_strucbase(_company, _item, _status, _taxCode, _taxRateCode, _struc);
            if (_WStatus.Count > 0)
            {
                foreach (MasterItemTax _itm in _WStatus)
                {
                    decimal _rate = _itm.Mict_tax_rate;

                    decimal _newRate = 1;
                    if (_rate != 0)
                        _newRate = (100 + _rate) / 100;
                    _itm.Mict_tax_rate = _newRate;
                    _list.Add(_itm);
                }
            }
            else
            {
                _list = new List<MasterItemTax>() { new MasterItemTax { Mict_act = true, Mict_itm_cd = _item, Mict_stus = _status, Mict_tax_cd = "S", Mict_tax_rate = 0 / 100, Mict_taxrate_cd = "S" } };

            }
            return _list;
        }

        public decimal GetMaxTax(string _company, string _item)
        {
            List<MasterItemTax> _WOStatus = new List<MasterItemTax>();
            _WOStatus = GetItemTax(_company, _item, string.Empty, string.Empty, string.Empty);
            decimal _maxTax = -1;

            if (_WOStatus.Count > 0)
            {
                var _max = (from _MaxTax in _WOStatus
                            select _MaxTax.Mict_tax_rate).Max();

                _maxTax = _max;
            }
            return _maxTax;
        }

        public List<MasterItemTax> GetTax(string _company, string _item, string _status)
        {


            decimal _maxTax = GetMaxTax(_company, _item);

            List<MasterItemTax> _WStatus = new List<MasterItemTax>();
            List<MasterItemTax> _list = new List<MasterItemTax>();
            _WStatus = GetItemTax(_company, _item, _status, string.Empty, string.Empty);

            if (_WStatus.Count > 0)
            {
                foreach (MasterItemTax _itm in _WStatus)
                {
                    decimal _rate = _itm.Mict_tax_rate;
                    decimal _newRate = ((100 + _maxTax) / 100) * 100 / (100 + _rate);
                    _itm.Mict_tax_rate = _newRate;
                    _list.Add(_itm);
                }
            }
            else
            {
                _list = new List<MasterItemTax>() { new MasterItemTax { Mict_act = true, Mict_itm_cd = _item, Mict_stus = _status, Mict_tax_cd = "S", Mict_tax_rate = _maxTax / 100, Mict_taxrate_cd = "S" } };

            }

            return _list;
        }

        //Written By Prabhath on 04/05/2012
        public List<InventoryBatchRefN> GetConsumerProductPriceList(string _company, string _location, string _item, string _status)
        {
            _salesDAL = new SalesDAL();
            List<InventoryBatchRefN> _list = new List<InventoryBatchRefN>();
            _list = _salesDAL.GetConsumerProductPriceList(_company, _location, _item, _status);
            return _list;

        }

        #region Save Invoice
        //Written By Prabhath on 08/05/2013 (Not expose to client)
        private bool IsGiftVoucher(string _type)
        {
            bool _yes = false;
            if (!string.IsNullOrEmpty(_type))
                if (_type == "G")
                    _yes = true;
                else
                    _yes = false;
            else
                _yes = false;
            return _yes;
        }
        private bool TakeInventorySerialwithItem(DateTime _date, string _company, string _profitcenter, string _location, List<InvoiceItem> _invoiceItemList, List<ReptPickSerials> _scanSerialList, InventoryDAL _invDALs, SalesDAL _salDALs, ReptCommonDAL _reptComDALs, out List<ReptPickSerials> _prepareScanSerialList, out string _errorItemList, Boolean isJobBased = false)
        {
            List<ReptPickSerials> _reMakeSerialList = new List<ReptPickSerials>();
            bool availability = true;
            string _errorList = string.Empty;

            foreach (InvoiceItem _itm in _invoiceItemList)
            {
                string _item = _itm.Sad_itm_cd;
                string _status = _itm.Sad_itm_stus;
                Int32 _invline = _itm.Sad_itm_line;
                decimal _qty = _itm.Sad_qty;
                decimal _unitprice = _itm.Sad_unit_rt;
                string _pricelevel = _itm.Sad_pb_lvl;
                string _pricebook = _itm.Sad_pbook;

                MasterItem _mItem = _invDALs.GetItem(_company, _item);
                if (IsGiftVoucher(_mItem.Mi_itm_tp)) continue;
                if (IsVirtual(_mItem.Mi_itm_tp)) continue;

                #region Get Price Level Situation for the status
                bool IsPriceLevelAllowDoAnyStatus = false;
                bool IsAgePriceLevel = false;
                DataTable _categoryDet = null;
                int _ageingDays = 0;

                List<PriceBookLevelRef> _lvls = _salDALs.GetPriceLevelList(_company, _pricebook, _pricelevel);
                List<PriceBookLevelRef> _lvl = _lvls;
                if (_lvl != null && _lvl.Count > 0)
                {
                    var _bool = from _l in _lvl where _l.Sapl_chk_st_tp == true select _l.Sapl_chk_st_tp;
                    if (_bool != null && _bool.Count() > 0)
                    {
                        IsPriceLevelAllowDoAnyStatus = false;
                    }
                    else
                    {
                        IsPriceLevelAllowDoAnyStatus = true;
                    }

                    var _alvl = _lvl.Where(x => x.Sapl_isage && x.Sapl_itm_stuts == _status).ToList();
                    if (_alvl != null)
                    {
                        if (_alvl.Count() > 0)
                        {
                            IsAgePriceLevel = true;
                        }
                        else
                        {
                            IsAgePriceLevel = false;
                        }
                    }
                }
                else
                {
                    IsPriceLevelAllowDoAnyStatus = true;
                    IsAgePriceLevel = false;
                }

                if (IsAgePriceLevel) _categoryDet = _generalDAL.GetMainCategoryDetail(_mItem.Mi_cate_1);
                if (_categoryDet != null && IsAgePriceLevel)
                    if (_categoryDet.Rows.Count > 0)
                    {
                        if (_categoryDet.Rows[0]["ric1_age"] != DBNull.Value)
                            _ageingDays = Convert.ToInt32(_categoryDet.Rows[0].Field<Int16>("ric1_age"));
                        else _ageingDays = 0;
                    }
                #endregion

                _date = _date.AddDays(-_ageingDays);

                #region Serialized Item
                var _seriallist = (from i in _scanSerialList where i.Tus_base_itm_line == _invline select i);
                if (_mItem.Mi_is_ser1 == 1)
                {
                    foreach (ReptPickSerials _lst in _seriallist)
                    {
                        string _serialno = _lst.Tus_ser_1;
                        ReptPickSerials _chk = _invDALs.Get_all_details_on_serial(_company, _location, "-1", _item, _serialno);
                        if (_chk != null)
                        {
                            if (_lvls.Count > 0)
                            {
                                var _checkstatus = _lvls.Where(x => x.Sapl_itm_stuts == _chk.Tus_itm_stus).ToList();
                                if (_checkstatus != null)
                                {
                                    if (_checkstatus.Count > 0)
                                    {
                                        IsPriceLevelAllowDoAnyStatus = true;
                                    }
                                }
                            }
                        }
                        if (_chk.Tus_warr_period == 0)
                        {
                            _chk.Tus_warr_period = _lst.Tus_warr_period;
                        }
                        if (string.IsNullOrEmpty(_chk.Tus_Warranty_Remark) || (_chk.Tus_Warranty_Remark == "N/A"))
                        {
                            _chk.Tus_Warranty_Remark = _lst.Tus_Warranty_Remark;
                        }
                        // ReptPickSerials _chk = _invDALs.Get_all_details_on_serialID(_company, _location, "-1", _itm.Sad_itm_cd, _lst.Tus_ser_id);

                        if (string.IsNullOrEmpty(_chk.Tus_com)) { availability = false; if (string.IsNullOrEmpty(_errorList)) _errorList = _item + "/" + _serialno; else _errorList += "," + _item + "/" + _serialno; }
                        else if (IsPriceLevelAllowDoAnyStatus == false)
                            if (_chk.Tus_itm_stus != _status) { availability = false; if (string.IsNullOrEmpty(_errorList)) _errorList = _item + "/" + _serialno; else _errorList += "," + _item + "/" + _serialno; }

                        if (availability)
                        {
                            _chk.Tus_base_doc_no = _lst.Tus_base_doc_no;
                            _chk.Tus_base_itm_line = _lst.Tus_base_itm_line;
                            _chk.Tus_unit_price = _lst.Tus_unit_price;
                            _chk.Tus_itm_model = _lst.Tus_itm_model;
                            _chk.Tus_itm_brand = _lst.Tus_itm_brand;
                            _chk.Tus_itm_desc = _lst.Tus_itm_desc;
                            var _filteres = _scanSerialList.Find(x => x.Tus_itm_cd == _lst.Tus_itm_cd && x.Tus_itm_stus == _lst.Tus_itm_stus);
                            if (_filteres != null)
                            {
                                _chk.Tus_resqty = _lst.Tus_resqty;
                            }
                            _reMakeSerialList.Add(_chk);
                        }
                        else
                        {
                            string _errorSerial = _invline + " | " + _item + " || " + _lst.Tus_base_itm_line + " | " + _lst.Tus_itm_cd;
                            _errorSerial = _errorSerial;
                        }
                    }
                }
                #endregion

                #region Non-Serialized (Have Serial ID)
                if (_mItem.Mi_is_ser1 == 0)
                {
                    foreach (ReptPickSerials _lst in _seriallist)
                    {
                        List<ReptPickSerials> _chk;

                        if (_lvls.Count > 0)
                        {
                            var _checkstatus = _lvls.Where(x => x.Sapl_itm_stuts == _lst.Tus_itm_stus).ToList();
                            if (_checkstatus != null)
                            {
                                if (_checkstatus.Count > 0)
                                {
                                    IsPriceLevelAllowDoAnyStatus = true;
                                }
                            }
                        }

                        if (isJobBased == false)
                        {
                            if (IsPriceLevelAllowDoAnyStatus == false)
                                _chk = _invDALs.GetNonSerializedItemRandomlyByDate(_company, _location, _item, _status, _qty, _date.Date);
                            else
                            {
                                _chk = _invDALs.GetNonSerializedItemRandomlyByDate(_company, _location, _item, _status, _qty, _date.Date);
                                if (_chk != null)
                                {
                                    if (_chk.Count == 0)
                                    {
                                        _chk = _invDALs.GetNonSerializedItemRandomlyByDate(_company, _location, _item, string.Empty, _qty, _date.Date);
                                    }
                                }
                            }

                        }
                        else
                        {
                            if (IsPriceLevelAllowDoAnyStatus == false)
                                _chk = _invDALs.GetNonSerializedItemRandomlyByDateByDoc(_company, _location, _item, _status, _qty, _date.Date, _lst.Tus_base_doc_no);
                            else
                            {
                                _chk = _invDALs.GetNonSerializedItemRandomlyByDateByDoc(_company, _location, _item, string.Empty, _qty, _date.Date, _lst.Tus_base_doc_no);

                            }

                        }



                        if (_chk != null)
                            if (_chk.Count > 0)
                            {
                                if (IsPriceLevelAllowDoAnyStatus == false)
                                {
                                    decimal _statuswiseqty = (from i in _chk where i.Tus_itm_cd == _item && i.Tus_itm_stus == _status select i.Tus_qty).Sum();
                                    if (_statuswiseqty < _qty) { availability = false; if (string.IsNullOrEmpty(_errorList)) _errorList = _item; else _errorList += "," + _item; }
                                }
                                else
                                    if (_chk.Count() < _qty) { availability = false; if (string.IsNullOrEmpty(_errorList)) _errorList = _item; else _errorList += "," + _item; }
                            }
                            else { availability = false; if (string.IsNullOrEmpty(_errorList)) _errorList = _item; else _errorList += "," + _item; }
                        else { availability = false; if (string.IsNullOrEmpty(_errorList)) _errorList = _item; else _errorList += "," + _item; }

                        if (availability)
                        {
                            foreach (ReptPickSerials _pick in _chk)
                            {
                                _pick.Tus_base_doc_no = _lst.Tus_base_doc_no;
                                _pick.Tus_base_itm_line = _lst.Tus_base_itm_line;
                                _pick.Tus_unit_price = _lst.Tus_unit_price;
                                _pick.Tus_job_no = _lst.Tus_job_no;
                                _pick.Tus_job_line = _lst.Tus_job_line;
                                _pick.Tus_itm_model = _lst.Tus_itm_model;
                                _pick.Tus_itm_brand = _lst.Tus_itm_brand;
                                _pick.Tus_itm_desc = _lst.Tus_itm_desc;
                                if (isJobBased)
                                {
                                    _pick.Tus_batch_line = _lst.Tus_batch_line;
                                }
                                var _filteres = _scanSerialList.Find(x => x.Tus_itm_cd == _lst.Tus_itm_cd && x.Tus_itm_stus == _lst.Tus_itm_stus);
                                if (_filteres != null)
                                {
                                    _pick.Tus_resqty = _lst.Tus_resqty;
                                }
                                _reMakeSerialList.Add(_pick);
                            }
                            break;
                        }
                    }
                }
                #endregion

                #region Non-Serialized (No Serial ID)
                if (_mItem.Mi_is_ser1 == -1)
                {
                    foreach (ReptPickSerials _lst in _seriallist)
                    {
                        //kapila 6/7/2016
                        MasterCompany _mastercompany = _generalDAL.GetCompByCode(_company);
                        if (_mastercompany.Mc_alw_minus_bal == 0)
                        {
                            List<InventoryLocation> _inventoryLocation = null;
                            if (_lst.Tus_resqty > 0)
                            {
                                _inventoryLocation = _invDALs.GetItemInventoryBalanceRes(_company, _location, _item, _status);
                            }
                            else
                            {
                                _inventoryLocation = _invDALs.GetItemInventoryBalance(_company, _location, _item, _status);
                            }
                            if (_inventoryLocation != null)
                                if (_inventoryLocation.Count > 0)
                                {
                                    if (IsPriceLevelAllowDoAnyStatus == false)
                                    {
                                        decimal _statuswiseqty = (from i in _inventoryLocation where i.Inl_itm_cd == _item && i.Inl_itm_stus == _status select i.Inl_free_qty).Sum();
                                        if (_lst.Tus_resqty > 0)
                                        {
                                            _statuswiseqty = (from i in _inventoryLocation where i.Inl_itm_cd == _item && i.Inl_itm_stus == _status select i.Inl_res_qty).Sum();
                                        }
                                        if (_statuswiseqty < _qty) { availability = false; if (string.IsNullOrEmpty(_errorList)) _errorList = _item; else _errorList += "," + _item; }
                                    }
                                    else
                                    {
                                        decimal _withoustusqty = (from i in _inventoryLocation where i.Inl_itm_cd == _item select i.Inl_free_qty).Sum();
                                        if (_lst.Tus_resqty > 0)
                                        {
                                            _withoustusqty = (from i in _inventoryLocation where i.Inl_itm_cd == _item select i.Inl_res_qty).Sum();
                                        }
                                        if (_withoustusqty < _qty) { availability = false; if (string.IsNullOrEmpty(_errorList)) _errorList = _item; else _errorList += "," + _item; }
                                    }
                                }
                                else { availability = false; if (string.IsNullOrEmpty(_errorList)) _errorList = _item; else _errorList += "," + _item; }
                            else
                            {
                                availability = false;
                                if (string.IsNullOrEmpty(_errorList))
                                    _errorList = _item;
                                else _errorList += "," + _item;
                            }
                        }
                        if (availability)
                        {
                            ///List<ReptPickSerials> _pick;
                            // if (IsPriceLevelAllowDoAnyStatus == false)
                            ///      _pick = _invDALs.GetNonSerializedItemRandomlyByDate(_company, _location, _item, _status, _qty, _date.Date);
                            //  else
                            //    _pick = _invDALs.GetNonSerializedItemRandomlyByDate(_company, _location, _item, string.Empty, _qty, _date.Date);
                            // foreach (ReptPickSerials _chk in _pick)
                            //  {
                            ReptPickSerials _chk = new ReptPickSerials();
                            _chk = _lst;
                            //_chk.Tus_base_doc_no = _lst.Tus_base_doc_no;
                            //_chk.Tus_base_itm_line = _lst.Tus_base_itm_line;
                            //_chk.Tus_unit_price = _lst.Tus_unit_price;
                            //_chk.Tus_ser_id = 0;
                            //_chk.Tus_qty = _lst.Tus_qty;
                            //_chk.Tus_ser_1 = "N/A";
                            //_chk.Tus_ser_2 = "N/A";
                            //_chk.Tus_ser_3 = "N/A";
                            //_chk.Tus_ser_4 = "N/A";
                            //_chk.Tus_ser_id = 0;
                            //_chk.Tus_serial_id = "0";
                            //_chk.Tus_bin = _lst.Tus_bin;
                            ////_chk.Tus_unit_cost = 0;
                            ////_chk.Tus_unit_price = 0;
                            ////_chk.Tus_unit_price = 0;
                            _chk.Tus_job_no = _lst.Tus_job_no;
                            _chk.Tus_job_line = _lst.Tus_job_line;
                            _reMakeSerialList.Add(_chk);
                            //   }
                            //break;
                        }

                    }
                }
                #endregion


            }

            _errorItemList = _errorList;
            _prepareScanSerialList = _reMakeSerialList;
            return availability;
        }
        string GetRealPhoneNumber(string _phone)
        {
            Regex digitsOnly = new Regex(@"[^\d]");
            return digitsOnly.Replace(_phone, "");
        }
        public void CommonSaveInvoiceWithDeliveryOrder(InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, List<InvoiceSerial> _invoiceSerial, RecieptHeader _recieptHeader, List<RecieptItem> _recieptItem, InventoryHeader _inventoryHeader, List<ReptPickSerials> _pickSerial, List<ReptPickSerialsSub> _pickSubSerial, MasterAutoNumber _invoiceAuto, MasterAutoNumber _recieptAuto, MasterAutoNumber _inventoryAuto, bool _isDeliveryNow, out  string _invoiceNo, out string _receiptNo, out string _deliveryOrder, InventoryDAL _invDAL, SalesDAL _salDAL, ReptCommonDAL _invRepDAL, bool _isHold, bool _isHoldInvoiceProcess, out string _errorlist, bool _ishireSale, FMS_InventoryDAL _fmsInventoryDal = null)
        {
            string _invNo = "";
            string _recNo = "";
            string _doNo = "";

            List<ReptPickSerials> _remakeReptSerialList = new List<ReptPickSerials>();
            string _error = string.Empty;

            #region Delivery Now - Reserve Serialized/Non-Serialized Item inline
            if (_isDeliveryNow)
            {
                bool _isOK = true;
                string _list = string.Empty;

                _isOK = TakeInventorySerialwithItem(_invoiceHeader.Sah_dt, _invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _inventoryHeader.Ith_loc, _invoiceItem, _pickSerial, _invDAL, _salDAL, _invRepDAL, out _remakeReptSerialList, out _list);

                if (_isOK == false)
                {

                    _error = "Inventory and invoice qty mismatch found. process aborted!";
                    _invoiceNo = _invNo;
                    _receiptNo = _recNo;
                    _deliveryOrder = _doNo;
                    _errorlist = _error;
                    return;
                }

                _pickSerial = new List<ReptPickSerials>();
                _pickSerial = _remakeReptSerialList;
            }
            #endregion

            string InvoiceNo = string.Empty;
            string RecieptNo = string.Empty;
            try
            {
                Int32 _invoiceLine = 1;
                DataTable _tbl = _salDAL.GetEmployee(_invoiceHeader.Sah_com, _invoiceHeader.Sah_sales_ex_cd);
                string _executiveType = string.Empty;
                foreach (DataRow _r in _tbl.Rows)
                {
                    _executiveType = Convert.ToString(_r["esep_cat_cd"]);
                }
                List<SaleCommission> _saveCommission = new List<SaleCommission>();

                #region Delete invoice if its a HOLD status
                if (_isHold || _isHoldInvoiceProcess) _salDAL.DeleteInvoiceDetailForHold(_invoiceHeader.Sah_seq_no);
                #endregion

                //Generate SeqNo
                //If hold, then client should generate the sequence and assign to header,ie; if its recall hold invoice and need to second time hold, could set sequence no
                //as per the recalled sequence no
                Int32 InvoiceSeqNo = _isHoldInvoiceProcess ? _invoiceHeader.Sah_seq_no : _invDAL.GetSerialID();
                Int32 RecieptSeqNo = !string.IsNullOrEmpty(_recieptHeader.Sar_receipt_type) ? _invDAL.GetSerialID() : -1;
                Int32 InventorySeqNo = 0;
                if (_isDeliveryNow) InventorySeqNo = _invDAL.GetSerialID();

                //-------------------------------------------------------------------------- Invoice------------------------------------------------------------------------ 

                _invoiceHeader.Sah_seq_no = InvoiceSeqNo;
                _invoiceHeader.Sah_inv_no = Convert.ToString(InvoiceSeqNo);

                #region Calculation for total of the payment to infiltrate invoice header

                decimal _totalValue = _invoiceItem.Sum(x => x.Sad_tot_amt);
                decimal _totalReceiptAmt = 0;
                if (_recieptItem != null) if (_recieptItem.Count > 0) _totalReceiptAmt = _recieptItem.Sum(x => x.Sard_settle_amt);

                _invoiceHeader.Sah_anal_7 = _totalValue;// -_totalReceiptAmt; //Total Invoice Amount - Total Receipt AmountBY DARSHANA 3/12/2012
                _invoiceHeader.Sah_anal_8 = _totalReceiptAmt;//Receipt Amount

                //kapila 11/8/2015
                //if (_invoiceHeader.Sah_inv_tp == "CRED")
                //    _invoiceHeader.Sah_anal_8 = 0;

                //ADDED SACHITH 2013/12/04
                //CREDIT SALES
                //FOR SVAT CUSTOMERS ADD TAX VALUE TO ANAL_8
                //if (_invoiceHeader.Sah_is_svat && _invoiceHeader.Sah_inv_tp == "CRED")
                // {
                //     decimal vatTotal = _invoiceItem.Sum(X => X.Sad_itm_tax_amt);
                //      _invoiceHeader.Sah_anal_8 = _invoiceHeader.Sah_anal_8 + vatTotal;
                //  }

                if (_invoiceSerial != null)
                    if (_invoiceSerial.Count > 0)
                    {
                        _invoiceSerial.ForEach(X => X.Sap_inv_no = Convert.ToString(InvoiceSeqNo));
                        _invoiceSerial.ForEach(x => x.Sap_seq_no = InvoiceSeqNo);
                    }


                DataTable _tblESDEPFWHF = new DataTable();
                _tblESDEPFWHF = _salDAL.Get_ESD_EPF_WHT(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_dt);
                Decimal ESD_rt = 0; Decimal EPF_rt = 0; Decimal WHT_rt = 0;
                if (_tblESDEPFWHF.Rows.Count > 0) { ESD_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_ESD"]); EPF_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_EPF"]); WHT_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_WHT"]); }
                _invoiceHeader.Sah_esd_rt = ESD_rt;
                _invoiceHeader.Sah_epf_rt = EPF_rt;
                _invoiceHeader.Sah_wht_rt = WHT_rt;
                _recieptHeader.Sar_esd_rate = ESD_rt;
                _recieptHeader.Sar_epf_rate = EPF_rt;
                _recieptHeader.Sar_wht_rate = WHT_rt;

                #endregion
                //Save Invoice Header
                #region Save Invoice Header
                _salDAL.SaveSalesHeader(_invoiceHeader);
                #endregion

                //Save Invoice Items
                #region Invoice Item Detail
                foreach (InvoiceItem _itm in _invoiceItem)
                {
                    MasterItem _item = _invDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);

                    _itm.Sad_seq_no = InvoiceSeqNo;
                    _invoiceLine = _itm.Sad_itm_line;
                    _itm.Sad_inv_no = Convert.ToString(InvoiceSeqNo);
                    _itm.Sad_unit_amt = _itm.Sad_unit_rt * _itm.Sad_qty;
                    _itm.Sad_itm_tp = _item.Mi_itm_tp;
                    _itm.Sad_uom = _item.Mi_itm_uom;
                    _itm.Sad_trd_svc_chrg = Math.Round((_itm.Sad_tot_amt - _itm.Sad_itm_tax_amt) / _itm.Sad_qty, 2);
                    if (_invoiceHeader.Sah_tax_exempted)
                    {
                        _itm.Sad_tot_amt = _itm.Sad_tot_amt - _itm.Sad_itm_tax_amt;
                        _itm.Sad_itm_tax_amt = 0;
                    }
                    _salDAL.SaveSalesItem(_itm);
                    _salDAL.UpdatePrice(_itm.Sad_itm_cd, _itm.Sad_pbook, _itm.Sad_pb_lvl, _invoiceHeader.Sah_cus_cd, _itm.Sad_promo_cd, _itm.Sad_seq, _itm.Sad_itm_seq);

                    List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                    //kapila 20/4/2017
                    Boolean _isStrucBaseTax = false;
                    MasterCompany _masterComp = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com);

                    if (_masterComp.MC_TAX_CALC_MTD == "1") _isStrucBaseTax = true;

                    if (_isStrucBaseTax == true)    //kapila  26/11/2015
                    {
                        MasterItem _mstItem = _inventoryDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);
                        _itmTax = _salesDAL.GetItemTax_strucbase(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _mstItem.Mi_anal1);
                    }
                    else
                        _itmTax = _salDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                    foreach (MasterItemTax _one in _itmTax)
                    {
                        InvoiceItemTax _tax = new InvoiceItemTax();
                        _tax.Satx_inv_no = _itm.Sad_inv_no;
                        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                        _tax.Satx_itm_line = _itm.Sad_itm_line;
                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                        _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                        _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                        _tax.Satx_job_line = 0;
                        _tax.Satx_job_no = "";
                        _tax.Satx_seq_no = InvoiceSeqNo;
                        _salDAL.SaveSalesItemTax(_tax);
                    }
                    //Dictionary<ItemHierarchyElement, string> _itemHierarchyElement = new Dictionary<ItemHierarchyElement, string>();
                    //_itemHierarchyElement.Add(ItemHierarchyElement.BRAND, _item.Mi_brand);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.ITEM, _item.Mi_cd);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.MAIN_CATEGORY, _item.Mi_cate_1);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.PRICE_BOOK, _itm.Sad_pbook);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.PRICE_LEVEL, _itm.Sad_pb_lvl);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.PROMOTION, _itm.Sad_promo_cd);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.SERIAL, string.Empty);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.SUB_CATEGORY, _item.Mi_cate_2);

                    //List<CashCommissionDetailRef> _CashCommissionDetail = GetCommissionStructure(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_inv_tp, _invoiceHeader.Sah_dt, _itm.Sad_pbook, _itm.Sad_pb_lvl, _invoiceHeader.Sah_sales_ex_cd, _executiveType, _itemHierarchyElement, "PC_PRIT_HIERARCHY", "PC");
                    //List<SaleCommission> _commission = null;

                    ////commission calculation
                    //if (_CashCommissionDetail != null)
                    //{
                    //    if (_CashCommissionDetail.Count > 0)
                    //    {
                    //        _commission = GetCalculatedCommission(_itm.Sad_itm_cd, _invoiceLine, _itm.Sad_unit_rt * _itm.Sad_qty - _itm.Sad_disc_amt, _totalValue, _recieptItem, _CashCommissionDetail[0]);
                    //    }
                    //}

                    //if (_commission != null)
                    //    _saveCommission.AddRange(_commission);

                    //_invoiceLine += 1;
                }

                //Update Discount Definition
                var _discountseq = _invoiceItem.Where(x => x.Sad_dis_type == "M").Select(x => x.Sad_dis_seq).Distinct().ToList();
                if (_discountseq != null && _discountseq.Count > 0)
                {
                    foreach (var _i in _discountseq)
                    {
                        int _seqno = Convert.ToInt32(_i);
                        _salDAL.UpdateGeneralDiscount("M", _seqno, 0);
                    }
                }
                #endregion

                #region Commission Part - Commented :)

                //if (_saveCommission != null)
                //    if (_saveCommission.Count > 0)
                //    {

                //        //Save Commissiom
                //        _saveCommission.ForEach(x => x.Sac_invoice_no = Convert.ToString(_invoiceHeader.Sah_seq_no));
                //        _saveCommission.ForEach(x => x.Sac_seq_no = _invoiceHeader.Sah_seq_no);
                //        foreach (SaleCommission _com in _saveCommission)
                //        {
                //            _salDAL.SaveSalesCommission(_com);
                //        }
                //    }

                #endregion

                //Save Invoice Serials
                #region Invoice Serial
                if (_invoiceSerial != null)
                    if (_invoiceSerial.Count > 0)
                    {
                        foreach (InvoiceSerial _itm in _invoiceSerial)
                        {
                            _itm.Sap_seq_no = InvoiceSeqNo;
                            _salDAL.SaveSalesSerial(_itm);
                        }
                    }
                #endregion

                //-------------------------------------------------------------------------- Payment
                #region Payment
                string _shortcompany = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com).Mc_anal5;
                if (_recieptHeader != null && _recieptItem != null && _recieptItem.Count > 0)
                {
                    _recieptHeader.Sar_seq_no = RecieptSeqNo;
                    _recieptHeader.Sar_receipt_no = Convert.ToString(RecieptSeqNo);
                    _recieptHeader.Sar_tot_settle_amt = _totalReceiptAmt;
                    _salDAL.SaveReceiptHeader(_recieptHeader);

                    if (_recieptItem != null)
                        if (_recieptItem.Count > 0)
                        {
                            foreach (RecieptItem _itm in _recieptItem)
                            {
                                _itm.Sard_seq_no = RecieptSeqNo;
                                _itm.Sard_receipt_no = Convert.ToString(RecieptSeqNo);
                                _salDAL.SaveReceiptItem(_itm);

                                if (_itm.Sard_pay_tp.Trim() == "ADVAN")
                                {
                                    _invRepDAL.UpdateAdvanceReceiptNofromInvoice(_itm.Sard_ref_no, Convert.ToString(InvoiceSeqNo), string.Empty);
                                    RecieptHeader _rHdr = new RecieptHeader();
                                    _rHdr.Sar_receipt_no = _itm.Sard_ref_no;
                                    _rHdr.Sar_used_amt = _itm.Sard_settle_amt;
                                    _rHdr.Sar_act = true;
                                    _rHdr.Sar_direct = true;
                                    _rHdr.Sar_mod_by = _recieptHeader.Sar_mod_by;
                                    _salDAL.SaveReceiptHeader(_rHdr);
                                }
                                if (_itm.Sard_pay_tp.Trim() == "CRNOTE")
                                {
                                    _salesDAL.UpdateCreditNoteBalance(_recieptHeader.Sar_com_cd, _recieptHeader.Sar_profit_center_cd, _itm.Sard_ref_no, _itm.Sard_settle_amt);
                                    MasterBusinessEntity _entity = _salDAL.GetBusinessCompanyDetail(_invoiceHeader.Sah_com, _invoiceHeader.Sah_cus_cd, null, null, "C");
                                    MasterProfitCenter _profit = _salDAL.GetProfitCenter(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc);
                                    if (_entity != null)
                                        if (!string.IsNullOrEmpty(_entity.Mbe_com) && !string.IsNullOrEmpty(_entity.Mbe_mob))
                                        {
                                            string _realPhNo = GetRealPhoneNumber(_entity.Mbe_mob);
                                            OutSMS _out = new OutSMS();
                                            _out.Createtime = DateTime.Now;
                                            _out.Msg = "Your customer code : " + _entity.Mbe_cd + " auth. payment " + _itm.Sard_settle_amt + " deduct from your cred. bal. at " + _profit.Mpc_desc + ". Enq SMS/Call " + _profit.Mpc_tel + ". " + _shortcompany + ",(" + DateTime.Now.Day + "," + DateTime.Now.Month + ")";
                                            _out.Msgstatus = 0;
                                            _out.Msgtype = "S";
                                            _out.Receivedtime = DateTime.Now;
                                            _out.Receiver = _entity.Mbe_cd;
                                            //_out.Receiverphno = _entity.Mbe_mob; //Edit by Chamal 31-03-2015
                                            _out.Senderphno = _entity.Mbe_mob;
                                            _out.Refdocno = _itm.Sard_ref_no;
                                            _out.Sender = _invoiceHeader.Sah_cre_by;
                                            _out.Createtime = DateTime.Now;
                                            _invDAL.SaveSMSOut(_out);
                                        }
                                }

                                if (_itm.Sard_pay_tp.Trim() == "LORE")
                                {
                                    _salesDAL.RedeemLoyaltyPoint(_itm.Sard_ref_no, _invoiceHeader.Sah_cus_cd, _itm.Sard_anal_4);
                                }

                                if (_itm.Sard_pay_tp.Trim() == "GVO")
                                {
                                    _fmsInventoryDal.UpdateRedeemVoucher(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _itm.Sard_sim_ser, _itm.Sard_ref_no, _itm.Sard_cc_tp, _itm.Sard_anal_2, _invoiceHeader.Sah_cre_by, _itm.Sard_settle_amt);
                                }

                            }
                        }
                }
                #endregion

                #region Customer Account Maintain
                if (_invoiceHeader.Sah_cus_cd != "CASH")
                {
                    decimal _invoiceTotal = 0;
                    decimal _paidTotal = 0;

                    if (_invoiceItem != null)
                        if (_invoiceItem.Count > 0)
                        {
                            //Updating Account Balance
                            var _grandTotal = (from _total in _invoiceItem
                                               select _total.Sad_tot_amt).Sum();
                            _invoiceTotal = _grandTotal;
                        }

                    if (_recieptItem != null)
                        if (_recieptItem.Count > 0)
                        {
                            var _payTotal = (from _pay in _recieptItem
                                             select _pay.Sard_settle_amt).Sum();
                            _paidTotal = _payTotal;
                        }

                    CustomerAccountRef _account = new CustomerAccountRef();
                    _account.Saca_acc_bal = _invoiceTotal - _paidTotal;
                    _account.Saca_com_cd = _invoiceHeader.Sah_com;
                    _account.Saca_crdt_lmt = 0;
                    _account.Saca_cre_by = _invoiceHeader.Sah_cre_by;
                    _account.Saca_cre_when = _invoiceHeader.Sah_cre_when;
                    _account.Saca_cust_cd = _invoiceHeader.Sah_cus_cd;
                    _account.Saca_mod_by = _invoiceHeader.Sah_cre_by;
                    _account.Saca_mod_when = _invoiceHeader.Sah_cre_when;
                    _account.Saca_ord_bal = 0;
                    _account.Saca_session_id = _invoiceHeader.Sah_session_id;

                    //
                    // _salDAL.SaveCustomerAccount(_account);
                }
                #endregion
                if (_invoiceHeader.Sah_inv_sub_tp != "CC")
                {


                    if (!string.IsNullOrEmpty(_invoiceHeader.Sah_anal_6))
                    {
                        DataTable _loldetail = _salDAL.GetLoyaltyCardDetail(_invoiceHeader.Sah_cus_cd, _invoiceHeader.Sah_anal_6);
                        string _loltype = string.Empty;
                        string _membership = string.Empty;
                        if (_loldetail != null && _loldetail.Rows.Count >= 0) { _loltype = _loldetail.Rows[0].Field<string>("salcm_loty_tp"); _membership = _loldetail.Rows[0].Field<string>("salcm_cus_spec"); }
                        decimal _points = GetLoyaltyPoint(_loltype, _membership, _invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_dt, _invoiceItem, _invoiceSerial, _recieptItem, _salDAL, _invDAL, _invoiceHeader.Sah_inv_tp);
                        if (_points > 0)
                        {
                            // _salDAL.UpdateLoyaltyCardPoint(_invoiceHeader.Sah_cus_cd, _invoiceHeader.Sah_anal_6, _points, _invoiceHeader.Sah_cre_by);
                            InvoiceLoyalty _lol = new InvoiceLoyalty();
                            _lol.Stlt_inv_no = Convert.ToString(_invoiceHeader.Sah_seq_no);
                            _lol.Stlt_pt = _points;
                            _lol.Stlt_seq_no = _invoiceHeader.Sah_seq_no;
                            _salDAL.SaveInvoiceLoyalty(_lol);
                        }
                    }
                }

                #region Invoice Auto Number/Delivery Order
                if (!_isHold)
                {

                nxt1:
                    _invoiceAuto.Aut_year = null;
                    MasterAutoNumber InvoiceAuto = _invDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
                    if (!_ishireSale)
                        InvoiceNo = _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                    else
                        InvoiceNo = _invoiceAuto.Aut_cate_cd + "-" + _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                    _invoiceAuto.Aut_year = null;
                    _invoiceAuto.Aut_modify_dt = null;
                    if (_salDAL.CheckSalesNo("sp_getinvno", "p_inv_no", InvoiceNo) == 1)
                    {
                        _salDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
                        goto nxt1;
                    }

                    _salDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
                    _salDAL.UpdateInvoiceWithTaxCommission(InvoiceNo, string.Empty, InvoiceSeqNo, RecieptSeqNo);

                    if (_recieptAuto != null)
                    {
                    nxt2:
                        _recieptAuto.Aut_year = null;
                        MasterAutoNumber RecieptAuto = _invDAL.GetAutoNumber(_recieptAuto.Aut_moduleid, _recieptAuto.Aut_direction, _recieptAuto.Aut_start_char, _recieptAuto.Aut_cate_tp, _recieptAuto.Aut_cate_cd, _recieptAuto.Aut_modify_dt, _recieptAuto.Aut_year);
                        RecieptNo = _recieptAuto.Aut_cate_cd + "-" + RecieptAuto.Aut_start_char + RecieptAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                        _recieptAuto.Aut_year = null;
                        _recieptAuto.Aut_modify_dt = null;

                        if (_salDAL.CheckSalesNo("sp_getreceiptno", "p_rept_no", RecieptNo) == 1)
                        {
                            _salDAL.UpdateInvoiceAutoNumber(_recieptAuto);
                            goto nxt2;
                        }
                        //_invDAL.UpdateAutoNumber(_recieptAuto);

                        _salDAL.UpdateInvoiceAutoNumber(_recieptAuto);
                    }
                    _salDAL.UpdateReceipt(InvoiceNo, RecieptNo, InvoiceSeqNo, RecieptSeqNo);
                    //Update receipt no which allocated by receipt entry as per invoice
                    _invRepDAL.UpdateAdvanceReceiptNofromInvoice(string.Empty, Convert.ToString(InvoiceSeqNo), InvoiceNo);


                    //Raise Delivery Order if the invoice going to deliver now!
                    if (_isDeliveryNow)
                    {
                        _pickSerial.ForEach(x => x.Tus_base_doc_no = InvoiceNo);
                        _pickSerial.ForEach(x => x.Tus_usrseq_no = InventorySeqNo);
                        _inventoryHeader.Ith_pc = _invoiceHeader.Sah_pc;
                        _inventoryHeader.Ith_oth_docno = InvoiceNo;
                        _inventoryHeader.Ith_entry_no = InvoiceNo;
                        _inventoryHeader.Ith_seq_no = InventorySeqNo;
                        _inventoryHeader.Ith_sub_docno = _invoiceHeader.Sah_structure_seq;
                        InventoryBLL _bll = new InventoryBLL();
                        //_bll.DeliveryOrderInterCompany(_inventoryHeader, _pickSerial, _pickSubSerial, _inventoryAuto, out  _doNo, _invRepDAL, _invDAL);
                        //Code by Chamal 13-May-2013 edit DeliveryOrder function and new DeliveryOrderEntry
                        _bll.DeliveryOrder(_inventoryHeader, _pickSerial, _pickSubSerial, _inventoryAuto, out  _doNo, _invRepDAL, _invDAL, true);
                    }
                }
                else
                {
                    InvoiceNo = Convert.ToString(InvoiceSeqNo);
                }
                #endregion
            }
            catch (Exception ex)
            {
                _error += "Generated error " + ex.Message;
                if (_error.Contains("UK_SAHINVNO") || _error.Contains("ORA-00001"))
                {
                    _error = "Please try again in a few seconds.";
                }
            }

            _invNo = InvoiceNo;
            _recNo = RecieptNo;

            _invoiceNo = _invNo;
            _receiptNo = _recNo;
            _deliveryOrder = _doNo;
            _errorlist = _error;

        }
        public void CommonSaveInvoiceWithDeliveryOrderWithTransactionOlddd(InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, List<InvoiceSerial> _invoiceSerial, RecieptHeader _recieptHeader, List<RecieptItem> _recieptItem, InventoryHeader _inventoryHeader, List<ReptPickSerials> _pickSerial, List<ReptPickSerialsSub> _pickSubSerial, MasterAutoNumber _invoiceAuto, MasterAutoNumber _recieptAuto, MasterAutoNumber _inventoryAuto, bool _isDeliveryNow, out  string _invoiceNo, out string _receiptNo, out string _deliveryOrder, InventoryDAL _invDAL, SalesDAL _salDAL, ReptCommonDAL _invRepDAL, bool _isHold, bool _isHoldInvoiceProcess, out string _errorlist, bool _ishireSale, out string _invSeq, out string _recieptSeq, out InventoryHeader _mov, out DataTable _datatable)
        {
            string _invNo = "";
            string _recNo = "";
            string _doNo = "";

            List<ReptPickSerials> _remakeReptSerialList = new List<ReptPickSerials>();
            string _error = string.Empty;

            #region Delivery Now - Reserve Serialized/Non-Serialized Item inline
            if (_isDeliveryNow)
            {
                bool _isOK = true;
                string _list = string.Empty;

                _isOK = TakeInventorySerialwithItem(_invoiceHeader.Sah_dt, _invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _inventoryHeader.Ith_loc, _invoiceItem, _pickSerial, _invDAL, _salDAL, _invRepDAL, out _remakeReptSerialList, out _list);

                if (_isOK == false)
                {
                    _error = "Inventory and invoice qty mismatch found. process aborted!";
                    _invoiceNo = _invNo;
                    _receiptNo = _recNo;
                    _deliveryOrder = _doNo;
                    _errorlist = _error;
                    _invSeq = "";
                    _recieptSeq = "";
                    _mov = null;
                    _datatable = null;
                    return;
                }

                _pickSerial = new List<ReptPickSerials>();
                _pickSerial = _remakeReptSerialList;
            }
            #endregion

            string InvoiceNo = _invoiceHeader.Sah_inv_no;
            string RecieptNo = string.Empty;
            try
            {
                Int32 _invoiceLine = 1;
                DataTable _tbl = _salDAL.GetEmployee(_invoiceHeader.Sah_com, _invoiceHeader.Sah_sales_ex_cd);
                string _executiveType = string.Empty;
                foreach (DataRow _r in _tbl.Rows)
                {
                    _executiveType = Convert.ToString(_r["esep_cat_cd"]);
                }
                List<SaleCommission> _saveCommission = new List<SaleCommission>();

                #region Delete invoice if its a HOLD status
                if (_isHold || _isHoldInvoiceProcess) _salDAL.DeleteInvoiceDetailForHold(_invoiceHeader.Sah_seq_no);
                #endregion

                //Generate SeqNo
                //If hold, then client should generate the sequence and assign to header,ie; if its recall hold invoice and need to second time hold, could set sequence no
                //as per the recalled sequence no
                Int32 InvoiceSeqNo = _isHoldInvoiceProcess ? _invoiceHeader.Sah_seq_no : _invDAL.GetSerialID();
                Int32 RecieptSeqNo = !string.IsNullOrEmpty(_recieptHeader.Sar_receipt_type) ? _invDAL.GetSerialID() : -1;
                Int32 InventorySeqNo = 0;
                if (_isDeliveryNow) InventorySeqNo = _invDAL.GetSerialID();

                //-------------------------------------------------------------------------- Invoice------------------------------------------------------------------------ 

                _invoiceHeader.Sah_seq_no = InvoiceSeqNo;
                //_invoiceHeader.Sah_inv_no = Convert.ToString(InvoiceSeqNo);


                #region Calculation for total of the payment to infiltrate invoice header

                decimal _totalValue = _invoiceItem.Sum(x => x.Sad_tot_amt);
                decimal _totalReceiptAmt = 0;
                if (_recieptItem != null) if (_recieptItem.Count > 0) _totalReceiptAmt = _recieptItem.Sum(x => x.Sard_settle_amt);

                _invoiceHeader.Sah_anal_7 = _totalValue;// -_totalReceiptAmt; //Total Invoice Amount - Total Receipt AmountBY DARSHANA 3/12/2012
                _invoiceHeader.Sah_anal_8 = _totalReceiptAmt;//Receipt Amount

                //ADDED SACHITH 2013/12/04
                //CREDIT SALES
                //FOR SVAT CUSTOMERS ADD TAX VALUE TO ANAL_8
                //if (_invoiceHeader.Sah_is_svat && _invoiceHeader.Sah_inv_tp == "CRED")
                //{
                //    decimal vatTotal = _invoiceItem.Sum(X => X.Sad_itm_tax_amt);
                //    _invoiceHeader.Sah_anal_8 = _invoiceHeader.Sah_anal_8 + vatTotal;
                //}

                //kapila 11/8/2015
                //if (_invoiceHeader.Sah_inv_tp == "CRED")
                //    _invoiceHeader.Sah_anal_8 = 0;

                if (_invoiceSerial != null)
                    if (_invoiceSerial.Count > 0)
                    {
                        //_invoiceSerial.ForEach(X => X.Sap_inv_no = Convert.ToString(InvoiceSeqNo));
                        _invoiceSerial.ForEach(X => X.Sap_inv_no = _invoiceHeader.Sah_inv_no);
                        _invoiceSerial.ForEach(x => x.Sap_seq_no = InvoiceSeqNo);
                    }


                DataTable _tblESDEPFWHF = new DataTable();
                _tblESDEPFWHF = _salDAL.Get_ESD_EPF_WHT(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_dt);
                Decimal ESD_rt = 0; Decimal EPF_rt = 0; Decimal WHT_rt = 0;
                if (_tblESDEPFWHF.Rows.Count > 0) { ESD_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_ESD"]); EPF_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_EPF"]); WHT_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_WHT"]); }
                _invoiceHeader.Sah_esd_rt = ESD_rt;
                _invoiceHeader.Sah_epf_rt = EPF_rt;
                _invoiceHeader.Sah_wht_rt = WHT_rt;
                _recieptHeader.Sar_esd_rate = ESD_rt;
                _recieptHeader.Sar_epf_rate = EPF_rt;
                _recieptHeader.Sar_wht_rate = WHT_rt;

                #endregion
                //Save Invoice Header
                #region Save Invoice Header
                _salDAL.SaveSalesHeader(_invoiceHeader);
                #endregion

                //Save Invoice Items
                #region Invoice Item Detail
                List<INR_RES_LOG> _resLogAvaData = new List<INR_RES_LOG>();
                int _res = 0;
                string _docNo = string.Empty;
                MasterProfitCenter _MasterProfitCenter = _inventoryDAL.GetProfitCenter(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc);

                //add by akila 2017/08/05
                int _satItemTaxSaveCount = 0;

                foreach (InvoiceItem _itm in _invoiceItem)
                {
                    MasterItem _item = _invDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);

                    _itm.Sad_seq_no = InvoiceSeqNo;
                    _invoiceLine = _itm.Sad_itm_line;
                    //_itm.Sad_inv_no = Convert.ToString(InvoiceSeqNo);
                    _itm.Sad_inv_no = _invoiceHeader.Sah_inv_no;
                    _itm.Sad_unit_amt = _itm.Sad_unit_rt * _itm.Sad_qty;
                    _itm.Sad_itm_tp = _item.Mi_itm_tp;
                    _itm.Sad_uom = _item.Mi_itm_uom;
                    _itm.Sad_trd_svc_chrg = Math.Round((_itm.Sad_tot_amt - _itm.Sad_itm_tax_amt) / _itm.Sad_qty, 2);
                    if (_invoiceHeader.Sah_tax_exempted)
                    {
                        _itm.Sad_tot_amt = _itm.Sad_tot_amt - _itm.Sad_itm_tax_amt;
                        _itm.Sad_itm_tax_amt = 0;
                    }

                    //kapila 28/6/2016 check sad_qty and sad_do_qty for easy cash and reload
                    if (_isDeliveryNow) //kapila 20/12/2016
                    {
                        if (_itm.Sad_itm_cd == "DLG-EZCASH" || _itm.Sad_itm_cd == "RELOADDLG")
                        {
                            if (_itm.Sad_qty != _itm.Sad_do_qty)
                            {
                                _error = "Invoice Qty and DO Qty mismatch found. Contact IT Department!";
                                _invoiceNo = _invNo;
                                _receiptNo = _recNo;
                                _deliveryOrder = _doNo;
                                _errorlist = _error;
                                _invSeq = "";
                                _recieptSeq = "";
                                _mov = null;
                                _datatable = null;
                                return;
                            }
                        }

                        //kapila 2/6/2016 check sad_qty and sad_do_qty
                        //if (_invoiceHeader.Sah_com == "AST")
                        MasterProfitCenter _PC = new MasterProfitCenter();
                        _PC = _inventoryDAL.GetProfitCenter(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc);

                        //if (_invoiceHeader.Sah_com == "ABL" && (_PC.Mpc_chnl == "ABT" || _PC.Mpc_chnl == "SKE" || _PC.Mpc_chnl == "TFS"))    //kapila 2/2/2017
                        if (_invoiceHeader.Sah_com == "ABL" && _PC.Mpc_chnl == "ABT")    //kapila 2/2/2017
                        {
                            if (_itm.Sad_qty != _itm.Sad_do_qty)
                            {
                                _error = "Invoice Qty and DO Qty mismatch found. Contact IT Department!";
                                _invoiceNo = _invNo;
                                _receiptNo = _recNo;
                                _deliveryOrder = _doNo;
                                _errorlist = _error;
                                _invSeq = "";
                                _recieptSeq = "";
                                _mov = null;
                                _datatable = null;
                                return;
                            }
                        }
                    }
                    //update DO qty
                    if (_isDeliveryNow)
                    {

                        decimal _doQty = 0;
                        if (_item.Mi_is_ser1 != -1) //kapila 27/1/2016 mod for abstract
                        {

                            List<ReptPickSerials> _temp = _pickSerial.Where(x => x.Tus_base_itm_line == _itm.Sad_itm_line).ToList<ReptPickSerials>();
                            if (_temp != null && _temp.Count > 0)
                            {
                                _doQty = _temp.Sum(p => p.Tus_qty);
                                foreach (ReptPickSerials _serial in _temp)
                                {
                                    int extendwarr = 0;
                                    if (_MasterProfitCenter.Mpc_wara_extend > 0)
                                    {
                                        extendwarr = _MasterProfitCenter.Mpc_wara_extend;
                                        _serial.Tus_warr_period = Convert.ToInt32(_itm.Sad_warr_period) + extendwarr;
                                        _serial.Tus_Warranty_Remark = _itm.Sad_warr_remarks;

                                    }
                                    else
                                    {
                                        _serial.Tus_warr_period = Convert.ToInt32(_itm.Sad_warr_period);
                                        _serial.Tus_Warranty_Remark = _itm.Sad_warr_remarks;
                                    }
                                }
                            }
                            if (_itm.Sad_do_qty == 0)
                            {
                                _itm.Sad_do_qty = _doQty;
                            }
                        }
                        //added by dilshan for decimal item do qty update issue on 10/05/2018
                        if (_item.Mi_is_ser1 == -1)
                        {
                            if (_itm.Sad_do_qty == 0)
                            {
                                _itm.Sad_do_qty = _itm.Sad_qty;
                            }
                        }
                    }

                    _salDAL.SaveSalesItem(_itm);
                    _salDAL.UpdatePrice(_itm.Sad_itm_cd, _itm.Sad_pbook, _itm.Sad_pb_lvl, _invoiceHeader.Sah_cus_cd, _itm.Sad_promo_cd, _itm.Sad_seq, _itm.Sad_itm_seq);

                    //kapila 18/2/2016
                    Boolean _isStrucBaseTax = false;
                    MasterCompany _masterComp = null;
                    _masterComp = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com);
                    if (_masterComp.MC_TAX_CALC_MTD == "1") _isStrucBaseTax = true;

                    _satItemTaxSaveCount = 0;
                    if (_invoiceHeader.Sah_dt == DateTime.Now.Date)
                    {
                        List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                        //added by subodana NBT 2017/10/30
                        List<MasterItemTax> _Nbttax = new List<MasterItemTax>();


                        if (_isStrucBaseTax == true)
                        {
                            MasterItem _mstItem = _invDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);
                            _itmTax = _salesDAL.GetItemTax_strucbase(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, "VAT", _mstItem.Mi_anal1);
                            //_itmTax = _salesDAL.GetItemTax_strucbase(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "VAT", string.Empty, _mstItem.Mi_anal1);
                            _Nbttax = _salesDAL.GetItemTax_strucbase(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "NBT", string.Empty, _mstItem.Mi_anal1);
                        }
                        else
                        {
                            _itmTax = _salDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);
                        }


                        //added by subodana NBT 2017/10/30
                        if ((_Nbttax != null) && (_Nbttax.Count > 0))
                        {
                            foreach (MasterItemTax _one in _Nbttax)
                            {
                                InvoiceItemTax _tax = new InvoiceItemTax();
                                _tax.Satx_inv_no = _itm.Sad_inv_no;
                                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                _tax.Satx_itm_line = _itm.Sad_itm_line;
                                _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100);
                                _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                _tax.Satx_job_line = 0;
                                _tax.Satx_job_no = "";
                                _tax.Satx_seq_no = InvoiceSeqNo;
                                _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);
                                _itm.Sad_itm_tax_amt = _itm.Sad_itm_tax_amt - (((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100);
                            }

                        }
                        else
                        {
                            _Nbttax = _salesDAL.GetCustomerTax(_invoiceHeader.Sah_cus_cd, _invoiceHeader.Sah_com);
                            foreach (MasterItemTax _one in _Nbttax)
                            {
                                InvoiceItemTax _tax = new InvoiceItemTax();
                                _tax.Satx_inv_no = _itm.Sad_inv_no;
                                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                _tax.Satx_itm_line = _itm.Sad_itm_line;
                                _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : ((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100;
                                _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                _tax.Satx_job_line = 0;
                                _tax.Satx_job_no = "";
                                _tax.Satx_seq_no = InvoiceSeqNo;
                                _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);
                                _itm.Sad_itm_tax_amt = _itm.Sad_itm_tax_amt - (((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100);
                            }
                        }


                        //updated by akila 2017/085/05
                        if ((_itmTax != null) && (_itmTax.Count > 0))
                        {
                            foreach (MasterItemTax _one in _itmTax)
                            {
                                if (_one.Mict_tax_cd != "NBT")
                                {
                                    InvoiceItemTax _tax = new InvoiceItemTax();
                                    _tax.Satx_inv_no = _itm.Sad_inv_no;
                                    _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                    _tax.Satx_itm_line = _itm.Sad_itm_line;
                                    _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                    _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                    _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                    _tax.Satx_job_line = 0;
                                    _tax.Satx_job_no = "";
                                    _tax.Satx_seq_no = InvoiceSeqNo;
                                    _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);
                                }

                            }
                        }
                        else { throw new Exception("Transaction cannot be processed. Tax definition not found for item code - " + _itm.Sad_itm_cd); }


                    }
                    else
                    {
                        //update by akila 2017/09/08
                        if (_isStrucBaseTax)
                        {
                            List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                            //added by subodana NBT 2017/10/30
                            List<MasterItemTax> _Nbttax = new List<MasterItemTax>();

                            MasterItem _mstItem = _invDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);
                            _itmTax = _salesDAL.GetItemTax_strucbase(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "VAT", string.Empty, _mstItem.Mi_anal1);
                            _Nbttax = _salesDAL.GetItemTax_strucbase(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "NBT", string.Empty, _mstItem.Mi_anal1);

                            //added by subodana NBT 2017/10/30
                            if ((_Nbttax != null) && (_Nbttax.Count > 0))
                            {
                                foreach (MasterItemTax _one in _Nbttax)
                                {
                                    InvoiceItemTax _tax = new InvoiceItemTax();
                                    _tax.Satx_inv_no = _itm.Sad_inv_no;
                                    _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                    _tax.Satx_itm_line = _itm.Sad_itm_line;
                                    _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100);
                                    _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                    _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                    _tax.Satx_job_line = 0;
                                    _tax.Satx_job_no = "";
                                    _tax.Satx_seq_no = InvoiceSeqNo;
                                    _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);
                                    _itm.Sad_itm_tax_amt = _itm.Sad_itm_tax_amt - (((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100);
                                }

                            }
                            else
                            {
                                _Nbttax = _salesDAL.GetCustomerTax(_invoiceHeader.Sah_cus_cd, _invoiceHeader.Sah_com);
                                foreach (MasterItemTax _one in _Nbttax)
                                {
                                    InvoiceItemTax _tax = new InvoiceItemTax();
                                    _tax.Satx_inv_no = _itm.Sad_inv_no;
                                    _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                    _tax.Satx_itm_line = _itm.Sad_itm_line;
                                    _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100);
                                    _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                    _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                    _tax.Satx_job_line = 0;
                                    _tax.Satx_job_no = "";
                                    _tax.Satx_seq_no = InvoiceSeqNo;
                                    _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);
                                    _itm.Sad_itm_tax_amt = _itm.Sad_itm_tax_amt - (((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100);
                                }

                            }


                            if ((_itmTax != null) && (_itmTax.Count > 0))
                            {
                                foreach (MasterItemTax _one in _itmTax)
                                {
                                    if (_one.Mict_tax_cd != "NBT")
                                    {
                                        InvoiceItemTax _tax = new InvoiceItemTax();
                                        _tax.Satx_inv_no = _itm.Sad_inv_no;
                                        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                        _tax.Satx_itm_line = _itm.Sad_itm_line;
                                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                        _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                        _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                        _tax.Satx_job_line = 0;
                                        _tax.Satx_job_no = "";
                                        _tax.Satx_seq_no = InvoiceSeqNo;
                                        _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);
                                    }
                                }
                            }
                        }
                        else
                        {
                            List<MasterItemTax> _itmTaxEff = new List<MasterItemTax>();
                            _itmTaxEff = _salDAL.GetItemTaxEffDt(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _invoiceHeader.Sah_dt);

                            if (_itmTaxEff.Count > 0)
                            {
                                foreach (MasterItemTax _one in _itmTaxEff)
                                {
                                    InvoiceItemTax _tax = new InvoiceItemTax();
                                    _tax.Satx_inv_no = _itm.Sad_inv_no;
                                    _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                    _tax.Satx_itm_line = _itm.Sad_itm_line;
                                    _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                    _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                    _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                    _tax.Satx_job_line = 0;
                                    _tax.Satx_job_no = "";
                                    _tax.Satx_seq_no = InvoiceSeqNo;
                                    _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);
                                }
                            }
                            else
                            {

                                List<LogMasterItemTax> _itmTax = new List<LogMasterItemTax>();
                                _itmTax = _salDAL.GetItemTaxLog(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _invoiceHeader.Sah_dt);

                                //updated by akila 2017/08/05
                                if ((_itmTax != null) && (_itmTax.Count > 0))
                                {
                                    foreach (LogMasterItemTax _one in _itmTax)
                                    {
                                        InvoiceItemTax _tax = new InvoiceItemTax();
                                        _tax.Satx_inv_no = _itm.Sad_inv_no;
                                        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                        _tax.Satx_itm_line = _itm.Sad_itm_line;
                                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                        _tax.Satx_itm_tax_rt = _one.Lict_tax_rate;
                                        _tax.Satx_itm_tax_tp = _one.Lict_tax_cd;
                                        _tax.Satx_job_line = 0;
                                        _tax.Satx_job_no = "";
                                        _tax.Satx_seq_no = InvoiceSeqNo;
                                        _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);
                                    }
                                }
                                else { throw new Exception("Transaction cannot be processed. Tax definition not found for item code - " + _itm.Sad_itm_cd); }
                            }
                        }
                        //List<MasterItemTax> _itmTaxEff = new List<MasterItemTax>();
                        //_itmTaxEff = _salDAL.GetItemTaxEffDt(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _invoiceHeader.Sah_dt);

                        //if (_itmTaxEff.Count > 0)
                        //{
                        //    foreach (MasterItemTax _one in _itmTaxEff)
                        //    {
                        //        InvoiceItemTax _tax = new InvoiceItemTax();
                        //        _tax.Satx_inv_no = _itm.Sad_inv_no;
                        //        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                        //        _tax.Satx_itm_line = _itm.Sad_itm_line;
                        //        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                        //        _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                        //        _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                        //        _tax.Satx_job_line = 0;
                        //        _tax.Satx_job_no = "";
                        //        _tax.Satx_seq_no = InvoiceSeqNo;
                        //        _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);
                        //    }
                        //}
                        //else
                        //{

                        //    List<LogMasterItemTax> _itmTax = new List<LogMasterItemTax>();
                        //    _itmTax = _salDAL.GetItemTaxLog(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _invoiceHeader.Sah_dt);

                        //    //updated by akila 2017/085/05
                        //    if ((_itmTax != null) && (_itmTax.Count > 0))
                        //    {
                        //        foreach (LogMasterItemTax _one in _itmTax)
                        //        {
                        //            InvoiceItemTax _tax = new InvoiceItemTax();
                        //            _tax.Satx_inv_no = _itm.Sad_inv_no;
                        //            _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                        //            _tax.Satx_itm_line = _itm.Sad_itm_line;
                        //            _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                        //            _tax.Satx_itm_tax_rt = _one.Lict_tax_rate;
                        //            _tax.Satx_itm_tax_tp = _one.Lict_tax_cd;
                        //            _tax.Satx_job_line = 0;
                        //            _tax.Satx_job_no = "";
                        //            _tax.Satx_seq_no = InvoiceSeqNo;
                        //            _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);
                        //        }
                        //    }
                        //    else { throw new Exception("Transaction cannot be processed. Tax definition not found for item code - " + _itm.Sad_itm_cd); }
                        //}
                    }
                    //Dictionary<ItemHierarchyElement, string> _itemHierarchyElement = new Dictionary<ItemHierarchyElement, string>();
                    //_itemHierarchyElement.Add(ItemHierarchyElement.BRAND, _item.Mi_brand);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.ITEM, _item.Mi_cd);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.MAIN_CATEGORY, _item.Mi_cate_1);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.PRICE_BOOK, _itm.Sad_pbook);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.PRICE_LEVEL, _itm.Sad_pb_lvl);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.PROMOTION, _itm.Sad_promo_cd);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.SERIAL, string.Empty);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.SUB_CATEGORY, _item.Mi_cate_2);

                    //List<CashCommissionDetailRef> _CashCommissionDetail = GetCommissionStructure(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_inv_tp, _invoiceHeader.Sah_dt, _itm.Sad_pbook, _itm.Sad_pb_lvl, _invoiceHeader.Sah_sales_ex_cd, _executiveType, _itemHierarchyElement, "PC_PRIT_HIERARCHY", "PC");
                    //List<SaleCommission> _commission = null;

                    ////commission calculation
                    //if (_CashCommissionDetail != null)
                    //{
                    //    if (_CashCommissionDetail.Count > 0)
                    //    {
                    //        _commission = GetCalculatedCommission(_itm.Sad_itm_cd, _invoiceLine, _itm.Sad_unit_rt * _itm.Sad_qty - _itm.Sad_disc_amt, _totalValue, _recieptItem, _CashCommissionDetail[0]);
                    //    }
                    //}

                    //if (_commission != null)
                    //    _saveCommission.AddRange(_commission);

                    //_invoiceLine += 1;
                    //Add by akila 2017/08/05
                    if (_satItemTaxSaveCount < 1) { throw new Exception("Item tax details not updated properly"); }
                }

                //Update Discount Definition
                var _discountseq = _invoiceItem.Where(x => x.Sad_dis_type == "M").Select(x => x.Sad_dis_seq).Distinct().ToList();
                if (_discountseq != null && _discountseq.Count > 0)
                {
                    foreach (var _i in _discountseq)
                    {
                        int _seqno = Convert.ToInt32(_i);
                        _salDAL.UpdateGeneralDiscount("M", _seqno, 0);
                    }
                }
                #endregion

                #region Commission Part - Commented :)

                //if (_saveCommission != null)
                //    if (_saveCommission.Count > 0)
                //    {

                //        //Save Commissiom
                //        _saveCommission.ForEach(x => x.Sac_invoice_no = Convert.ToString(_invoiceHeader.Sah_seq_no));
                //        _saveCommission.ForEach(x => x.Sac_seq_no = _invoiceHeader.Sah_seq_no);
                //        foreach (SaleCommission _com in _saveCommission)
                //        {
                //            _salDAL.SaveSalesCommission(_com);
                //        }
                //    }

                #endregion

                //Save Invoice Serials
                #region Invoice Serial
                if (_invoiceSerial != null)
                    if (_invoiceSerial.Count > 0)
                    {
                        foreach (InvoiceSerial _itm in _invoiceSerial)
                        {
                            _itm.Sap_seq_no = InvoiceSeqNo;
                            _salDAL.SaveSalesSerial(_itm);
                        }
                    }
                #endregion

                //-------------------------------------------------------------------------- Payment
                #region Payment
                string _shortcompany = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com).Mc_anal5;
                if (_recieptHeader != null && _recieptItem != null && _recieptItem.Count > 0)
                {
                    _recieptHeader.Sar_seq_no = RecieptSeqNo;
                    _recieptHeader.Sar_receipt_no = Convert.ToString(RecieptSeqNo);
                    _recieptHeader.Sar_tot_settle_amt = _totalReceiptAmt;
                    _salDAL.SaveReceiptHeader(_recieptHeader);

                    if (_recieptItem != null)
                        if (_recieptItem.Count > 0)
                        {
                            foreach (RecieptItem _itm in _recieptItem)
                            {
                                _itm.Sard_seq_no = RecieptSeqNo;
                                _itm.Sard_inv_no = _invoiceHeader.Sah_inv_no;
                                _itm.Sard_receipt_no = Convert.ToString(RecieptSeqNo);
                                _salDAL.SaveReceiptItem(_itm);

                                if (_itm.Sard_pay_tp.Trim() == "ADVAN")
                                {
                                    _invRepDAL.UpdateAdvanceReceiptNofromInvoice(_itm.Sard_ref_no, Convert.ToString(InvoiceSeqNo), string.Empty);
                                    RecieptHeader _rHdr = new RecieptHeader();
                                    _rHdr.Sar_receipt_no = _itm.Sard_ref_no;
                                    _rHdr.Sar_used_amt = _itm.Sard_settle_amt;
                                    _rHdr.Sar_act = true;
                                    _rHdr.Sar_direct = true;
                                    _rHdr.Sar_mod_by = _recieptHeader.Sar_mod_by;
                                    _salDAL.SaveReceiptHeader(_rHdr);
                                }
                                if (_itm.Sard_pay_tp.Trim() == "CRNOTE")
                                {
                                    _salesDAL.UpdateCreditNoteBalance(_recieptHeader.Sar_com_cd, _recieptHeader.Sar_profit_center_cd, _itm.Sard_ref_no, _itm.Sard_settle_amt);
                                    MasterBusinessEntity _entity = _salDAL.GetBusinessCompanyDetail(_invoiceHeader.Sah_com, _invoiceHeader.Sah_cus_cd, null, null, "C");
                                    MasterProfitCenter _profit = _salDAL.GetProfitCenter(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc);
                                    if (_entity != null)
                                        if (!string.IsNullOrEmpty(_entity.Mbe_com) && !string.IsNullOrEmpty(_entity.Mbe_mob))
                                        {
                                            string _realPhNo = GetRealPhoneNumber(_entity.Mbe_mob);
                                            OutSMS _out = new OutSMS();
                                            _out.Createtime = DateTime.Now;
                                            // _out.Msg = "Your customer code : " + _entity.Mbe_cd + " auth. payment " + _itm.Sard_settle_amt + " deduct from your cred. bal. at " + _profit.Mpc_desc + ". Enq SMS/Call " + _profit.Mpc_tel + ". " + _shortcompany + "";
                                            _out.Msg = "Dear customer (Code : " + _entity.Mbe_cd + "), your credit amount (from credit note # " + _itm.Sard_ref_no + ") reimbursed at " + _profit.Mpc_desc + ". Enq Call " + _profit.Mpc_tel + ". " + _shortcompany;
                                            _out.Msgstatus = 0;
                                            _out.Msgtype = "S";
                                            _out.Receivedtime = DateTime.Now;
                                            _out.Receiver = _entity.Mbe_cd;
                                            //_out.Receiverphno = _entity.Mbe_mob; //Edit by Chamal 31-03-2015
                                            _out.Senderphno = _entity.Mbe_mob;
                                            _out.Refdocno = _itm.Sard_ref_no;
                                            _out.Sender = _invoiceHeader.Sah_cre_by;
                                            _out.Createtime = DateTime.Now;
                                            _invDAL.SaveSMSOut(_out);
                                        }
                                }

                                if (_itm.Sard_pay_tp.Trim() == "LORE")
                                {
                                    _salesDAL.RedeemLoyaltyPoint(_itm.Sard_ref_no, _invoiceHeader.Sah_cus_cd, _itm.Sard_anal_4);
                                }

                                if (_itm.Sard_pay_tp.Trim() == "GVO")
                                {
                                    //_fmsInventoryDal.UpdateRedeemVoucher(_itm.Sard_anal_1, _invoiceHeader.Sah_pc, _itm.Sard_sim_ser, _itm.Sard_ref_no, _itm.Sard_cc_tp, _itm.Sard_anal_2, _invoiceHeader.Sah_cre_by, _itm.Sard_settle_amt);
                                    _fmsInventoryDal.UpdateRedeemVoucher(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _itm.Sard_sim_ser, _itm.Sard_ref_no, _itm.Sard_cc_tp, _itm.Sard_anal_2, _invoiceHeader.Sah_cre_by, _itm.Sard_settle_amt);
                                }

                            }
                        }
                }
                #endregion

                #region Customer Account Maintain
                if (_invoiceHeader.Sah_cus_cd != "CASH")
                {
                    decimal _invoiceTotal = 0;
                    decimal _paidTotal = 0;

                    if (_invoiceItem != null)
                        if (_invoiceItem.Count > 0)
                        {
                            //Updating Account Balance
                            var _grandTotal = (from _total in _invoiceItem
                                               select _total.Sad_tot_amt).Sum();
                            _invoiceTotal = _grandTotal;
                        }

                    if (_recieptItem != null)
                        if (_recieptItem.Count > 0)
                        {
                            var _payTotal = (from _pay in _recieptItem
                                             select _pay.Sard_settle_amt).Sum();
                            _paidTotal = _payTotal;
                        }

                    CustomerAccountRef _account = new CustomerAccountRef();
                    _account.Saca_acc_bal = _invoiceTotal - _paidTotal;
                    _account.Saca_com_cd = _invoiceHeader.Sah_com;
                    _account.Saca_crdt_lmt = 0;
                    _account.Saca_cre_by = _invoiceHeader.Sah_cre_by;
                    _account.Saca_cre_when = _invoiceHeader.Sah_cre_when;
                    _account.Saca_cust_cd = _invoiceHeader.Sah_cus_cd;
                    _account.Saca_mod_by = _invoiceHeader.Sah_cre_by;
                    _account.Saca_mod_when = _invoiceHeader.Sah_cre_when;
                    _account.Saca_ord_bal = 0;
                    _account.Saca_session_id = _invoiceHeader.Sah_session_id;

                    //
                    // _salDAL.SaveCustomerAccount(_account);
                }
                #endregion

                if (!string.IsNullOrEmpty(_invoiceHeader.Sah_anal_6))
                {
                    DataTable _loldetail = _salDAL.GetLoyaltyCardDetail(_invoiceHeader.Sah_cus_cd, _invoiceHeader.Sah_anal_6);
                    string _loltype = string.Empty;
                    string _membership = string.Empty;
                    if (_loldetail != null && _loldetail.Rows.Count >= 0) { _loltype = _loldetail.Rows[0].Field<string>("salcm_loty_tp"); _membership = _loldetail.Rows[0].Field<string>("salcm_cus_spec"); }
                    decimal _points = GetLoyaltyPoint(_loltype, _membership, _invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_dt, _invoiceItem, _invoiceSerial, _recieptItem, _salDAL, _invDAL, _invoiceHeader.Sah_inv_tp);
                    if (_points > 0)
                    {
                       // _salDAL.UpdateLoyaltyCardPoint(_invoiceHeader.Sah_cus_cd, _invoiceHeader.Sah_anal_6, _points, _invoiceHeader.Sah_cre_by);
                        InvoiceLoyalty _lol = new InvoiceLoyalty();
                        _lol.Stlt_inv_no = Convert.ToString(_invoiceHeader.Sah_inv_no);
                        _lol.Stlt_pt = _points;
                        _lol.Stlt_seq_no = _invoiceHeader.Sah_seq_no;
                        _salDAL.SaveInvoiceLoyalty(_lol);
                    }
                }

                InventoryHeader _invHdr = null;
                DataTable _dataTable = null; ;
                #region Invoice Auto Number/Delivery Order
                if (!_isHold)
                {
                    /*
                nxt1:
                    _invoiceAuto.Aut_year = null;
                    MasterAutoNumber InvoiceAuto = _invDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
                    if (!_ishireSale)
                        InvoiceNo = _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                    else
                        InvoiceNo = _invoiceAuto.Aut_cate_cd + "-" + _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                    _invoiceAuto.Aut_year = null;
                    _invoiceAuto.Aut_modify_dt = null;
                    if (_salDAL.CheckSalesNo("sp_getinvno", "p_inv_no", InvoiceNo) == 1)
                    {
                        _salDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
                        goto nxt1;
                    }

                    _salDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
                    _salDAL.UpdateInvoiceWithTaxCommission(InvoiceNo, string.Empty, InvoiceSeqNo, RecieptSeqNo);

                    if (_recieptAuto != null)
                    {
                    nxt2:
                        _recieptAuto.Aut_year = null;
                        MasterAutoNumber RecieptAuto = _invDAL.GetAutoNumber(_recieptAuto.Aut_moduleid, _recieptAuto.Aut_direction, _recieptAuto.Aut_start_char, _recieptAuto.Aut_cate_tp, _recieptAuto.Aut_cate_cd, _recieptAuto.Aut_modify_dt, _recieptAuto.Aut_year);
                        RecieptNo = _recieptAuto.Aut_cate_cd + "-" + RecieptAuto.Aut_start_char + RecieptAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                        _recieptAuto.Aut_year = null;
                        _recieptAuto.Aut_modify_dt = null;

                        if (_salDAL.CheckSalesNo("sp_getreceiptno", "p_rept_no", RecieptNo) == 1)
                        {
                            _salDAL.UpdateInvoiceAutoNumber(_recieptAuto);
                            goto nxt2;
                        }
                        //_invDAL.UpdateAutoNumber(_recieptAuto);

                        _salDAL.UpdateInvoiceAutoNumber(_recieptAuto);
                    }
                    _salDAL.UpdateReceipt(InvoiceNo, RecieptNo, InvoiceSeqNo, RecieptSeqNo);
                    //Update receipt no which allocated by receipt entry as per invoice
                    _invRepDAL.UpdateAdvanceReceiptNofromInvoice(string.Empty, Convert.ToString(InvoiceSeqNo), InvoiceNo);
                    */

                    //Raise Delivery Order if the invoice going to deliver now!
                    if (_isDeliveryNow)
                    {
                        _pickSerial.ForEach(x => x.Tus_base_doc_no = InvoiceSeqNo.ToString());
                        _pickSerial.ForEach(x => x.Tus_usrseq_no = InventorySeqNo);
                        _inventoryHeader.Ith_pc = _invoiceHeader.Sah_pc;
                        _inventoryHeader.Ith_oth_docno = InvoiceSeqNo.ToString();
                        _inventoryHeader.Ith_entry_no = InvoiceSeqNo.ToString();
                        _inventoryHeader.Ith_seq_no = InventorySeqNo;

                        _inventoryHeader.InvoiceNoAfterSave = _invoiceHeader.Sah_inv_no;
                        // _inventoryHeader.Ith_acc_no = _invoiceHeader.Sah_acc_no;
                        _inventoryHeader.Cust_addr = _invoiceHeader.Sah_cus_add1;
                        _inventoryHeader.Cust_cd = _invoiceHeader.Sah_cus_cd;
                        _inventoryHeader.Cust_del_addr = _invoiceHeader.Sah_d_cust_add1;
                        _inventoryHeader.Cust_name = _invoiceHeader.Sah_cus_name;
                        _inventoryHeader.Invoice_dt = _invoiceHeader.Sah_dt;



                        InventoryBLL _bll = new InventoryBLL();
                        //_bll.DeliveryOrderInterCompany(_inventoryHeader, _pickSerial, _pickSubSerial, _inventoryAuto, out  _doNo, _invRepDAL, _invDAL);
                        //Code by Chamal 13-May-2013 edit DeliveryOrder function and new DeliveryOrderEntry

                        _bll.DeliveryOrderWithoutAutoNo(_inventoryHeader, _pickSerial, _pickSubSerial, _inventoryAuto, _invRepDAL, _invDAL, true, out _invHdr, out _dataTable);
                    }
                }
                else
                {
                    InvoiceNo = Convert.ToString(InvoiceSeqNo);
                }

                _invSeq = InvoiceSeqNo.ToString();
                _recieptSeq = RecieptSeqNo.ToString();
                _mov = _invHdr;
                _datatable = _dataTable;
                #endregion
            }
            catch (Exception ex)
            {
                _invSeq = "";
                _recieptSeq = "";
                _mov = null;
                _datatable = null;
                _error += "Generated error " + ex.Message;
                if (_error.Contains("UK_SAHINVNO") || _error.Contains("ORA-00001"))
                {
                    _error = "Please try again in a few seconds.";
                }
            }

            _invNo = InvoiceNo;
            _recNo = RecieptNo;

            _invoiceNo = _invNo;
            _receiptNo = _recNo;
            _deliveryOrder = _doNo;
            _errorlist = _error;

        }

        //2018-05-05
        public void CommonSaveInvoiceWithDeliveryOrderWithTransaction(InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, List<InvoiceSerial> _invoiceSerial, RecieptHeader _recieptHeader, List<RecieptItem> _recieptItem, InventoryHeader _inventoryHeader, List<ReptPickSerials> _pickSerial, List<ReptPickSerialsSub> _pickSubSerial, MasterAutoNumber _invoiceAuto, MasterAutoNumber _recieptAuto, MasterAutoNumber _inventoryAuto, bool _isDeliveryNow, out  string _invoiceNo, out string _receiptNo, out string _deliveryOrder, InventoryDAL _invDAL, SalesDAL _salDAL, ReptCommonDAL _invRepDAL, bool _isHold, bool _isHoldInvoiceProcess, out string _errorlist, bool _ishireSale, out string _invSeq, out string _recieptSeq, out InventoryHeader _mov, out DataTable _datatable)
        {
            string _invNo = "";
            string _recNo = "";
            string _doNo = "";

            List<ReptPickSerials> _remakeReptSerialList = new List<ReptPickSerials>();
            string _error = string.Empty;

            #region Delivery Now - Reserve Serialized/Non-Serialized Item inline
            if (_isDeliveryNow)
            {
                #region remove resavation by tharanga 2018/04/25
                if (_recieptItem != null)
                {
                    foreach (RecieptItem recieptItem in _recieptItem)
                    {
                        if (recieptItem.Sard_pay_tp == "ADVAN")
                        {

                            List<ReceiptItemDetails> _tmpRecItem = new List<ReceiptItemDetails>();
                            _tmpRecItem = _salesDAL.GetAdvanReceiptItems(recieptItem.Sard_ref_no);
                            foreach (ReceiptItemDetails item in _tmpRecItem)
                            {
                                if (item.Sari_qty > 0 && item.sari_is_res == 1)
                                {
                                    var _tblocainv =
                                      from _pickSerials in _pickSerial
                                      group _pickSerials by new { _pickSerials.Tus_itm_cd, _pickSerials.Tus_itm_stus } into itm
                                      select new { itemcode = itm.Key.Tus_itm_cd, itemstatus = itm.Key.Tus_itm_stus, itemqty = itm.Sum(p => p.Tus_qty) };

                                    foreach (var locaitems in _tblocainv)
                                    {
                                        _pickSerial.Where(r => r.Tus_itm_cd == locaitems.itemcode && r.Tus_itm_stus == locaitems.itemstatus).ToList()
                                               .ForEach(i =>
                                               {
                                                   i.Tus_resqty = locaitems.itemqty;
                                               });//itm_Lineno

                                    }
                                }
                            }
                        }
                    }
                }
                #endregion
                bool _isOK = true;
                string _list = string.Empty;

                _isOK = TakeInventorySerialwithItem(_invoiceHeader.Sah_dt, _invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _inventoryHeader.Ith_loc, _invoiceItem, _pickSerial, _invDAL, _salDAL, _invRepDAL, out _remakeReptSerialList, out _list);

                if (_isOK == false)
                {
                    _error = "Inventory and invoice qty mismatch found. process aborted!";
                    _invoiceNo = _invNo;
                    _receiptNo = _recNo;
                    _deliveryOrder = _doNo;
                    _errorlist = _error;
                    _invSeq = "";
                    _recieptSeq = "";
                    _mov = null;
                    _datatable = null;
                    return;
                }

                _pickSerial = new List<ReptPickSerials>();
                _pickSerial = _remakeReptSerialList;
            }
            #endregion

            string InvoiceNo = _invoiceHeader.Sah_inv_no;
            string RecieptNo = string.Empty;
            try
            {
                Int32 _invoiceLine = 1;
                DataTable _tbl = _salDAL.GetEmployee(_invoiceHeader.Sah_com, _invoiceHeader.Sah_sales_ex_cd);
                string _executiveType = string.Empty;
                foreach (DataRow _r in _tbl.Rows)
                {
                    _executiveType = Convert.ToString(_r["esep_cat_cd"]);
                }
                List<SaleCommission> _saveCommission = new List<SaleCommission>();

                #region Delete invoice if its a HOLD status
                if (_isHold || _isHoldInvoiceProcess) _salDAL.DeleteInvoiceDetailForHold(_invoiceHeader.Sah_seq_no);
                #endregion

                //Generate SeqNo
                //If hold, then client should generate the sequence and assign to header,ie; if its recall hold invoice and need to second time hold, could set sequence no
                //as per the recalled sequence no
                Int32 InvoiceSeqNo = _isHoldInvoiceProcess ? _invoiceHeader.Sah_seq_no : _invDAL.GetSerialID();
                Int32 RecieptSeqNo = !string.IsNullOrEmpty(_recieptHeader.Sar_receipt_type) ? _invDAL.GetSerialID() : -1;
                Int32 InventorySeqNo = 0;
                if (_isDeliveryNow) InventorySeqNo = _invDAL.GetSerialID();
                if (_isHold==true && _isHoldInvoiceProcess==false)
                {
                    _invoiceHeader.Sah_inv_no = InvoiceSeqNo.ToString();
                }
                //-------------------------------------------------------------------------- Invoice------------------------------------------------------------------------

                _invoiceHeader.Sah_seq_no = InvoiceSeqNo;
                //_invoiceHeader.Sah_inv_no = Convert.ToString(InvoiceSeqNo);


                #region Calculation for total of the payment to infiltrate invoice header

                decimal _totalValue = _invoiceItem.Sum(x => x.Sad_tot_amt);
                decimal _totalReceiptAmt = 0;
                if (_recieptItem != null) if (_recieptItem.Count > 0) _totalReceiptAmt = _recieptItem.Sum(x => x.Sard_settle_amt);

                _invoiceHeader.Sah_anal_7 = _totalValue;// -_totalReceiptAmt; //Total Invoice Amount - Total Receipt AmountBY DARSHANA 3/12/2012
                _invoiceHeader.Sah_anal_8 = _totalReceiptAmt;//Receipt Amount

                //ADDED SACHITH 2013/12/04
                //CREDIT SALES
                //FOR SVAT CUSTOMERS ADD TAX VALUE TO ANAL_8
                //if (_invoiceHeader.Sah_is_svat && _invoiceHeader.Sah_inv_tp == "CRED")
                //{
                //    decimal vatTotal = _invoiceItem.Sum(X => X.Sad_itm_tax_amt);
                //    _invoiceHeader.Sah_anal_8 = _invoiceHeader.Sah_anal_8 + vatTotal;
                //}

                //kapila 11/8/2015
                //if (_invoiceHeader.Sah_inv_tp == "CRED")
                //    _invoiceHeader.Sah_anal_8 = 0;

                if (_invoiceSerial != null)
                    if (_invoiceSerial.Count > 0)
                    {
                        //_invoiceSerial.ForEach(X => X.Sap_inv_no = Convert.ToString(InvoiceSeqNo));
                        _invoiceSerial.ForEach(X => X.Sap_inv_no = _invoiceHeader.Sah_inv_no);
                        _invoiceSerial.ForEach(x => x.Sap_seq_no = InvoiceSeqNo);
                    }


                DataTable _tblESDEPFWHF = new DataTable();
                _tblESDEPFWHF = _salDAL.Get_ESD_EPF_WHT(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_dt);
                Decimal ESD_rt = 0; Decimal EPF_rt = 0; Decimal WHT_rt = 0;
                if (_tblESDEPFWHF.Rows.Count > 0) { ESD_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_ESD"]); EPF_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_EPF"]); WHT_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_WHT"]); }
                _invoiceHeader.Sah_esd_rt = ESD_rt;
                _invoiceHeader.Sah_epf_rt = EPF_rt;
                _invoiceHeader.Sah_wht_rt = WHT_rt;
                _recieptHeader.Sar_esd_rate = ESD_rt;
                _recieptHeader.Sar_epf_rate = EPF_rt;
                _recieptHeader.Sar_wht_rate = WHT_rt;

                #endregion
                //Save Invoice Header
                #region Save Invoice Header
                _salDAL.SaveSalesHeader(_invoiceHeader);
                #endregion

                //Save Invoice Items
                #region Invoice Item Detail
                List<INR_RES_LOG> _resLogAvaData = new List<INR_RES_LOG>();
                int _res = 0;
                string _docNo = string.Empty;
                MasterProfitCenter _MasterProfitCenter = _inventoryDAL.GetProfitCenter(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc);

                //add by akila 2017/08/05
                int _satItemTaxSaveCount = 0;

                foreach (InvoiceItem _itm in _invoiceItem)
                {
                    MasterItem _item = _invDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);

                    _itm.Sad_seq_no = InvoiceSeqNo;
                    _invoiceLine = _itm.Sad_itm_line;
                    //_itm.Sad_inv_no = Convert.ToString(InvoiceSeqNo);
                    _itm.Sad_inv_no = _invoiceHeader.Sah_inv_no;
                    _itm.Sad_unit_amt = _itm.Sad_unit_rt * _itm.Sad_qty;
                    _itm.Sad_itm_tp = _item.Mi_itm_tp;
                    _itm.Sad_uom = _item.Mi_itm_uom;
                    _itm.Sad_trd_svc_chrg = Math.Round((_itm.Sad_tot_amt - _itm.Sad_itm_tax_amt) / _itm.Sad_qty, 2);
                    if (_invoiceHeader.Sah_tax_exempted)
                    {
                        _itm.Sad_tot_amt = _itm.Sad_tot_amt - _itm.Sad_itm_tax_amt;
                        _itm.Sad_itm_tax_amt = 0;
                    }

                    //kapila 28/6/2016 check sad_qty and sad_do_qty for easy cash and reload
                    if (_isDeliveryNow) //kapila 20/12/2016
                    {
                        if (_itm.Sad_itm_cd == "DLG-EZCASH" || _itm.Sad_itm_cd == "RELOADDLG")
                        {
                            if (_itm.Sad_qty != _itm.Sad_do_qty)
                            {
                                _error = "Invoice Qty and DO Qty mismatch found. Contact IT Department!";
                                _invoiceNo = _invNo;
                                _receiptNo = _recNo;
                                _deliveryOrder = _doNo;
                                _errorlist = _error;
                                _invSeq = "";
                                _recieptSeq = "";
                                _mov = null;
                                _datatable = null;
                                return;
                            }
                        }

                        //kapila 2/6/2016 check sad_qty and sad_do_qty
                        //if (_invoiceHeader.Sah_com == "AST")
                        MasterProfitCenter _PC = new MasterProfitCenter();
                        _PC = _inventoryDAL.GetProfitCenter(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc);

                        //if (_invoiceHeader.Sah_com == "ABL" && (_PC.Mpc_chnl == "ABT" || _PC.Mpc_chnl == "SKE" || _PC.Mpc_chnl == "TFS"))    //kapila 2/2/2017
                        if (_invoiceHeader.Sah_com == "ABL" && _PC.Mpc_chnl == "ABT")    //kapila 2/2/2017
                        {
                            if (_itm.Sad_qty != _itm.Sad_do_qty)
                            {
                                _error = "Invoice Qty and DO Qty mismatch found. Contact IT Department!";
                                _invoiceNo = _invNo;
                                _receiptNo = _recNo;
                                _deliveryOrder = _doNo;
                                _errorlist = _error;
                                _invSeq = "";
                                _recieptSeq = "";
                                _mov = null;
                                _datatable = null;
                                return;
                            }
                        }
                    }
                    //update DO qty
                    if (_isDeliveryNow)
                    {

                        decimal _doQty = 0;
                        if (_item.Mi_is_ser1 != -1) //kapila 27/1/2016 mod for abstract
                        {

                            List<ReptPickSerials> _temp = _pickSerial.Where(x => x.Tus_base_itm_line == _itm.Sad_itm_line).ToList<ReptPickSerials>();
                            if (_temp != null && _temp.Count > 0)
                            {
                                _doQty = _temp.Sum(p => p.Tus_qty);
                                foreach (ReptPickSerials _serial in _temp)
                                {
                                    int extendwarr = 0;
                                    if (_MasterProfitCenter.Mpc_wara_extend > 0)
                                    {
                                        extendwarr = _MasterProfitCenter.Mpc_wara_extend;
                                        _serial.Tus_warr_period = Convert.ToInt32(_itm.Sad_warr_period) + extendwarr;
                                        _serial.Tus_Warranty_Remark = _itm.Sad_warr_remarks;

                                    }
                                    else
                                    {
                                        _serial.Tus_warr_period = Convert.ToInt32(_itm.Sad_warr_period);
                                        _serial.Tus_Warranty_Remark = _itm.Sad_warr_remarks;
                                    }
                                }
                            }
                            if (_itm.Sad_do_qty == 0)
                            {
                                _itm.Sad_do_qty = _doQty;
                            }
                        }
                        //added by dilshan for decimal item do qty update issue on 10/05/2018
                        if (_item.Mi_is_ser1 == -1)
                        {
                            if (_itm.Sad_do_qty == 0)
                            {
                                _itm.Sad_do_qty = _itm.Sad_qty;
                            }
                        }
                    }

                    _salDAL.SaveSalesItem(_itm);
                    _salDAL.UpdatePrice(_itm.Sad_itm_cd, _itm.Sad_pbook, _itm.Sad_pb_lvl, _invoiceHeader.Sah_cus_cd, _itm.Sad_promo_cd, _itm.Sad_seq, _itm.Sad_itm_seq);

                    //kapila 18/2/2016
                    Boolean _isStrucBaseTax = false;
                    MasterCompany _masterComp = null;
                    _masterComp = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com);
                    if (_masterComp.MC_TAX_CALC_MTD == "1") _isStrucBaseTax = true;

                    _satItemTaxSaveCount = 0;
                    if (_invoiceHeader.Sah_dt == DateTime.Now.Date)
                    {
                        List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                        //added by subodana NBT 2017/10/30
                        List<MasterItemTax> _Nbttax = new List<MasterItemTax>();
                        List<MasterItemTax> _XID = new List<MasterItemTax>();


                        if (_isStrucBaseTax == true)
                        {
                            MasterItem _mstItem = _invDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);
                            _itmTax = _salesDAL.GetItemTax_strucbase(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, "VAT", _mstItem.Mi_anal1);
                            //_itmTax = _salesDAL.GetItemTax_strucbase(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "VAT", string.Empty, _mstItem.Mi_anal1);
                            _Nbttax = _salesDAL.GetItemTax_strucbase(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "NBT", string.Empty, _mstItem.Mi_anal1);
                            _XID = _salesDAL.GetItemTax_strucbase(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "XID", string.Empty, _mstItem.Mi_anal1);
                        }
                        else
                        {
                            _itmTax = _salDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);
                        }


                        //added by subodana NBT 2017/10/30
                        if ((_Nbttax != null) && (_Nbttax.Count > 0) && _itm.Sad_itm_tax_amt > 0)
                        {
                            foreach (MasterItemTax _one in _Nbttax)
                            {
                                InvoiceItemTax _tax = new InvoiceItemTax();
                                _tax.Satx_inv_no = _itm.Sad_inv_no;
                                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                _tax.Satx_itm_line = _itm.Sad_itm_line;

                                if (_invoiceHeader.Sah_com == "SAE")
                                {
                                    _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / (100 - _one.Mict_tax_rate));
                                }
                                else
                                {
                                    _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100);
                                }


                                _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                _tax.Satx_job_line = 0;
                                _tax.Satx_job_no = "";
                                _tax.Satx_seq_no = InvoiceSeqNo;
                                _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);

                                if (_invoiceHeader.Sah_com == "SAE")
                                {

                                    _itm.Sad_itm_tax_amt = _itm.Sad_itm_tax_amt - (((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / (100 - _one.Mict_tax_rate));
                                }
                                else
                                {
                                    _itm.Sad_itm_tax_amt = _itm.Sad_itm_tax_amt - (((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100);
                                }


                            }

                        }
                        else
                        {
                            _Nbttax = _salesDAL.GetCustomerTax(_invoiceHeader.Sah_cus_cd, _invoiceHeader.Sah_com);
                            if (_Nbttax != null && _Nbttax.Count > 0 && _itm.Sad_itm_tax_amt > 0)
                            {
                                foreach (MasterItemTax _one in _Nbttax)
                                {
                                    InvoiceItemTax _tax = new InvoiceItemTax();
                                    _tax.Satx_inv_no = _itm.Sad_inv_no;
                                    _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                    _tax.Satx_itm_line = _itm.Sad_itm_line;

                                    if (_invoiceHeader.Sah_com == "SAE")
                                    {
                                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : ((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / (100 - _one.Mict_tax_rate);
                                    }
                                    else
                                    {
                                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : ((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100;
                                    }

                                    _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                    _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                    _tax.Satx_job_line = 0;
                                    _tax.Satx_job_no = "";
                                    _tax.Satx_seq_no = InvoiceSeqNo;
                                    _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);
                                    _itm.Sad_itm_tax_amt = _itm.Sad_itm_tax_amt - (((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100);
                                }
                            }

                        }
                        if ((_XID != null) && (_XID.Count > 0) && _itm.Sad_itm_tax_amt > 0)
                        {
                            foreach (MasterItemTax _one in _XID)
                            {
                                InvoiceItemTax _tax = new InvoiceItemTax();
                                _tax.Satx_inv_no = _itm.Sad_inv_no;
                                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                _tax.Satx_itm_line = _itm.Sad_itm_line;
                                _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100);
                                _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                _tax.Satx_job_line = 0;
                                _tax.Satx_job_no = "";
                                _tax.Satx_seq_no = InvoiceSeqNo;
                                _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);
                                _itm.Sad_itm_tax_amt = _itm.Sad_itm_tax_amt - (((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100);
                            }

                        }
                        if (_itm.Sad_itm_tax_amt == 0)
                        {
                            InvoiceItemTax _tax = new InvoiceItemTax();
                            _tax.Satx_inv_no = _itm.Sad_inv_no;
                            _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                            _tax.Satx_itm_line = _itm.Sad_itm_line;
                            _tax.Satx_itm_tax_amt = 0;
                            _tax.Satx_itm_tax_rt = 0;
                            _tax.Satx_itm_tax_tp = "VAT";
                            _tax.Satx_job_line = 0;
                            _tax.Satx_job_no = "";
                            _tax.Satx_seq_no = InvoiceSeqNo;
                            _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);
                        }
                        //updated by akila 2017/085/05
                        if ((_itmTax != null) && (_itmTax.Count > 0) && _itm.Sad_itm_tax_amt > 0)
                        {
                            decimal _taxnbtval = 0;
                            decimal _taxxidval = 0;
                            decimal _taxvatval = 0;

                            int _taxnbtvalcount = _itmTax.Where(a => a.Mict_tax_cd == "NBT").Count();
                            if (_taxnbtvalcount > 0)
                            {

                                if (_invoiceHeader.Sah_com == "SAE")
                                {
                                    _taxnbtval = (_itm.Sad_unit_rt * _itm.Sad_qty - _itm.Sad_disc_amt) * _itmTax.Where(a => a.Mict_tax_cd == "NBT").First().Mict_tax_rate / (100 - _itmTax.Where(a => a.Mict_tax_cd == "NBT").First().Mict_tax_rate);
                                }
                                else
                                {
                                    _taxnbtval = (_itm.Sad_unit_rt * _itm.Sad_qty - _itm.Sad_disc_amt) * _itmTax.Where(a => a.Mict_tax_cd == "NBT").First().Mict_tax_rate / 100;
                                }


                            }

                            int _taxxidvalcount = _itmTax.Where(a => a.Mict_tax_cd == "XID").Count();
                            if (_taxxidvalcount > 0)
                            {
                                _taxxidval = (_itm.Sad_unit_rt * _itm.Sad_qty - _itm.Sad_disc_amt) * _itmTax.Where(a => a.Mict_tax_cd == "XID").First().Mict_tax_rate / 100;
                            }


                            int _taxvatvalcount = _itmTax.Where(a => a.Mict_tax_cd == "VAT").Count();
                            if (_taxvatvalcount > 0)
                            {
                                if (_invoiceHeader.Sah_tax_exempted == false)
                                {
                                    if (_invoiceHeader.Sah_tax_inv == false)
                                    {
                                        if (_itm.Sad_disc_amt < 0) //add by  tharanga 2018/07/24 - discount tax validation
                                        {
                                            _taxvatval = ((_itm.Sad_unit_rt * _itm.Sad_qty) + _taxnbtval + _taxxidval - ((_itm.Sad_disc_amt * 100) / (100 + _itmTax.Where(a => a.Mict_tax_cd == "VAT").First().Mict_tax_rate))) * _itmTax.Where(a => a.Mict_tax_cd == "VAT").First().Mict_tax_rate / 100;
                                            //FigureRoundUp(_totalAmount - ((_disAmt * 100) / (100 + _itm_tax_rate)) + Convert.ToDecimal(txtTaxAmt.Text), true);
                                        }
                                        else
                                        {
                                            _taxvatval = ((_itm.Sad_unit_rt * _itm.Sad_qty) + _taxnbtval + _taxxidval) * _itmTax.Where(a => a.Mict_tax_cd == "VAT").First().Mict_tax_rate / 100;
                                        }

                                    }
                                    else
                                    {
                                        _taxvatval = ((_itm.Sad_unit_rt * _itm.Sad_qty - _itm.Sad_disc_amt) + _taxnbtval + _taxxidval) * _itmTax.Where(a => a.Mict_tax_cd == "VAT").First().Mict_tax_rate / 100;
                                    }
                                }
                                else
                                {
                                    _taxvatval = 0;
                                }

                                PriceBookLevelRef _priceBookLevelRef = _salDAL.GetPriceLevel(_invoiceHeader.Sah_com, _itm.Sad_pbook, _itm.Sad_pb_lvl);
                                if (_itm.Sad_disc_amt > 0)
                                {
                                    if (_priceBookLevelRef != null)
                                        if (_priceBookLevelRef.Sapl_vat_calc)
                                        {
                                            _taxvatval = ((_itm.Sad_unit_rt * _itm.Sad_qty + _taxvatval - _itm.Sad_disc_amt) + _taxnbtval + _taxxidval) * _itmTax.Where(a => a.Mict_tax_cd == "VAT").First().Mict_tax_rate / (100 + _itmTax.Where(a => a.Mict_tax_cd == "VAT").First().Mict_tax_rate);
                                        }
                                }

                            }

                            foreach (MasterItemTax _one in _itmTax)
                            {
                                if (_one.Mict_tax_cd != "NBT")
                                {
                                    InvoiceItemTax _tax = new InvoiceItemTax();
                                    _tax.Satx_inv_no = _itm.Sad_inv_no;
                                    _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                    _tax.Satx_itm_line = _itm.Sad_itm_line;

                                    if (_one.Mict_tax_cd == "VAT")
                                    {
                                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _taxvatval;
                                    }
                                    else if (_one.Mict_tax_cd == "XID")
                                    {
                                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _taxxidval;
                                    }
                                    else
                                    {
                                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;
                                    }
                                    // ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                    _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                    _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                    _tax.Satx_job_line = 0;
                                    _tax.Satx_job_no = "";
                                    _tax.Satx_seq_no = InvoiceSeqNo;
                                    _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);

                                }
                                else
                                {
                                    if (_Nbttax != null && _Nbttax.Count > 0)
                                    {

                                    }
                                    else
                                    {
                                        InvoiceItemTax _tax = new InvoiceItemTax();
                                        _tax.Satx_inv_no = _itm.Sad_inv_no;
                                        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                        _tax.Satx_itm_line = _itm.Sad_itm_line;
                                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _taxnbtval;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                        _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                        _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                        _tax.Satx_job_line = 0;
                                        _tax.Satx_job_no = "";
                                        _tax.Satx_seq_no = InvoiceSeqNo;
                                        _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);
                                    }
                                }

                            }
                        }
                        else
                        {
                            if (_itm.Sad_itm_tax_amt > 0)
                                throw new Exception("Transaction cannot be processed. Tax definition not found for item code - " + _itm.Sad_itm_cd);
                        }


                    }
                    else
                    {
                        //update by akila 2017/09/08
                        if (_isStrucBaseTax)
                        {
                            List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                            //added by subodana NBT 2017/10/30
                            List<MasterItemTax> _Nbttax = new List<MasterItemTax>();
                            List<MasterItemTax> _XID = new List<MasterItemTax>();

                            MasterItem _mstItem = _invDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);
                            _itmTax = _salesDAL.GetItemTax_strucbase(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "VAT", string.Empty, _mstItem.Mi_anal1);
                            _Nbttax = _salesDAL.GetItemTax_strucbase(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "NBT", string.Empty, _mstItem.Mi_anal1);
                            _XID = _salesDAL.GetItemTax_strucbase(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "XID", string.Empty, _mstItem.Mi_anal1);
                            //added by subodana NBT 2017/10/30
                            if ((_Nbttax != null) && (_Nbttax.Count > 0) && _itm.Sad_itm_tax_amt > 0)
                            {
                                foreach (MasterItemTax _one in _Nbttax)
                                {
                                    InvoiceItemTax _tax = new InvoiceItemTax();
                                    _tax.Satx_inv_no = _itm.Sad_inv_no;
                                    _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                    _tax.Satx_itm_line = _itm.Sad_itm_line;

                                    if (_invoiceHeader.Sah_com == "SAE")
                                    {
                                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / (100 - _one.Mict_tax_rate));
                                    }
                                    else
                                    {
                                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100);
                                    }


                                    _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                    _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                    _tax.Satx_job_line = 0;
                                    _tax.Satx_job_no = "";
                                    _tax.Satx_seq_no = InvoiceSeqNo;
                                    _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);

                                    if (_invoiceHeader.Sah_com == "SAE")
                                    {

                                        _itm.Sad_itm_tax_amt = _itm.Sad_itm_tax_amt - (((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / (100 - _one.Mict_tax_rate));
                                    }
                                    else
                                    {
                                        _itm.Sad_itm_tax_amt = _itm.Sad_itm_tax_amt - (((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100);
                                    }

                                }

                            }
                            else
                            {
                                _Nbttax = _salesDAL.GetCustomerTax(_invoiceHeader.Sah_cus_cd, _invoiceHeader.Sah_com);
                                if (_Nbttax != null && _Nbttax.Count > 0 && _itm.Sad_itm_tax_amt > 0)
                                {
                                    foreach (MasterItemTax _one in _Nbttax)
                                    {
                                        InvoiceItemTax _tax = new InvoiceItemTax();
                                        _tax.Satx_inv_no = _itm.Sad_inv_no;
                                        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                        _tax.Satx_itm_line = _itm.Sad_itm_line;

                                        if (_invoiceHeader.Sah_com == "SAE")
                                        {
                                            _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / (100 - _one.Mict_tax_rate));
                                        }
                                        else
                                        {
                                            _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100);
                                        }


                                        _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                        _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                        _tax.Satx_job_line = 0;
                                        _tax.Satx_job_no = "";
                                        _tax.Satx_seq_no = InvoiceSeqNo;
                                        _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);
                                        _itm.Sad_itm_tax_amt = _itm.Sad_itm_tax_amt - (((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100);
                                    }
                                }


                            }
                            if ((_XID != null) && (_XID.Count > 0) && _itm.Sad_itm_tax_amt > 0)
                            {
                                foreach (MasterItemTax _one in _XID)
                                {
                                    InvoiceItemTax _tax = new InvoiceItemTax();
                                    _tax.Satx_inv_no = _itm.Sad_inv_no;
                                    _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                    _tax.Satx_itm_line = _itm.Sad_itm_line;
                                    _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100);
                                    _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                    _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                    _tax.Satx_job_line = 0;
                                    _tax.Satx_job_no = "";
                                    _tax.Satx_seq_no = InvoiceSeqNo;
                                    _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);
                                    _itm.Sad_itm_tax_amt = _itm.Sad_itm_tax_amt - (((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100);
                                }

                            }
                            if (_itm.Sad_itm_tax_amt == 0)
                            {
                                InvoiceItemTax _tax = new InvoiceItemTax();
                                _tax.Satx_inv_no = _itm.Sad_inv_no;
                                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                _tax.Satx_itm_line = _itm.Sad_itm_line;
                                _tax.Satx_itm_tax_amt = 0;
                                _tax.Satx_itm_tax_rt = 0;
                                _tax.Satx_itm_tax_tp = "VAT";
                                _tax.Satx_job_line = 0;
                                _tax.Satx_job_no = "";
                                _tax.Satx_seq_no = InvoiceSeqNo;
                                _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);
                            }
                            if ((_itmTax != null) && (_itmTax.Count > 0) && _itm.Sad_itm_tax_amt > 0)
                            {
                                foreach (MasterItemTax _one in _itmTax)
                                {
                                    if (_one.Mict_tax_cd != "NBT")
                                    {
                                        InvoiceItemTax _tax = new InvoiceItemTax();
                                        _tax.Satx_inv_no = _itm.Sad_inv_no;
                                        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                        _tax.Satx_itm_line = _itm.Sad_itm_line;
                                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                        _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                        _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                        _tax.Satx_job_line = 0;
                                        _tax.Satx_job_no = "";
                                        _tax.Satx_seq_no = InvoiceSeqNo;
                                        _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);
                                    }
                                }
                            }
                        }
                        else
                        {
                            //
                            List<MasterItemTax> _itmTaxEff = new List<MasterItemTax>();
                            _itmTaxEff = _salDAL.GetItemTaxEffDt(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _invoiceHeader.Sah_dt);

                            if (_itmTaxEff.Count > 0 && _itm.Sad_itm_tax_amt > 0)
                            {
                                decimal _taxnbtval = 0;
                                decimal _taxxidval = 0;
                                decimal _taxvatval = 0;

                                int _taxnbtvalcount = _itmTaxEff.Where(a => a.Mict_tax_cd == "NBT").Count();
                                if (_taxnbtvalcount > 0)
                                {
                                    if (_invoiceHeader.Sah_com == "SAE")
                                    {
                                        _taxnbtval = (_itm.Sad_unit_rt * _itm.Sad_qty - _itm.Sad_disc_amt) * _itmTaxEff.Where(a => a.Mict_tax_cd == "NBT").First().Mict_tax_rate / (100 - _itmTaxEff.Where(a => a.Mict_tax_cd == "NBT").First().Mict_tax_rate);
                                    }
                                    else
                                    {
                                        _taxnbtval = (_itm.Sad_unit_rt * _itm.Sad_qty - _itm.Sad_disc_amt) * _itmTaxEff.Where(a => a.Mict_tax_cd == "NBT").First().Mict_tax_rate / 100;
                                    }


                                }

                                int _taxxidvalcount = _itmTaxEff.Where(a => a.Mict_tax_cd == "XID").Count();
                                if (_taxxidvalcount > 0)
                                {
                                    _taxxidval = (_itm.Sad_unit_rt * _itm.Sad_qty - _itm.Sad_disc_amt) * _itmTaxEff.Where(a => a.Mict_tax_cd == "XID").First().Mict_tax_rate / 100;
                                }

                                int _taxvatvalcount = _itmTaxEff.Where(a => a.Mict_tax_cd == "VAT").Count();
                                if (_taxvatvalcount > 0)
                                {

                                    if (_invoiceHeader.Sah_tax_exempted == false)
                                    {
                                        if (_invoiceHeader.Sah_tax_inv == false)
                                        {
                                            _taxvatval = ((_itm.Sad_unit_rt * _itm.Sad_qty) + _taxnbtval + _taxxidval) * _itmTaxEff.Where(a => a.Mict_tax_cd == "VAT").First().Mict_tax_rate / 100;
                                        }
                                        else
                                        {
                                            _taxvatval = ((_itm.Sad_unit_rt * _itm.Sad_qty - _itm.Sad_disc_amt) + _taxnbtval + _taxxidval) * _itmTaxEff.Where(a => a.Mict_tax_cd == "VAT").First().Mict_tax_rate / 100;
                                        }
                                    }
                                    else
                                    {
                                        _taxvatval = 0;
                                    }

                                    PriceBookLevelRef _priceBookLevelRef = _salDAL.GetPriceLevel(_invoiceHeader.Sah_com, _itm.Sad_pbook, _itm.Sad_pb_lvl);
                                    if (_itm.Sad_disc_amt > 0)
                                    {
                                        if (_priceBookLevelRef != null)
                                            if (_priceBookLevelRef.Sapl_vat_calc)
                                            {
                                                _taxvatval = ((_itm.Sad_unit_rt * _itm.Sad_qty + _taxvatval - _itm.Sad_disc_amt) + _taxnbtval + _taxxidval) * _itmTaxEff.Where(a => a.Mict_tax_cd == "VAT").First().Mict_tax_rate / (100 + _itmTaxEff.Where(a => a.Mict_tax_cd == "VAT").First().Mict_tax_rate);
                                            }
                                    }
                                }
                                foreach (MasterItemTax _one in _itmTaxEff)
                                {
                                    InvoiceItemTax _tax = new InvoiceItemTax();
                                    _tax.Satx_inv_no = _itm.Sad_inv_no;
                                    _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                    _tax.Satx_itm_line = _itm.Sad_itm_line;
                                    if (_one.Mict_tax_cd == "VAT")
                                    {
                                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _taxvatval;
                                    }
                                    else if (_one.Mict_tax_cd == "XID")
                                    {
                                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _taxxidval;
                                    }
                                    else
                                    {
                                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;
                                    }
                                    // _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                    _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                    _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                    _tax.Satx_job_line = 0;
                                    _tax.Satx_job_no = "";
                                    _tax.Satx_seq_no = InvoiceSeqNo;
                                    _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);
                                }
                            }
                            else
                            {

                                List<LogMasterItemTax> _itmTax = new List<LogMasterItemTax>();
                                _itmTax = _salDAL.GetItemTaxLog(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _invoiceHeader.Sah_dt);

                                //updated by akila 2017/08/05
                                if ((_itmTax != null) && (_itmTax.Count > 0) && _itm.Sad_itm_tax_amt > 0)
                                {
                                    foreach (LogMasterItemTax _one in _itmTax)
                                    {
                                        InvoiceItemTax _tax = new InvoiceItemTax();
                                        _tax.Satx_inv_no = _itm.Sad_inv_no;
                                        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                        _tax.Satx_itm_line = _itm.Sad_itm_line;
                                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                        _tax.Satx_itm_tax_rt = _one.Lict_tax_rate;
                                        _tax.Satx_itm_tax_tp = _one.Lict_tax_cd;
                                        _tax.Satx_job_line = 0;
                                        _tax.Satx_job_no = "";
                                        _tax.Satx_seq_no = InvoiceSeqNo;
                                        _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);
                                    }
                                }
                                else { throw new Exception("Transaction cannot be processed. Tax definition not found for item code - " + _itm.Sad_itm_cd); }
                            }
                        }
                        //List<MasterItemTax> _itmTaxEff = new List<MasterItemTax>();
                        //_itmTaxEff = _salDAL.GetItemTaxEffDt(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _invoiceHeader.Sah_dt);

                        //if (_itmTaxEff.Count > 0)
                        //{
                        //    foreach (MasterItemTax _one in _itmTaxEff)
                        //    {
                        //        InvoiceItemTax _tax = new InvoiceItemTax();
                        //        _tax.Satx_inv_no = _itm.Sad_inv_no;
                        //        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                        //        _tax.Satx_itm_line = _itm.Sad_itm_line;
                        //        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                        //        _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                        //        _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                        //        _tax.Satx_job_line = 0;
                        //        _tax.Satx_job_no = "";
                        //        _tax.Satx_seq_no = InvoiceSeqNo;
                        //        _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);
                        //    }
                        //}
                        //else
                        //{

                        //    List<LogMasterItemTax> _itmTax = new List<LogMasterItemTax>();
                        //    _itmTax = _salDAL.GetItemTaxLog(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _invoiceHeader.Sah_dt);

                        //    //updated by akila 2017/085/05
                        //    if ((_itmTax != null) && (_itmTax.Count > 0))
                        //    {
                        //        foreach (LogMasterItemTax _one in _itmTax)
                        //        {
                        //            InvoiceItemTax _tax = new InvoiceItemTax();
                        //            _tax.Satx_inv_no = _itm.Sad_inv_no;
                        //            _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                        //            _tax.Satx_itm_line = _itm.Sad_itm_line;
                        //            _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                        //            _tax.Satx_itm_tax_rt = _one.Lict_tax_rate;
                        //            _tax.Satx_itm_tax_tp = _one.Lict_tax_cd;
                        //            _tax.Satx_job_line = 0;
                        //            _tax.Satx_job_no = "";
                        //            _tax.Satx_seq_no = InvoiceSeqNo;
                        //            _satItemTaxSaveCount = _salDAL.SaveSalesItemTax(_tax);
                        //        }
                        //    }
                        //    else { throw new Exception("Transaction cannot be processed. Tax definition not found for item code - " + _itm.Sad_itm_cd); }
                        //}
                    }
                    //Dictionary<ItemHierarchyElement, string> _itemHierarchyElement = new Dictionary<ItemHierarchyElement, string>();
                    //_itemHierarchyElement.Add(ItemHierarchyElement.BRAND, _item.Mi_brand);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.ITEM, _item.Mi_cd);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.MAIN_CATEGORY, _item.Mi_cate_1);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.PRICE_BOOK, _itm.Sad_pbook);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.PRICE_LEVEL, _itm.Sad_pb_lvl);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.PROMOTION, _itm.Sad_promo_cd);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.SERIAL, string.Empty);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.SUB_CATEGORY, _item.Mi_cate_2);

                    //List<CashCommissionDetailRef> _CashCommissionDetail = GetCommissionStructure(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_inv_tp, _invoiceHeader.Sah_dt, _itm.Sad_pbook, _itm.Sad_pb_lvl, _invoiceHeader.Sah_sales_ex_cd, _executiveType, _itemHierarchyElement, "PC_PRIT_HIERARCHY", "PC");
                    //List<SaleCommission> _commission = null;

                    ////commission calculation
                    //if (_CashCommissionDetail != null)
                    //{
                    //    if (_CashCommissionDetail.Count > 0)
                    //    {
                    //        _commission = GetCalculatedCommission(_itm.Sad_itm_cd, _invoiceLine, _itm.Sad_unit_rt * _itm.Sad_qty - _itm.Sad_disc_amt, _totalValue, _recieptItem, _CashCommissionDetail[0]);
                    //    }
                    //}

                    //if (_commission != null)
                    //    _saveCommission.AddRange(_commission);

                    //_invoiceLine += 1;
                    //Add by akila 2017/08/05
                    if (_satItemTaxSaveCount < 1 && _itm.Sad_itm_tax_amt > 0) { throw new Exception("Item tax details not updated properly"); }
                }

                //Update Discount Definition
                var _discountseq = _invoiceItem.Where(x => x.Sad_dis_type == "M").Select(x => x.Sad_dis_seq).Distinct().ToList();
                if (_discountseq != null && _discountseq.Count > 0)
                {
                    foreach (var _i in _discountseq)
                    {
                        int _seqno = Convert.ToInt32(_i);
                        _salDAL.UpdateGeneralDiscount("M", _seqno, 0);
                    }
                }
                #endregion

                #region Commission Part - Commented :)

                //if (_saveCommission != null)
                //    if (_saveCommission.Count > 0)
                //    {

                //        //Save Commissiom
                //        _saveCommission.ForEach(x => x.Sac_invoice_no = Convert.ToString(_invoiceHeader.Sah_seq_no));
                //        _saveCommission.ForEach(x => x.Sac_seq_no = _invoiceHeader.Sah_seq_no);
                //        foreach (SaleCommission _com in _saveCommission)
                //        {
                //            _salDAL.SaveSalesCommission(_com);
                //        }
                //    }

                #endregion

                //Save Invoice Serials
                #region Invoice Serial
                if (_invoiceSerial != null)
                    if (_invoiceSerial.Count > 0)
                    {
                        foreach (InvoiceSerial _itm in _invoiceSerial)
                        {
                            _itm.Sap_seq_no = InvoiceSeqNo;
                            _salDAL.SaveSalesSerial(_itm);
                        }
                    }
                #endregion

                //-------------------------------------------------------------------------- Payment
                #region Payment
                string _shortcompany = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com).Mc_anal5;
                if (_recieptHeader != null && _recieptItem != null && _recieptItem.Count > 0)
                {
                    _recieptHeader.Sar_seq_no = RecieptSeqNo;
                    _recieptHeader.Sar_receipt_no = Convert.ToString(RecieptSeqNo);
                    _recieptHeader.Sar_tot_settle_amt = _totalReceiptAmt;
                    _salDAL.SaveReceiptHeader(_recieptHeader);

                    if (_recieptItem != null)
                        if (_recieptItem.Count > 0)
                        {
                            foreach (RecieptItem _itm in _recieptItem)
                            {
                                _itm.Sard_seq_no = RecieptSeqNo;
                                _itm.Sard_inv_no = _invoiceHeader.Sah_inv_no;
                                _itm.Sard_receipt_no = Convert.ToString(RecieptSeqNo);
                                _salDAL.SaveReceiptItem(_itm);

                                if (_itm.Sard_pay_tp.Trim() == "ADVAN")
                                {
                                    _invRepDAL.UpdateAdvanceReceiptNofromInvoice(_itm.Sard_ref_no, Convert.ToString(InvoiceSeqNo), string.Empty);
                                    RecieptHeader _rHdr = new RecieptHeader();
                                    _rHdr.Sar_receipt_no = _itm.Sard_ref_no;
                                    _rHdr.Sar_used_amt = _itm.Sard_settle_amt;
                                    _rHdr.Sar_act = true;
                                    _rHdr.Sar_direct = true;
                                    _rHdr.Sar_mod_by = _recieptHeader.Sar_mod_by;
                                    _salDAL.SaveReceiptHeader(_rHdr);
                                }
                                if (_itm.Sard_pay_tp.Trim() == "CRNOTE")
                                {
                                    _salesDAL.UpdateCreditNoteBalance(_recieptHeader.Sar_com_cd, _recieptHeader.Sar_profit_center_cd, _itm.Sard_ref_no, _itm.Sard_settle_amt);
                                    MasterBusinessEntity _entity = _salDAL.GetBusinessCompanyDetail(_invoiceHeader.Sah_com, _invoiceHeader.Sah_cus_cd, null, null, "C");
                                    MasterProfitCenter _profit = _salDAL.GetProfitCenter(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc);
                                    #region credite note prom other pc
                                    DataTable _dHdr = _salesDAL.GetSalesHdr(_itm.Sard_ref_no);//add by tharanga 2018/036/06
                                    Boolean is_otherpc = false;
                                    string crednotepc = string.Empty;
                                    if (_dHdr != null)
                                    {
                                        if (_dHdr.Rows.Count > 0)
                                        {
                                            crednotepc = _dHdr.Rows[0]["SAH_PC"].ToString();
                                            if (_invoiceHeader.Sah_pc != crednotepc)
                                            {
                                                is_otherpc = true;
                                            }
                                        }
                                    }
                                    #endregion

                                    if (_entity != null)
                                        if (!string.IsNullOrEmpty(_entity.Mbe_com) && !string.IsNullOrEmpty(_entity.Mbe_mob))
                                        {
                                            string _realPhNo = GetRealPhoneNumber(_entity.Mbe_mob);
                                            OutSMS _out = new OutSMS();
                                            _out.Createtime = DateTime.Now;
                                            // _out.Msg = "Your customer code : " + _entity.Mbe_cd + " auth. payment " + _itm.Sard_settle_amt + " deduct from your cred. bal. at " + _profit.Mpc_desc + ". Enq SMS/Call " + _profit.Mpc_tel + ". " + _shortcompany + "";
                                            _out.Msg = "Dear customer (Code : " + _entity.Mbe_cd + "), your credit amount (from credit note # " + _itm.Sard_ref_no + ") reimbursed at " + _profit.Mpc_desc + ". Enq Call " + _profit.Mpc_tel + ". " + _shortcompany;
                                            _out.Msgstatus = 0;
                                            _out.Msgtype = "S";
                                            _out.Receivedtime = DateTime.Now;
                                            _out.Receiver = _entity.Mbe_cd;
                                            //_out.Receiverphno = _entity.Mbe_mob; //Edit by Chamal 31-03-2015
                                            _out.Senderphno = _entity.Mbe_mob;
                                            _out.Refdocno = _itm.Sard_ref_no;
                                            _out.Sender = _invoiceHeader.Sah_cre_by;
                                            _out.Createtime = DateTime.Now;
                                            _invDAL.SaveSMSOut(_out);
                                        }
                                    #region send email to the Manager add by tharanga
                                    if (is_otherpc == true) //send email add sms to the pc maneger //add by tharanga 2018/03/06
                                    {
                                        DataTable _empTbl = _salesDAL.GetPcEmployee(_invoiceHeader.Sah_com, crednotepc, "MANAGER");
                                        //insert into list
                                        if (_empTbl.Rows.Count > 0)
                                        {


                                            List<PostCommissionEmployee> _othEmpList = new List<PostCommissionEmployee>();

                                            foreach (DataRow dr in _empTbl.Rows)
                                            {
                                                if (Convert.ToInt32(dr["mpce_act"].ToString()) == 1)
                                                {
                                                    PostCommissionEmployee _othEmp = new PostCommissionEmployee();
                                                    _othEmp.Emp_code = dr["esep_cd"].ToString();
                                                    _othEmp.Emp_epf = dr["esep_epf"].ToString();
                                                    _othEmpList.Add(_othEmp);
                                                }
                                            }

                                            Employee _employee = new Employee();
                                            _employee = _generalDAL.GetEmployeeMaster(_othEmpList.FirstOrDefault().Emp_code, _invoiceHeader.Sah_com);
                                            if (_employee != null)
                                            {
                                                string email = "";
                                                string Item = "";
                                                string model = "";
                                                string qty = "";
                                                //DataTable pc = new DataTable();
                                                //pc = CHNLSVC.CustService.get_profitcenter(invHdr.Ith_com, invHdr.Ith_pc);
                                                //maillist = CHNLSVC.CustService.get_msg_info_MAIL(invHdr.Ith_com, invHdr.Ith_pc, "INV"); //define mail and ph no

                                                email = _employee.ESEP_email;

                                                if (IsValidEmail(email) == true)
                                                {
                                                    SmtpClient smtpClient = new SmtpClient();
                                                    MailMessage message = new MailMessage();

                                                    MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                                                    smtpClient.Host = _generalDAL.GetMailHost();
                                                    smtpClient.Port = 25;
                                                    message.From = fromAddress;

                                                    string _email = "";

                                                    _email = "Dear Sir/Madam, \n\n" + _email;
                                                    _email += "Credit note details  :" + crednotepc + " \n";
                                                    _email += "\n  Credit note  # : " + _itm.Sard_ref_no + "\n";
                                                    // _email += "\n " + _invNo + "\n";
                                                    _email += "\n  Customer : " + _invoiceHeader.Sah_cus_name + "\n";
                                                    _email += "\n  Address : " + _invoiceHeader.Sah_cus_add1 + _invoiceHeader.Sah_cus_add2 + "\n";
                                                    _email += _generalDAL.GetMailFooterMsg();

                                                    message.To.Add(email);
                                                    message.Subject = "Credit note details";
                                                    //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                                                    //message.Bcc.Add(new MailAddress(""));
                                                    message.IsBodyHtml = false;
                                                    message.Body = _email;
                                                    message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                                                    // Send SMTP mail
                                                    smtpClient.Send(message);

                                                }
                                            }
                                        }
                                    }
                                    #endregion
                                }

                                if (_itm.Sard_pay_tp.Trim() == "LORE")
                                {
                                    _salesDAL.RedeemLoyaltyPoint(_itm.Sard_ref_no, _invoiceHeader.Sah_cus_cd, _itm.Sard_anal_4);
                                }

                                if (_itm.Sard_pay_tp.Trim() == "GVO")
                                {
                                    //_fmsInventoryDal.UpdateRedeemVoucher(_itm.Sard_anal_1, _invoiceHeader.Sah_pc, _itm.Sard_sim_ser, _itm.Sard_ref_no, _itm.Sard_cc_tp, _itm.Sard_anal_2, _invoiceHeader.Sah_cre_by, _itm.Sard_settle_amt);
                                    _fmsInventoryDal.UpdateRedeemVoucher(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _itm.Sard_sim_ser, _itm.Sard_ref_no, _itm.Sard_cc_tp, _itm.Sard_anal_2, _invoiceHeader.Sah_cre_by, _itm.Sard_settle_amt);
                                }

                            }
                        }
                }
                #endregion

                #region Customer Account Maintain
                if (_invoiceHeader.Sah_cus_cd != "CASH")
                {
                    decimal _invoiceTotal = 0;
                    decimal _paidTotal = 0;

                    if (_invoiceItem != null)
                        if (_invoiceItem.Count > 0)
                        {
                            //Updating Account Balance
                            var _grandTotal = (from _total in _invoiceItem
                                               select _total.Sad_tot_amt).Sum();
                            _invoiceTotal = _grandTotal;
                        }

                    if (_recieptItem != null)
                        if (_recieptItem.Count > 0)
                        {
                            var _payTotal = (from _pay in _recieptItem
                                             select _pay.Sard_settle_amt).Sum();
                            _paidTotal = _payTotal;
                        }

                    CustomerAccountRef _account = new CustomerAccountRef();
                    _account.Saca_acc_bal = _invoiceTotal - _paidTotal;
                    _account.Saca_com_cd = _invoiceHeader.Sah_com;
                    _account.Saca_crdt_lmt = 0;
                    _account.Saca_cre_by = _invoiceHeader.Sah_cre_by;
                    _account.Saca_cre_when = _invoiceHeader.Sah_cre_when;
                    _account.Saca_cust_cd = _invoiceHeader.Sah_cus_cd;
                    _account.Saca_mod_by = _invoiceHeader.Sah_cre_by;
                    _account.Saca_mod_when = _invoiceHeader.Sah_cre_when;
                    _account.Saca_ord_bal = 0;
                    _account.Saca_session_id = _invoiceHeader.Sah_session_id;

                    //
                    // _salDAL.SaveCustomerAccount(_account);
                }
                #endregion

                if (!string.IsNullOrEmpty(_invoiceHeader.Sah_anal_6))
                {
                    DataTable _loldetail = _salDAL.GetLoyaltyCardDetail(_invoiceHeader.Sah_cus_cd, _invoiceHeader.Sah_anal_6);
                    string _loltype = string.Empty;
                    string _membership = string.Empty;
                    if (_loldetail != null && _loldetail.Rows.Count >= 0) 
                    { 
                        _loltype = _loldetail.Rows[0].Field<string>("salcm_loty_tp"); 
                        _membership = _loldetail.Rows[0].Field<string>("salcm_cus_spec"); 
                    }
                    
                    decimal _points = GetLoyaltyPoint(_loltype, _membership, _invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_dt, _invoiceItem, _invoiceSerial, _recieptItem, _salDAL, _invDAL, _invoiceHeader.Sah_inv_tp);
                    if (_points > 0)
                    {
                       // _salDAL.UpdateLoyaltyCardPoint(_invoiceHeader.Sah_cus_cd, _invoiceHeader.Sah_anal_6, _points, _invoiceHeader.Sah_cre_by);
                        InvoiceLoyalty _lol = new InvoiceLoyalty();
                        _lol.Stlt_inv_no = Convert.ToString(_invoiceHeader.Sah_inv_no);
                        _lol.Stlt_pt = _points;
                        _lol.Stlt_seq_no = _invoiceHeader.Sah_seq_no;
                        _salDAL.SaveInvoiceLoyalty(_lol);
                    }
                }

                InventoryHeader _invHdr = null;
                DataTable _dataTable = null; ;
                #region Invoice Auto Number/Delivery Order
                if (!_isHold)
                {
                    /*
                nxt1:
                    _invoiceAuto.Aut_year = null;
                    MasterAutoNumber InvoiceAuto = _invDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
                    if (!_ishireSale)
                        InvoiceNo = _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                    else
                        InvoiceNo = _invoiceAuto.Aut_cate_cd + "-" + _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                    _invoiceAuto.Aut_year = null;
                    _invoiceAuto.Aut_modify_dt = null;
                    if (_salDAL.CheckSalesNo("sp_getinvno", "p_inv_no", InvoiceNo) == 1)
                    {
                        _salDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
                        goto nxt1;
                    }

                    _salDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
                    _salDAL.UpdateInvoiceWithTaxCommission(InvoiceNo, string.Empty, InvoiceSeqNo, RecieptSeqNo);

                    if (_recieptAuto != null)
                    {
                    nxt2:
                        _recieptAuto.Aut_year = null;
                        MasterAutoNumber RecieptAuto = _invDAL.GetAutoNumber(_recieptAuto.Aut_moduleid, _recieptAuto.Aut_direction, _recieptAuto.Aut_start_char, _recieptAuto.Aut_cate_tp, _recieptAuto.Aut_cate_cd, _recieptAuto.Aut_modify_dt, _recieptAuto.Aut_year);
                        RecieptNo = _recieptAuto.Aut_cate_cd + "-" + RecieptAuto.Aut_start_char + RecieptAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                        _recieptAuto.Aut_year = null;
                        _recieptAuto.Aut_modify_dt = null;

                        if (_salDAL.CheckSalesNo("sp_getreceiptno", "p_rept_no", RecieptNo) == 1)
                        {
                            _salDAL.UpdateInvoiceAutoNumber(_recieptAuto);
                            goto nxt2;
                        }
                        //_invDAL.UpdateAutoNumber(_recieptAuto);

                        _salDAL.UpdateInvoiceAutoNumber(_recieptAuto);
                    }
                    _salDAL.UpdateReceipt(InvoiceNo, RecieptNo, InvoiceSeqNo, RecieptSeqNo);
                    //Update receipt no which allocated by receipt entry as per invoice
                    _invRepDAL.UpdateAdvanceReceiptNofromInvoice(string.Empty, Convert.ToString(InvoiceSeqNo), InvoiceNo);
                    */

                    //Raise Delivery Order if the invoice going to deliver now!
                    if (_isDeliveryNow)
                    {
                        _pickSerial.ForEach(x => x.Tus_base_doc_no = InvoiceSeqNo.ToString());
                        _pickSerial.ForEach(x => x.Tus_usrseq_no = InventorySeqNo);
                        _inventoryHeader.Ith_pc = _invoiceHeader.Sah_pc;
                        _inventoryHeader.Ith_oth_docno = InvoiceSeqNo.ToString();
                        _inventoryHeader.Ith_entry_no = InvoiceSeqNo.ToString();
                        _inventoryHeader.Ith_seq_no = InventorySeqNo;
                        _inventoryHeader.Ith_del_code = _invoiceHeader.Sah_d_cust_cd;//Wimal @ 01/Dec/2018 - deliver now not update delivery customercd in int_hdr from SCM2 invoice

                        _inventoryHeader.InvoiceNoAfterSave = _invoiceHeader.Sah_inv_no;
                        // _inventoryHeader.Ith_acc_no = _invoiceHeader.Sah_acc_no;
                        _inventoryHeader.Cust_addr = _invoiceHeader.Sah_cus_add1;
                        _inventoryHeader.Cust_cd = _invoiceHeader.Sah_cus_cd;
                        _inventoryHeader.Cust_del_addr = _invoiceHeader.Sah_d_cust_add1;
                        _inventoryHeader.Cust_name = _invoiceHeader.Sah_cus_name;
                        _inventoryHeader.Invoice_dt = _invoiceHeader.Sah_dt;



                        InventoryBLL _bll = new InventoryBLL();
                        //_bll.DeliveryOrderInterCompany(_inventoryHeader, _pickSerial, _pickSubSerial, _inventoryAuto, out  _doNo, _invRepDAL, _invDAL);
                        //Code by Chamal 13-May-2013 edit DeliveryOrder function and new DeliveryOrderEntry

                        //_bll.DeliveryOrderWithoutAutoNo(_inventoryHeader, _pickSerial, _pickSubSerial, _inventoryAuto, _invRepDAL, _invDAL, true, out _invHdr, out _dataTable);
                        _bll.DeliveryOrderWithoutAutoNo(_inventoryHeader, _pickSerial, _pickSubSerial, _inventoryAuto, _invRepDAL, _invDAL, true, out _invHdr, out _dataTable, _salDAL);
                    }
                }
                else
                {
                    // InvoiceNo = Convert.ToString(InvoiceSeqNo);
                    InvoiceNo = _invoiceHeader.Sah_inv_no; //add by tharanga 2018/08/22

                }

                _invSeq = InvoiceSeqNo.ToString();
                _recieptSeq = RecieptSeqNo.ToString();
                _mov = _invHdr;
                _datatable = _dataTable;
                #endregion
            }
            catch (Exception ex)
            {
                _invSeq = "";
                _recieptSeq = "";
                _mov = null;
                _datatable = null;
                _error += "Generated error " + ex.Message;
                if (_error.Contains("UK_SAHINVNO") || _error.Contains("ORA-00001"))
                {
                    _error = "Please try again in a few seconds.";
                }
            }

            _invNo = InvoiceNo;
            _recNo = RecieptNo;

            _invoiceNo = _invNo;
            _receiptNo = _recNo;
            _deliveryOrder = _doNo;
            _errorlist = _error;

        }

        private void UpdateInvoiceGiftVoucher(string _company, string _profitcenter, string _customer, string _name, string _address1, string _address2, string _mobile, DateTime _validfrom, string _invoice, string _user, List<InvoiceVoucher> _voucher, SalesDAL _salDAL, FMS_InventoryDAL _fmsDAL)
        {
            _salDAL.SaveInvoiceVoucher(_voucher);
            foreach (InvoiceVoucher _Voucher in _voucher)
            {
                int _month = 0;
                MasterItemWarrantyPeriod _Warra = _inventoryDAL.GetItemWarrantyDetail(_Voucher.Stvo_gv_itm, "GOD");
                if (_Warra != null) _month = _Warra.Mwp_val;

                GiftVoucherPages _page = new GiftVoucherPages();
                _page.Gvp_com = _company;
                _page.Gvp_pc = _profitcenter;
                _page.Gvp_gv_cd = _Voucher.Stvo_gv_itm;
                _page.Gvp_book = _Voucher.Stvo_bookno;
                _page.Gvp_page = _Voucher.Stvo_pageno;
                _page.Gvp_cus_cd = _customer;
                _page.Gvp_cus_name = _name;
                _page.Gvp_cus_add1 = _address1;
                _page.Gvp_cus_add2 = _address2;
                _page.Gvp_cus_mob = _mobile;
                _page.Gvp_valid_from = _validfrom.Date;
                _page.Gvp_oth_ref = _invoice;
                _page.Gvp_mod_dt = DateTime.Now;
                _page.Gvp_issue_dt = _validfrom.Date;
                _page.Gvp_issue_by = _user;
                _page.Gvp_mod_by = _user;

                _fmsDAL.UpdateGiftVoucherByInvoice(_page, _month);
            }
        }
        public Int32 SaveInvoice(InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, List<InvoiceSerial> _invoiceSerial, RecieptHeader _recieptHeader, List<RecieptItem> _recieptItem, InventoryHeader _inventoryHeader, List<ReptPickSerials> _pickSerial, List<ReptPickSerialsSub> _pickSubSerial, MasterAutoNumber _invoiceAuto, MasterAutoNumber _recieptAuto, MasterAutoNumber _inventoryAuto, bool _isDeliveryNow, out  string _invoiceNo, out string _receiptNo, out string _deliveryOrder, MasterBusinessEntity _businessCompany, bool _isHold, bool _isHoldInvoiceProcess, out string _errorlist, InventoryHeader _buybackheader, MasterAutoNumber _buybackauto, List<ReptPickSerials> _buybacklist, out string BuyBackInvNo)
        {

            string _invNo = string.Empty;
            string _recNo = string.Empty;
            string _buybackinv = string.Empty;
            string _DONo = string.Empty;
            Int32 _effect = 0;
            string _location = string.Empty;
            string _error = string.Empty;
            string _db = string.Empty;

            using (TransactionScope _tr = new TransactionScope(TransactionScopeOption.RequiresNew))
            {
                try
                {
                    _db = DataBase._ems; _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen();
                    //_salesDAL.BeginTransaction(); 
                    _db = DataBase._ems; _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen();
                    //_inventoryDAL.BeginTransaction(); 
                    _db = DataBase._fms; _fmsInventoryDal = new FMS_InventoryDAL(); _fmsInventoryDal.ConnectionOpen();
                    //_fmsInventoryDal.BeginTransaction(); 
                    _db = DataBase._reportdb; _inventoryRepDAL = new ReptCommonDAL(); _inventoryRepDAL.ConnectionOpen();
                    //_inventoryRepDAL.BeginTransaction(); 
                    _db = DataBase._ems; _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen();
                    //_generalDAL.BeginTransaction();
                }
                catch { _invoiceNo = string.Empty; _receiptNo = string.Empty; _deliveryOrder = string.Empty; _errorlist = "Database" + _db + " is not responding. Please contact IT Operation."; BuyBackInvNo = _buybackinv; _effect = -1; return _effect; }


                //try
                //{

                //_salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen();
                //_inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen();
                //_fmsInventoryDal = new FMS_InventoryDAL(); _fmsInventoryDal.ConnectionOpen();
                //_inventoryRepDAL = new ReptCommonDAL(); _inventoryRepDAL.ConnectionOpen();

                _location = _invoiceHeader.Sah_anal_1;
                _invoiceHeader.Sah_anal_1 = null;
                CommonSaveInvoiceWithDeliveryOrder(_invoiceHeader, _invoiceItem, _invoiceSerial, _recieptHeader, _recieptItem, _inventoryHeader, _pickSerial, _pickSubSerial, _invoiceAuto, _recieptAuto, _inventoryAuto, _isDeliveryNow, out _invNo, out _recNo, out _DONo, _inventoryDAL, _salesDAL, _inventoryRepDAL, _isHold, _isHoldInvoiceProcess, out _error, false);

                string _cusNo = _invoiceHeader.Sah_cus_cd;
                if (string.IsNullOrEmpty(_error))
                {
                    #region Buyback Item
                    if (_buybacklist != null) if (_buybacklist.Count > 0)
                        {
                            InventoryBLL _bll = new InventoryBLL();
                            _bll._salesDAL = _salesDAL;
                            _bll._inventoryDAL = _inventoryDAL;
                            _bll._FMSinventoryDAL = _fmsInventoryDal;
                            _bll._inventoryRepDAL = _inventoryRepDAL;
                            _buybackheader.Ith_manual_ref = _invNo;
                            _bll.SaveInwardScanSerial(_buybackheader, _buybacklist, null);
                            _bll.UpdateInventoryAutoNumber(_buybackheader, _buybackauto, "+", out  _buybackinv);
                            _inventoryDAL.UpdateMovementDocNo_Other(_buybackheader.Ith_seq_no, _buybackinv);
                        }
                    #endregion
                    #region Customer Creation
                    if (_invoiceHeader.Sah_cus_cd == "CASH" && (!string.IsNullOrEmpty(_businessCompany.Mbe_nic) || !string.IsNullOrEmpty(_businessCompany.Mbe_mob)))
                    {
                        MasterBusinessEntity _nic = _salesDAL.GetActiveBusinessCompanyDetail(_invoiceHeader.Sah_com, string.Empty, _businessCompany.Mbe_nic, string.Empty, "C");
                        MasterBusinessEntity _mobile = _salesDAL.GetActiveBusinessCompanyDetail(_invoiceHeader.Sah_com, string.Empty, string.Empty, _businessCompany.Mbe_mob, "C");
                        MasterBusinessEntity _ppNo = _salesDAL.GetCustomerProfileByCom(null, null, null, _businessCompany.Mbe_pp_no, null, _invoiceHeader.Sah_com);
                        if (_nic.Mbe_cd == null || _mobile.Mbe_cd == null && _ppNo.Mbe_cd == null)
                        {
                            //new customer
                            MasterAutoNumber _auto = new MasterAutoNumber();
                            _auto.Aut_cate_cd = string.Empty;
                            _auto.Aut_cate_tp = string.Empty;
                            _auto.Aut_moduleid = "CUS";
                            _auto.Aut_number = 0;
                            _auto.Aut_start_char = "CONT";

                        nxt1:
                            _auto.Aut_year = null;
                            MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                            _cusNo = _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                            _inventoryDAL.UpdateAutoNumber(_auto);

                            if (_salesDAL.CheckSalesNo("sp_getcustomer", "p_customer", _cusNo) == 1)
                            {
                                goto nxt1;
                            }
                            _businessCompany.Mbe_cd = _cusNo;
                            _salesDAL.SaveBusinessEntityDetail(_businessCompany);
                            _salesDAL.UpdateInvoiceforNewCustomer(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_seq_no, _cusNo);
                            _salesDAL.UpdateInventoryCustomer(_inventoryHeader.Ith_seq_no, _cusNo);
                        }

                    }
                    #endregion
                    #region Save/Update Voucher
                    //if (_voucher != null)
                    //    if (_voucher.Count > 0)
                    //    {
                    //        _voucher.ForEach(x => x.Stvo_inv_no = _invNo);
                    //        UpdateInvoiceGiftVoucher(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _cusNo, _invoiceHeader.Sah_cus_name, _invoiceHeader.Sah_d_cust_add1, _invoiceHeader.Sah_d_cust_add2, _businessCompany.Mbe_mob, _invoiceHeader.Sah_dt, _invNo, _invoiceHeader.Sah_cre_by, _voucher, _salesDAL, _fmsInventoryDal);
                    //    }
                    #endregion
                    #region Update Manual Doc
                    if (_invoiceHeader.Sah_manual)
                    {
                        MasterCompany _masterComp = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com);  //kapila 27/4/2016
                        if (_masterComp.MC_IS_SCM2_FMS == 1)
                            _inventoryDAL.UpdateManualDocNo(_location, "MDOC_INV", Convert.ToInt32(_invoiceHeader.Sah_man_ref), _invoiceHeader.Sah_inv_no);
                        else
                            _fmsInventoryDal.UpdateManualDocNo(_location, "MDOC_INV", Convert.ToInt32(_invoiceHeader.Sah_man_ref), _invoiceHeader.Sah_inv_no);
                    }
                    #endregion
                    _effect = 1;
                }
                else
                {
                    _effect = -1;
                }



                try
                {
                    _db = DataBase._ems; _salesDAL.ConnectionClose(); _db = DataBase._ems; _inventoryDAL.ConnectionClose(); _db = DataBase._fms; _fmsInventoryDal.ConnectionClose(); _db = DataBase._reportdb; _inventoryRepDAL.ConnectionClose(); _db = DataBase._ems; _generalDAL.ConnectionClose();
                    //if (string.IsNullOrEmpty(_error)) { _db = DataBase._ems; _salesDAL.TransactionCommit(); _db = DataBase._ems; _inventoryDAL.TransactionCommit(); _db = DataBase._fms; _fmsInventoryDal.TransactionCommit(); _db = DataBase._reportdb; _inventoryRepDAL.TransactionCommit(); _db = DataBase._ems; _generalDAL.TransactionCommit(); }
                    //else
                    //{
                    //    _salesDAL.TransactionRollback();
                    //    _inventoryDAL.TransactionRollback();
                    //    _fmsInventoryDal.TransactionRollback();
                    //    _inventoryRepDAL.TransactionRollback();
                    //    _generalDAL.TransactionRollback();
                    //}
                }
                catch
                { _invoiceNo = string.Empty; _receiptNo = string.Empty; _deliveryOrder = string.Empty; _errorlist = "Database" + _db + " is not responding. Please contact IT Operation."; BuyBackInvNo = string.Empty; _effect = -1; return _effect; }



                if (_effect == 1) _tr.Complete();




                //}
                //catch (Exception ex)
                //{
                //    _effect = -1;
                //}
            }

            _invoiceNo = _invNo;
            _receiptNo = _recNo;
            _deliveryOrder = _DONo;
            _errorlist = _error;
            BuyBackInvNo = _buybackinv;
            return _effect;

        }
        //Added by Prabhath on 01/07/2013 for return connecting database
        private static class DataBase
        {
            public static string _scm = "(SCM)";
            public static string _ems = "(EMS)";
            public static string _fms = "(FMS)";
            public static string _reportdb = "(REPORTDB)";

        }
        public Int32 SaveInvoiceDuplicate(InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, List<InvoiceSerial> _invoiceSerial, RecieptHeader _recieptHeader, List<RecieptItem> _recieptItem, InventoryHeader _inventoryHeader, List<ReptPickSerials> _pickSerial, List<ReptPickSerialsSub> _pickSubSerial, MasterAutoNumber _invoiceAuto, MasterAutoNumber _recieptAuto, MasterAutoNumber _inventoryAuto, bool _isDeliveryNow, out  string _invoiceNo, out string _receiptNo, out string _deliveryOrder, MasterBusinessEntity _businessCompany, bool _isHold, bool _isHoldInvoiceProcess, out string _errorlist, List<InvoiceVoucher> _voucher, InventoryHeader _buybackheader, MasterAutoNumber _buybackauto, List<ReptPickSerials> _buybacklist, out string BuyBackInvNo)
        {
            string _invNo = string.Empty;
            string _recNo = string.Empty;
            string _DONo = string.Empty;
            string _buybackinv = string.Empty;
            Int32 _effect = 0;
            string _location = string.Empty;
            string _error = string.Empty;
            string _db = string.Empty;


            using (TransactionScope _tr = new TransactionScope(TransactionScopeOption.RequiresNew))
            {
                //try
                //{
                try
                {
                    _db = DataBase._ems; _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen();
                    //_salesDAL.BeginTransaction(); 
                    _db = DataBase._ems; _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen();
                    //_inventoryDAL.BeginTransaction(); 
                    _db = DataBase._fms; _fmsInventoryDal = new FMS_InventoryDAL(); _fmsInventoryDal.ConnectionOpen();
                    //_fmsInventoryDal.BeginTransaction(); 
                    _db = DataBase._reportdb; _inventoryRepDAL = new ReptCommonDAL(); _inventoryRepDAL.ConnectionOpen();
                    //_inventoryRepDAL.BeginTransaction(); 
                    _db = DataBase._ems; _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen();
                    //_generalDAL.BeginTransaction();
                }
                catch { _invoiceNo = string.Empty; _receiptNo = string.Empty; _deliveryOrder = string.Empty; _errorlist = "Database" + _db + " is not responding. Please contact IT Operation."; BuyBackInvNo = _buybackinv; _effect = -1; return _effect; }

                //Transaction tx = Transaction.Current;
                //_salesDAL.EnlistTransaction(tx);
                //_inventoryDAL.EnlistTransaction(tx);
                //_fmsInventoryDal.EnlistTransaction(tx);
                //// _inventoryRepDAL.EnlistTransaction(tx);
                //_generalDAL.EnlistTransaction(tx);

                _db = string.Empty;
                _location = (_inventoryHeader != null && !string.IsNullOrEmpty(_inventoryHeader.Ith_com)) ? _inventoryHeader.Ith_loc : string.Empty;
                CommonSaveInvoiceWithDeliveryOrder(_invoiceHeader, _invoiceItem, _invoiceSerial, _recieptHeader, _recieptItem, _inventoryHeader, _pickSerial, _pickSubSerial, _invoiceAuto, _recieptAuto, _inventoryAuto, _isDeliveryNow, out _invNo, out _recNo, out _DONo, _inventoryDAL, _salesDAL, _inventoryRepDAL, _isHold, _isHoldInvoiceProcess, out _error, false);

                //if has discount update times
                foreach (InvoiceItem _itm in _invoiceItem)
                {
                    if (_itm.Sad_dis_type == "P")
                        _salesDAL.UpdateDiscountUsedTimes(_itm.Sad_dis_seq, 1);
                }

                string _cusNo = _invoiceHeader.Sah_cus_cd;
                if (string.IsNullOrEmpty(_error))
                {
                    #region Buyback Item
                    if (_buybacklist != null) if (_buybacklist.Count > 0)
                        {
                            InventoryBLL _bll = new InventoryBLL();
                            _bll._salesDAL = _salesDAL;
                            _bll._inventoryDAL = _inventoryDAL;
                            _bll._FMSinventoryDAL = _fmsInventoryDal;
                            _bll._inventoryRepDAL = _inventoryRepDAL;
                            _buybackheader.Ith_manual_ref = _invNo;
                            _bll.SaveInwardScanSerial(_buybackheader, _buybacklist, null);
                            _bll.UpdateInventoryAutoNumber(_buybackheader, _buybackauto, "+", out  _buybackinv);
                            _inventoryDAL.UpdateMovementDocNo_Other(_buybackheader.Ith_seq_no, _buybackinv);
                        }
                    #endregion
                    #region Customer Creation
                    if (_invoiceHeader.Sah_cus_cd == "CASH" && (!string.IsNullOrEmpty(_businessCompany.Mbe_nic) || !string.IsNullOrEmpty(_businessCompany.Mbe_mob)))
                    {
                        MasterBusinessEntity _nic = _salesDAL.GetActiveBusinessCompanyDetail(_invoiceHeader.Sah_com, string.Empty, _businessCompany.Mbe_nic, string.Empty, "C");
                        MasterBusinessEntity _mobile = _salesDAL.GetActiveBusinessCompanyDetail(_invoiceHeader.Sah_com, string.Empty, string.Empty, _businessCompany.Mbe_mob, "C");
                        if (_nic.Mbe_cd == null && _mobile.Mbe_cd == null)
                        {
                            //new customer
                            MasterAutoNumber _auto = new MasterAutoNumber();
                            _auto.Aut_cate_cd = string.Empty;
                            _auto.Aut_cate_tp = string.Empty;
                            _auto.Aut_moduleid = "CUS";
                            _auto.Aut_number = 0;
                            _auto.Aut_start_char = "CONT";

                        nxt1:
                            _auto.Aut_year = null;
                            MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                            _cusNo = _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                            _inventoryDAL.UpdateAutoNumber(_auto);

                            if (_salesDAL.CheckSalesNo("sp_getcustomer", "p_customer", _cusNo) == 1)
                            {
                                goto nxt1;
                            }
                            _businessCompany.Mbe_cd = _cusNo;
                            _salesDAL.SaveBusinessEntityDetail(_businessCompany);
                            _salesDAL.UpdateInvoiceforNewCustomer(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_seq_no, _cusNo);
                            _salesDAL.UpdateInventoryCustomer(_inventoryHeader.Ith_seq_no, _cusNo);
                        }

                    }
                    #endregion
                    #region Save/Update Voucher
                    if (_voucher != null)
                        if (_voucher.Count > 0)
                        {
                            _voucher.ForEach(x => x.Stvo_inv_no = _invNo);
                            UpdateInvoiceGiftVoucher(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _cusNo, _invoiceHeader.Sah_cus_name, _invoiceHeader.Sah_d_cust_add1, _invoiceHeader.Sah_d_cust_add2, _businessCompany.Mbe_mob, _invoiceHeader.Sah_dt, _invNo, _invoiceHeader.Sah_cre_by, _voucher, _salesDAL, _fmsInventoryDal);
                        }
                    #endregion
                    #region Update Manual Doc
                    if (_invoiceHeader.Sah_manual)
                    {       //kapila  27/4/2016
                        MasterCompany _masterComp = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com);  //kapila 27/4/2016
                        if (_masterComp.MC_IS_SCM2_FMS == 1)
                            _inventoryDAL.UpdateManualDocNo(_location, "MDOC_INV", Convert.ToInt32(_invoiceHeader.Sah_man_ref), _invNo);
                        else
                            _fmsInventoryDal.UpdateManualDocNo(_location, "MDOC_INV", Convert.ToInt32(_invoiceHeader.Sah_man_ref), _invNo);
                    }
                    #endregion
                    _effect = 1;
                }
                else
                    _effect = -1;

                try
                {
                    _db = DataBase._ems; _salesDAL.ConnectionClose(); _db = DataBase._ems; _inventoryDAL.ConnectionClose(); _db = DataBase._fms; _fmsInventoryDal.ConnectionClose(); _db = DataBase._reportdb; _inventoryRepDAL.ConnectionClose(); _db = DataBase._ems; _generalDAL.ConnectionClose();
                    //if (string.IsNullOrEmpty(_error)) { _db = DataBase._ems; _salesDAL.TransactionCommit(); _db = DataBase._ems; _inventoryDAL.TransactionCommit(); _db = DataBase._fms; _fmsInventoryDal.TransactionCommit(); _db = DataBase._reportdb; _inventoryRepDAL.TransactionCommit(); _db = DataBase._ems; _generalDAL.TransactionCommit(); }
                    //else
                    //{
                    //    _salesDAL.TransactionRollback();
                    //    _inventoryDAL.TransactionRollback();
                    //    _fmsInventoryDal.TransactionRollback();
                    //    _inventoryRepDAL.TransactionRollback();
                    //    _generalDAL.TransactionRollback();
                    //}
                }
                catch
                { _invoiceNo = string.Empty; _receiptNo = string.Empty; _deliveryOrder = string.Empty; _errorlist = "Database" + _db + " is not responding. Please contact IT Operation."; BuyBackInvNo = string.Empty; _effect = -1; return _effect; }

                if (_effect == 1) _tr.Complete();
            }
            //}
            //catch 
            //{
            //    _invoiceNo = string.Empty;
            //    _receiptNo = string.Empty;
            //    _deliveryOrder = string.Empty;
            //    _errorlist = _error;
            //    BuyBackInvNo = string.Empty;
            //    _effect = -1;

            //    _salesDAL.TransactionRollback();
            //    _inventoryDAL.TransactionRollback();
            //    _fmsInventoryDal.TransactionRollback();
            //    _inventoryRepDAL.TransactionRollback();
            //    _generalDAL.TransactionRollback();
            //}

            _invoiceNo = _invNo;
            _receiptNo = _recNo;
            _deliveryOrder = _DONo;
            _errorlist = _error;
            BuyBackInvNo = _buybackinv;
            return _effect;
        }



        public Int32 SaveInvoiceDuplicateWithTransaction(InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, List<InvoiceSerial> _invoiceSerial, RecieptHeader _recieptHeader, List<RecieptItem> _recieptItem, InventoryHeader _inventoryHeader, List<ReptPickSerials> _pickSerial, List<ReptPickSerialsSub> _pickSubSerial, MasterAutoNumber _invoiceAuto, MasterAutoNumber _recieptAuto, MasterAutoNumber _inventoryAuto, bool _isDeliveryNow, out  string _invoiceNo, out string _receiptNo, out string _deliveryOrder, MasterBusinessEntity _businessCompany, bool _isHold, bool _isHoldInvoiceProcess, out string _errorlist, List<InvoiceVoucher> _voucher, InventoryHeader _buybackheader, MasterAutoNumber _buybackauto, List<ReptPickSerials> _buybacklist, out string BuyBackInvNo)
        {
            string _invNo = string.Empty;
            string _recNo = string.Empty;
            string _DONo = string.Empty;
            string _buybackinv = string.Empty;
            Int32 _effect = 0;
            string _location = string.Empty;
            string _error = string.Empty;
            string _db = string.Empty;


            //using (TransactionScope _tr = new TransactionScope(TransactionScopeOption.RequiresNew))
            // {
            try
            {
                // try
                //  {
                _db = DataBase._ems; _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _db = DataBase._ems; _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _db = DataBase._fms; _fmsInventoryDal = new FMS_InventoryDAL(); _fmsInventoryDal.ConnectionOpen();
                _fmsInventoryDal.BeginTransaction();
                _db = DataBase._reportdb; _inventoryRepDAL = new ReptCommonDAL(); _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _db = DataBase._ems; _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();
                //  }
                //   catch { _invoiceNo = string.Empty; _receiptNo = string.Empty; _deliveryOrder = string.Empty; _errorlist = "Database" + _db + " is not responding. Please contact IT Operation."; BuyBackInvNo = _buybackinv; _effect = -1; return _effect; }

                //Transaction tx = Transaction.Current;
                //_salesDAL.EnlistTransaction(tx);
                //_inventoryDAL.EnlistTransaction(tx);
                //_fmsInventoryDal.EnlistTransaction(tx);
                //// _inventoryRepDAL.EnlistTransaction(tx);
                //_generalDAL.EnlistTransaction(tx);

                _db = string.Empty;
                _location = (_inventoryHeader != null && !string.IsNullOrEmpty(_inventoryHeader.Ith_com)) ? _inventoryHeader.Ith_loc : string.Empty;
                CommonSaveInvoiceWithDeliveryOrder(_invoiceHeader, _invoiceItem, _invoiceSerial, _recieptHeader, _recieptItem, _inventoryHeader, _pickSerial, _pickSubSerial, _invoiceAuto, _recieptAuto, _inventoryAuto, _isDeliveryNow, out _invNo, out _recNo, out _DONo, _inventoryDAL, _salesDAL, _inventoryRepDAL, _isHold, _isHoldInvoiceProcess, out _error, false);

                string _cusNo = _invoiceHeader.Sah_cus_cd;
                if (string.IsNullOrEmpty(_error))
                {
                    #region Buyback Item
                    if (_buybacklist != null) if (_buybacklist.Count > 0)
                        {
                            InventoryBLL _bll = new InventoryBLL();
                            _bll._salesDAL = _salesDAL;
                            _bll._inventoryDAL = _inventoryDAL;
                            _bll._FMSinventoryDAL = _fmsInventoryDal;
                            _bll._inventoryRepDAL = _inventoryRepDAL;
                            _buybackheader.Ith_manual_ref = _invNo;
                            _bll.SaveInwardScanSerial(_buybackheader, _buybacklist, null);
                            _bll.UpdateInventoryAutoNumber(_buybackheader, _buybackauto, "+", out  _buybackinv);
                            _inventoryDAL.UpdateMovementDocNo_Other(_buybackheader.Ith_seq_no, _buybackinv);
                        }
                    #endregion
                    #region Customer Creation
                    if (_invoiceHeader.Sah_cus_cd == "CASH" && (_businessCompany.Mbe_nic != null || _businessCompany.Mbe_mob != null))
                    {
                        MasterBusinessEntity _nic = _salesDAL.GetActiveBusinessCompanyDetail(_invoiceHeader.Sah_com, string.Empty, _businessCompany.Mbe_nic, string.Empty, "C");
                        MasterBusinessEntity _mobile = _salesDAL.GetActiveBusinessCompanyDetail(_invoiceHeader.Sah_com, string.Empty, string.Empty, _businessCompany.Mbe_mob, "C");
                        if (_nic.Mbe_cd == null && _mobile.Mbe_cd == null)
                        {
                            //new customer
                            MasterAutoNumber _auto = new MasterAutoNumber();
                            _auto.Aut_cate_cd = string.Empty;
                            _auto.Aut_cate_tp = string.Empty;
                            _auto.Aut_moduleid = "CUS";
                            _auto.Aut_number = 0;
                            _auto.Aut_start_char = "CONT";

                        nxt1:
                            _auto.Aut_year = null;
                            MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                            _cusNo = _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                            _inventoryDAL.UpdateAutoNumber(_auto);

                            if (_salesDAL.CheckSalesNo("sp_getcustomer", "p_customer", _cusNo) == 1)
                            {
                                goto nxt1;
                            }
                            _businessCompany.Mbe_cd = _cusNo;
                            _salesDAL.SaveBusinessEntityDetail(_businessCompany);
                            _salesDAL.UpdateInvoiceforNewCustomer(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_seq_no, _cusNo);
                            _salesDAL.UpdateInventoryCustomer(_inventoryHeader.Ith_seq_no, _cusNo);
                        }

                    }
                    #endregion
                    #region Save/Update Voucher
                    if (_voucher != null)
                        if (_voucher.Count > 0)
                        {
                            _voucher.ForEach(x => x.Stvo_inv_no = _invNo);
                            UpdateInvoiceGiftVoucher(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _cusNo, _invoiceHeader.Sah_cus_name, _invoiceHeader.Sah_d_cust_add1, _invoiceHeader.Sah_d_cust_add2, _businessCompany.Mbe_mob, _invoiceHeader.Sah_dt, _invNo, _invoiceHeader.Sah_cre_by, _voucher, _salesDAL, _fmsInventoryDal);
                        }
                    #endregion
                    #region Update Manual Doc
                    if (_invoiceHeader.Sah_manual)
                    {
                        MasterCompany _masterComp = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com);  //kapila 27/4/2016
                        if (_masterComp.MC_IS_SCM2_FMS == 1)
                            _inventoryDAL.UpdateManualDocNo(_location, "MDOC_INV", Convert.ToInt32(_invoiceHeader.Sah_man_ref), _invNo);
                        else
                            _fmsInventoryDal.UpdateManualDocNo(_location, "MDOC_INV", Convert.ToInt32(_invoiceHeader.Sah_man_ref), _invNo);
                    }
                    #endregion
                    _effect = 1;
                }
                else
                    _effect = -1;

                try
                {
                    // _db = DataBase._ems; _salesDAL.ConnectionClose(); _db = DataBase._ems; _inventoryDAL.ConnectionClose(); _db = DataBase._fms; _fmsInventoryDal.ConnectionClose(); _db = DataBase._reportdb; _inventoryRepDAL.ConnectionClose(); _db = DataBase._ems; _generalDAL.ConnectionClose();
                    if (string.IsNullOrEmpty(_error)) { _db = DataBase._ems; _salesDAL.TransactionCommit(); _db = DataBase._ems; _inventoryDAL.TransactionCommit(); _db = DataBase._fms; _fmsInventoryDal.TransactionCommit(); _db = DataBase._reportdb; _inventoryRepDAL.TransactionCommit(); _db = DataBase._ems; _generalDAL.TransactionCommit(); }
                    else
                    {
                        _salesDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        _fmsInventoryDal.TransactionRollback();
                        _inventoryRepDAL.TransactionRollback();
                        _generalDAL.TransactionRollback();
                    }
                }
                catch
                { _invoiceNo = string.Empty; _receiptNo = string.Empty; _deliveryOrder = string.Empty; _errorlist = "Database" + _db + " is not responding. Please contact IT Operation."; BuyBackInvNo = string.Empty; _effect = -1; return _effect; }

                //  if (_effect == 1) _tr.Complete();
                //}
            }
            catch
            {
                _invoiceNo = string.Empty;
                _receiptNo = string.Empty;
                _deliveryOrder = string.Empty;
                _errorlist = _error;
                BuyBackInvNo = string.Empty;
                _effect = -1;

                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
            }

            _invoiceNo = _invNo;
            _receiptNo = _recNo;
            _deliveryOrder = _DONo;
            _errorlist = _error;
            BuyBackInvNo = _buybackinv;
            return _effect;
        }

        public DataTable GetServiceAgentbyLoc(string _com, string _cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetServiceAgentbyLoc(_com, _cd);
        }


        public Int32 SaveInvoiceDuplicateWithTransactionQuo(InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, List<InvoiceSerial> _invoiceSerial, RecieptHeader _recieptHeader, List<RecieptItem> _recieptItem, InventoryHeader _inventoryHeader, List<ReptPickSerials> _pickSerial, List<ReptPickSerialsSub> _pickSubSerial, MasterAutoNumber _invoiceAuto, MasterAutoNumber _recieptAuto, MasterAutoNumber _inventoryAuto, bool _isDeliveryNow, out  string _invoiceNo, out string _receiptNo, out string _deliveryOrder, MasterBusinessEntity _businessCompany, bool _isHold, bool _isHoldInvoiceProcess, out string _errorlist, List<InvoiceVoucher> _voucher, InventoryHeader _buybackheader, MasterAutoNumber _buybackauto, List<ReptPickSerials> _buybacklist, out string BuyBackInvNo, Dictionary<string, string> DOdet)
        {
            string _invNo = string.Empty;
            string _recNo = string.Empty;
            string _DONo = string.Empty;
            string _buybackinv = string.Empty;
            Int32 _effect = 0;
            string _location = string.Empty;
            string _error = string.Empty;
            string _db = string.Empty;
            MasterAutoNumber _auto = null;
            bool _VoucherPromotion = false;

            #region Check promotion voucher exist for invoice items
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            foreach (InvoiceItem _itm in _invoiceItem)
            {
                MasterItem _mitm = _inventoryDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);
                if (_mitm.Mi_is_ser1 != -1)
                {
                    for (int i = 1; i <= _itm.Sad_qty; i++)
                    {
                        List<PromoVoucherDefinition> _proVouList = new List<PromoVoucherDefinition>();
                        _proVouList = GetPromotionalVouchersDefinition(_invoiceHeader.Sah_com, _invoiceHeader.Sah_inv_tp, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_dt.Date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _mitm.Mi_brand, _mitm.Mi_cate_1, _mitm.Mi_cate_2, _itm.Sad_itm_cd, true);
                        if (_proVouList != null && _proVouList.Count > 0) _VoucherPromotion = true;
                    }
                }

                //kapila 19/1/2015
                if (!string.IsNullOrEmpty(_itm.Sad_job_no))
                    _salesDAL.UPDATE_SCV_CONF_HDR(1, _itm.Sad_job_no);
            }
            _inventoryDAL.ConnectionClose();
            #endregion
            //using (TransactionScope _tr = new TransactionScope(TransactionScopeOption.RequiresNew))
            // {
            try
            {
                // try
                //  {
                _db = DataBase._ems; _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _db = DataBase._ems; _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _db = DataBase._fms; _fmsInventoryDal = new FMS_InventoryDAL(); _fmsInventoryDal.ConnectionOpen();
                _fmsInventoryDal.BeginTransaction();
                _db = DataBase._reportdb; _inventoryRepDAL = new ReptCommonDAL(); _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _db = DataBase._ems; _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();
                //  }
                //   catch { _invoiceNo = string.Empty; _receiptNo = string.Empty; _deliveryOrder = string.Empty; _errorlist = "Database" + _db + " is not responding. Please contact IT Operation."; BuyBackInvNo = _buybackinv; _effect = -1; return _effect; }

                //Transaction tx = Transaction.Current;
                //_salesDAL.EnlistTransaction(tx);
                //_inventoryDAL.EnlistTransaction(tx);
                //_fmsInventoryDal.EnlistTransaction(tx);
                //// _inventoryRepDAL.EnlistTransaction(tx);
                //_generalDAL.EnlistTransaction(tx);

                if (!_isHold)
                {
                    _invoiceAuto.Aut_year = null;
                    MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
                    _invNo = _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                    _invoiceAuto.Aut_year = null;
                    _invoiceAuto.Aut_modify_dt = null;
                    _salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
                    _invoiceHeader.Sah_inv_no = _invNo;
                }

                _db = string.Empty;
                _location = (_inventoryHeader != null && !string.IsNullOrEmpty(_inventoryHeader.Ith_com)) ? _inventoryHeader.Ith_loc : string.Empty;
                string _recieptSeq = null;
                string _invoiceSeq = null;
                InventoryHeader _invHdr = null;
                DataTable _dataTable = null;
                CommonSaveInvoiceWithDeliveryOrderWithTransaction(_invoiceHeader, _invoiceItem, _invoiceSerial, _recieptHeader, _recieptItem, _inventoryHeader, _pickSerial, _pickSubSerial, _invoiceAuto, _recieptAuto, _inventoryAuto, _isDeliveryNow, out _invNo, out _recNo, out _DONo, _inventoryDAL, _salesDAL, _inventoryRepDAL, _isHold, _isHoldInvoiceProcess, out _error, false, out _invoiceSeq, out _recieptSeq, out _invHdr, out _dataTable);


                //update invoice discount

                //foreach (InvoiceItem _itm in _invoiceItem)
                //{

                //    if (_itm.Sad_dis_type == "P")
                //        _salesDAL.UpdateDiscountUsedTimes(_itm.Sad_dis_seq, 1);
                //}

                //end


                string _customerCode = _invoiceHeader.Sah_cus_cd;
                GroupBussinessEntity _businessEntityGrup = new GroupBussinessEntity();
                if (string.IsNullOrEmpty(_error))
                {

                    #region Customer Creation
                    if (_invoiceHeader.Sah_cus_cd == "CASH" && (!string.IsNullOrEmpty(_businessCompany.Mbe_nic) || !string.IsNullOrEmpty(_businessCompany.Mbe_mob)))
                    {
                        // MasterBusinessEntity _nic = _salesDAL.GetActiveBusinessCompanyDetail(_invoiceHeader.Sah_com, string.Empty, _businessCompany.Mbe_nic, string.Empty, "C");
                        // MasterBusinessEntity _mobile = _salesDAL.GetActiveBusinessCompanyDetail(_invoiceHeader.Sah_com, string.Empty, string.Empty, _businessCompany.Mbe_mob, "C");
                        // if (_nic.Mbe_cd == null && _mobile.Mbe_cd == null)
                        {
                            _businessEntityGrup = new GroupBussinessEntity();
                            _businessEntityGrup.Mbg_act = true;
                            _businessEntityGrup.Mbg_add1 = _businessCompany.Mbe_add1;
                            _businessEntityGrup.Mbg_add2 = _businessCompany.Mbe_add2;
                            _businessEntityGrup.Mbg_cd = "c1";
                            _businessEntityGrup.Mbg_contact = string.Empty;
                            _businessEntityGrup.Mbg_email = string.Empty;
                            _businessEntityGrup.Mbg_fax = string.Empty;
                            _businessEntityGrup.Mbg_mob = _businessCompany.Mbe_mob;
                            _businessEntityGrup.Mbg_name = _businessCompany.Mbe_name;
                            _businessEntityGrup.Mbg_nic = _businessCompany.Mbe_nic;
                            _businessEntityGrup.Mbg_tel = string.Empty;
                            _businessEntityGrup.Mbg_tit = _businessCompany.MBE_TIT;
                            _businessEntityGrup.Mbg_nationality = "SL";
                            _businessEntityGrup.Mbg_cre_by = _invoiceHeader.Sah_cre_by;
                            _businessEntityGrup.Mbg_mod_by = _invoiceHeader.Sah_mod_by;

                            //new customer
                            _auto = new MasterAutoNumber();
                            _auto.Aut_cate_cd = string.Empty;
                            _auto.Aut_cate_tp = string.Empty;
                            _auto.Aut_moduleid = "CUS";
                            _auto.Aut_number = 0;
                            _auto.Aut_start_char = "CONT";

                        nxt1:
                            _auto.Aut_year = null;
                            MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                            _customerCode = _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);


                            if (_salesDAL.CheckSalesNo("sp_getcustomer", "p_customer", _customerCode) == 1)
                            {
                                goto nxt1;
                            }
                            _businessCompany.Mbe_cd = _customerCode;
                            _businessEntityGrup.Mbg_cd = _customerCode;
                            _invoiceHeader.Sah_cus_cd = _customerCode;
                            _salesDAL.SaveBusinessEntityDetailGroup(_businessEntityGrup);
                            _salesDAL.SaveBusinessEntityDetail(_businessCompany);
                            _salesDAL.UpdateInvoiceforNewCustomer(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_seq_no, _customerCode);
                            _salesDAL.UpdateInventoryCustomer(_inventoryHeader.Ith_seq_no, _customerCode);
                        }

                    }
                    else if (_invoiceHeader.Sah_cus_cd != "CASH")
                    {
                        MasterBusinessEntity _chkList = new MasterBusinessEntity();
                        _chkList = _salesDAL.GetCustomerProfileByCom(_invoiceHeader.Sah_cus_cd, null, null, null, null, _invoiceHeader.Sah_com);

                        if (_chkList.Mbe_cd == null)
                        {
                            _businessEntityGrup = new GroupBussinessEntity();
                            _businessEntityGrup.Mbg_act = true;
                            _businessEntityGrup.Mbg_add1 = _businessCompany.Mbe_add1;
                            _businessEntityGrup.Mbg_add2 = _businessCompany.Mbe_add2;
                            _businessEntityGrup.Mbg_cd = _invoiceHeader.Sah_cus_cd;
                            _businessEntityGrup.Mbg_contact = string.Empty;
                            _businessEntityGrup.Mbg_email = string.Empty;
                            _businessEntityGrup.Mbg_fax = string.Empty;
                            _businessEntityGrup.Mbg_mob = _businessCompany.Mbe_mob;
                            _businessEntityGrup.Mbg_name = _businessCompany.Mbe_name;
                            _businessEntityGrup.Mbg_nic = _businessCompany.Mbe_nic;
                            _businessEntityGrup.Mbg_tel = string.Empty;
                            _businessEntityGrup.Mbg_nationality = "SL";
                            _businessEntityGrup.Mbg_tit = _businessCompany.MBE_TIT;
                            _businessEntityGrup.Mbg_cre_by = _invoiceHeader.Sah_cre_by;
                            _businessEntityGrup.Mbg_mod_by = _invoiceHeader.Sah_mod_by;

                            _businessCompany.Mbe_cd = _invoiceHeader.Sah_cus_cd;
                            _salesDAL.SaveBusinessEntityDetailGroup(_businessEntityGrup);
                            _salesDAL.SaveBusinessEntityDetail(_businessCompany);

                        }
                        else
                        {
                            GroupBussinessEntity _grupList = new GroupBussinessEntity();
                            _grupList = _salesDAL.GetCustomerProfileByGrup(_invoiceHeader.Sah_cus_cd, null, null, null, null, null);

                            if (_grupList.Mbg_cd == null)
                            {
                                _businessEntityGrup = new GroupBussinessEntity();
                                _businessEntityGrup.Mbg_act = true;
                                _businessEntityGrup.Mbg_add1 = _businessCompany.Mbe_add1;
                                _businessEntityGrup.Mbg_add2 = _businessCompany.Mbe_add2;
                                _businessEntityGrup.Mbg_cd = _invoiceHeader.Sah_cus_cd;
                                _businessEntityGrup.Mbg_contact = string.Empty;
                                _businessEntityGrup.Mbg_email = string.Empty;
                                _businessEntityGrup.Mbg_fax = string.Empty;
                                _businessEntityGrup.Mbg_mob = _businessCompany.Mbe_mob;
                                _businessEntityGrup.Mbg_name = _businessCompany.Mbe_name;
                                _businessEntityGrup.Mbg_nic = _businessCompany.Mbe_nic;
                                _businessEntityGrup.Mbg_tel = string.Empty;
                                _businessEntityGrup.Mbg_nationality = "SL";
                                _businessEntityGrup.Mbg_tit = _businessCompany.MBE_TIT;
                                _businessEntityGrup.Mbg_cre_by = _invoiceHeader.Sah_cre_by;
                                _businessEntityGrup.Mbg_mod_by = _invoiceHeader.Sah_mod_by;
                                _salesDAL.SaveBusinessEntityDetailGroup(_businessEntityGrup);
                            }
                        }

                    }
                    #endregion

                    #region update auto no

                    if (!_isHold)
                    {
                        //nxt1:
                        /*_invoiceAuto.Aut_year = null;
                        MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
                        _invNo = _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                        _invoiceAuto.Aut_year = null;
                        _invoiceAuto.Aut_modify_dt = null;
                        if (_salesDAL.CheckSalesNo("sp_getinvno", "p_inv_no", _invNo) == 1)
                        {
                            //_salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
                            //goto nxt1;
                            _error = "Invoice process terminated. Please re-process.(Hint - Duplicating Invoice No)";
                            _invoiceNo = string.Empty;
                            _receiptNo = string.Empty;
                            _deliveryOrder = string.Empty;
                            _errorlist = _error;
                            BuyBackInvNo = string.Empty;
                            _effect = -1;

                            _salesDAL.TransactionRollback();
                            _inventoryDAL.TransactionRollback();
                            _fmsInventoryDal.TransactionRollback();
                            _inventoryRepDAL.TransactionRollback();
                            _generalDAL.TransactionRollback();
                            return _effect;
                        }

                        _salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto);*/

                        #region Buyback Item
                        if (_buybacklist != null) if (_buybacklist.Count > 0)
                            {
                                InventoryBLL _bll = new InventoryBLL();
                                _bll._salesDAL = _salesDAL;
                                _bll._inventoryDAL = _inventoryDAL;
                                _bll._FMSinventoryDAL = _fmsInventoryDal;
                                _bll._inventoryRepDAL = _inventoryRepDAL;
                                _buybackheader.Ith_manual_ref = _invNo;
                                _bll.SaveInwardScanSerial(_buybackheader, _buybacklist, null);
                                _bll.UpdateInventoryAutoNumber(_buybackheader, _buybackauto, "+", out  _buybackinv);
                                _inventoryDAL.UpdateMovementDocNo_Other(_buybackheader.Ith_seq_no, _buybackinv);
                            }
                        #endregion
                        //add by tharanga 2018/10/29 inst:: Block voucher generation - Credit note ::Mon 29/Oct/2018 12:28 PM
                        int count = _recieptItem.Where(r => r.Sard_pay_tp == "CRNOTE").Count();
                        if (count <= 0)
                        {


                            #region Generate Promotion Vouchers :: Chamal 26-Jun-2014
                            if (_voucher == null) _voucher = new List<InvoiceVoucher>();

                            bool _promoVouApplied = false;
                            if (_VoucherPromotion == true)
                            {
                                foreach (InvoiceItem _itm in _invoiceItem)
                                {
                                    MasterItem _mitm = _inventoryDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);
                                    if (_mitm.Mi_is_ser1 != -1)
                                    {
                                        for (int i = 1; i <= _itm.Sad_qty; i++)
                                        {
                                            List<PromoVoucherDefinition> _proVouList = GetPromotionalVouchersDefinition(_invoiceHeader.Sah_com, _invoiceHeader.Sah_inv_tp, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_dt.Date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _mitm.Mi_brand, _mitm.Mi_cate_1, _mitm.Mi_cate_2, _itm.Sad_itm_cd, false);
                                            if (_proVouList != null)
                                            {
                                                if (_proVouList.Count > 0)
                                                {
                                                    foreach (PromoVoucherDefinition _proitm in _proVouList)
                                                    {
                                                        InvoiceVoucher _vou = new InvoiceVoucher();
                                                        GiftVoucherPages _gvou = new GiftVoucherPages();

                                                        _vou.Stvo_inv_no = _invNo;
                                                        _vou.Stvo_prefix = _proitm.Spd_vou_cd;
                                                        _vou.Stvo_bookno = _proitm.Spd_seq;
                                                        _vou.Stvo_pageno = _salesDAL.GetPromotionVoucherNo();
                                                        _vou.Stvo_gv_itm = _proitm.Spd_vou_cd;
                                                        _vou.Stvo_price = _proitm.Spd_disc;
                                                        _vou.Stvo_itm_cd = _itm.Sad_itm_cd;
                                                        _vou.Stvo_cre_by = "PRO_VOU";
                                                        if (_proitm.Spd_disc_isrt == true)
                                                        {
                                                            _vou.Stvo_stus = 1;
                                                            _gvou.Gvp_gv_tp = "RATE";
                                                        }
                                                        else
                                                        {
                                                            _vou.Stvo_stus = 0;
                                                            _gvou.Gvp_gv_tp = "VALUE";
                                                        }

                                                        _gvou.Gvp_amt = _proitm.Spd_disc;
                                                        _gvou.Gvp_app_by = _invoiceHeader.Sah_cre_by;
                                                        _gvou.Gvp_bal_amt = _proitm.Spd_disc;  // 0;  kapila 3/11/2016
                                                        _gvou.Gvp_book = _itm.Sad_itm_line;
                                                        _gvou.Gvp_can_by = "";
                                                        _gvou.Gvp_can_dt = DateTime.Now.Date;
                                                        _gvou.Gvp_com = _invoiceHeader.Sah_com;
                                                        _gvou.Gvp_cre_by = _invoiceHeader.Sah_cre_by;
                                                        _gvou.Gvp_cre_dt = DateTime.Now.Date;
                                                        _gvou.Gvp_cus_add1 = _invoiceHeader.Sah_cus_add1;
                                                        _gvou.Gvp_cus_add2 = _invoiceHeader.Sah_cus_add2;
                                                        _gvou.Gvp_cus_cd = _invoiceHeader.Sah_cus_cd;
                                                        _gvou.Gvp_cus_mob = _businessCompany.Mbe_mob;
                                                        _gvou.Gvp_cus_name = _invoiceHeader.Sah_cus_name;
                                                        _gvou.Gvp_from = "-";
                                                        _gvou.Gvp_gv_cd = _proitm.Spd_vou_cd;
                                                        _gvou.Gvp_gv_prefix = "P_GV";
                                                        _gvou.Gvp_is_allow_promo = false;
                                                        _gvou.Gvp_issu_itm = 0;
                                                        _gvou.Gvp_issue_by = "";
                                                        _gvou.Gvp_issue_dt = DateTime.Now.Date;
                                                        _gvou.Gvp_line = i;
                                                        _gvou.Gvp_mod_by = "";
                                                        _gvou.Gvp_mod_dt = DateTime.Now.Date;
                                                        _gvou.Gvp_noof_itm = 1;
                                                        _gvou.Gvp_oth_ref = _invNo;// _proitm.Spd_circular_no;
                                                        _gvou.Gvp_page = _vou.Stvo_pageno;
                                                        _gvou.Gvp_pc = _invoiceHeader.Sah_pc;
                                                        _gvou.Gvp_ref = _proitm.Spd_seq.ToString();
                                                        _gvou.Gvp_stus = "A";
                                                        _gvou.Gvp_valid_from = _invoiceHeader.Sah_dt.Date;
                                                        //_gvou.Gvp_valid_to = _invoiceHeader.Sah_dt.Date.AddMonths(_proitm.Spd_period);
                                                        _gvou.Gvp_valid_to = _invoiceHeader.Sah_dt.Date.AddDays(_proitm.Spd_period); //Chamal 24-09-2014
                                                        _gvou.Gvp_cus_nic = _businessCompany.Mbe_nic;

                                                        _voucher.Add(_vou);
                                                        _fmsInventoryDal.SaveGiftVoucherPages(_gvou);
                                                        _promoVouApplied = true;
                                                        //break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (_promoVouApplied == true)
                            {
                                if (_voucher != null)
                                {
                                    if (_voucher.Count > 0)
                                    {
                                        //var _vouProCodes = _voucher.Where(x => x.Stvo_cre_by == "PRO_VOU").Select(x => x.Stvo_prefix).Distinct().ToList();
                                        var _vouProCodes = _voucher.Where(x => x.Stvo_cre_by == "PRO_VOU").Select(x => x.Stvo_bookno).Distinct().ToList();
                                        if (_vouProCodes != null && _vouProCodes.Count > 0)
                                        {
                                            foreach (var _cd in _vouProCodes)
                                            {
                                                DataTable _dtothCom = _salesDAL.GetProVouAllowCompanies(_invoiceHeader.Sah_com, _cd);

                                                if (_dtothCom.Rows.Count > 0)
                                                {
                                                    foreach (DataRow drow in _dtothCom.Rows)
                                                    {
                                                        MasterBusinessEntity _othCust = new MasterBusinessEntity();
                                                        _othCust = _businessCompany;
                                                        _othCust.Mbe_cd = _customerCode;
                                                        _othCust.Mbe_com = drow["R_COM"].ToString();
                                                        if (!string.IsNullOrEmpty(_othCust.Mbe_nic) || !string.IsNullOrEmpty(_othCust.Mbe_mob))
                                                        {
                                                            MasterBusinessEntity _nic = _salesDAL.GetActiveBusinessCompanyDetail(_invoiceHeader.Sah_com, string.Empty, _othCust.Mbe_nic, string.Empty, "C");
                                                            MasterBusinessEntity _mobile = _salesDAL.GetActiveBusinessCompanyDetail(_invoiceHeader.Sah_com, string.Empty, string.Empty, _othCust.Mbe_mob, "C");
                                                            if (_nic.Mbe_cd == null && _mobile.Mbe_cd == null)
                                                            {
                                                                int _isUpdate = _salesDAL.UpdateBusinessEntityProfile(_othCust, 1);
                                                                if (_isUpdate <= 0) _salesDAL.SaveBusinessEntityDetail(_othCust);
                                                            }
                                                        }

                                                    }
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                            #endregion

                            #region Save/Update Voucher
                            if (_voucher != null)
                                if (_voucher.Count > 0)
                                {
                                    _voucher.ForEach(x => x.Stvo_inv_no = _invNo);
                                    UpdateInvoiceGiftVoucher(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _customerCode, _invoiceHeader.Sah_cus_name, _invoiceHeader.Sah_d_cust_add1, _invoiceHeader.Sah_d_cust_add2, _businessCompany.Mbe_mob, _invoiceHeader.Sah_dt, _invNo, _invoiceHeader.Sah_cre_by, _voucher, _salesDAL, _fmsInventoryDal);
                                }
                            #endregion
                        }
                        //_salesDAL.UpdateInvoiceWithTaxCommission(_invNo, string.Empty, Convert.ToInt32(_invoiceSeq), Convert.ToInt32(_recieptSeq));
                        //string RecieptNo = "";
                        if (_recieptAuto != null)
                        {
                            //nxt2:
                            _recieptAuto.Aut_year = null;
                            MasterAutoNumber RecieptAuto = _inventoryDAL.GetAutoNumber(_recieptAuto.Aut_moduleid, _recieptAuto.Aut_direction, _recieptAuto.Aut_start_char, _recieptAuto.Aut_cate_tp, _recieptAuto.Aut_cate_cd, _recieptAuto.Aut_modify_dt, _recieptAuto.Aut_year);
                            _receiptNo = _recieptAuto.Aut_cate_cd + "-" + RecieptAuto.Aut_start_char + RecieptAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                            _recieptAuto.Aut_year = null;
                            _recieptAuto.Aut_modify_dt = null;
                            _recNo = _receiptNo;
                            if (_salesDAL.CheckSalesNo("sp_getreceiptno", "p_rept_no", _recNo) == 1)
                            {
                                // _salesDAL.UpdateInvoiceAutoNumber(_recieptAuto);
                                // goto nxt2;
                                _error = "Invoice process terminated. Please re-process.(Hint - Duplicating Receipt No)";
                                _invoiceNo = string.Empty;
                                _receiptNo = string.Empty;
                                _deliveryOrder = string.Empty;
                                _errorlist = _error;
                                BuyBackInvNo = string.Empty;
                                _effect = -1;

                                _salesDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                _fmsInventoryDal.TransactionRollback();
                                _inventoryRepDAL.TransactionRollback();
                                _generalDAL.TransactionRollback();
                                return _effect;
                            }
                            //_invDAL.UpdateAutoNumber(_recieptAuto);

                            _salesDAL.UpdateInvoiceAutoNumber(_recieptAuto);
                        }

                        _salesDAL.UpdateReceipt(_invNo, _recNo, Convert.ToInt32(_invoiceSeq), Convert.ToInt32(_recieptSeq));
                        //Update receipt no which allocated by receipt entry as per invoice
                        _inventoryRepDAL.UpdateAdvanceReceiptNofromInvoice(string.Empty, Convert.ToString(_invoiceSeq), _invNo);

                        if (_isDeliveryNow)
                        {
                            // string _doc;
                            _inventoryDAL.UpdateInventoryAutoNumber(_invHdr, _inventoryAuto, "-", out _DONo);
                            MasterAutoNumber _AutoNo = new MasterAutoNumber();
                            int _e = 0;
                            if (_dataTable.Rows.Count > 0)
                            {
                                for (int i = 0; i < _dataTable.Rows.Count; i++)
                                {
                                    if (_dataTable.Rows[i]["DocType"].ToString() == "ADJ")
                                    {
                                        _AutoNo.Aut_cate_cd = _invHdr.Ith_loc;
                                        _AutoNo.Aut_moduleid = "ADJ";
                                        _AutoNo.Aut_direction = null;
                                        _AutoNo.Aut_start_char = "ADJ";
                                        _AutoNo.Aut_cate_tp = "LOC";
                                        //_AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;
                                        _AutoNo.Aut_year = null;

                                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                        string _documentNo = _invHdr.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_invHdr.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                        _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                        _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                    }
                                    else if (_dataTable.Rows[i]["DocType"].ToString() == "GRN")
                                    {
                                        _AutoNo.Aut_cate_cd = _invHdr.Ith_loc;
                                        _AutoNo.Aut_moduleid = "GRN";
                                        _AutoNo.Aut_direction = null;
                                        _AutoNo.Aut_start_char = "GRN";
                                        _AutoNo.Aut_cate_tp = "LOC";
                                        //_AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;
                                        _AutoNo.Aut_year = _invHdr.Ith_doc_date.Year;

                                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                        string _documentNo = _invHdr.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_invHdr.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                        _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                        _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                    }
                                    else if (_dataTable.Rows[i]["DocType"].ToString() == "PO")
                                    {
                                        //_AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_com;
                                        //_AutoNo.Aut_moduleid = "PO_LOCAL";
                                        //_AutoNo.Aut_direction = null;
                                        //_AutoNo.Aut_start_char = "PO";
                                        //_AutoNo.Aut_cate_tp = "COM";
                                        //_AutoNo.Aut_year = null;

                                        _AutoNo.Aut_cate_cd = _invHdr.Ith_com;
                                        _AutoNo.Aut_cate_tp = "COM";
                                        _AutoNo.Aut_direction = null;
                                        _AutoNo.Aut_modify_dt = null;
                                        _AutoNo.Aut_moduleid = "PUR";
                                        _AutoNo.Aut_start_char = "PUR";
                                        _AutoNo.Aut_year = null;

                                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                        string _documentNo = _AutoNo.Aut_cate_cd + "-" + _AutoNo.Aut_start_char + string.Format("{0:000000}", _autoNo);
                                        _inventoryDAL.UpdatePODocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                        _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                        _inventoryDAL.UpdateGRNPODocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                    }
                                }
                            }

                            //update inv no
                            _inventoryDAL.UpdateOtherDocuments(_DONo, _invNo);
                            _inventoryDAL.UpdateBatchRefDoc(_DONo, _invNo);


                        }

                    }
                    #endregion

                    #region Update Manual Doc
                    if (_invoiceHeader.Sah_manual)
                    {
                        MasterCompany _masterComp = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com);  //kapila 27/4/2016
                        if (_masterComp.MC_IS_SCM2_FMS == 1)
                            _inventoryDAL.UpdateManualDocNo(_location, "MDOC_INV", Convert.ToInt32(_invoiceHeader.Sah_man_ref), _invNo);
                        else
                            _fmsInventoryDal.UpdateManualDocNo(_location, "MDOC_INV", Convert.ToInt32(_invoiceHeader.Sah_man_ref), _invNo);
                    }
                    #endregion

                    #region update invoice discount / Promotion Voucher page as F
                    foreach (InvoiceItem _itm in _invoiceItem)
                    {
                        if (_itm.Sad_dis_type == "P")
                        {
                            _salesDAL.UpdateDiscountUsedTimes(_itm.Sad_dis_seq, 1);
                        }

                        if (_itm.Sad_res_no == "PROMO_VOU" && _itm.Sad_res_line_no > 0)
                        {
                            //Add by Chamal 6-Jul-2014
                            _salesDAL.Update_GV_Pages(1, _invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_dt.Date, "", "F", _itm.Sad_res_line_no, "P_GV", _invoiceHeader.Sah_cre_by, _invNo);
                        }
                    }
                    #endregion

                    #region update Qutation DO number
                    if (DOdet.Count > 0 || DOdet != null)
                    {
                        foreach (var item in DOdet)
                        {
                            _salesDAL.Update_Quotation_HDR_DO(item.Value, _invNo, item.Key);
                        }
                    }
                    else
                    {
                        _salesDAL.Update_Quotation_HDR_DO(_invoiceHeader.Sah_structure_seq, _invNo, _invoiceHeader.Sah_ref_doc);

                    }

                    #endregion
                    // _salesDAL.Update_Quotation_HDR_DO(_invoiceHeader.Sah_structure_seq, _invNo, _invoiceHeader.Sah_ref_doc);

                    _effect = 1;
                }
                else
                    _effect = -1;

                try
                {
                    // _db = DataBase._ems; _salesDAL.ConnectionClose(); _db = DataBase._ems; _inventoryDAL.ConnectionClose(); _db = DataBase._fms; _fmsInventoryDal.ConnectionClose(); _db = DataBase._reportdb; _inventoryRepDAL.ConnectionClose(); _db = DataBase._ems; _generalDAL.ConnectionClose();
                    if (string.IsNullOrEmpty(_error))
                    {
                        _db = DataBase._ems; _salesDAL.TransactionCommit(); _db = DataBase._ems; _inventoryDAL.TransactionCommit(); _db = DataBase._fms; _fmsInventoryDal.TransactionCommit(); _db = DataBase._reportdb; _inventoryRepDAL.TransactionCommit(); _db = DataBase._ems; _generalDAL.TransactionCommit(); _inventoryDAL.UpdateInvoiceDOStatus(_invNo);
                        //cus code update
                        if (_auto != null)
                        {
                            _inventoryDAL.UpdateAutoNumber(_auto);
                        }
                    }
                    else
                    {
                        _salesDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        _fmsInventoryDal.TransactionRollback();
                        _inventoryRepDAL.TransactionRollback();
                        _generalDAL.TransactionRollback();
                    }
                }
                catch (Exception ex)
                { _invoiceNo = string.Empty; _receiptNo = string.Empty; _deliveryOrder = string.Empty; _errorlist = "Database" + _db + " is not responding. Please contact IT Operation.\n" + ex.Message; BuyBackInvNo = string.Empty; _effect = -1; return _effect; }

                //  if (_effect == 1) _tr.Complete();
                //}
            }
            catch (Exception ex)
            {
                _error = ex.Message.ToString();
                _invoiceNo = string.Empty;
                _receiptNo = string.Empty;
                _deliveryOrder = string.Empty;
                _errorlist = _error;
                BuyBackInvNo = string.Empty;
                _effect = -1;

                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
            }

            _invoiceNo = _invNo;
            _receiptNo = _recNo;
            _deliveryOrder = _DONo;
            _errorlist = _error;
            BuyBackInvNo = _buybackinv;
            return _effect;
        }



        public Int32 SaveInvoiceDuplicateWithTransaction01(InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, List<InvoiceSerial> _invoiceSerial, RecieptHeader _recieptHeader, List<RecieptItem> _recieptItem, InventoryHeader _inventoryHeader, List<ReptPickSerials> _pickSerial, List<ReptPickSerialsSub> _pickSubSerial, MasterAutoNumber _invoiceAuto, MasterAutoNumber _recieptAuto, MasterAutoNumber _inventoryAuto, bool _isDeliveryNow, out  string _invoiceNo, out string _receiptNo, out string _deliveryOrder, MasterBusinessEntity _businessCompany, bool _isHold, bool _isHoldInvoiceProcess, out string _errorlist, List<InvoiceVoucher> _voucher, InventoryHeader _buybackheader, MasterAutoNumber _buybackauto, List<ReptPickSerials> _buybacklist, out string BuyBackInvNo, ref bool _isInvoiced, List<Transport> _traList = null, List<string> _SoaList = null, bool _pdabase = false, CctTransLog _transLog = null, List<EventRegistry> _eventList = null, List<EventItems> _eventItems = null) // updated by akila 2018/02/26 add new objects _eventList, _eventItems
        {
            string _invNo = string.Empty;
            string _recNo = string.Empty;
            string _DONo = string.Empty;
            string _buybackinv = string.Empty;
            Int32 _effect = 0;
            string _location = string.Empty;
            string _error = string.Empty;
            string _db = string.Empty;
            MasterAutoNumber _auto = null;
            bool _VoucherPromotion = false;
            _isInvoiced = false;

            #region Check promotion voucher exist for invoice items
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            foreach (InvoiceItem _itm in _invoiceItem)
            {
                MasterItem _mitm = _inventoryDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);
                if (_mitm.Mi_is_ser1 != -1)
                {
                    //for (int i = 1; i <= _itm.Sad_qty; i++)
                    //{
                    List<PromoVoucherDefinition> _proVouList = new List<PromoVoucherDefinition>();
                    _proVouList = GetPromotionalVouchersDefinition(_invoiceHeader.Sah_com, _invoiceHeader.Sah_inv_tp, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_sah_date_new.Date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _mitm.Mi_brand, _mitm.Mi_cate_1, _mitm.Mi_cate_2, _itm.Sad_itm_cd, true);
                    if (_proVouList != null && _proVouList.Count > 0) _VoucherPromotion = true;
                    //}
                }

                //kapila 19/1/2015
                if (!string.IsNullOrEmpty(_itm.Sad_job_no))
                    _salesDAL.UPDATE_SCV_CONF_HDR(1, _itm.Sad_job_no);
            }
            _inventoryDAL.ConnectionClose();
            #endregion
            //using (TransactionScope _tr = new TransactionScope(TransactionScopeOption.RequiresNew))
            // {
            try
            {
                // try
                //  {
                _db = DataBase._ems; _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _db = DataBase._ems; _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _db = DataBase._fms; _fmsInventoryDal = new FMS_InventoryDAL(); _fmsInventoryDal.ConnectionOpen();
                _fmsInventoryDal.BeginTransaction();
                _db = DataBase._reportdb; _inventoryRepDAL = new ReptCommonDAL(); _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _db = DataBase._ems; _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();
                //  }
                //   catch { _invoiceNo = string.Empty; _receiptNo = string.Empty; _deliveryOrder = string.Empty; _errorlist = "Database" + _db + " is not responding. Please contact IT Operation."; BuyBackInvNo = _buybackinv; _effect = -1; return _effect; }

                //Transaction tx = Transaction.Current;
                //_salesDAL.EnlistTransaction(tx);
                //_inventoryDAL.EnlistTransaction(tx);
                //_fmsInventoryDal.EnlistTransaction(tx);
                //// _inventoryRepDAL.EnlistTransaction(tx);
                //_generalDAL.EnlistTransaction(tx);

                if (!_isHold)
                {
                    //#region this is a tempory solution add by lakshan need to find a solution for this issue 09 Mar 2017
                    //if (_invoiceAuto.Aut_start_char=="SCCR-" && _invoiceAuto.Aut_cate_cd=="74")
                    //{
                    //   List<MasterAutoNumber> _autolist =  _salesDAL.GetAutoNumberFor74(_invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_start_char);
                    //   if (_autolist.Count > 1)
                    //   {

                    //   }
                    //}
                    //#endregion
                    _invoiceAuto.Aut_year = null;
                    MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
                    _invNo = _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                    _invoiceAuto.Aut_year = null;
                    _invoiceAuto.Aut_modify_dt = null;
                    _salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
                    _invoiceHeader.Sah_inv_no = _invNo;
                }

                _db = string.Empty;
                //_location = (_inventoryHeader != null && !string.IsNullOrEmpty(_inventoryHeader.Ith_com)) ? _inventoryHeader.Ith_loc : string.Empty;
                _location = (_invoiceHeader != null && !string.IsNullOrEmpty(_invoiceHeader.Sah_pc)) ? _invoiceHeader.Sah_pc : string.Empty;
                string _recieptSeq = null;
                string _invoiceSeq = null;
                InventoryHeader _invHdr = null;
                DataTable _dataTable = null;

                //Tharaka 2015-12-04
                #region Generate Purchase order number

                PurchaseOrder _PurchaseOrder = new PurchaseOrder();

                bool isSavePurchaseorder = false;

                if (_invoiceHeader.Sah_anal_4 == "__PO__")
                {
                    isSavePurchaseorder = true;

                    MasterAutoNumber masterAuto_PO = new MasterAutoNumber();
                    masterAuto_PO.Aut_cate_cd = _inventoryHeader.Ith_com;
                    masterAuto_PO.Aut_cate_tp = "COM";
                    masterAuto_PO.Aut_direction = null;
                    masterAuto_PO.Aut_modify_dt = null;
                    masterAuto_PO.Aut_moduleid = "PUR";
                    masterAuto_PO.Aut_number = 5;//what is Aut_number
                    masterAuto_PO.Aut_start_char = "PUR";
                    masterAuto_PO.Aut_year = null;

                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(masterAuto_PO.Aut_moduleid, masterAuto_PO.Aut_direction, masterAuto_PO.Aut_start_char, masterAuto_PO.Aut_cate_tp, masterAuto_PO.Aut_cate_cd, masterAuto_PO.Aut_modify_dt, masterAuto_PO.Aut_year).Aut_number;
                    string _documentNo = masterAuto_PO.Aut_cate_cd + "-" + masterAuto_PO.Aut_start_char + string.Format("{0:000000}", _autoNo);
                    _inventoryDAL.UpdateAutoNumber(masterAuto_PO);

                    _PurchaseOrder.Poh_seq_no = _inventoryDAL.Generate_new_seq_num(_invoiceHeader.Sah_cre_by, "PO", 1, _invoiceHeader.Sah_com);

                    _inventoryDAL.UpdatePODocNo(_PurchaseOrder.Poh_seq_no, _documentNo);
                    _PurchaseOrder.Poh_doc_no = _documentNo;
                    _invoiceHeader.Sah_anal_4 = _documentNo;
                }

                #endregion
                List<ReptPickSerials> _pickSerialtemp = new List<ReptPickSerials>();
                #region add by lakshan 21Oct2017
                List<ReptPickSerials> _tmpSerListSOA = new List<ReptPickSerials>();
                if (_invoiceHeader.IsSOAUpdate)
                {
                    foreach (var _serItm in _pickSerial)
                    {
                        ReptPickSerials _tmpSer = ReptPickSerials.CreateNewObject(_serItm);
                        _tmpSerListSOA.Add(_tmpSer);
                    }
                }
                #endregion
                _pickSerialtemp = _pickSerial;
                CommonSaveInvoiceWithDeliveryOrderWithTransaction(_invoiceHeader, _invoiceItem, _invoiceSerial, _recieptHeader, _recieptItem, _inventoryHeader, _pickSerial, _pickSubSerial, _invoiceAuto, _recieptAuto, _inventoryAuto, _isDeliveryNow, out _invNo, out _recNo, out _DONo, _inventoryDAL, _salesDAL, _inventoryRepDAL, _isHold, _isHoldInvoiceProcess, out _error, false, out _invoiceSeq, out _recieptSeq, out _invHdr, out _dataTable);

                //update invoice discount

                //foreach (InvoiceItem _itm in _invoiceItem)
                //{

                //    if (_itm.Sad_dis_type == "P")
                //        _salesDAL.UpdateDiscountUsedTimes(_itm.Sad_dis_seq, 1);
                //}




                string _customerCode = _invoiceHeader.Sah_cus_cd;
                GroupBussinessEntity _businessEntityGrup = new GroupBussinessEntity();
                if (string.IsNullOrEmpty(_error))
                {

                    #region Customer Creation
                    if (_invoiceHeader.Sah_cus_cd == "CASH" && (!string.IsNullOrEmpty(_businessCompany.Mbe_nic) || !string.IsNullOrEmpty(_businessCompany.Mbe_mob)))
                    {
                        // MasterBusinessEntity _nic = _salesDAL.GetActiveBusinessCompanyDetail(_invoiceHeader.Sah_com, string.Empty, _businessCompany.Mbe_nic, string.Empty, "C");
                        // MasterBusinessEntity _mobile = _salesDAL.GetActiveBusinessCompanyDetail(_invoiceHeader.Sah_com, string.Empty, string.Empty, _businessCompany.Mbe_mob, "C");
                        // if (_nic.Mbe_cd == null && _mobile.Mbe_cd == null)
                        {
                            _businessEntityGrup = new GroupBussinessEntity();
                            _businessEntityGrup.Mbg_act = true;
                            _businessEntityGrup.Mbg_add1 = _businessCompany.Mbe_add1;
                            _businessEntityGrup.Mbg_add2 = _businessCompany.Mbe_add2;
                            _businessEntityGrup.Mbg_cd = "c1";
                            _businessEntityGrup.Mbg_contact = string.Empty;
                            _businessEntityGrup.Mbg_email = string.Empty;
                            _businessEntityGrup.Mbg_fax = string.Empty;
                            _businessEntityGrup.Mbg_mob = _businessCompany.Mbe_mob;
                            _businessEntityGrup.Mbg_name = _businessCompany.Mbe_name;
                            _businessEntityGrup.Mbg_nic = _businessCompany.Mbe_nic;
                            _businessEntityGrup.Mbg_tel = string.Empty;
                            _businessEntityGrup.Mbg_tit = _businessCompany.MBE_TIT.Trim();
                            _businessEntityGrup.Mbg_nationality = "SL";
                            _businessEntityGrup.Mbg_cre_by = _invoiceHeader.Sah_cre_by.Trim();
                            _businessEntityGrup.Mbg_mod_by = _invoiceHeader.Sah_mod_by;

                            //new customer
                            _auto = new MasterAutoNumber();
                            _auto.Aut_cate_cd = string.Empty;
                            _auto.Aut_cate_tp = string.Empty;
                            _auto.Aut_moduleid = "CUS";
                            _auto.Aut_number = 0;
                            _auto.Aut_start_char = "CONT";

                        nxt1:
                            _auto.Aut_year = null;
                            MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                            _customerCode = _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);


                            if (_salesDAL.CheckSalesNo("sp_getcustomer", "p_customer", _customerCode) == 1)
                            {
                                goto nxt1;
                            }
                            _businessCompany.Mbe_cd = _customerCode;
                            _businessEntityGrup.Mbg_cd = _customerCode;
                            _invoiceHeader.Sah_cus_cd = _customerCode;
                            _salesDAL.SaveBusinessEntityDetailGroup(_businessEntityGrup);
                            _salesDAL.SaveBusinessEntityDetail(_businessCompany);
                            _salesDAL.UpdateInvoiceforNewCustomer(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_seq_no, _customerCode);
                            _salesDAL.UpdateInventoryCustomer(_inventoryHeader.Ith_seq_no, _customerCode);
                        }

                    }
                    else if (_invoiceHeader.Sah_cus_cd != "CASH")
                    {
                        MasterBusinessEntity _chkList = new MasterBusinessEntity();
                        _chkList = _salesDAL.GetCustomerProfileByCom(_invoiceHeader.Sah_cus_cd, null, null, null, null, _invoiceHeader.Sah_com);

                        if (_chkList.Mbe_cd == null)
                        {
                            _businessEntityGrup = new GroupBussinessEntity();
                            _businessEntityGrup.Mbg_act = true;
                            _businessEntityGrup.Mbg_add1 = _businessCompany.Mbe_add1;
                            _businessEntityGrup.Mbg_add2 = _businessCompany.Mbe_add2;
                            _businessEntityGrup.Mbg_cd = _invoiceHeader.Sah_cus_cd;
                            _businessEntityGrup.Mbg_contact = string.Empty;
                            _businessEntityGrup.Mbg_email = string.Empty;
                            _businessEntityGrup.Mbg_fax = string.Empty;
                            _businessEntityGrup.Mbg_mob = _businessCompany.Mbe_mob;
                            _businessEntityGrup.Mbg_name = _businessCompany.Mbe_name;
                            _businessEntityGrup.Mbg_nic = _businessCompany.Mbe_nic;
                            _businessEntityGrup.Mbg_tel = string.Empty;
                            _businessEntityGrup.Mbg_nationality = "SL";
                            _businessEntityGrup.Mbg_tit = _businessCompany.MBE_TIT;
                            _businessEntityGrup.Mbg_cre_by = _invoiceHeader.Sah_cre_by;
                            _businessEntityGrup.Mbg_mod_by = _invoiceHeader.Sah_mod_by;

                            _businessCompany.Mbe_cd = _invoiceHeader.Sah_cus_cd;
                            _salesDAL.SaveBusinessEntityDetailGroup(_businessEntityGrup);
                            _salesDAL.SaveBusinessEntityDetail(_businessCompany);

                        }
                        else
                        {
                            GroupBussinessEntity _grupList = new GroupBussinessEntity();
                            _grupList = _salesDAL.GetCustomerProfileByGrup(_invoiceHeader.Sah_cus_cd, null, null, null, null, null);

                            if (_grupList.Mbg_cd == null)
                            {
                                _businessEntityGrup = new GroupBussinessEntity();
                                _businessEntityGrup.Mbg_act = true;
                                _businessEntityGrup.Mbg_add1 = _businessCompany.Mbe_add1;
                                _businessEntityGrup.Mbg_add2 = _businessCompany.Mbe_add2;
                                _businessEntityGrup.Mbg_cd = _invoiceHeader.Sah_cus_cd;
                                _businessEntityGrup.Mbg_contact = string.Empty;
                                _businessEntityGrup.Mbg_email = string.Empty;
                                _businessEntityGrup.Mbg_fax = string.Empty;
                                _businessEntityGrup.Mbg_mob = _businessCompany.Mbe_mob;
                                _businessEntityGrup.Mbg_name = _businessCompany.Mbe_name;
                                _businessEntityGrup.Mbg_nic = _businessCompany.Mbe_nic;
                                _businessEntityGrup.Mbg_tel = string.Empty;
                                _businessEntityGrup.Mbg_nationality = "SL";
                                _businessEntityGrup.Mbg_tit = _businessCompany.MBE_TIT;
                                _businessEntityGrup.Mbg_cre_by = _invoiceHeader.Sah_cre_by;
                                _businessEntityGrup.Mbg_mod_by = _invoiceHeader.Sah_mod_by;
                                _salesDAL.SaveBusinessEntityDetailGroup(_businessEntityGrup);
                            }
                        }

                    }
                    #endregion

                    #region update auto no

                    if (!_isHold)
                    {
                        //nxt1:
                        /*_invoiceAuto.Aut_year = null;
                        MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
                        _invNo = _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                        _invoiceAuto.Aut_year = null;
                        _invoiceAuto.Aut_modify_dt = null;
                        if (_salesDAL.CheckSalesNo("sp_getinvno", "p_inv_no", _invNo) == 1)
                        {
                            //_salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
                            //goto nxt1;
                            _error = "Invoice process terminated. Please re-process.(Hint - Duplicating Invoice No)";
                            _invoiceNo = string.Empty;
                            _receiptNo = string.Empty;
                            _deliveryOrder = string.Empty;
                            _errorlist = _error;
                            BuyBackInvNo = string.Empty;
                            _effect = -1;

                            _salesDAL.TransactionRollback();
                            _inventoryDAL.TransactionRollback();
                            _fmsInventoryDal.TransactionRollback();
                            _inventoryRepDAL.TransactionRollback();
                            _generalDAL.TransactionRollback();
                            return _effect;
                        }

                        _salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto);*/

                        #region Buyback Item
                        if (_buybacklist != null) if (_buybacklist.Count > 0)
                            {
                                InventoryBLL _bll = new InventoryBLL();
                                _bll._salesDAL = _salesDAL;
                                _bll._inventoryDAL = _inventoryDAL;
                                _bll._FMSinventoryDAL = _fmsInventoryDal;
                                _bll._inventoryRepDAL = _inventoryRepDAL;
                                _buybackheader.Ith_manual_ref = _invNo;
                                _bll.SaveInwardScanSerial(_buybackheader, _buybacklist, null);
                                _bll.UpdateInventoryAutoNumber(_buybackheader, _buybackauto, "+", out  _buybackinv);
                                _inventoryDAL.UpdateMovementDocNo_Other(_buybackheader.Ith_seq_no, _buybackinv);
                            }
                        #endregion

                        int count = _recieptItem.Where(r => r.Sard_pay_tp == "CRNOTE").Count();
                        if (count <= 0)
                        {
                            #region Generate Promotion Vouchers :: Chamal 26-Jun-2014
                            if (_voucher == null) _voucher = new List<InvoiceVoucher>();

                            bool _promoVouApplied = false;
                            #region validate mobile no add by tharanga 2018/02/27
                            _VoucherPromotion = true;
                            if (!string.IsNullOrEmpty(_businessCompany.Mbe_mob))
                            {
                                //Boolean ismobvalid = ValidateMobileNo(_businessCompany.Mbe_mob);
                                //if (ismobvalid == false)
                                //{
                                //    _VoucherPromotion = false;
                                //}
                                _VoucherPromotion = true;
                            }
                            //if (ismobvalid == false)
                            //{
                            //    _VoucherPromotion = false;
                            //}
                            #endregion
                            if (_VoucherPromotion == true)
                            {
                                foreach (InvoiceItem _itm in _invoiceItem)
                                {
                                    if (_itm.Sad_unit_rt > 0)
                                    {
                                        MasterItem _mitm = _inventoryDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);
                                        if (_mitm.Mi_is_ser1 != -1)
                                        {
                                            for (int i = 1; i <= _itm.Sad_qty; i++)
                                            {
                                                List<PromoVoucherDefinition> _proVouList = GetPromotionalVouchersDefinition(_invoiceHeader.Sah_com, _invoiceHeader.Sah_inv_tp, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_sah_date_new.Date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _mitm.Mi_brand, _mitm.Mi_cate_1, _mitm.Mi_cate_2, _itm.Sad_itm_cd, false);
                                                if (_proVouList != null)
                                                {
                                                    if (_proVouList.Count > 0)
                                                    {
                                                        foreach (PromoVoucherDefinition _proitm in _proVouList)
                                                        {
                                                            InvoiceVoucher _vou = new InvoiceVoucher();
                                                            GiftVoucherPages _gvou = new GiftVoucherPages();

                                                            DataTable _result = _generalDAL.GetProVoutype(_invoiceHeader.Sah_com, _proitm.Spd_vou_cd);

                                                            if (_result != null || _result.Rows.Count > 0)
                                                            {
                                                                if (Convert.ToInt32(_result.Rows[0]["spt_is_qtywise"].ToString()) == 0)
                                                                {
                                                                    //consider total invoice value
                                                                    if (Convert.ToInt32(_result.Rows[0]["spt_min_val"].ToString()) <= _invoiceHeader.Sah_anal_7)
                                                                    {
                                                                        var _vouExsit = _voucher.Where(x => x.Stvo_prefix == _proitm.Spd_vou_cd).Select(x => x.Stvo_prefix).ToList();
                                                                        if (_vouExsit != null && _vouExsit.Count > 0)
                                                                        {
                                                                            goto Ter;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        goto Ter;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if (Convert.ToInt32(_result.Rows[0]["spt_min_val"].ToString()) <= _itm.Sad_tot_amt)
                                                                    {

                                                                    }
                                                                    else
                                                                    {
                                                                        goto Ter;
                                                                    }
                                                                }
                                                            }


                                                            _vou.Stvo_inv_no = _invNo;
                                                            _vou.Stvo_prefix = _proitm.Spd_vou_cd;
                                                            _vou.Stvo_bookno = _proitm.Spd_seq;
                                                            _vou.Stvo_pageno = _salesDAL.GetPromotionVoucherNo();
                                                            _vou.Stvo_gv_itm = _proitm.Spd_vou_cd;
                                                            _vou.Stvo_price = _proitm.Spd_disc;
                                                            _vou.Stvo_itm_cd = _itm.Sad_itm_cd;
                                                            _vou.Stvo_cre_by = "PRO_VOU";
                                                            if (_proitm.Spd_disc_isrt == true)
                                                            {
                                                                _vou.Stvo_stus = 1;
                                                                _gvou.Gvp_gv_tp = "RATE";
                                                            }
                                                            else
                                                            {
                                                                _vou.Stvo_stus = 0;
                                                                _gvou.Gvp_gv_tp = "VALUE";
                                                            }

                                                            _gvou.Gvp_amt = _proitm.Spd_disc;
                                                            _gvou.Gvp_app_by = _invoiceHeader.Sah_cre_by;
                                                            _gvou.Gvp_bal_amt = _proitm.Spd_disc;  // 0; kapila 3/11/2016
                                                            _gvou.Gvp_book = _itm.Sad_itm_line;
                                                            _gvou.Gvp_can_by = "";
                                                            _gvou.Gvp_can_dt = DateTime.Now.Date;
                                                            _gvou.Gvp_com = _invoiceHeader.Sah_com;
                                                            _gvou.Gvp_cre_by = _invoiceHeader.Sah_cre_by;
                                                            _gvou.Gvp_cre_dt = DateTime.Now.Date;
                                                            _gvou.Gvp_cus_add1 = _invoiceHeader.Sah_cus_add1;
                                                            _gvou.Gvp_cus_add2 = _invoiceHeader.Sah_cus_add2;
                                                            _gvou.Gvp_cus_cd = _invoiceHeader.Sah_cus_cd;
                                                            _gvou.Gvp_cus_mob = _businessCompany.Mbe_mob;
                                                            _gvou.Gvp_cus_name = _invoiceHeader.Sah_cus_name;
                                                            _gvou.Gvp_from = "-";
                                                            _gvou.Gvp_gv_cd = _proitm.Spd_vou_cd;
                                                            if (Convert.ToInt32(_result.Rows[0]["spt_opt"].ToString()) == 1)
                                                            {
                                                                _gvou.Gvp_gv_prefix = "P_GV";
                                                            }
                                                            else
                                                            {
                                                                _gvou.Gvp_gv_prefix = "GV";
                                                            }
                                                            _gvou.Gvp_is_allow_promo = false;
                                                            _gvou.Gvp_issu_itm = 0;
                                                            _gvou.Gvp_issue_by = "";
                                                            _gvou.Gvp_issue_dt = DateTime.Now.Date;
                                                            _gvou.Gvp_line = i;
                                                            _gvou.Gvp_mod_by = "";
                                                            _gvou.Gvp_mod_dt = DateTime.Now.Date;
                                                            _gvou.Gvp_noof_itm = 1;
                                                            _gvou.Gvp_oth_ref = _invNo;// _proitm.Spd_circular_no;
                                                            _gvou.Gvp_page = _vou.Stvo_pageno;
                                                            _gvou.Gvp_pc = _invoiceHeader.Sah_pc;
                                                            _gvou.Gvp_ref = _proitm.Spd_seq.ToString();
                                                            _gvou.Gvp_stus = "A";
                                                            _gvou.Gvp_valid_from = _invoiceHeader.Sah_dt.Date;
                                                            //_gvou.Gvp_valid_to = _invoiceHeader.Sah_dt.Date.AddMonths(_proitm.Spd_period);
                                                            _gvou.Gvp_valid_to = _invoiceHeader.Sah_dt.Date.AddDays(_proitm.Spd_period); //Chamal 24-09-2014
                                                            _gvou.Gvp_cus_nic = _businessCompany.Mbe_nic;

                                                            _voucher.Add(_vou);
                                                            _fmsInventoryDal.SaveGiftVoucherPages(_gvou);
                                                            _promoVouApplied = true;
                                                        //break;
                                                        Ter: int k = 0;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (_promoVouApplied == true)
                            {
                                if (_voucher != null)
                                {
                                    if (_voucher.Count > 0)
                                    {
                                        //var _vouProCodes = _voucher.Where(x => x.Stvo_cre_by == "PRO_VOU").Select(x => x.Stvo_prefix).Distinct().ToList();
                                        var _vouProCodes = _voucher.Where(x => x.Stvo_cre_by == "PRO_VOU").Select(x => x.Stvo_bookno).Distinct().ToList();
                                        if (_vouProCodes != null && _vouProCodes.Count > 0)
                                        {
                                            foreach (var _cd in _vouProCodes)
                                            {
                                                DataTable _dtothCom = _salesDAL.GetProVouAllowCompanies(_invoiceHeader.Sah_com, _cd);

                                                if (_dtothCom.Rows.Count > 0)
                                                {
                                                    foreach (DataRow drow in _dtothCom.Rows)
                                                    {
                                                        MasterBusinessEntity _othCust = new MasterBusinessEntity();
                                                        _othCust = _businessCompany;
                                                        _othCust.Mbe_cd = _customerCode;
                                                        _othCust.Mbe_com = drow["R_COM"].ToString();
                                                        if (!string.IsNullOrEmpty(_othCust.Mbe_nic) || !string.IsNullOrEmpty(_othCust.Mbe_mob))
                                                        {
                                                            MasterBusinessEntity _nic = _salesDAL.GetActiveBusinessCompanyDetail(_invoiceHeader.Sah_com, string.Empty, _othCust.Mbe_nic, string.Empty, "C");
                                                            MasterBusinessEntity _mobile = _salesDAL.GetActiveBusinessCompanyDetail(_invoiceHeader.Sah_com, string.Empty, string.Empty, _othCust.Mbe_mob, "C");
                                                            if (_nic.Mbe_cd == null && _mobile.Mbe_cd == null)
                                                            {
                                                                int _isUpdate = _salesDAL.UpdateBusinessEntityProfile(_othCust, 1);
                                                                if (_isUpdate <= 0) _salesDAL.SaveBusinessEntityDetail(_othCust);
                                                            }
                                                        }

                                                    }
                                                }

                                            }
                                        }
                                    }
                                }
                            }

                            //sms send to customer for voucher______
                            if (_promoVouApplied == true)
                            {
                                if (_voucher != null)
                                {
                                    if (_voucher.Count > 0)
                                    {
                                        string _mobilNo = "";
                                        string _cusName = "";
                                        var _vouProCodes = _voucher.Where(x => x.Stvo_cre_by == "PRO_VOU").Select(x => x.Stvo_prefix).Distinct().ToList();
                                        if (_vouProCodes != null && _vouProCodes.Count > 0)
                                        {
                                            foreach (var _cd in _vouProCodes)
                                            {
                                                DataTable _result = _generalDAL.GetProVoutype(_invoiceHeader.Sah_com, _cd);

                                                if (_result != null || _result.Rows.Count > 0)
                                                {
                                                    //updated by akila 2017/11/13
                                                    int _smsAlert = 0;
                                                    int.TryParse(_result.Rows[0]["spt_sms_alert"].ToString(), out _smsAlert);

                                                    //if (Convert.ToInt32(_result.Rows[0]["spt_sms_alert"].ToString()) == 1)
                                                    if (_smsAlert == 1)
                                                    {
                                                        if (!string.IsNullOrEmpty(_result.Rows[0]["spt_cus_pur_sms"].ToString()))
                                                        {
                                                            _mobilNo = _businessCompany.Mbe_mob;
                                                            _cusName = _businessCompany.Mbe_name;

                                                            if (!string.IsNullOrEmpty(_mobilNo))
                                                            {
                                                                if (_mobilNo.Length >= 9)
                                                                {

                                                                    string _mg = _result.Rows[0]["spt_cus_pur_sms"].ToString() + " " + _cd;
                                                                    OutSMS _out = new OutSMS();
                                                                    _out.Msg = _mg;
                                                                    _out.Msgstatus = 0;
                                                                    _out.Msgtype = "S";
                                                                    _out.Receivedtime = DateTime.Now;
                                                                    _out.Receiver = "CUSTOMER";
                                                                    //_out.Receiverphno = _info.Mmi_mobi_no;

                                                                    if (_mobilNo.Length == 10)
                                                                    {
                                                                        _out.Receiverphno = "+94" + _mobilNo.Substring(1, 9);
                                                                        _out.Senderphno = "+94" + _mobilNo.Substring(1, 9);
                                                                    }
                                                                    if (_mobilNo.Length == 9)
                                                                    {
                                                                        _out.Receiverphno = "+94" + _mobilNo;
                                                                        _out.Senderphno = "+94" + _mobilNo;
                                                                    }

                                                                    _out.Refdocno = _invNo;
                                                                    _out.Sender = _invoiceHeader.Sah_cre_by;
                                                                    _out.Createtime = DateTime.Now;
                                                                    _generalDAL.SaveSMSOut(_out);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion

                            #region Save/Update Voucher
                            if (_voucher != null)
                                if (_voucher.Count > 0)
                                {
                                    _voucher.ForEach(x => x.Stvo_inv_no = _invNo);
                                    UpdateInvoiceGiftVoucher(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _customerCode, _invoiceHeader.Sah_cus_name, _invoiceHeader.Sah_d_cust_add1, _invoiceHeader.Sah_d_cust_add2, _businessCompany.Mbe_mob, _invoiceHeader.Sah_dt, _invNo, _invoiceHeader.Sah_cre_by, _voucher, _salesDAL, _fmsInventoryDal);
                                }
                            #endregion
                        }
                        //_salesDAL.UpdateInvoiceWithTaxCommission(_invNo, string.Empty, Convert.ToInt32(_invoiceSeq), Convert.ToInt32(_recieptSeq));
                        //string RecieptNo = "";
                        if (_recieptAuto != null)
                        {
                            //nxt2:
                            _recieptAuto.Aut_year = null;
                            MasterAutoNumber RecieptAuto = _inventoryDAL.GetAutoNumber(_recieptAuto.Aut_moduleid, _recieptAuto.Aut_direction, _recieptAuto.Aut_start_char, _recieptAuto.Aut_cate_tp, _recieptAuto.Aut_cate_cd, _recieptAuto.Aut_modify_dt, _recieptAuto.Aut_year);
                            _receiptNo = _recieptAuto.Aut_cate_cd + "-" + RecieptAuto.Aut_start_char + RecieptAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                            _recieptAuto.Aut_year = null;
                            _recieptAuto.Aut_modify_dt = null;
                            _recNo = _receiptNo;
                            if (_salesDAL.CheckSalesNo("sp_getreceiptno", "p_rept_no", _recNo) == 1)
                            {
                                // _salesDAL.UpdateInvoiceAutoNumber(_recieptAuto);
                                // goto nxt2;
                                _error = "Invoice process terminated. Please re-process.(Hint - Duplicating Receipt No)";
                                _invoiceNo = string.Empty;
                                _receiptNo = string.Empty;
                                _deliveryOrder = string.Empty;
                                _errorlist = _error;
                                BuyBackInvNo = string.Empty;
                                _effect = -1;

                                _salesDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                _fmsInventoryDal.TransactionRollback();
                                _inventoryRepDAL.TransactionRollback();
                                _generalDAL.TransactionRollback();
                                return _effect;
                            }
                            //_invDAL.UpdateAutoNumber(_recieptAuto);

                            _salesDAL.UpdateInvoiceAutoNumber(_recieptAuto);
                        }

                        _salesDAL.UpdateReceipt(_invNo, _recNo, Convert.ToInt32(_invoiceSeq), Convert.ToInt32(_recieptSeq));
                        //Update receipt no which allocated by receipt entry as per invoice
                        _inventoryRepDAL.UpdateAdvanceReceiptNofromInvoice(string.Empty, Convert.ToString(_invoiceSeq), _invNo);

                        if (_isDeliveryNow)
                        {
                            // string _doc;
                            _inventoryDAL.UpdateInventoryAutoNumber(_invHdr, _inventoryAuto, "-", out _DONo);
                            MasterAutoNumber _AutoNo = new MasterAutoNumber();
                            int _e = 0;
                            if (_dataTable.Rows.Count > 0)
                            {
                                for (int i = 0; i < _dataTable.Rows.Count; i++)
                                {
                                    if (_dataTable.Rows[i]["DocType"].ToString() == "ADJ")
                                    {
                                        _AutoNo.Aut_cate_cd = _invHdr.Ith_loc;
                                        _AutoNo.Aut_moduleid = "ADJ";
                                        _AutoNo.Aut_direction = null;
                                        _AutoNo.Aut_start_char = "ADJ";
                                        _AutoNo.Aut_cate_tp = "LOC";
                                        //_AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;
                                        _AutoNo.Aut_year = null;

                                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                        string _documentNo = _invHdr.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_invHdr.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                        _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                        _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                    }
                                    else if (_dataTable.Rows[i]["DocType"].ToString() == "GRN")
                                    {
                                        _AutoNo.Aut_cate_cd = _invHdr.Ith_loc;
                                        _AutoNo.Aut_moduleid = "GRN";
                                        _AutoNo.Aut_direction = null;
                                        _AutoNo.Aut_start_char = "GRN";
                                        _AutoNo.Aut_cate_tp = "LOC";
                                        //_AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;
                                        _AutoNo.Aut_year = _invHdr.Ith_doc_date.Year;

                                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                        string _documentNo = _invHdr.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_invHdr.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                        _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                        _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                    }
                                    else if (_dataTable.Rows[i]["DocType"].ToString() == "PO")
                                    {
                                        //_AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_com;
                                        //_AutoNo.Aut_moduleid = "PO_LOCAL";
                                        //_AutoNo.Aut_direction = null;
                                        //_AutoNo.Aut_start_char = "PO";
                                        //_AutoNo.Aut_cate_tp = "COM";
                                        //_AutoNo.Aut_year = null;

                                        _AutoNo.Aut_cate_cd = _invHdr.Ith_com;
                                        _AutoNo.Aut_cate_tp = "COM";
                                        _AutoNo.Aut_direction = null;
                                        _AutoNo.Aut_modify_dt = null;
                                        _AutoNo.Aut_moduleid = "PUR";
                                        _AutoNo.Aut_start_char = "PUR";
                                        _AutoNo.Aut_year = null;

                                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                        string _documentNo = _AutoNo.Aut_cate_cd + "-" + _AutoNo.Aut_start_char + string.Format("{0:000000}", _autoNo);
                                        _inventoryDAL.UpdatePODocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                        _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                        _inventoryDAL.UpdateGRNPODocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                    }
                                }
                            }

                            //update inv no
                            _inventoryDAL.UpdateOtherDocuments(_DONo, _invNo);
                            _inventoryDAL.UpdateBatchRefDoc(_DONo, _invNo);


                        }

                    }
                    #endregion

                    #region Update Manual Doc
                    if (_invoiceHeader.Sah_manual)
                    {
                        MasterCompany _masterComp = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com);  //kapila 27/4/2016
                        if (_masterComp.MC_IS_SCM2_FMS == 1)
                            _inventoryDAL.UpdateManualDocNo(_location, "MDOC_INV", Convert.ToInt32(_invoiceHeader.Sah_man_ref), _invNo);
                        else
                            _fmsInventoryDal.UpdateManualDocNo(_location, "MDOC_INV", Convert.ToInt32(_invoiceHeader.Sah_man_ref), _invNo);
                    }
                    #endregion

                    #region update invoice discount / Promotion Voucher page as F
                    foreach (InvoiceItem _itm in _invoiceItem)
                    {
                        if (_itm.Sad_dis_type == "P")
                        {
                            _salesDAL.UpdateDiscountUsedTimes(_itm.Sad_dis_seq, 1);
                        }

                        if (_itm.Sad_res_no == "PROMO_VOU" && _itm.Sad_res_line_no > 0)
                        {
                            //Add by Chamal 6-Jul-2014
                            _salesDAL.Update_GV_Pages(1, _invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_dt.Date, "", "F", _itm.Sad_res_line_no, "P_GV", _invoiceHeader.Sah_cre_by, _invNo);

                            //Send redeem SMS
                            DataTable _vouDet = _salesDAL.GetPVDet("P_GV", _itm.Sad_res_line_no);
                            if (!string.IsNullOrEmpty(_invoiceHeader.gvo_cd))
                            {
                                if (_vouDet.Rows.Count > 0) //add by tharanga 2018/10/09
                                {
                                    IEnumerable<DataRow> results = (from MyRows in _vouDet.AsEnumerable()
                                                                    where
                                                                     MyRows.Field<string>("gvp_gv_cd") == _invoiceHeader.gvo_cd
                                                                    select MyRows);
                                    _vouDet = results.CopyToDataTable();
                                }
                            }

                            if (_vouDet != null || _vouDet.Rows.Count > 0)
                            {
                                DataTable _result = _generalDAL.GetProVoutype(null, _vouDet.Rows[0]["gvp_gv_cd"].ToString());
                                if (_result != null || _result.Rows.Count > 0)
                                {
                                    //updated by akila 2017/11/13
                                    int _smsAlert = 0;
                                    int.TryParse(_result.Rows[0]["spt_sms_alert"].ToString(), out _smsAlert);

                                    //if (Convert.ToInt32(_result.Rows[0]["spt_sms_alert"].ToString()) == 1)
                                    if (_smsAlert == 1)
                                    {
                                        if (!string.IsNullOrEmpty(_result.Rows[0]["spt_cus_red_sms"].ToString()))
                                        {
                                            string _mobilNo = _businessCompany.Mbe_mob;
                                            string _cusName = _businessCompany.Mbe_name;

                                            if (!string.IsNullOrEmpty(_mobilNo))
                                            {
                                                if (_mobilNo.Length >= 9)
                                                {

                                                    string _mg = _result.Rows[0]["spt_cus_red_sms"].ToString() + " Voucher : " + _itm.Sad_res_line_no;
                                                    OutSMS _out = new OutSMS();
                                                    _out.Msg = _mg;
                                                    _out.Msgstatus = 0;
                                                    _out.Msgtype = "S";
                                                    _out.Receivedtime = DateTime.Now;
                                                    _out.Receiver = "CUSTOMER";
                                                    //_out.Receiverphno = _info.Mmi_mobi_no;

                                                    if (_mobilNo.Length == 10)
                                                    {
                                                        _out.Receiverphno = "+94" + _mobilNo.Substring(1, 9);
                                                        _out.Senderphno = "+94" + _mobilNo.Substring(1, 9);
                                                    }
                                                    if (_mobilNo.Length == 9)
                                                    {
                                                        _out.Receiverphno = "+94" + _mobilNo;
                                                        _out.Senderphno = "+94" + _mobilNo;
                                                    }

                                                    _out.Refdocno = _invNo;
                                                    _out.Sender = _invoiceHeader.Sah_cre_by;
                                                    _out.Createtime = DateTime.Now;
                                                    _generalDAL.SaveSMSOut(_out);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    #endregion

                    #region Update Advance Receipt used  | Tharaka 2015-08-07
                    if (_recieptItem != null)
                    {
                        if (_recieptItem.Count > 0)
                        {
                            foreach (RecieptItem _itm in _recieptItem)
                            {
                                if (_itm.Sard_pay_tp == "ADVAN")
                                {
                                    List<ReceiptItemDetails> _advRecItm = new List<ReceiptItemDetails>();
                                    _advRecItm = _salesDAL.GetAdvanReceiptItems(_itm.Sard_ref_no);

                                    List<ReceiptItemDetails> oReceiptItemDetails = _salesDAL.GetAdvanReceiptItems(_itm.Sard_ref_no);
                                    Int32 result = _salesDAL.UpdateRefundDetails4Inv(_recieptHeader.Sar_tot_settle_amt, _invNo, _itm.Sard_ref_no, _invoiceHeader.Sah_com, _invoiceHeader.Sah_pc);

                                    if (_advRecItm != null)
                                    {
                                        if (_advRecItm.Count > 0)
                                        {
                                            foreach (ReceiptItemDetails _advItm in _advRecItm)
                                            {
                                                if (_pickSerial.FindAll(x => x.Tus_ser_1 == _advItm.Sari_serial).Count > 0)
                                                {

                                                }
                                                else
                                                {
                                                    Boolean status = _inventoryDAL.Update_inrser_INS_AVAILABLE(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc, _advItm.Sari_item, _advItm.Sari_serial, 1);
                                                }
                                            }
                                        }
                                    }
                                    if (_isDeliveryNow)
                                    {
                                        foreach (var itemdet in _advRecItm)
                                        {
                                            _salesDAL.updatereceiptDetnew(itemdet.Sari_seq_no, itemdet.Sari_rec_no, itemdet.Sari_item, itemdet.sari_res_qty);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    //add by tharanga 2017/11/07


                    #endregion

                    #region Update Reservation Qty add by Rukshan modify by lakshan 03 Mar 2017

                    foreach (InvoiceItem _itm in _invoiceItem)
                    {
                        if (!string.IsNullOrEmpty(_itm.Sad_res_no))
                        {
                            string _ORGDOC = string.Empty;
                            string _ORGDOCTYPE = string.Empty;
                            string _err = string.Empty;
                            int _wp = 0;
                            InventoryBLL _BL = new InventoryBLL();
                            if (_itm.sad_resupdate == 1)
                            {
                                SalesOrderHeader _SOHDR = _inventoryDAL.GET_SAO_HDR_DATA(_invoiceHeader.Sah_ref_doc);
                                if (_SOHDR == null)
                                {
                                    _salesDAL.UPDATE_RES_BQTY(_itm.Sad_res_no, _itm.Sad_res_line_no, _itm.Sad_qty);
                                    _ORGDOC = _itm.Sad_res_no;
                                    _ORGDOCTYPE = "INV";
                                    _wp = 1;
                                }
                                else
                                {
                                    _ORGDOC = _invoiceHeader.Sah_ref_doc;
                                    _ORGDOCTYPE = "SO";
                                    _wp = 0;
                                }
                                if (_SOHDR != null)
                                {
                                    List<INT_REQ> INT_REQ = new List<INT_REQ>();
                                    INT_REQ = _inventoryDAL.GETREQBY_REF(_SOHDR.SOH_SO_NO, _SOHDR.SOH_COM, "SOA", _itm.Sad_itm_cd, _itm.Sad_itm_line);
                                    if (INT_REQ != null)
                                    {
                                        if (INT_REQ.Count > 0)
                                        {
                                            _ORGDOC = INT_REQ[0].ITR_REQ_NO;
                                            _ORGDOCTYPE = "SOA";
                                            _wp = 0;
                                        }
                                    }
                                }

                                #region reservation add by rukshan chg by lakshan 28 Feb 2017
                                INR_RES_LOG _resLogSave = new INR_RES_LOG();
                                _resLogSave.IRL_RES_NO = _itm.Sad_res_no;
                                _resLogSave.IRL_ITM_CD = _itm.Sad_itm_cd;
                                _resLogSave.IRL_ITM_STUS = _itm.Sad_itm_stus;
                                _resLogSave.IRL_CURT_COM = _invoiceHeader.Sah_com;
                                _resLogSave.IRL_CURT_LOC = _invoiceHeader.Sah_del_loc;
                                _resLogSave.IRL_RES_QTY = _itm.Sad_qty;
                                _resLogSave.IRL_MOD_BY_NEW = _invoiceHeader.Sah_cre_by;
                                _resLogSave.IRL_MOD_DT = _invoiceHeader.Sah_cre_when;
                                _resLogSave.IRL_CRE_BY = _invoiceHeader.Sah_cre_by;
                                _resLogSave.IRL_CRE_DT = _invoiceHeader.Sah_cre_when;
                                _resLogSave.IRL_CRE_SESSION = _invoiceHeader.Sah_session_id;
                                _resLogSave.IRL_CURT_DOC_NO = _invoiceHeader.Sah_inv_no;
                                _resLogSave.IRL_CURT_DOC_TP = "INVC";
                                _resLogSave.IRL_CURT_DOC_DT = _invoiceHeader.Sah_dt;
                                _resLogSave.IRL_RES_WP = _wp;
                                _resLogSave.IRL_ORIG_DOC_NO = _ORGDOC;
                                _resLogSave.IRL_ORIG_DOC_TP = _ORGDOCTYPE;
                                _effect = _BL.ReservationLogDataUpdateCancel(_resLogSave, 0, _inventoryDAL, out _error);
                                if (_isDeliveryNow)
                                {
                                    INR_RES_LOG _resLogSavedo = new INR_RES_LOG();
                                    _resLogSavedo.IRL_RES_NO = _itm.Sad_res_no;
                                    _resLogSavedo.IRL_ITM_CD = _itm.Sad_itm_cd;
                                    _resLogSavedo.IRL_ITM_STUS = _itm.Sad_itm_stus;
                                    _resLogSavedo.IRL_CURT_COM = _invoiceHeader.Sah_com;
                                    _resLogSavedo.IRL_CURT_LOC = _invoiceHeader.Sah_del_loc;
                                    _resLogSavedo.IRL_RES_QTY = _itm.Sad_qty;
                                    _resLogSavedo.IRL_MOD_BY_NEW = _invoiceHeader.Sah_cre_by;
                                    _resLogSavedo.IRL_MOD_DT = _invoiceHeader.Sah_cre_when;
                                    _resLogSavedo.IRL_CRE_BY = _invoiceHeader.Sah_cre_by;
                                    _resLogSavedo.IRL_CRE_DT = _invoiceHeader.Sah_cre_when;
                                    _resLogSavedo.IRL_CRE_SESSION = _invoiceHeader.Sah_session_id;
                                    _resLogSavedo.IRL_CURT_DOC_NO = _DONo;
                                    _resLogSavedo.IRL_CURT_DOC_TP = "DO";
                                    _resLogSavedo.IRL_CURT_DOC_DT = _invoiceHeader.Sah_dt;
                                    _resLogSavedo.IRL_RES_WP = _wp;
                                    _resLogSavedo.IRL_ORIG_DOC_NO = _itm.Sad_inv_no;
                                    _resLogSavedo.IRL_ORIG_DOC_TP = "INVC";
                                    _effect = _BL.ReservationLogDataUpdateCancel(_resLogSavedo, 0, _inventoryDAL, out _error);

                                }
                                #endregion
                            }
                        }
                    }

                    #endregion

                    #region Update Quotation Status
                    if (!string.IsNullOrEmpty(_invoiceHeader.Sah_structure_seq))
                    {
                        int resitl = _salesDAL.Update_Quotation_HDR_status(_invoiceHeader.Sah_structure_seq, "D");
                    }
                    #endregion

                    #region Save Purchase Order
                    if (isSavePurchaseorder)
                    {
                        _invNo = _invNo + " / " + _PurchaseOrder.Poh_doc_no;

                        _PurchaseOrder.Poh_com = _invoiceHeader.Sah_com;
                        _PurchaseOrder.Poh_contain_kit = false; // ???
                        _PurchaseOrder.Poh_cre_period = "N/A"; // ??
                        _PurchaseOrder.Poh_cur_cd = _invoiceHeader.Sah_currency;
                        _PurchaseOrder.Poh_dis_amt = 0;
                        _PurchaseOrder.Poh_dis_rt = 0;
                        _PurchaseOrder.Poh_dt = _invoiceHeader.Sah_dt;
                        _PurchaseOrder.Poh_ex_rt = 1;
                        _PurchaseOrder.Poh_frm_mon = 0;
                        _PurchaseOrder.Poh_frm_yer = 0;
                        _PurchaseOrder.Poh_job_no = string.Empty;
                        _PurchaseOrder.Poh_ope = "N/A";
                        _PurchaseOrder.Poh_oth_tot = 0;
                        _PurchaseOrder.Poh_pay_term = null;
                        _PurchaseOrder.Poh_port_of_orig = "N/A";
                        _PurchaseOrder.Poh_preferd_eta = DateTime.MinValue.Date;
                        _PurchaseOrder.Poh_profit_cd = _invoiceHeader.Sah_pc;
                        _PurchaseOrder.Poh_ref = _invoiceHeader.Sah_inv_no;
                        _PurchaseOrder.Poh_remarks = "AUTO GENERATED PO FOR SALES INVOICE";
                        _PurchaseOrder.Poh_reprint = false;
                        _PurchaseOrder.Poh_sent_add = string.Empty;
                        _PurchaseOrder.Poh_sent_by = string.Empty;
                        _PurchaseOrder.Poh_sent_to_vendor = false;
                        _PurchaseOrder.Poh_sent_via = string.Empty;
                        _PurchaseOrder.Poh_stus = "A";
                        _PurchaseOrder.Poh_sub_tot = 0;
                        _PurchaseOrder.Poh_sub_tp = "N"; //Normal

                        List<InterCompanySalesParameter> oInterCompanySalesParameters = _salesDAL.GET_INTERCOM_PAR_BY_CUST(_invoiceHeader.Sah_com, _invoiceHeader.Sah_cus_cd);
                        if (oInterCompanySalesParameters != null && oInterCompanySalesParameters.Count > 0)
                        {
                            _PurchaseOrder.Poh_supp = oInterCompanySalesParameters[0].Sritc_sup;
                        }
                        _PurchaseOrder.Poh_tax_chg = false;
                        _PurchaseOrder.Poh_tax_tot = 0;
                        _PurchaseOrder.Poh_to_mon = 0;
                        _PurchaseOrder.Poh_to_yer = 0;
                        _PurchaseOrder.Poh_to_yer = 0;
                        _PurchaseOrder.Poh_tot = 0;
                        _PurchaseOrder.Poh_tp = "L"; //Local Purchase
                        _PurchaseOrder.Poh_trans_term = string.Empty;
                        _PurchaseOrder.Poh_cre_by = _invoiceHeader.Sah_cre_by;

                        string _suppTaxCate = string.Empty;

                        MasterBusinessEntity _supDet = new MasterBusinessEntity();
                        _supDet = _inventoryDAL.GetBusinessCompanyDetail(_invoiceHeader.Sah_com, _PurchaseOrder.Poh_supp.ToString(), null, null, "S");
                        if (_supDet != null)
                        {
                            _suppTaxCate = _supDet.Mbe_cate;
                        }

                        List<PurchaseOrderDetail> POItems = new List<PurchaseOrderDetail>();
                        List<PurchaseOrderDelivery> POItemsDels = new List<PurchaseOrderDelivery>();

                        foreach (InvoiceItem oitem in _invoiceItem)
                        {
                            PurchaseOrderDetail POItem = new PurchaseOrderDetail();
                            decimal _tax = TaxCalculation(_invoiceHeader.Sah_com, oitem.Sad_itm_cd, oitem.Sad_itm_stus, oitem.Sad_unit_rt, 0);
                            decimal _taxForActual = 0;

                            if (string.IsNullOrEmpty(_suppTaxCate))
                            {
                                POItem.Pod_act_unit_price = (oitem.Sad_qty * oitem.Sad_unit_rt + _tax) / oitem.Sad_qty;
                            }
                            else
                            {
                                decimal _unitVal = oitem.Sad_unit_rt;
                                decimal _qty = oitem.Sad_qty;
                                decimal _amt = _unitVal * _qty;
                                _taxForActual = TaxCalculationActualCost(_invoiceHeader.Sah_com, oitem.Sad_itm_cd, oitem.Sad_itm_stus, _amt, _suppTaxCate, 0);
                                POItem.Pod_act_unit_price = ((oitem.Sad_qty * oitem.Sad_unit_rt) + _taxForActual) / oitem.Sad_qty;
                            }

                            POItem.Pod_dis_amt = 0;
                            POItem.Pod_dis_rt = 0;
                            POItem.Pod_grn_bal = oitem.Sad_qty;
                            POItem.Pod_item_desc = "N/A";
                            POItem.Pod_itm_cd = oitem.Sad_itm_cd;
                            POItem.Pod_itm_stus = oitem.Sad_itm_stus;
                            POItem.Pod_itm_tp = "M";
                            POItem.Pod_kit_itm_cd = "N/A";
                            POItem.Pod_kit_line_no = 0;
                            POItem.Pod_lc_bal = 0;
                            POItem.Pod_line_amt = (oitem.Sad_unit_rt * oitem.Sad_qty) + _tax;
                            POItem.Pod_line_no = oitem.Sad_itm_line;
                            POItem.Pod_line_tax = _tax;
                            POItem.Pod_line_val = oitem.Sad_unit_rt * oitem.Sad_qty;
                            POItem.Pod_nbt = 0;
                            POItem.Pod_nbt_before = 0;
                            POItem.Pod_pi_bal = 0;
                            POItem.Pod_qty = oitem.Sad_qty;
                            POItem.Pod_ref_no = _invoiceHeader.Sah_inv_no;
                            POItem.Pod_seq_no = _PurchaseOrder.Poh_seq_no;
                            POItem.Pod_si_bal = 0;
                            POItem.Pod_tot_tax_before = 0;
                            POItem.Pod_unit_price = oitem.Sad_unit_rt;
                            POItem.Pod_uom = "NOS";
                            POItem.Pod_vat = 0;
                            POItem.Pod_vat_before = 0;
                            POItems.Add(POItem);

                            PurchaseOrderDelivery oItemDel = new PurchaseOrderDelivery();
                            oItemDel.Podi_seq_no = _PurchaseOrder.Poh_seq_no;
                            oItemDel.Podi_line_no = oitem.Sad_itm_line;
                            oItemDel.Podi_del_line_no = 1;
                            oItemDel.Podi_loca = _invoiceHeader.Sah_del_loc;
                            oItemDel.Podi_itm_cd = oitem.Sad_itm_cd;
                            oItemDel.Podi_itm_stus = oitem.Sad_itm_stus;
                            oItemDel.Podi_qty = oitem.Sad_qty;
                            oItemDel.Podi_bal_qty = oitem.Sad_qty;
                            oItemDel.Podi_remarks = string.Empty;
                            POItemsDels.Add(oItemDel);
                        }

                        _inventoryDAL.SaveNewPO(_PurchaseOrder);
                        foreach (PurchaseOrderDetail _POItems in POItems)
                        {
                            _inventoryDAL.SaveNewPOItem(_POItems);
                        }

                        foreach (PurchaseOrderDelivery _DelItems in POItemsDels)
                        {
                            _effect = _inventoryDAL.SaveNewPODel(_DelItems);
                        }


                    }
                    #endregion

                    Int16 resultPO = _inventoryDAL.UpdatePOStatusNew(_invoiceHeader.Sah_anal_4, "U", _invoiceHeader.Sah_com, -1, _invoiceHeader.Sah_cre_by);

                    if (_traList != null)
                    {
                        foreach (Transport item in _traList)
                        {
                            if (item.Slip_no_auto_gen)
                            {
                                if (item.MstAuto != null)
                                {
                                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(item.MstAuto.Aut_moduleid, item.MstAuto.Aut_direction, item.MstAuto.Aut_start_char, item.MstAuto.Aut_cate_tp,
                                        item.MstAuto.Aut_cate_cd, item.MstAuto.Aut_modify_dt, item.MstAuto.Aut_year).Aut_number;
                                    string _slipDocNo = _inventoryHeader.Ith_loc + "-" + item.Mbe_curr_slip_cd + "-" + "CO" + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                    _inventoryDAL.UpdateAutoNumber(item.MstAuto);
                                    item.Itrn_ref_no = _slipDocNo;
                                }
                            }
                            item.Itrn_ref_doc = _invNo;
                            item.Itrn_trns_no = _invHdr.Ith_entry_no;
                            _generalDAL.Save_Int_Transport(item);
                        }
                    }
                    //Add by Rukshan Update sales order qty
                    if (_invoiceHeader.Sah_ref_doc != "")
                    {
                        List<SalesOrderItems> SOITEM = new List<SalesOrderItems>();
                        foreach (InvoiceItem _itm in _invoiceItem)
                        {
                            //SalesOrderItems OBJ = new SalesOrderItems();
                            //OBJ.SOI_SO_NO = _invoiceHeader.Sah_ref_doc;
                            //SOITEM=_salesDAL.GETSOITEM(OBJ);
                            //decimal soQty = 0;
                            //if (SOITEM.Count > 0)
                            //{
                            //    soQty = SOITEM.Find(x => x.SOI_ITM_LINE == _itm.Sad_itm_line && x.SOI_ITM_CD== _itm.Sad_itm_cd).SOI_INV_QTY;
                            //}
                            //decimal qty = _itm.Sad_qty;
                            //if (qty > soQty)
                            //{
                            //    _error = "Sales order qty cannot be exceeded";
                            //    _effect = -1;
                            //}
                            if (_SoaList != null)
                            {
                                if (_invoiceHeader.Sah_update_so)
                                {
                                    bool _found = false;
                                    for (int i = 0; _SoaList.Count > i; i++)
                                    {
                                        string _soa = _SoaList[i].ToString();
                                        List<InventoryRequestItem> _ITM = new List<InventoryRequestItem>();
                                        _ITM = _salesDAL.GETSOA_ITM(_invoiceHeader.Sah_com, _invoiceHeader.Sah_ref_doc, _itm.Sad_itm_cd);
                                        if (_ITM.Count > 0)
                                        {
                                            _found = true;
                                        }
                                    }
                                    if (!_found)
                                    {
                                        _inventoryDAL.UpdateRequestItem2(_invoiceHeader.Sah_ref_doc, _itm.Sad_qty, _itm.Sad_itm_line);
                                    }
                                }
                            }
                            else
                            {

                            }
                            _salesDAL.UpdateSOinvoiceQty(_invoiceHeader.Sah_ref_doc, _itm.Sad_itm_line, _itm.Sad_itm_stus, _itm.Sad_itm_cd, _itm.Sad_qty);

                            if (_isDeliveryNow == true)
                            {
                                #region update item allocation data 10 Jan 2017
                                if (_invoiceHeader.Sah_allocation)
                                {

                                    InventoryRequest _tmpReqHdr = new InventoryRequest();
                                    InventoryRequestItem _tmpReqItm = new InventoryRequestItem();
                                    _tmpReqHdr.Itr_anal3 = _invoiceHeader.Sah_pc;
                                    _tmpReqHdr.Itr_com = _invoiceHeader.Sah_com;

                                    _tmpReqItm = new InventoryRequestItem();
                                    _tmpReqItm.Itri_itm_cd = _itm.Sad_itm_cd;
                                    _tmpReqItm.Itri_itm_stus = _itm.Sad_itm_stus;
                                    _tmpReqItm.Itri_qty = _itm.Sad_qty;
                                    Int32 _rr = UpdateItemAllocationDataFIFO(_inventoryDAL, _tmpReqItm, _tmpReqHdr);

                                }
                                #endregion
                            }
                        }

                        _salesDAL.Update_So_status(_invoiceHeader.Sah_com, _invoiceHeader.Sah_ref_doc);

                        if (string.IsNullOrEmpty(_error))
                        {
                            //Rukshan
                            if (_isDeliveryNow == false)
                            {
                                if (_SoaList != null)
                                {
                                    int generated_seq = _inventoryDAL.Generate_new_seq_num(_invoiceHeader.Sah_cre_by, "DO", 0, _invoiceHeader.Sah_com);
                                    ReptPickHeader _inputReptPickHeader = new ReptPickHeader();

                                    _inputReptPickHeader.Tuh_usrseq_no = generated_seq;
                                    _inputReptPickHeader.Tuh_usr_id = _invoiceHeader.Sah_cre_by;
                                    _inputReptPickHeader.Tuh_usr_com = _invoiceHeader.Sah_com;
                                    _inputReptPickHeader.Tuh_doc_tp = "DO";
                                    _inputReptPickHeader.Tuh_direct = false;
                                    _inputReptPickHeader.Tuh_ischek_itmstus = false;
                                    _inputReptPickHeader.Tuh_ischek_simitm = false;
                                    _inputReptPickHeader.Tuh_ischek_reqqty = false;
                                    _inputReptPickHeader.Tuh_doc_no = _invNo;
                                    //_inputReptPickHeader.Tuh_usr_loc = _invoiceHeader.;

                                    _inventoryRepDAL.SavePickedHeader(_inputReptPickHeader);

                                    if (_SoaList != null)
                                    {
                                        for (int i = 0; _SoaList.Count > i; i++)
                                        {
                                            string _soa = _SoaList[i].ToString();
                                            // int reptSeqNo = _pickSerial.Find(x=>x.Tus_base_doc_no==_soa).Tus_temp_seq;

                                            // if (_isDeliveryNow == true)
                                            // {
                                            // _salesDAL.Update_SoA_status(_invoiceHeader.Sah_com, _soa);//_invoiceHeader.Sah_soa
                                            // }
                                            // if (_pdabase) { _inventoryDAL.UPDATETEMP_DATA(_soa, _invNo); } 
                                        }
                                    }
                                    //Update temp pick ser
                                    if (_pickSerial != null)
                                    {
                                        foreach (ReptPickSerials _seri in _pickSerial)
                                        {

                                            _salesDAL.UpdatePickData(_invoiceHeader.Sah_com, _seri.Tus_temp_seq, null, _invNo, generated_seq);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                #region add by lakshan Update SOA Balance 04Oct2017
                                if (_invoiceHeader.IsSOAUpdate)
                                {
                                    if (_SoaList != null && _tmpSerListSOA.Count > 0)
                                    {
                                        var _tmpSoaItmList = _tmpSerListSOA.GroupBy(x => new { x.Tus_base_doc_no, x.Tus_base_itm_line }).Select(group => new
                                        {
                                            Peo = group.Key,
                                            theCount = group.Sum(o => o.Tus_qty)
                                        });
                                        if (_tmpSoaItmList != null)
                                        {
                                            foreach (var item in _tmpSoaItmList)
                                            {
                                                _inventoryDAL.UpdateRequestItemBalanceByBaseLine(item.Peo.Tus_base_doc_no, "", "", "", "", item.theCount, "", _invoiceHeader.Sah_mod_by, item.Peo.Tus_base_itm_line);
                                            }
                                        }
                                        var _tmpSoaHdr = _pickSerial.GroupBy(x => new { x.Tus_base_doc_no }).Select(group => new
                                        {
                                            Peo = group.Key,
                                            theCount = group.Sum(o => o.Tus_qty)
                                        });
                                        if (_tmpSoaHdr != null)
                                        {
                                            foreach (var item in _tmpSoaHdr)
                                            {
                                                _inventoryDAL.UpdateRequestHeaderAodOut(item.Peo.Tus_base_doc_no, _invoiceHeader.Sah_mod_by);
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (_SoaList != null)
                                    {
                                        for (int i = 0; _SoaList.Count > i; i++)
                                        {
                                            string _soa = _SoaList[i].ToString();
                                            // int reptSeqNo = _pickSerial.Find(x=>x.Tus_base_doc_no==_soa).Tus_temp_seq;

                                            // if (_isDeliveryNow == true)
                                            // {
                                            //_invoiceHeader.Sah_soa
                                            // }

                                            _salesDAL.Update_SoA_status(_invoiceHeader.Sah_com, _soa);
                                        }
                                    }
                                }
                                #endregion
                                if (_pickSerial.Count > 0)
                                {
                                    var _scanItems = _pickSerial.GroupBy(x => new { x.Tus_usrseq_no }).Select(group => new { Peo = group.Key, theCount = group.Count() });
                                    foreach (var itm in _scanItems)
                                    {
                                        if (itm.Peo.Tus_usrseq_no != 0)
                                        {
                                            _inventoryRepDAL.DeleteTempPickObjs(itm.Peo.Tus_usrseq_no);
                                        }
                                    }
                                }
                            }

                        }
                    }
                    if (_pdabase)
                    {
                        if (_SoaList != null)
                        {
                            for (int i = 0; _SoaList.Count > i; i++)
                            {
                                string _soa = _SoaList[i].ToString();
                                if (_pdabase)
                                {
                                    // _inventoryDAL.UPDATETEMP_DATA(_soa, _invNo);
                                }
                            }
                        }
                    }
                    #region add by lakshan 27Feb2018 update SOA data
                    if (_invoiceHeader.IsSOAUpdate)
                    {
                        if (_SoaList != null && _tmpSerListSOA.Count > 0)
                        {
                            for (int i = 0; _SoaList.Count > i; i++)
                            {
                                string _soa = _SoaList[i].ToString();
                                _inventoryDAL.UpdateRequestHeaderSoaInvNo(_soa, _invNo);
                            }
                        }
                    }
                    #endregion
                    _effect = 1;
                }
                else
                    _effect = -1;

                #region Update Credit card trans log
                //Akila 2017/10/11

                if (_transLog != null)
                {
                    Int16 _recordAffected = 0;
                    _transLog.Sctl_is_processed = 1;
                    _transLog.Sctl_trans_seq = _invoiceHeader.Sah_seq_no.ToString();
                    _transLog.Sctl_Inv_no = _invoiceHeader.Sah_inv_no;
                    _recordAffected = _salesDAL.UpdateCctTransLog(_transLog);
                    if (_recordAffected < 1)
                    {
                        throw new Exception("Couldn't save credit card transaction details !");
                    }

                }

                #endregion

                //updated by akila 2018/02/06
                #region Update event details
                if (_invoiceItem != null && _invoiceItem.Count > 0)
                {
                    if ((_eventList != null && _eventList.Count > 0) && (_eventItems != null && _eventItems.Count > 0))
                    {
                        //updated event hdr
                        foreach (EventRegistry _event in _eventList)
                        {
                            if (_event.SERE_UPDATE == 1)
                            {
                                _salesDAL.UpdateEventHdrStatus(_event);
                            }
                        }

                        //update event items
                        foreach (EventItems _items in _eventItems)
                        {
                            if (_items.IsSelected)
                            {
                                _salesDAL.UpdateEventItemQty(_items);

                                //update invoiced event item details
                                var _tmpInvItms = _invoiceItem.Where(x => x.Sad_itm_cd == _items.SERE_ITM_CD).ToList();
                                if (_tmpInvItms != null && _tmpInvItms.Count > 0)
                                {
                                    foreach (var _invItem in _tmpInvItms)
                                    {
                                        InvoicedEventItems _invoicedEventItm = new InvoicedEventItems();
                                        _invoicedEventItm.SERE_ID = _items.SERE_ID;
                                        _invoicedEventItm.SERE_COM = _invoiceHeader.Sah_com;
                                        _invoicedEventItm.SERE_CRE_BY = _invoiceHeader.Sah_cre_by;
                                        _invoicedEventItm.SERE_CRE_DT = DateTime.Now.Date;
                                        _invoicedEventItm.SERE_CRE_SESSION = _invoiceHeader.Sah_session_id;
                                        _invoicedEventItm.SERE_EVE_CD = _items.SERE_EVE_CD;
                                        _invoicedEventItm.SERE_EVEINVC_LINE = _invItem.Sad_itm_line;
                                        _invoicedEventItm.SERE_INVC_LINE = "1";
                                        _invoicedEventItm.SERE_INVC_NO = _invoiceHeader.Sah_inv_no;
                                        _invoicedEventItm.SERE_INVC_QTY = _items.SelectedQty;
                                        _invoicedEventItm.SERE_ITM_CD = _items.SERE_ITM_CD;
                                        _invoicedEventItm.SERE_LINE = _items.SERE_LINE;
                                        _invoicedEventItm.SERE_PC = _invoiceHeader.Sah_pc;
                                        _invoicedEventItm.SERE_IS_ACT = 1;
                                        _salesDAL.SaveInvoicedEventItems(_invoicedEventItm);
                                    }
                                }
                            }
                        }
                    }
                }

                #endregion

                try
                {
                    // _db = DataBase._ems; _salesDAL.ConnectionClose(); _db = DataBase._ems; _inventoryDAL.ConnectionClose(); _db = DataBase._fms; _fmsInventoryDal.ConnectionClose(); _db = DataBase._reportdb; _inventoryRepDAL.ConnectionClose(); _db = DataBase._ems; _generalDAL.ConnectionClose();
                    if (string.IsNullOrEmpty(_error))
                    {


                        _db = DataBase._ems;
                        _salesDAL.TransactionCommit();
                        _db = DataBase._ems;
                        _inventoryDAL.TransactionCommit();
                        _db = DataBase._fms;
                        _fmsInventoryDal.TransactionCommit();
                        _db = DataBase._reportdb;
                        _inventoryRepDAL.TransactionCommit();
                        _db = DataBase._ems; _generalDAL.TransactionCommit();
                        _inventoryDAL.UpdateInvoiceDOStatus(_invNo);

                        _isInvoiced = true;

                        _db = DataBase._ems; _salesDAL.TransactionCommit();
                        _db = DataBase._ems; _inventoryDAL.TransactionCommit();
                        _db = DataBase._fms; _fmsInventoryDal.TransactionCommit();
                        _db = DataBase._reportdb; _inventoryRepDAL.TransactionCommit();
                        _db = DataBase._ems; _generalDAL.TransactionCommit();

                        _inventoryDAL.UpdateInvoiceDOStatus(_invNo);
                        //cus code update
                        if (_auto != null)
                        {
                            _inventoryDAL.UpdateAutoNumber(_auto);
                        }
                    }
                    else
                    {
                        _effect = -1;
                        _salesDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        _fmsInventoryDal.TransactionRollback();
                        _inventoryRepDAL.TransactionRollback();
                        _generalDAL.TransactionRollback();
                    }
                }
                catch (Exception ex)
                { _invoiceNo = string.Empty; _receiptNo = string.Empty; _deliveryOrder = string.Empty; _errorlist = "Database" + _db + " is not responding. Please contact IT Operation.\n" + ex.Message; BuyBackInvNo = string.Empty; _effect = -1; return _effect; }

                //  if (_effect == 1) _tr.Complete();
                //}
            }
            catch (Exception ex)
            {
                _error = ex.Message.ToString();
                _invoiceNo = string.Empty;
                _receiptNo = string.Empty;
                _deliveryOrder = string.Empty;
                _errorlist = _error;
                BuyBackInvNo = string.Empty;
                _effect = -1;

                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
            }

            _invoiceNo = _invNo;
            _receiptNo = _recNo;
            _deliveryOrder = _DONo;
            _errorlist = _error;
            BuyBackInvNo = _buybackinv;
            return _effect;
        }

        public Int32 SaveInvoiceDuplicateWithTransactionRegistration(InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, List<InvoiceSerial> _invoiceSerial,
            RecieptHeader _recieptHeader, List<RecieptItem> _recieptItem, InventoryHeader _inventoryHeader, List<ReptPickSerials> _pickSerial,
            List<ReptPickSerialsSub> _pickSubSerial, MasterAutoNumber _invoiceAuto, MasterAutoNumber _recieptAuto, MasterAutoNumber _inventoryAuto,
            bool _isDeliveryNow, out  string _invoiceNo, out string _receiptNo, out string _deliveryOrder, MasterBusinessEntity _businessCompany, bool _isHold,
            bool _isHoldInvoiceProcess, out string _errorlist, List<InvoiceVoucher> _voucher, InventoryHeader _buybackheader, MasterAutoNumber _buybackauto,
            List<ReptPickSerials> _buybacklist, out string BuyBackInvNo, RecieptHeader _regReciept, MasterAutoNumber _recAuto, List<VehicalRegistration> _regList,
            List<RecieptItem> _regRecList, ReptPickHeader _SerHeader, out string _registration, ref bool _isInvoiced, List<Transport> _traList = null, CctTransLog _transLog = null)
        {
            string _invNo = string.Empty;
            string _recNo = string.Empty;
            string _DONo = string.Empty;
            string _buybackinv = string.Empty;
            Int32 _effect = 0;
            string _location = string.Empty;
            string _error = string.Empty;
            string _db = string.Empty;
            MasterAutoNumber _auto = null;
            string _regRec = "";
            string _itmDetails = "";
            _isInvoiced = false;
            int cusdummyseq = 0;

            //using (TransactionScope _tr = new TransactionScope(TransactionScopeOption.RequiresNew))
            // {
            try
            {
                // try
                //  {
                _db = DataBase._ems; _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _db = DataBase._ems; _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _db = DataBase._fms; _fmsInventoryDal = new FMS_InventoryDAL(); _fmsInventoryDal.ConnectionOpen();
                _fmsInventoryDal.BeginTransaction();
                _db = DataBase._reportdb; _inventoryRepDAL = new ReptCommonDAL(); _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _db = DataBase._ems; _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();
                //  }
                //   catch { _invoiceNo = string.Empty; _receiptNo = string.Empty; _deliveryOrder = string.Empty; _errorlist = "Database" + _db + " is not responding. Please contact IT Operation."; BuyBackInvNo = _buybackinv; _effect = -1; return _effect; }

                //Transaction tx = Transaction.Current;
                //_salesDAL.EnlistTransaction(tx);
                //_inventoryDAL.EnlistTransaction(tx);
                //_fmsInventoryDal.EnlistTransaction(tx);
                //// _inventoryRepDAL.EnlistTransaction(tx);
                //_generalDAL.EnlistTransaction(tx);

                _db = string.Empty;
                _location = (_inventoryHeader != null && !string.IsNullOrEmpty(_inventoryHeader.Ith_com)) ? _inventoryHeader.Ith_loc : string.Empty;
                string _recieptSeq = null;
                string _invoiceSeq = null;
                InventoryHeader _invHdr = null;
                DataTable _dataTable = null;
                _registration = "";
                CommonSaveInvoiceWithDeliveryOrderWithTransaction(_invoiceHeader, _invoiceItem, _invoiceSerial, _recieptHeader, _recieptItem, _inventoryHeader, _pickSerial, _pickSubSerial, _invoiceAuto, _recieptAuto, _inventoryAuto, _isDeliveryNow, out _invNo, out _recNo, out _DONo, _inventoryDAL, _salesDAL, _inventoryRepDAL, _isHold, _isHoldInvoiceProcess, out _error, false, out _invoiceSeq, out _recieptSeq, out _invHdr, out _dataTable);
                if (_effect != -1)
                {
                    if (_traList != null)
                    {
                        foreach (Transport item in _traList)
                        {
                            if (item.Slip_no_auto_gen)
                            {
                                if (item.MstAuto != null)
                                {
                                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(item.MstAuto.Aut_moduleid, item.MstAuto.Aut_direction, item.MstAuto.Aut_start_char, item.MstAuto.Aut_cate_tp,
                                        item.MstAuto.Aut_cate_cd, item.MstAuto.Aut_modify_dt, item.MstAuto.Aut_year).Aut_number;
                                    string _slipDocNo = _inventoryHeader.Ith_loc + "-" + item.Mbe_curr_slip_cd + "-" + "CO" + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                    _inventoryDAL.UpdateAutoNumber(item.MstAuto);
                                    item.Itrn_ref_no = _slipDocNo;
                                }
                            }
                            item.Itrn_ref_doc = _inventoryHeader.Ith_doc_no;
                            item.Itrn_trns_no = _inventoryHeader.Ith_entry_no;
                            _generalDAL.Save_Int_Transport(item);
                        }
                    }
                }
                //update invoice discount

                foreach (InvoiceItem _itm in _invoiceItem)
                {

                    if (_itm.Sad_dis_type == "P")
                        _salesDAL.UpdateDiscountUsedTimes(_itm.Sad_dis_seq, 1);
                }

                //end


                string _cusNo = _invoiceHeader.Sah_cus_cd;
                if (string.IsNullOrEmpty(_error))
                {

                    #region Customer Creation
                    if (_invoiceHeader.Sah_cus_cd == "CASH" && (_businessCompany.Mbe_nic != null || _businessCompany.Mbe_mob != null))
                    {
                        MasterBusinessEntity _nic = _salesDAL.GetActiveBusinessCompanyDetail(_invoiceHeader.Sah_com, string.Empty, _businessCompany.Mbe_nic, string.Empty, "C");
                        MasterBusinessEntity _mobile = _salesDAL.GetActiveBusinessCompanyDetail(_invoiceHeader.Sah_com, string.Empty, string.Empty, _businessCompany.Mbe_mob, "C");
                        if (_nic.Mbe_cd == null && _mobile.Mbe_cd == null)
                        {
                            //new customer
                            _auto = new MasterAutoNumber();
                            _auto.Aut_cate_cd = string.Empty;
                            _auto.Aut_cate_tp = string.Empty;
                            _auto.Aut_moduleid = "CUS";
                            _auto.Aut_number = 0;
                            // _auto.Aut_start_char = "CONT";
                            _auto.Aut_start_char = "XXX";

                        nxt1:
                            _auto.Aut_year = null;
                            //   MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);

                            //MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                            //_cusNo = _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);

                            //Tharindu 2018-05-09 due to the concurrency add oracle seq no
                            cusdummyseq = _salesDAL.GetCusCreationDummyNo();
                            _cusNo = _auto.Aut_start_char + "-" + cusdummyseq.ToString("000000", CultureInfo.InvariantCulture);

                            if (_salesDAL.CheckSalesNo("sp_getcustomer", "p_customer", _cusNo) == 1)
                            {
                                goto nxt1;
                            }
                            _businessCompany.Mbe_cd = _cusNo;
                            _salesDAL.SaveBusinessEntityDetail(_businessCompany);
                            _salesDAL.UpdateInvoiceforNewCustomer(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_seq_no, _cusNo);
                            _salesDAL.UpdateInventoryCustomer(_inventoryHeader.Ith_seq_no, _cusNo);
                        }

                    }
                    #endregion



                    #region registration process

                    int seq = _inventoryDAL.GetSerialID();
                    string _recieptNo = seq.ToString();
                    _regReciept.Sar_seq_no = seq;
                    _regReciept.Sar_receipt_no = _recieptNo;
                    _salesDAL.SaveReceiptHeader(_regReciept);

                    if (_regRecList != null)
                    {
                        int line = 1;
                        foreach (RecieptItem _ReceiptDetails in _regRecList)
                        {
                            _ReceiptDetails.Sard_line_no = line++;
                            _ReceiptDetails.Sard_seq_no = seq;
                            _ReceiptDetails.Sard_receipt_no = _recieptNo;
                            _salesDAL.SaveReceiptItem(_ReceiptDetails);
                        }
                    }



                    #endregion


                    #region update auto no

                    if (!_isHold)
                    {
                    nxt1:
                        _invoiceAuto.Aut_year = null;
                        MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
                        _invNo = _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                        _invoiceAuto.Aut_year = null;
                        _invoiceAuto.Aut_modify_dt = null;
                        if (_salesDAL.CheckSalesNo("sp_getinvno", "p_inv_no", _invNo) == 1)
                        {
                            _salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
                            goto nxt1;
                        }

                        #region Buyback Item
                        if (_buybacklist != null) if (_buybacklist.Count > 0)
                            {
                                InventoryBLL _bll = new InventoryBLL();
                                _bll._salesDAL = _salesDAL;
                                _bll._inventoryDAL = _inventoryDAL;
                                _bll._FMSinventoryDAL = _fmsInventoryDal;
                                _bll._inventoryRepDAL = _inventoryRepDAL;
                                _buybackheader.Ith_manual_ref = _invNo;
                                _bll.SaveInwardScanSerial(_buybackheader, _buybacklist, null);
                                _bll.UpdateInventoryAutoNumber(_buybackheader, _buybackauto, "+", out  _buybackinv);
                                _inventoryDAL.UpdateMovementDocNo_Other(_buybackheader.Ith_seq_no, _buybackinv);
                            }
                        #endregion

                        #region Save/Update Voucher
                        if (_voucher != null)
                            if (_voucher.Count > 0)
                            {
                                _voucher.ForEach(x => x.Stvo_inv_no = _invNo);
                                UpdateInvoiceGiftVoucher(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _cusNo, _invoiceHeader.Sah_cus_name, _invoiceHeader.Sah_d_cust_add1, _invoiceHeader.Sah_d_cust_add2, _businessCompany.Mbe_mob, _invoiceHeader.Sah_dt, _invNo, _invoiceHeader.Sah_cre_by, _voucher, _salesDAL, _fmsInventoryDal);
                            }
                        #endregion

                        _salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
                        _salesDAL.UpdateInvoiceWithTaxCommission(_invNo, string.Empty, Convert.ToInt32(_invoiceSeq), Convert.ToInt32(_recieptSeq));
                        //string RecieptNo = "";
                        if (_recieptAuto != null)
                        {
                        nxt2:
                            _recieptAuto.Aut_year = null;
                            MasterAutoNumber RecieptAuto = _inventoryDAL.GetAutoNumber(_recieptAuto.Aut_moduleid, _recieptAuto.Aut_direction, _recieptAuto.Aut_start_char, _recieptAuto.Aut_cate_tp, _recieptAuto.Aut_cate_cd, _recieptAuto.Aut_modify_dt, _recieptAuto.Aut_year);
                            _recNo = _recieptAuto.Aut_cate_cd + "-" + RecieptAuto.Aut_start_char + RecieptAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                            _recieptAuto.Aut_year = null;
                            _recieptAuto.Aut_modify_dt = null;
                            _recNo = _recieptNo;

                            if (_salesDAL.CheckSalesNo("sp_getreceiptno", "p_rept_no", _recNo) == 1)
                            {
                                _salesDAL.UpdateInvoiceAutoNumber(_recieptAuto);
                                goto nxt2;
                            }
                            //_invDAL.UpdateAutoNumber(_recieptAuto);

                            _salesDAL.UpdateInvoiceAutoNumber(_recieptAuto);
                        }
                        _salesDAL.UpdateReceipt(_invNo, _recNo, Convert.ToInt32(_invoiceSeq), Convert.ToInt32(_recieptSeq));
                        //Update receipt no which allocated by receipt entry as per invoice
                        _inventoryRepDAL.UpdateAdvanceReceiptNofromInvoice(string.Empty, Convert.ToString(_invoiceSeq), _invNo);

                        if (_isDeliveryNow)
                        {
                            // string _doc;
                            _inventoryDAL.UpdateInventoryAutoNumber(_invHdr, _inventoryAuto, "-", out _DONo);
                            MasterAutoNumber _AutoNo = new MasterAutoNumber();
                            int _e = 0;
                            if (_dataTable.Rows.Count > 0)
                            {
                                for (int i = 0; i < _dataTable.Rows.Count; i++)
                                {
                                    if (_dataTable.Rows[i]["DocType"].ToString() == "ADJ")
                                    {
                                        _AutoNo.Aut_cate_cd = _invHdr.Ith_loc;
                                        _AutoNo.Aut_moduleid = "ADJ";
                                        _AutoNo.Aut_direction = null;
                                        _AutoNo.Aut_start_char = "ADJ";
                                        _AutoNo.Aut_cate_tp = "LOC";
                                        //_AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;
                                        _AutoNo.Aut_year = null;

                                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                        string _documentNo = _invHdr.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_invHdr.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                        _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                        _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                    }
                                    else if (_dataTable.Rows[i]["DocType"].ToString() == "GRN")
                                    {
                                        _AutoNo.Aut_cate_cd = _invHdr.Ith_loc;
                                        _AutoNo.Aut_moduleid = "GRN";
                                        _AutoNo.Aut_direction = null;
                                        _AutoNo.Aut_start_char = "GRN";
                                        _AutoNo.Aut_cate_tp = "LOC";
                                        //_AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;
                                        _AutoNo.Aut_year = _invHdr.Ith_doc_date.Year;

                                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                        string _documentNo = _invHdr.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_invHdr.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                        _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                        _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                    }
                                    else if (_dataTable.Rows[i]["DocType"].ToString() == "PO")
                                    {
                                        //_AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_com;
                                        //_AutoNo.Aut_moduleid = "PO_LOCAL";
                                        //_AutoNo.Aut_direction = null;
                                        //_AutoNo.Aut_start_char = "PO";
                                        //_AutoNo.Aut_cate_tp = "COM";
                                        //_AutoNo.Aut_year = null;

                                        _AutoNo.Aut_cate_cd = _invHdr.Ith_com;
                                        _AutoNo.Aut_cate_tp = "COM";
                                        _AutoNo.Aut_direction = null;
                                        _AutoNo.Aut_modify_dt = null;
                                        _AutoNo.Aut_moduleid = "PUR";
                                        _AutoNo.Aut_start_char = "PUR";
                                        _AutoNo.Aut_year = null;

                                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                        string _documentNo = _AutoNo.Aut_cate_cd + "-" + _AutoNo.Aut_start_char + string.Format("{0:000000}", _autoNo);
                                        _inventoryDAL.UpdatePODocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                        _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                        _inventoryDAL.UpdateGRNPODocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                    }
                                }
                            }

                            //update inv no
                            _inventoryDAL.UpdateOtherDocuments(_DONo, _invNo);
                            _inventoryDAL.UpdateBatchRefDoc(_DONo, _invNo);
                        }

                    }
                    #endregion

                    #region registration
                    Int32 _temNo = _inventoryDAL.GetAutoNumber(_recAuto.Aut_moduleid, _recAuto.Aut_direction, _recAuto.Aut_start_char, _recAuto.Aut_cate_tp, _recAuto.Aut_cate_cd, _recAuto.Aut_modify_dt, _recAuto.Aut_year).Aut_number;
                    _regRec = _recAuto.Aut_cate_cd + _recAuto.Aut_start_char + string.Format("{0:0000}", _temNo);
                    _inventoryDAL.UpdateAutoNumber(_recAuto);

                    //_salesDAL.UpdateInvoiceReceipts("-1", _documentNo, -1, _NewReceipt.Sar_seq_no);
                    _salesDAL.UpdateReceipt(_invNo, _regRec, Convert.ToInt32(_invoiceSeq), _regReciept.Sar_seq_no);

                    _registration = _regRec;
                    if (_regList != null)
                    {
                        _itmDetails = "";
                        foreach (VehicalRegistration _reg in _regList)
                        {
                            string _refNo = _salesDAL.GetInsuRefBySerial(_reg.P_svrt_inv_no, _reg.P_svrt_chassis, _reg.P_svrt_engine, _reg.P_srvt_itm_cd);
                            _reg.P_seq = _inventoryDAL.GetSerialID();
                            _reg.P_srvt_ref_no = _regRec;
                            if (_itmDetails == "")
                            {
                                _itmDetails = " Engine & chassis :" + _reg.P_svrt_engine + "," + _reg.P_svrt_chassis;
                            }
                            else
                            {
                                _itmDetails = "," + _itmDetails + _reg.P_svrt_engine + "," + _reg.P_svrt_chassis;
                            }
                            _reg.P_svrt_inv_no = _invNo;
                            _reg.P_srvt_insu_ref = _refNo;
                            _salesDAL.SaveVehRegistration(_reg);
                        }
                        /*
                        //send SMS 
                        List<MsgInformation> _msg = _generalDAL.GetMsgInformation(_regReciept.Sar_com_cd, _regReciept.Sar_profit_center_cd, _regReciept.Sar_receipt_type);

                        if (_msg != null)
                            if (_msg.Count > 0)
                            {
                                foreach (MsgInformation _info in _msg)
                                {
                                    string _mg = "Vehicle registration receipt generated. Rec. # " + _regRec + _invNo + _itmDetails + " - SCM2 -";
                                    OutSMS _out = new OutSMS();
                                    _out.Msg = _mg;
                                    _out.Msgstatus = 0;
                                    _out.Msgtype = _info.Mmi_msg_tp;
                                    _out.Receivedtime = DateTime.Now;
                                    _out.Receiver = _info.Mmi_receiver;
                                    _out.Receiverphno = _info.Mmi_mobi_no;
                                    _out.Refdocno = _regRec;
                                    _out.Sender = _regReciept.Sar_create_by;
                                    _out.Createtime = DateTime.Now;
                                    _generalDAL.SaveSMSOut(_out);

                                }
                            }

                        
                        //send mail
                        List<MsgInformation> _mail = _generalDAL.GetMsgInformation(_regReciept.Sar_com_cd, null, _regReciept.Sar_receipt_type);
                        if (_mail != null)
                            if (_mail.Count > 0)
                            {
                                foreach (MsgInformation _info in _mail)
                                {
                                    SmtpClient smtpClient = new SmtpClient();
                                    MailMessage message = new MailMessage();

                                    MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                                    smtpClient.Host = _generalDAL.GetMailHost();
                                    smtpClient.Port = 25;
                                    message.From = fromAddress;

                                    string _email = "";

                                    _email = "Dear Sir/Madam, \n\n" + _email;
                                    _email += "Vehicle registration receipt generated for the profit center :" + _regReciept.Sar_profit_center_cd + " \n";
                                    _email += "\n  Receipt # : " + _regRec + "\n";
                                    _email += "\n " + _invNo + "\n";
                                    _email += "\n  Customer : " + _businessCompany.Mbe_name + "\n";
                                    _email += "\n  Address : " + _businessCompany.Mbe_add1 + _businessCompany.Mbe_add2 + "\n";
                                    _email += "\n  contact # : " + _businessCompany.Mbe_contact + "\n";
                                    _email += "\n  District : " + _businessCompany.Mbe_distric_cd + "\n";
                                    _email += "\n  Province : " + _businessCompany.Mbe_province_cd + "\n";

                                    foreach (VehicalRegistration _reg in _regList)
                                    {
                                        _itmDetails = "";
                                        _itmDetails = "Item & Model : " + _reg.P_srvt_itm_cd + "-" + _reg.P_svrt_model + " -  Engine & chassis :" + _reg.P_svrt_engine + " / " + _reg.P_svrt_chassis;
                                        _email += "\n " + _itmDetails + " \n";
                                    }



                                    _email += _generalDAL.GetMailFooterMsg();

                                    message.To.Add(_info.Mmi_email);
                                    message.Subject = "Vehicle Registration Receipt";
                                    //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                                    //message.Bcc.Add(new MailAddress(""));
                                    message.IsBodyHtml = false;
                                    message.Body = _email;
                                    message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                                    // Send SMTP mail
                                    smtpClient.Send(message);
                                }
                            }
                        */
                    }

                    //need resrve item if not do
                    if (!_isDeliveryNow)
                    {

                        _SerHeader.Tuh_usrseq_no = _inventoryDAL.GetSerialID();
                        _SerHeader.Tuh_doc_no = _invNo;

                        //Generate pick header header
                        _inventoryRepDAL.SavePickedHeader(_SerHeader);


                        if (_pickSerial != null)
                        {
                            foreach (ReptPickSerials _list in _pickSerial)
                            {
                                //_lineNo = _lineNo + 1;
                                _list.Tus_usrseq_no = _SerHeader.Tuh_usrseq_no;
                                _list.Tus_base_doc_no = _SerHeader.Tuh_doc_no;


                                _inventoryRepDAL.SavePickedItemSerials(_list);
                                _inventoryDAL.Update_serial_status(_list.Tus_com, _list.Tus_loc, _list.Tus_itm_cd, _list.Tus_ser_1, -1, _list.Tus_seq_no);


                            }
                        }
                    }
                    #endregion



                    #region Update Manual Doc
                    if (_invoiceHeader.Sah_manual)
                    {
                        MasterCompany _masterComp = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com);  //kapila 27/4/2016
                        if (_masterComp.MC_IS_SCM2_FMS == 1)
                            _inventoryDAL.UpdateManualDocNo(_location, "MDOC_INV", Convert.ToInt32(_invoiceHeader.Sah_man_ref), _invNo);
                        else
                            _fmsInventoryDal.UpdateManualDocNo(_location, "MDOC_INV", Convert.ToInt32(_invoiceHeader.Sah_man_ref), _invNo);
                    }
                    #endregion
                    _effect = 1;
                }
                else
                    _effect = -1;

                #region Update Credit card trans log
                //Akila 2017/10/11

                if (_transLog != null)
                {
                    Int16 _recordAffected = 0;
                    _transLog.Sctl_is_processed = 1;
                    _transLog.Sctl_trans_seq = _invoiceHeader.Sah_seq_no.ToString();
                    _transLog.Sctl_Inv_no = _invoiceHeader.Sah_inv_no;
                    _recordAffected = _salesDAL.UpdateCctTransLog(_transLog);
                    if (_recordAffected < 1)
                    {
                        throw new Exception("Couldn't save credit card transaction details !");
                    }

                }

                #endregion

                try
                {
                    // _db = DataBase._ems; _salesDAL.ConnectionClose(); _db = DataBase._ems; _inventoryDAL.ConnectionClose(); _db = DataBase._fms; _fmsInventoryDal.ConnectionClose(); _db = DataBase._reportdb; _inventoryRepDAL.ConnectionClose(); _db = DataBase._ems; _generalDAL.ConnectionClose();
                    if (string.IsNullOrEmpty(_error))
                    {
                        // Tharidnud update commit time due to concurrency
                        //MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                        //string _cusNo1 = _auto.Aut_start_char + "-" + _auto.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        //int effet = _salesDAL.UpdateCusCode(_cusNo, _cusNo1);

                        _db = DataBase._ems;
                        _salesDAL.TransactionCommit();
                        _db = DataBase._ems;
                        _inventoryDAL.TransactionCommit();
                        _db = DataBase._fms;
                        _fmsInventoryDal.TransactionCommit();
                        _db = DataBase._reportdb;
                        _inventoryRepDAL.TransactionCommit();
                        _db = DataBase._ems;
                        _generalDAL.TransactionCommit();

                        _isInvoiced = true;

                        _inventoryDAL.UpdateInvoiceDOStatus(_invNo);
                        if (_auto != null)
                        {
                            _inventoryDAL.UpdateAutoNumber(_auto);
                        }
                        //mail and msg send process
                        if (_regList != null)
                        {
                            //send SMS 
                            List<MsgInformation> _msg = _generalDAL.GetMsgInformation(_regReciept.Sar_com_cd, _regReciept.Sar_profit_center_cd, _regReciept.Sar_receipt_type);

                            if (_msg != null)
                                if (_msg.Count > 0)
                                {
                                    foreach (MsgInformation _info in _msg)
                                    {
                                        string _mg = "Vehicle registration receipt generated. Rec. # " + _regRec + _invNo + _itmDetails + " - SCM2 -";
                                        OutSMS _out = new OutSMS();
                                        _out.Msg = _mg;
                                        _out.Msgstatus = 0;
                                        _out.Msgtype = _info.Mmi_msg_tp;
                                        _out.Receivedtime = DateTime.Now;
                                        _out.Receiver = _info.Mmi_receiver;
                                        //_out.Receiverphno = _info.Mmi_mobi_no; //Edit by Chamal 31-Mar-2015
                                        _out.Senderphno = _info.Mmi_mobi_no;
                                        _out.Refdocno = _regRec;
                                        _out.Sender = _regReciept.Sar_create_by;
                                        _out.Createtime = DateTime.Now;
                                        _generalDAL.SaveSMSOut(_out);

                                    }
                                }


                            //send mail
                            List<MsgInformation> _mail = _generalDAL.GetMsgInformation(_regReciept.Sar_com_cd, null, _regReciept.Sar_receipt_type);
                            if (_mail != null)
                                if (_mail.Count > 0)
                                {
                                    foreach (MsgInformation _info in _mail)
                                    {
                                        SmtpClient smtpClient = new SmtpClient();
                                        MailMessage message = new MailMessage();

                                        MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                                        smtpClient.Host = _generalDAL.GetMailHost();
                                        smtpClient.Port = 25;
                                        message.From = fromAddress;

                                        string _email = "";

                                        _email = "Dear Sir/Madam, \n\n" + _email;
                                        _email += "Vehicle registration receipt generated for the profit center :" + _regReciept.Sar_profit_center_cd + " \n";
                                        _email += "\n  Receipt # : " + _regRec + "\n";
                                        _email += "\n " + _invNo + "\n";
                                        _email += "\n  Customer : " + _businessCompany.Mbe_name + "\n";
                                        _email += "\n  Address : " + _businessCompany.Mbe_add1 + _businessCompany.Mbe_add2 + "\n";
                                        _email += "\n  contact # : " + _businessCompany.Mbe_contact + "\n";
                                        _email += "\n  District : " + _businessCompany.Mbe_distric_cd + "\n";
                                        _email += "\n  Province : " + _businessCompany.Mbe_province_cd + "\n";

                                        foreach (VehicalRegistration _reg in _regList)
                                        {
                                            _itmDetails = "";
                                            _itmDetails = "Item & Model : " + _reg.P_srvt_itm_cd + "-" + _reg.P_svrt_model + " -  Engine & chassis :" + _reg.P_svrt_engine + " / " + _reg.P_svrt_chassis;
                                            _email += "\n " + _itmDetails + " \n";
                                        }

                                        _email += _generalDAL.GetMailFooterMsg();

                                        message.To.Add(_info.Mmi_email);
                                        message.Subject = "Vehicle Registration Receipt";
                                        //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                                        //message.Bcc.Add(new MailAddress(""));
                                        message.IsBodyHtml = false;
                                        message.Body = _email;
                                        message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                                        // Send SMTP mail
                                        smtpClient.Send(message);
                                    }
                                }
                        }
                    }
                    else
                    {
                        _salesDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        _fmsInventoryDal.TransactionRollback();
                        _inventoryRepDAL.TransactionRollback();
                        _generalDAL.TransactionRollback();
                    }
                }
                catch
                { _invoiceNo = string.Empty; _receiptNo = string.Empty; _deliveryOrder = string.Empty; _errorlist = "Database" + _db + " is not responding. Please contact IT Operation."; BuyBackInvNo = string.Empty; _effect = -1; return _effect; }

                //  if (_effect == 1) _tr.Complete();
                //}
            }
            catch (Exception ex)
            {
                _invoiceNo = string.Empty;
                _receiptNo = string.Empty;
                _deliveryOrder = string.Empty;
                _error = ex.Message;
                BuyBackInvNo = string.Empty;
                _registration = "";
                _effect = -1;

                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
            }

            _invoiceNo = _invNo;
            _receiptNo = _recNo;
            _deliveryOrder = _DONo;

            _errorlist = _error;
            BuyBackInvNo = _buybackinv;

            return _effect;
        }

        #endregion

        //written by darshana - 19-09-2012 - create receipt refund entry
        public Int32 CreateRefund(RecieptHeader _refundHdr, List<RecieptItem> _refundItm, MasterAutoNumber _receiptAuto, List<ReceiptItemDetails> _resItmDet, RemitanceSummaryDetail _remsumdet, out string _refNo)
        {
            Int32 _effect = 0;
            string _refundNo = "";
            Int32 _refundSeq = 0;
            string _invNo = "";
            string _cusNo = "";
            int X = 0;

            // using (TransactionScope _tr = new TransactionScope())
            try
            {
                _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen(); _salesDAL.BeginTransaction();
                _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen(); _inventoryDAL.BeginTransaction();
                _inventoryRepDAL = new ReptCommonDAL(); _inventoryRepDAL.ConnectionOpen(); _inventoryRepDAL.BeginTransaction();
                _financialDAL = new FinancialDAL(); _financialDAL.ConnectionOpen(); _financialDAL.BeginTransaction();
                _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen(); _generalDAL.BeginTransaction();

                MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_receiptAuto.Aut_moduleid, _receiptAuto.Aut_direction, _receiptAuto.Aut_start_char, _receiptAuto.Aut_cate_tp, _receiptAuto.Aut_cate_cd, _receiptAuto.Aut_modify_dt, _receiptAuto.Aut_year);
                // _receiptAuto.Aut_cate_cd + "-" + _receiptAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                _cusNo = _receiptAuto.Aut_cate_cd + _receiptAuto.Aut_start_char + string.Format("{0:0000}", _number.Aut_number);
                _inventoryDAL.UpdateAutoNumber(_receiptAuto);//update MST_AUTO table

                //_inventoryDAL.UpdateAutoNumber(_receiptAuto);//update MST_AUTO table
                _refundHdr.Sar_ref_doc = _refundHdr.Sar_receipt_no;
                _refundHdr.Sar_receipt_no = _cusNo;

                Int32 RecieptSeqNo = 0;
                RecieptSeqNo = _inventoryDAL.GetSerialID();

                _refundHdr.Sar_seq_no = RecieptSeqNo;

                _effect = _salesDAL.SaveReceiptHeader(_refundHdr);//save receipt header

                foreach (RecieptItem _itm in _refundItm)
                {
                    _itm.Sard_seq_no = RecieptSeqNo;
                    _itm.Sard_receipt_no = _refundHdr.Sar_receipt_no;
                    _salesDAL.SaveReceiptItem(_itm);
                }

                if (_resItmDet != null)
                {
                    //Added by Prabhath on 14/12/2013 **** start *****
                    List<ReptPickSerials> _ser = _inventoryRepDAL.GetInvoiceAdvanceReceiptSerial(_refundHdr.Sar_com_cd, _refundHdr.Sar_ref_doc);
                    DataTable _availableser;
                    if (_ser != null && _ser.Count > 0)
                    {
                        foreach (ReptPickSerials _s in _ser)
                        {
                            _availableser = new DataTable();
                            _availableser = _inventoryDAL.check_IsItemAvailable(_s.Tus_itm_cd, _s.Tus_ser_1);

                            if (_availableser.Rows.Count > 0)
                            {
                                _inventoryDAL.UpdateLocationResRevers(_s.Tus_com, _s.Tus_loc, _s.Tus_itm_cd, _s.Tus_itm_stus, _s.Tus_cre_by, _s.Tus_qty);
                                //Added by Prabhath on 14/12/2013 **** end *****

                                foreach (ReceiptItemDetails res in _resItmDet)
                                {
                                    _inventoryRepDAL.DeleteResSerial(res.Sari_rec_no, _refundHdr.Sar_com_cd, res.Sari_item, res.Sari_serial, res.Sari_serial_1);
                                    _salesDAL.UpdateRegResAvailability(_refundHdr.Sar_com_cd, res.Sari_item, res.Sari_serial, res.Sari_serial_1, 1);
                                    _invNo = res.Sari_rec_no;

                                    List<ReptPickSerials> tempSer = new List<ReptPickSerials>();
                                    tempSer = _inventoryRepDAL.Get_TEMP_PICK_SER_BY_BASEDOC(_refundHdr.Sar_com_cd, _invNo);

                                    if (tempSer == null)
                                    {
                                        _inventoryRepDAL.DeleteResHdr(_refundHdr.Sar_com_cd, _invNo);
                                    }
                                }
                            }
                        }
                    }
                }

                if (_remsumdet != null)
                    X = _financialDAL.SaveRemSummaryDetails(_remsumdet);

                _effect = _salesDAL.UpdateRefundDetails(_refundHdr.Sar_tot_settle_amt, _refundHdr.Sar_receipt_no, _refundHdr.Sar_ref_doc, _refundHdr.Sar_com_cd, _refundHdr.Sar_profit_center_cd);

                if (_refundHdr.Sar_receipt_type == "INSRF")
                {
                    List<VehicleInsuarance> _insuDet = _generalDAL.GetVehicalInsurance(_refundHdr.Sar_ref_doc, null);
                    if (_insuDet.Count > 0)
                    {
                        foreach (VehicleInsuarance _tmp in _insuDet)
                        {
                            _salesDAL.UpdateInsTxnCan(_tmp.Svit_com, _tmp.Svit_pc, _tmp.Svit_inv_no, _tmp.Svit_ref_no, _tmp.Svit_itm_cd, _tmp.Svit_engine, _tmp.Svit_chassis, 2);
                            if (!string.IsNullOrEmpty(_tmp.Svit_engine) && _tmp.Svit_engine != "N/A")
                            {
                                _salesDAL.UpdateAddWarr(_tmp.Svit_itm_cd, _tmp.Svit_engine, 0, null, _refundHdr.Sar_receipt_date, _refundHdr.Sar_receipt_no);
                            }
                        }
                    }

                }
                if (_refundHdr.Sar_receipt_type == "ADREF")
                {
                    foreach (ReceiptItemDetails res in _resItmDet)
                    {// Nadeeka 11-11-2015
                        _inventoryRepDAL.UpdateitemAllocation(res.Sari_item, 1, 0);
                    }
                }


                //_salesDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                //_inventoryRepDAL.ConnectionClose();
                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();
                _financialDAL.TransactionCommit();
                _generalDAL.TransactionCommit();
                _effect = 1;

            }
            catch (Exception err)
            {
                _effect = -1;
                _refNo = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _financialDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
            }
            _refNo = _cusNo;
            return _effect;
        }

        //written by kapila 15/7/2014 - create receipt refund entry
        public Int32 CreateRefundByAdj(RecieptHeader _refundHdr, Deposit_Bank_Pc_wise objDeposit, List<RecieptItem> _refundItm, MasterAutoNumber _receiptAuto, List<ReceiptItemDetails> _resItmDet, RemitanceSummaryDetail _remsumdet, out string _refNo)
        {
            Int32 _effect = 0;
            string _refundNo = "";
            Int32 _refundSeq = 0;
            string _invNo = "";
            string _cusNo = "";
            int X = 0;

            try
            {
                _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen(); _salesDAL.BeginTransaction();
                _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen(); _inventoryDAL.BeginTransaction();
                _inventoryRepDAL = new ReptCommonDAL(); _inventoryRepDAL.ConnectionOpen(); _inventoryRepDAL.BeginTransaction();
                _financialDAL = new FinancialDAL(); _financialDAL.ConnectionOpen(); _financialDAL.BeginTransaction();

                MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_receiptAuto.Aut_moduleid, _receiptAuto.Aut_direction, _receiptAuto.Aut_start_char, _receiptAuto.Aut_cate_tp, _receiptAuto.Aut_cate_cd, _receiptAuto.Aut_modify_dt, _receiptAuto.Aut_year);

                _cusNo = _receiptAuto.Aut_cate_cd + _receiptAuto.Aut_start_char + string.Format("{0:0000}", _number.Aut_number);
                _inventoryDAL.UpdateAutoNumber(_receiptAuto);//update MST_AUTO table

                _refundHdr.Sar_ref_doc = _refundHdr.Sar_receipt_no;
                _refundHdr.Sar_receipt_no = _cusNo;

                Int32 RecieptSeqNo = 0;
                RecieptSeqNo = _inventoryDAL.GetSerialID();

                _refundHdr.Sar_seq_no = RecieptSeqNo;

                objDeposit.Seq_no = Convert.ToDouble(RecieptSeqNo);
                objDeposit.Ref_lnk = _cusNo;
                objDeposit.Ref_seq = Convert.ToDecimal(RecieptSeqNo);

                _effect = _salesDAL.SaveReceiptHeader(_refundHdr);//save receipt header

                foreach (RecieptItem _itm in _refundItm)
                {
                    _itm.Sard_seq_no = RecieptSeqNo;
                    _itm.Sard_receipt_no = _refundHdr.Sar_receipt_no;
                    _salesDAL.SaveReceiptItem(_itm);
                }

                if (_remsumdet != null)
                    X = _financialDAL.SaveRemSummaryDetails(_remsumdet);

                _effect = _salesDAL.UpdateRefundbyAdj(_refundHdr.Sar_tot_settle_amt, _refundHdr.Sar_receipt_no, _refundHdr.Sar_ref_doc, _refundHdr.Sar_com_cd, _refundHdr.Sar_profit_center_cd);

                _effect = _salesDAL.InsertTo_sat_Adj(objDeposit);//save SAT_ADJ

                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();
                _financialDAL.TransactionCommit();
                _effect = 1;

            }
            catch (Exception err)
            {
                _effect = -1;
                _refNo = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _financialDAL.TransactionRollback();
            }
            _refNo = _cusNo;
            return _effect;
        }

        public Int32 SaveTownMaster(MasterTown _mstTown, out string _refNo)
        {
            Int32 _effect = 0;
            _refNo = "";

            try
            {
                _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen(); _salesDAL.BeginTransaction();

                _effect = _salesDAL.SaveTownMaster(_mstTown);
                _salesDAL.TransactionCommit();

                _effect = 1;
            }
            catch (Exception err)
            {
                _effect = -1;
                _refNo = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();
            }

            return _effect;
        }

        //Written by darshana  - 07/08/2012 - create hp account & sales
        public Int32 CreateHPAccount(HpAccount _HPAccount, MasterAutoNumber _AccAutoNo, InvoiceHeader _InvHeader, List<InvoiceItem> _InvItem, MasterAutoNumber _InvNo, HPAccountLog _HPAccLog, List<HpSheduleDetails> _HPSheduleDetails, List<RecieptHeader> receiptHeaderList, List<RecieptItem> receipItemList, MasterAutoNumber receipAuto, List<HpTransaction> TxnList, MasterAutoNumber TxnAuto, List<HpCustomer> _HpAccCust, HpInsurance _insu, MasterAutoNumber _InsuRecNo, string _loc, out string _docNo, out string _AccountNo, out string _InvoiceNo, InventoryHeader _buybackheader, MasterAutoNumber _buybackauto, List<ReptPickSerials> _buybacklist, out string BuyBackInvNo, decimal _mgrCommAmt, out string _sysRecNo, Boolean _isSysRecPC, Boolean _isManRec, List<InvoiceVoucher> _voucher, RecieptHeader _insuRec, List<RecieptItem> _insuRecDet, out string _sysAddRec)
        {
            Int32 _effect = 0;
            string _AccNo = "";
            Int32 _accSeq = 0;
            Int32 _invSeq = 0;
            Int32 _accLogSeq = 0;
            Int16 _invoiceLine = 1;
            Int32 _schSeq = 0;
            string _cusNo = "";
            string _addSysRec = "";
            string _dpSysRec = "";
            string _buybackinv = string.Empty;
            decimal _wkNo = 0;
            string _smsInsu = "";

            if (_InvItem == null)
            {
                _AccountNo = "Error";
                _docNo = "Error";
                _InvoiceNo = "Error";
                BuyBackInvNo = "Error";
                _sysRecNo = "Error";
                _sysAddRec = "Erro";
                return 0;
            }

            if (_InvItem.Count <= 0)
            {
                _AccountNo = "ErrorCount";
                _docNo = "ErrorCount";
                _InvoiceNo = "ErrorCount";
                BuyBackInvNo = "ErrorCount";
                _sysRecNo = "ErrorCount";
                _sysAddRec = "ErrorCount";
                return 0;
            }

            //using (TransactionScope _tr = new TransactionScope())
            //{
            try
            {
                _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen(); _salesDAL.BeginTransaction();
                _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen(); _inventoryDAL.BeginTransaction();
                _fmsInventoryDal = new FMS_InventoryDAL(); _fmsInventoryDal.ConnectionOpen(); _fmsInventoryDal.BeginTransaction();
                _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen(); _generalDAL.BeginTransaction();

                //Sales entry create part
                _invSeq = _inventoryDAL.GetSerialID();

                _InvHeader.Sah_seq_no = _invSeq;
                _InvHeader.Sah_inv_no = Convert.ToString(_invSeq);

                _salesDAL.SaveSalesHeader(_InvHeader);

                //Save Invoice Items
                foreach (InvoiceItem _itm in _InvItem)
                {

                    _itm.Sad_seq_no = _invSeq;
                    _itm.Sad_itm_line = _invoiceLine;
                    _itm.Sad_inv_no = Convert.ToString(_invSeq);
                    _salesDAL.SaveSalesItem(_itm);
                    _salesDAL.UpdatePrice(_itm.Sad_itm_cd, _itm.Sad_pbook, _itm.Sad_pb_lvl, _InvHeader.Sah_cus_cd, _itm.Sad_promo_cd, _itm.Sad_seq, _itm.Sad_itm_seq);

                    if (_InvHeader.Sah_dt == DateTime.Now.Date)
                    {
                        List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                        _itmTax = _salesDAL.GetItemTax(_InvHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                        foreach (MasterItemTax _one in _itmTax)
                        {
                            decimal _disAmt = 0;
                            InvoiceItemTax _tax = new InvoiceItemTax();
                            _tax.Satx_inv_no = _itm.Sad_inv_no;
                            _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                            _tax.Satx_itm_line = _itm.Sad_itm_line;
                            _disAmt = _itm.Sad_unit_amt * _itm.Sad_disc_rt / 100;
                            if (_itm.Sad_itm_tax_amt == 0)
                            {
                                _tax.Satx_itm_tax_amt = 0;
                            }
                            else
                            {
                                _tax.Satx_itm_tax_amt = Math.Round(((_itm.Sad_unit_rt - _disAmt) * _one.Mict_tax_rate / 100) * _itm.Sad_qty, 0);//_tax.Satx_itm_tax_amt = (_itm.Sad_unit_rt * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                            }
                            _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                            _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                            _tax.Satx_job_line = 0;
                            _tax.Satx_job_no = "";
                            _tax.Satx_seq_no = _invSeq;
                            _salesDAL.SaveSalesItemTax(_tax);
                        }
                    }
                    else
                    {
                        List<MasterItemTax> _itmTaxEff = new List<MasterItemTax>();
                        _itmTaxEff = _salesDAL.GetItemTaxEffDt(_InvHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _InvHeader.Sah_dt);

                        if (_itmTaxEff.Count > 0)
                        {
                            foreach (MasterItemTax _one in _itmTaxEff)
                            {
                                decimal _disAmt = 0;
                                InvoiceItemTax _tax = new InvoiceItemTax();
                                _tax.Satx_inv_no = _itm.Sad_inv_no;
                                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                _tax.Satx_itm_line = _itm.Sad_itm_line;
                                _disAmt = _itm.Sad_unit_amt * _itm.Sad_disc_rt / 100;
                                if (_itm.Sad_itm_tax_amt == 0)
                                {
                                    _tax.Satx_itm_tax_amt = 0;
                                }
                                else
                                {
                                    _tax.Satx_itm_tax_amt = Math.Round(((_itm.Sad_unit_rt - _disAmt) * _one.Mict_tax_rate / 100) * _itm.Sad_qty, 0);//_tax.Satx_itm_tax_amt = (_itm.Sad_unit_rt * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                }
                                _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                _tax.Satx_job_line = 0;
                                _tax.Satx_job_no = "";
                                _tax.Satx_seq_no = _invSeq;
                                _salesDAL.SaveSalesItemTax(_tax);
                            }
                        }
                        else
                        {
                            List<LogMasterItemTax> _itmTax = new List<LogMasterItemTax>();
                            _itmTax = _salesDAL.GetItemTaxLog(_InvHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _InvHeader.Sah_dt);

                            foreach (LogMasterItemTax _one in _itmTax)
                            {
                                decimal _disAmt = 0;
                                InvoiceItemTax _tax = new InvoiceItemTax();
                                _tax.Satx_inv_no = _itm.Sad_inv_no;
                                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                _tax.Satx_itm_line = _itm.Sad_itm_line;
                                _disAmt = _itm.Sad_unit_amt * _itm.Sad_disc_rt / 100;
                                if (_itm.Sad_itm_tax_amt == 0)
                                {
                                    _tax.Satx_itm_tax_amt = 0;
                                }
                                else
                                {
                                    _tax.Satx_itm_tax_amt = Math.Round(((_itm.Sad_unit_rt - _disAmt) * _one.Lict_tax_rate / 100) * _itm.Sad_qty, 0);//_tax.Satx_itm_tax_amt = (_itm.Sad_unit_rt * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                }
                                _tax.Satx_itm_tax_rt = _one.Lict_tax_rate;
                                _tax.Satx_itm_tax_tp = _one.Lict_tax_cd;
                                _tax.Satx_job_line = 0;
                                _tax.Satx_job_no = "";
                                _tax.Satx_seq_no = _invSeq;
                                _salesDAL.SaveSalesItemTax(_tax);
                            }
                        }
                    }
                    _invoiceLine += 1;

                }


                //account create part
                _accSeq = _inventoryDAL.GetSerialID();
                _HPAccount.Hpa_seq_no = _accSeq;
                _HPAccount.Hpa_acc_no = Convert.ToString(_accSeq);
                _salesDAL.SaveHPAccount(_HPAccount);

                _accLogSeq = _inventoryDAL.GetSerialID();
                _HPAccLog.Hal_seq_no = _accLogSeq;
                _HPAccLog.Hal_acc_no = Convert.ToString(_accLogSeq);
                _salesDAL.SaveHPAccountLog(_HPAccLog);



                //generate invoice # and account no
                MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_InvNo.Aut_moduleid, _InvNo.Aut_direction, _InvNo.Aut_start_char, _InvNo.Aut_cate_tp, _InvNo.Aut_cate_cd, _InvNo.Aut_modify_dt, _InvNo.Aut_year);
                string InvoiceNo = _InvNo.Aut_cate_cd + "-" + _InvNo.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                MasterAutoNumber AccountAuto = _inventoryDAL.GetAutoNumber(_AccAutoNo.Aut_moduleid, _AccAutoNo.Aut_direction, _AccAutoNo.Aut_start_char, _AccAutoNo.Aut_cate_tp, _AccAutoNo.Aut_cate_cd, _AccAutoNo.Aut_modify_dt, _AccAutoNo.Aut_year);
                string AccountNo = _AccAutoNo.Aut_cate_cd + "-" + AccountAuto.Aut_number.ToString("000000", CultureInfo.InvariantCulture);


                _salesDAL.UpdateInvoiceAcc(InvoiceNo, "-1", _invSeq, 0);
                _salesDAL.UpdateAccAuto(AccountNo, InvoiceNo, _accSeq, _accLogSeq, AccountAuto.Aut_number);
                _salesDAL.UpdateInvAcc(_invSeq, AccountNo);

                Int16 _serLine = 1;
                foreach (InvoiceItem _seritm in _InvItem)
                {
                    InvoiceSerial _ser = new InvoiceSerial();
                    _ser.Sap_seq_no = _invSeq;
                    _ser.Sap_itm_line = _serLine;
                    _ser.Sap_inv_no = InvoiceNo;
                    _ser.Sap_itm_cd = _seritm.Sad_itm_cd;
                    _ser.Sap_ser_1 = _seritm.Sad_job_no;
                    _ser.Sap_del_loc = _InvHeader.Sah_del_loc;
                    _ser.Sap_ser_line = 0;
                    _salesDAL.SaveSalesSerial(_ser);
                    _serLine += 1;
                }


                //shedule create part
                foreach (HpSheduleDetails _sch in _HPSheduleDetails)
                {
                    _schSeq = _inventoryDAL.GetSerialID();

                    _sch.Hts_seq = _schSeq;
                    _sch.Hts_acc_no = AccountNo;
                    _sch.Hts_veh_insu = 0;
                    //_sch.Hts_tot_val = _sch.Hts_rnt_val - _sch.Hts_ins;
                    _salesDAL.SaveHpShedule(_sch);
                }

                //Tharaka 2015-08-10
                if (receipItemList != null)
                {
                    if (receipItemList.Count > 0)
                    {
                        foreach (RecieptItem _itm in receipItemList)
                        {
                            if (_itm.Sard_pay_tp == "ADVAN")
                            {
                                List<ReceiptItemDetails> _advRecItm = new List<ReceiptItemDetails>();
                                _advRecItm = _salesDAL.GetAdvanReceiptItems(_itm.Sard_ref_no);

                                if (_advRecItm != null)
                                {
                                    if (_advRecItm.Count > 0)
                                    {
                                        foreach (ReceiptItemDetails _advItm in _advRecItm)
                                        {
                                            if (_InvItem.FindAll(x => x.Sad_job_no == _advItm.Sari_serial).Count > 0)
                                            {

                                            }
                                            else
                                            {
                                                Boolean status = _inventoryDAL.Update_inrser_INS_AVAILABLE(_InvHeader.Sah_com, _InvHeader.Sah_del_loc, _advItm.Sari_item, _advItm.Sari_serial, 1);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }


                //save insuarance
                if (_insu.Hti_ins_val > 0)
                {
                    Int32 _insSeq = _inventoryDAL.GetSerialID();
                    MasterAutoNumber _Insnumber = _inventoryDAL.GetAutoNumber(_InsuRecNo.Aut_moduleid, _InsuRecNo.Aut_direction, _InsuRecNo.Aut_start_char, _InsuRecNo.Aut_cate_tp, _InsuRecNo.Aut_cate_cd, _InsuRecNo.Aut_modify_dt, _InsuRecNo.Aut_year);
                    string _InsNo = _InsuRecNo.Aut_cate_cd + "-" + _InsuRecNo.Aut_start_char + _Insnumber.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_InsuRecNo);

                    _insu.Hti_seq = _insSeq;
                    _insu.Hti_mnl_num = _InsNo;
                    _insu.Hti_acc_num = AccountNo;
                    _insu.Hti_ref = _InsNo;

                    _salesDAL.Save_HpInsu(_insu);


                    Int32 Insuline = 0;
                    //insuarance receipt
                    Int32 _insRecSeq = _inventoryDAL.GetSerialID();

                    _insuRec.Sar_seq_no = _insRecSeq;
                    _insuRec.Sar_acc_no = AccountNo;
                    _insuRec.Sar_receipt_no = _InsNo;

                    _effect = _salesDAL.SaveReceiptHeader(_insuRec);//save receipt header

                    foreach (RecieptItem _itm in _insuRecDet)
                    {

                        Insuline++;
                        _itm.Sard_seq_no = _insRecSeq;
                        _itm.Sard_line_no = Insuline;
                        _itm.Sard_receipt_no = _InsNo;
                        _effect = _salesDAL.SaveReceiptItem(_itm);//save receipt item

                        if (_itm.Sard_pay_tp == "ADVAN")
                        {
                            _salesDAL.UpdateUsedReceiptAmt(_HPAccount.Hpa_com, _HPAccount.Hpa_pc, _itm.Sard_settle_amt, _itm.Sard_pay_tp, _itm.Sard_ref_no);
                        }
                        else if (_itm.Sard_pay_tp == "CRNOTE")
                        {
                            _salesDAL.UpdateCreditNoteBalance(_HPAccount.Hpa_com, _HPAccount.Hpa_pc, _itm.Sard_ref_no, _itm.Sard_settle_amt);
                        }
                    }
                }

                //receipt save part
                DataTable dtESD_EPF_WHT = new DataTable();
                dtESD_EPF_WHT = _salesDAL.Get_ESD_EPF_WHT(_HPAccount.Hpa_com, _HPAccount.Hpa_pc, _HPAccount.Hpa_acc_cre_dt);

                Decimal ESD_rt = 0; Decimal EPF_rt = 0; Decimal WHT_rt = 0;
                if (dtESD_EPF_WHT.Rows.Count > 0)
                {
                    ESD_rt = Convert.ToDecimal(dtESD_EPF_WHT.Rows[0]["MPCH_ESD"]);
                    EPF_rt = Convert.ToDecimal(dtESD_EPF_WHT.Rows[0]["MPCH_EPF"]);
                    WHT_rt = Convert.ToDecimal(dtESD_EPF_WHT.Rows[0]["MPCH_WHT"]);

                }

                string _manrecTp = "";
                foreach (RecieptHeader _recieptHeader in receiptHeaderList)
                {   //create MST_AUTO number for receipt table
                    if (_recieptHeader.Sar_receipt_type == "HPDPS" || _recieptHeader.Sar_receipt_type == "HPARS")
                    {
                        //receipAuto.Aut_start_char = "HPRS";
                        receipAuto.Aut_start_char = "HPRM";
                        _manrecTp = "HPRS";
                    }
                    else
                    {
                        receipAuto.Aut_start_char = "HPRM";
                        _manrecTp = "HPRM";
                    }
                    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(receipAuto.Aut_moduleid, receipAuto.Aut_direction, receipAuto.Aut_start_char, receipAuto.Aut_cate_tp, receipAuto.Aut_cate_cd, receipAuto.Aut_modify_dt, receipAuto.Aut_year);
                    _cusNo = receipAuto.Aut_cate_cd + "-" + receipAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(receipAuto);//update MST_AUTO table


                    _recieptHeader.Sar_receipt_no = _cusNo;

                    if (_recieptHeader.Sar_receipt_type == "HPARS")
                    {
                        _addSysRec = _cusNo;
                    }
                    else
                    {
                        _dpSysRec = _cusNo;
                    }

                    Int32 RecieptSeqNo = 0;
                    RecieptSeqNo = _inventoryDAL.GetSerialID(); //will be assign to header after looping transaction list.
                    //foreach (HpTransaction tr in transactList)
                    //{
                    //    if (tr.Hpt_ref_no == _recieptHeader.Sar_seq_no.ToString())
                    //    {
                    //        tr.Hpt_txn_ref = _recieptHeader.Sar_receipt_no;
                    //    }
                    //    // effect = _salesDAL.Save_HpTransaction(tr);
                    //}

                    Int32 line = 0;
                    foreach (RecieptItem _itm in receipItemList)
                    {
                        if (_recieptHeader.Sar_seq_no == _itm.Sard_seq_no)//have to check the prefix also?
                        {
                            line++;
                            _itm.Sard_seq_no = RecieptSeqNo;
                            _itm.Sard_line_no = line;
                            _itm.Sard_receipt_no = _recieptHeader.Sar_receipt_no;
                            // effect = _salesDAL.SaveReceiptItem(_itm);//save receipt item
                        }
                    }
                    _recieptHeader.Sar_seq_no = RecieptSeqNo;
                    _recieptHeader.Sar_acc_no = AccountNo;
                    //if (isECDgiven)
                    //{
                    //    _recieptHeader.Sar_ref_doc=
                    //}
                    _recieptHeader.Sar_esd_rate = ESD_rt;
                    _recieptHeader.Sar_epf_rate = EPF_rt;
                    _recieptHeader.Sar_wht_rate = WHT_rt;

                    _effect = _salesDAL.SaveReceiptHeader(_recieptHeader);//save receipt header
                    MasterCompany _masterCompany = _generalDAL.GetCompByCode(_recieptHeader.Sar_com_cd);  //kapila 27/4/2016
                    if (_masterCompany.MC_IS_SCM2_FMS == 1)
                        _effect = _inventoryDAL.UpdateManualDocNo(_loc, _manrecTp, Convert.ToInt32(_recieptHeader.Sar_manual_ref_no), _recieptHeader.Sar_receipt_no);//do the updation at the gnt_man_doc_dt
                    else
                        _effect = _fmsInventoryDal.UpdateManualDocNo(_loc, _manrecTp, Convert.ToInt32(_recieptHeader.Sar_manual_ref_no), _recieptHeader.Sar_receipt_no);//do the updation at the gnt_man_doc_dt

                    //UPDATE approved manual pages
                    if (_isSysRecPC == true)
                    {
                        if (_isManRec == true)
                        {
                            _effect = _salesDAL.UpdateUsedAppManRec(_recieptHeader.Sar_com_cd, _recieptHeader.Sar_prefix, _recieptHeader.Sar_profit_center_cd, _recieptHeader.Sar_manual_ref_no, _recieptHeader.Sar_ref_doc, _recieptHeader.Sar_create_by, "ARQT033");
                        }
                    }

                }
                //save transactons list
                //foreach (HpTransaction tr in transactList)
                //{ // TODO:
                //    //create MST_AUTO number for transaction table (for each tx object)
                //    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(tranxAuto.Aut_moduleid, tranxAuto.Aut_direction, tranxAuto.Aut_start_char, tranxAuto.Aut_cate_tp, tranxAuto.Aut_cate_cd, tranxAuto.Aut_modify_dt, tranxAuto.Aut_year);
                //    string _cusNo = tranxAuto.Aut_cate_cd + "-" + tranxAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                //    _inventoryDAL.UpdateAutoNumber(tranxAuto);//update MST_AUTO table

                //    tr.Hpt_ref_no = _cusNo;
                //    //assign auto number to the tx obj.
                //    tr.Hpt_seq = _inventoryDAL.GetSerialID();
                //    _salesDAL.Save_HpTransaction(tr);

                //    if (isECDgiven)
                //    {
                //        //MasterAutoNumber _numberECD = _inventoryDAL.GetAutoNumber(tranxAuto.Aut_moduleid, tranxAuto.Aut_direction, tranxAuto.Aut_start_char, tranxAuto.Aut_cate_tp, tranxAuto.Aut_cate_cd, tranxAuto.Aut_modify_dt, tranxAuto.Aut_year);
                //        //string _cusNoECD = tranxAuto.Aut_cate_tp + "-" + tranxAuto.Aut_start_char + "-" + _numberECD.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                //        //_inventoryDAL.UpdateAutoNumber(tranxAuto);//update MST_AUTO table

                //        //tr.Hpt_ref_no = _cusNoECD;
                //        ////assign auto number to the tx obj.
                //        //tr.Hpt_seq = _inventoryDAL.GetSerialID();

                //        //tr.Hpt_txn_tp = "ECD";
                //        //tr.Hpt_dbt= Convert.ToDecimal(listECD_info[4]);
                //        //_salesDAL.Save_HpTransaction(tr);

                //    }
                //}

                //if (isECDgiven)
                //{
                //    HpTransaction tr = transactList[0];

                //    MasterAutoNumber _numberECD = _inventoryDAL.GetAutoNumber(tranxAuto.Aut_moduleid, tranxAuto.Aut_direction, tranxAuto.Aut_start_char, tranxAuto.Aut_cate_tp, tranxAuto.Aut_cate_cd, tranxAuto.Aut_modify_dt, tranxAuto.Aut_year);
                //    string _cusNoECD = tranxAuto.Aut_cate_cd + "-" + tranxAuto.Aut_start_char + "-" + _numberECD.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                //    _inventoryDAL.UpdateAutoNumber(tranxAuto);//update MST_AUTO table

                //    tr.Hpt_ref_no = _cusNoECD;
                //    //assign auto number to the tx obj.
                //    tr.Hpt_seq = _inventoryDAL.GetSerialID();

                //    tr.Hpt_txn_tp = "ECD";
                //    tr.Hpt_crdt = Convert.ToDecimal(listECD_info[4]); //ecd value
                //    tr.Hpt_dbt = 0; //Convert.ToDecimal(listECD_info[4]); //ecd value
                //    _salesDAL.Save_HpTransaction(tr);

                //}
                //save receipt detali list
                foreach (RecieptItem rec_itm in receipItemList)
                {

                    _salesDAL.SaveReceiptItem(rec_itm);//save receipt item

                    if (rec_itm.Sard_pay_tp == "ADVAN")
                    {
                        _salesDAL.UpdateUsedReceiptAmt(_HPAccount.Hpa_com, _HPAccount.Hpa_pc, rec_itm.Sard_settle_amt, rec_itm.Sard_pay_tp, rec_itm.Sard_ref_no);
                    }
                    else if (rec_itm.Sard_pay_tp == "CRNOTE")
                    {
                        _salesDAL.UpdateCreditNoteBalance(_HPAccount.Hpa_com, _HPAccount.Hpa_pc, rec_itm.Sard_ref_no, rec_itm.Sard_settle_amt);
                    }
                    if (rec_itm.Sard_pay_tp == "GVO") // Nadeeka 05-06-2015
                    {
                        _fmsInventoryDal.UpdateRedeemVoucher(_HPAccount.Hpa_com, _HPAccount.Hpa_pc, rec_itm.Sard_sim_ser, rec_itm.Sard_ref_no, rec_itm.Sard_cc_tp, rec_itm.Sard_anal_2, _HPAccount.Hpa_cre_by, rec_itm.Sard_settle_amt);
                    }
                }


                //save transaction details
                foreach (HpTransaction _Txn in TxnList)
                {
                    MasterAutoNumber _Txnnumber = _inventoryDAL.GetAutoNumber(TxnAuto.Aut_moduleid, TxnAuto.Aut_direction, TxnAuto.Aut_start_char, TxnAuto.Aut_cate_tp, TxnAuto.Aut_cate_cd, TxnAuto.Aut_modify_dt, TxnAuto.Aut_year);
                    string _txnNo = TxnAuto.Aut_cate_cd + "-" + TxnAuto.Aut_start_char + "-" + _Txnnumber.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(TxnAuto);

                    _Txn.Hpt_ref_no = _txnNo;

                    Int32 TxnSeqNo = 0;
                    TxnSeqNo = _inventoryDAL.GetSerialID();
                    _Txn.Hpt_seq = TxnSeqNo;
                    _Txn.Hpt_acc_no = AccountNo;
                    _effect = _salesDAL.Save_HpTransaction(_Txn);

                }

                //save account customers
                foreach (HpCustomer _AccCus in _HpAccCust)
                {
                    Int32 CustSeqNo = 0;
                    CustSeqNo = _inventoryDAL.GetSerialID();
                    _AccCus.Htc_seq = CustSeqNo;
                    _AccCus.Htc_acc_no = AccountNo;
                    _effect = _salesDAL.SaveAccCustomer(_AccCus);

                    if (_AccCus.Htc_adr_tp == 1)
                    {
                        _effect = _salesDAL.UpdateReqAppByFunc(_HPAccount.Hpa_com, _HPAccount.Hpa_pc, "ARQT031", _AccCus.Htc_cust_cd, _HPAccount.Hpa_cre_by);

                        // NADEEKA 29-09-2015 (MULTIPLE ACCOUNTS APPROVAL)
                        _effect = _salesDAL.UpdateReqAppByFunc(_HPAccount.Hpa_com, _HPAccount.Hpa_pc, "ARQT003", _AccCus.Htc_cust_cd, _HPAccount.Hpa_cre_by);
                    }

                }



                //if (isECDgiven == true)
                //{
                //    string AccNo = receiptHeaderList[0].Sar_acc_no;
                //    string company = receiptHeaderList[0].Sar_com_cd;
                //    string pc = receiptHeaderList[0].Sar_profit_center_cd;

                //    // _salesDAL.Update_hp_accountStatus(company, pc, AccNo, "C", 1, Convert.ToString(listECD_info[3]), Convert.ToDateTime(listECD_info[1]).Date);//status is changed to 'C' when closing accounts.
                //    _salesDAL.Update_hp_accountStatus(company, pc, AccNo, "C", 1, Convert.ToString(listECD_info[3]), Convert.ToDateTime(listECD_info[1]).Date);//status is changed to 'C' when closing accounts.

                //    //listECD_info[0] = (string)lblAccNo.Text.Trim();//Account Number
                //    //listECD_info[1] = Convert.ToDateTime(txtReceiptDate.Text.Trim()).Date; //Reciept date(HPA_CLS_DT/ HED_USE_DT )
                //    //listECD_info[2] = 1;//ECD status (HPA_ECD_STUS )
                //    //listECD_info[3] = ECD_type; // ECD Type(HPA_ECD_TP )N - Normal, S - Special, V - Voucher basis, A 
                //    //listECD_info[4] = HED_ECD_VAL;// ECD value (discount)
                //    //listECD_info[5] = HED_ECD_CLS_VAL; //Collected amount (Tot receipt amt);
                //    //listECD_info[6] = HED_VOU_NO; //voucher number (if voucher is given in ecd)

                //    if (Convert.ToString(listECD_info[3]) == "V")
                //    {
                //        //do updations in HPR_ECD_DEFN table
                //        //        Update_hp_Voucher_Status(string com, string pc, string accountNo, string voucherNo, Decimal ECDvalue, Decimal collectAmount , DateTime date_)
                //        _salesDAL.Update_hp_Voucher_Status(company, pc, AccNo, Convert.ToString(listECD_info[6]), Convert.ToDecimal(listECD_info[4]), Convert.ToDecimal(listECD_info[5]), Convert.ToDateTime(listECD_info[1]).Date);
                //    }
                //    else if (Convert.ToString(listECD_info[3]) == "A")
                //    {
                //        RequestApprovalHeader _rapphdr = new RequestApprovalHeader();
                //        foreach (RecieptHeader _hdr in receiptHeaderList)
                //        {
                //            _rapphdr.Grah_com = company;
                //            _rapphdr.Grah_loc = pc;
                //            _rapphdr.Grah_fuc_cd = AccNo;
                //            _rapphdr.Grah_ref = Convert.ToString(listECD_info[7]);
                //            _rapphdr.Grah_app_stus = "F";
                //            _rapphdr.Grah_app_lvl = -1;
                //            _rapphdr.Grah_app_by = Convert.ToString(listECD_info[8]);
                //            break;
                //        }

                //        _generalDAL.UpdateMidApprovalStatus(_rapphdr);

                //    }

                //}
                if (_buybacklist != null) if (_buybacklist.Count > 0)
                    {
                        InventoryBLL _bll = new InventoryBLL();
                        _bll._salesDAL = _salesDAL;
                        _bll._inventoryDAL = _inventoryDAL;
                        _bll._FMSinventoryDAL = _fmsInventoryDal;
                        _bll._inventoryRepDAL = _inventoryRepDAL;
                        _buybackheader.Ith_manual_ref = InvoiceNo;
                        _buybackheader.Ith_acc_no = AccountNo;
                        _bll.SaveInwardScanSerial(_buybackheader, _buybacklist, null);
                        _bll.UpdateInventoryAutoNumber(_buybackheader, _buybackauto, "+", out  _buybackinv);
                        _inventoryDAL.UpdateMovementDocNo_Other(_buybackheader.Ith_seq_no, _buybackinv);
                    }


                if (_mgrCommAmt > 0)
                {
                    //save service chg. commission for remitance
                    RemitanceSummaryDetail _remDet = new RemitanceSummaryDetail();
                    _remDet.Rem_com = _HPAccount.Hpa_com;
                    _remDet.Rem_pc = _HPAccount.Hpa_pc;
                    _remDet.Rem_dt = _HPAccount.Hpa_acc_cre_dt;
                    _remDet.Rem_sec = "02";
                    _remDet.Rem_cd = "065";
                    _remDet.Rem_sh_desc = "Claim Service Charge";
                    _remDet.Rem_lg_desc = "Claim Service Charge";
                    _remDet.Rem_val = _mgrCommAmt;
                    _remDet.Rem_val_final = _mgrCommAmt;
                    int _weekNo = _generalDAL.GetWeek(Convert.ToDateTime(_HPAccount.Hpa_acc_cre_dt).Date, out _wkNo, _HPAccount.Hpa_com);
                    _remDet.Rem_week = _wkNo + "S";
                    _remDet.Rem_ref_no = AccountNo;
                    _remDet.Rem_rmk = InvoiceNo;
                    _remDet.Rem_cr_acc = null;
                    _remDet.Rem_db_acc = null;
                    _remDet.Rem_del_alw = false;
                    _remDet.Rem_cre_by = _HPAccount.Hpa_cre_by;
                    _remDet.Rem_cre_dt = _HPAccount.Hpa_cre_dt;
                    _remDet.Rem_is_sos = true;
                    _remDet.Rem_is_dayend = true;
                    _remDet.Rem_is_sun = true;
                    _remDet.Rem_cat = 17;
                    _remDet.Rem_add = 0;
                    _remDet.Rem_ded = 0;
                    _remDet.Rem_net = _mgrCommAmt;
                    _remDet.Rem_epf = 0;
                    _remDet.Rem_esd = 0;
                    _remDet.Rem_wht = 0;
                    _remDet.Rem_add_fin = 0;
                    _remDet.Rem_ded_fin = 0;
                    _remDet.Rem_net_fin = _mgrCommAmt;
                    _remDet.Rem_rmk_fin = InvoiceNo;
                    _remDet.Rem_bnk_cd = null;
                    _remDet.Rem_is_rem_sum = true;
                    _salesDAL.SaveRemSummaryForFinalCreditComm(_remDet);
                }

                MasterBusinessEntity _businessCompany = new MasterBusinessEntity();
                _businessCompany = _salesDAL.GetActiveBusinessCompanyDetail(_InvHeader.Sah_com, _InvHeader.Sah_cus_cd, null, null, "C");

                //add by tharanga 2018/10/29 inst:: Block voucher generation - Credit note ::Mon 29/Oct/2018 12:28 PM
                int count = receipItemList.Where(r => r.Sard_pay_tp == "CRNOTE").Count();
                if (count <= 0)
                {
                    #region Generate Promotion Vouchers :: Chamal 26-Jun-2014 - copied by darshana 26-09-2014
                    if (_voucher == null) _voucher = new List<InvoiceVoucher>();

                    bool _promoVouApplied = false;
                    foreach (InvoiceItem _itm in _InvItem)
                    {
                        if (_itm.Sad_unit_rt > 0)
                        {
                            MasterItem _mitm = _inventoryDAL.GetItem(_InvHeader.Sah_com, _itm.Sad_itm_cd);
                            if (_mitm.Mi_is_ser1 != -1)
                            {
                                for (int i = 1; i <= _itm.Sad_qty; i++)
                                {

                                    //kapila 27/1/2017
                                    List<PromoVoucherDefinition> _proVouList = new List<PromoVoucherDefinition>();
                                    if (_InvHeader.Sah_pdi_req == 1)  //based on credit note
                                    {
                                        InvoiceHeader _invoice = _salesDAL.GetInvoiceHeaderDetails(_InvHeader.Sah_structure_seq);
                                        DataTable _dtReq = _generalDAL.SearchrequestAppDetByRef(_invoice.Sah_anal_3);
                                        DateTime _dtReqPara = _InvHeader.Sah_dt.Date;
                                        if (_dtReq.Rows.Count > 0)
                                            _dtReqPara = Convert.ToDateTime(_dtReq.Rows[0]["grad_date_param"]);

                                        _proVouList = GetPromotionalVouchersDefinition(_InvHeader.Sah_com, _InvHeader.Sah_inv_tp, _InvHeader.Sah_pc, _dtReqPara, _itm.Sad_pbook, _itm.Sad_pb_lvl, _mitm.Mi_brand, _mitm.Mi_cate_1, _mitm.Mi_cate_2, _itm.Sad_itm_cd, false);
                                    }
                                    else
                                        _proVouList = GetPromotionalVouchersDefinition(_InvHeader.Sah_com, _InvHeader.Sah_inv_tp, _InvHeader.Sah_pc, _InvHeader.Sah_dt.Date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _mitm.Mi_brand, _mitm.Mi_cate_1, _mitm.Mi_cate_2, _itm.Sad_itm_cd, false);

                                    if (_proVouList != null)
                                    {
                                        if (_proVouList.Count > 0)
                                        {
                                            foreach (PromoVoucherDefinition _proitm in _proVouList)
                                            {
                                                InvoiceVoucher _vou = new InvoiceVoucher();
                                                GiftVoucherPages _gvou = new GiftVoucherPages();

                                                DataTable _result = _generalDAL.GetProVoutype(_InvHeader.Sah_com, _proitm.Spd_vou_cd);

                                                if (_result != null || _result.Rows.Count > 0)
                                                {
                                                    if (Convert.ToInt32(_result.Rows[0]["spt_is_qtywise"].ToString()) == 0)
                                                    {
                                                        //consider total invoice value
                                                        if (Convert.ToInt32(_result.Rows[0]["spt_min_val"].ToString()) <= _HPAccount.Hpa_cash_val)
                                                        {
                                                            var _vouExsit = _voucher.Where(x => x.Stvo_prefix == _proitm.Spd_vou_cd).Select(x => x.Stvo_prefix).ToList();
                                                            if (_vouExsit != null && _vouExsit.Count > 0)
                                                            {
                                                                goto Ter;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            goto Ter;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (Convert.ToInt32(_result.Rows[0]["spt_min_val"].ToString()) <= _itm.Sad_tot_amt)
                                                        {

                                                        }
                                                        else
                                                        {
                                                            goto Ter;
                                                        }
                                                    }
                                                }

                                                _vou.Stvo_inv_no = InvoiceNo;
                                                _vou.Stvo_prefix = _proitm.Spd_vou_cd;
                                                _vou.Stvo_bookno = _proitm.Spd_seq;
                                                _vou.Stvo_pageno = _salesDAL.GetPromotionVoucherNo();
                                                _vou.Stvo_gv_itm = _proitm.Spd_vou_cd;
                                                _vou.Stvo_price = _proitm.Spd_disc;
                                                _vou.Stvo_itm_cd = _itm.Sad_itm_cd;
                                                _vou.Stvo_cre_by = "PRO_VOU";
                                                if (_proitm.Spd_disc_isrt == true)
                                                {
                                                    _vou.Stvo_stus = 1;
                                                    _gvou.Gvp_gv_tp = "RATE";
                                                }
                                                else
                                                {
                                                    _vou.Stvo_stus = 0;
                                                    _gvou.Gvp_gv_tp = "VALUE";
                                                }

                                                _gvou.Gvp_amt = _proitm.Spd_disc;
                                                _gvou.Gvp_app_by = _InvHeader.Sah_cre_by;
                                                _gvou.Gvp_bal_amt = _proitm.Spd_disc; // 0;  kapila 3/11/2016
                                                _gvou.Gvp_book = _itm.Sad_itm_line;
                                                _gvou.Gvp_can_by = "";
                                                _gvou.Gvp_can_dt = DateTime.Now.Date;
                                                _gvou.Gvp_com = _InvHeader.Sah_com;
                                                _gvou.Gvp_cre_by = _InvHeader.Sah_cre_by;
                                                _gvou.Gvp_cre_dt = DateTime.Now.Date;
                                                _gvou.Gvp_cus_add1 = _InvHeader.Sah_cus_add1;
                                                _gvou.Gvp_cus_add2 = _InvHeader.Sah_cus_add2;
                                                _gvou.Gvp_cus_cd = _InvHeader.Sah_cus_cd;
                                                _gvou.Gvp_cus_mob = _businessCompany.Mbe_mob;
                                                _gvou.Gvp_cus_name = _InvHeader.Sah_cus_name;
                                                _gvou.Gvp_from = "-";
                                                _gvou.Gvp_gv_cd = _proitm.Spd_vou_cd;
                                                _gvou.Gvp_gv_prefix = "P_GV";
                                                _gvou.Gvp_is_allow_promo = false;
                                                _gvou.Gvp_issu_itm = 0;
                                                _gvou.Gvp_issue_by = "";
                                                _gvou.Gvp_issue_dt = DateTime.Now.Date;
                                                _gvou.Gvp_line = i;
                                                _gvou.Gvp_mod_by = "";
                                                _gvou.Gvp_mod_dt = DateTime.Now.Date;
                                                _gvou.Gvp_noof_itm = 1;
                                                _gvou.Gvp_oth_ref = InvoiceNo;// _proitm.Spd_circular_no;
                                                _gvou.Gvp_page = _vou.Stvo_pageno;
                                                _gvou.Gvp_pc = _InvHeader.Sah_pc;
                                                _gvou.Gvp_ref = _proitm.Spd_seq.ToString();
                                                _gvou.Gvp_stus = "A";
                                                _gvou.Gvp_valid_from = _InvHeader.Sah_dt.Date;
                                                //_gvou.Gvp_valid_to = _InvHeader.Sah_dt.Date.AddMonths(_proitm.Spd_period);
                                                _gvou.Gvp_valid_to = _InvHeader.Sah_dt.Date.AddDays(_proitm.Spd_period); //Chamal 24-09-2014
                                                _gvou.Gvp_cus_nic = _businessCompany.Mbe_nic;

                                                _voucher.Add(_vou);
                                                _fmsInventoryDal.SaveGiftVoucherPages(_gvou);
                                                _promoVouApplied = true;
                                            //break;
                                            Ter: int xx = 0;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (_promoVouApplied == true)
                    {
                        if (_voucher != null)
                        {
                            if (_voucher.Count > 0)
                            {
                                //var _vouProCodes = _voucher.Where(x => x.Stvo_cre_by == "PRO_VOU").Select(x => x.Stvo_prefix).Distinct().ToList();
                                var _vouProCodes = _voucher.Where(x => x.Stvo_cre_by == "PRO_VOU").Select(x => x.Stvo_bookno).Distinct().ToList();
                                if (_vouProCodes != null && _vouProCodes.Count > 0)
                                {
                                    foreach (var _cd in _vouProCodes)
                                    {
                                        DataTable _dtothCom = _salesDAL.GetProVouAllowCompanies(_InvHeader.Sah_com, _cd);

                                        if (_dtothCom.Rows.Count > 0)
                                        {
                                            foreach (DataRow drow in _dtothCom.Rows)
                                            {
                                                MasterBusinessEntity _othCust = new MasterBusinessEntity();
                                                _othCust = _businessCompany;
                                                _othCust.Mbe_cd = _InvHeader.Sah_cus_cd;
                                                _othCust.Mbe_com = drow["R_COM"].ToString();
                                                if (!string.IsNullOrEmpty(_othCust.Mbe_nic) || !string.IsNullOrEmpty(_othCust.Mbe_mob))
                                                {
                                                    MasterBusinessEntity _nic = _salesDAL.GetActiveBusinessCompanyDetail(_InvHeader.Sah_com, string.Empty, _othCust.Mbe_nic, string.Empty, "C");
                                                    MasterBusinessEntity _mobile = _salesDAL.GetActiveBusinessCompanyDetail(_InvHeader.Sah_com, string.Empty, string.Empty, _othCust.Mbe_mob, "C");
                                                    if (_nic.Mbe_cd == null && _mobile.Mbe_cd == null)
                                                    {
                                                        int _isUpdate = _salesDAL.UpdateBusinessEntityProfile(_othCust, 1);
                                                        if (_isUpdate <= 0) _salesDAL.SaveBusinessEntityDetail(_othCust);
                                                    }
                                                }

                                            }
                                        }

                                    }
                                }
                            }
                        }
                    }
                    //sms send to customer for voucher______
                    //sms send to customer for voucher______
                    if (_promoVouApplied == true)
                    {
                        if (_voucher != null)
                        {
                            if (_voucher.Count > 0)
                            {
                                string _mobNo = "";
                                string _cusNe = "";
                                var _vouProCodes = _voucher.Where(x => x.Stvo_cre_by == "PRO_VOU").Select(x => x.Stvo_prefix).Distinct().ToList();
                                if (_vouProCodes != null && _vouProCodes.Count > 0)
                                {
                                    foreach (var _cd in _vouProCodes)
                                    {
                                        DataTable _result = _generalDAL.GetProVoutype(_InvHeader.Sah_com, _cd);

                                        if (_result != null || _result.Rows.Count > 0)
                                        {
                                            //updated by akila 2017/11/13
                                            int _smsAlert = 0;
                                            int.TryParse(_result.Rows[0]["spt_sms_alert"].ToString(), out _smsAlert);

                                            //if (Convert.ToInt32(_result.Rows[0]["spt_sms_alert"].ToString()) == 1)
                                            if (_smsAlert == 1)
                                            {
                                                if (!string.IsNullOrEmpty(_result.Rows[0]["spt_cus_pur_sms"].ToString()))
                                                {
                                                    List<MasterBusinessEntity> _cusdet1 = new List<MasterBusinessEntity>();
                                                    _cusdet1 = _salesDAL.GetActiveCustomerDetailList(_InvHeader.Sah_com, _InvHeader.Sah_cus_cd, null, null, "C");
                                                    foreach (MasterBusinessEntity newcus in _cusdet1)
                                                    {
                                                        _mobNo = newcus.Mbe_mob;
                                                        _cusNe = newcus.Mbe_name;
                                                    }

                                                    if (!string.IsNullOrEmpty(_mobNo))
                                                    {
                                                        if (_mobNo.Length >= 9)
                                                        {

                                                            string _mg = _result.Rows[0]["spt_cus_pur_sms"].ToString();
                                                            OutSMS _out = new OutSMS();
                                                            _out.Msg = _mg;
                                                            _out.Msgstatus = 0;
                                                            _out.Msgtype = "S";
                                                            _out.Receivedtime = DateTime.Now;
                                                            _out.Receiver = "CUSTOMER";
                                                            //_out.Receiverphno = _info.Mmi_mobi_no;

                                                            if (_mobNo.Length == 10)
                                                            {
                                                                _out.Receiverphno = "+94" + _mobNo.Substring(1, 9);
                                                                _out.Senderphno = "+94" + _mobNo.Substring(1, 9);
                                                            }
                                                            if (_mobNo.Length == 9)
                                                            {
                                                                _out.Receiverphno = "+94" + _mobNo;
                                                                _out.Senderphno = "+94" + _mobNo;
                                                            }

                                                            _out.Refdocno = InvoiceNo;
                                                            _out.Sender = _InvHeader.Sah_cre_by;
                                                            _out.Createtime = DateTime.Now;
                                                            _generalDAL.SaveSMSOut(_out);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    #endregion

                    #region Save/Update Voucher
                    if (_voucher != null)
                        if (_voucher.Count > 0)
                        {
                            _voucher.ForEach(x => x.Stvo_inv_no = InvoiceNo);
                            UpdateInvoiceGiftVoucher(_InvHeader.Sah_com, _InvHeader.Sah_pc, _cusNo, _InvHeader.Sah_cus_name, _InvHeader.Sah_d_cust_add1, _InvHeader.Sah_d_cust_add2, null, _InvHeader.Sah_dt, InvoiceNo, _InvHeader.Sah_cre_by, _voucher, _salesDAL, _fmsInventoryDal);
                        }
                    #endregion

                }
                _inventoryDAL.UpdateAutoNumber(_InvNo);
                _inventoryDAL.UpdateAutoNumber(_AccAutoNo);

                if (_InvHeader.Sah_ref_doc != null)
                {
                    _salesDAL.UpdateAccLogByNewAcc(_InvHeader.Sah_com, _InvHeader.Sah_pc, _InvHeader.Sah_ref_doc, AccountNo);
                }

                if (string.IsNullOrEmpty(_buybackinv))
                {
                    _AccNo = InvoiceNo + " , " + AccountNo;
                }
                else
                {
                    _AccNo = InvoiceNo + " , " + AccountNo + " , " + _buybackinv;
                }


                _InvoiceNo = InvoiceNo;
                _AccountNo = AccountNo;
                BuyBackInvNo = _buybackinv;
                _sysRecNo = _dpSysRec;
                _sysAddRec = _addSysRec;

                string _pcName = "";
                string _mobilNo = "";
                string _cusName = "";
                decimal _insuAmt = 0;

                MasterCompany _masterComp = null;
                _masterComp = _generalDAL.GetCompByCode(_InvHeader.Sah_com);
                if (_masterComp != null)
                {
                    _smsInsu = _masterComp.Mc_anal3.ToString();
                }
                else
                {
                    _smsInsu = "Insuarance";
                }

                DataTable dt = _generalDAL.CheckProfitCenter(_InvHeader.Sah_com, _InvHeader.Sah_pc);
                if (dt.Rows.Count > 0)
                {
                    _pcName = Convert.ToString(dt.Rows[0]["mpc_desc"]);
                }


                foreach (HpCustomer _AccCus in _HpAccCust)
                {
                    List<MasterBusinessEntity> _cusdet = new List<MasterBusinessEntity>();
                    if (_AccCus.Htc_adr_tp == 1 && _AccCus.Htc_cust_tp == "C")
                    {
                        //_cusdet = _salesDAL.GetCustomerDetailList(_InvHeader.Sah_com, _AccCus.Htc_cust_cd, null, null, "C");
                        //Edit By Chamal 10/04/2014 (Disscuss with Dar)
                        _cusdet = _salesDAL.GetActiveCustomerDetailList(_InvHeader.Sah_com, _AccCus.Htc_cust_cd, null, null, "C");
                        foreach (MasterBusinessEntity _cus in _cusdet)
                        {
                            _mobilNo = _cus.Mbe_mob;
                            _cusName = _cus.Mbe_name;

                            if (!string.IsNullOrEmpty(_mobilNo))
                            {
                                if (_mobilNo.Length >= 9)
                                {
                                    _insuAmt = _HPAccount.Hpa_init_ins + _HPAccount.Hpa_inst_ins;
                                    //thank u for buying [product] on Hire purchase [loc] S/R on [date]  (A/c [accNo]).Tot value [total] & diriya [diriya]-[com]-0112565293
                                    string _mg = "Thank u for the purchased items on HP A/C: " + _AccountNo + " @ " + _pcName + " S/R. HP value Rs.: " + _HPAccount.Hpa_hp_val + " and " + _smsInsu + " Rs.: " + _insuAmt + "-" + _generalDAL.GetHPCustContactPhoneNo();
                                    OutSMS _out = new OutSMS();
                                    _out.Msg = _mg;
                                    _out.Msgstatus = 0;
                                    _out.Msgtype = "S";
                                    _out.Receivedtime = DateTime.Now;
                                    _out.Receiver = "CUSTOMER";
                                    //_out.Receiverphno = _info.Mmi_mobi_no;

                                    if (_mobilNo.Length == 10)
                                    {
                                        _out.Receiverphno = "+94" + _mobilNo.Substring(1, 9);
                                        _out.Senderphno = "+94" + _mobilNo.Substring(1, 9);
                                    }
                                    if (_mobilNo.Length == 9)
                                    {
                                        _out.Receiverphno = "+94" + _mobilNo;
                                        _out.Senderphno = "+94" + _mobilNo;
                                    }

                                    _out.Refdocno = _InvoiceNo;
                                    _out.Sender = _InvHeader.Sah_cre_by;
                                    _out.Createtime = DateTime.Now;
                                    _generalDAL.SaveSMSOut(_out);
                                }
                            }
                        }
                    }
                    else if (_AccCus.Htc_adr_tp == 1 && _AccCus.Htc_cust_tp == "G")
                    {
                        //_cusdet = _salesDAL.GetCustomerDetailList(_InvHeader.Sah_com, _AccCus.Htc_cust_cd, null, null, "C");
                        //Edit By Chamal 10/04/2014 (Disscuss with Dar)
                        _cusdet = _salesDAL.GetActiveCustomerDetailList(_InvHeader.Sah_com, _AccCus.Htc_cust_cd, null, null, "C");
                        foreach (MasterBusinessEntity _cus in _cusdet)
                        {
                            _mobilNo = _cus.Mbe_mob;
                            if (!string.IsNullOrEmpty(_mobilNo))
                            {
                                if (_mobilNo.Length >= 9)
                                {
                                    _insuAmt = _HPAccount.Hpa_init_ins + _HPAccount.Hpa_inst_ins;

                                    //thank u for buying [product] on Hire purchase [loc] S/R on [date]  (A/c [accNo]).Tot value [total] & diriya [diriya]-[com]-0112565293
                                    string _mg = "You are signed as a guarantor for HP A/c : " + _AccountNo + " at " + _pcName + " S/R. HP value Rs. : " + _HPAccount.Hpa_hp_val + " And " + _smsInsu + " Rs.: " + _insuAmt + "-" + _generalDAL.GetHPCustContactPhoneNo();
                                    OutSMS _out = new OutSMS();
                                    _out.Msg = _mg;
                                    _out.Msgstatus = 0;
                                    _out.Msgtype = "S";
                                    _out.Receivedtime = DateTime.Now;
                                    _out.Receiver = "GUARANTOR";
                                    //_out.Receiverphno = _info.Mmi_mobi_no;

                                    if (_mobilNo.Length == 10)
                                    {
                                        _out.Receiverphno = "+94" + _mobilNo.Substring(1, 9);
                                        _out.Senderphno = "+94" + _mobilNo.Substring(1, 9);
                                    }
                                    if (_mobilNo.Length == 9)
                                    {
                                        _out.Receiverphno = "+94" + _mobilNo;
                                        _out.Senderphno = "+94" + _mobilNo;
                                    }

                                    _out.Refdocno = _InvoiceNo;
                                    _out.Sender = _InvHeader.Sah_cre_by;
                                    _out.Createtime = DateTime.Now;
                                    _generalDAL.SaveSMSOut(_out);
                                }
                            }
                        }
                    }
                }
                #region add loyalty points by tharanga 2018/11/06
                if (!string.IsNullOrEmpty(_InvHeader.Sah_anal_6))
                {
                    List<InvoiceSerial> _invoiceSeriallist = new List<InvoiceSerial>();
                    if (_InvItem.Count > 0)
                    {
                        foreach (InvoiceItem item in _InvItem)
                        {
                            InvoiceSerial _InvoiceSerial = new InvoiceSerial();
                            _InvoiceSerial.Sap_del_loc = _loc;
                            _InvoiceSerial.Sap_inv_no = item.Sad_inv_no;
                            _InvoiceSerial.Sap_itm_cd = item.Sad_itm_cd;
                            _InvoiceSerial.Sap_seq_no = item.Sad_seq;
                            _InvoiceSerial.Sap_ser_line = 0;
                            _invoiceSeriallist.Add(_InvoiceSerial);
                        }
                    }

                    DataTable _loldetail = _salesDAL.GetLoyaltyCardDetail(_InvHeader.Sah_cus_cd, _InvHeader.Sah_anal_6);
                    string _loltype = string.Empty;
                    string _membership = string.Empty;
                    if (_loldetail != null && _loldetail.Rows.Count >= 0)
                    {
                        _loltype = _loldetail.Rows[0].Field<string>("salcm_loty_tp");
                        _membership = _loldetail.Rows[0].Field<string>("salcm_cus_spec");
                    }
                    decimal _points = GetLoyaltyPoint(_loltype, _membership, _InvHeader.Sah_com, _InvHeader.Sah_pc, _InvHeader.Sah_dt, _InvItem, _invoiceSeriallist, receipItemList, _salesDAL, _inventoryDAL, _InvHeader.Sah_inv_tp);
                    if (_points > 0)
                    {
                        // _salDAL.UpdateLoyaltyCardPoint(_invoiceHeader.Sah_cus_cd, _invoiceHeader.Sah_anal_6, _points, _invoiceHeader.Sah_cre_by);
                        InvoiceLoyalty _lol = new InvoiceLoyalty();
                        _lol.Stlt_inv_no = Convert.ToString(_InvHeader.Sah_inv_no);
                        _lol.Stlt_pt = _points;
                        _lol.Stlt_seq_no = _InvHeader.Sah_seq_no;
                        _salesDAL.SaveInvoiceLoyalty(_lol);
                    }
                }
                #endregion
                //_salesDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                //_fmsInventoryDal.ConnectionClose();
                //_generalDAL.ConnectionClose();

                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();
                _generalDAL.TransactionCommit();

                _effect = 1;
                //_tr.Complete();
            }
            catch (Exception err)
            {
                _effect = -1;
                _AccNo = "ERROR : " + err.Message.ToString();
                _AccountNo = "ERROR : " + err.Message.ToString();
                _InvoiceNo = "ERROR : " + err.Message.ToString();
                BuyBackInvNo = "ERROR : " + err.Message.ToString();
                _sysRecNo = "ERROR : " + err.Message.ToString();
                _sysAddRec = "ERROR : " + err.Message.ToString();
                //_AccNo = documentNo;
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                _generalDAL.TransactionRollback();
            }

            _docNo = _AccNo;
            return _effect;
        }


        //Written by darshana  - 07/08/2012 - create hp account & sales
        public Int32 CreateHPAccountNew02(HpAccount _HPAccount, MasterAutoNumber _AccAutoNo, InvoiceHeader _InvHeader, List<InvoiceItem> _InvItem, MasterAutoNumber _InvNo, HPAccountLog _HPAccLog, List<HpSheduleDetails> _HPSheduleDetails, List<RecieptHeader> receiptHeaderList, List<RecieptItem> receipItemList, MasterAutoNumber receipAuto, List<HpTransaction> TxnList, MasterAutoNumber TxnAuto, List<HpCustomer> _HpAccCust, HpInsurance _insu, MasterAutoNumber _InsuRecNo, string _loc, out string _docNo, out string _AccountNo, out string _InvoiceNo, InventoryHeader _buybackheader, MasterAutoNumber _buybackauto, List<ReptPickSerials> _buybacklist, out string BuyBackInvNo, decimal _mgrCommAmt, out string _sysRecNo, Boolean _isSysRecPC, Boolean _isManRec, List<InvoiceVoucher> _voucher, RecieptHeader _insuRec, List<RecieptItem> _insuRecDet, out string _sysAddRec)
        {
            Int32 _effect = 0;
            string _AccNo = "";
            Int32 _accSeq = 0;
            Int32 _invSeq = 0;
            Int32 _accLogSeq = 0;
            Int16 _invoiceLine = 1;
            Int32 _schSeq = 0;
            string _cusNo = "";
            string _addSysRec = "";
            string _dpSysRec = "";
            string _buybackinv = string.Empty;
            decimal _wkNo = 0;
            string _smsInsu = "";

            if (_InvItem == null)
            {
                _AccountNo = "Error";
                _docNo = "Error";
                _InvoiceNo = "Error";
                BuyBackInvNo = "Error";
                _sysRecNo = "Error";
                _sysAddRec = "Erro";
                return 0;
            }

            if (_InvItem.Count <= 0)
            {
                _AccountNo = "ErrorCount";
                _docNo = "ErrorCount";
                _InvoiceNo = "ErrorCount";
                BuyBackInvNo = "ErrorCount";
                _sysRecNo = "ErrorCount";
                _sysAddRec = "ErrorCount";
                return 0;
            }

            //using (TransactionScope _tr = new TransactionScope())
            //{
            try
            {
                _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen(); _salesDAL.BeginTransaction();
                _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen(); _inventoryDAL.BeginTransaction();
                _fmsInventoryDal = new FMS_InventoryDAL(); _fmsInventoryDal.ConnectionOpen(); _fmsInventoryDal.BeginTransaction();
                _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen(); _generalDAL.BeginTransaction();

                //Get Invoice and Account No

                //generate invoice # and account no
                MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_InvNo.Aut_moduleid, _InvNo.Aut_direction, _InvNo.Aut_start_char, _InvNo.Aut_cate_tp, _InvNo.Aut_cate_cd, _InvNo.Aut_modify_dt, _InvNo.Aut_year);
                string InvoiceNo = _InvNo.Aut_cate_cd + "-" + _InvNo.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                MasterAutoNumber AccountAuto = _inventoryDAL.GetAutoNumber(_AccAutoNo.Aut_moduleid, _AccAutoNo.Aut_direction, _AccAutoNo.Aut_start_char, _AccAutoNo.Aut_cate_tp, _AccAutoNo.Aut_cate_cd, _AccAutoNo.Aut_modify_dt, _AccAutoNo.Aut_year);
                string AccountNo = _AccAutoNo.Aut_cate_cd + "-" + AccountAuto.Aut_number.ToString("000000", CultureInfo.InvariantCulture);


                //Sales entry create part
                _invSeq = _inventoryDAL.GetSerialID();

                _InvHeader.Sah_seq_no = _invSeq;
                _InvHeader.Sah_inv_no = InvoiceNo;//Convert.ToString(_invSeq);
                _InvHeader.Sah_acc_no = AccountNo;
                _InvHeader.Sah_anal_2 = AccountNo;

                _salesDAL.SaveSalesHeader(_InvHeader);

                //kapila 6/6/2017
                MasterCompany _masterComp = null;
                _masterComp = _generalDAL.GetCompByCode(_InvHeader.Sah_com);
                //Save Invoice Items
                foreach (InvoiceItem _itm in _InvItem)
                {

                    _itm.Sad_seq_no = _invSeq;
                    _itm.Sad_itm_line = _invoiceLine;
                    _itm.Sad_inv_no = InvoiceNo; //Convert.ToString(_invSeq);
                    _salesDAL.SaveSalesItem(_itm);
                    _salesDAL.UpdatePrice(_itm.Sad_itm_cd, _itm.Sad_pbook, _itm.Sad_pb_lvl, _InvHeader.Sah_cus_cd, _itm.Sad_promo_cd, _itm.Sad_seq, _itm.Sad_itm_seq);

                    if (_InvHeader.Sah_dt == DateTime.Now.Date)
                    {
                        List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                        if (_masterComp.MC_TAX_CALC_MTD == "1")     //kapila 22/4/2016
                        {
                            MasterItem _mstItem = _inventoryDAL.GetItem(_InvHeader.Sah_com, _itm.Sad_itm_cd);
                            _itmTax = _salesDAL.GetItemTax_strucbase(_InvHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _mstItem.Mi_anal1);
                        }
                        else
                            _itmTax = _salesDAL.GetItemTax(_InvHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                        foreach (MasterItemTax _one in _itmTax)
                        {
                            decimal _disAmt = 0;
                            InvoiceItemTax _tax = new InvoiceItemTax();
                            _tax.Satx_inv_no = _itm.Sad_inv_no;
                            _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                            _tax.Satx_itm_line = _itm.Sad_itm_line;
                            _disAmt = _itm.Sad_unit_amt * _itm.Sad_disc_rt / 100;
                            if (_itm.Sad_itm_tax_amt == 0)
                            {
                                _tax.Satx_itm_tax_amt = 0;
                            }
                            else
                            {
                                _tax.Satx_itm_tax_amt = Math.Round(((_itm.Sad_unit_rt - _disAmt) * _one.Mict_tax_rate / 100) * _itm.Sad_qty, 0);//_tax.Satx_itm_tax_amt = (_itm.Sad_unit_rt * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                            }
                            _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                            _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                            _tax.Satx_job_line = 0;
                            _tax.Satx_job_no = "";
                            _tax.Satx_seq_no = _invSeq;
                            _salesDAL.SaveSalesItemTax(_tax);
                        }
                    }
                    else
                    {
                        List<MasterItemTax> _itmTaxEff = new List<MasterItemTax>();
                        _itmTaxEff = _salesDAL.GetItemTaxEffDt(_InvHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _InvHeader.Sah_dt);

                        if (_itmTaxEff.Count > 0)
                        {
                            foreach (MasterItemTax _one in _itmTaxEff)
                            {
                                decimal _disAmt = 0;
                                InvoiceItemTax _tax = new InvoiceItemTax();
                                _tax.Satx_inv_no = _itm.Sad_inv_no;
                                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                _tax.Satx_itm_line = _itm.Sad_itm_line;
                                _disAmt = _itm.Sad_unit_amt * _itm.Sad_disc_rt / 100;
                                if (_itm.Sad_itm_tax_amt == 0)
                                {
                                    _tax.Satx_itm_tax_amt = 0;
                                }
                                else
                                {
                                    _tax.Satx_itm_tax_amt = Math.Round(((_itm.Sad_unit_rt - _disAmt) * _one.Mict_tax_rate / 100) * _itm.Sad_qty, 0);//_tax.Satx_itm_tax_amt = (_itm.Sad_unit_rt * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                }
                                _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                _tax.Satx_job_line = 0;
                                _tax.Satx_job_no = "";
                                _tax.Satx_seq_no = _invSeq;
                                _salesDAL.SaveSalesItemTax(_tax);
                            }
                        }
                        else
                        {
                            List<LogMasterItemTax> _itmTax = new List<LogMasterItemTax>();
                            _itmTax = _salesDAL.GetItemTaxLog(_InvHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _InvHeader.Sah_dt);

                            foreach (LogMasterItemTax _one in _itmTax)
                            {
                                decimal _disAmt = 0;
                                InvoiceItemTax _tax = new InvoiceItemTax();
                                _tax.Satx_inv_no = _itm.Sad_inv_no;
                                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                _tax.Satx_itm_line = _itm.Sad_itm_line;
                                _disAmt = _itm.Sad_unit_amt * _itm.Sad_disc_rt / 100;
                                if (_itm.Sad_itm_tax_amt == 0)
                                {
                                    _tax.Satx_itm_tax_amt = 0;
                                }
                                else
                                {
                                    _tax.Satx_itm_tax_amt = Math.Round(((_itm.Sad_unit_rt - _disAmt) * _one.Lict_tax_rate / 100) * _itm.Sad_qty, 0);//_tax.Satx_itm_tax_amt = (_itm.Sad_unit_rt * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                }
                                _tax.Satx_itm_tax_rt = _one.Lict_tax_rate;
                                _tax.Satx_itm_tax_tp = _one.Lict_tax_cd;
                                _tax.Satx_job_line = 0;
                                _tax.Satx_job_no = "";
                                _tax.Satx_seq_no = _invSeq;
                                _salesDAL.SaveSalesItemTax(_tax);
                            }
                        }
                    }
                    //List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                    //_itmTax = _salesDAL.GetItemTax(_InvHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                    //foreach (MasterItemTax _one in _itmTax)
                    //{
                    //    decimal _disAmt = 0;
                    //    InvoiceItemTax _tax = new InvoiceItemTax();
                    //    _tax.Satx_inv_no = _itm.Sad_inv_no;
                    //    _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                    //    _tax.Satx_itm_line = _itm.Sad_itm_line;
                    //    _disAmt = _itm.Sad_unit_amt * _itm.Sad_disc_rt / 100;
                    //    if (_itm.Sad_itm_tax_amt == 0)
                    //    {
                    //        _tax.Satx_itm_tax_amt = 0;
                    //    }
                    //    else
                    //    {
                    //        _tax.Satx_itm_tax_amt = Math.Round(((_itm.Sad_unit_rt - _disAmt) * _one.Mict_tax_rate / 100) * _itm.Sad_qty, 0);//_tax.Satx_itm_tax_amt = (_itm.Sad_unit_rt * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                    //    }
                    //    // _tax.Satx_itm_tax_amt = Math.Round(((_itm.Sad_unit_rt - _disAmt) * _one.Mict_tax_rate / 100) * _itm.Sad_qty, 0);
                    //    _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                    //    _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                    //    _tax.Satx_job_line = 0;
                    //    _tax.Satx_job_no = "";
                    //    _tax.Satx_seq_no = _invSeq;
                    //    _salesDAL.SaveSalesItemTax(_tax);
                    //}

                    InvoiceSerial _ser = new InvoiceSerial();
                    _ser.Sap_seq_no = _invSeq;
                    _ser.Sap_itm_line = _invoiceLine;
                    _ser.Sap_inv_no = InvoiceNo;
                    _ser.Sap_itm_cd = _itm.Sad_itm_cd;
                    _ser.Sap_ser_1 = _itm.Sad_job_no;
                    _ser.Sap_del_loc = _InvHeader.Sah_del_loc;
                    _ser.Sap_ser_line = 0;
                    _salesDAL.SaveSalesSerial(_ser);

                    _invoiceLine += 1;

                }

                //foreach (InvoiceItem _seritm in _InvItem)
                //{
                //    InvoiceSerial _ser = new InvoiceSerial();
                //    _ser.Sap_seq_no = _invSeq;
                //    _ser.Sap_itm_line = _seritm.Sad_itm_line;
                //    _ser.Sap_inv_no = InvoiceNo;
                //    _ser.Sap_itm_cd = _seritm.Sad_itm_cd;
                //    _ser.Sap_ser_1 = _seritm.Sad_job_no;
                //    _ser.Sap_del_loc = _InvHeader.Sah_del_loc;
                //    _ser.Sap_ser_line = 0;
                //    _salesDAL.SaveSalesSerial(_ser);
                //}

                //account create part
                _accSeq = _inventoryDAL.GetSerialID();
                _HPAccount.Hpa_seq_no = _accSeq;
                _HPAccount.Hpa_acc_no = AccountNo;//Convert.ToString(_accSeq);
                _HPAccount.Hpa_seq = AccountAuto.Aut_number;
                _HPAccount.Hpa_invc_no = InvoiceNo;
                _salesDAL.SaveHPAccount(_HPAccount);

                _accLogSeq = _inventoryDAL.GetSerialID();
                _HPAccLog.Hal_seq_no = _accLogSeq;
                _HPAccLog.Hal_acc_no = AccountNo;//Convert.ToString(_accLogSeq);
                _HPAccLog.Hal_seq = AccountAuto.Aut_number;
                _HPAccLog.Hal_invc_no = InvoiceNo;
                _salesDAL.SaveHPAccountLog(_HPAccLog);



                ////generate invoice # and account no
                //MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_InvNo.Aut_moduleid, _InvNo.Aut_direction, _InvNo.Aut_start_char, _InvNo.Aut_cate_tp, _InvNo.Aut_cate_cd, _InvNo.Aut_modify_dt, _InvNo.Aut_year);
                //string InvoiceNo = _InvNo.Aut_cate_cd + "-" + _InvNo.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                //MasterAutoNumber AccountAuto = _inventoryDAL.GetAutoNumber(_AccAutoNo.Aut_moduleid, _AccAutoNo.Aut_direction, _AccAutoNo.Aut_start_char, _AccAutoNo.Aut_cate_tp, _AccAutoNo.Aut_cate_cd, _AccAutoNo.Aut_modify_dt, _AccAutoNo.Aut_year);
                //string AccountNo = _AccAutoNo.Aut_cate_cd + "-" + AccountAuto.Aut_number.ToString("000000", CultureInfo.InvariantCulture);


                // _salesDAL.UpdateInvoiceAcc(InvoiceNo, "-1", _invSeq, 0);
                // _salesDAL.UpdateAccAuto(AccountNo, InvoiceNo, _accSeq, _accLogSeq, AccountAuto.Aut_number);
                //  _salesDAL.UpdateInvAcc(_invSeq, AccountNo);

                //shedule create part
                foreach (HpSheduleDetails _sch in _HPSheduleDetails)
                {
                    _schSeq = _inventoryDAL.GetSerialID();

                    _sch.Hts_seq = _schSeq;
                    _sch.Hts_acc_no = AccountNo;
                    _sch.Hts_veh_insu = 0;
                    //_sch.Hts_tot_val = _sch.Hts_rnt_val - _sch.Hts_ins;
                    _salesDAL.SaveHpShedule(_sch);
                }

                //Tharaka 2015-08-10
                if (receipItemList != null)
                {
                    if (receipItemList.Count > 0)
                    {
                        foreach (RecieptItem _itm in receipItemList)
                        {
                            if (_itm.Sard_pay_tp == "ADVAN")
                            {
                                List<ReceiptItemDetails> _advRecItm = new List<ReceiptItemDetails>();
                                _advRecItm = _salesDAL.GetAdvanReceiptItems(_itm.Sard_ref_no);

                                if (_advRecItm != null)
                                {
                                    if (_advRecItm.Count > 0)
                                    {
                                        foreach (ReceiptItemDetails _advItm in _advRecItm)
                                        {
                                            if (_InvItem.FindAll(x => x.Sad_job_no == _advItm.Sari_serial).Count > 0)
                                            {

                                            }
                                            else
                                            {
                                                Boolean status = _inventoryDAL.Update_inrser_INS_AVAILABLE(_InvHeader.Sah_com, _InvHeader.Sah_del_loc, _advItm.Sari_item, _advItm.Sari_serial, 1);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                //save insuarance
                if (_insu.Hti_ins_val > 0)
                {
                    Int32 _insSeq = _inventoryDAL.GetSerialID();
                    MasterAutoNumber _Insnumber = _inventoryDAL.GetAutoNumber(_InsuRecNo.Aut_moduleid, _InsuRecNo.Aut_direction, _InsuRecNo.Aut_start_char, _InsuRecNo.Aut_cate_tp, _InsuRecNo.Aut_cate_cd, _InsuRecNo.Aut_modify_dt, _InsuRecNo.Aut_year);
                    string _InsNo = _InsuRecNo.Aut_cate_cd + "-" + _InsuRecNo.Aut_start_char + _Insnumber.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_InsuRecNo);

                    _insu.Hti_seq = _insSeq;
                    _insu.Hti_mnl_num = _InsNo;
                    _insu.Hti_acc_num = AccountNo;
                    _insu.Hti_ref = _InsNo;

                    _salesDAL.Save_HpInsu(_insu);


                    Int32 Insuline = 0;
                    //insuarance receipt
                    Int32 _insRecSeq = _inventoryDAL.GetSerialID();

                    _insuRec.Sar_seq_no = _insRecSeq;
                    _insuRec.Sar_acc_no = AccountNo;
                    _insuRec.Sar_receipt_no = _InsNo;

                    _effect = _salesDAL.SaveReceiptHeader(_insuRec);//save receipt header

                    foreach (RecieptItem _itm in _insuRecDet)
                    {

                        Insuline++;
                        _itm.Sard_seq_no = _insRecSeq;
                        _itm.Sard_line_no = Insuline;
                        _itm.Sard_receipt_no = _InsNo;
                        _effect = _salesDAL.SaveReceiptItem(_itm);//save receipt item

                        if (_itm.Sard_pay_tp == "ADVAN")
                        {
                            _salesDAL.UpdateUsedReceiptAmt(_HPAccount.Hpa_com, _HPAccount.Hpa_pc, _itm.Sard_settle_amt, _itm.Sard_pay_tp, _itm.Sard_ref_no);
                        }
                        else if (_itm.Sard_pay_tp == "CRNOTE")
                        {
                            _salesDAL.UpdateCreditNoteBalance(_HPAccount.Hpa_com, _HPAccount.Hpa_pc, _itm.Sard_ref_no, _itm.Sard_settle_amt);
                        }
                    }
                }

                //receipt save part
                DataTable dtESD_EPF_WHT = new DataTable();
                dtESD_EPF_WHT = _salesDAL.Get_ESD_EPF_WHT(_HPAccount.Hpa_com, _HPAccount.Hpa_pc, _HPAccount.Hpa_acc_cre_dt);

                Decimal ESD_rt = 0; Decimal EPF_rt = 0; Decimal WHT_rt = 0;
                if (dtESD_EPF_WHT.Rows.Count > 0)
                {
                    ESD_rt = Convert.ToDecimal(dtESD_EPF_WHT.Rows[0]["MPCH_ESD"]);
                    EPF_rt = Convert.ToDecimal(dtESD_EPF_WHT.Rows[0]["MPCH_EPF"]);
                    WHT_rt = Convert.ToDecimal(dtESD_EPF_WHT.Rows[0]["MPCH_WHT"]);

                }

                string _manrecTp = "";
                foreach (RecieptHeader _recieptHeader in receiptHeaderList)
                {   //create MST_AUTO number for receipt table
                    if (_recieptHeader.Sar_receipt_type == "HPDPS" || _recieptHeader.Sar_receipt_type == "HPARS")
                    {
                        //receipAuto.Aut_start_char = "HPRS";
                        receipAuto.Aut_start_char = "HPRM";
                        _manrecTp = "HPRS";
                    }
                    else
                    {
                        receipAuto.Aut_start_char = "HPRM";
                        _manrecTp = "HPRM";
                    }
                    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(receipAuto.Aut_moduleid, receipAuto.Aut_direction, receipAuto.Aut_start_char, receipAuto.Aut_cate_tp, receipAuto.Aut_cate_cd, receipAuto.Aut_modify_dt, receipAuto.Aut_year);
                    _cusNo = receipAuto.Aut_cate_cd + "-" + receipAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(receipAuto);//update MST_AUTO table


                    _recieptHeader.Sar_receipt_no = _cusNo;

                    if (_recieptHeader.Sar_receipt_type == "HPARS")
                    {
                        _addSysRec = _cusNo;
                    }
                    else
                    {
                        _dpSysRec = _cusNo;
                    }

                    Int32 RecieptSeqNo = 0;
                    RecieptSeqNo = _inventoryDAL.GetSerialID(); //will be assign to header after looping transaction list.
                    //foreach (HpTransaction tr in transactList)
                    //{
                    //    if (tr.Hpt_ref_no == _recieptHeader.Sar_seq_no.ToString())
                    //    {
                    //        tr.Hpt_txn_ref = _recieptHeader.Sar_receipt_no;
                    //    }
                    //    // effect = _salesDAL.Save_HpTransaction(tr);
                    //}

                    Int32 line = 0;
                    foreach (RecieptItem _itm in receipItemList)
                    {
                        if (_recieptHeader.Sar_seq_no == _itm.Sard_seq_no)//have to check the prefix also?
                        {
                            line++;
                            _itm.Sard_seq_no = RecieptSeqNo;
                            _itm.Sard_line_no = line;
                            _itm.Sard_receipt_no = _recieptHeader.Sar_receipt_no;
                            // effect = _salesDAL.SaveReceiptItem(_itm);//save receipt item
                        }
                    }
                    _recieptHeader.Sar_seq_no = RecieptSeqNo;
                    _recieptHeader.Sar_acc_no = AccountNo;
                    //if (isECDgiven)
                    //{
                    //    _recieptHeader.Sar_ref_doc=
                    //}
                    _recieptHeader.Sar_esd_rate = ESD_rt;
                    _recieptHeader.Sar_epf_rate = EPF_rt;
                    _recieptHeader.Sar_wht_rate = WHT_rt;

                    _effect = _salesDAL.SaveReceiptHeader(_recieptHeader);//save receipt header

                    MasterCompany _masterCompany = _generalDAL.GetCompByCode(_recieptHeader.Sar_com_cd);  //kapila 27/4/2016
                    if (_masterCompany.MC_IS_SCM2_FMS == 1)
                        _effect = _inventoryDAL.UpdateManualDocNo(_loc, _manrecTp, Convert.ToInt32(_recieptHeader.Sar_manual_ref_no), _recieptHeader.Sar_receipt_no);//do the updation at the gnt_man_doc_dt
                    else
                        _effect = _fmsInventoryDal.UpdateManualDocNo(_loc, _manrecTp, Convert.ToInt32(_recieptHeader.Sar_manual_ref_no), _recieptHeader.Sar_receipt_no);//do the updation at the gnt_man_doc_dt

                    //UPDATE approved manual pages
                    if (_isSysRecPC == true)
                    {
                        if (_isManRec == true)
                        {
                            _effect = _salesDAL.UpdateUsedAppManRec(_recieptHeader.Sar_com_cd, _recieptHeader.Sar_prefix, _recieptHeader.Sar_profit_center_cd, _recieptHeader.Sar_manual_ref_no, _recieptHeader.Sar_ref_doc, _recieptHeader.Sar_create_by, "ARQT033");
                        }
                    }

                }
                //save transactons list
                //foreach (HpTransaction tr in transactList)
                //{ // TODO:
                //    //create MST_AUTO number for transaction table (for each tx object)
                //    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(tranxAuto.Aut_moduleid, tranxAuto.Aut_direction, tranxAuto.Aut_start_char, tranxAuto.Aut_cate_tp, tranxAuto.Aut_cate_cd, tranxAuto.Aut_modify_dt, tranxAuto.Aut_year);
                //    string _cusNo = tranxAuto.Aut_cate_cd + "-" + tranxAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                //    _inventoryDAL.UpdateAutoNumber(tranxAuto);//update MST_AUTO table

                //    tr.Hpt_ref_no = _cusNo;
                //    //assign auto number to the tx obj.
                //    tr.Hpt_seq = _inventoryDAL.GetSerialID();
                //    _salesDAL.Save_HpTransaction(tr);

                //    if (isECDgiven)
                //    {
                //        //MasterAutoNumber _numberECD = _inventoryDAL.GetAutoNumber(tranxAuto.Aut_moduleid, tranxAuto.Aut_direction, tranxAuto.Aut_start_char, tranxAuto.Aut_cate_tp, tranxAuto.Aut_cate_cd, tranxAuto.Aut_modify_dt, tranxAuto.Aut_year);
                //        //string _cusNoECD = tranxAuto.Aut_cate_tp + "-" + tranxAuto.Aut_start_char + "-" + _numberECD.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                //        //_inventoryDAL.UpdateAutoNumber(tranxAuto);//update MST_AUTO table

                //        //tr.Hpt_ref_no = _cusNoECD;
                //        ////assign auto number to the tx obj.
                //        //tr.Hpt_seq = _inventoryDAL.GetSerialID();

                //        //tr.Hpt_txn_tp = "ECD";
                //        //tr.Hpt_dbt= Convert.ToDecimal(listECD_info[4]);
                //        //_salesDAL.Save_HpTransaction(tr);

                //    }
                //}

                //if (isECDgiven)
                //{
                //    HpTransaction tr = transactList[0];

                //    MasterAutoNumber _numberECD = _inventoryDAL.GetAutoNumber(tranxAuto.Aut_moduleid, tranxAuto.Aut_direction, tranxAuto.Aut_start_char, tranxAuto.Aut_cate_tp, tranxAuto.Aut_cate_cd, tranxAuto.Aut_modify_dt, tranxAuto.Aut_year);
                //    string _cusNoECD = tranxAuto.Aut_cate_cd + "-" + tranxAuto.Aut_start_char + "-" + _numberECD.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                //    _inventoryDAL.UpdateAutoNumber(tranxAuto);//update MST_AUTO table

                //    tr.Hpt_ref_no = _cusNoECD;
                //    //assign auto number to the tx obj.
                //    tr.Hpt_seq = _inventoryDAL.GetSerialID();

                //    tr.Hpt_txn_tp = "ECD";
                //    tr.Hpt_crdt = Convert.ToDecimal(listECD_info[4]); //ecd value
                //    tr.Hpt_dbt = 0; //Convert.ToDecimal(listECD_info[4]); //ecd value
                //    _salesDAL.Save_HpTransaction(tr);

                //}
                //save receipt detali list
                foreach (RecieptItem rec_itm in receipItemList)
                {

                    _salesDAL.SaveReceiptItem(rec_itm);//save receipt item

                    if (rec_itm.Sard_pay_tp == "ADVAN")
                    {
                        _salesDAL.UpdateUsedReceiptAmt(_HPAccount.Hpa_com, _HPAccount.Hpa_pc, rec_itm.Sard_settle_amt, rec_itm.Sard_pay_tp, rec_itm.Sard_ref_no);
                    }
                    else if (rec_itm.Sard_pay_tp == "CRNOTE")
                    {
                        _salesDAL.UpdateCreditNoteBalance(_HPAccount.Hpa_com, _HPAccount.Hpa_pc, rec_itm.Sard_ref_no, rec_itm.Sard_settle_amt);
                    }
                    if (rec_itm.Sard_pay_tp == "GVO") // Nadeeka 05-06-2015
                    {
                        _fmsInventoryDal.UpdateRedeemVoucher(_HPAccount.Hpa_com, _HPAccount.Hpa_pc, rec_itm.Sard_sim_ser, rec_itm.Sard_ref_no, rec_itm.Sard_cc_tp, rec_itm.Sard_anal_2, _HPAccount.Hpa_cre_by, rec_itm.Sard_settle_amt);
                    }
                }


                //save transaction details
                foreach (HpTransaction _Txn in TxnList)
                {
                    MasterAutoNumber _Txnnumber = _inventoryDAL.GetAutoNumber(TxnAuto.Aut_moduleid, TxnAuto.Aut_direction, TxnAuto.Aut_start_char, TxnAuto.Aut_cate_tp, TxnAuto.Aut_cate_cd, TxnAuto.Aut_modify_dt, TxnAuto.Aut_year);
                    string _txnNo = TxnAuto.Aut_cate_cd + "-" + TxnAuto.Aut_start_char + "-" + _Txnnumber.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(TxnAuto);

                    _Txn.Hpt_ref_no = _txnNo;

                    Int32 TxnSeqNo = 0;
                    TxnSeqNo = _inventoryDAL.GetSerialID();
                    _Txn.Hpt_seq = TxnSeqNo;
                    _Txn.Hpt_acc_no = AccountNo;
                    _effect = _salesDAL.Save_HpTransaction(_Txn);

                }

                //save account customers
                foreach (HpCustomer _AccCus in _HpAccCust)
                {
                    Int32 CustSeqNo = 0;
                    CustSeqNo = _inventoryDAL.GetSerialID();
                    _AccCus.Htc_seq = CustSeqNo;
                    _AccCus.Htc_acc_no = AccountNo;
                    _effect = _salesDAL.SaveAccCustomer(_AccCus);

                    if (_AccCus.Htc_adr_tp == 1)
                    {
                        _effect = _salesDAL.UpdateReqAppByFunc(_HPAccount.Hpa_com, _HPAccount.Hpa_pc, "ARQT031", _AccCus.Htc_cust_cd, _HPAccount.Hpa_cre_by);

                        // NADEEKA 29-09-2015 (MULTIPLE ACCOUNTS APPROVAL)
                        _effect = _salesDAL.UpdateReqAppByFunc(_HPAccount.Hpa_com, _HPAccount.Hpa_pc, "ARQT003", _AccCus.Htc_cust_cd, _HPAccount.Hpa_cre_by);
                    }

                }



                //if (isECDgiven == true)
                //{
                //    string AccNo = receiptHeaderList[0].Sar_acc_no;
                //    string company = receiptHeaderList[0].Sar_com_cd;
                //    string pc = receiptHeaderList[0].Sar_profit_center_cd;

                //    // _salesDAL.Update_hp_accountStatus(company, pc, AccNo, "C", 1, Convert.ToString(listECD_info[3]), Convert.ToDateTime(listECD_info[1]).Date);//status is changed to 'C' when closing accounts.
                //    _salesDAL.Update_hp_accountStatus(company, pc, AccNo, "C", 1, Convert.ToString(listECD_info[3]), Convert.ToDateTime(listECD_info[1]).Date);//status is changed to 'C' when closing accounts.

                //    //listECD_info[0] = (string)lblAccNo.Text.Trim();//Account Number
                //    //listECD_info[1] = Convert.ToDateTime(txtReceiptDate.Text.Trim()).Date; //Reciept date(HPA_CLS_DT/ HED_USE_DT )
                //    //listECD_info[2] = 1;//ECD status (HPA_ECD_STUS )
                //    //listECD_info[3] = ECD_type; // ECD Type(HPA_ECD_TP )N - Normal, S - Special, V - Voucher basis, A 
                //    //listECD_info[4] = HED_ECD_VAL;// ECD value (discount)
                //    //listECD_info[5] = HED_ECD_CLS_VAL; //Collected amount (Tot receipt amt);
                //    //listECD_info[6] = HED_VOU_NO; //voucher number (if voucher is given in ecd)

                //    if (Convert.ToString(listECD_info[3]) == "V")
                //    {
                //        //do updations in HPR_ECD_DEFN table
                //        //        Update_hp_Voucher_Status(string com, string pc, string accountNo, string voucherNo, Decimal ECDvalue, Decimal collectAmount , DateTime date_)
                //        _salesDAL.Update_hp_Voucher_Status(company, pc, AccNo, Convert.ToString(listECD_info[6]), Convert.ToDecimal(listECD_info[4]), Convert.ToDecimal(listECD_info[5]), Convert.ToDateTime(listECD_info[1]).Date);
                //    }
                //    else if (Convert.ToString(listECD_info[3]) == "A")
                //    {
                //        RequestApprovalHeader _rapphdr = new RequestApprovalHeader();
                //        foreach (RecieptHeader _hdr in receiptHeaderList)
                //        {
                //            _rapphdr.Grah_com = company;
                //            _rapphdr.Grah_loc = pc;
                //            _rapphdr.Grah_fuc_cd = AccNo;
                //            _rapphdr.Grah_ref = Convert.ToString(listECD_info[7]);
                //            _rapphdr.Grah_app_stus = "F";
                //            _rapphdr.Grah_app_lvl = -1;
                //            _rapphdr.Grah_app_by = Convert.ToString(listECD_info[8]);
                //            break;
                //        }

                //        _generalDAL.UpdateMidApprovalStatus(_rapphdr);

                //    }

                //}
                if (_buybacklist != null) if (_buybacklist.Count > 0)
                    {
                        InventoryBLL _bll = new InventoryBLL();
                        _bll._salesDAL = _salesDAL;
                        _bll._inventoryDAL = _inventoryDAL;
                        _bll._FMSinventoryDAL = _fmsInventoryDal;
                        _bll._inventoryRepDAL = _inventoryRepDAL;
                        _buybackheader.Ith_manual_ref = InvoiceNo;
                        _buybackheader.Ith_acc_no = AccountNo;
                        _bll.SaveInwardScanSerial(_buybackheader, _buybacklist, null);
                        _bll.UpdateInventoryAutoNumber(_buybackheader, _buybackauto, "+", out  _buybackinv);
                        _inventoryDAL.UpdateMovementDocNo_Other(_buybackheader.Ith_seq_no, _buybackinv);
                    }


                if (_mgrCommAmt > 0)
                {
                    //save service chg. commission for remitance
                    RemitanceSummaryDetail _remDet = new RemitanceSummaryDetail();
                    _remDet.Rem_com = _HPAccount.Hpa_com;
                    _remDet.Rem_pc = _HPAccount.Hpa_pc;
                    _remDet.Rem_dt = _HPAccount.Hpa_acc_cre_dt;
                    _remDet.Rem_sec = "02";
                    _remDet.Rem_cd = "065";
                    _remDet.Rem_sh_desc = "Claim Service Charge";
                    _remDet.Rem_lg_desc = "Claim Service Charge";
                    _remDet.Rem_val = _mgrCommAmt;
                    _remDet.Rem_val_final = _mgrCommAmt;
                    int _weekNo = _generalDAL.GetWeek(Convert.ToDateTime(_HPAccount.Hpa_acc_cre_dt).Date, out _wkNo, _HPAccount.Hpa_com);
                    _remDet.Rem_week = _wkNo + "S";
                    _remDet.Rem_ref_no = AccountNo;
                    _remDet.Rem_rmk = InvoiceNo;
                    _remDet.Rem_cr_acc = null;
                    _remDet.Rem_db_acc = null;
                    _remDet.Rem_del_alw = false;
                    _remDet.Rem_cre_by = _HPAccount.Hpa_cre_by;
                    _remDet.Rem_cre_dt = _HPAccount.Hpa_cre_dt;
                    _remDet.Rem_is_sos = true;
                    _remDet.Rem_is_dayend = true;
                    _remDet.Rem_is_sun = true;
                    _remDet.Rem_cat = 17;
                    _remDet.Rem_add = 0;
                    _remDet.Rem_ded = 0;
                    _remDet.Rem_net = _mgrCommAmt;
                    _remDet.Rem_epf = 0;
                    _remDet.Rem_esd = 0;
                    _remDet.Rem_wht = 0;
                    _remDet.Rem_add_fin = 0;
                    _remDet.Rem_ded_fin = 0;
                    _remDet.Rem_net_fin = _mgrCommAmt;
                    _remDet.Rem_rmk_fin = InvoiceNo;
                    _remDet.Rem_bnk_cd = null;
                    _remDet.Rem_is_rem_sum = true;
                    _salesDAL.SaveRemSummaryForFinalCreditComm(_remDet);
                }

                MasterBusinessEntity _businessCompany = new MasterBusinessEntity();
                _businessCompany = _salesDAL.GetActiveBusinessCompanyDetail(_InvHeader.Sah_com, _InvHeader.Sah_cus_cd, null, null, "C");

                //add by tharanga 2018/10/29 inst:: Block voucher generation - Credit note ::Mon 29/Oct/2018 12:28 PM
                int count = receipItemList.Where(r => r.Sard_pay_tp == "CRNOTE").Count();
                if (count <= 0)
                {
                    #region Generate Promotion Vouchers :: Chamal 26-Jun-2014 - copied by darshana 26-09-2014
                    if (_voucher == null) _voucher = new List<InvoiceVoucher>();

                    bool _promoVouApplied = false;
                    foreach (InvoiceItem _itm in _InvItem)
                    {
                        MasterItem _mitm = _inventoryDAL.GetItem(_InvHeader.Sah_com, _itm.Sad_itm_cd);
                        if (_mitm.Mi_is_ser1 != -1)
                        {
                            for (int i = 1; i <= _itm.Sad_qty; i++)
                            {

                                //kapila 27/1/2017
                                List<PromoVoucherDefinition> _proVouList = new List<PromoVoucherDefinition>();
                                if (_InvHeader.Sah_pdi_req == 1)  //based on credit note
                                {
                                    InvoiceHeader _invoice = _salesDAL.GetInvoiceHeaderDetails(_InvHeader.Sah_structure_seq);
                                    DataTable _dtReq = _generalDAL.SearchrequestAppDetByRef(_invoice.Sah_anal_3);
                                    DateTime _dtReqPara = _InvHeader.Sah_dt.Date;
                                    if (_dtReq.Rows.Count > 0)
                                        _dtReqPara = Convert.ToDateTime(_dtReq.Rows[0]["grad_date_param"]);

                                    _proVouList = GetPromotionalVouchersDefinition(_InvHeader.Sah_com, _InvHeader.Sah_inv_tp, _InvHeader.Sah_pc, _dtReqPara, _itm.Sad_pbook, _itm.Sad_pb_lvl, _mitm.Mi_brand, _mitm.Mi_cate_1, _mitm.Mi_cate_2, _itm.Sad_itm_cd, false);
                                }
                                else
                                    _proVouList = GetPromotionalVouchersDefinition(_InvHeader.Sah_com, _InvHeader.Sah_inv_tp, _InvHeader.Sah_pc, _InvHeader.Sah_dt.Date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _mitm.Mi_brand, _mitm.Mi_cate_1, _mitm.Mi_cate_2, _itm.Sad_itm_cd, false);


                                if (_proVouList != null)
                                {
                                    if (_proVouList.Count > 0)
                                    {
                                        foreach (PromoVoucherDefinition _proitm in _proVouList)
                                        {
                                            InvoiceVoucher _vou = new InvoiceVoucher();
                                            GiftVoucherPages _gvou = new GiftVoucherPages();

                                            DataTable _result = _generalDAL.GetProVoutype(_InvHeader.Sah_com, _proitm.Spd_vou_cd);

                                            if (_result != null || _result.Rows.Count > 0)
                                            {
                                                int _option = 0;
                                                int.TryParse(_result.Rows[0]["spt_opt"].ToString(), out _option);

                                                //if (_result.Rows[0]["spt_opt"].ToString() != null)
                                                if (_option >= 0)
                                                {
                                                    //if (Convert.ToInt32(_result.Rows[0]["spt_opt"].ToString()) == 2) //Sanjeewa 2016-06-01 Check voucher generate at Invoice
                                                    if (_option == 3)
                                                    {
                                                        goto Ter;
                                                    }
                                                }
                                                if (Convert.ToInt32(_result.Rows[0]["spt_is_qtywise"].ToString()) == 0)
                                                {
                                                    //consider total invoice value
                                                    if (Convert.ToInt32(_result.Rows[0]["spt_min_val"].ToString()) <= _HPAccount.Hpa_cash_val)
                                                    {
                                                        var _vouExsit = _voucher.Where(x => x.Stvo_prefix == _proitm.Spd_vou_cd).Select(x => x.Stvo_prefix).ToList();
                                                        if (_vouExsit != null && _vouExsit.Count > 0)
                                                        {
                                                            goto Ter;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        goto Ter;
                                                    }
                                                }
                                                else
                                                {
                                                    if (Convert.ToInt32(_result.Rows[0]["spt_min_val"].ToString()) <= _itm.Sad_tot_amt)
                                                    {

                                                    }
                                                    else
                                                    {
                                                        goto Ter;
                                                    }
                                                }
                                            }

                                            _vou.Stvo_inv_no = InvoiceNo;
                                            _vou.Stvo_prefix = _proitm.Spd_vou_cd;
                                            _vou.Stvo_bookno = _proitm.Spd_seq;
                                            _vou.Stvo_pageno = _salesDAL.GetPromotionVoucherNo();
                                            _vou.Stvo_gv_itm = _proitm.Spd_vou_cd;
                                            _vou.Stvo_price = _proitm.Spd_disc;
                                            _vou.Stvo_itm_cd = _itm.Sad_itm_cd;
                                            _vou.Stvo_cre_by = "PRO_VOU";
                                            if (_proitm.Spd_disc_isrt == true)
                                            {
                                                _vou.Stvo_stus = 1;
                                                _gvou.Gvp_gv_tp = "RATE";
                                            }
                                            else
                                            {
                                                _vou.Stvo_stus = 0;
                                                _gvou.Gvp_gv_tp = "VALUE";
                                            }
                                            if (Convert.ToInt32(_result.Rows[0]["spt_opt"].ToString()) == 1)
                                            {
                                                _gvou.Gvp_gv_prefix = "P_GV";
                                            }
                                            else
                                            {
                                                _gvou.Gvp_gv_prefix = "GV";
                                            }
                                            _gvou.Gvp_amt = _proitm.Spd_disc;
                                            _gvou.Gvp_app_by = _InvHeader.Sah_cre_by;
                                            _gvou.Gvp_bal_amt = _proitm.Spd_disc;  // 0;  kapila 3/11/2016
                                            _gvou.Gvp_book = _itm.Sad_itm_line;
                                            _gvou.Gvp_can_by = "";
                                            _gvou.Gvp_can_dt = DateTime.Now.Date;
                                            _gvou.Gvp_com = _InvHeader.Sah_com;
                                            _gvou.Gvp_cre_by = _InvHeader.Sah_cre_by;
                                            _gvou.Gvp_cre_dt = DateTime.Now.Date;
                                            _gvou.Gvp_cus_add1 = _InvHeader.Sah_cus_add1;
                                            _gvou.Gvp_cus_add2 = _InvHeader.Sah_cus_add2;
                                            _gvou.Gvp_cus_cd = _InvHeader.Sah_cus_cd;
                                            _gvou.Gvp_cus_mob = _businessCompany.Mbe_mob;
                                            _gvou.Gvp_cus_name = _InvHeader.Sah_cus_name;
                                            _gvou.Gvp_from = "-";
                                            _gvou.Gvp_gv_cd = _proitm.Spd_vou_cd;
                                            // _gvou.Gvp_gv_prefix = "P_GV";
                                            _gvou.Gvp_is_allow_promo = false;
                                            _gvou.Gvp_issu_itm = 0;
                                            _gvou.Gvp_issue_by = "";
                                            _gvou.Gvp_issue_dt = DateTime.Now.Date;
                                            _gvou.Gvp_line = i;
                                            _gvou.Gvp_mod_by = "";
                                            _gvou.Gvp_mod_dt = DateTime.Now.Date;
                                            _gvou.Gvp_noof_itm = 1;
                                            _gvou.Gvp_oth_ref = InvoiceNo;// _proitm.Spd_circular_no;
                                            _gvou.Gvp_page = _vou.Stvo_pageno;
                                            _gvou.Gvp_pc = _InvHeader.Sah_pc;
                                            _gvou.Gvp_ref = _proitm.Spd_seq.ToString();
                                            _gvou.Gvp_stus = "A";
                                            _gvou.Gvp_valid_from = _InvHeader.Sah_dt.Date;
                                            //_gvou.Gvp_valid_to = _InvHeader.Sah_dt.Date.AddMonths(_proitm.Spd_period);
                                            _gvou.Gvp_valid_to = _InvHeader.Sah_dt.Date.AddDays(_proitm.Spd_period); //Chamal 24-09-2014
                                            _gvou.Gvp_cus_nic = _businessCompany.Mbe_nic;

                                            _voucher.Add(_vou);
                                            #region validate mobilr to gift voucher
                                            SalesBLL _SalesBLLnew = new SalesBLL();
                                            Boolean isvalid_mob = ValidateMobileNo(_businessCompany.Mbe_mob);

                                            #endregion
                                            //if (isvalid_mob == true)//commnet by tharanga 2018/08/19 instruction by darshana ans sanjeewa.
                                            //{
                                            _fmsInventoryDal.SaveGiftVoucherPages(_gvou);
                                            _promoVouApplied = true;
                                        //}
                                        //else
                                        //{
                                        //    _promoVouApplied = false;
                                        //}

                                            //_fmsInventoryDal.SaveGiftVoucherPages(_gvou);
                                        //_promoVouApplied = true;
                                        //break;
                                        Ter: int k = 0;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (_promoVouApplied == true)
                    {
                        if (_voucher != null)
                        {
                            if (_voucher.Count > 0)
                            {
                                //var _vouProCodes = _voucher.Where(x => x.Stvo_cre_by == "PRO_VOU").Select(x => x.Stvo_prefix).Distinct().ToList();
                                var _vouProCodes = _voucher.Where(x => x.Stvo_cre_by == "PRO_VOU").Select(x => x.Stvo_bookno).Distinct().ToList();
                                if (_vouProCodes != null && _vouProCodes.Count > 0)
                                {
                                    foreach (var _cd in _vouProCodes)
                                    {
                                        DataTable _dtothCom = _salesDAL.GetProVouAllowCompanies(_InvHeader.Sah_com, _cd);

                                        if (_dtothCom.Rows.Count > 0)
                                        {
                                            foreach (DataRow drow in _dtothCom.Rows)
                                            {
                                                MasterBusinessEntity _othCust = new MasterBusinessEntity();
                                                _othCust = _businessCompany;
                                                _othCust.Mbe_cd = _InvHeader.Sah_cus_cd;
                                                _othCust.Mbe_com = drow["R_COM"].ToString();
                                                if (!string.IsNullOrEmpty(_othCust.Mbe_nic) || !string.IsNullOrEmpty(_othCust.Mbe_mob))
                                                {
                                                    MasterBusinessEntity _nic = _salesDAL.GetActiveBusinessCompanyDetail(_InvHeader.Sah_com, string.Empty, _othCust.Mbe_nic, string.Empty, "C");
                                                    MasterBusinessEntity _mobile = _salesDAL.GetActiveBusinessCompanyDetail(_InvHeader.Sah_com, string.Empty, string.Empty, _othCust.Mbe_mob, "C");
                                                    if (_nic.Mbe_cd == null && _mobile.Mbe_cd == null)
                                                    {
                                                        int _isUpdate = _salesDAL.UpdateBusinessEntityProfile(_othCust, 1);
                                                        if (_isUpdate <= 0) _salesDAL.SaveBusinessEntityDetail(_othCust);
                                                    }
                                                }

                                            }
                                        }

                                    }
                                }
                            }
                        }
                    }

                    //sms send to customer for voucher______
                    if (_promoVouApplied == true)
                    {
                        if (_voucher != null)
                        {
                            if (_voucher.Count > 0)
                            {
                                string _mobNo = "";
                                string _cusNe = "";
                                var _vouProCodes = _voucher.Where(x => x.Stvo_cre_by == "PRO_VOU").Select(x => x.Stvo_prefix).Distinct().ToList();
                                if (_vouProCodes != null && _vouProCodes.Count > 0)
                                {
                                    foreach (var _cd in _vouProCodes)
                                    {
                                        DataTable _result = _generalDAL.GetProVoutype(_InvHeader.Sah_com, _cd);

                                        if (_result != null || _result.Rows.Count > 0)
                                        {
                                            //updated by akila 2017/11/13
                                            int _smsAlert = 0;
                                            int.TryParse(_result.Rows[0]["spt_sms_alert"].ToString(), out _smsAlert);

                                            //if (Convert.ToInt32(_result.Rows[0]["spt_sms_alert"].ToString()) == 1)
                                            if (_smsAlert == 1)
                                            {
                                                if (!string.IsNullOrEmpty(_result.Rows[0]["spt_cus_pur_sms"].ToString()))
                                                {
                                                    List<MasterBusinessEntity> _cusdet1 = new List<MasterBusinessEntity>();
                                                    _cusdet1 = _salesDAL.GetActiveCustomerDetailList(_InvHeader.Sah_com, _InvHeader.Sah_cus_cd, null, null, "C");
                                                    foreach (MasterBusinessEntity newcus in _cusdet1)
                                                    {
                                                        _mobNo = newcus.Mbe_mob;
                                                        _cusNe = newcus.Mbe_name;
                                                    }

                                                    if (!string.IsNullOrEmpty(_mobNo))
                                                    {
                                                        if (_mobNo.Length >= 9)
                                                        {

                                                            //string _mg = _result.Rows[0]["spt_cus_pur_sms"].ToString();
                                                            string _mg = _result.Rows[0]["spt_cus_red_sms"].ToString() + " Voucher : " + _voucher.FirstOrDefault().Stvo_pageno;
                                                            OutSMS _out = new OutSMS();
                                                            _out.Msg = _mg;
                                                            _out.Msgstatus = 0;
                                                            _out.Msgtype = "S";
                                                            _out.Receivedtime = DateTime.Now;
                                                            _out.Receiver = "CUSTOMER";
                                                            //_out.Receiverphno = _info.Mmi_mobi_no;

                                                            if (_mobNo.Length == 10)
                                                            {
                                                                _out.Receiverphno = "+94" + _mobNo.Substring(1, 9);
                                                                _out.Senderphno = "+94" + _mobNo.Substring(1, 9);
                                                            }
                                                            if (_mobNo.Length == 9)
                                                            {
                                                                _out.Receiverphno = "+94" + _mobNo;
                                                                _out.Senderphno = "+94" + _mobNo;
                                                            }

                                                            _out.Refdocno = InvoiceNo;
                                                            _out.Sender = _InvHeader.Sah_cre_by;
                                                            _out.Createtime = DateTime.Now;
                                                            _generalDAL.SaveSMSOut(_out);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    #endregion

                    #region Send SMS for Promotion Vouchers not generated :: Sanjeewa 2016-06-01

                    DataTable _addvoudtl = _generalDAL.GetAdditionalProVoutype(_InvHeader.Sah_com, _HPAccount.Hpa_sch_cd);

                    if (_addvoudtl != null || _addvoudtl.Rows.Count > 0)
                    {
                        foreach (DataRow drow in _addvoudtl.Rows)
                        {
                            DataTable _result = _generalDAL.GetProVoutype(_InvHeader.Sah_com, drow["hap_cd"].ToString());
                            string _mobNo = "";
                            string _cusNe = "";

                            if (_result != null || _result.Rows.Count > 0)
                            {
                                //updated by akila 2017/11/13
                                int _option = 0;
                                int.TryParse(_result.Rows[0]["spt_opt"].ToString(), out _option);
                                //if (_result.Rows[0]["spt_opt"].ToString() != null)
                                if (_option >= 0)
                                {
                                    //if (Convert.ToInt32(_result.Rows[0]["spt_opt"].ToString()) == 2)
                                    if (_option == 2)
                                    {
                                        //updated by akila 2017/11/13
                                        int _smsAlert = 0;
                                        int.TryParse(_result.Rows[0]["spt_sms_alert"].ToString(), out _smsAlert);

                                        //if (Convert.ToInt32(_result.Rows[0]["spt_sms_alert"].ToString()) == 1)
                                        if (_smsAlert == 1)
                                        {
                                            if (!string.IsNullOrEmpty(_result.Rows[0]["spt_cus_pur_sms"].ToString()))
                                            {
                                                List<MasterBusinessEntity> _cusdet1 = new List<MasterBusinessEntity>();
                                                _cusdet1 = _salesDAL.GetActiveCustomerDetailList(_InvHeader.Sah_com, _InvHeader.Sah_cus_cd, null, null, "C");
                                                foreach (MasterBusinessEntity newcus in _cusdet1)
                                                {
                                                    _mobNo = newcus.Mbe_mob;
                                                    _cusNe = newcus.Mbe_name;
                                                }

                                                if (!string.IsNullOrEmpty(_mobNo))
                                                {
                                                    if (_mobNo.Length >= 9)
                                                    {

                                                        string _mg = _result.Rows[0]["spt_cus_pur_sms"].ToString();
                                                        OutSMS _out = new OutSMS();
                                                        _out.Msg = _mg;
                                                        _out.Msgstatus = 0;
                                                        _out.Msgtype = "S";
                                                        _out.Receivedtime = DateTime.Now;
                                                        _out.Receiver = "CUSTOMER";
                                                        //_out.Receiverphno = _info.Mmi_mobi_no;

                                                        if (_mobNo.Length == 10)
                                                        {
                                                            _out.Receiverphno = "+94" + _mobNo.Substring(1, 9);
                                                            _out.Senderphno = "+94" + _mobNo.Substring(1, 9);
                                                        }
                                                        if (_mobNo.Length == 9)
                                                        {
                                                            _out.Receiverphno = "+94" + _mobNo;
                                                            _out.Senderphno = "+94" + _mobNo;
                                                        }

                                                        _out.Refdocno = InvoiceNo;
                                                        _out.Sender = _InvHeader.Sah_cre_by;
                                                        _out.Createtime = DateTime.Now;
                                                        _generalDAL.SaveSMSOut(_out);
                                                    }
                                                }
                                            }
                                        }

                                        _salesDAL.UpdateAccountAsVouPending(_HPAccount.Hpa_acc_no, _result.Rows[0]["spt_cond"].ToString());
                                    }
                                }
                            }

                        }
                    }



                    #endregion

                    #region Save/Update Voucher
                    if (_voucher != null)
                        if (_voucher.Count > 0)
                        {
                            _voucher.ForEach(x => x.Stvo_inv_no = InvoiceNo);
                            UpdateInvoiceGiftVoucher(_InvHeader.Sah_com, _InvHeader.Sah_pc, _cusNo, _InvHeader.Sah_cus_name, _InvHeader.Sah_d_cust_add1, _InvHeader.Sah_d_cust_add2, null, _InvHeader.Sah_dt, InvoiceNo, _InvHeader.Sah_cre_by, _voucher, _salesDAL, _fmsInventoryDal);
                        }
                    #endregion
                }


                if (_HPAccount.Hpa_val_03 != 0)
                {
                    _fmsInventoryDal.UpdateGiftVouUsedStatus(_HPAccount.Hpa_com, _HPAccount.Hpa_val_03.ToString(), _HPAccount.Hpa_cre_by, "F");

                    DataTable _vouDet = _salesDAL.GetPVDet("P_GV", _HPAccount.Hpa_val_03);
                    if (_vouDet != null || _vouDet.Rows.Count > 0)
                    {
                        DataTable _result = _generalDAL.GetProVoutype(null, _vouDet.Rows[0]["gvp_gv_cd"].ToString());
                        if (_result != null || _result.Rows.Count > 0)
                        {
                            //updated by akila 2017/11/13
                            int _smsAlert = 0;
                            int.TryParse(_result.Rows[0]["spt_sms_alert"].ToString(), out _smsAlert);

                            //if (Convert.ToInt32(_result.Rows[0]["spt_sms_alert"].ToString()) == 1)
                            if (_smsAlert == 1)
                            {
                                if (!string.IsNullOrEmpty(_result.Rows[0]["spt_cus_red_sms"].ToString()))
                                {
                                    string _mobNo = "";
                                    string _cusNe = "";

                                    List<MasterBusinessEntity> _cusdet1 = new List<MasterBusinessEntity>();
                                    _cusdet1 = _salesDAL.GetActiveCustomerDetailList(_InvHeader.Sah_com, _InvHeader.Sah_cus_cd, null, null, "C");
                                    foreach (MasterBusinessEntity newcus in _cusdet1)
                                    {
                                        _mobNo = newcus.Mbe_mob;
                                        _cusNe = newcus.Mbe_name;
                                    }

                                    if (!string.IsNullOrEmpty(_mobNo))
                                    {
                                        if (_mobNo.Length >= 9)
                                        {

                                            string _mg = _result.Rows[0]["spt_cus_red_sms"].ToString();
                                            OutSMS _out = new OutSMS();
                                            _out.Msg = _mg;
                                            _out.Msgstatus = 0;
                                            _out.Msgtype = "S";
                                            _out.Receivedtime = DateTime.Now;
                                            _out.Receiver = "CUSTOMER";
                                            //_out.Receiverphno = _info.Mmi_mobi_no;

                                            if (_mobNo.Length == 10)
                                            {
                                                _out.Receiverphno = "+94" + _mobNo.Substring(1, 9);
                                                _out.Senderphno = "+94" + _mobNo.Substring(1, 9);
                                            }
                                            if (_mobNo.Length == 9)
                                            {
                                                _out.Receiverphno = "+94" + _mobNo;
                                                _out.Senderphno = "+94" + _mobNo;
                                            }

                                            _out.Refdocno = InvoiceNo;
                                            _out.Sender = _InvHeader.Sah_cre_by;
                                            _out.Createtime = DateTime.Now;
                                            _generalDAL.SaveSMSOut(_out);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                _inventoryDAL.UpdateAutoNumber(_InvNo);
                _inventoryDAL.UpdateAutoNumber(_AccAutoNo);

                if (_InvHeader.Sah_ref_doc != null)
                {
                    _salesDAL.UpdateAccLogByNewAcc(_InvHeader.Sah_com, _InvHeader.Sah_pc, _InvHeader.Sah_ref_doc, AccountNo);
                }

                if (string.IsNullOrEmpty(_buybackinv))
                {
                    _AccNo = InvoiceNo + " , " + AccountNo;
                }
                else
                {
                    _AccNo = InvoiceNo + " , " + AccountNo + " , " + _buybackinv;
                }


                _InvoiceNo = InvoiceNo;
                _AccountNo = AccountNo;
                BuyBackInvNo = _buybackinv;
                _sysRecNo = _dpSysRec;
                _sysAddRec = _addSysRec;

                string _pcName = "";
                string _mobilNo = "";
                string _cusName = "";
                decimal _insuAmt = 0;

                // MasterCompany _masterComp = null;
                // _masterComp = _generalDAL.GetCompByCode(_InvHeader.Sah_com);
                if (_masterComp != null)
                {
                    _smsInsu = _masterComp.Mc_anal3.ToString();
                }
                else
                {
                    _smsInsu = "Insuarance";
                }

                DataTable dt = _generalDAL.CheckProfitCenter(_InvHeader.Sah_com, _InvHeader.Sah_pc);
                if (dt.Rows.Count > 0)
                {
                    _pcName = Convert.ToString(dt.Rows[0]["mpc_desc"]);
                }


                foreach (HpCustomer _AccCus in _HpAccCust)
                {
                    List<MasterBusinessEntity> _cusdet = new List<MasterBusinessEntity>();
                    if (_AccCus.Htc_adr_tp == 1 && _AccCus.Htc_cust_tp == "C")
                    {
                        //_cusdet = _salesDAL.GetCustomerDetailList(_InvHeader.Sah_com, _AccCus.Htc_cust_cd, null, null, "C");
                        //Edit By Chamal 10/04/2014 (Disscuss with Dar)
                        _cusdet = _salesDAL.GetActiveCustomerDetailList(_InvHeader.Sah_com, _AccCus.Htc_cust_cd, null, null, "C");
                        foreach (MasterBusinessEntity _cus in _cusdet)
                        {
                            _mobilNo = _cus.Mbe_mob;
                            _cusName = _cus.Mbe_name;

                            if (!string.IsNullOrEmpty(_mobilNo))
                            {
                                if (_mobilNo.Length >= 9)
                                {
                                    _insuAmt = _HPAccount.Hpa_init_ins + _HPAccount.Hpa_inst_ins;
                                    //thank u for buying [product] on Hire purchase [loc] S/R on [date]  (A/c [accNo]).Tot value [total] & diriya [diriya]-[com]-0112565293
                                    string _mg = "Thank u for the purchased items on HP A/C: " + _AccountNo + " @ " + _pcName + " S/R. HP value Rs.: " + _HPAccount.Hpa_hp_val + " and " + _smsInsu + " Rs.: " + _insuAmt + "-" + _generalDAL.GetHPCustContactPhoneNo();
                                    OutSMS _out = new OutSMS();
                                    _out.Msg = _mg;
                                    _out.Msgstatus = 0;
                                    _out.Msgtype = "S";
                                    _out.Receivedtime = DateTime.Now;
                                    _out.Receiver = "CUSTOMER";
                                    //_out.Receiverphno = _info.Mmi_mobi_no;

                                    if (_mobilNo.Length == 10)
                                    {
                                        _out.Receiverphno = "+94" + _mobilNo.Substring(1, 9);
                                        _out.Senderphno = "+94" + _mobilNo.Substring(1, 9);
                                    }
                                    if (_mobilNo.Length == 9)
                                    {
                                        _out.Receiverphno = "+94" + _mobilNo;
                                        _out.Senderphno = "+94" + _mobilNo;
                                    }

                                    _out.Refdocno = _InvoiceNo;
                                    _out.Sender = _InvHeader.Sah_cre_by;
                                    _out.Createtime = DateTime.Now;
                                    _generalDAL.SaveSMSOut(_out);
                                }
                            }
                        }
                    }
                    else if (_AccCus.Htc_adr_tp == 1 && _AccCus.Htc_cust_tp == "G")
                    {
                        //_cusdet = _salesDAL.GetCustomerDetailList(_InvHeader.Sah_com, _AccCus.Htc_cust_cd, null, null, "C");
                        //Edit By Chamal 10/04/2014 (Disscuss with Dar)
                        _cusdet = _salesDAL.GetActiveCustomerDetailList(_InvHeader.Sah_com, _AccCus.Htc_cust_cd, null, null, "C");
                        foreach (MasterBusinessEntity _cus in _cusdet)
                        {
                            _mobilNo = _cus.Mbe_mob;
                            if (!string.IsNullOrEmpty(_mobilNo))
                            {
                                if (_mobilNo.Length >= 9)
                                {
                                    _insuAmt = _HPAccount.Hpa_init_ins + _HPAccount.Hpa_inst_ins;

                                    //thank u for buying [product] on Hire purchase [loc] S/R on [date]  (A/c [accNo]).Tot value [total] & diriya [diriya]-[com]-0112565293
                                    string _mg = "You are signed as a guarantor for HP A/c : " + _AccountNo + " at " + _pcName + " S/R. HP value Rs. : " + _HPAccount.Hpa_hp_val + " And " + _smsInsu + " Rs.: " + _insuAmt + "-" + _generalDAL.GetHPCustContactPhoneNo();
                                    OutSMS _out = new OutSMS();
                                    _out.Msg = _mg;
                                    _out.Msgstatus = 0;
                                    _out.Msgtype = "S";
                                    _out.Receivedtime = DateTime.Now;
                                    _out.Receiver = "GUARANTOR";
                                    //_out.Receiverphno = _info.Mmi_mobi_no;

                                    if (_mobilNo.Length == 10)
                                    {
                                        _out.Receiverphno = "+94" + _mobilNo.Substring(1, 9);
                                        _out.Senderphno = "+94" + _mobilNo.Substring(1, 9);
                                    }
                                    if (_mobilNo.Length == 9)
                                    {
                                        _out.Receiverphno = "+94" + _mobilNo;
                                        _out.Senderphno = "+94" + _mobilNo;
                                    }

                                    _out.Refdocno = _InvoiceNo;
                                    _out.Sender = _InvHeader.Sah_cre_by;
                                    _out.Createtime = DateTime.Now;
                                    _generalDAL.SaveSMSOut(_out);
                                }
                            }
                        }
                    }
                }
                //_salesDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                //_fmsInventoryDal.ConnectionClose();
                //_generalDAL.ConnectionClose();
                #region add loyalty points by tharanga 2018/11/06
                if (!string.IsNullOrEmpty(_InvHeader.Sah_anal_6))
                {
                    List<InvoiceSerial> _invoiceSeriallist = new List<InvoiceSerial>();
                    if (_InvItem.Count > 0)
                    {
                        foreach (InvoiceItem item in _InvItem)
                        {
                            InvoiceSerial _InvoiceSerial = new InvoiceSerial();
                            _InvoiceSerial.Sap_del_loc = _loc;
                            _InvoiceSerial.Sap_inv_no = item.Sad_inv_no;
                            _InvoiceSerial.Sap_itm_cd = item.Sad_itm_cd;
                            _InvoiceSerial.Sap_seq_no = item.Sad_seq;
                            _InvoiceSerial.Sap_ser_line = 0;
                            _invoiceSeriallist.Add(_InvoiceSerial);
                        }
                    }

                    DataTable _loldetail = _salesDAL.GetLoyaltyCardDetail(_InvHeader.Sah_cus_cd, _InvHeader.Sah_anal_6);
                    string _loltype = string.Empty;
                    string _membership = string.Empty;
                    if (_loldetail != null && _loldetail.Rows.Count >= 0)
                    {
                        _loltype = _loldetail.Rows[0].Field<string>("salcm_loty_tp");
                        _membership = _loldetail.Rows[0].Field<string>("salcm_cus_spec");
                    }
                    decimal _points = GetLoyaltyPoint(_loltype, _membership, _InvHeader.Sah_com, _InvHeader.Sah_pc, _InvHeader.Sah_dt, _InvItem, _invoiceSeriallist, receipItemList, _salesDAL, _inventoryDAL, _InvHeader.Sah_inv_tp);
                    if (_points > 0)
                    {
                        // _salDAL.UpdateLoyaltyCardPoint(_invoiceHeader.Sah_cus_cd, _invoiceHeader.Sah_anal_6, _points, _invoiceHeader.Sah_cre_by);
                        InvoiceLoyalty _lol = new InvoiceLoyalty();
                        _lol.Stlt_inv_no = Convert.ToString(_InvHeader.Sah_inv_no);
                        _lol.Stlt_pt = _points;
                        _lol.Stlt_seq_no = _InvHeader.Sah_seq_no;
                        _salesDAL.SaveInvoiceLoyalty(_lol);
                    }
                }
                #endregion
                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();
                _generalDAL.TransactionCommit();

                _effect = 1;
                //_tr.Complete();
            }
            catch (Exception err)
            {
                _effect = -1;
                _AccNo = "ERROR : " + err.Message.ToString();
                _AccountNo = "ERROR : " + err.Message.ToString();
                _InvoiceNo = "ERROR : " + err.Message.ToString();
                BuyBackInvNo = "ERROR : " + err.Message.ToString();
                _sysRecNo = "ERROR : " + err.Message.ToString();
                _sysAddRec = "ERROR : " + err.Message.ToString();
                //_AccNo = documentNo;
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                _generalDAL.TransactionRollback();
            }

            _docNo = _AccNo;
            return _effect;
        }


        //Written by darshana  - 11/04/2014 - create hp account & sales
        public Int32 CreateHPAccountNew(HpAccount _HPAccount, MasterAutoNumber _AccAutoNo, InvoiceHeader _InvHeader, List<InvoiceItem> _InvItem, MasterAutoNumber _InvNo, HPAccountLog _HPAccLog, List<HpSheduleDetails> _HPSheduleDetails, List<RecieptHeader> receiptHeaderList, List<RecieptItem> receipItemList, MasterAutoNumber receipAuto, List<HpTransaction> TxnList, MasterAutoNumber TxnAuto, List<HpCustomer> _HpAccCust, HpInsurance _insu, MasterAutoNumber _InsuRecNo, string _loc, out string _docNo, out string _AccountNo, out string _InvoiceNo, InventoryHeader _buybackheader, MasterAutoNumber _buybackauto, List<ReptPickSerials> _buybacklist, out string BuyBackInvNo, decimal _mgrCommAmt, out string _sysRecNo, Boolean _isSysRecPC, Boolean _isManRec, List<InvoiceVoucher> _voucher, RecieptHeader _insuRec, List<RecieptItem> _insuRecDet, out string _sysAddRec)
        {
            Int32 _effect = 0;
            string _AccNo = "";
            Int32 _accSeq = 0;
            Int32 _invSeq = 0;
            Int32 _accLogSeq = 0;
            Int16 _invoiceLine = 1;
            Int32 _schSeq = 0;
            string _hprecNo = "";
            string _addSysRec = "";
            string _dpSysRec = "";
            string _buybackinv = string.Empty;
            decimal _wkNo = 0;
            string _smsInsu = "";

            if (_InvItem == null)
            {
                _AccountNo = "Error";
                _docNo = "Error";
                _InvoiceNo = "Error";
                BuyBackInvNo = "Error";
                _sysRecNo = "Error";
                _sysAddRec = "Erro";
                return 0;
            }

            if (_InvItem.Count <= 0)
            {
                _AccountNo = "ErrorCount";
                _docNo = "ErrorCount";
                _InvoiceNo = "ErrorCount";
                BuyBackInvNo = "ErrorCount";
                _sysRecNo = "ErrorCount";
                _sysAddRec = "ErrorCount";
                return 0;
            }

            //using (TransactionScope _tr = new TransactionScope())
            //{
            try
            {
                _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen(); _salesDAL.BeginTransaction();
                _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen(); _inventoryDAL.BeginTransaction();
                _fmsInventoryDal = new FMS_InventoryDAL(); _fmsInventoryDal.ConnectionOpen(); _fmsInventoryDal.BeginTransaction();
                _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen(); _generalDAL.BeginTransaction();

                //Sales entry create part
                _invSeq = _inventoryDAL.GetSerialID();

                _InvHeader.Sah_seq_no = _invSeq;
                _InvHeader.Sah_inv_no = Convert.ToString(_invSeq);

                _salesDAL.SaveSalesHeader(_InvHeader);

                //Save Invoice Items
                foreach (InvoiceItem _itm in _InvItem)
                {

                    _itm.Sad_seq_no = _invSeq;
                    _itm.Sad_itm_line = _invoiceLine;
                    _itm.Sad_inv_no = Convert.ToString(_invSeq);
                    _salesDAL.SaveSalesItem(_itm);
                    _salesDAL.UpdatePrice(_itm.Sad_itm_cd, _itm.Sad_pbook, _itm.Sad_pb_lvl, _InvHeader.Sah_cus_cd, _itm.Sad_promo_cd, _itm.Sad_seq, _itm.Sad_itm_seq);

                    if (_InvHeader.Sah_dt == DateTime.Now.Date)
                    {
                        List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                        _itmTax = _salesDAL.GetItemTax(_InvHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                        foreach (MasterItemTax _one in _itmTax)
                        {
                            decimal _disAmt = 0;
                            InvoiceItemTax _tax = new InvoiceItemTax();
                            _tax.Satx_inv_no = _itm.Sad_inv_no;
                            _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                            _tax.Satx_itm_line = _itm.Sad_itm_line;
                            _disAmt = _itm.Sad_unit_amt * _itm.Sad_disc_rt / 100;
                            if (_itm.Sad_itm_tax_amt == 0)
                            {
                                _tax.Satx_itm_tax_amt = 0;
                            }
                            else
                            {
                                _tax.Satx_itm_tax_amt = Math.Round(((_itm.Sad_unit_rt - _disAmt) * _one.Mict_tax_rate / 100) * _itm.Sad_qty, 0);//_tax.Satx_itm_tax_amt = (_itm.Sad_unit_rt * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                            }
                            _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                            _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                            _tax.Satx_job_line = 0;
                            _tax.Satx_job_no = "";
                            _tax.Satx_seq_no = _invSeq;
                            _salesDAL.SaveSalesItemTax(_tax);
                        }
                    }
                    else
                    {
                        List<MasterItemTax> _itmTaxEff = new List<MasterItemTax>();
                        _itmTaxEff = _salesDAL.GetItemTaxEffDt(_InvHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _InvHeader.Sah_dt);

                        if (_itmTaxEff.Count > 0)
                        {
                            foreach (MasterItemTax _one in _itmTaxEff)
                            {
                                decimal _disAmt = 0;
                                InvoiceItemTax _tax = new InvoiceItemTax();
                                _tax.Satx_inv_no = _itm.Sad_inv_no;
                                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                _tax.Satx_itm_line = _itm.Sad_itm_line;
                                _disAmt = _itm.Sad_unit_amt * _itm.Sad_disc_rt / 100;
                                if (_itm.Sad_itm_tax_amt == 0)
                                {
                                    _tax.Satx_itm_tax_amt = 0;
                                }
                                else
                                {
                                    _tax.Satx_itm_tax_amt = Math.Round(((_itm.Sad_unit_rt - _disAmt) * _one.Mict_tax_rate / 100) * _itm.Sad_qty, 0);//_tax.Satx_itm_tax_amt = (_itm.Sad_unit_rt * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                }
                                _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                _tax.Satx_job_line = 0;
                                _tax.Satx_job_no = "";
                                _tax.Satx_seq_no = _invSeq;
                                _salesDAL.SaveSalesItemTax(_tax);
                            }
                        }
                        else
                        {
                            List<LogMasterItemTax> _itmTax = new List<LogMasterItemTax>();
                            _itmTax = _salesDAL.GetItemTaxLog(_InvHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _InvHeader.Sah_dt);

                            foreach (LogMasterItemTax _one in _itmTax)
                            {
                                decimal _disAmt = 0;
                                InvoiceItemTax _tax = new InvoiceItemTax();
                                _tax.Satx_inv_no = _itm.Sad_inv_no;
                                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                _tax.Satx_itm_line = _itm.Sad_itm_line;
                                _disAmt = _itm.Sad_unit_amt * _itm.Sad_disc_rt / 100;
                                if (_itm.Sad_itm_tax_amt == 0)
                                {
                                    _tax.Satx_itm_tax_amt = 0;
                                }
                                else
                                {
                                    _tax.Satx_itm_tax_amt = Math.Round(((_itm.Sad_unit_rt - _disAmt) * _one.Lict_tax_rate / 100) * _itm.Sad_qty, 0);//_tax.Satx_itm_tax_amt = (_itm.Sad_unit_rt * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                }
                                _tax.Satx_itm_tax_rt = _one.Lict_tax_rate;
                                _tax.Satx_itm_tax_tp = _one.Lict_tax_cd;
                                _tax.Satx_job_line = 0;
                                _tax.Satx_job_no = "";
                                _tax.Satx_seq_no = _invSeq;
                                _salesDAL.SaveSalesItemTax(_tax);
                            }
                        }
                    }
                    //List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                    //_itmTax = _salesDAL.GetItemTax(_InvHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                    //foreach (MasterItemTax _one in _itmTax)
                    //{
                    //    decimal _disAmt = 0;
                    //    InvoiceItemTax _tax = new InvoiceItemTax();
                    //    _tax.Satx_inv_no = _itm.Sad_inv_no;
                    //    _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                    //    _tax.Satx_itm_line = _itm.Sad_itm_line;
                    //    _disAmt = _itm.Sad_unit_amt * _itm.Sad_disc_rt / 100;
                    //    if (_itm.Sad_itm_tax_amt == 0)
                    //    {
                    //        _tax.Satx_itm_tax_amt = 0;
                    //    }
                    //    else
                    //    {
                    //        _tax.Satx_itm_tax_amt = Math.Round(((_itm.Sad_unit_rt - _disAmt) * _one.Mict_tax_rate / 100) * _itm.Sad_qty, 0);//_tax.Satx_itm_tax_amt = (_itm.Sad_unit_rt * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                    //    }
                    //    //_tax.Satx_itm_tax_amt = Math.Round(((_itm.Sad_unit_rt - _disAmt) * _one.Mict_tax_rate / 100) * _itm.Sad_qty, 0);//_tax.Satx_itm_tax_amt = (_itm.Sad_unit_rt * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                    //    _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                    //    _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                    //    _tax.Satx_job_line = 0;
                    //    _tax.Satx_job_no = "";
                    //    _tax.Satx_seq_no = _invSeq;
                    //    _salesDAL.SaveSalesItemTax(_tax);
                    //}
                    _invoiceLine += 1;

                }


                //account create part
                _accSeq = _inventoryDAL.GetSerialID();
                _HPAccount.Hpa_seq_no = _accSeq;
                _HPAccount.Hpa_acc_no = Convert.ToString(_accSeq);
                _salesDAL.SaveHPAccount(_HPAccount);

                _accLogSeq = _inventoryDAL.GetSerialID();
                _HPAccLog.Hal_seq_no = _accLogSeq;
                _HPAccLog.Hal_acc_no = Convert.ToString(_accLogSeq);
                _salesDAL.SaveHPAccountLog(_HPAccLog);



                ////generate invoice # and account no
                //MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_InvNo.Aut_moduleid, _InvNo.Aut_direction, _InvNo.Aut_start_char, _InvNo.Aut_cate_tp, _InvNo.Aut_cate_cd, _InvNo.Aut_modify_dt, _InvNo.Aut_year);
                //string InvoiceNo = _InvNo.Aut_cate_cd + "-" + _InvNo.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                //MasterAutoNumber AccountAuto = _inventoryDAL.GetAutoNumber(_AccAutoNo.Aut_moduleid, _AccAutoNo.Aut_direction, _AccAutoNo.Aut_start_char, _AccAutoNo.Aut_cate_tp, _AccAutoNo.Aut_cate_cd, _AccAutoNo.Aut_modify_dt, _AccAutoNo.Aut_year);
                //string AccountNo = _AccAutoNo.Aut_cate_cd + "-" + AccountAuto.Aut_number.ToString("000000", CultureInfo.InvariantCulture);

                //shedule create part
                foreach (HpSheduleDetails _sch in _HPSheduleDetails)
                {
                    _schSeq = _inventoryDAL.GetSerialID();

                    _sch.Hts_seq = _schSeq;
                    _sch.Hts_acc_no = _accSeq.ToString();
                    _sch.Hts_veh_insu = 0;
                    //_sch.Hts_tot_val = _sch.Hts_rnt_val - _sch.Hts_ins;
                    _salesDAL.SaveHpShedule(_sch);
                }

                //_salesDAL.UpdateInvoiceAcc(InvoiceNo, "-1", _invSeq, 0);// merge _salesDAL.UpdateInvAcc(_invSeq, AccountNo);
                //_salesDAL.UpdateAccAuto(AccountNo, InvoiceNo, _accSeq, _accLogSeq, AccountAuto.Aut_number);
                //_salesDAL.UpdateInvAcc(_invSeq, AccountNo);

                int _insSeq = 0;

                //save insuarance
                if (_insu.Hti_ins_val > 0)
                {
                    _insSeq = _inventoryDAL.GetSerialID();
                    //MasterAutoNumber _Insnumber = _inventoryDAL.GetAutoNumber(_InsuRecNo.Aut_moduleid, _InsuRecNo.Aut_direction, _InsuRecNo.Aut_start_char, _InsuRecNo.Aut_cate_tp, _InsuRecNo.Aut_cate_cd, _InsuRecNo.Aut_modify_dt, _InsuRecNo.Aut_year);
                    //string _InsNo = _InsuRecNo.Aut_cate_cd + "-" + _InsuRecNo.Aut_start_char + _Insnumber.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    //_inventoryDAL.UpdateAutoNumber(_InsuRecNo);

                    _insu.Hti_seq = _insSeq;
                    _insu.Hti_mnl_num = _insSeq.ToString(); //_InsNo;
                    _insu.Hti_acc_num = _accSeq.ToString(); ; //AccountNo;
                    _insu.Hti_ref = _insSeq.ToString(); //_InsNo;

                    _salesDAL.Save_HpInsu(_insu);


                    Int32 Insuline = 0;
                    //insuarance receipt
                    Int32 _insRecSeq = _insSeq;//_inventoryDAL.GetSerialID();

                    _insuRec.Sar_seq_no = _insRecSeq;
                    _insuRec.Sar_acc_no = _insRecSeq.ToString(); //AccountNo;
                    _insuRec.Sar_receipt_no = _insRecSeq.ToString(); //_InsNo;

                    _effect = _salesDAL.SaveReceiptHeader(_insuRec);//save receipt header

                    foreach (RecieptItem _itm in _insuRecDet)
                    {

                        Insuline++;
                        _itm.Sard_seq_no = _insRecSeq;
                        _itm.Sard_line_no = Insuline;
                        _itm.Sard_receipt_no = _insRecSeq.ToString(); //_InsNo;
                        _effect = _salesDAL.SaveReceiptItem(_itm);//save receipt item

                        if (_itm.Sard_pay_tp == "ADVAN")
                        {
                            _salesDAL.UpdateUsedReceiptAmt(_HPAccount.Hpa_com, _HPAccount.Hpa_pc, _itm.Sard_settle_amt, _itm.Sard_pay_tp, _itm.Sard_ref_no);
                        }
                        else if (_itm.Sard_pay_tp == "CRNOTE")
                        {
                            _salesDAL.UpdateCreditNoteBalance(_HPAccount.Hpa_com, _HPAccount.Hpa_pc, _itm.Sard_ref_no, _itm.Sard_settle_amt);
                        }

                    }
                }

                //receipt save part
                DataTable dtESD_EPF_WHT = new DataTable();
                dtESD_EPF_WHT = _salesDAL.Get_ESD_EPF_WHT(_HPAccount.Hpa_com, _HPAccount.Hpa_pc, _HPAccount.Hpa_acc_cre_dt);

                Decimal ESD_rt = 0; Decimal EPF_rt = 0; Decimal WHT_rt = 0;
                if (dtESD_EPF_WHT.Rows.Count > 0)
                {
                    ESD_rt = Convert.ToDecimal(dtESD_EPF_WHT.Rows[0]["MPCH_ESD"]);
                    EPF_rt = Convert.ToDecimal(dtESD_EPF_WHT.Rows[0]["MPCH_EPF"]);
                    WHT_rt = Convert.ToDecimal(dtESD_EPF_WHT.Rows[0]["MPCH_WHT"]);

                }

                string _manrecTp = "";
                DataTable _manRecSeqTable = new DataTable();
                _manRecSeqTable.Columns.Add("SeqNo", typeof(int));
                _manRecSeqTable.Columns.Add("Startchar", typeof(string));
                _manRecSeqTable.Columns.Add("ManRecType", typeof(string));
                _manRecSeqTable.Columns.Add("RecType", typeof(string));
                _manRecSeqTable.Columns.Add("ManualRef", typeof(string));

                foreach (RecieptHeader _recieptHeader in receiptHeaderList)
                {   //create MST_AUTO number for receipt table
                    if (_recieptHeader.Sar_receipt_type == "HPDPS" || _recieptHeader.Sar_receipt_type == "HPARS")
                    {
                        //receipAuto.Aut_start_char = "HPRS";
                        receipAuto.Aut_start_char = "HPRM";
                        _manrecTp = "HPRS";
                    }
                    else
                    {
                        receipAuto.Aut_start_char = "HPRM";
                        _manrecTp = "HPRM";
                    }
                    //MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(receipAuto.Aut_moduleid, receipAuto.Aut_direction, receipAuto.Aut_start_char, receipAuto.Aut_cate_tp, receipAuto.Aut_cate_cd, receipAuto.Aut_modify_dt, receipAuto.Aut_year);
                    //_cusNo = receipAuto.Aut_cate_cd + "-" + receipAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    //_inventoryDAL.UpdateAutoNumber(receipAuto);//update MST_AUTO table

                    //_recieptHeader.Sar_receipt_no = _cusNo;


                    if (_recieptHeader.Sar_receipt_type == "HPARS")
                    {
                        _addSysRec = _hprecNo;
                    }
                    else
                    {
                        _dpSysRec = _hprecNo;
                    }

                    Int32 RecieptSeqNo = 0;
                    RecieptSeqNo = _inventoryDAL.GetSerialID(); //will be assign to header after looping transaction list.
                    _recieptHeader.Sar_receipt_no = RecieptSeqNo.ToString();
                    _manRecSeqTable.Rows.Add(RecieptSeqNo, receipAuto.Aut_start_char.ToString(), _manrecTp.ToString(), _recieptHeader.Sar_receipt_type.ToString(), _recieptHeader.Sar_manual_ref_no.ToString());

                    //foreach (HpTransaction tr in transactList)
                    //{
                    //    if (tr.Hpt_ref_no == _recieptHeader.Sar_seq_no.ToString())
                    //    {
                    //        tr.Hpt_txn_ref = _recieptHeader.Sar_receipt_no;
                    //    }
                    //    // effect = _salesDAL.Save_HpTransaction(tr);
                    //}

                    Int32 line = 0;
                    foreach (RecieptItem _itm in receipItemList)
                    {
                        if (_recieptHeader.Sar_seq_no == _itm.Sard_seq_no)//have to check the prefix also?
                        {
                            line++;
                            _itm.Sard_seq_no = RecieptSeqNo;
                            _itm.Sard_line_no = line;
                            _itm.Sard_receipt_no = _recieptHeader.Sar_receipt_no;
                            // effect = _salesDAL.SaveReceiptItem(_itm);//save receipt item
                        }
                    }
                    _recieptHeader.Sar_seq_no = RecieptSeqNo;
                    _recieptHeader.Sar_acc_no = _accSeq.ToString();
                    //if (isECDgiven)
                    //{
                    //    _recieptHeader.Sar_ref_doc=
                    //}
                    _recieptHeader.Sar_esd_rate = ESD_rt;
                    _recieptHeader.Sar_epf_rate = EPF_rt;
                    _recieptHeader.Sar_wht_rate = WHT_rt;

                    _effect = _salesDAL.SaveReceiptHeader(_recieptHeader);//save receipt header
                    //_effect = _fmsInventoryDal.UpdateManualDocNo(_loc, _manrecTp, Convert.ToInt32(_recieptHeader.Sar_manual_ref_no), _recieptHeader.Sar_receipt_no);//do the updation at the gnt_man_doc_dt

                    //UPDATE approved manual pages
                    if (_isSysRecPC == true)
                    {
                        if (_isManRec == true)
                        {
                            _effect = _salesDAL.UpdateUsedAppManRec(_recieptHeader.Sar_com_cd, _recieptHeader.Sar_prefix, _recieptHeader.Sar_profit_center_cd, _recieptHeader.Sar_manual_ref_no, _recieptHeader.Sar_ref_doc, _recieptHeader.Sar_create_by, "ARQT033");
                        }
                    }

                }
                #region old code 0
                //save transactons list
                //foreach (HpTransaction tr in transactList)
                //{ // TODO:
                //    //create MST_AUTO number for transaction table (for each tx object)
                //    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(tranxAuto.Aut_moduleid, tranxAuto.Aut_direction, tranxAuto.Aut_start_char, tranxAuto.Aut_cate_tp, tranxAuto.Aut_cate_cd, tranxAuto.Aut_modify_dt, tranxAuto.Aut_year);
                //    string _cusNo = tranxAuto.Aut_cate_cd + "-" + tranxAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                //    _inventoryDAL.UpdateAutoNumber(tranxAuto);//update MST_AUTO table

                //    tr.Hpt_ref_no = _cusNo;
                //    //assign auto number to the tx obj.
                //    tr.Hpt_seq = _inventoryDAL.GetSerialID();
                //    _salesDAL.Save_HpTransaction(tr);

                //    if (isECDgiven)
                //    {
                //        //MasterAutoNumber _numberECD = _inventoryDAL.GetAutoNumber(tranxAuto.Aut_moduleid, tranxAuto.Aut_direction, tranxAuto.Aut_start_char, tranxAuto.Aut_cate_tp, tranxAuto.Aut_cate_cd, tranxAuto.Aut_modify_dt, tranxAuto.Aut_year);
                //        //string _cusNoECD = tranxAuto.Aut_cate_tp + "-" + tranxAuto.Aut_start_char + "-" + _numberECD.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                //        //_inventoryDAL.UpdateAutoNumber(tranxAuto);//update MST_AUTO table

                //        //tr.Hpt_ref_no = _cusNoECD;
                //        ////assign auto number to the tx obj.
                //        //tr.Hpt_seq = _inventoryDAL.GetSerialID();

                //        //tr.Hpt_txn_tp = "ECD";
                //        //tr.Hpt_dbt= Convert.ToDecimal(listECD_info[4]);
                //        //_salesDAL.Save_HpTransaction(tr);

                //    }
                //}

                //if (isECDgiven)
                //{
                //    HpTransaction tr = transactList[0];

                //    MasterAutoNumber _numberECD = _inventoryDAL.GetAutoNumber(tranxAuto.Aut_moduleid, tranxAuto.Aut_direction, tranxAuto.Aut_start_char, tranxAuto.Aut_cate_tp, tranxAuto.Aut_cate_cd, tranxAuto.Aut_modify_dt, tranxAuto.Aut_year);
                //    string _cusNoECD = tranxAuto.Aut_cate_cd + "-" + tranxAuto.Aut_start_char + "-" + _numberECD.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                //    _inventoryDAL.UpdateAutoNumber(tranxAuto);//update MST_AUTO table

                //    tr.Hpt_ref_no = _cusNoECD;
                //    //assign auto number to the tx obj.
                //    tr.Hpt_seq = _inventoryDAL.GetSerialID();

                //    tr.Hpt_txn_tp = "ECD";
                //    tr.Hpt_crdt = Convert.ToDecimal(listECD_info[4]); //ecd value
                //    tr.Hpt_dbt = 0; //Convert.ToDecimal(listECD_info[4]); //ecd value
                //    _salesDAL.Save_HpTransaction(tr);

                //}
                #endregion
                //save receipt detali list
                foreach (RecieptItem rec_itm in receipItemList)
                {

                    _salesDAL.SaveReceiptItem(rec_itm);//save receipt item

                    if (rec_itm.Sard_pay_tp == "ADVAN")
                    {
                        _salesDAL.UpdateUsedReceiptAmt(_HPAccount.Hpa_com, _HPAccount.Hpa_pc, rec_itm.Sard_settle_amt, rec_itm.Sard_pay_tp, rec_itm.Sard_ref_no);
                    }
                    else if (rec_itm.Sard_pay_tp == "CRNOTE")
                    {
                        _salesDAL.UpdateCreditNoteBalance(_HPAccount.Hpa_com, _HPAccount.Hpa_pc, rec_itm.Sard_ref_no, rec_itm.Sard_settle_amt);
                    }
                    if (rec_itm.Sard_pay_tp == "GVO") // Nadeeka 05-06-2015
                    {
                        _fmsInventoryDal.UpdateRedeemVoucher(_HPAccount.Hpa_com, _HPAccount.Hpa_pc, rec_itm.Sard_sim_ser, rec_itm.Sard_ref_no, rec_itm.Sard_cc_tp, rec_itm.Sard_anal_2, _HPAccount.Hpa_cre_by, rec_itm.Sard_settle_amt);
                    }
                }


                //save transaction details
                DataTable _hptTxnTable = new DataTable();
                _hptTxnTable.Columns.Add("SeqNo", typeof(int));
                foreach (HpTransaction _Txn in TxnList)
                {
                    //MasterAutoNumber _Txnnumber = _inventoryDAL.GetAutoNumber(TxnAuto.Aut_moduleid, TxnAuto.Aut_direction, TxnAuto.Aut_start_char, TxnAuto.Aut_cate_tp, TxnAuto.Aut_cate_cd, TxnAuto.Aut_modify_dt, TxnAuto.Aut_year);
                    //string _txnNo = TxnAuto.Aut_cate_cd + "-" + TxnAuto.Aut_start_char + "-" + _Txnnumber.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    //_inventoryDAL.UpdateAutoNumber(TxnAuto);
                    //_Txn.Hpt_ref_no = _txnNo;

                    Int32 TxnSeqNo = 0;
                    TxnSeqNo = _inventoryDAL.GetSerialID();
                    _Txn.Hpt_seq = TxnSeqNo;
                    _Txn.Hpt_ref_no = TxnSeqNo.ToString();
                    _Txn.Hpt_acc_no = _accSeq.ToString();
                    _effect = _salesDAL.Save_HpTransaction(_Txn);
                    _hptTxnTable.Rows.Add(TxnSeqNo);
                }

                //save account customers
                foreach (HpCustomer _AccCus in _HpAccCust)
                {
                    Int32 CustSeqNo = 0;
                    CustSeqNo = _inventoryDAL.GetSerialID();
                    _AccCus.Htc_seq = CustSeqNo;
                    _AccCus.Htc_acc_no = _accSeq.ToString();
                    _effect = _salesDAL.SaveAccCustomer(_AccCus);

                    if (_AccCus.Htc_adr_tp == 1)
                    {
                        _effect = _salesDAL.UpdateReqAppByFunc(_HPAccount.Hpa_com, _HPAccount.Hpa_pc, "ARQT031", _AccCus.Htc_cust_cd, _HPAccount.Hpa_cre_by);

                        // NADEEKA 29-09-2015 (MULTIPLE ACCOUNTS APPROVAL)
                        _effect = _salesDAL.UpdateReqAppByFunc(_HPAccount.Hpa_com, _HPAccount.Hpa_pc, "ARQT003", _AccCus.Htc_cust_cd, _HPAccount.Hpa_cre_by);
                    }

                }

                #region old code
                //if (isECDgiven == true)
                //{
                //    string AccNo = receiptHeaderList[0].Sar_acc_no;
                //    string company = receiptHeaderList[0].Sar_com_cd;
                //    string pc = receiptHeaderList[0].Sar_profit_center_cd;

                //    // _salesDAL.Update_hp_accountStatus(company, pc, AccNo, "C", 1, Convert.ToString(listECD_info[3]), Convert.ToDateTime(listECD_info[1]).Date);//status is changed to 'C' when closing accounts.
                //    _salesDAL.Update_hp_accountStatus(company, pc, AccNo, "C", 1, Convert.ToString(listECD_info[3]), Convert.ToDateTime(listECD_info[1]).Date);//status is changed to 'C' when closing accounts.

                //    //listECD_info[0] = (string)lblAccNo.Text.Trim();//Account Number
                //    //listECD_info[1] = Convert.ToDateTime(txtReceiptDate.Text.Trim()).Date; //Reciept date(HPA_CLS_DT/ HED_USE_DT )
                //    //listECD_info[2] = 1;//ECD status (HPA_ECD_STUS )
                //    //listECD_info[3] = ECD_type; // ECD Type(HPA_ECD_TP )N - Normal, S - Special, V - Voucher basis, A 
                //    //listECD_info[4] = HED_ECD_VAL;// ECD value (discount)
                //    //listECD_info[5] = HED_ECD_CLS_VAL; //Collected amount (Tot receipt amt);
                //    //listECD_info[6] = HED_VOU_NO; //voucher number (if voucher is givenin ecd)

                //    if (Convert.ToString(listECD_info[3]) == "V")
                //    {
                //        //do updations in HPR_ECD_DEFN table
                //        //        Update_hp_Voucher_Status(string com, string pc, string accountNo, string voucherNo, Decimal ECDvalue, Decimal collectAmount , DateTime date_)
                //        _salesDAL.Update_hp_Voucher_Status(company, pc, AccNo, Convert.ToString(listECD_info[6]), Convert.ToDecimal(listECD_info[4]), Convert.ToDecimal(listECD_info[5]), Convert.ToDateTime(listECD_info[1]).Date);
                //    }
                //    else if (Convert.ToString(listECD_info[3]) == "A")
                //    {
                //        RequestApprovalHeader _rapphdr = new RequestApprovalHeader();
                //        foreach (RecieptHeader _hdr in receiptHeaderList)
                //        {
                //            _rapphdr.Grah_com = company;
                //            _rapphdr.Grah_loc = pc;
                //            _rapphdr.Grah_fuc_cd = AccNo;
                //            _rapphdr.Grah_ref = Convert.ToString(listECD_info[7]);
                //            _rapphdr.Grah_app_stus = "F";
                //            _rapphdr.Grah_app_lvl = -1;
                //            _rapphdr.Grah_app_by = Convert.ToString(listECD_info[8]);
                //            break;
                //        }

                //        _generalDAL.UpdateMidApprovalStatus(_rapphdr);

                //    }

                //}
                #endregion

                //if (_buybacklist != null) if (_buybacklist.Count > 0)
                //{
                //        InventoryBLL _bll = new InventoryBLL();
                //        _bll._salesDAL = _salesDAL;
                //        _bll._inventoryDAL = _inventoryDAL;
                //        _bll._FMSinventoryDAL = _fmsInventoryDal;
                //        _bll._inventoryRepDAL = _inventoryRepDAL;
                //        _buybackheader.Ith_manual_ref = InvoiceNo;
                //        _buybackheader.Ith_acc_no = AccountNo;
                //        _bll.SaveInwardScanSerial(_buybackheader, _buybacklist, null);
                //        _bll.UpdateInventoryAutoNumber(_buybackheader, _buybackauto, "+", out  _buybackinv);
                //        _inventoryDAL.UpdateMovementDocNo_Other(_buybackheader.Ith_seq_no, _buybackinv);
                //}


                //if (_mgrCommAmt > 0)
                //{
                //    //save service chg. commission for remitance
                //    #region Remitance Details Filling . . . 
                //    RemitanceSummaryDetail _remDet = new RemitanceSummaryDetail();
                //    _remDet.Rem_com = _HPAccount.Hpa_com;
                //    _remDet.Rem_pc = _HPAccount.Hpa_pc;
                //    _remDet.Rem_dt = _HPAccount.Hpa_acc_cre_dt;
                //    _remDet.Rem_sec = "02";
                //    _remDet.Rem_cd = "065";
                //    _remDet.Rem_sh_desc = "Claim Service Charge";
                //    _remDet.Rem_lg_desc = "Claim Service Charge";
                //    _remDet.Rem_val = _mgrCommAmt;
                //    _remDet.Rem_val_final = _mgrCommAmt;
                //    int _weekNo = _generalDAL.GetWeek(Convert.ToDateTime(_HPAccount.Hpa_acc_cre_dt).Date, out _wkNo, _HPAccount.Hpa_com);
                //    _remDet.Rem_week = _wkNo + "S";
                //    _remDet.Rem_ref_no = AccountNo;
                //    _remDet.Rem_rmk = InvoiceNo;
                //    _remDet.Rem_cr_acc = null;
                //    _remDet.Rem_db_acc = null;
                //    _remDet.Rem_del_alw = false;
                //    _remDet.Rem_cre_by = _HPAccount.Hpa_cre_by;
                //    _remDet.Rem_cre_dt = _HPAccount.Hpa_cre_dt;
                //    _remDet.Rem_is_sos = true;
                //    _remDet.Rem_is_dayend = true;
                //    _remDet.Rem_is_sun = true;
                //    _remDet.Rem_cat = 17;
                //    _remDet.Rem_add = 0;
                //    _remDet.Rem_ded = 0;
                //    _remDet.Rem_net = _mgrCommAmt;
                //    _remDet.Rem_epf = 0;
                //    _remDet.Rem_esd = 0;
                //    _remDet.Rem_wht = 0;
                //    _remDet.Rem_add_fin = 0;
                //    _remDet.Rem_ded_fin = 0;
                //    _remDet.Rem_net_fin = _mgrCommAmt;
                //    _remDet.Rem_rmk_fin = InvoiceNo;
                //    _remDet.Rem_bnk_cd = null;
                //    _remDet.Rem_is_rem_sum = true;
                //    #endregion
                //    _salesDAL.SaveRemSummaryForFinalCreditComm(_remDet);
                //}

                //#region Save/Update Voucher
                //if (_voucher != null)
                //    if (_voucher.Count > 0)
                //    {
                //        _voucher.ForEach(x => x.Stvo_inv_no = InvoiceNo);
                //        UpdateInvoiceGiftVoucher(_InvHeader.Sah_com, _InvHeader.Sah_pc,_hprecNo, _InvHeader.Sah_cus_name, _InvHeader.Sah_d_cust_add1, _InvHeader.Sah_d_cust_add2, null, _InvHeader.Sah_dt, InvoiceNo, _InvHeader.Sah_cre_by, _voucher, _salesDAL, _fmsInventoryDal);
                //    }
                //#endregion
                string _InsNo = "";
                if (_insu.Hti_ins_val > 0)
                {
                    //Generate HPT insuarance number
                    MasterAutoNumber _Insnumber = _inventoryDAL.GetAutoNumber(_InsuRecNo.Aut_moduleid, _InsuRecNo.Aut_direction, _InsuRecNo.Aut_start_char, _InsuRecNo.Aut_cate_tp, _InsuRecNo.Aut_cate_cd, _InsuRecNo.Aut_modify_dt, _InsuRecNo.Aut_year);
                    _InsNo = _InsuRecNo.Aut_cate_cd + "-" + _InsuRecNo.Aut_start_char + _Insnumber.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    //_inventoryDAL.UpdateAutoNumber(_InsuRecNo);
                }

                //generate invoice # and account no
                MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_InvNo.Aut_moduleid, _InvNo.Aut_direction, _InvNo.Aut_start_char, _InvNo.Aut_cate_tp, _InvNo.Aut_cate_cd, _InvNo.Aut_modify_dt, _InvNo.Aut_year);
                string InvoiceNo = _InvNo.Aut_cate_cd + "-" + _InvNo.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                MasterAutoNumber AccountAuto = _inventoryDAL.GetAutoNumber(_AccAutoNo.Aut_moduleid, _AccAutoNo.Aut_direction, _AccAutoNo.Aut_start_char, _AccAutoNo.Aut_cate_tp, _AccAutoNo.Aut_cate_cd, _AccAutoNo.Aut_modify_dt, _AccAutoNo.Aut_year);
                string AccountNo = _AccAutoNo.Aut_cate_cd + "-" + AccountAuto.Aut_number.ToString("000000", CultureInfo.InvariantCulture);


                //UPDATE HPT_CUST Table ******************

                //_salesDAL.UpdateInvoiceAcc(InvoiceNo, "-1", _invSeq, 0);// merge _salesDAL.UpdateInvAcc(_invSeq, AccountNo);
                _salesDAL.UpdateInvoiceAccNew(InvoiceNo, _InsNo, _invSeq, _insSeq, AccountNo, _accSeq, _accLogSeq, AccountAuto.Aut_number, _insu.Hti_ins_val);
                //_salesDAL.UpdateAccAuto(AccountNo, InvoiceNo, _accSeq, _accLogSeq, AccountAuto.Aut_number);

                Int16 _serLine = 1;
                foreach (InvoiceItem _seritm in _InvItem)
                {
                    InvoiceSerial _ser = new InvoiceSerial();
                    _ser.Sap_seq_no = _invSeq;
                    _ser.Sap_itm_line = _serLine;
                    _ser.Sap_inv_no = InvoiceNo;
                    _ser.Sap_itm_cd = _seritm.Sad_itm_cd;
                    _ser.Sap_ser_1 = _seritm.Sad_job_no;
                    _ser.Sap_del_loc = _InvHeader.Sah_del_loc;
                    _ser.Sap_ser_line = 0;
                    _salesDAL.SaveSalesSerial(_ser);
                    _serLine += 1;
                }

                //Tharaka 2015-08-10
                if (receipItemList != null)
                {
                    if (receipItemList.Count > 0)
                    {
                        foreach (RecieptItem _itm in receipItemList)
                        {
                            if (_itm.Sard_pay_tp == "ADVAN")
                            {
                                List<ReceiptItemDetails> _advRecItm = new List<ReceiptItemDetails>();
                                _advRecItm = _salesDAL.GetAdvanReceiptItems(_itm.Sard_ref_no);

                                if (_advRecItm != null)
                                {
                                    if (_advRecItm.Count > 0)
                                    {
                                        foreach (ReceiptItemDetails _advItm in _advRecItm)
                                        {
                                            if (_InvItem.FindAll(x => x.Sad_job_no == _advItm.Sari_serial).Count > 0)
                                            {

                                            }
                                            else
                                            {
                                                Boolean status = _inventoryDAL.Update_inrser_INS_AVAILABLE(_InvHeader.Sah_com, _InvHeader.Sah_del_loc, _advItm.Sari_item, _advItm.Sari_serial, 1);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }



                //_salesDAL.UpdateInvAcc(_invSeq, AccountNo);
                if (_hptTxnTable.Rows.Count > 0)
                {
                    for (int i = 0; i < _hptTxnTable.Rows.Count; i++)
                    {

                        //Generate HPT TXN Auto Number
                        MasterAutoNumber _Txnnumber = _inventoryDAL.GetAutoNumber(TxnAuto.Aut_moduleid, TxnAuto.Aut_direction, TxnAuto.Aut_start_char, TxnAuto.Aut_cate_tp, TxnAuto.Aut_cate_cd, TxnAuto.Aut_modify_dt, TxnAuto.Aut_year);
                        string _txnNo = TxnAuto.Aut_cate_cd + "-" + TxnAuto.Aut_start_char + "-" + _Txnnumber.Aut_number.ToString("000000", CultureInfo.InvariantCulture);

                        _salesDAL.UpdateHptTxnNew(AccountNo, _txnNo, Convert.ToInt32(_hptTxnTable.Rows[i]["SeqNo"].ToString()));
                        _inventoryDAL.UpdateAutoNumber(TxnAuto);
                    }
                }
                if (_manRecSeqTable.Rows.Count > 0)
                {
                    for (int i = 0; i < _manRecSeqTable.Rows.Count; i++)
                    {
                        //_manRecSeqTable.Columns.Add("SeqNo", typeof(int));
                        //_manRecSeqTable.Columns.Add("Startchar", typeof(string));
                        //_manRecSeqTable.Columns.Add("ManRecType", typeof(string));
                        //_manRecSeqTable.Columns.Add("RecType", typeof(string));
                        //_manRecSeqTable.Columns.Add("ManualRef", typeof(string));

                        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(receipAuto.Aut_moduleid, receipAuto.Aut_direction, _manRecSeqTable.Rows[i]["Startchar"].ToString(), receipAuto.Aut_cate_tp, receipAuto.Aut_cate_cd, receipAuto.Aut_modify_dt, receipAuto.Aut_year);
                        _hprecNo = receipAuto.Aut_cate_cd + "-" + _manRecSeqTable.Rows[i]["Startchar"].ToString() + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(receipAuto);
                        if (_manRecSeqTable.Rows[i]["RecType"].ToString() == "HPARS")
                        { _addSysRec = _hprecNo; }
                        else
                        { _dpSysRec = _hprecNo; }
                        _salesDAL.UpdateReceiptHS(InvoiceNo, _hprecNo, -100, Convert.ToInt32(_manRecSeqTable.Rows[i]["SeqNo"].ToString()), AccountNo);

                        MasterCompany _masterCompany = _generalDAL.GetCompByCode(_InvHeader.Sah_com);  //kapila 27/4/2016
                        if (_masterCompany.MC_IS_SCM2_FMS == 1)
                            _effect = _inventoryDAL.UpdateManualDocNo(_loc, _manRecSeqTable.Rows[i]["ManRecType"].ToString(), Convert.ToInt32(_manRecSeqTable.Rows[i]["ManualRef"].ToString()), _hprecNo);//do the updation at the gnt_man_doc_dt
                        else
                            _effect = _fmsInventoryDal.UpdateManualDocNo(_loc, _manRecSeqTable.Rows[i]["ManRecType"].ToString(), Convert.ToInt32(_manRecSeqTable.Rows[i]["ManualRef"].ToString()), _hprecNo);//do the updation at the gnt_man_doc_dt

                    }
                }


                if (_buybacklist != null) if (_buybacklist.Count > 0)
                    {
                        InventoryBLL _bll = new InventoryBLL();
                        _bll._salesDAL = _salesDAL;
                        _bll._inventoryDAL = _inventoryDAL;
                        _bll._FMSinventoryDAL = _fmsInventoryDal;
                        _bll._inventoryRepDAL = _inventoryRepDAL;
                        _buybackheader.Ith_manual_ref = InvoiceNo;
                        _buybackheader.Ith_acc_no = AccountNo;
                        _bll.SaveInwardScanSerial(_buybackheader, _buybacklist, null);
                        _bll.UpdateInventoryAutoNumber(_buybackheader, _buybackauto, "+", out  _buybackinv);
                        _inventoryDAL.UpdateMovementDocNo_Other(_buybackheader.Ith_seq_no, _buybackinv);
                    }

                if (_mgrCommAmt > 0)
                {
                    //save service chg. commission for remitance
                    #region Remitance Details Filling . . .
                    RemitanceSummaryDetail _remDet = new RemitanceSummaryDetail();
                    _remDet.Rem_com = _HPAccount.Hpa_com;
                    _remDet.Rem_pc = _HPAccount.Hpa_pc;
                    _remDet.Rem_dt = _HPAccount.Hpa_acc_cre_dt;
                    _remDet.Rem_sec = "02";
                    _remDet.Rem_cd = "065";
                    _remDet.Rem_sh_desc = "Claim Service Charge";
                    _remDet.Rem_lg_desc = "Claim Service Charge";
                    _remDet.Rem_val = _mgrCommAmt;
                    _remDet.Rem_val_final = _mgrCommAmt;
                    int _weekNo = _generalDAL.GetWeek(Convert.ToDateTime(_HPAccount.Hpa_acc_cre_dt).Date, out _wkNo, _HPAccount.Hpa_com);
                    _remDet.Rem_week = _wkNo + "S";
                    _remDet.Rem_ref_no = AccountNo;
                    _remDet.Rem_rmk = InvoiceNo;
                    _remDet.Rem_cr_acc = null;
                    _remDet.Rem_db_acc = null;
                    _remDet.Rem_del_alw = false;
                    _remDet.Rem_cre_by = _HPAccount.Hpa_cre_by;
                    _remDet.Rem_cre_dt = _HPAccount.Hpa_cre_dt;
                    _remDet.Rem_is_sos = true;
                    _remDet.Rem_is_dayend = true;
                    _remDet.Rem_is_sun = true;
                    _remDet.Rem_cat = 17;
                    _remDet.Rem_add = 0;
                    _remDet.Rem_ded = 0;
                    _remDet.Rem_net = _mgrCommAmt;
                    _remDet.Rem_epf = 0;
                    _remDet.Rem_esd = 0;
                    _remDet.Rem_wht = 0;
                    _remDet.Rem_add_fin = 0;
                    _remDet.Rem_ded_fin = 0;
                    _remDet.Rem_net_fin = _mgrCommAmt;
                    _remDet.Rem_rmk_fin = InvoiceNo;
                    _remDet.Rem_bnk_cd = null;
                    _remDet.Rem_is_rem_sum = true;
                    #endregion
                    _salesDAL.SaveRemSummaryForFinalCreditComm(_remDet);
                }

                MasterBusinessEntity _businessCompany = new MasterBusinessEntity();
                _businessCompany = _salesDAL.GetActiveBusinessCompanyDetail(_InvHeader.Sah_com, _InvHeader.Sah_cus_cd, null, null, "C");

                //add by tharanga 2018/10/29 inst:: Block voucher generation - Credit note ::Mon 29/Oct/2018 12:28 PM
                int count = receipItemList.Where(r => r.Sard_pay_tp == "CRNOTE").Count();
                if (count <= 0)
                {
                    #region Generate Promotion Vouchers :: Chamal 26-Jun-2014 - copied by darshana 26-09-2014
                    if (_voucher == null) _voucher = new List<InvoiceVoucher>();

                    bool _promoVouApplied = false;
                    foreach (InvoiceItem _itm in _InvItem)
                    {
                        MasterItem _mitm = _inventoryDAL.GetItem(_InvHeader.Sah_com, _itm.Sad_itm_cd);
                        if (_mitm.Mi_is_ser1 != -1)
                        {
                            for (int i = 1; i <= _itm.Sad_qty; i++)
                            {
                                List<PromoVoucherDefinition> _proVouList = GetPromotionalVouchersDefinition(_InvHeader.Sah_com, _InvHeader.Sah_inv_tp, _InvHeader.Sah_pc, _InvHeader.Sah_dt.Date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _mitm.Mi_brand, _mitm.Mi_cate_1, _mitm.Mi_cate_2, _itm.Sad_itm_cd, false);
                                if (_proVouList != null)
                                {
                                    if (_proVouList.Count > 0)
                                    {
                                        foreach (PromoVoucherDefinition _proitm in _proVouList)
                                        {
                                            InvoiceVoucher _vou = new InvoiceVoucher();
                                            GiftVoucherPages _gvou = new GiftVoucherPages();

                                            DataTable _result = _generalDAL.GetProVoutype(_InvHeader.Sah_com, _proitm.Spd_vou_cd);

                                            if (_result != null || _result.Rows.Count > 0)
                                            {
                                                if (Convert.ToInt32(_result.Rows[0]["spt_is_qtywise"].ToString()) == 0)
                                                {
                                                    //consider total invoice value
                                                    if (Convert.ToInt32(_result.Rows[0]["spt_min_val"].ToString()) <= _HPAccount.Hpa_cash_val)
                                                    {
                                                        var _vouExsit = _voucher.Where(x => x.Stvo_prefix == _proitm.Spd_vou_cd).Select(x => x.Stvo_prefix).ToList();
                                                        if (_vouExsit != null && _vouExsit.Count > 0)
                                                        {
                                                            goto Ter;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        goto Ter;
                                                    }
                                                }
                                                else
                                                {
                                                    if (Convert.ToInt32(_result.Rows[0]["spt_min_val"].ToString()) <= _itm.Sad_tot_amt)
                                                    {

                                                    }
                                                    else
                                                    {
                                                        goto Ter;
                                                    }
                                                }
                                            }

                                            _vou.Stvo_inv_no = InvoiceNo;
                                            _vou.Stvo_prefix = _proitm.Spd_vou_cd;
                                            _vou.Stvo_bookno = _proitm.Spd_seq;
                                            _vou.Stvo_pageno = _salesDAL.GetPromotionVoucherNo();
                                            _vou.Stvo_gv_itm = _proitm.Spd_vou_cd;
                                            _vou.Stvo_price = _proitm.Spd_disc;
                                            _vou.Stvo_itm_cd = _itm.Sad_itm_cd;
                                            _vou.Stvo_cre_by = "PRO_VOU";
                                            if (_proitm.Spd_disc_isrt == true)
                                            {
                                                _vou.Stvo_stus = 1;
                                                _gvou.Gvp_gv_tp = "RATE";
                                            }
                                            else
                                            {
                                                _vou.Stvo_stus = 0;
                                                _gvou.Gvp_gv_tp = "VALUE";
                                            }

                                            _gvou.Gvp_amt = _proitm.Spd_disc;
                                            _gvou.Gvp_app_by = _InvHeader.Sah_cre_by;
                                            _gvou.Gvp_bal_amt = _proitm.Spd_disc;  // 0;  kapila 3/11/2016
                                            _gvou.Gvp_book = _itm.Sad_itm_line;
                                            _gvou.Gvp_can_by = "";
                                            _gvou.Gvp_can_dt = DateTime.Now.Date;
                                            _gvou.Gvp_com = _InvHeader.Sah_com;
                                            _gvou.Gvp_cre_by = _InvHeader.Sah_cre_by;
                                            _gvou.Gvp_cre_dt = DateTime.Now.Date;
                                            _gvou.Gvp_cus_add1 = _InvHeader.Sah_cus_add1;
                                            _gvou.Gvp_cus_add2 = _InvHeader.Sah_cus_add2;
                                            _gvou.Gvp_cus_cd = _InvHeader.Sah_cus_cd;
                                            _gvou.Gvp_cus_mob = _businessCompany.Mbe_mob;
                                            _gvou.Gvp_cus_name = _InvHeader.Sah_cus_name;
                                            _gvou.Gvp_from = "-";
                                            _gvou.Gvp_gv_cd = _proitm.Spd_vou_cd;
                                            _gvou.Gvp_gv_prefix = "P_GV";
                                            _gvou.Gvp_is_allow_promo = false;
                                            _gvou.Gvp_issu_itm = 0;
                                            _gvou.Gvp_issue_by = "";
                                            _gvou.Gvp_issue_dt = DateTime.Now.Date;
                                            _gvou.Gvp_line = i;
                                            _gvou.Gvp_mod_by = "";
                                            _gvou.Gvp_mod_dt = DateTime.Now.Date;
                                            _gvou.Gvp_noof_itm = 1;
                                            _gvou.Gvp_oth_ref = InvoiceNo;// _proitm.Spd_circular_no;
                                            _gvou.Gvp_page = _vou.Stvo_pageno;
                                            _gvou.Gvp_pc = _InvHeader.Sah_pc;
                                            _gvou.Gvp_ref = _proitm.Spd_seq.ToString();
                                            _gvou.Gvp_stus = "A";
                                            _gvou.Gvp_valid_from = _InvHeader.Sah_dt.Date;
                                            //_gvou.Gvp_valid_to = _InvHeader.Sah_dt.Date.AddMonths(_proitm.Spd_period);
                                            _gvou.Gvp_valid_to = _InvHeader.Sah_dt.Date.AddDays(_proitm.Spd_period); //Chamal 24-09-2014
                                            _gvou.Gvp_cus_nic = _businessCompany.Mbe_nic;

                                            _voucher.Add(_vou);
                                            _fmsInventoryDal.SaveGiftVoucherPages(_gvou);
                                            _promoVouApplied = true;
                                        //break;
                                        Ter: int k = 0;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (_promoVouApplied == true)
                    {
                        if (_voucher != null)
                        {
                            if (_voucher.Count > 0)
                            {
                                //var _vouProCodes = _voucher.Where(x => x.Stvo_cre_by == "PRO_VOU").Select(x => x.Stvo_prefix).Distinct().ToList();
                                var _vouProCodes = _voucher.Where(x => x.Stvo_cre_by == "PRO_VOU").Select(x => x.Stvo_bookno).Distinct().ToList();
                                if (_vouProCodes != null && _vouProCodes.Count > 0)
                                {
                                    foreach (var _cd in _vouProCodes)
                                    {
                                        DataTable _dtothCom = _salesDAL.GetProVouAllowCompanies(_InvHeader.Sah_com, _cd);

                                        if (_dtothCom.Rows.Count > 0)
                                        {
                                            foreach (DataRow drow in _dtothCom.Rows)
                                            {
                                                MasterBusinessEntity _othCust = new MasterBusinessEntity();
                                                _othCust = _businessCompany;
                                                _othCust.Mbe_cd = _InvHeader.Sah_cus_cd;
                                                _othCust.Mbe_com = drow["R_COM"].ToString();
                                                if (!string.IsNullOrEmpty(_othCust.Mbe_nic) || !string.IsNullOrEmpty(_othCust.Mbe_mob))
                                                {
                                                    MasterBusinessEntity _nic = _salesDAL.GetActiveBusinessCompanyDetail(_InvHeader.Sah_com, string.Empty, _othCust.Mbe_nic, string.Empty, "C");
                                                    MasterBusinessEntity _mobile = _salesDAL.GetActiveBusinessCompanyDetail(_InvHeader.Sah_com, string.Empty, string.Empty, _othCust.Mbe_mob, "C");
                                                    if (_nic.Mbe_cd == null && _mobile.Mbe_cd == null)
                                                    {
                                                        int _isUpdate = _salesDAL.UpdateBusinessEntityProfile(_othCust, 1);
                                                        if (_isUpdate <= 0) _salesDAL.SaveBusinessEntityDetail(_othCust);
                                                    }
                                                }

                                            }
                                        }

                                    }
                                }
                            }
                        }
                    }
                    //sms send to customer for voucher______
                    if (_promoVouApplied == true)
                    {
                        if (_voucher != null)
                        {
                            if (_voucher.Count > 0)
                            {
                                string _mobNo = "";
                                string _cusNe = "";
                                var _vouProCodes = _voucher.Where(x => x.Stvo_cre_by == "PRO_VOU").Select(x => x.Stvo_prefix).Distinct().ToList();
                                if (_vouProCodes != null && _vouProCodes.Count > 0)
                                {
                                    foreach (var _cd in _vouProCodes)
                                    {
                                        DataTable _result = _generalDAL.GetProVoutype(_InvHeader.Sah_com, _cd);

                                        if (_result != null || _result.Rows.Count > 0)
                                        {
                                            //updated by akila 2017/11/13
                                            int _smsAlert = 0;
                                            int.TryParse(_result.Rows[0]["spt_sms_alert"].ToString(), out _smsAlert);

                                            //if (Convert.ToInt32(_result.Rows[0]["spt_sms_alert"].ToString()) == 1)
                                            if (_smsAlert == 1)
                                            {
                                                if (!string.IsNullOrEmpty(_result.Rows[0]["spt_cus_pur_sms"].ToString()))
                                                {
                                                    List<MasterBusinessEntity> _cusdet1 = new List<MasterBusinessEntity>();
                                                    _cusdet1 = _salesDAL.GetActiveCustomerDetailList(_InvHeader.Sah_com, _InvHeader.Sah_cus_cd, null, null, "C");
                                                    foreach (MasterBusinessEntity newcus in _cusdet1)
                                                    {
                                                        _mobNo = newcus.Mbe_mob;
                                                        _cusNe = newcus.Mbe_name;
                                                    }

                                                    if (!string.IsNullOrEmpty(_mobNo))
                                                    {
                                                        if (_mobNo.Length >= 9)
                                                        {

                                                            string _mg = _result.Rows[0]["spt_cus_pur_sms"].ToString();
                                                            OutSMS _out = new OutSMS();
                                                            _out.Msg = _mg;
                                                            _out.Msgstatus = 0;
                                                            _out.Msgtype = "S";
                                                            _out.Receivedtime = DateTime.Now;
                                                            _out.Receiver = "CUSTOMER";
                                                            //_out.Receiverphno = _info.Mmi_mobi_no;

                                                            if (_mobNo.Length == 10)
                                                            {
                                                                _out.Receiverphno = "+94" + _mobNo.Substring(1, 9);
                                                                _out.Senderphno = "+94" + _mobNo.Substring(1, 9);
                                                            }
                                                            if (_mobNo.Length == 9)
                                                            {
                                                                _out.Receiverphno = "+94" + _mobNo;
                                                                _out.Senderphno = "+94" + _mobNo;
                                                            }

                                                            _out.Refdocno = InvoiceNo;
                                                            _out.Sender = _InvHeader.Sah_cre_by;
                                                            _out.Createtime = DateTime.Now;
                                                            _generalDAL.SaveSMSOut(_out);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    #endregion

                    #region Save/Update Voucher
                    if (_voucher != null)
                        if (_voucher.Count > 0)
                        {
                            _voucher.ForEach(x => x.Stvo_inv_no = InvoiceNo);
                            UpdateInvoiceGiftVoucher(_InvHeader.Sah_com, _InvHeader.Sah_pc, _InvHeader.Sah_cus_cd, _InvHeader.Sah_cus_name, _InvHeader.Sah_d_cust_add1, _InvHeader.Sah_d_cust_add2, null, _InvHeader.Sah_dt, InvoiceNo, _InvHeader.Sah_cre_by, _voucher, _salesDAL, _fmsInventoryDal);
                        }
                    #endregion
                }
                if (_HPAccount.Hpa_val_03 != 0)
                {
                    _fmsInventoryDal.UpdateGiftVouUsedStatus(_HPAccount.Hpa_com, _HPAccount.Hpa_val_03.ToString(), _HPAccount.Hpa_cre_by, "F");

                    DataTable _vouDet = _salesDAL.GetPVDet("P_GV", _HPAccount.Hpa_val_03);
                    if (_vouDet != null || _vouDet.Rows.Count > 0)
                    {
                        DataTable _result = _generalDAL.GetProVoutype(null, _vouDet.Rows[0]["gvp_gv_cd"].ToString());
                        if (_result != null || _result.Rows.Count > 0)
                        {
                            //updated by akila 2017/11/13
                            int _smsAlert = 0;
                            int.TryParse(_result.Rows[0]["spt_sms_alert"].ToString(), out _smsAlert);

                            //if (Convert.ToInt32(_result.Rows[0]["spt_sms_alert"].ToString()) == 1)
                            if (_smsAlert == 1)
                            {
                                if (!string.IsNullOrEmpty(_result.Rows[0]["spt_cus_red_sms"].ToString()))
                                {
                                    string _mobNo = "";
                                    string _cusNe = "";

                                    List<MasterBusinessEntity> _cusdet1 = new List<MasterBusinessEntity>();
                                    _cusdet1 = _salesDAL.GetActiveCustomerDetailList(_InvHeader.Sah_com, _InvHeader.Sah_cus_cd, null, null, "C");
                                    foreach (MasterBusinessEntity newcus in _cusdet1)
                                    {
                                        _mobNo = newcus.Mbe_mob;
                                        _cusNe = newcus.Mbe_name;
                                    }

                                    if (!string.IsNullOrEmpty(_mobNo))
                                    {
                                        if (_mobNo.Length >= 9)
                                        {

                                            string _mg = _result.Rows[0]["spt_cus_red_sms"].ToString();
                                            OutSMS _out = new OutSMS();
                                            _out.Msg = _mg;
                                            _out.Msgstatus = 0;
                                            _out.Msgtype = "S";
                                            _out.Receivedtime = DateTime.Now;
                                            _out.Receiver = "CUSTOMER";
                                            //_out.Receiverphno = _info.Mmi_mobi_no;

                                            if (_mobNo.Length == 10)
                                            {
                                                _out.Receiverphno = "+94" + _mobNo.Substring(1, 9);
                                                _out.Senderphno = "+94" + _mobNo.Substring(1, 9);
                                            }
                                            if (_mobNo.Length == 9)
                                            {
                                                _out.Receiverphno = "+94" + _mobNo;
                                                _out.Senderphno = "+94" + _mobNo;
                                            }

                                            _out.Refdocno = InvoiceNo;
                                            _out.Sender = _InvHeader.Sah_cre_by;
                                            _out.Createtime = DateTime.Now;
                                            _generalDAL.SaveSMSOut(_out);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }


                _inventoryDAL.UpdateAutoNumber(_InsuRecNo);
                _inventoryDAL.UpdateAutoNumber(_InvNo);
                _inventoryDAL.UpdateAutoNumber(_AccAutoNo);


                if (_InvHeader.Sah_ref_doc != null)
                {
                    _salesDAL.UpdateAccLogByNewAcc(_InvHeader.Sah_com, _InvHeader.Sah_pc, _InvHeader.Sah_ref_doc, AccountNo);
                }


                if (string.IsNullOrEmpty(_buybackinv))
                {
                    _AccNo = InvoiceNo + " , " + AccountNo;
                }
                else
                {
                    _AccNo = InvoiceNo + " , " + AccountNo + " , " + _buybackinv;
                }


                _InvoiceNo = InvoiceNo;
                _AccountNo = AccountNo;
                BuyBackInvNo = _buybackinv;
                _sysRecNo = _dpSysRec;
                _sysAddRec = _addSysRec;

                string _pcName = "";
                string _mobilNo = "";
                string _cusName = "";
                decimal _insuAmt = 0;

                MasterCompany _masterComp = null;
                _masterComp = _generalDAL.GetCompByCode(_InvHeader.Sah_com);
                if (_masterComp != null)
                {
                    _smsInsu = _masterComp.Mc_anal3.ToString();
                }
                else
                {
                    _smsInsu = "Insuarance";
                }

                DataTable dt = _generalDAL.CheckProfitCenter(_InvHeader.Sah_com, _InvHeader.Sah_pc);
                if (dt.Rows.Count > 0)
                {
                    _pcName = Convert.ToString(dt.Rows[0]["mpc_desc"]);
                }

                #region Comment SMS old
                //foreach (HpCustomer _AccCus in _HpAccCust)
                //{
                //    List<MasterBusinessEntity> _cusdet = new List<MasterBusinessEntity>();
                //    if (_AccCus.Htc_adr_tp == 1 && _AccCus.Htc_cust_tp == "C")
                //    {
                //        //_cusdet = _salesDAL.GetCustomerDetailList(_InvHeader.Sah_com, _AccCus.Htc_cust_cd, null, null, "C");
                //        //Edit By Chamal 10/04/2014 (Disscuss with Dar)
                //        _cusdet = _salesDAL.GetActiveCustomerDetailList(_InvHeader.Sah_com, _AccCus.Htc_cust_cd, null, null, "C");
                //        foreach (MasterBusinessEntity _cus in _cusdet)
                //        {
                //            _mobilNo = _cus.Mbe_mob;
                //            _cusName = _cus.Mbe_name;

                //            if (!string.IsNullOrEmpty(_mobilNo))
                //            {
                //                if (_mobilNo.Length >= 9)
                //                {
                //                    _insuAmt = _HPAccount.Hpa_init_ins + _HPAccount.Hpa_inst_ins;
                //                    //thank u for buying [product] on Hire purchase [loc]S/R on [date]  (A/c [accNo]).Tot value [total] & diriya [diriya]-[com]-0112565293
                //                    string _mg = "Thank u for the purchased items on HP A/C: " + _AccountNo + " @ " + _pcName + " S/R. HP value Rs.: " + _HPAccount.Hpa_hp_val + " and " + _smsInsu + " Rs.: " + _insuAmt + "-" + _generalDAL.GetHPCustContactPhoneNo();
                //                    OutSMS _out = new OutSMS();
                //                    _out.Msg = _mg;
                //                    _out.Msgstatus = 0;
                //                    _out.Msgtype = "S";
                //                    _out.Receivedtime = DateTime.Now;
                //                    _out.Receiver = "CUSTOMER";
                //                    //_out.Receiverphno = _info.Mmi_mobi_no;

                //                    if (_mobilNo.Length == 10)
                //                    {
                //                        _out.Receiverphno = "+94" + _mobilNo.Substring(1, 9);
                //                        _out.Senderphno = "+94" + _mobilNo.Substring(1, 9);
                //                    }
                //                    if (_mobilNo.Length == 9)
                //                    {
                //                        _out.Receiverphno = "+94" + _mobilNo;
                //                        _out.Senderphno = "+94" + _mobilNo;
                //                    }

                //                    _out.Refdocno = _InvoiceNo;
                //                    _out.Sender = _InvHeader.Sah_cre_by;
                //                    _out.Createtime = DateTime.Now;
                //                    _generalDAL.SaveSMSOut(_out);
                //                }
                //            }
                //        }
                //    }
                //    else if (_AccCus.Htc_adr_tp == 1 && _AccCus.Htc_cust_tp == "G")
                //    {
                //        //_cusdet = _salesDAL.GetCustomerDetailList(_InvHeader.Sah_com, _AccCus.Htc_cust_cd, null, null, "C");
                //        //Edit By Chamal 10/04/2014 (Disscuss with Dar)
                //        _cusdet = _salesDAL.GetActiveCustomerDetailList(_InvHeader.Sah_com, _AccCus.Htc_cust_cd, null, null, "C");
                //        foreach (MasterBusinessEntity _cus in _cusdet)
                //        {
                //            _mobilNo = _cus.Mbe_mob;
                //            if (!string.IsNullOrEmpty(_mobilNo))
                //            {
                //                if (_mobilNo.Length >= 9)
                //                {
                //                    _insuAmt = _HPAccount.Hpa_init_ins + _HPAccount.Hpa_inst_ins;

                //                    //thank u for buying [product] on Hire purchase [loc]S/R on [date]  (A/c [accNo]).Tot value [total] & diriya [diriya]-[com]-0112565293
                //                    string _mg = "You are signed as a guarantor for HP A/c : " + _AccountNo + " at " + _pcName + " S/R. HP value Rs. : " + _HPAccount.Hpa_hp_val + " And " + _smsInsu + " Rs.: " + _insuAmt + "-" + _generalDAL.GetHPCustContactPhoneNo();
                //                    OutSMS _out = new OutSMS();
                //                    _out.Msg = _mg;
                //                    _out.Msgstatus = 0;
                //                    _out.Msgtype = "S";
                //                    _out.Receivedtime = DateTime.Now;
                //                    _out.Receiver = "GUARANTOR";
                //                    //_out.Receiverphno = _info.Mmi_mobi_no;

                //                    if (_mobilNo.Length == 10)
                //                    {
                //                        _out.Receiverphno = "+94" + _mobilNo.Substring(1, 9);
                //                        _out.Senderphno = "+94" + _mobilNo.Substring(1, 9);
                //                    }
                //                    if (_mobilNo.Length == 9)
                //                    {
                //                        _out.Receiverphno = "+94" + _mobilNo;
                //                        _out.Senderphno = "+94" + _mobilNo;
                //                    }

                //                    _out.Refdocno = _InvoiceNo;
                //                    _out.Sender = _InvHeader.Sah_cre_by;
                //                    _out.Createtime = DateTime.Now;
                //                    _generalDAL.SaveSMSOut(_out);
                //                }
                //            }
                //        }
                //    }
                //}
                //_salesDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                //_fmsInventoryDal.ConnectionClose();
                //_generalDAL.ConnectionClose();
                #endregion
                #region add loyalty points by tharanga 2018/11/06
                if (!string.IsNullOrEmpty(_InvHeader.Sah_anal_6))
                {
                    List<InvoiceSerial> _invoiceSeriallist = new List<InvoiceSerial>();
                    if (_InvItem.Count > 0)
                    {
                        foreach (InvoiceItem item in _InvItem)
                        {
                            InvoiceSerial _InvoiceSerial = new InvoiceSerial();
                            _InvoiceSerial.Sap_del_loc = _loc;
                            _InvoiceSerial.Sap_inv_no = item.Sad_inv_no;
                            _InvoiceSerial.Sap_itm_cd = item.Sad_itm_cd;
                            _InvoiceSerial.Sap_seq_no = item.Sad_seq;
                            _InvoiceSerial.Sap_ser_line = 0;
                            _invoiceSeriallist.Add(_InvoiceSerial);
                        }
                    }

                    DataTable _loldetail = _salesDAL.GetLoyaltyCardDetail(_InvHeader.Sah_cus_cd, _InvHeader.Sah_anal_6);
                    string _loltype = string.Empty;
                    string _membership = string.Empty;
                    if (_loldetail != null && _loldetail.Rows.Count >= 0)
                    {
                        _loltype = _loldetail.Rows[0].Field<string>("salcm_loty_tp");
                        _membership = _loldetail.Rows[0].Field<string>("salcm_cus_spec");
                    }
                    decimal _points = GetLoyaltyPoint(_loltype, _membership, _InvHeader.Sah_com, _InvHeader.Sah_pc, _InvHeader.Sah_dt, _InvItem, _invoiceSeriallist, receipItemList, _salesDAL, _inventoryDAL, _InvHeader.Sah_inv_tp);
                    if (_points > 0)
                    {
                        // _salDAL.UpdateLoyaltyCardPoint(_invoiceHeader.Sah_cus_cd, _invoiceHeader.Sah_anal_6, _points, _invoiceHeader.Sah_cre_by);
                        InvoiceLoyalty _lol = new InvoiceLoyalty();
                        _lol.Stlt_inv_no = Convert.ToString(_InvHeader.Sah_inv_no);
                        _lol.Stlt_pt = _points;
                        _lol.Stlt_seq_no = _InvHeader.Sah_seq_no;
                        _salesDAL.SaveInvoiceLoyalty(_lol);
                    }
                }
                #endregion

                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();
                _generalDAL.TransactionCommit();
                _salesDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _fmsInventoryDal.ConnectionClose();
                _generalDAL.ConnectionClose();

                _effect = 1;
                //_tr.Complete();

                #region Send SMS
                try
                {
                    _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen();
                    _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen();
                    _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen();

                    foreach (HpCustomer _AccCus in _HpAccCust)
                    {
                        List<MasterBusinessEntity> _cusdet = new List<MasterBusinessEntity>();
                        if (_AccCus.Htc_adr_tp == 1 && _AccCus.Htc_cust_tp == "C")
                        {
                            //_cusdet = _salesDAL.GetCustomerDetailList(_InvHeader.Sah_com, _AccCus.Htc_cust_cd, null, null, "C");
                            //Edit By Chamal 10/04/2014 (Disscuss with Dar)
                            _cusdet = _salesDAL.GetActiveCustomerDetailList(_InvHeader.Sah_com, _AccCus.Htc_cust_cd, null, null, "C");
                            foreach (MasterBusinessEntity _cus in _cusdet)
                            {
                                _mobilNo = _cus.Mbe_mob;
                                _cusName = _cus.Mbe_name;

                                if (!string.IsNullOrEmpty(_mobilNo))
                                {
                                    if (_mobilNo.Length >= 9)
                                    {
                                        _insuAmt = _HPAccount.Hpa_init_ins + _HPAccount.Hpa_inst_ins;
                                        //thank u for buying [product] on Hire purchase[loc] S/R on [date]  (A/c [accNo]).Tot value [total] & diriya [diriya]-[com]-0112565293
                                        string _mg = "Thank u for the purchased items on HP A/C: " + _AccountNo + " @ " + _pcName + " S/R. HP value Rs.: " + _HPAccount.Hpa_hp_val + " and " + _smsInsu + " Rs.: " + _insuAmt + "-" + _generalDAL.GetHPCustContactPhoneNo();
                                        OutSMS _out = new OutSMS();
                                        _out.Msg = _mg;
                                        _out.Msgstatus = 0;
                                        _out.Msgtype = "S";
                                        _out.Receivedtime = DateTime.Now;
                                        _out.Receiver = "CUSTOMER";
                                        //_out.Receiverphno = _info.Mmi_mobi_no;

                                        if (_mobilNo.Length == 10)
                                        {
                                            _out.Receiverphno = "+94" + _mobilNo.Substring

(1, 9);
                                            _out.Senderphno = "+94" + _mobilNo.Substring(1,

9);
                                        }
                                        if (_mobilNo.Length == 9)
                                        {
                                            _out.Receiverphno = "+94" + _mobilNo;
                                            _out.Senderphno = "+94" + _mobilNo;
                                        }

                                        _out.Refdocno = _InvoiceNo;
                                        _out.Sender = _InvHeader.Sah_cre_by;
                                        _out.Createtime = DateTime.Now;
                                        _generalDAL.SaveSMSOut(_out);
                                    }
                                }
                            }
                        }
                        else if (_AccCus.Htc_adr_tp == 1 && _AccCus.Htc_cust_tp == "G")
                        {
                            //_cusdet = _salesDAL.GetCustomerDetailList(_InvHeader.Sah_com, _AccCus.Htc_cust_cd, null, null, "C");
                            //Edit By Chamal 10/04/2014 (Disscuss with Dar)
                            _cusdet = _salesDAL.GetActiveCustomerDetailList(_InvHeader.Sah_com, _AccCus.Htc_cust_cd, null, null, "C");
                            foreach (MasterBusinessEntity _cus in _cusdet)
                            {
                                _mobilNo = _cus.Mbe_mob;
                                if (!string.IsNullOrEmpty(_mobilNo))
                                {
                                    if (_mobilNo.Length >= 9)
                                    {
                                        _insuAmt = _HPAccount.Hpa_init_ins + _HPAccount.Hpa_inst_ins;

                                        //thank u for buying [product] on Hire purchase [loc] S/R on [date]  (A/c [accNo]).Tot value [total] & diriya [diriya]-[com]-0112565293
                                        string _mg = "You are signed as a guarantor for HP A/c : " + _AccountNo + " at " + _pcName + " S/R. HP value Rs. : " + _HPAccount.Hpa_hp_val + " And " + _smsInsu + " Rs.: " + _insuAmt + "-" + _generalDAL.GetHPCustContactPhoneNo();
                                        OutSMS _out = new OutSMS();
                                        _out.Msg = _mg;
                                        _out.Msgstatus = 0;
                                        _out.Msgtype = "S";
                                        _out.Receivedtime = DateTime.Now;
                                        _out.Receiver = "GUARANTOR";
                                        //_out.Receiverphno = _info.Mmi_mobi_no;

                                        if (_mobilNo.Length == 10)
                                        {
                                            _out.Receiverphno = "+94" + _mobilNo.Substring

(1, 9);
                                            _out.Senderphno = "+94" + _mobilNo.Substring(1,

9);
                                        }
                                        if (_mobilNo.Length == 9)
                                        {
                                            _out.Receiverphno = "+94" + _mobilNo;
                                            _out.Senderphno = "+94" + _mobilNo;
                                        }

                                        _out.Refdocno = _InvoiceNo;
                                        _out.Sender = _InvHeader.Sah_cre_by;
                                        _out.Createtime = DateTime.Now;
                                        _generalDAL.SaveSMSOut(_out);
                                    }
                                }
                            }
                        }
                    }

                    _salesDAL.ConnectionClose();
                    _inventoryDAL.ConnectionClose();
                    _generalDAL.ConnectionClose();
                }
                catch (Exception exSMS)
                {
                    _AccountNo = _AccountNo + "\n(SMS not generated.)\n" + exSMS.ToString

();
                }
                #endregion

            }
            catch (Exception err)
            {
                _effect = -1;
                _AccNo = "ERROR : " + err.Message.ToString();
                _AccountNo = "ERROR : " + err.Message.ToString();
                _InvoiceNo = "ERROR : " + err.Message.ToString();
                BuyBackInvNo = "ERROR : " + err.Message.ToString();
                _sysRecNo = "ERROR : " + err.Message.ToString();
                _sysAddRec = "ERROR : " + err.Message.ToString();
                //_AccNo = documentNo;
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                _generalDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _fmsInventoryDal.ConnectionClose();
                _generalDAL.ConnectionClose();
            }

            _docNo = _AccNo;
            return _effect;
        }

        public DataTable get_Bank_Name(string _Bank)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.get_Bank_Name(_Bank);
        }
        public DataTable get_Def_dep_Bank(string _com, string _pc, string _paytp)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.get_Def_dep_Bank(_com, _pc, _paytp);
        }

        public DataTable get_Dep_Bank_Name(string _com, string _pc, string _paytp, string _acc)
        {

            _salesDAL = new SalesDAL();
            return _salesDAL.get_Dep_Bank_Name(_com, _pc, _paytp, _acc);
        }
        public DataTable get_Branch_Name(string _BankCode, string _code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.get_Branch_Name(_BankCode, _code);
        }

        //written by darshana - 03/08/2012 - save hp adjustment
        public Int32 SaveHPAdjustment(HpAdjustment _MainAdj, HpTransaction _MainTxn, MasterAutoNumber _MainAdjAuto, MasterAutoNumber _MainTxnAuto, HpAdjustment _SubAdj, HpTransaction _SubTxn, MasterAutoNumber _SubAdjAuto, MasterAutoNumber _SubTxnAuto, Boolean _isMulti, out string _docNo)
        {
            Int32 _effect = 0;
            string _adjNo = "";
            Int32 _AdjSeqNo = 0;
            Int32 _TxnSeqNo = 0;

            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen();
                _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen();

                //Main adjustment save part
                _AdjSeqNo = _inventoryDAL.GetSerialID();

                _MainAdj.Had_seq = _AdjSeqNo;
                _MainAdj.Had_ref = Convert.ToString(_AdjSeqNo);
                _salesDAL.Save_HpAdjustment(_MainAdj);

                //Main transaction save part
                _TxnSeqNo = _inventoryDAL.GetSerialID();

                _MainTxn.Hpt_seq = _TxnSeqNo;
                _MainTxn.Hpt_ref_no = Convert.ToString(_TxnSeqNo);
                _salesDAL.Save_HpTransaction(_MainTxn);

                //Main adjustment document #
                MasterAutoNumber MainAdjAuto = _inventoryDAL.GetAutoNumber(_MainAdjAuto.Aut_moduleid, _MainAdjAuto.Aut_direction, _MainAdjAuto.Aut_start_char, _MainAdjAuto.Aut_cate_tp, _MainAdjAuto.Aut_cate_cd, _MainAdjAuto.Aut_modify_dt, _MainAdjAuto.Aut_year);
                //string _MainAdjNo = Convert.ToString(_MainAdjAuto.Aut_year).Remove(0, 2) + "-" + _MainAdjAuto.Aut_cate_cd + "-" + _MainAdjAuto.Aut_start_char + "-" + MainAdjAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture); //Commented by Udesh 08-Nov-2018
                string _MainAdjNo = _MainAdjAuto.Aut_cate_cd + "-" + _MainAdjAuto.Aut_start_char + "-" + MainAdjAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture); //Added by Udesh 08-Nov-2018

                //Main transaction document #
                MasterAutoNumber MainTxnAuto = _inventoryDAL.GetAutoNumber(_MainTxnAuto.Aut_moduleid, _MainTxnAuto.Aut_direction, _MainTxnAuto.Aut_start_char, _MainTxnAuto.Aut_cate_tp, _MainTxnAuto.Aut_cate_cd, _MainTxnAuto.Aut_modify_dt, _MainTxnAuto.Aut_year);
                string _MainTxnNo = _MainTxnAuto.Aut_cate_cd + "-" + _MainTxnAuto.Aut_start_char + "-" + MainTxnAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                //update main adjustment no and txn no
                _salesDAL.UpdateHPAdjTxn(_MainAdjNo, _MainTxnNo, _AdjSeqNo, _TxnSeqNo, _MainTxn.Hpt_mnl_ref);
                _adjNo = _MainAdjNo + "," + _MainTxnNo;

                _inventoryDAL.UpdateAutoNumber(_MainAdjAuto);
                _inventoryDAL.UpdateAutoNumber(_MainTxnAuto);

                if (_isMulti == true)
                {
                    //Main adjustment save part
                    _AdjSeqNo = _inventoryDAL.GetSerialID();

                    _SubAdj.Had_seq = _AdjSeqNo;
                    _SubAdj.Had_ref = Convert.ToString(_AdjSeqNo);
                    _salesDAL.Save_HpAdjustment(_SubAdj);

                    //Main transaction save part
                    _TxnSeqNo = _inventoryDAL.GetSerialID();

                    _SubTxn.Hpt_seq = _TxnSeqNo;
                    _SubTxn.Hpt_ref_no = Convert.ToString(_TxnSeqNo);
                    _salesDAL.Save_HpTransaction(_SubTxn);

                    //Main adjustment document #
                    MasterAutoNumber SubAdjAuto = _inventoryDAL.GetAutoNumber(_SubAdjAuto.Aut_moduleid, _SubAdjAuto.Aut_direction, _SubAdjAuto.Aut_start_char, _SubAdjAuto.Aut_cate_tp, _SubAdjAuto.Aut_cate_cd, _SubAdjAuto.Aut_modify_dt, _SubAdjAuto.Aut_year);
                    string _SubAdjNo = _SubAdjAuto.Aut_cate_cd + "-" + _SubAdjAuto.Aut_start_char + "-" + SubAdjAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                    //Main transaction document #
                    MasterAutoNumber SubTxnAuto = _inventoryDAL.GetAutoNumber(_SubTxnAuto.Aut_moduleid, _SubTxnAuto.Aut_direction, _SubTxnAuto.Aut_start_char, _SubTxnAuto.Aut_cate_tp, _SubTxnAuto.Aut_cate_cd, _SubTxnAuto.Aut_modify_dt, _SubTxnAuto.Aut_year);
                    string _SubTxnNo = _SubTxnAuto.Aut_cate_cd + "-" + _SubTxnAuto.Aut_start_char + "-" + SubTxnAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                    //update main adjustment no and txn no
                    _salesDAL.UpdateHPAdjTxn(_SubAdjNo, _SubTxnNo, _AdjSeqNo, _TxnSeqNo, _SubTxn.Hpt_mnl_ref);
                    _adjNo = _adjNo + "," + _SubAdjNo + "," + _SubTxnNo;

                    _inventoryDAL.UpdateAutoNumber(_SubAdjAuto);
                    _inventoryDAL.UpdateAutoNumber(_SubTxnAuto);
                }

                _salesDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _effect = 1;
                _tr.Complete();
            }
            _docNo = _adjNo;
            return _effect;
        }

        //Commented by Prabhath on 30/08/2012

        //written by darshana - for reversal
        //public Int32 SaveReversal(InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, MasterAutoNumber _invoiceAuto, Boolean _isHP, out  string _invoiceNo, InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo)
        //{

        //    string _invNo = "";
        //    string _SRNNo = "";
        //    Int32 _effect = 0;

        //    using (TransactionScope _tr = new TransactionScope())
        //    {

        //        _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen();
        //        _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen();
        //        _inventoryRepDAL = new ReptCommonDAL(); _inventoryRepDAL.ConnectionOpen();

        //        CommonSaveReversal(_invoiceHeader, _invoiceItem, _invoiceAuto, _isHP, out _invNo);

        //        var _tempDO = (from _lst in _reptPickSerials
        //                       select _lst.Tus_doc_no).ToList().Distinct();

        //        InventoryBLL _invBLL = new InventoryBLL();

        //        foreach (string DO in _tempDO)
        //        {
        //            var tempDo = (from _lst in _reptPickSerials
        //                          where _lst.Tus_doc_no == DO
        //                          select _lst).ToList();
        //            Boolean SaveHdr = false;

        //            if (tempDo != null)
        //            {
        //                List<ReptPickSerials> x = new List<ReptPickSerials>();
        //                foreach (ReptPickSerials l in tempDo)
        //                {
        //                    if (SaveHdr == false)
        //                    {
        //                        _inventoryMovementHeader.Ith_oth_docno = l.Tus_doc_no;
        //                        _inventoryMovementHeader.Ith_oth_loc = l.Tus_loc;
        //                        _inventoryMovementHeader.Ith_entry_no = l.Tus_base_doc_no;

        //                        SaveHdr = true;
        //                    }

        //                    x.Add(l);
        //                }

        //                //var itm = (from _lst in _reptPickSerials
        //                //           where _lst.Tus_doc_no == DO
        //                //           select _lst).ToList();

        //                //List<ReptPickSerials> _list = new List<ReptPickSerials>();

        //                //foreach (ReptPickSerials _tempItem in itm)
        //                //{
        //                //    _list.Add(_tempItem);

        //                //}


        //                _effect = _invBLL.SRNWithCreditNote(_inventoryMovementHeader, x, _reptPickSerialsSub, _masterAutoNumber, out _SRNNo, _inventoryRepDAL, _inventoryDAL);
        //                SaveHdr = false;
        //            }
        //        }


        //        //_invBLL.SRN()

        //        _salesDAL.ConnectionClose();
        //        _inventoryDAL.ConnectionClose();
        //        _inventoryRepDAL.ConnectionClose();
        //        _effect = 1;
        //        _tr.Complete();
        //    }
        //    _invoiceNo = _invNo;
        //    _docNo = _SRNNo;
        //    return _effect;

        //}

        public Int32 SaveHPReversal(InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, MasterAutoNumber _invoiceAuto, Boolean _isHP, out  string _invoiceNo, InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, MasterAutoNumber _reversReceiptAuto, List<RecieptHeader> _hpReversReceiptHeader, HpTransaction _transaction, MasterAutoNumber _txnAuto, out string _docNo)
        {
            Int32 _effect = 0;
            Int32 _dueDays = 0;
            try
            {
                _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen(); _salesDAL.BeginTransaction();
                _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen(); _inventoryDAL.BeginTransaction();
                _inventoryRepDAL = new ReptCommonDAL(); _inventoryRepDAL.ConnectionOpen(); _inventoryRepDAL.BeginTransaction();
                _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen(); _generalDAL.BeginTransaction();

                List<int> _revReceiptSeqNo = new List<int>();


                #region Check Main Unit Replace Serial Exist
                foreach (ReptPickSerials _ser in _reptPickSerials)
                {
                    if (!string.IsNullOrEmpty(_ser.Tus_ser_1))
                    {
                        if (_ser.Tus_ser_1.ToString().ToUpper() != "N/A")
                        {
                            List<Warr_Replacement_Det> _replList = _inventoryDAL.GetWarrReplDetails(_ser.Tus_itm_cd, _ser.Tus_ser_1, "C");
                            if (_replList != null && _replList.Count > 0)
                            {
                                //_invoiceNo = "";
                                //_docNo = "Warranty replacement found for item code - " + _ser.Tus_itm_cd + " | serial no - " + _ser.Tus_ser_1 + "/nYou can't process this reversal!";
                                //_effect = -1;
                                //_salesDAL.TransactionRollback();
                                //_inventoryDAL.TransactionRollback();
                                //_inventoryRepDAL.TransactionRollback();
                                //_generalDAL.TransactionRollback();
                                //return _effect;
                                // Modified By Nadeeka 11-12-2015 (When replacing free items in service not generated sales reversal and some items send to wellawatta service center )
                                var _maxItms = _replList.Max(y => y.Swr_seq);
                                var _replList2 = _replList.Where(x => x.Swr_seq == _maxItms).Select(x => x.Swr_n_itm_ser).Distinct().ToList();
                                _ser.Tus_ser_1 = _replList2[0].ToString();
                            }
                            _replList = new List<Warr_Replacement_Det>();
                            _replList = _inventoryDAL.GetWarrReplDetails(_ser.Tus_itm_cd, _ser.Tus_ser_1, "M");
                            if (_replList != null && _replList.Count > 0)
                            {
                                var _maxItms = _replList.Max(y => y.Swr_seq);
                                var _replList2 = _replList.Where(x => x.Swr_seq == _maxItms).Select(x => x.Swr_n_itm_ser).Distinct().ToList();
                                _ser.Tus_ser_1 = _replList2[0].ToString();
                            }
                        }
                    }
                }
                #endregion


                #region Check dublicate serial 02-10-2015
                // Nadeeka
                foreach (ReptPickSerials _ser in _reptPickSerials)
                {
                    if (!string.IsNullOrEmpty(_ser.Tus_ser_1))
                    {
                        if (_ser.Tus_ser_1.ToString().ToUpper() != "N/A")
                        {
                            DataTable _seltbl = _inventoryDAL.CheckSerialAvailability("SERIAL1", _ser.Tus_itm_cd, _ser.Tus_ser_1);
                            if (_seltbl.Rows.Count > 0)
                            {
                                _invoiceNo = "";
                                _docNo = "This item is not a customer item, Serial already avilable in location :  " + _seltbl.Rows[0]["ins_loc"].ToString() + " document date " + Convert.ToDateTime(_seltbl.Rows[0]["ins_doc_dt"].ToString()).Date + " document # " + _seltbl.Rows[0]["ins_doc_no"].ToString() + " ";
                                _effect = -1;
                                _salesDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                _inventoryRepDAL.TransactionRollback();
                                _generalDAL.TransactionRollback();
                                return _effect;
                            }

                            DataTable _seltblscm = null;
                            //  if (_inventoryMovementHeader.Ith_com == "AAL")
                            //  {
                            _seltblscm = _inventoryDAL.CheckSerialAvailabilityscm(_ser.Tus_itm_cd, _ser.Tus_ser_1);
                            if (_seltblscm.Rows.Count > 0)
                            {
                                _invoiceNo = "";
                                _docNo = "This item is not a customer item, Serial already avilable in location :  " + _seltblscm.Rows[0]["location_code"].ToString() + " document date " + Convert.ToDateTime(_seltblscm.Rows[0]["inv_date"].ToString()).Date + " document # " + _seltblscm.Rows[0]["doc_ref_no"].ToString() + " ";
                                _effect = -1;
                                _salesDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                _inventoryRepDAL.TransactionRollback();
                                _generalDAL.TransactionRollback();
                                return _effect;
                            }
                            //   }


                        }
                    }
                }
                #endregion

                SaveReversalForCommon(_invoiceHeader, _invoiceItem, _invoiceAuto, _isHP, out   _invoiceNo, _inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, _masterAutoNumber, out  _docNo);

                _salesDAL.UpdateRequestCloseStatus(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_anal_4, _invoiceHeader.Sah_anal_3, "F", _invoiceHeader.Sah_cre_by);

                if (!string.IsNullOrEmpty(_docNo)) { _salesDAL.UpdateInvoiceRevNo(_invoiceNo, _docNo); }

                if (_isHP == true)
                {
                    HpAccount _tmpAcc = _salesDAL.GetHP_Account_onAccNo(_invoiceHeader.Sah_acc_no);

                    if (_tmpAcc.Hpa_acc_no != null)
                    {
                        _dueDays = Convert.ToInt32((Convert.ToDateTime(_invoiceHeader.Sah_dt).Date - Convert.ToDateTime(_tmpAcc.Hpa_acc_cre_dt).Date).TotalDays);
                    }

                    List<RecieptHeader> _hpReversReceiptHeaderActual = new List<RecieptHeader>();
                    foreach (var _itm in _hpReversReceiptHeader)
                    {
                        RecieptHeader _hdr = new RecieptHeader();
                        _hdr.Sar_ref_doc = _itm.Sar_receipt_no;
                        _hdr.Sar_seq_no = _inventoryDAL.GetSerialID();
                        _revReceiptSeqNo.Add(_hdr.Sar_seq_no);
                        _hdr.Sar_receipt_no = _hdr.Sar_seq_no.ToString();
                        _hdr.Sar_manual_ref_no = _itm.Sar_manual_ref_no;
                        _hdr.Sar_prefix = _itm.Sar_prefix;
                        _hdr.Sar_tot_settle_amt = _itm.Sar_tot_settle_amt;
                        _hdr.Sar_direct = false;
                        _hdr.Sar_receipt_date = _invoiceHeader.Sah_dt;
                        _hdr.Sar_acc_no = _itm.Sar_acc_no;
                        _hdr.Sar_act = true;
                        _hdr.Sar_com_cd = _itm.Sar_com_cd;
                        _hdr.Sar_comm_amt = _itm.Sar_comm_amt;
                        _hdr.Sar_anal_5 = _itm.Sar_anal_5;
                        _hdr.Sar_create_by = _invoiceHeader.Sah_cre_by;
                        _hdr.Sar_create_when = DateTime.Now;
                        _hdr.Sar_currency_cd = _itm.Sar_currency_cd;
                        _hdr.Sar_debtor_add_1 = _itm.Sar_debtor_add_1;
                        _hdr.Sar_debtor_add_2 = _itm.Sar_debtor_add_2;
                        _hdr.Sar_debtor_cd = _itm.Sar_debtor_cd;
                        _hdr.Sar_debtor_name = _itm.Sar_debtor_name;
                        _hdr.Sar_direct_deposit_bank_cd = _itm.Sar_direct_deposit_bank_cd;
                        _hdr.Sar_direct_deposit_branch = _itm.Sar_direct_deposit_branch;
                        _hdr.Sar_epf_rate = _itm.Sar_epf_rate;
                        _hdr.Sar_esd_rate = _itm.Sar_esd_rate;
                        _hdr.Sar_is_mgr_iss = _itm.Sar_is_mgr_iss;
                        _hdr.Sar_is_oth_shop = _itm.Sar_is_oth_shop;
                        _hdr.Sar_is_used = _itm.Sar_is_used;
                        _hdr.Sar_mob_no = _itm.Sar_mob_no;
                        _hdr.Sar_mod_by = _invoiceHeader.Sah_mod_by;
                        _hdr.Sar_mod_when = DateTime.Now;
                        _hdr.Sar_nic_no = _itm.Sar_nic_no;
                        _hdr.Sar_oth_sr = _itm.Sar_oth_sr;
                        _hdr.Sar_profit_center_cd = _itm.Sar_profit_center_cd;
                        if (_itm.Sar_receipt_type == "HPDPM" || _itm.Sar_receipt_type == "HPDPS") { _hdr.Sar_receipt_type = "HPDRV"; }
                        else if (_itm.Sar_receipt_type == "INSUR") { _hdr.Sar_receipt_type = "INSURR"; }
                        else if (_itm.Sar_receipt_type == "VHINSR") { _hdr.Sar_receipt_type = "VHINSRR"; }
                        else if (_itm.Sar_receipt_type == "DPINSU" || _itm.Sar_receipt_type == "DPINS") { _hdr.Sar_receipt_type = "DPINSR"; }
                        else { _hdr.Sar_receipt_type = "HPREV"; }
                        _hdr.Sar_remarks = string.Empty;
                        _hdr.Sar_ser_job_no = string.Empty;
                        _hdr.Sar_session_id = _invoiceHeader.Sah_session_id;
                        _hdr.Sar_tel_no = _itm.Sar_tel_no;
                        _hdr.Sar_uploaded_to_finance = false;
                        _hdr.Sar_used_amt = 0;
                        _hdr.Sar_wht_rate = 0;

                        if (_itm.Sar_receipt_type == "DPINSU")
                        { if (_dueDays <= 30) { _hpReversReceiptHeaderActual.Add(_hdr); } }
                        else
                        { _hpReversReceiptHeaderActual.Add(_hdr); }
                    }

                    #region Save Revers receipt

                    if (_hpReversReceiptHeaderActual != null)
                        if (_hpReversReceiptHeaderActual.Count > 0)
                        {
                            foreach (RecieptHeader _hdr in _hpReversReceiptHeaderActual)
                            {
                                _salesDAL.SaveReceiptHeader(_hdr);
                                List<RecieptItem> _recDet = new List<RecieptItem>();
                                _recDet = _salesDAL.GetReceiptDetails(_hdr.Sar_ref_doc);

                                if (_recDet != null && _recDet.Count > 0)
                                {
                                    foreach (RecieptItem _det in _recDet)
                                    {
                                        RecieptItem _itm = new RecieptItem();
                                        _itm.Sard_seq_no = _hdr.Sar_seq_no;
                                        _itm.Sard_line_no = _det.Sard_line_no;
                                        _itm.Sard_receipt_no = Convert.ToString(_hdr.Sar_seq_no);
                                        _itm.Sard_inv_no = _det.Sard_inv_no;
                                        _itm.Sard_pay_tp = "CASH"; //_det.Sard_pay_tp;
                                        _itm.Sard_ref_no = null; //_det.Sard_ref_no;
                                        _itm.Sard_chq_bank_cd = null; //_det.Sard_chq_bank_cd;
                                        _itm.Sard_chq_branch = null; //_det.Sard_chq_branch;
                                        _itm.Sard_deposit_bank_cd = null; //_det.Sard_deposit_bank_cd;
                                        _itm.Sard_deposit_branch = null; //_det.Sard_deposit_branch;
                                        _itm.Sard_credit_card_bank = null; //_det.Sard_credit_card_bank;
                                        _itm.Sard_cc_tp = null; //_det.Sard_cc_tp;
                                        _itm.Sard_cc_expiry_dt = _det.Sard_cc_expiry_dt;
                                        _itm.Sard_cc_is_promo = false; //_det.Sard_cc_is_promo;
                                        _itm.Sard_cc_period = 0; //_det.Sard_cc_period;
                                        _itm.Sard_gv_issue_loc = null; //_det.Sard_gv_issue_loc;
                                        _itm.Sard_gv_issue_dt = _det.Sard_gv_issue_dt;
                                        _itm.Sard_settle_amt = _det.Sard_settle_amt;
                                        _itm.Sard_sim_ser = _det.Sard_sim_ser;
                                        _itm.Sard_anal_1 = _det.Sard_anal_1;
                                        _itm.Sard_anal_2 = _det.Sard_anal_2;
                                        _itm.Sard_anal_3 = 0;//_det.Sard_anal_3;
                                        _itm.Sard_anal_4 = _det.Sard_anal_4;
                                        _itm.Sard_anal_5 = _det.Sard_anal_5;
                                        _salesDAL.SaveReceiptItem(_itm);
                                    }
                                }

                            }
                        }

                    #endregion

                    foreach (Int32 _lst in _revReceiptSeqNo)
                    {
                        _reversReceiptAuto.Aut_modify_dt = null;
                        _reversReceiptAuto.Aut_year = null;
                        MasterAutoNumber _reversRecipt = _inventoryDAL.GetAutoNumber(_reversReceiptAuto.Aut_moduleid, _reversReceiptAuto.Aut_direction, _reversReceiptAuto.Aut_start_char, _reversReceiptAuto.Aut_cate_tp, _reversReceiptAuto.Aut_cate_cd, _reversReceiptAuto.Aut_modify_dt, _reversReceiptAuto.Aut_year);
                        _reversRecipt.Aut_modify_dt = null;
                        _reversRecipt.Aut_year = null;
                        string _revReciptNo = _reversRecipt.Aut_cate_cd + "-" + _reversRecipt.Aut_start_char + "-" + _reversRecipt.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_reversRecipt);
                        _salesDAL.UpdateInvoiceReceipts("-1", _revReciptNo, -1, _lst);
                    }

                    #region Update Account Log
                    HPAccountLog _hpLog = _salesDAL.GetAccountLog(_invoiceHeader.Sah_acc_no);
                    if (!string.IsNullOrEmpty(_hpLog.Hal_acc_no))
                    {
                        _salesDAL.UpdateAccountforCashConversion(_invoiceHeader.Sah_acc_no, "C", _invoiceHeader.Sah_dt);
                        _hpLog.Hal_seq_no = _inventoryDAL.GetSerialID();
                        _hpLog.Hal_sa_sub_tp = "REV";
                        _hpLog.Hal_pc = _invoiceHeader.Sah_pc;
                        _hpLog.Hal_log_dt = _invoiceHeader.Sah_dt;
                        _hpLog.Hal_invc_no = _invoiceNo;
                        _hpLog.Hal_rev_stus = true;
                        _hpLog.Hal_cre_by = _invoiceHeader.Sah_cre_by;
                        _hpLog.Hal_cre_dt = _invoiceHeader.Sah_cre_when;
                        _hpLog.Hal_inst_stm = 0;
                        _hpLog.Hal_init_stm = 0;
                        if (_dueDays > 30) { _hpLog.Hal_init_ins = 0; }
                        _hpLog.Hal_cls_dt = _invoiceHeader.Sah_dt;
                        _hpLog.Hal_stus = "C";
                        _hpLog.Hal_cls_dt = _invoiceHeader.Sah_dt;
                        _salesDAL.SaveHPAccountLog(_hpLog);
                    }
                    #endregion

                    if (_dueDays <= 30)
                    {
                        List<HpInsurance> _insuDet = new List<HpInsurance>();
                        _insuDet = _salesDAL.GetAccountInsuranceDetails(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_acc_no);

                        if (_insuDet != null)
                        {
                            foreach (HpInsurance _tmp in _insuDet)
                            {
                                Int32 _insSeq = _inventoryDAL.GetSerialID();
                                _tmp.Hit_is_rvs = true;
                                _tmp.Hti_seq = _insSeq;
                                _tmp.Hti_cre_by = _invoiceHeader.Sah_cre_by;
                                _tmp.Hti_dt = _invoiceHeader.Sah_dt;
                                _salesDAL.Save_HpInsu(_tmp);

                            }
                        }
                    }

                    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_txnAuto.Aut_moduleid, (short)_txnAuto.Aut_direction, _txnAuto.Aut_start_char, _txnAuto.Aut_cate_tp, _txnAuto.Aut_cate_cd, _txnAuto.Aut_modify_dt, _txnAuto.Aut_year);
                    string txnNo = _txnAuto.Aut_cate_cd + "-" + _txnAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_txnAuto);

                    _transaction.Hpt_ref_no = txnNo;
                    _transaction.Hpt_seq = _inventoryDAL.GetSerialID();
                    _salesDAL.Save_HpTransaction(_transaction);
                }

                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();
                _generalDAL.TransactionCommit();
                _effect = 1;
            }
            catch (Exception ex)
            {
                _docNo = ex.Message;
                _invoiceNo = ex.Message;
                _effect = -1;
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
            }
            return _effect;

        }

        public Int32 SaveReversal(InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, MasterAutoNumber _invoiceAuto, Boolean _isHP, out  string _invoiceNo, InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo)
        {

            //string _invNo = "";
            //string _SRNNo = "";
            Int32 _effect = 0;

            using (TransactionScope _tr = new TransactionScope())
            {

                _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen();
                _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen();
                _inventoryRepDAL = new ReptCommonDAL(); _inventoryRepDAL.ConnectionOpen();

                SaveReversalForCommon(_invoiceHeader, _invoiceItem, _invoiceAuto, _isHP, out   _invoiceNo, _inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, _masterAutoNumber, out  _docNo);

                _salesDAL.UpdateRequestCloseStatus(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_anal_4, _invoiceHeader.Sah_anal_3, "F", _invoiceHeader.Sah_cre_by);

                if (!string.IsNullOrEmpty(_docNo))
                {
                    _salesDAL.UpdateInvoiceRevNo(_invoiceNo, _docNo);
                }
                //_invBLL.SRN()

                _salesDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _inventoryRepDAL.ConnectionClose();
                _effect = 1;
                _tr.Complete();
            }
            //_invoiceNo = _invNo;
            //_docNo = _SRNNo;
            return _effect;

        } //Re-arranged By PRabhath on 30/08/2012
        //By PRabhath on 30/08/2012
        public Int32 SaveReversalForCommon(InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, MasterAutoNumber _invoiceAuto, Boolean _isHP, out  string _invoiceNo, InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo)
        {

            string _invNo = "";
            string _SRNNo = "";
            Int32 _effect = 0;

            CommonSaveReversal(_invoiceHeader, _invoiceItem, _invoiceAuto, _isHP, out _invNo);

            //if (_inventoryMovementHeader != null && _reptPickSerials.Count > 0 && _reptPickSerialsSub.Count > 0)
            if (_inventoryMovementHeader != null && _reptPickSerials.Count > 0)
            {


                var _tempDO = (from _lst in _reptPickSerials
                               select _lst.Tus_base_doc_no).ToList().Distinct();

                InventoryBLL _invBLL = new InventoryBLL();

                foreach (string DO in _tempDO)
                {
                    var tempDo = (from _lst in _reptPickSerials
                                  where _lst.Tus_base_doc_no == DO
                                  select _lst).ToList();
                    Boolean SaveHdr = false;

                    if (tempDo != null)
                    {
                        List<ReptPickSerials> x = new List<ReptPickSerials>();
                        foreach (ReptPickSerials l in tempDo)
                        {
                            if (SaveHdr == false)
                            {
                                _inventoryMovementHeader.Ith_oth_docno = _invNo;//l.Tus_base_doc_no;
                                _inventoryMovementHeader.Ith_oth_loc = l.Tus_loc;
                                _inventoryMovementHeader.Ith_entry_no = l.Tus_base_doc_no;
                                SaveHdr = true;
                            }

                            l.Tus_base_doc_no = _invNo;
                            x.Add(l);
                        }

                        //var itm = (from _lst in _reptPickSerials
                        //           where _lst.Tus_doc_no == DO
                        //           select _lst).ToList();

                        //List<ReptPickSerials> _list = new List<ReptPickSerials>();

                        //foreach (ReptPickSerials _tempItem in itm)
                        //{
                        //    _list.Add(_tempItem);

                        //}

                        _inventoryMovementHeader.Ith_seq_no = 0;
                        _effect = _invBLL.SRNWithCreditNote(_inventoryMovementHeader, x, _reptPickSerialsSub, _masterAutoNumber, out _SRNNo, _inventoryRepDAL, _inventoryDAL, _ScmCommonDAL);

                        List<ReptPickSerials> _updateSerials = new List<ReptPickSerials>();
                        _updateSerials = x;

                        foreach (ReptPickSerials _tmp in _updateSerials)
                        {
                            _inventoryDAL.UpdateSerialRevStatus(_tmp.Tus_doc_no, _tmp.Tus_itm_cd, _tmp.Tus_com, _tmp.Tus_ser_id, _tmp.Tus_ser_1);
                        }

                        SaveHdr = false;
                    }
                }

            }

            //_invBLL.SRN()


            _effect = 1;

            _invoiceNo = _invNo;
            _docNo = _SRNNo;
            return _effect;

        }

        public Int32 SaveTempPrice(TempCommonPrice _tempPrice)
        {
            Int32 _effect = 0;
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen();
                _salesDAL.SaveTempPrice(_tempPrice);

                _salesDAL.ConnectionClose();
                _effect = 1;
                _tr.Complete();
            }

            return _effect;
        }

        public void CommonSaveReversal(InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, MasterAutoNumber _invoiceAuto, Boolean _isHP, out  string _invoiceNo)
        {

            string _invNo = "";
            Int32 _invoiceLine = 1;
            decimal _revValue = 0;

            //Generate SeqNo
            Int32 InvoiceSeqNo = _inventoryDAL.GetSerialID();
            #region EXCHANGE process //add by tharanga 2018/02/09
            DataTable odt = _salesDAL.get_inv_type("CREDIT", _invoiceHeader.Sah_inv_tp);
            if (odt.Rows.Count > 0)
            {
                if (_invoiceHeader.Sah_process_name == "EXCHANGE")//add by tharanga 2018/02/09
                {
                    decimal _revValueNew = 0;
                    foreach (InvoiceItem _itm in _invoiceItem)
                    { _revValueNew = _revValueNew + _itm.Sad_tot_amt; }
                    List<RequestApprovalDetail> _RequestApprovalDetail = _salesDAL.GET_EXCHANGE_REC_DET(_invoiceHeader.Sah_anal_3);
                    // Decimal val = _invoiceItem.FirstOrDefault().Sad_comm_amt;
                    Decimal val = _RequestApprovalDetail.FirstOrDefault().Grad_anal16;
                    if (val == 100 || val == 0)
                    { val = 0; }
                    else
                    { val = 100 - val; }
                    DataTable _dHdr = _salesDAL.get_val_cust_excahge(_invoiceHeader.Sah_ref_doc, _revValueNew);
                    if (_dHdr != null && _dHdr.Rows.Count > 0)
                    {
                        _invoiceHeader.Sah_anal_7 = _dHdr.Rows[0]["new_credit_amount"] == DBNull.Value ? 0 : Convert.ToDecimal(_dHdr.Rows[0]["new_credit_amount"].ToString());
                        _invoiceHeader.Sah_anal_8 = _dHdr.Rows[0]["new_credit_amount"] == DBNull.Value ? 0 : Math.Round(Convert.ToDecimal(_dHdr.Rows[0]["new_credit_amount"].ToString()) * val / 100, 2);
                        _invoiceHeader.Sah_anal_9 = _dHdr.Rows[0]["new_credit_amount"] == DBNull.Value ? 0 : Math.Round(Convert.ToDecimal(_dHdr.Rows[0]["new_credit_amount"].ToString()) * val / 100, 2);

                    }

                }
                if (_invoiceHeader.Sah_process_name == "EXCHANGEWEB")//add by dulaj 2018/Jul/03
                {
                    decimal _revValueNew = 0;
                    foreach (InvoiceItem _itm in _invoiceItem)
                    { _revValueNew = _revValueNew + _itm.Sad_tot_amt; }
                    List<RequestApprovalDetail> _RequestApprovalDetail = _salesDAL.GET_EXCHANGE_REC_DET_WEB(_invoiceHeader.Sah_anal_3);
                    // Decimal val = _invoiceItem.FirstOrDefault().Sad_comm_amt;                  
                    Decimal val = _RequestApprovalDetail.FirstOrDefault().Grad_anal16;
                    if (val == 100 || val == 0)
                    { val = 0; }
                    else
                    { val = 100 - val; }
                    DataTable _dHdr = _salesDAL.get_val_cust_excahge(_invoiceHeader.Sah_ref_doc, _revValueNew);
                    if (_dHdr != null && _dHdr.Rows.Count > 0)
                    {
                        _invoiceHeader.Sah_anal_7 = _dHdr.Rows[0]["new_credit_amount"] == DBNull.Value ? 0 : Convert.ToDecimal(_dHdr.Rows[0]["new_credit_amount"].ToString());
                        _invoiceHeader.Sah_anal_8 = _dHdr.Rows[0]["new_credit_amount"] == DBNull.Value ? 0 : Math.Round(Convert.ToDecimal(_dHdr.Rows[0]["new_credit_amount"].ToString()) * val / 100, 2);
                        _invoiceHeader.Sah_anal_9 = _dHdr.Rows[0]["new_credit_amount"] == DBNull.Value ? 0 : Math.Round(Convert.ToDecimal(_dHdr.Rows[0]["new_credit_amount"].ToString()) * val / 100, 2);

                    }

                }
            }
            // end by tharanga
            #endregion



            //discount voucher cancelation
            _salesDAL.Update_GV_Pages(2, _invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_dt, _invoiceHeader.Sah_ref_doc, "C", 0, "P_GV", _invoiceHeader.Sah_mod_by, "");
            //Paymod voucher cancelation
            _salesDAL.Update_GV_Pages(2, _invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_dt, _invoiceHeader.Sah_ref_doc, "C", 0, "GV", _invoiceHeader.Sah_mod_by, "");



            _invoiceHeader.Sah_seq_no = InvoiceSeqNo;
            if (_invoiceHeader.Sah_remarks != "HP REVERT")//add by tharanga 2018/06/19
            { _invoiceHeader.Sah_inv_no = Convert.ToString(InvoiceSeqNo); }

            //Save Invoice Header
            _salesDAL.SaveSalesHeader(_invoiceHeader);
            //Save Invoice Items
            foreach (InvoiceItem _itm in _invoiceItem)
            {
                List<InvoiceItemTax> _itmTax = new List<InvoiceItemTax>();
                List<SaleCommission> _tmpComm = new List<SaleCommission>();
                _itmTax = _salesDAL.GetInvItemTax(_itm.Sad_inv_no, _itm.Sad_itm_cd, _itm.Sad_itm_line);
                if (_invoiceHeader.Sah_remarks == "HP REVERT")
                {
                    _itmTax = _salesDAL.GetInvItemTax(_invoiceHeader.Sah_ref_doc, _itm.Sad_itm_cd, _itm.Sad_itm_line);
                }
                foreach (InvoiceItemTax _one in _itmTax)
                {
                    if (_invoiceHeader.Sah_remarks == "HP REVERT")//add by tharanga 2018/06/19
                    {
                        _itm.Sad_itm_tax_amt = Math.Round((_itm.Sad_tot_amt * _one.Satx_itm_tax_rt) / (100 + _one.Satx_itm_tax_rt), 2);//(_one.Satx_itm_tax_amt / _itm.Sad_qty) * _itm.Sad_srn_qty;
                        _itm.Sad_unit_amt = Math.Round(_itm.Sad_unit_amt - _itm.Sad_itm_tax_amt);
                        _itm.Sad_unit_rt = _itm.Sad_unit_amt;
                        _itm.Sad_tot_amt = _itm.Sad_tot_amt;

                    }
                }
                // decimal _fwsQty = _itm.Sad_srn_qty - _itm.Sad_fws_ignore_qty;
                decimal _fwsQty = _itm.Sad_fws_ignore_qty;

                if (_fwsQty < 0)
                {
                    _fwsQty = 0;
                }
                if (_invoiceHeader.Sah_remarks != "HP REVERT")//add by tharanga not update srn qty in RVET process
                {
                    _salesDAL.UpdateInvRevQty(_itm.Sad_inv_no, _itm.Sad_itm_cd, _itm.Sad_srn_qty, _itm.Sad_itm_line, _fwsQty);
                }
                //    _salesDAL.UpdateInvRevQty(_itm.Sad_job_no, _itm.Sad_itm_cd, _itm.Sad_srn_qty, _itm.Sad_itm_line, _fwsQty);

                // Tharindu 2018-08-04 change due to not update srn qty in warrenty process
                if (_itm.Sad_job_no != null || _itm.Sad_job_no != string.Empty && _itm.Sad_inv_no == null)
                {
                    _salesDAL.UpdateInvRevQty(_itm.Sad_job_no, _itm.Sad_itm_cd, _itm.Sad_srn_qty, _itm.Sad_job_line, _fwsQty);
                }

                // Tharindu 2018-08-09 change due to not update srn qty in web
                //if (_itm.Sad_job_no == null || _itm.Sad_job_no == string.Empty || _itm.Sad_job_no == "N/A")
                //{
                //    _salesDAL.UpdateInvRevQty(_itm.Sad_inv_no, _itm.Sad_itm_cd, _itm.Sad_srn_qty, _itm.Sad_itm_line, _fwsQty);
                //}
                //else
                //{
                //    _salesDAL.UpdateInvRevQty(_itm.Sad_job_no, _itm.Sad_itm_cd, _itm.Sad_srn_qty, _itm.Sad_itm_line, _fwsQty);
                //}

                // get commission details for peticular item
                if (_isHP == false)
                {
                    _tmpComm = new List<SaleCommission>();
                    _tmpComm = _salesDAL.GetCommForRev(_itm.Sad_inv_no, _itm.Sad_itm_cd, _itm.Sad_itm_line);
                }

                _itm.Sad_seq_no = InvoiceSeqNo;
                //_itm.Sad_itm_line = _invoiceLine;
                if (_invoiceHeader.Sah_remarks == "HP REVERT")//add by tharanga 2018/06/19
                { _itm.Sad_inv_no = _invoiceHeader.Sah_inv_no; }
                else
                {
                    _itm.Sad_inv_no = Convert.ToString(InvoiceSeqNo);
                }
                _salesDAL.SaveReverseItem(_itm);

                //kapila 18/11/2016
                _revValue = _revValue + _itm.Sad_tot_amt;

                foreach (InvoiceItemTax _one in _itmTax)
                {
                    InvoiceItemTax _tax = new InvoiceItemTax();
                    if (_invoiceHeader.Sah_remarks == "HP REVERT")//add by tharanga 2018/06/19
                    { _tax.Satx_inv_no = _invoiceHeader.Sah_inv_no; }
                    else
                    { _tax.Satx_inv_no = _itm.Sad_inv_no; }
                    _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                    _tax.Satx_itm_line = _itm.Sad_itm_line;
                    if (_invoiceHeader.Sah_anal_4 == "ARQT013")     //kapila 9/1/2017
                        _tax.Satx_itm_tax_amt = _itm.Sad_itm_tax_amt;
                    else
                        _tax.Satx_itm_tax_amt = (_one.Satx_itm_tax_amt / _itm.Sad_qty) * _itm.Sad_srn_qty;

                    if (_invoiceHeader.Sah_remarks == "HP REVERT")//add by tharanga 2018/06/19
                    {
                        _tax.Satx_itm_tax_amt = Math.Round((_itm.Sad_tot_amt * _one.Satx_itm_tax_rt) / (100 + _one.Satx_itm_tax_rt), 2);//(_one.Satx_itm_tax_amt / _itm.Sad_qty) * _itm.Sad_srn_qty;
                    }
                    _tax.Satx_itm_tax_rt = _one.Satx_itm_tax_rt;
                    _tax.Satx_itm_tax_tp = _one.Satx_itm_tax_tp;
                    _tax.Satx_job_line = 0;
                    _tax.Satx_job_no = "";
                    _tax.Satx_seq_no = _itm.Sad_seq_no;
                    _salesDAL.SaveSalesItemTax(_tax);
                }
                _invoiceLine += 1;

                // update  new commision details
                if (_isHP == false)
                {
                    if (_tmpComm != null)
                    {
                        foreach (SaleCommission _comm in _tmpComm)
                        {
                            SaleCommission _saveComm = new SaleCommission();
                            _saveComm.Sac_calc_on = Convert.ToString((Convert.ToDecimal(_comm.Sac_calc_on) / _itm.Sad_qty) * _itm.Sad_srn_qty);
                            _saveComm.Sac_comm_amt = Convert.ToInt32(_comm.Sac_comm_amt / _itm.Sad_qty * _itm.Sad_srn_qty);
                            _saveComm.Sac_comm_amt_final = Convert.ToInt32(_comm.Sac_comm_amt_final / _itm.Sad_qty * _itm.Sad_srn_qty);
                            _saveComm.Sac_comm_line = _comm.Sac_comm_line;
                            _saveComm.Sac_comm_rate = _comm.Sac_comm_rate;
                            _saveComm.Sac_comm_rate_final = _comm.Sac_comm_rate_final;
                            _saveComm.Sac_invoice_no = _itm.Sad_inv_no;
                            _saveComm.Sac_itm_cd = _comm.Sac_itm_cd;
                            _saveComm.Sac_itm_line = _comm.Sac_itm_line;
                            _saveComm.Sac_pay_mode = _comm.Sac_pay_mode;
                            _saveComm.Sac_seq_no = _itm.Sad_seq_no;
                            _salesDAL.SaveSalesCommission(_saveComm);
                        }
                    }
                }

            }
            string InvoiceNo = "";
            if (_invoiceHeader.Sah_remarks == "HP REVERT")
            {
                InvoiceNo = _invoiceHeader.Sah_inv_no;
            }
            else
            {
                MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
                InvoiceNo = _invoiceAuto.Aut_cate_cd + "-" + _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                _salesDAL.UpdateInvoiceReceipts(InvoiceNo, "-1", InvoiceSeqNo, 0000000000);

            }
            //MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
            //string InvoiceNo = _invoiceAuto.Aut_cate_cd + "-" + _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

            //_salesDAL.UpdateInvoiceReceipts(InvoiceNo, "-1", InvoiceSeqNo, 0000000000);

            if (_isHP == true)
            {
                //Hoooo rawatunaneee....darshana on 08-05-2014
                // _salesDAL.UpdateAccountStatus(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_acc_no, _invoiceHeader.Sah_ref_doc, "R");
            }

            _salesDAL.UpdateInvoiceRevStatus(_invoiceHeader.Sah_ref_doc);

            //kapila 18/11/2016
            _salesDAL.Update_Invoice_Anal_8(_invoiceHeader.Sah_ref_doc, _revValue);
            if (_invoiceHeader.Sah_remarks != "HP REVERT")
            {
                _inventoryDAL.UpdateAutoNumber(_invoiceAuto);
            }
            _invNo = InvoiceNo;

            _invoiceNo = _invNo;
        }

        public void CommonSaveReversalNew(InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, MasterAutoNumber _invoiceAuto, Boolean _isHP, out  string _invoiceNo)
        {

            string _invNo = "";
            Int32 _invoiceLine = 1;
            decimal _revValue = 0;

            //Generate SeqNo
            Int32 InvoiceSeqNo = _inventoryDAL.GetSerialID();



            _invoiceHeader.Sah_seq_no = InvoiceSeqNo;
            _invoiceHeader.Sah_inv_no = Convert.ToString(InvoiceSeqNo);

            //Save Invoice Header
            _salesDAL.SaveSalesHeader(_invoiceHeader);
            //Save Invoice Items
            foreach (InvoiceItem _itm in _invoiceItem)
            {
                List<InvoiceItemTax> _itmTax = new List<InvoiceItemTax>();
                List<SaleCommission> _tmpComm = new List<SaleCommission>();
                _itmTax = _salesDAL.GetInvItemTax(_itm.Sad_inv_no, _itm.Sad_itm_cd, _itm.Sad_itm_line);

                // decimal _fwsQty = _itm.Sad_srn_qty - _itm.Sad_fws_ignore_qty;
                decimal _fwsQty = _itm.Sad_fws_ignore_qty;

                if (_fwsQty < 0)
                {
                    _fwsQty = 0;
                }

                _salesDAL.UpdateInvRevQty(_itm.Sad_inv_no, _itm.Sad_itm_cd, _itm.Sad_srn_qty, _itm.Sad_itm_line, _fwsQty);

                // get commission details for peticular item
                if (_isHP == false)
                {
                    _tmpComm = new List<SaleCommission>();
                    _tmpComm = _salesDAL.GetCommForRev(_itm.Sad_inv_no, _itm.Sad_itm_cd, _itm.Sad_itm_line);
                }

                _itm.Sad_seq_no = InvoiceSeqNo;
                //_itm.Sad_itm_line = _invoiceLine;
                _itm.Sad_inv_no = Convert.ToString(InvoiceSeqNo);
                _salesDAL.SaveReverseItem(_itm);

                //kapila 18/11/2016
                _revValue = _revValue + _itm.Sad_tot_amt;


                InvoiceItemTax _tax = new InvoiceItemTax();
                _tax.Satx_inv_no = _itm.Sad_inv_no;
                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                _tax.Satx_itm_line = _itm.Sad_itm_line;
                _tax.Satx_itm_tax_amt = _itm.Sad_itm_tax_amt;
                _tax.Satx_itm_tax_rt = _itm.Sad_itm_tax_amt * 100 / _itm.Sad_tot_amt;
                _tax.Satx_itm_tax_tp = "VAT";
                _tax.Satx_job_line = 0;
                _tax.Satx_job_no = "";
                _tax.Satx_seq_no = _itm.Sad_seq_no;
                _salesDAL.SaveSalesItemTax(_tax);

                // update  new commision details
                if (_isHP == false)
                {
                    if (_tmpComm != null)
                    {
                        foreach (SaleCommission _comm in _tmpComm)
                        {
                            SaleCommission _saveComm = new SaleCommission();
                            _saveComm.Sac_calc_on = Convert.ToString((Convert.ToDecimal(_comm.Sac_calc_on) / _itm.Sad_qty) * _itm.Sad_srn_qty);
                            _saveComm.Sac_comm_amt = Convert.ToInt32(_comm.Sac_comm_amt / _itm.Sad_qty * _itm.Sad_srn_qty);
                            _saveComm.Sac_comm_amt_final = Convert.ToInt32(_comm.Sac_comm_amt_final / _itm.Sad_qty * _itm.Sad_srn_qty);
                            _saveComm.Sac_comm_line = _comm.Sac_comm_line;
                            _saveComm.Sac_comm_rate = _comm.Sac_comm_rate;
                            _saveComm.Sac_comm_rate_final = _comm.Sac_comm_rate_final;
                            _saveComm.Sac_invoice_no = _itm.Sad_inv_no;
                            _saveComm.Sac_itm_cd = _comm.Sac_itm_cd;
                            _saveComm.Sac_itm_line = _comm.Sac_itm_line;
                            _saveComm.Sac_pay_mode = _comm.Sac_pay_mode;
                            _saveComm.Sac_seq_no = _itm.Sad_seq_no;
                            _salesDAL.SaveSalesCommission(_saveComm);
                        }
                    }
                }

            }


            MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
            string InvoiceNo = _invoiceAuto.Aut_cate_cd + "-" + _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

            _salesDAL.UpdateInvoiceReceipts(InvoiceNo, "-1", InvoiceSeqNo, 0000000000);

            if (_isHP == true)
            {
                //Hoooo rawatunaneee....darshana on 08-05-2014
                // _salesDAL.UpdateAccountStatus(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_acc_no, _invoiceHeader.Sah_ref_doc, "R");
            }

            _salesDAL.UpdateInvoiceRevStatus(_invoiceHeader.Sah_ref_doc);

            //kapila 18/11/2016
            _salesDAL.Update_Invoice_Anal_8(_invoiceHeader.Sah_ref_doc, _revValue);

            _inventoryDAL.UpdateAutoNumber(_invoiceAuto);

            _invNo = InvoiceNo;

            _invoiceNo = _invNo;
        }
        public Int16 UpdateBusDesig(string _code, string _rmk)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int16 X = _salesDAL.UpdateBusDesig(_code, _rmk);
            _salesDAL.ConnectionClose();
            return X;
        }

        public List<InterCompanySalesParameter> GetInterCompanyParameter(string _admintm, string _fromCompany, string _fromProfit, string _toCompany, string _toProfit)
        {
            _salesDAL = new SalesDAL();
            List<InterCompanySalesParameter> _list = new List<InterCompanySalesParameter>();
            _list = _salesDAL.GetInterCompanyParameter(_admintm, _fromCompany, _fromProfit, _toCompany, _toProfit);
            return _list;
        }

        //Written By Prabhath on 12/06/2012
        public CustomerAccountRef GetCustomerAccount(string _company, string _customer)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCustomerAccount(_company, _customer);
        }

        //Written By Prabhath on 14/06/2012
        public List<PaymentTypeRef> GetAllPaymentType(string _company, string _profitCenter, string _code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAllPaymentType(_company, _profitCenter, _code);
        }

        public DataTable GetAllRepPriceType()
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAllRepPriceType();
        }
        //dilshan on 08/11/2018
        public DataTable GetAllinvType()
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAllinvType();
        }

        //darshana 28/06/2012
        public List<DistrictProvince> GetDistrict(string _pCode)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDistrict(_pCode);
        }

        //kapila 14/6/2012
        public DataTable GetInvDet(string _InvNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvDet(_InvNo);
        }

        //kapila
        public DataTable GetInvWarrDet(string _InvNo, Int32 _seq, Int32 _itmLine, Int32 _batchLine, Int32 _serLine)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvWarrDet(_InvNo, _seq, _itmLine, _batchLine, _serLine);
        }

        //darshana 16/06/2012
        public bool IsValidReceiptType(string _company, string _type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.IsValidReceiptType(_company, _type);
        }

        //darshana 20/06/2012
        public bool IsValidDivision(string _company, string _pc, string _cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.IsValidDivision(_company, _pc, _cd);
        }

        //darshana 20/06/2012
        public decimal GetOutInvAmt(string _company, string _pc, string _cus, string _inv)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetOutInvAmt(_company, _pc, _cus, _inv);
        }
        public decimal GetOutInvAmtweb(string _company, string _pc, string _cus, string _inv)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetOutInvAmtWeb(_company, _pc, _cus, _inv);
        }
        public decimal GetOutInvAmtTBS(string _company, string _pc, string _cus, string _inv)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetOutInvAmtTBS(_company, _pc, _cus, _inv);
        }

        //Darshana 24-10-2012
        public Int16 SaveWarrExReceipt(RecieptHeader _NewExReceipt, List<RecieptItem> _NewExReceiptDetails, List<ReceiptWaraExtend> _NewExRecWaraDetails, MasterAutoNumber _masterAutoNumber, out string DocNo)
        {
            Int16 _effects = 0;
            try
            {
                _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                //Tharindu 
                _fmsInventoryDal = new FMS_InventoryDAL();
                _fmsInventoryDal.ConnectionOpen();

                _NewExReceipt.Sar_receipt_no = _NewExReceipt.Sar_seq_no.ToString();

                _salesDAL.SaveReceiptHeader(_NewExReceipt);

                if (_NewExReceiptDetails != null)
                {
                    foreach (RecieptItem _ReceiptDetails in _NewExReceiptDetails)
                    {
                        _salesDAL.SaveReceiptItem(_ReceiptDetails);
                    }
                }

                if (_NewExRecWaraDetails != null)
                {
                    foreach (ReceiptWaraExtend _ReceiptWaraDetails in _NewExRecWaraDetails)
                    {
                        _salesDAL.SaveReceiptWarrantyExtend(_ReceiptWaraDetails);

                        //if (_ReceiptWaraDetails.Swp_tp != "SGV")
                        //  {
                        _salesDAL.UpdateExtendWarranty(_ReceiptWaraDetails.Srw_do_no, _ReceiptWaraDetails.Srw_itm, _ReceiptWaraDetails.Srw_ser_id, _ReceiptWaraDetails.Srw_new_period, _ReceiptWaraDetails.Srw_cre_by, _ReceiptWaraDetails.Srw_warra);
                        //}

                    }
                }

                Int32 _autoNo = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                string _documentNo = _masterAutoNumber.Aut_cate_cd + "-" + _masterAutoNumber.Aut_start_char + string.Format("{0:0000}", _autoNo);

                //  if (_NewExRecWaraDetails[0].Swp_tp != "SGV")
                //   {
                _salesDAL.UpdateReceiptWaraEx(_documentNo, _NewExReceipt.Sar_seq_no);
                //    }

                _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);

                DocNo = _documentNo;


                if (_NewExRecWaraDetails[0].Swp_tp == "SGV")
                {
                    // Tharindu
                    if (_NewExRecWaraDetails != null)
                    {
                        foreach (ReceiptWaraExtend _ReceiptWaraDetgift in _NewExRecWaraDetails)
                        {

                            MasterAutoNumber _auto = new MasterAutoNumber();
                            _auto.Aut_moduleid = "SGV";
                            _auto.Aut_number = 0;
                            _auto.Aut_start_char = "SGV";

                            MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);

                            string _ref = _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                            _inventoryDAL.UpdateAutoNumber(_auto);

                            GiftVoucherPages _gvou = new GiftVoucherPages();
                            if (_ReceiptWaraDetgift.Swp_is_drt == 0)
                            {
                                _gvou.Gvp_gv_tp = "VALUE";
                            }
                            else
                            {
                                _gvou.Gvp_gv_tp = "RATE";
                            }


                            _gvou.Gvp_amt = _ReceiptWaraDetgift.Swp_dis_val;
                            _gvou.Gvp_app_by = _ReceiptWaraDetgift.Srw_cre_by;
                            _gvou.Gvp_bal_amt = _ReceiptWaraDetgift.Swp_dis_val;
                            _gvou.Gvp_book = 1;
                            _gvou.Gvp_can_by = "";
                            _gvou.Gvp_can_dt = DateTime.Now.Date;
                            _gvou.Gvp_com = _NewExReceipt.Sar_com_cd;
                            _gvou.Gvp_cre_by = _NewExReceipt.Sar_create_by;
                            _gvou.Gvp_cre_dt = DateTime.Now.Date;
                            _gvou.Gvp_cus_add1 = _NewExReceipt.Sar_debtor_add_1;
                            _gvou.Gvp_cus_add2 = _NewExReceipt.Sar_debtor_add_2;
                            _gvou.Gvp_cus_cd = _NewExReceipt.Sar_debtor_cd;
                            _gvou.Gvp_cus_mob = _NewExReceipt.Sar_mob_no;
                            _gvou.Gvp_cus_name = _NewExReceipt.Sar_debtor_name;
                            _gvou.Gvp_from = "-";
                            _gvou.Gvp_gv_cd = "SGV";
                            _gvou.Gvp_gv_prefix = "SGV";
                            _gvou.Gvp_is_allow_promo = true;
                            _gvou.Gvp_issu_itm = 0;
                            _gvou.Gvp_issue_by = "";
                            _gvou.Gvp_issue_dt = DateTime.Now.Date;
                            _gvou.Gvp_line = 1;
                            _gvou.Gvp_mod_by = "";
                            _gvou.Gvp_mod_dt = DateTime.Now.Date;
                            _gvou.Gvp_noof_itm = 0;
                            _gvou.Gvp_oth_ref = DocNo;// _proitm.Spd_circular_no;
                            _gvou.Gvp_page = _number.Aut_number;
                            _gvou.Gvp_pc = _NewExReceipt.Sar_profit_center_cd;
                            _gvou.Gvp_ref = _ref;
                            _gvou.Gvp_stus = "A";
                            _gvou.Gvp_valid_from = DateTime.Now.Date;
                            _gvou.Gvp_valid_to = DateTime.Now.Date.AddMonths(_ReceiptWaraDetgift.Swp_gv_period);
                            //_gvou.Gvp_valid_to = _InvHeader.Sah_dt.Date.AddDays(30); //Chamal 24-09-2014
                            //_gvou.Gvp_cus_nic = _businessCompany.Mbe_nic;

                            _fmsInventoryDal.SaveGiftVoucherPages(_gvou);
                        }
                    }
                }

                _inventoryDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                _effects = 1;
                //_tr.Complete();
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                DocNo = ex.Message.ToString();
                return -1;
            }

            return _effects;
        }

        //DARSHANA 18/06/2012
        public Int16 SaveNewReceipt(RecieptHeader _NewReceipt, List<RecieptItem> _NewReceiptDetails, MasterAutoNumber _masterAutoNumber, ReptPickHeader _pickHeader, List<ReptPickSerials> _pickSerials, List<VehicalRegistration> _vehReg, List<VehicleInsuarance> _insList, List<HpSheduleDetails> _HPSheduleDetails, List<ReceiptAddDetails> _recAddDetails, MasterAutoNumber _masterAutoNumberType, List<GiftVoucherPages> _pageList, out string docno, string _comCode = null, string _userId = null, bool _isFreeRegistered = false, decimal _actualRegistationAmt = 0, bool itemres = false, bool _isResser = false)
        {
            Int16 _effects = 0;
            int _lineNo = 0;
            string _refNo = "";
            string _itmDetails = "";
            string _invNo = "";
            string _customer = "";
            string _insucustomer = "";
            string _insucustadd = "";
            string _distric = "";
            string _province = "";
            string _contact = "";
            string _cusAdd = "";
            string _autoNumberRecType = "";
            string _documentNo = "";
            Int32 user_seq_num = 0;
            DataTable _dtDocs = null;

            _salesDAL = new SalesDAL();


            ReptCommonDAL _reptCommonDAL = new ReptCommonDAL();

            if (_pickHeader != null)
            {
                user_seq_num = _reptCommonDAL.GET_SEQNUM_FOR_INVOICE("DO", _NewReceipt.Sar_com_cd, _pickHeader.Tuh_doc_no, 0);

                //updated by akila 2017/01/17
                if (user_seq_num == -1)
                {
                    InventoryDAL _invDal = new InventoryDAL();
                    _invDal.ConnectionOpen();
                    user_seq_num = _invDal.Generate_new_seq_num(_comCode, "DO", 1, _userId);//direction always =1 for this method 
                }
            }

            //using (TransactionScope _tr = new TransactionScope())
            try
            {

                _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen(); _inventoryDAL.BeginTransaction();
                _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen(); _salesDAL.BeginTransaction();
                _inventoryRepDAL = new ReptCommonDAL(); _inventoryRepDAL.ConnectionOpen(); _inventoryRepDAL.BeginTransaction();
                _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen(); _generalDAL.BeginTransaction();
                _fmsInventoryDal = new FMS_InventoryDAL(); _fmsInventoryDal.ConnectionOpen(); _fmsInventoryDal.BeginTransaction();

                // Auto Credit Note by subodana 2017/04/17
                //check stlment discount
                #region Credit Note
                if (_NewReceiptDetails.First().Sard_inv_no != null)
                {
                    List<RecieptItem> settlreciept = _NewReceiptDetails.GroupBy(l => new { l.Sard_inv_no })
    .Select(cl => new RecieptItem
    {
        Sard_inv_no = cl.First().Sard_inv_no,
        Sard_settle_amt = cl.Sum(a => a.Sard_settle_amt)

    }).ToList();


                    foreach (var setreclist in settlreciept)
                    {
                        InvoiceHeader _hdr = _salesDAL.GetInvoiceHeaderDetails(setreclist.Sard_inv_no);
                        if (_hdr != null)
                        {

                            List<sat_settl_discount> disclist = _salesDAL.GetSettleDiscountDetails(_hdr.Sah_com, _hdr.Sah_pc, _hdr.Sah_inv_tp);
                            if (disclist != null)
                            {
                                if (disclist.Count > 0)
                                {
                                    decimal discount = disclist.First().ssd_dis_rate;
                                    decimal discountval = discount * _hdr.Sah_anal_7 / 100;

                                    if ((DateTime.Now.Date.AddDays(-1).Subtract(_hdr.Sah_dt).Days >= disclist.First().ssd_from_period) && (DateTime.Now.Date.AddDays(-1).Subtract(_hdr.Sah_dt).Days <= disclist.First().ssd_to_period))
                                    {
                                        if (_hdr.Sah_anal_7 - (discountval + setreclist.Sard_settle_amt + _hdr.Sah_anal_8) > 50)
                                        {
                                            //_effects = -1;
                                            //docno = "Invoice No :" + setreclist.Sard_inv_no + " Prefix: " + _hdr.Sah_inv_tp + " Allowed " + discount + "% discount for executive. Available Balance : " + (_hdr.Sah_anal_7 - (discountval + _hdr.Sah_anal_8));
                                            //_inventoryDAL.TransactionRollback();
                                            //_salesDAL.TransactionRollback();
                                            //_inventoryRepDAL.TransactionRollback();
                                            //_generalDAL.TransactionRollback();
                                            //_fmsInventoryDal.TransactionRollback();
                                            //return _effects;
                                        }
                                    }



                                    if ((_hdr.Sah_anal_7 - (discountval + _hdr.Sah_anal_8 + setreclist.Sard_settle_amt)) <= 100 && (DateTime.Now.Date.AddDays(-1).Subtract(_hdr.Sah_dt).Days >= disclist.First().ssd_from_period) && (DateTime.Now.Date.AddDays(-1).Subtract(_hdr.Sah_dt).Days <= disclist.First().ssd_to_period))
                                    {
                                        //this is special discount 2.5%
                                        MasterAutoNumber _invoiceAuto = new MasterAutoNumber();
                                        _invoiceAuto.Aut_cate_cd = _NewReceipt.Sar_profit_center_cd;
                                        _invoiceAuto.Aut_cate_tp = "PC";
                                        _invoiceAuto.Aut_direction = 0;
                                        _invoiceAuto.Aut_modify_dt = null;
                                        _invoiceAuto.Aut_moduleid = "REV";
                                        _invoiceAuto.Aut_number = 0;
                                        if (_NewReceipt.Sar_com_cd == "LRP")
                                        {
                                            _invoiceAuto.Aut_start_char = "CRN";
                                        }
                                        else
                                        {
                                            _invoiceAuto.Aut_start_char = "CRN";
                                        }
                                        _invoiceAuto.Aut_year = null;


                                        InvoiceHeader _invheader = new InvoiceHeader();

                                        //_invheader.Sah_com = gvInvoice.Rows[i].Cells[2].Text;
                                        _invheader.Sah_com = _NewReceipt.Sar_com_cd;
                                        _invheader.Sah_cre_by = _NewReceipt.Sar_create_by;
                                        _invheader.Sah_cre_when = DateTime.Now;
                                        _invheader.Sah_currency = _NewReceipt.Sar_currency_cd;
                                        _invheader.Sah_cus_add1 = _NewReceipt.Sar_debtor_add_1;
                                        _invheader.Sah_cus_add2 = _NewReceipt.Sar_debtor_add_2;
                                        _invheader.Sah_cus_cd = _NewReceipt.Sar_debtor_cd;
                                        _invheader.Sah_cus_name = _NewReceipt.Sar_debtor_name;
                                        _invheader.Sah_d_cust_add1 = _NewReceipt.Sar_debtor_add_1;
                                        _invheader.Sah_d_cust_add1 = _NewReceipt.Sar_debtor_add_2;
                                        _invheader.Sah_d_cust_add2 = _NewReceipt.Sar_debtor_add_2;
                                        _invheader.Sah_d_cust_add2 = _NewReceipt.Sar_debtor_add_2;
                                        _invheader.Sah_d_cust_cd = _NewReceipt.Sar_debtor_cd;
                                        _invheader.Sah_d_cust_cd = _NewReceipt.Sar_debtor_cd;
                                        _invheader.Sah_direct = false;
                                        _invheader.Sah_dt = Convert.ToDateTime(_NewReceipt.Sar_receipt_date).Date;
                                        _invheader.Sah_epf_rt = 0;
                                        _invheader.Sah_esd_rt = 0;
                                        _invheader.Sah_ex_rt = _hdr.Sah_ex_rt;
                                        _invheader.Sah_inv_no = "na";
                                        _invheader.Sah_inv_sub_tp = "REV";
                                        _invheader.Sah_inv_tp = _hdr.Sah_inv_tp;
                                        _invheader.Sah_is_acc_upload = false;
                                        _invheader.Sah_man_cd = _hdr.Sah_inv_no;
                                        _invheader.Sah_man_ref = _hdr.Sah_inv_no;
                                        _invheader.Sah_manual = false;
                                        _invheader.Sah_mod_by = _NewReceipt.Sar_mod_by;
                                        _invheader.Sah_mod_when = DateTime.Now;
                                        _invheader.Sah_pc = _NewReceipt.Sar_profit_center_cd;
                                        _invheader.Sah_pdi_req = 0;
                                        _invheader.Sah_ref_doc = _hdr.Sah_inv_no;
                                        _invheader.Sah_remarks = _NewReceipt.Sar_remarks;
                                        _invheader.Sah_sales_chn_cd = "";
                                        _invheader.Sah_sales_chn_man = "";
                                        _invheader.Sah_sales_ex_cd = _hdr.Sah_sales_ex_cd;
                                        _invheader.Sah_sales_region_cd = "";
                                        _invheader.Sah_sales_region_man = "";
                                        _invheader.Sah_sales_sbu_cd = "";
                                        _invheader.Sah_sales_sbu_man = "";
                                        _invheader.Sah_sales_str_cd = "";
                                        _invheader.Sah_sales_zone_cd = "";
                                        _invheader.Sah_sales_zone_man = "";
                                        _invheader.Sah_seq_no = 1;
                                        _invheader.Sah_session_id = _NewReceipt.Sar_session_id;
                                        _invheader.Sah_structure_seq = "";
                                        _invheader.Sah_stus = "A";
                                        _invheader.Sah_town_cd = "";
                                        _invheader.Sah_tp = "INV";
                                        _invheader.Sah_wht_rt = 0;
                                        _invheader.Sah_tax_inv = _hdr.Sah_tax_inv;
                                        _invheader.Sah_anal_4 = "DISC";
                                        _invheader.Sah_anal_8 = Convert.ToDecimal(discountval);
                                        _invheader.Sah_anal_7 = discountval;
                                        _invheader.Sah_is_svat = _hdr.Sah_is_svat;
                                        _invheader.Sah_man_cd = _hdr.Sah_man_cd;

                                        List<InvoiceItem> invitem = new List<InvoiceItem>();
                                        int _itemline = 1;
                                        foreach (var recitm in _NewReceiptDetails)
                                        {
                                            InvoiceItem ob = new InvoiceItem();
                                            ob.Sad_alt_itm_cd = "DISCOUNT";
                                            ob.Sad_alt_itm_desc = "DISCOUNT";
                                            ob.Sad_chk_soa = 0;
                                            ob.Sad_comm_amt = 0;
                                            ob.Sad_conf_line = 1;
                                            ob.Sad_conf_no = "";
                                            ob.Sad_dis_line = 1;
                                            //  ob.Sad_dis_seq = "0";
                                            ob.Sad_dis_type = "";
                                            ob.Sad_disc_amt = 0;
                                            ob.Sad_disc_rt = 0;
                                            ob.Sad_do_qty = 1;
                                            ob.Sad_fws_ignore_qty = 1;
                                            ob.Sad_inv_no = "";
                                            ob.Sad_is_promo = false;
                                            ob.Sad_isapp = false;
                                            ob.Sad_iscovernote = false;
                                            ob.Sad_itm_cd = "DISCOUNT";
                                            ob.Sad_itm_line = _itemline;
                                            ob.Sad_itm_seq = 0;
                                            ob.Sad_itm_stus = "GOD";
                                            ob.Sad_itm_stus_desc = "GOOD";
                                            ob.Sad_itm_tax_amt = 0;
                                            ob.Sad_itm_tp = "";
                                            ob.Sad_job_line = 1;
                                            ob.Sad_job_no = "";
                                            ob.Sad_merge_itm = "";
                                            ob.Sad_original_itemcd = "DISCOUNT";
                                            ob.Sad_outlet_dept = "";
                                            ob.Sad_pb_lvl = "";
                                            //  ob.Sad_pb_price = "";
                                            ob.Sad_pbook = "";
                                            ob.Sad_pc = _invheader.Sah_pc;
                                            // ob.Sad_print_stus = 0;
                                            ob.Sad_promo_cd = "";
                                            ob.Sad_qty = 1;
                                            ob.Sad_res_line_no = 0;
                                            ob.Sad_res_no = "";
                                            ob.sad_resupdate = 0;
                                            ob.Sad_seq = 0;
                                            ob.Sad_seq_no = 0;
                                            ob.Sad_sim_itm_cd = "DISCOUNT";
                                            ob.Sad_srn_qty = 1;
                                            ob.Sad_tot_amt = discountval;
                                            ob.Sad_trd_svc_chrg = 0;
                                            ob.Sad_unit_amt = discountval;
                                            ob.Sad_unit_rt = discountval;
                                            ob.Sad_uom = "";
                                            ob.Sad_warr_based = false;
                                            ob.Sad_warr_period = 0;
                                            ob.Sad_warr_remarks = "";
                                            ob.Sad_itm_tp = "M";
                                            ob.Sad_uom = "NOS";
                                            invitem.Add(ob);
                                            _itemline++;
                                        }

                                        string _crnote = "";
                                        CommonSaveReversalNew(_invheader, invitem, _invoiceAuto, true, out _crnote);
                                        _salesDAL.UpdateCreditNoteADJ(_invheader.Sah_com, _invheader.Sah_pc, _hdr.Sah_inv_no, discountval);
                                    }
                                }

                            }
                        }


                    }
                }
                #endregion


                //_FMSDAL = new FMS_InventoryDAL(); 


                _salesDAL.SaveReceiptHeader(_NewReceipt);

                _customer = _NewReceipt.Sar_debtor_cd + "-" + _NewReceipt.Sar_debtor_name;
                _distric = _NewReceipt.Sar_anal_1;
                _province = _NewReceipt.Sar_anal_2;
                _cusAdd = _NewReceipt.Sar_debtor_add_1 + "," + _NewReceipt.Sar_debtor_add_2;

                if (_NewReceiptDetails != null)
                {
                    foreach (RecieptItem _ReceiptDetails in _NewReceiptDetails)
                    {
                        _salesDAL.SaveReceiptItem(_ReceiptDetails);
                        if (_NewReceipt.Sar_receipt_type == "DEBT" || _NewReceipt.Sar_receipt_type == "SRTN" || _NewReceipt.Sar_receipt_type == "SVAT" || _NewReceipt.Sar_receipt_type == "DAJ")
                        {
                            decimal _curBalance = 0;
                            if (_NewReceipt.Sar_is_oth_shop == true)        //kapila   27/6/2014
                            {
                                _curBalance = _salesDAL.GetOutInvAmt(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_oth_sr, _NewReceipt.Sar_debtor_cd, _ReceiptDetails.Sard_inv_no);
                                if (Math.Round(_curBalance, 2) >= Math.Round(_ReceiptDetails.Sard_settle_amt, 2))
                                {
                                    _salesDAL.UpdateInvoiceSettleAmt(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_oth_sr, _NewReceipt.Sar_debtor_cd, _ReceiptDetails.Sard_inv_no, _ReceiptDetails.Sard_settle_amt);
                                }
                                else
                                {
                                    if (Math.Abs(Math.Round(_ReceiptDetails.Sard_settle_amt, 2) - Math.Round(_curBalance, 2)) > 10)
                                    {
                                        if (_NewReceipt.Sar_receipt_type == "DEBT")
                                        {
                                            HpSystemParameters _SystemPara = new HpSystemParameters();
                                            SalesDAL _salesDal = new SalesDAL();

                                            _SystemPara = _salesDal.GetSystemParameter("PC", _NewReceipt.Sar_profit_center_cd, "DEBTALAMT", DateTime.Now.Date);
                                            if (_SystemPara.Hsy_cd != null)
                                            {
                                                Decimal balance = _ReceiptDetails.Sard_settle_amt - _curBalance;

                                                if (balance > _SystemPara.Hsy_val)
                                                {
                                                    _effects = -1;
                                                    docno = "Cannot proceed : Payment exceed the outstanding amount by Rs.'" + balance + "'";
                                                    _inventoryDAL.TransactionRollback();
                                                    _salesDAL.TransactionRollback();
                                                    _inventoryRepDAL.TransactionRollback();
                                                    _generalDAL.TransactionRollback();
                                                    _fmsInventoryDal.TransactionRollback();
                                                    return _effects;
                                                }

                                            }
                                            else
                                            {
                                                _effects = -1;
                                                docno = "Cannot proceed : Outstanding balance is " + _curBalance + " and settlement amount is " + _ReceiptDetails.Sard_settle_amt + " for the invoice " + _ReceiptDetails.Sard_inv_no;
                                                _inventoryDAL.TransactionRollback();
                                                _salesDAL.TransactionRollback();
                                                _inventoryRepDAL.TransactionRollback();
                                                _generalDAL.TransactionRollback();
                                                _fmsInventoryDal.TransactionRollback();
                                                return _effects;
                                            }
                                        }
                                        else
                                        {
                                            _effects = -1;
                                            docno = "Cannot proceed : Outstanding balance is " + _curBalance + " and settlement amount is " + _ReceiptDetails.Sard_settle_amt + " for the invoice " + _ReceiptDetails.Sard_inv_no;
                                            _inventoryDAL.TransactionRollback();
                                            _salesDAL.TransactionRollback();
                                            _inventoryRepDAL.TransactionRollback();
                                            _generalDAL.TransactionRollback();
                                            _fmsInventoryDal.TransactionRollback();
                                            return _effects;
                                        }

                                    }

                                }
                            }
                            else
                            {
                                if (!String.IsNullOrEmpty(_ReceiptDetails.Sard_inv_no))
                                {
                                    _curBalance = _salesDAL.GetOutInvAmt(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd, _NewReceipt.Sar_debtor_cd, _ReceiptDetails.Sard_inv_no);
                                    if (_curBalance >= _ReceiptDetails.Sard_settle_amt)
                                    {
                                        _salesDAL.UpdateInvoiceSettleAmt(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd, _NewReceipt.Sar_debtor_cd, _ReceiptDetails.Sard_inv_no, _ReceiptDetails.Sard_settle_amt);
                                    }
                                    else
                                    {
                                        if (Math.Abs(Math.Round(_ReceiptDetails.Sard_settle_amt, 2) - Math.Round(_curBalance, 2)) > 10)
                                        {

                                            if (_NewReceipt.Sar_receipt_type == "DEBT")
                                            {
                                                HpSystemParameters _SystemPara = new HpSystemParameters();
                                                SalesDAL _salesDal = new SalesDAL();

                                                _SystemPara = _salesDal.GetSystemParameter("PC", _NewReceipt.Sar_profit_center_cd, "DEBTALAMT", DateTime.Now.Date);
                                                if (_SystemPara.Hsy_cd != null)
                                                {
                                                    Decimal balance = _ReceiptDetails.Sard_settle_amt - _curBalance;

                                                    if (balance > _SystemPara.Hsy_val)
                                                    {
                                                        _effects = -1;
                                                        docno = "Cannot proceed : Payment exceed the outstanding amount by Rs.'" + balance + "'";
                                                        _inventoryDAL.TransactionRollback();
                                                        _salesDAL.TransactionRollback();
                                                        _inventoryRepDAL.TransactionRollback();
                                                        _generalDAL.TransactionRollback();
                                                        _fmsInventoryDal.TransactionRollback();
                                                        return _effects;
                                                    }
                                                    else
                                                    {
                                                        _salesDAL.UpdateInvoiceSettleAmt(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd, _NewReceipt.Sar_debtor_cd, _ReceiptDetails.Sard_inv_no, _ReceiptDetails.Sard_settle_amt);
                                                    }
                                                }
                                                else
                                                {
                                                    _effects = -1;
                                                    docno = "Cannot proceed : Outstanding balance is " + _curBalance + " and settlement amount is " + _ReceiptDetails.Sard_settle_amt + " for the invoice " + _ReceiptDetails.Sard_inv_no;
                                                    _inventoryDAL.TransactionRollback();
                                                    _salesDAL.TransactionRollback();
                                                    _inventoryRepDAL.TransactionRollback();
                                                    _generalDAL.TransactionRollback();
                                                    _fmsInventoryDal.TransactionRollback();
                                                    return _effects;
                                                }
                                            }
                                            else
                                            {
                                                _effects = -1;
                                                docno = "Cannot proceed : Outstanding balance is " + _curBalance + " and settlement amount is " + _ReceiptDetails.Sard_settle_amt + " for the invoice " + _ReceiptDetails.Sard_inv_no;
                                                _inventoryDAL.TransactionRollback();
                                                _salesDAL.TransactionRollback();
                                                _inventoryRepDAL.TransactionRollback();
                                                _generalDAL.TransactionRollback();
                                                _fmsInventoryDal.TransactionRollback();
                                                return _effects;
                                            }
                                        }
                                        else
                                        {
                                            _salesDAL.UpdateInvoiceSettleAmt(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd, _NewReceipt.Sar_debtor_cd, _ReceiptDetails.Sard_inv_no, _ReceiptDetails.Sard_settle_amt);
                                        }
                                    }
                                }
                            }
                        }
                        //update balance
                        if (_ReceiptDetails.Sard_pay_tp == "CRNOTE")
                        {
                            _salesDAL.UpdateCreditNoteBalance(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd, _ReceiptDetails.Sard_ref_no, _ReceiptDetails.Sard_settle_amt);
                        }
                        else if (_ReceiptDetails.Sard_pay_tp == "ADVAN")
                        {
                            RecieptHeader _rHdr = new RecieptHeader();
                            _rHdr.Sar_receipt_no = _ReceiptDetails.Sard_ref_no;
                            _rHdr.Sar_used_amt = _ReceiptDetails.Sard_settle_amt;
                            _rHdr.Sar_act = true;
                            _rHdr.Sar_direct = true;
                            _rHdr.Sar_mod_by = _NewReceipt.Sar_mod_by;
                            _salesDAL.SaveReceiptHeader(_rHdr);
                        }
                    }

                    if (_NewReceipt.Sar_receipt_type == "DEBT" || _NewReceipt.Sar_receipt_type == "SRTN" || _NewReceipt.Sar_receipt_type == "SVAT" || _NewReceipt.Sar_receipt_type == "DAJ")
                    {
                        // get invoice numbers
                        var _lst = (from n in _NewReceiptDetails
                                    group n by new { n.Sard_inv_no } into r
                                    select new { Sard_inv_no = r.Key.Sard_inv_no }).ToList();

                        decimal _Balance = 0;
                        decimal _commAmt = 0;
                        decimal _minCommAllow = 0;
                        decimal _wkNo = 0;
                        Decimal _maxDaysAllow = 0;
                        HpSystemParameters _getSystemParameter = new HpSystemParameters();

                        foreach (var s in _lst)
                        {
                            if (s.Sard_inv_no == "")
                            {
                                continue;
                            }

                            if (_NewReceipt.Sar_is_oth_shop == true)        //kapila   27/6/2014
                                _Balance = _salesDAL.GetOutInvAmt(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_oth_sr, _NewReceipt.Sar_debtor_cd, s.Sard_inv_no);
                            else
                                _Balance = _salesDAL.GetOutInvAmt(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd, _NewReceipt.Sar_debtor_cd, s.Sard_inv_no);

                            _getSystemParameter = _salesDAL.GetSystemParameter("COM", _NewReceipt.Sar_com_cd, "CRCOMMINAW", _NewReceipt.Sar_receipt_date);

                            if (_getSystemParameter.Hsy_cd != null)
                            {
                                _minCommAllow = _getSystemParameter.Hsy_val;
                            }
                            else
                            {
                                _minCommAllow = 0;
                            }

                            if (_Balance <= _minCommAllow)
                            {
                                //kapila 28/7/2015
                                _getSystemParameter = _salesDAL.GetSystemParameter("COM", _NewReceipt.Sar_com_cd, "COMIGNORE", _NewReceipt.Sar_receipt_date);

                                if (_getSystemParameter.Hsy_cd != null)
                                    _maxDaysAllow = _getSystemParameter.Hsy_val;
                                else
                                    _maxDaysAllow = -1;

                                if (_maxDaysAllow != -1)    //record found in hpr_sys_para table
                                {
                                    //check whether registration is done
                                    List<VehicalRegistration> _preReg = new List<VehicalRegistration>();
                                    _preReg = _generalDAL.GetVehRegNoByInvoiceNo(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd, s.Sard_inv_no);

                                    if (_preReg != null)
                                    {
                                        DataTable _dtInvDt = _salesDAL.GetSalesHdr(s.Sard_inv_no);
                                        Int32 _days = Convert.ToInt32((Convert.ToDateTime(_dtInvDt.Rows[0]["sah_dt"]) - _preReg[0].P_svrt_reg_dt).TotalDays);
                                        if (_days > _maxDaysAllow)
                                            _commAmt = 0;
                                        else
                                            _commAmt = _salesDAL.GetFinalCreditCommission_new(s.Sard_inv_no);
                                    }
                                    else
                                        _commAmt = 0;
                                }
                                else
                                    //get commission amount
                                    _commAmt = _salesDAL.GetFinalCreditCommission_new(s.Sard_inv_no);

                                //save GNT_REM_SUM 
                                RemitanceSummaryDetail _remDet = new RemitanceSummaryDetail();
                                _remDet.Rem_com = _NewReceipt.Sar_com_cd;
                                if (_NewReceipt.Sar_is_oth_shop == true && _NewReceipt.Sar_oth_sr != "All")    //kapila  27/6/2014
                                    _remDet.Rem_pc = _NewReceipt.Sar_oth_sr;
                                else
                                    _remDet.Rem_pc = _NewReceipt.Sar_profit_center_cd;

                                _remDet.Rem_dt = _NewReceipt.Sar_receipt_date;
                                _remDet.Rem_sec = "02";
                                _remDet.Rem_cd = "005";
                                _remDet.Rem_sh_desc = "Group sale comm";
                                _remDet.Rem_lg_desc = "GROUP SALE COMM";
                                _remDet.Rem_val = _commAmt;
                                _remDet.Rem_val_final = _commAmt;
                                int _weekNo = _generalDAL.GetWeek(Convert.ToDateTime(_NewReceipt.Sar_receipt_date).Date, out _wkNo, _NewReceipt.Sar_com_cd);
                                _remDet.Rem_week = _wkNo + "S";
                                _remDet.Rem_ref_no = _NewReceipt.Sar_seq_no.ToString();
                                _remDet.Rem_rmk = s.Sard_inv_no;
                                _remDet.Rem_cr_acc = null;
                                _remDet.Rem_db_acc = null;
                                _remDet.Rem_del_alw = false;
                                _remDet.Rem_cre_by = _NewReceipt.Sar_create_by;
                                _remDet.Rem_cre_dt = _NewReceipt.Sar_receipt_date;
                                _remDet.Rem_is_sos = true;
                                _remDet.Rem_is_dayend = true;
                                _remDet.Rem_is_sun = true;
                                _remDet.Rem_cat = 17;
                                _remDet.Rem_add = 0;
                                _remDet.Rem_ded = 0;
                                _remDet.Rem_net = _commAmt;
                                _remDet.Rem_epf = 0;
                                _remDet.Rem_esd = 0;
                                _remDet.Rem_wht = 0;
                                _remDet.Rem_add_fin = 0;
                                _remDet.Rem_ded_fin = 0;
                                _remDet.Rem_net_fin = _commAmt;
                                _remDet.Rem_rmk_fin = s.Sard_inv_no;
                                _remDet.Rem_bnk_cd = null;
                                _remDet.Rem_is_rem_sum = true;
                                _salesDAL.SaveRemSummaryForFinalCreditComm(_remDet);
                            }
                        }
                    }
                }



                Int32 _autoNo = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                _documentNo = _masterAutoNumber.Aut_cate_cd + _masterAutoNumber.Aut_start_char + string.Format("{0:0000}", _autoNo);

                if (_NewReceipt.Sar_anal_3 == "SYSTEM")
                {
                    Int32 _autoNoRecTp = _inventoryDAL.GetAutoNumber(_masterAutoNumberType.Aut_moduleid, _masterAutoNumberType.Aut_direction, _masterAutoNumberType.Aut_start_char, _masterAutoNumberType.Aut_cate_tp, _masterAutoNumberType.Aut_cate_cd, _masterAutoNumberType.Aut_modify_dt, _masterAutoNumberType.Aut_year).Aut_number;
                    _autoNumberRecType = _masterAutoNumberType.Aut_cate_cd + "-" + _masterAutoNumberType.Aut_start_char + "-" + string.Format("{0:000000}", _autoNoRecTp);
                }
                else
                {
                    _autoNumberRecType = _NewReceipt.Sar_manual_ref_no;
                }

                //_salesDAL.UpdateInvoiceReceipts("-1", _documentNo, -1, _NewReceipt.Sar_seq_no);
                _salesDAL.UpdateRecAutoNumber(_documentNo, _NewReceipt.Sar_seq_no, _autoNumberRecType);

                //update receipt no to commistion table
                if (_NewReceipt.Sar_receipt_type == "DEBT" || _NewReceipt.Sar_receipt_type == "SRTN" || _NewReceipt.Sar_receipt_type == "SVAT" || _NewReceipt.Sar_receipt_type == "DAJ")
                {
                    _salesDAL.UpdateFinalComRec(_NewReceipt.Sar_seq_no.ToString(), _documentNo, _NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd, "02", "005");
                }

                if (_pickHeader != null)
                {
                    if (_pickHeader.Tuh_usrseq_no != 0)
                    {
                        if (_NewReceipt.Sar_receipt_type == "VHREG" || _NewReceipt.Sar_receipt_type == "VHINS")
                        {

                        }
                        else
                        {
                            _pickHeader.Tuh_doc_no = _documentNo;
                        }

                        if (_pickHeader.Tuh_ischek_itmstus == true)
                        {
                            //updated by akila 2017/08/29
                            //commnet by tharanga 
                            //InventoryDAL _invDal = new InventoryDAL();
                            //_invDal.ConnectionOpen();
                            int _seqNo = 0;//_invDal.Generate_new_seq_num(_comCode, "DO", 1, _userId);


                            _seqNo = user_seq_num;

                            //updated by akila 2017/01/17
                            _pickHeader.Tuh_usrseq_no = _seqNo;
                            _inventoryRepDAL.SavePickedHeader(_pickHeader);

                            //if (user_seq_num == -1)
                            //{
                            //    //Generate pick header header
                            //    _inventoryRepDAL.SavePickedHeader(_pickHeader);
                            //}

                        }
                        if (_pickSerials != null)
                        {
                            foreach (ReptPickSerials _list in _pickSerials)
                            {
                                _lineNo = _lineNo + 1;
                                if (_NewReceipt.Sar_receipt_type == "VHREG" || _NewReceipt.Sar_receipt_type == "VHINS")
                                {

                                    //_list.Tus_isapp = 0;
                                    //_list.Tus_iscovernote = 0;
                                }
                                else
                                {
                                    _list.Tus_base_doc_no = _pickHeader.Tuh_doc_no;
                                }

                                //updated by akila 2017/01/17
                                _list.Tus_usrseq_no = user_seq_num;
                                _list.Tus_cre_by = _userId;
                                //if (user_seq_num != -1)
                                //{
                                //    _list.Tus_usrseq_no = user_seq_num;
                                //}

                                //_list.Tus_base_itm_line = _lineNo;
                                if (_pickHeader.Tuh_ischek_itmstus == true)
                                {
                                    _inventoryRepDAL.SavePickedItemSerials(_list);
                                    if (_isResser != false)//add by tharanga 
                                    {
                                        _inventoryDAL.Update_serial_status(_list.Tus_com, _list.Tus_loc, _list.Tus_itm_cd, _list.Tus_ser_1, -1, _list.Tus_seq_no);
                                    }
                                    //_inventoryDAL.Update_serial_status(_list.Tus_com, _list.Tus_loc, _list.Tus_itm_cd, _list.Tus_ser_1, -1, _list.Tus_seq_no);
                                    //Added by Prabhath on 12/12/2013 ---- Reservation on Inr_loc
                                    //if (_NewReceipt.Sar_receipt_type == "ADVAN" && !string.IsNullOrEmpty(_list.Tus_ser_1))
                                    if (_NewReceipt.Sar_receipt_type == "ADVAN")
                                        if (itemres == true)//add by tharanga
                                        {
                                            _inventoryDAL.UpdateLocationRes(_list.Tus_com, _list.Tus_loc, _list.Tus_itm_cd, _list.Tus_itm_stus, _pickHeader.Tuh_usr_id, _list.Tus_qty);
                                        }
                                    //_inventoryDAL.UpdateLocationRes(_list.Tus_com, _list.Tus_loc, _list.Tus_itm_cd, _list.Tus_itm_stus, _pickHeader.Tuh_usr_id, _list.Tus_qty);
                                }

                                //_list.Tus_itm_cd = item
                                //_list.Tus_itm_stus =item status
                                //_list.Tus_unit_price =unit price
                                //_list.Tus_unit_cost =tot amt
                                //_list.Tus_orig_grnno = price book
                                //_list.Tus_orig_supp =  price book level
                                //_list.Tus_resqty = tax amt
                                //_list.Tus_qty = Qty


                                //_salesDAL.SaveReceiptItemDetails(_NewReceipt.Sar_seq_no, _lineNo, _documentNo, _list.Tus_itm_cd, _list.Tus_itm_desc, _list.Tus_itm_model, _list.Tus_ser_1, _list.Tus_ser_2, _NewReceipt.Sar_create_by, _list.Tus_qty, _list.Tus_orig_grnno, _list.Tus_orig_supp, _list.Tus_unit_price, _list.Tus_resqty, _list.Tus_unit_cost, _list.Tus_itm_stus, _list.Tus_new_remarks, _list.Tus_resqty, itemres);//comment by tharanga 2018/06/18
                                _salesDAL.SaveReceiptItemDetails(_NewReceipt.Sar_seq_no, _lineNo, _documentNo, _list.Tus_itm_cd, _list.Tus_itm_desc, _list.Tus_itm_model, _list.Tus_ser_1, _list.Tus_ser_2, _NewReceipt.Sar_create_by, _list.Tus_qty, _list.Tus_orig_grnno, _list.Tus_orig_supp, _list.Tus_unit_cost, _list.Tus_resqty, _list.Tus_unit_price, _list.Tus_itm_stus, _list.Tus_new_remarks, _list.Tus_resqty, itemres);//add by tharanga 2018/06/18 save tot amout satrecept det
                                //_salesDAL.SaveReceiptItemDetails(_NewReceipt.Sar_seq_no, _lineNo, _documentNo, _list.Tus_itm_cd, _list.Tus_itm_desc, _list.Tus_itm_model, _list.Tus_ser_1, _list.Tus_ser_2, _NewReceipt.Sar_create_by, _list.Tus_qty, _list.Tus_orig_grnno, _list.Tus_orig_supp, _list.Tus_unit_cost, _list.Tus_unit_price - _list.Tus_unit_cost, _list.Tus_unit_price, _list.Tus_itm_stus, _list.Tus_new_remarks, _list.Tus_resqty, itemres);
                                //  _salesDAL.SaveReceiptItemDetails(_NewReceipt.Sar_seq_no, _lineNo, _documentNo, _list.Tus_itm_cd, _list.Tus_itm_desc, _list.Tus_itm_model, _list.Tus_ser_1, _list.Tus_ser_2, _NewReceipt.Sar_create_by);

                            }
                        }
                    }
                }

                //save vehicle registration details
                if (_vehReg != null)
                {
                    foreach (VehicalRegistration _vehList in _vehReg)
                    {
                        _refNo = _salesDAL.GetInsuRefBySerial(_vehList.P_svrt_inv_no, _vehList.P_svrt_chassis, _vehList.P_svrt_engine, _vehList.P_srvt_itm_cd);
                        _vehList.P_srvt_ref_no = _documentNo;
                        _vehList.P_srvt_insu_ref = _refNo;
                        _salesDAL.SaveVehRegistration(_vehList);
                        _salesDAL.UpdateInsTxnByRegNo(_vehList.P_srvt_ref_no, _vehList.P_srvt_itm_cd, _vehList.P_svrt_inv_no, _vehList.P_svrt_chassis, _vehList.P_svrt_engine);
                        if (_itmDetails == "")
                        {
                            _itmDetails = " Engine & chassis :" + _vehList.P_svrt_engine + "," + _vehList.P_svrt_chassis;
                        }
                        else
                        {
                            _itmDetails = "," + _itmDetails + _vehList.P_svrt_engine + "," + _vehList.P_svrt_chassis;
                        }


                        if (_invNo == "")
                        {
                            _invNo = " Inv # :" + _vehList.P_svrt_inv_no;
                        }

                        _contact = _vehList.P_svrt_contact;

                        //if (_vehList.Svit_sales_tp == "HS")
                        //{
                        //    QuotationHeader _quoHdr = new QuotationHeader();
                        //    _quoHdr = _salesDAL.Get_Quotation_HDR(_vehList.Svit_inv_no);
                        //    _insucustomer = _quoHdr.Qh_del_cuscd + "-" + _quoHdr.Qh_del_cusname;
                        //    _insucustadd = _quoHdr.Qh_del_cusadd1 + " " + _quoHdr.Qh_del_cusadd2;
                        //}
                    }
                }

                //save vehicle insuarance details
                if (_insList != null)
                {

                    foreach (VehicleInsuarance _insu in _insList)
                    {
                        _refNo = _salesDAL.GetRegRefBySerial(_insu.Svit_inv_no, _insu.Svit_chassis, _insu.Svit_engine, _insu.Svit_itm_cd);
                        _insu.Svit_ref_no = _documentNo;
                        _insu.Svit_veg_ref = _refNo;
                        _salesDAL.SaveVehInsuarance(_insu);
                        if (_NewReceipt.Sar_receipt_type == "ADINS")
                        {
                            if (_insu.Svit_engine != "N/A")
                            {
                                _salesDAL.UpdateAddWarr(_insu.Svit_itm_cd, _insu.Svit_engine, 12, "SMART INSUARANCE", _insu.Svit_dt, _documentNo);
                            }
                        }

                        _salesDAL.UpdateRegTxnByInsNo(_insu.Svit_ref_no, _insu.Svit_itm_cd, _insu.Svit_inv_no, _insu.Svit_chassis, _insu.Svit_engine);
                        if (_itmDetails == "")
                        {
                            _itmDetails = " Engine & chassis :" + _insu.Svit_engine + "," + _insu.Svit_chassis;
                        }
                        else
                        {
                            _itmDetails = "," + _itmDetails + _insu.Svit_engine + "," + _insu.Svit_chassis;
                        }


                        if (_invNo == "")
                        {
                            _invNo = " Inv # :" + _insu.Svit_inv_no;
                        }

                        _contact = _insu.Svit_contact;

                        if (_NewReceipt.Sar_receipt_type == "VHINS")//Sanjeewa - Get Delivery Customer Name
                        {
                            if (_insu.Svit_sales_tp == "CRED")
                            {
                                QuotationHeader _quoHdr = new QuotationHeader();
                                _quoHdr = _salesDAL.Get_Quotation_HDR(_insu.Svit_inv_no);
                                if (_quoHdr != null)
                                {
                                    _insucustomer = _quoHdr.Qh_del_cuscd + "-" + _quoHdr.Qh_del_cusname;
                                    _insucustadd = _quoHdr.Qh_del_cusadd1 + " " + _quoHdr.Qh_del_cusadd2;
                                }
                            }
                        }
                    }


                }
                #region add by tharanga remove resavatiuon vehical registation on advance recept
                if (_NewReceipt.Sar_receipt_type == "VHREG" || _NewReceipt.Sar_receipt_type == "VHINS")
                {
                    ToursDAL _ToursDAL = new ToursDAL();

                    if (_NewReceiptDetails != null)
                    {
                        foreach (RecieptItem _ReceiptDetails in _NewReceiptDetails)
                        {
                            if (_ReceiptDetails.Sard_pay_tp == "ADVAN")
                            {

                                List<ReceiptItemDetails> _advRecItm = new List<ReceiptItemDetails>();
                                _advRecItm = _salesDAL.GetAdvanReceiptItems(_ReceiptDetails.Sard_ref_no);
                                foreach (ReceiptItemDetails item in _advRecItm)
                                {
                                    _inventoryDAL.UpdateLocationResRevers(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_loc, item.Sari_item, item.Sari_sts, _NewReceipt.Sar_create_by, 1);

                                }
                            }
                        }
                    }
                }
                #endregion
                //shedule update part
                if (_HPSheduleDetails != null)
                {
                    foreach (HpSheduleDetails _sch in _HPSheduleDetails)
                    {
                        _salesDAL.UpdateHPShedule(_sch.Hts_acc_no, _sch.Hts_rnt_no, _sch.Hts_veh_insu, _sch.Hts_tot_val);

                    }

                }

                //update and save gift voucher
                if (_pageList != null)
                {
                    int I = 0;
                    foreach (GiftVoucherPages _pg in _pageList)
                    {
                        I = I + 1;
                        _pg.Gvp_oth_ref = _documentNo;
                        _fmsInventoryDal.UpdateGiftVoucherByReceipt(_pg);
                        _salesDAL.SaveReceiptItemDetails(_NewReceipt.Sar_seq_no, I, _documentNo, _pg.Gvp_gv_cd, null, null, _pg.Gvp_book.ToString(), _pg.Gvp_page.ToString(), _pg.Gvp_mod_by, 0, null, null, 0, 0, 0, null, null);
                        //  _salesDAL.SaveReceiptItemDetails(_NewReceipt.Sar_seq_no, I, _documentNo, _pg.Gvp_gv_cd, null, null, _pg.Gvp_book.ToString(), _pg.Gvp_page.ToString(), _pg.Gvp_mod_by);

                    }
                }

                #region Item Allocation
                // Nadeeka 11-11-2015
                if (_pickSerials != null)
                {
                    foreach (ReptPickSerials _list in _pickSerials)
                    {
                        if (_NewReceipt.Sar_receipt_type == "ADVAN")
                        {
                            try
                            {
                                Int32 effect = _inventoryRepDAL.UpdateitemAllocation(_list.Tus_itm_cd, 1, 1);


                            }
                            catch (Exception)
                            {
                                _effects = -1;

                                docno = " You cannot raise advance for this item. Because Item has reached allocation qty.";
                                throw new System.ArgumentException("You cannot raise advance for this item. Because Item has reached allocation qty. ", _list.Tus_itm_cd);

                            }

                            //try
                            //{
                            //    if (_NewReceipt.Sar_anal_5 == 1)
                            //    {
                            //        Int32 eff = _inventoryRepDAL.UpdateInvitation(1);
                            //    }
                            //}
                            //catch(Exception)
                            //{
                            //    _effects = -1;

                            //    docno = "Event invitations are completed. You cannot make invitation";
                            //    throw new System.ArgumentException("Event invitations are completed. You cannot make invitation");
                            //}

                        }

                    }
                }
                #endregion

                if (_NewReceipt.Sar_receipt_type == "ADVAN")
                {
                    try
                    {
                        if (_NewReceipt.Sar_anal_5 == 1)
                        {
                            Int32 eff = _inventoryRepDAL.UpdateInvitation(1);

                            string _mg = "Thank you for Pre-ordering your iPhone at Abans! You are invited to an exclusive event at CCC Mall, Abans iStore 16th Nov, 7pm onwards. Be the 1st to Experience your all new iPhone from Abans";
                            OutSMS _out = new OutSMS();
                            _out.Msg = _mg;
                            _out.Msgstatus = 0;
                            _out.Msgtype = "S";
                            _out.Receivedtime = DateTime.Now;
                            _out.Receiver = "Customer";
                            _out.Receiverphno = _NewReceipt.Sar_mob_no;
                            _out.Senderphno = _NewReceipt.Sar_mob_no;
                            _out.Refdocno = _documentNo;
                            _out.Sender = _NewReceipt.Sar_create_by;
                            _out.Createtime = DateTime.Now;
                            _out.comcode = "MYAB";
                            _generalDAL.SaveSMSOut(_out);
                        }
                    }
                    catch (Exception)
                    {
                        _effects = -1;

                        docno = "Event invitations are completed. You cannot make invitation";
                        throw new System.ArgumentException("Event invitations are completed. You cannot make invitation");
                    }

                }

                //if (_NewReceipt.Sar_receipt_type == "VHINS")
                //{


                //    //send SMS 
                //    List<MsgInformation> _msg = _generalDAL.GetMsgInformation(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd, _NewReceipt.Sar_receipt_type);

                //    if (_msg != null)
                //        if (_msg.Count > 0)
                //        {
                //            foreach (MsgInformation _info in _msg)
                //            {
                //                string _mg = "Insuarance receipt generated. Rec. # " + _documentNo + _invNo + _itmDetails + " - SCM2 -";
                //                OutSMS _out = new OutSMS();
                //                _out.Msg = _mg;
                //                _out.Msgstatus = 0;
                //                _out.Msgtype = _info.Mmi_msg_tp;
                //                _out.Receivedtime = DateTime.Now;
                //                _out.Receiver = _info.Mmi_receiver;
                //                _out.Receiverphno = _info.Mmi_mobi_no;
                //                _out.Refdocno = _documentNo;
                //                _out.Sender = _NewReceipt.Sar_create_by;
                //                _out.Createtime = DateTime.Now;
                //                _generalDAL.SaveSMSOut(_out);

                //            }
                //        }




                //    //send mail
                //    List<MsgInformation> _mail = _generalDAL.GetMsgInformation(_NewReceipt.Sar_com_cd, null, _NewReceipt.Sar_receipt_type);
                //    if (_mail != null)
                //        if (_mail.Count > 0)
                //        {
                //            foreach (MsgInformation _info in _mail)
                //            {
                //                SmtpClient smtpClient = new SmtpClient();
                //                MailMessage message = new MailMessage();

                //                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                //                smtpClient.Host = _generalDAL.GetMailHost();
                //                smtpClient.Port = 25;
                //                message.From = fromAddress;

                //                string _email = "";

                //                _email = "Dear Sir/Madam, \n\n" + _email;
                //                _email += "Insuarance receipt generated for the profit center :" + _NewReceipt.Sar_profit_center_cd + " \n";
                //                _email += "\n  Receipt # : " + _documentNo + "\n";
                //                _email += "\n " + _invNo + "\n";
                //                _email += "\n  Customer : " + _customer + "\n";
                //                _email += "\n  Address : " + _cusAdd + "\n";
                //                _email += "\n  contact # : " + _contact + "\n";
                //                _email += "\n  District : " + _distric + "\n";
                //                _email += "\n  Province : " + _province + "\n";

                //                foreach (VehicleInsuarance _insu in _insList)
                //                {
                //                    _itmDetails = "";
                //                    _itmDetails = "Item & Model : " + _insu.Svit_itm_cd + "-" + _insu.Svit_model + " -  Engine & chassis :" + _insu.Svit_engine + " / " + _insu.Svit_chassis;
                //                    _email += "\n " + _itmDetails + " \n";
                //                }



                //                _email += _generalDAL.GetMailFooterMsg();

                //                message.To.Add(_info.Mmi_email);
                //                message.Subject = "Vehicle Insuarance Receipt";
                //                //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                //                //message.Bcc.Add(new MailAddress(""));
                //                message.IsBodyHtml = false;
                //                message.Body = _email;
                //                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                //                // Send SMTP mail
                //                smtpClient.Send(message);
                //            }
                //        }


                //}
                //else if (_NewReceipt.Sar_receipt_type == "VHREG")
                //{
                //    //send SMS 
                //    List<MsgInformation> _msg = _generalDAL.GetMsgInformation(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd, _NewReceipt.Sar_receipt_type);

                //    if (_msg != null)
                //        if (_msg.Count > 0)
                //        {
                //            foreach (MsgInformation _info in _msg)
                //            {
                //                string _mg = "Vehicle registration receipt generated. Rec. # " + _documentNo + _invNo + _itmDetails + " - SCM2 -";
                //                OutSMS _out = new OutSMS();
                //                _out.Msg = _mg;
                //                _out.Msgstatus = 0;
                //                _out.Msgtype = _info.Mmi_msg_tp;
                //                _out.Receivedtime = DateTime.Now;
                //                _out.Receiver = _info.Mmi_receiver;
                //                _out.Receiverphno = _info.Mmi_mobi_no;
                //                _out.Refdocno = _documentNo;
                //                _out.Sender = _NewReceipt.Sar_create_by;
                //                _out.Createtime = DateTime.Now;
                //                _generalDAL.SaveSMSOut(_out);

                //            }
                //        }


                //    //send mail
                //    List<MsgInformation> _mail = _generalDAL.GetMsgInformation(_NewReceipt.Sar_com_cd, null, _NewReceipt.Sar_receipt_type);
                //    if (_mail != null)
                //        if (_mail.Count > 0)
                //        {
                //            foreach (MsgInformation _info in _mail)
                //            {
                //                SmtpClient smtpClient = new SmtpClient();
                //                MailMessage message = new MailMessage();

                //                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                //                smtpClient.Host = _generalDAL.GetMailHost();
                //                smtpClient.Port = 25;
                //                message.From = fromAddress;

                //                string _email = "";

                //                _email = "Dear Sir/Madam, \n\n" + _email;
                //                _email += "Vehicle registration receipt generated for the profit center :" + _NewReceipt.Sar_profit_center_cd + " \n";
                //                _email += "\n  Receipt # : " + _documentNo + "\n";
                //                _email += "\n " + _invNo + "\n";
                //                _email += "\n  Customer : " + _customer + "\n";
                //                _email += "\n  Address : " + _cusAdd + "\n";
                //                _email += "\n  contact # : " + _contact + "\n";
                //                _email += "\n  District : " + _distric + "\n";
                //                _email += "\n  Province : " + _province + "\n";

                //                foreach (VehicalRegistration _reg in _vehReg)
                //                {
                //                    _itmDetails = "";
                //                    _itmDetails = "Item & Model : " + _reg.P_srvt_itm_cd + "-" + _reg.P_svrt_model + " -  Engine & chassis :" + _reg.P_svrt_engine + " / " + _reg.P_svrt_chassis;
                //                    _email += "\n " + _itmDetails + " \n";
                //                }



                //                _email += _generalDAL.GetMailFooterMsg();

                //                message.To.Add(_info.Mmi_email);
                //                message.Subject = "Vehicle Registration Receipt";
                //                //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                //                //message.Bcc.Add(new MailAddress(""));
                //                message.IsBodyHtml = false;
                //                message.Body = _email;
                //                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                //                // Send SMTP mail
                //                smtpClient.Send(message);
                //            }
                //        }
                //}
                if (_recAddDetails != null)     //kapila 2/5/2016
                {
                    Int32 _SRA_LINE_NO = 1;
                    foreach (ReceiptAddDetails _addRec in _recAddDetails)
                    {

                        _addRec.SRA_REC_NO = _documentNo;
                        _addRec.SRA_SEQ = _NewReceipt.Sar_seq_no;
                        _addRec.SRA_LINE_NO = _SRA_LINE_NO++;
                        _salesDAL.SaveAdditionalRecDetails(_addRec);

                    }
                }

                _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);

                if (_NewReceipt.Sar_anal_3 == "SYSTEM")
                {
                    _inventoryDAL.UpdateAutoNumber(_masterAutoNumberType);
                    if (!string.IsNullOrEmpty(_NewReceipt.Sar_prefix))
                    {
                        MasterCompany _masterComp = _generalDAL.GetCompByCode(_NewReceipt.Sar_com_cd);  //kapila 27/4/2016
                        if (_masterComp.MC_IS_SCM2_FMS == 1)
                            _inventoryDAL.Update_Manual_DocNo_prefix(_NewReceipt.Sar_profit_center_cd, "SDOC_AVREC", Convert.ToInt32(_NewReceipt.Sar_manual_ref_no), _documentNo, _NewReceipt.Sar_prefix);
                        else
                            _fmsInventoryDal.Update_Manual_DocNo_prefix(_NewReceipt.Sar_profit_center_cd, "SDOC_AVREC", Convert.ToInt32(_NewReceipt.Sar_manual_ref_no), _documentNo, _NewReceipt.Sar_prefix);
                    }
                }

                if (_NewReceipt.Sar_anal_3 == "MANUAL" && _NewReceipt.Sar_anal_8 == 1)
                {
                    //  _fmsInventoryDal.Update_Manual_DocNo(_NewReceipt.Sar_profit_center_cd, "MDOC_AVREC", Convert.ToInt32(_NewReceipt.Sar_manual_ref_no), _documentNo);
                    MasterCompany _masterComp = _generalDAL.GetCompByCode(_NewReceipt.Sar_com_cd);  //kapila 27/4/2016
                    if (_masterComp.MC_IS_SCM2_FMS == 1)
                        _inventoryDAL.Update_Manual_DocNo_prefix(_NewReceipt.Sar_profit_center_cd, "MDOC_AVREC", Convert.ToInt32(_NewReceipt.Sar_manual_ref_no), _documentNo, _NewReceipt.Sar_prefix);
                    else
                        _fmsInventoryDal.Update_Manual_DocNo_prefix(_NewReceipt.Sar_profit_center_cd, "MDOC_AVREC", Convert.ToInt32(_NewReceipt.Sar_manual_ref_no), _documentNo, _NewReceipt.Sar_prefix);

                }

                docno = _documentNo;

                //_inventoryDAL.ConnectionClose();
                //_salesDAL.ConnectionClose();
                //_inventoryRepDAL.ConnectionClose();
                //_generalDAL.ConnectionClose();
                //_fmsInventoryDal.ConnectionClose();
                //_effects = 1;
                //_tr.Complete();

                // _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen();
                if (_NewReceipt.Sar_receipt_type == "VHINS")
                {
                    //send SMS 
                    List<MsgInformation> _msg = _generalDAL.GetMsgInformation(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd, _NewReceipt.Sar_receipt_type);

                    if (_msg != null)
                        if (_msg.Count > 0)
                        {
                            foreach (MsgInformation _info in _msg)
                            {
                                if (_info.Mmi_mobi_no.Length > 9)
                                {
                                    string _mg = "Insurance receipt generated. Rec. # " + _documentNo + _invNo + _itmDetails + " - SCM2 -";
                                    OutSMS _out = new OutSMS();
                                    _out.Msg = _mg;
                                    _out.Msgstatus = 0;
                                    _out.Msgtype = _info.Mmi_msg_tp;
                                    _out.Receivedtime = DateTime.Now;
                                    _out.Receiver = _info.Mmi_receiver;
                                    //_out.Receiverphno = _info.Mmi_mobi_no;//Edit by Chamal 31-03-2015
                                    _out.Senderphno = _info.Mmi_mobi_no;
                                    _out.Refdocno = _documentNo;
                                    _out.Sender = _NewReceipt.Sar_create_by;
                                    _out.Createtime = DateTime.Now;
                                    _generalDAL.SaveSMSOut(_out);
                                }
                            }
                        }

                    //send mail
                    List<MsgInformation> _mail = _generalDAL.GetMsgInformation(_NewReceipt.Sar_com_cd, null, _NewReceipt.Sar_receipt_type);
                    if (_mail != null)
                        if (_mail.Count > 0)
                        {
                            foreach (MsgInformation _info in _mail)
                            {
                                SmtpClient smtpClient = new SmtpClient();
                                MailMessage message = new MailMessage();

                                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                                smtpClient.Host = _generalDAL.GetMailHost();
                                smtpClient.Port = 25;
                                message.From = fromAddress;

                                string _email = "";

                                _email = "Dear Sir/Madam, \n\n" + _email;
                                _email += "Insuarance receipt generated for the profit center :" + _NewReceipt.Sar_profit_center_cd + " \n";
                                _email += "\n  Receipt # : " + _documentNo + "\n";
                                _email += "\n " + _invNo + "\n";
                                if (_insucustomer == "")
                                {
                                    _email += "\n  Customer : " + _customer + "\n";
                                    _email += "\n  Address : " + _cusAdd + "\n";
                                }
                                else
                                {
                                    _email += "\n  Customer : " + _insucustomer + "";
                                    _email += "\n             (" + _customer + ")\n";
                                    _email += "\n  Address : " + _insucustadd + "\n";
                                }
                                _email += "\n  contact # : " + _contact + "\n";
                                _email += "\n  District : " + _distric + "\n";
                                _email += "\n  Province : " + _province + "\n";

                                foreach (VehicleInsuarance _insu in _insList)
                                {
                                    _itmDetails = "";
                                    _itmDetails = "Item & Model : " + _insu.Svit_itm_cd + "-" + _insu.Svit_model + " -  Engine & chassis :" + _insu.Svit_engine + " / " + _insu.Svit_chassis + " - Insuarance company code :" + _insu.Svit_ins_com;
                                    _email += "\n " + _itmDetails + " \n";
                                }



                                _email += _generalDAL.GetMailFooterMsg();

                                message.To.Add(_info.Mmi_email);
                                message.Subject = "Vehicle Insuarance Receipt";
                                //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                                //message.Bcc.Add(new MailAddress(""));
                                message.IsBodyHtml = false;
                                message.Body = _email;
                                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                                // Send SMTP mail
                                smtpClient.Send(message);
                            }
                        }


                }
                else if (_NewReceipt.Sar_receipt_type == "VHREG")
                {
                    //send SMS 
                    List<MsgInformation> _msg = _generalDAL.GetMsgInformation(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd, _NewReceipt.Sar_receipt_type);

                    if (_msg != null)
                        if (_msg.Count > 0)
                        {
                            foreach (MsgInformation _info in _msg)
                            {
                                if (_info.Mmi_mobi_no.Length > 9)
                                {
                                    string _mg = "Vehicle registration receipt generated. Rec. # " + _documentNo + _invNo + _itmDetails + " - SCM2 -";
                                    OutSMS _out = new OutSMS();
                                    _out.Msg = _mg;
                                    _out.Msgstatus = 0;
                                    _out.Msgtype = _info.Mmi_msg_tp;
                                    _out.Receivedtime = DateTime.Now;
                                    _out.Receiver = _info.Mmi_receiver;
                                    //_out.Receiverphno = _info.Mmi_mobi_no; //Edit by Chamal 31-Mar-2015
                                    _out.Senderphno = _info.Mmi_mobi_no;
                                    _out.Refdocno = _documentNo;
                                    _out.Sender = _NewReceipt.Sar_create_by;
                                    _out.Createtime = DateTime.Now;
                                    _generalDAL.SaveSMSOut(_out);
                                }
                            }
                        }


                    //send mail
                    List<MsgInformation> _mail = _generalDAL.GetMsgInformation(_NewReceipt.Sar_com_cd, null, _NewReceipt.Sar_receipt_type);
                    if (_NewReceipt.Sar_profit_center_cd == "BOC") _mail = null;        //kapila 3/10/2014
                    if (_mail != null)
                        if (_mail.Count > 0)
                        {
                            foreach (MsgInformation _info in _mail)
                            {
                                SmtpClient smtpClient = new SmtpClient();
                                MailMessage message = new MailMessage();

                                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                                smtpClient.Host = _generalDAL.GetMailHost();
                                smtpClient.Port = 25;
                                message.From = fromAddress;

                                string _email = "";

                                _email = "Dear Sir/Madam, \n\n" + _email;
                                _email += "Vehicle registration receipt generated for the profit center :" + _NewReceipt.Sar_profit_center_cd + " \n";
                                _email += "\n  Receipt # : " + _documentNo + "\n";
                                _email += "\n " + _invNo + "\n";
                                if (_insucustomer == "")
                                {
                                    _email += "\n  Customer : " + _customer + "\n";
                                    _email += "\n  Address : " + _cusAdd + "\n";
                                }
                                else
                                {
                                    _email += "\n  Customer : " + _insucustomer + "";
                                    _email += "\n             (" + _customer + ")\n";
                                    _email += "\n  Address : " + _insucustadd + "\n";
                                }
                                _email += "\n  contact # : " + _contact + "\n";
                                _email += "\n  District : " + _distric + "\n";
                                _email += "\n  Province : " + _province + "\n";

                                foreach (VehicalRegistration _reg in _vehReg)
                                {
                                    _itmDetails = "";
                                    _itmDetails = "Item & Model : " + _reg.P_srvt_itm_cd + "-" + _reg.P_svrt_model + " -  Engine & chassis :" + _reg.P_svrt_engine + " / " + _reg.P_svrt_chassis;
                                    _email += "\n " + _itmDetails + " \n";
                                }



                                _email += _generalDAL.GetMailFooterMsg();

                                message.To.Add(_info.Mmi_email);
                                message.Subject = "Vehicle Registration Receipt";
                                //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                                //message.Bcc.Add(new MailAddress(""));
                                message.IsBodyHtml = false;
                                message.Body = _email;
                                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                                // Send SMTP mail
                                smtpClient.Send(message);
                            }
                        }
                }
                else if (_NewReceipt.Sar_receipt_type == "ABTCO")
                {
                    List<MsgInformation> _msg = _generalDAL.GetMsgInformation(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd, _NewReceipt.Sar_receipt_type);

                    if (_msg != null)
                        if (_msg.Count > 0)
                        {
                            foreach (MsgInformation _info in _msg)
                            {
                                string _mg = "Collection received for air ticket at " + _NewReceipt.Sar_profit_center_cd + " S/R.Rec. # " + _documentNo + " - SCM2 -";
                                if (_info.Mmi_mobi_no.Length > 9)
                                {
                                    OutSMS _out = new OutSMS();
                                    _out.Msg = _mg;
                                    _out.Msgstatus = 0;
                                    _out.Msgtype = _info.Mmi_msg_tp;
                                    _out.Receivedtime = DateTime.Now;
                                    _out.Receiver = _info.Mmi_receiver;
                                    //_out.Receiverphno = _info.Mmi_mobi_no;
                                    _out.Senderphno = _info.Mmi_mobi_no;
                                    _out.Refdocno = _documentNo;
                                    _out.Sender = _NewReceipt.Sar_create_by;
                                    _out.Createtime = DateTime.Now;
                                    _generalDAL.SaveSMSOut(_out);
                                }
                            }
                        }

                    //send mail
                    List<MsgInformation> _mail = _generalDAL.GetMsgInformation(_NewReceipt.Sar_com_cd, null, _NewReceipt.Sar_receipt_type);
                    if (_mail != null)
                        if (_mail.Count > 0)
                        {
                            foreach (MsgInformation _info in _mail)
                            {
                                SmtpClient smtpClient = new SmtpClient();
                                MailMessage message = new MailMessage();

                                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                                smtpClient.Host = _generalDAL.GetMailHost();
                                smtpClient.Port = 25;
                                message.From = fromAddress;

                                string _email = "";

                                _email = "Dear Sir/Madam, \n\n" + _email;
                                _email += "Collection received for the profit center :" + _NewReceipt.Sar_profit_center_cd + " \n";
                                _email += "\n  Receipt # : " + _documentNo + "\n";
                                _email += "\n  Customer : " + _customer + "\n";
                                _email += "\n  Address : " + _cusAdd + "\n";
                                _email += "\n  contact # : " + _contact + "\n";
                                _email += "\n  Amount # : " + _NewReceipt.Sar_tot_settle_amt + "\n";
                                _email += "\n  Note : " + _NewReceipt.Sar_remarks + "\n";


                                _email += " \n Thank You, \n ** This is an auto generated mail from Abans infor portal. Please don't Reply ** \n ** Abans IT Department 2012 **";

                                message.To.Add(_info.Mmi_email);
                                message.Subject = "Air Ticket collection";
                                //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                                //message.Bcc.Add(new MailAddress(""));
                                message.IsBodyHtml = false;
                                message.Body = _email;
                                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                                // Send SMTP mail
                                smtpClient.Send(message);
                            }
                        }
                }
                else if (_NewReceipt.Sar_receipt_type == "DISP")
                {
                    DisposalHeader oDisposalHeader = _inventoryDAL.GET_DISPOSAL_JOB_HEADER(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd, _NewReceipt.Sar_ref_doc.Trim(), "ALL");
                    if (oDisposalHeader != null && !string.IsNullOrEmpty(oDisposalHeader.Dh_doc_no))
                    {
                        if (oDisposalHeader.Dh_stus == "A")
                        {
                            // Int32 result = _salesDAL.UpdateDisposalReceiptNumber(_NewReceipt.Sar_ref_doc, _NewReceipt.Sar_com_cd, "F", _documentNo);
                        }
                        //else
                        //{
                        //    Int32 result = _salesDAL.UpdateDisposalReceiptNumber(_NewReceipt.Sar_ref_doc, _NewReceipt.Sar_com_cd, "S", _documentNo);
                        //}
                    }
                    //else
                    //{
                    //    Int32 result = _salesDAL.UpdateDisposalReceiptNumber(_NewReceipt.Sar_ref_doc, _NewReceipt.Sar_com_cd, "S", _documentNo);
                    //}
                }

                //Send notification SMS to customer - 14-10-2014 - Darshana
                //List<MasterBusinessEntity> _cusdet = new List<MasterBusinessEntity>();
                string _mobilNo = "";
                string _cusName = "";
                string _Newmg = "";
                string _recTp = "";
                decimal _recAmt = 0;
                //_cusdet = _salesDAL.GetActiveCustomerDetailList(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_debtor_cd, null, null, "C");
                //foreach (MasterBusinessEntity _cus in _cusdet)
                //{
                _mobilNo = _NewReceipt.Sar_mob_no;
                _cusName = _NewReceipt.Sar_debtor_name;
                _recAmt = _NewReceipt.Sar_tot_settle_amt;


                if (!string.IsNullOrEmpty(_mobilNo))
                {

                    if (_mobilNo.Length >= 9)
                    {
                        if (_NewReceipt.Sar_receipt_type == "ADVAN")
                        {
                            _recTp = "Advance payment";
                        }
                        else if (_NewReceipt.Sar_receipt_type == "GVISU")
                        {
                            _recTp = "Gift voucher purchase";
                        }
                        else if (_NewReceipt.Sar_receipt_type == "DEBT")
                        {
                            _recTp = "Credit sale settlement";
                        }
                        else if (_NewReceipt.Sar_receipt_type == "VHINS")
                        {
                            _recTp = "Vechicle insuarance";
                        }
                        else if (_NewReceipt.Sar_receipt_type == "VHREG")
                        {
                            _recTp = "Vechicle registration";
                        }
                        else if (_NewReceipt.Sar_receipt_type == "ADINS")
                        {
                            _recTp = "Insuarance";
                        }
                        else if (_NewReceipt.Sar_receipt_type == "ABTCO")
                        {
                            _recTp = "Air tickets";
                        }
                        else
                        {
                            _recTp = "";
                        }

                        if (!string.IsNullOrEmpty(_recTp))
                        {
                            if (_recAmt > 0)
                            {
                                string _pcName = "";
                                DataTable dt = _generalDAL.CheckProfitCenter(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd);
                                if (dt.Rows.Count > 0)
                                {
                                    _pcName = Convert.ToString(dt.Rows[0]["mpc_desc"]);
                                }

                                _Newmg = "Thank u for the payment of LKR " + _recAmt + " received to the " + _pcName + " for " + _recTp + ",R/N " + _documentNo;// "Thank u for the purchased items on HP A/C: " + _AccountNo + " @ " + _pcName + " S/R. HP value Rs.: " + _HPAccount.Hpa_hp_val + " and " + _smsInsu + " Rs.: " + _insuAmt + "-" + _generalDAL.GetHPCustContactPhoneNo();
                                OutSMS _out = new OutSMS();
                                _out.Msg = _Newmg;
                                _out.Msgstatus = 0;
                                _out.Msgtype = "S";
                                _out.Receivedtime = DateTime.Now;
                                _out.Receiver = "CUSTOMER";
                                //_out.Receiverphno = _info.Mmi_mobi_no;

                                if (_mobilNo.Length == 10)
                                {
                                    _out.Receiverphno = "+94" + _mobilNo.Substring(1, 9);
                                    _out.Senderphno = "+94" + _mobilNo.Substring(1, 9);
                                }
                                if (_mobilNo.Length == 9)
                                {
                                    _out.Receiverphno = "+94" + _mobilNo;
                                    _out.Senderphno = "+94" + _mobilNo;
                                }

                                if (_out.Receiverphno != null)
                                {
                                    _out.Refdocno = _documentNo;
                                    _out.Sender = _NewReceipt.Sar_create_by;
                                    _out.Createtime = DateTime.Now;
                                    _generalDAL.SaveSMSOut(_out);
                                }
                                //_out.Refdocno = _documentNo;
                                //_out.Sender = _NewReceipt.Sar_create_by;
                                //_out.Createtime = DateTime.Now;
                                //_generalDAL.SaveSMSOut(_out);
                            }
                        }
                    }
                }

                //kapila 14/3/2016
                if (_NewReceipt.Sar_receipt_type == "VHREG")
                {
                    string _vInvNo = "";
                    string _vEngNo = "";
                    string _vChasisNo = "";
                    string _saleTp = "";
                    GeneralBLL _gen = new GeneralBLL();
                    foreach (VehicalRegistration _vehList in _vehReg)
                    {
                        _vInvNo = _vehList.P_svrt_inv_no;
                        _vEngNo = _vehList.P_svrt_engine;
                        _vChasisNo = _vehList.P_svrt_chassis;
                        _saleTp = _vehList.P_svrt_sales_tp;
                    }
                    if (_saleTp == "CRED" || _saleTp == "CS" || _saleTp == "HS")
                    {
                        Int32 _seq_no = 0;
                        CreditSaleDocsHeader _crdSaleDocHdr = new CreditSaleDocsHeader();

                        _crdSaleDocHdr.Gdh_com = _NewReceipt.Sar_com_cd;
                        _crdSaleDocHdr.Gdh_pc = _NewReceipt.Sar_profit_center_cd;
                        _crdSaleDocHdr.Gdh_inv = _vInvNo;
                        _crdSaleDocHdr.Gdh_inv_dt = _NewReceipt.Sar_receipt_date;
                        _crdSaleDocHdr.Gdh_rec = _documentNo;
                        _crdSaleDocHdr.Gdh_recipt_dt = _NewReceipt.Sar_receipt_date;
                        _crdSaleDocHdr.Gdh_engine = _vEngNo;
                        _crdSaleDocHdr.Gdh_chassis = _vChasisNo;
                        _crdSaleDocHdr.Gdh_isse_doc = false;
                        _crdSaleDocHdr.Gdh_rec_doc = false;
                        _crdSaleDocHdr.Gdh_amt = Convert.ToDecimal(_NewReceipt.Sar_tot_settle_amt);


                        Int32 X = _gen.SaveCredSaleDocHeader(_crdSaleDocHdr, out _seq_no);

                        List<CreditSaleDocsDetail> CreditSaleDocList = new List<CreditSaleDocsDetail>();
                        _dtDocs = _generalDAL.GetCrdSaleDocsData(_saleTp);
                        for (int i = 0; i < _dtDocs.Rows.Count; i++)
                        {
                            CreditSaleDocsDetail _crdSaleDocDet = new CreditSaleDocsDetail();
                            _crdSaleDocDet.Gdd_seq = _seq_no;
                            _crdSaleDocDet.Gdd_doc = _dtDocs.Rows[i]["gdd_doc"].ToString();
                            _crdSaleDocDet.Gdd_is_issu = true;
                            _crdSaleDocDet.Gdd_iss_dt = _NewReceipt.Sar_receipt_date;
                            _crdSaleDocDet.Gdd_iss_rmks = "Auto generate";
                            _crdSaleDocDet.Gdd_iss_by = _NewReceipt.Sar_create_by;
                            _crdSaleDocDet.Gdd_line = i + 1;
                            _crdSaleDocDet.Gdd_ret_dt = _NewReceipt.Sar_receipt_date;
                            _crdSaleDocDet.Gdd_rerec_dt = _NewReceipt.Sar_receipt_date;
                            _crdSaleDocDet.Gdd_rec_dt = _NewReceipt.Sar_receipt_date;

                            CreditSaleDocList.Add(_crdSaleDocDet);

                        }
                        Int32 Z = _generalDAL.UpdateCredSaleDocAllIssue(Convert.ToDateTime(DateTime.Now).Date, _seq_no);

                        Int32 Y = _gen.SaveCredSaleDocDetail(CreditSaleDocList);
                    }
                }
                //}

                //Add by akila 2017/07/25
                #region Generate Debit Note
                if ((_NewReceipt.Sar_receipt_type == "VHREG") && (_isFreeRegistered))
                {
                    MasterAutoNumber _debtAuto = new MasterAutoNumber();
                    _debtAuto.Aut_cate_cd = _NewReceipt.Sar_profit_center_cd;
                    _debtAuto.Aut_cate_tp = "PC";
                    _debtAuto.Aut_direction = 0;
                    _debtAuto.Aut_modify_dt = null;
                    _debtAuto.Aut_moduleid = "DEBT";
                    _debtAuto.Aut_number = 1;
                    _debtAuto.Aut_start_char = "DEBT";
                    _debtAuto.Aut_year = null;

                    MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_debtAuto.Aut_moduleid, _debtAuto.Aut_direction, _debtAuto.Aut_start_char, _debtAuto.Aut_cate_tp, _debtAuto.Aut_cate_cd, _debtAuto.Aut_modify_dt, _debtAuto.Aut_year);
                    string _tmpInvNo = _debtAuto.Aut_cate_cd + "-" + _debtAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_debtAuto);


                    //Save Sat_hdr
                    InvoiceHeader _debtInvHdr = new InvoiceHeader();
                    _debtInvHdr.Sah_seq_no = _inventoryDAL.GetSerialID();
                    _debtInvHdr.Sah_com = _NewReceipt.Sar_com_cd;
                    _debtInvHdr.Sah_pc = _NewReceipt.Sar_profit_center_cd;
                    _debtInvHdr.Sah_tp = "INV";
                    _debtInvHdr.Sah_inv_tp = "DEBT";
                    _debtInvHdr.Sah_inv_sub_tp = "SA";
                    _debtInvHdr.Sah_inv_no = _tmpInvNo;
                    _debtInvHdr.Sah_dt = _NewReceipt.Sar_receipt_date;
                    _debtInvHdr.Sah_manual = false;
                    _debtInvHdr.Sah_ref_doc = docno; //_NewReceipt.Sar_receipt_no;
                    _debtInvHdr.Sah_cus_cd = _NewReceipt.Sar_debtor_cd;
                    _debtInvHdr.Sah_cus_name = _NewReceipt.Sar_debtor_name;
                    _debtInvHdr.Sah_cus_add1 = _NewReceipt.Sar_debtor_add_1;
                    _debtInvHdr.Sah_cus_add2 = _NewReceipt.Sar_debtor_add_2;
                    _debtInvHdr.Sah_currency = _NewReceipt.Sar_currency_cd;
                    _debtInvHdr.Sah_ex_rt = 1;
                    _debtInvHdr.Sah_d_cust_cd = _NewReceipt.Sar_debtor_cd;
                    _debtInvHdr.Sah_d_cust_add1 = _NewReceipt.Sar_debtor_add_1;
                    _debtInvHdr.Sah_d_cust_add2 = _NewReceipt.Sar_debtor_add_2;
                    _debtInvHdr.Sah_man_cd = "N/A";
                    _debtInvHdr.Sah_sales_ex_cd = "N/A";
                    _debtInvHdr.Sah_esd_rt = 0;
                    _debtInvHdr.Sah_wht_rt = 0;
                    _debtInvHdr.Sah_epf_rt = 0;
                    _debtInvHdr.Sah_remarks = _NewReceipt.Sar_remarks;
                    _debtInvHdr.Sah_is_acc_upload = false;
                    // _debtInvHdr.Sah_stus = "A";
                    _debtInvHdr.Sah_stus = "F"; // change due to requirement tharindu 2018-06-13
                    _debtInvHdr.Sah_cre_by = _NewReceipt.Sar_create_by;
                    _debtInvHdr.Sah_cre_when = DateTime.Now;
                    _debtInvHdr.Sah_mod_by = _NewReceipt.Sar_mod_by;
                    _debtInvHdr.Sah_mod_when = DateTime.Now;
                    _debtInvHdr.Sah_session_id = _NewReceipt.Sar_session_id;
                    _debtInvHdr.Sah_anal_2 = _NewReceipt.Sar_receipt_type;
                    _debtInvHdr.Sah_anal_7 = _actualRegistationAmt;
                    _debtInvHdr.Sah_anal_10 = 1;
                    _debtInvHdr.Sah_anal_11 = 0;
                    _debtInvHdr.Sah_anal_12 = DateTime.Today.Date;
                    _debtInvHdr.Sah_direct = true;
                    _debtInvHdr.Sah_tax_inv = false;
                    _debtInvHdr.Sah_tax_exempted = false;
                    _debtInvHdr.Sah_is_svat = false;
                    _debtInvHdr.Sah_fin_chrg = 0;
                    _debtInvHdr.Sah_is_grn = false;
                    _debtInvHdr.Sah_d_cust_name = _NewReceipt.Sar_debtor_name;

                    Int32 InvoiceSeqNo = _inventoryDAL.GetSerialID();
                    int _affectedCount = 0;
                    _affectedCount = _salesDAL.SaveSalesHeader(_debtInvHdr);

                    if (_affectedCount > 0)
                    {
                        //Save invoice details
                        List<InvoiceItem> _debtItems = new List<InvoiceItem>();
                        DataTable _syspara = new DataTable();
                        _syspara = _inventoryDAL.getMstSysPara(_NewReceipt.Sar_com_cd, "COM", _NewReceipt.Sar_com_cd, "FREEREGDBT", "ITM");

                        if (_syspara.Rows.Count > 0)
                        {
                            string _itemCode = _syspara.Rows[0]["msp_rest_cate_cd"] == DBNull.Value ? string.Empty : _syspara.Rows[0]["msp_rest_cate_cd"].ToString(); // "TRCHG";// this is a system defined vertual item. 
                            MasterItem _itemMaster = new MasterItem();
                            _itemMaster = _salesDAL.GetItem(_debtInvHdr.Sah_com, _itemCode);
                            if (_itemMaster != null)
                            {
                                foreach (var _receiptItem in _NewReceiptDetails)
                                {
                                    InvoiceItem _debtItem = new InvoiceItem();
                                    _debtItem.Sad_seq_no = _debtInvHdr.Sah_seq_no;
                                    _debtItem.Sad_itm_line += 1;
                                    _debtItem.Sad_inv_no = _debtInvHdr.Sah_inv_no;
                                    _debtItem.Sad_itm_cd = _itemMaster.Mi_cd;
                                    _debtItem.Sad_itm_stus = "GOD";//_itemMaster.Mi_itm_stus;
                                    _debtItem.Sad_itm_tp = _itemMaster.Mi_itm_tp;
                                    _debtItem.Sad_uom = _itemMaster.Mi_itm_uom; // "NOS";
                                    _debtItem.Sad_qty = 1;
                                    _debtItem.Sad_do_qty = 1;
                                    _debtItem.Sad_fws_ignore_qty = _itemMaster.Mi_itm_tp == "V" ? 1 : 0;
                                    _debtItem.Sad_srn_qty = 0;
                                    _debtItem.Sad_unit_rt = _actualRegistationAmt;
                                    _debtItem.Sad_unit_amt = _actualRegistationAmt;
                                    _debtItem.Sad_disc_rt = 0;
                                    _debtItem.Sad_disc_amt = 0;
                                    _debtItem.Sad_itm_tax_amt = 0;
                                    _debtItem.Sad_tot_amt = _actualRegistationAmt;
                                    _debtItem.Sad_pbook = "";
                                    _debtItem.Sad_pb_lvl = "";
                                    _debtItem.Sad_pb_price = 0;

                                    _salesDAL.SaveSalesItem(_debtItem);

                                    //save tax
                                    InvoiceItemTax _tax = new InvoiceItemTax();
                                    _tax.Satx_inv_no = _debtInvHdr.Sah_inv_no;
                                    _tax.Satx_itm_cd = _itemMaster.Mi_cd;
                                    _tax.Satx_itm_line += 1;
                                    _tax.Satx_itm_tax_amt = 0;
                                    _tax.Satx_itm_tax_rt = 0;
                                    _tax.Satx_itm_tax_tp = "VAT";
                                    _tax.Satx_job_line = 0;
                                    _tax.Satx_job_no = "";
                                    _tax.Satx_seq_no = _debtInvHdr.Sah_seq_no;
                                    _salesDAL.SaveSalesItemTax(_tax);
                                }
                            }
                            else { throw new Exception("Debit note cannot be generated! Item code - " + _itemCode + " has not define"); }
                        }
                        else { throw new Exception("Debit note couldn't generate. Debit note parameters not foud - FREEREGDBT"); }

                        //docno += ":" + _tmpInvNo;
                    }
                    else { throw new Exception("Debit note couldn't generate !"); }
                }
                #endregion


                //2018-06-22 Check Duplicate Reciept by subodana _NewReceiptDetails
                foreach (var _durec in _NewReceiptDetails)
                {
                    if (_durec.Sard_inv_no != null && _NewReceipt.Sar_receipt_type == "DEBT")
                    {
                        DataTable _dupdt = _salesDAL.GetDuplicateRecieptData(_durec.Sard_inv_no);
                        if (_dupdt != null && _dupdt.Rows.Count > 1)
                        {
                            DateTime date1 = Convert.ToDateTime(_dupdt.Rows[0]["sar_create_when"]);
                            DateTime date2 = Convert.ToDateTime(_dupdt.Rows[1]["sar_create_when"]);

                            double seconds = date1.Subtract(date2).TotalSeconds;
                            if (seconds < 5)
                            {
                                _effects = -1;
                                docno = "Already Saved.";
                                //documentNoGRN = documentNo;
                                _inventoryDAL.TransactionRollback();
                                _salesDAL.TransactionRollback();
                                _inventoryRepDAL.TransactionRollback();
                                _generalDAL.TransactionRollback();
                                _fmsInventoryDal.TransactionRollback();
                                return _effects;
                            }
                        }
                    }

                }




                //_inventoryDAL.ConnectionClose();
                //_salesDAL.ConnectionClose();
                //_inventoryRepDAL.ConnectionClose();
                //_generalDAL.ConnectionClose();
                //_fmsInventoryDal.ConnectionClose();

                _inventoryDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();
                _generalDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();

                _effects = 1;
                // _generalDAL.ConnectionClose();
            }
            catch (Exception err)
            {
                _effects = -1;
                docno = "ERROR : " + err.Message.ToString();
                //documentNoGRN = documentNo;
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                return _effects;
            }
            //Added By Udaya 07.10.2017
            bool _isSend = false;
            HpSystemParameters _getSysParameter = new HpSystemParameters();
            DataTable tbl = new DataTable();
            _getSysParameter = _salesDAL.GetSystemParameter("COM", "AAL", "EMAILRE", DateTime.Now);
            if (_getSysParameter != null)
            {
                if (_getSysParameter.Hsy_val == 1)
                {
                    _isSend = true;
                }
            }
            if (_isSend)
            {
                if (_effects > 0)
                {
                    List<MsgInformation> _mail = _generalDAL.GetMsgInformation(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd, "SETTLE_DONE");
                    if (_mail != null)
                    {
                        if (_mail.Count > 0)
                        {
                            foreach (MsgInformation _info in _mail)
                            {
                                SmtpClient smtpClient = new SmtpClient();
                                MailMessage message = new MailMessage();

                                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                                smtpClient.Host = _generalDAL.GetMailHost();
                                smtpClient.Port = 25;
                                message.From = fromAddress;

                                string _email = "";

                                _email = " Dear Sir/Madam, \n\n" + _email;
                                _email += " Collection received for the profit center :" + _NewReceipt.Sar_profit_center_cd + " \n";
                                if (_NewReceipt.Sar_receipt_type == "DEBT")
                                {
                                    foreach (RecieptItem inv in _NewReceiptDetails)
                                    {
                                        _email += "\n Invoice # : " + inv.Sard_inv_no + "\n";
                                        tbl = _salesDAL.GetInv_SOA_SO(inv.Sard_inv_no, _NewReceipt.Sar_com_cd);
                                    }
                                }
                                _email += "\n Receipt # : " + _documentNo + "\n";
                                _email += "\n Customer : " + _customer + "\n";
                                _email += "\n Address : " + _cusAdd + "\n";
                                _email += "\n contact # : " + _contact + "\n";
                                _email += "\n Amount # : " + _NewReceipt.Sar_tot_settle_amt + "\n";
                                _email += "\n Note : " + _NewReceipt.Sar_remarks + "\n";
                                if (tbl.Rows.Count > 0)
                                {
                                    _email += "\n SO # : " + tbl.Rows[0].Field<string>("sah_ref_doc") + "\n";
                                    _email += "\n SOA # : " + tbl.Rows[0].Field<string>("itr_req_no") + "\n";
                                }
                                else
                                {
                                    _email += "\n SO # : " + string.Empty + "\n";
                                    _email += "\n SOA # : " + string.Empty + "\n";
                                }

                                _email += " \n Thank You, \n ** This is an auto generated mail from Abans infor portal. Please don't Reply ** \n ** Abans IT Department **";
                                message.To.Add(_info.Mmi_email);
                                message.Subject = "Settlement Done";
                                message.IsBodyHtml = false;
                                message.Body = _email;
                                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                                smtpClient.Send(message);
                            }
                        }
                    }
                }
            }
            return _effects;
        }

        //Pramil
        public Int32 SaveNewReceiptTBS(RecieptHeaderTBS _NewReceipt, List<RecieptItemTBS> _NewReceiptDetails, MasterAutoNumber _masterAutoNumber, ReptPickHeader _pickHeader, List<ReptPickSerials> _pickSerials, List<VehicalRegistration> _vehReg, List<VehicleInsuarance> _insList, List<HpSheduleDetails> _HPSheduleDetails, MasterAutoNumber _masterAutoNumberType, List<GiftVoucherPages> _pageList, out string docno)
        {
            Int32 _effects = 0;
            int _lineNo = 0;
            string _refNo = "";
            string _itmDetails = "";
            string _invNo = "";
            string _customer = "";
            string _distric = "";
            string _province = "";
            string _contact = "";
            string _cusAdd = "";
            string _autoNumberRecType = "";
            string _documentNo = "";
            Int32 user_seq_num = 0;

            _salesDAL = new SalesDAL();


            ReptCommonDAL _reptCommonDAL = new ReptCommonDAL();

            if (_pickHeader != null)
            {
                user_seq_num = _reptCommonDAL.GET_SEQNUM_FOR_INVOICE("DO", _NewReceipt.Sir_com_cd, _pickHeader.Tuh_doc_no, 0);
            }

            //using (TransactionScope _tr = new TransactionScope())
            try
            {

                _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen(); _inventoryDAL.BeginTransaction();
                _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen(); _salesDAL.BeginTransaction();
                _inventoryRepDAL = new ReptCommonDAL(); _inventoryRepDAL.ConnectionOpen(); _inventoryRepDAL.BeginTransaction();
                _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen(); _generalDAL.BeginTransaction();
                _fmsInventoryDal = new FMS_InventoryDAL(); _fmsInventoryDal.ConnectionOpen(); _fmsInventoryDal.BeginTransaction();


                //_FMSDAL = new FMS_InventoryDAL(); 


                _effects = _salesDAL.SaveReceiptHeaderTBS(_NewReceipt);

                _customer = _NewReceipt.Sir_debtor_cd + "-" + _NewReceipt.Sir_debtor_name;
                _distric = _NewReceipt.Sir_anal_1;
                _province = _NewReceipt.Sir_anal_2;
                _cusAdd = _NewReceipt.Sir_debtor_add_1 + "," + _NewReceipt.Sir_debtor_add_2;

                if (_NewReceiptDetails != null)
                {
                    foreach (RecieptItemTBS _ReceiptDetails in _NewReceiptDetails)
                    {
                        _effects = _salesDAL.SaveReceiptItemTBS(_ReceiptDetails);
                        if (_NewReceipt.Sir_receipt_type == "DEBT")
                        {
                            decimal _curBalance = 0;
                            if (_NewReceipt.Sir_is_oth_shop == true)        //kapila   27/6/2014
                            {
                                _curBalance = _salesDAL.GetOutInvAmtTBS(_NewReceipt.Sir_com_cd, _NewReceipt.Sir_oth_sr, _NewReceipt.Sir_debtor_cd, _ReceiptDetails.Sird_inv_no);
                                if (_curBalance >= _ReceiptDetails.Sird_settle_amt)
                                {
                                    _salesDAL.UpdateInvoiceSettleAmtTBS(_NewReceipt.Sir_com_cd, _NewReceipt.Sir_oth_sr, _NewReceipt.Sir_debtor_cd, _ReceiptDetails.Sird_inv_no, _ReceiptDetails.Sird_settle_amt);
                                }
                                else
                                {
                                    _effects = -1;
                                    docno = "Cannot proceed : Outstanding balance is " + _curBalance + " and settlement amount is " + _ReceiptDetails.Sird_settle_amt + " for the invoice " + _ReceiptDetails.Sird_inv_no;
                                    _inventoryDAL.TransactionRollback();
                                    _salesDAL.TransactionRollback();
                                    _inventoryRepDAL.TransactionRollback();
                                    _generalDAL.TransactionRollback();
                                    _fmsInventoryDal.TransactionRollback();
                                    return _effects;
                                }
                            }
                            else
                            {
                                _curBalance = _salesDAL.GetOutInvAmtTBS(_NewReceipt.Sir_com_cd, _NewReceipt.Sir_profit_center_cd, _NewReceipt.Sir_debtor_cd, _ReceiptDetails.Sird_inv_no);
                                if (_curBalance >= _ReceiptDetails.Sird_settle_amt)
                                {
                                    _salesDAL.UpdateInvoiceSettleAmtTBS(_NewReceipt.Sir_com_cd, _NewReceipt.Sir_profit_center_cd, _NewReceipt.Sir_debtor_cd, _ReceiptDetails.Sird_inv_no, _ReceiptDetails.Sird_settle_amt);
                                }
                                else
                                {
                                    _effects = -1;
                                    docno = "Cannot proceed : Outstanding balance is " + _curBalance + " and settlement amount is " + _ReceiptDetails.Sird_settle_amt + " for the invoice " + _ReceiptDetails.Sird_inv_no;
                                    _inventoryDAL.TransactionRollback();
                                    _salesDAL.TransactionRollback();
                                    _inventoryRepDAL.TransactionRollback();
                                    _generalDAL.TransactionRollback();
                                    _fmsInventoryDal.TransactionRollback();
                                    return _effects;
                                }

                            }

                        }
                    }

                    if (_NewReceipt.Sir_receipt_type == "DEBT")
                    {
                        // get invoice numbers
                        var _lst = (from n in _NewReceiptDetails
                                    group n by new { n.Sird_inv_no } into r
                                    select new { Sird_inv_no = r.Key.Sird_inv_no }).ToList();

                        decimal _Balance = 0;
                        decimal _commAmt = 0;
                        decimal _minCommAllow = 0;
                        decimal _wkNo = 0;

                        foreach (var s in _lst)
                        {
                            if (_NewReceipt.Sir_is_oth_shop == true)        //kapila   27/6/2014
                                _Balance = _salesDAL.GetOutInvAmtTBS(_NewReceipt.Sir_com_cd, _NewReceipt.Sir_oth_sr, _NewReceipt.Sir_debtor_cd, s.Sird_inv_no);
                            else
                                _Balance = _salesDAL.GetOutInvAmtTBS(_NewReceipt.Sir_com_cd, _NewReceipt.Sir_profit_center_cd, _NewReceipt.Sir_debtor_cd, s.Sird_inv_no);

                            HpSystemParameters _getSystemParameter = _salesDAL.GetSystemParameter("COM", _NewReceipt.Sir_com_cd, "CRCOMMINAW", _NewReceipt.Sir_receipt_date);

                            if (_getSystemParameter.Hsy_cd != null)
                            {
                                _minCommAllow = _getSystemParameter.Hsy_val;
                            }
                            else
                            {
                                _minCommAllow = 0;
                            }

                            if (_Balance <= _minCommAllow)
                            {
                                //get commission amount
                                _commAmt = _salesDAL.GetFinalCreditCommission(s.Sird_inv_no);

                                //save GNT_REM_SUM 
                                RemitanceSummaryDetail _remDet = new RemitanceSummaryDetail();
                                _remDet.Rem_com = _NewReceipt.Sir_com_cd;
                                if (_NewReceipt.Sir_is_oth_shop == true)    //kapila  27/6/2014
                                    _remDet.Rem_pc = _NewReceipt.Sir_oth_sr;
                                else
                                    _remDet.Rem_pc = _NewReceipt.Sir_profit_center_cd;

                                _remDet.Rem_dt = _NewReceipt.Sir_receipt_date;
                                _remDet.Rem_sec = "02";
                                _remDet.Rem_cd = "005";
                                _remDet.Rem_sh_desc = "Group sale comm";
                                _remDet.Rem_lg_desc = "GROUP SALE COMM";
                                _remDet.Rem_val = _commAmt;
                                _remDet.Rem_val_final = _commAmt;
                                int _weekNo = _generalDAL.GetWeek(Convert.ToDateTime(_NewReceipt.Sir_receipt_date).Date, out _wkNo, _NewReceipt.Sir_com_cd);
                                _remDet.Rem_week = _wkNo + "S";
                                _remDet.Rem_ref_no = _NewReceipt.Sir_seq_no.ToString();
                                _remDet.Rem_rmk = s.Sird_inv_no;
                                _remDet.Rem_cr_acc = null;
                                _remDet.Rem_db_acc = null;
                                _remDet.Rem_del_alw = false;
                                _remDet.Rem_cre_by = _NewReceipt.Sir_create_by;
                                _remDet.Rem_cre_dt = _NewReceipt.Sir_receipt_date;
                                _remDet.Rem_is_sos = true;
                                _remDet.Rem_is_dayend = true;
                                _remDet.Rem_is_sun = true;
                                _remDet.Rem_cat = 17;
                                _remDet.Rem_add = 0;
                                _remDet.Rem_ded = 0;
                                _remDet.Rem_net = _commAmt;
                                _remDet.Rem_epf = 0;
                                _remDet.Rem_esd = 0;
                                _remDet.Rem_wht = 0;
                                _remDet.Rem_add_fin = 0;
                                _remDet.Rem_ded_fin = 0;
                                _remDet.Rem_net_fin = _commAmt;
                                _remDet.Rem_rmk_fin = s.Sird_inv_no;
                                _remDet.Rem_bnk_cd = null;
                                _remDet.Rem_is_rem_sum = true;
                                _salesDAL.SaveRemSummaryForFinalCreditComm(_remDet);
                            }
                        }
                    }
                }



                Int32 _autoNo = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                _documentNo = _masterAutoNumber.Aut_cate_cd + _masterAutoNumber.Aut_start_char + string.Format("{0:0000}", _autoNo);

                if (_NewReceipt.Sir_anal_3 == "SYSTEM")
                {
                    Int32 _autoNoRecTp = _inventoryDAL.GetAutoNumber(_masterAutoNumberType.Aut_moduleid, _masterAutoNumberType.Aut_direction, _masterAutoNumberType.Aut_start_char, _masterAutoNumberType.Aut_cate_tp, _masterAutoNumberType.Aut_cate_cd, _masterAutoNumberType.Aut_modify_dt, _masterAutoNumberType.Aut_year).Aut_number;
                    _autoNumberRecType = _masterAutoNumberType.Aut_cate_cd + "-" + _masterAutoNumberType.Aut_start_char + "-" + string.Format("{0:000000}", _autoNoRecTp);
                }
                else
                {
                    _autoNumberRecType = _NewReceipt.Sir_manual_ref_no;
                }

                //_salesDAL.UpdateInvoiceReceipts("-1", _documentNo, -1, _NewReceipt.Sar_seq_no);
                _salesDAL.UpdateRecAutoNumberTBS(_documentNo, _NewReceipt.Sir_seq_no, _autoNumberRecType);

                //update receipt no to commistion table
                if (_NewReceipt.Sir_receipt_type == "DEBT")
                {
                    _salesDAL.UpdateFinalComRec(_NewReceipt.Sir_seq_no.ToString(), _documentNo, _NewReceipt.Sir_com_cd, _NewReceipt.Sir_profit_center_cd, "02", "005");
                }

                if (_pickHeader != null)
                {
                    if (_pickHeader.Tuh_usrseq_no != 0)
                    {
                        if (_NewReceipt.Sir_receipt_type == "VHREG" || _NewReceipt.Sir_receipt_type == "VHINS")
                        {

                        }
                        else
                        {
                            _pickHeader.Tuh_doc_no = _documentNo;
                        }

                        if (_pickHeader.Tuh_ischek_itmstus == true)
                        {

                            if (user_seq_num == -1)
                            {
                                //Generate pick header header
                                _inventoryRepDAL.SavePickedHeader(_pickHeader);
                            }

                        }
                        if (_pickSerials != null)
                        {
                            foreach (ReptPickSerials _list in _pickSerials)
                            {
                                _lineNo = _lineNo + 1;
                                if (_NewReceipt.Sir_receipt_type == "VHREG" || _NewReceipt.Sir_receipt_type == "VHINS")
                                {

                                    //_list.Tus_isapp = 0;
                                    //_list.Tus_iscovernote = 0;
                                }
                                else
                                {
                                    _list.Tus_base_doc_no = _pickHeader.Tuh_doc_no;
                                }

                                if (user_seq_num != -1)
                                {
                                    _list.Tus_usrseq_no = user_seq_num;
                                }

                                //_list.Tus_base_itm_line = _lineNo;
                                if (_pickHeader.Tuh_ischek_itmstus == true)
                                {
                                    _inventoryRepDAL.SavePickedItemSerials(_list);
                                    _inventoryDAL.Update_serial_status(_list.Tus_com, _list.Tus_loc, _list.Tus_itm_cd, _list.Tus_ser_1, -1, _list.Tus_seq_no);
                                    //Added by Prabhath on 12/12/2013 ---- Reservation on Inr_loc
                                    if (_NewReceipt.Sir_receipt_type == "ADVAN" && !string.IsNullOrEmpty(_list.Tus_ser_1)) _inventoryDAL.UpdateLocationRes(_list.Tus_com, _list.Tus_loc, _list.Tus_itm_cd, _list.Tus_itm_stus, _pickHeader.Tuh_usr_id, _list.Tus_qty);
                                }
                                // _salesDAL.SaveReceiptItemDetails(_NewReceipt.Sir_seq_no, _lineNo, _documentNo, _list.Tus_itm_cd, _list.Tus_itm_desc, _list.Tus_itm_model, _list.Tus_ser_1, _list.Tus_ser_2, _NewReceipt.Sir_create_by,0,null,null,0,0,0,null);
                                _salesDAL.SaveReceiptItemDetails(_NewReceipt.Sir_seq_no, _lineNo, _documentNo, _list.Tus_itm_cd, _list.Tus_itm_desc, _list.Tus_itm_model, _list.Tus_ser_1, _list.Tus_ser_2, _NewReceipt.Sir_create_by, 0, null, null, 0, 0, 0, null, null);


                            }
                        }
                    }
                }

                //save vehicle registration details
                if (_vehReg != null)
                {
                    foreach (VehicalRegistration _vehList in _vehReg)
                    {
                        _refNo = _salesDAL.GetInsuRefBySerial(_vehList.P_svrt_inv_no, _vehList.P_svrt_chassis, _vehList.P_svrt_engine, _vehList.P_srvt_itm_cd);
                        _vehList.P_srvt_ref_no = _documentNo;
                        _vehList.P_srvt_insu_ref = _refNo;
                        _salesDAL.SaveVehRegistration(_vehList);
                        _salesDAL.UpdateInsTxnByRegNo(_vehList.P_srvt_ref_no, _vehList.P_srvt_itm_cd, _vehList.P_svrt_inv_no, _vehList.P_svrt_chassis, _vehList.P_svrt_engine);
                        if (_itmDetails == "")
                        {
                            _itmDetails = " Engine & chassis :" + _vehList.P_svrt_engine + "," + _vehList.P_svrt_chassis;
                        }
                        else
                        {
                            _itmDetails = "," + _itmDetails + _vehList.P_svrt_engine + "," + _vehList.P_svrt_chassis;
                        }


                        if (_invNo == "")
                        {
                            _invNo = " Inv # :" + _vehList.P_svrt_inv_no;
                        }

                        _contact = _vehList.P_svrt_contact;
                    }
                }

                //save vehicle insuarance details
                if (_insList != null)
                {

                    foreach (VehicleInsuarance _insu in _insList)
                    {
                        _refNo = _salesDAL.GetRegRefBySerial(_insu.Svit_inv_no, _insu.Svit_chassis, _insu.Svit_engine, _insu.Svit_itm_cd);
                        _insu.Svit_ref_no = _documentNo;
                        _insu.Svit_veg_ref = _refNo;
                        _salesDAL.SaveVehInsuarance(_insu);
                        if (_NewReceipt.Sir_receipt_type == "ADINS")
                        {
                            if (_insu.Svit_engine != "N/A")
                            {
                                _salesDAL.UpdateAddWarr(_insu.Svit_itm_cd, _insu.Svit_engine, 12, "SMART INSUARANCE", _insu.Svit_dt, _documentNo);
                            }
                        }

                        _salesDAL.UpdateRegTxnByInsNo(_insu.Svit_ref_no, _insu.Svit_itm_cd, _insu.Svit_inv_no, _insu.Svit_chassis, _insu.Svit_engine);
                        if (_itmDetails == "")
                        {
                            _itmDetails = " Engine & chassis :" + _insu.Svit_engine + "," + _insu.Svit_chassis;
                        }
                        else
                        {
                            _itmDetails = "," + _itmDetails + _insu.Svit_engine + "," + _insu.Svit_chassis;
                        }


                        if (_invNo == "")
                        {
                            _invNo = " Inv # :" + _insu.Svit_inv_no;
                        }

                        _contact = _insu.Svit_contact;
                    }


                }

                //shedule update part
                if (_HPSheduleDetails != null)
                {
                    foreach (HpSheduleDetails _sch in _HPSheduleDetails)
                    {
                        _salesDAL.UpdateHPShedule(_sch.Hts_acc_no, _sch.Hts_rnt_no, _sch.Hts_veh_insu, _sch.Hts_tot_val);

                    }

                }

                //update and save gift voucher
                if (_pageList != null)
                {
                    int I = 0;
                    foreach (GiftVoucherPages _pg in _pageList)
                    {
                        I = I + 1;
                        _pg.Gvp_oth_ref = _documentNo;
                        _fmsInventoryDal.UpdateGiftVoucherByReceipt(_pg);
                        //_salesDAL.SaveReceiptItemDetails(_NewReceipt.Sir_seq_no, I, _documentNo, _pg.Gvp_gv_cd, null, null, _pg.Gvp_book.ToString(), _pg.Gvp_page.ToString(), _pg.Gvp_mod_by,0,null,null,0,0,0,null);
                        _salesDAL.SaveReceiptItemDetails(_NewReceipt.Sir_seq_no, I, _documentNo, _pg.Gvp_gv_cd, null, null, _pg.Gvp_book.ToString(), _pg.Gvp_page.ToString(), _pg.Gvp_mod_by, 0, null, null, 0, 0, 0, null, null);

                    }
                }

                //if (_NewReceipt.Sar_receipt_type == "VHINS")
                //{


                //    //send SMS 
                //    List<MsgInformation> _msg = _generalDAL.GetMsgInformation(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd, _NewReceipt.Sar_receipt_type);

                //    if (_msg != null)
                //        if (_msg.Count > 0)
                //        {
                //            foreach (MsgInformation _info in _msg)
                //            {
                //                string _mg = "Insuarance receipt generated. Rec. # " + _documentNo + _invNo + _itmDetails + " - SCM2 -";
                //                OutSMS _out = new OutSMS();
                //                _out.Msg = _mg;
                //                _out.Msgstatus = 0;
                //                _out.Msgtype = _info.Mmi_msg_tp;
                //                _out.Receivedtime = DateTime.Now;
                //                _out.Receiver = _info.Mmi_receiver;
                //                _out.Receiverphno = _info.Mmi_mobi_no;
                //                _out.Refdocno = _documentNo;
                //                _out.Sender = _NewReceipt.Sar_create_by;
                //                _out.Createtime = DateTime.Now;
                //                _generalDAL.SaveSMSOut(_out);

                //            }
                //        }




                //    //send mail
                //    List<MsgInformation> _mail = _generalDAL.GetMsgInformation(_NewReceipt.Sar_com_cd, null, _NewReceipt.Sar_receipt_type);
                //    if (_mail != null)
                //        if (_mail.Count > 0)
                //        {
                //            foreach (MsgInformation _info in _mail)
                //            {
                //                SmtpClient smtpClient = new SmtpClient();
                //                MailMessage message = new MailMessage();

                //                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                //                smtpClient.Host = _generalDAL.GetMailHost();
                //                smtpClient.Port = 25;
                //                message.From = fromAddress;

                //                string _email = "";

                //                _email = "Dear Sir/Madam, \n\n" + _email;
                //                _email += "Insuarance receipt generated for the profit center :" + _NewReceipt.Sar_profit_center_cd + " \n";
                //                _email += "\n  Receipt # : " + _documentNo + "\n";
                //                _email += "\n " + _invNo + "\n";
                //                _email += "\n  Customer : " + _customer + "\n";
                //                _email += "\n  Address : " + _cusAdd + "\n";
                //                _email += "\n  contact # : " + _contact + "\n";
                //                _email += "\n  District : " + _distric + "\n";
                //                _email += "\n  Province : " + _province + "\n";

                //                foreach (VehicleInsuarance _insu in _insList)
                //                {
                //                    _itmDetails = "";
                //                    _itmDetails = "Item & Model : " + _insu.Svit_itm_cd + "-" + _insu.Svit_model + " -  Engine & chassis :" + _insu.Svit_engine + " / " + _insu.Svit_chassis;
                //                    _email += "\n " + _itmDetails + " \n";
                //                }



                //                _email += _generalDAL.GetMailFooterMsg();

                //                message.To.Add(_info.Mmi_email);
                //                message.Subject = "Vehicle Insuarance Receipt";
                //                //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                //                //message.Bcc.Add(new MailAddress(""));
                //                message.IsBodyHtml = false;
                //                message.Body = _email;
                //                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                //                // Send SMTP mail
                //                smtpClient.Send(message);
                //            }
                //        }


                //}
                //else if (_NewReceipt.Sar_receipt_type == "VHREG")
                //{
                //    //send SMS 
                //    List<MsgInformation> _msg = _generalDAL.GetMsgInformation(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd, _NewReceipt.Sar_receipt_type);

                //    if (_msg != null)
                //        if (_msg.Count > 0)
                //        {
                //            foreach (MsgInformation _info in _msg)
                //            {
                //                string _mg = "Vehicle registration receipt generated. Rec. # " + _documentNo + _invNo + _itmDetails + " - SCM2 -";
                //                OutSMS _out = new OutSMS();
                //                _out.Msg = _mg;
                //                _out.Msgstatus = 0;
                //                _out.Msgtype = _info.Mmi_msg_tp;
                //                _out.Receivedtime = DateTime.Now;
                //                _out.Receiver = _info.Mmi_receiver;
                //                _out.Receiverphno = _info.Mmi_mobi_no;
                //                _out.Refdocno = _documentNo;
                //                _out.Sender = _NewReceipt.Sar_create_by;
                //                _out.Createtime = DateTime.Now;
                //                _generalDAL.SaveSMSOut(_out);

                //            }
                //        }


                //    //send mail
                //    List<MsgInformation> _mail = _generalDAL.GetMsgInformation(_NewReceipt.Sar_com_cd, null, _NewReceipt.Sar_receipt_type);
                //    if (_mail != null)
                //        if (_mail.Count > 0)
                //        {
                //            foreach (MsgInformation _info in _mail)
                //            {
                //                SmtpClient smtpClient = new SmtpClient();
                //                MailMessage message = new MailMessage();

                //                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                //                smtpClient.Host = _generalDAL.GetMailHost();
                //                smtpClient.Port = 25;
                //                message.From = fromAddress;

                //                string _email = "";

                //                _email = "Dear Sir/Madam, \n\n" + _email;
                //                _email += "Vehicle registration receipt generated for the profit center :" + _NewReceipt.Sar_profit_center_cd + " \n";
                //                _email += "\n  Receipt # : " + _documentNo + "\n";
                //                _email += "\n " + _invNo + "\n";
                //                _email += "\n  Customer : " + _customer + "\n";
                //                _email += "\n  Address : " + _cusAdd + "\n";
                //                _email += "\n  contact # : " + _contact + "\n";
                //                _email += "\n  District : " + _distric + "\n";
                //                _email += "\n  Province : " + _province + "\n";

                //                foreach (VehicalRegistration _reg in _vehReg)
                //                {
                //                    _itmDetails = "";
                //                    _itmDetails = "Item & Model : " + _reg.P_srvt_itm_cd + "-" + _reg.P_svrt_model + " -  Engine & chassis :" + _reg.P_svrt_engine + " / " + _reg.P_svrt_chassis;
                //                    _email += "\n " + _itmDetails + " \n";
                //                }



                //                _email += _generalDAL.GetMailFooterMsg();

                //                message.To.Add(_info.Mmi_email);
                //                message.Subject = "Vehicle Registration Receipt";
                //                //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                //                //message.Bcc.Add(new MailAddress(""));
                //                message.IsBodyHtml = false;
                //                message.Body = _email;
                //                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                //                // Send SMTP mail
                //                smtpClient.Send(message);
                //            }
                //        }
                //}


                _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);

                if (_NewReceipt.Sir_anal_3 == "SYSTEM")
                {
                    _inventoryDAL.UpdateAutoNumber(_masterAutoNumberType);
                }

                if (_NewReceipt.Sir_anal_3 == "MANUAL" && _NewReceipt.Sir_anal_8 == 1)
                {
                    _fmsInventoryDal.Update_Manual_DocNo(_NewReceipt.Sir_profit_center_cd, "MDOC_AVREC", Convert.ToInt32(_NewReceipt.Sir_manual_ref_no), _documentNo);
                }

                docno = _documentNo;

                //_inventoryDAL.ConnectionClose();
                //_salesDAL.ConnectionClose();
                //_inventoryRepDAL.ConnectionClose();
                //_generalDAL.ConnectionClose();
                //_fmsInventoryDal.ConnectionClose();
                //_effects = 1;
                //_tr.Complete();

                // _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen();
                if (_NewReceipt.Sir_receipt_type == "VHINS")
                {
                    //send SMS 
                    List<MsgInformation> _msg = _generalDAL.GetMsgInformation(_NewReceipt.Sir_com_cd, _NewReceipt.Sir_profit_center_cd, _NewReceipt.Sir_receipt_type);

                    if (_msg != null)
                        if (_msg.Count > 0)
                        {
                            foreach (MsgInformation _info in _msg)
                            {
                                if (_info.Mmi_mobi_no.Length > 9)
                                {
                                    string _mg = "Insuarance receipt generated. Rec. # " + _documentNo + _invNo + _itmDetails + " - SCM2 -";
                                    OutSMS _out = new OutSMS();
                                    _out.Msg = _mg;
                                    _out.Msgstatus = 0;
                                    _out.Msgtype = _info.Mmi_msg_tp;
                                    _out.Receivedtime = DateTime.Now;
                                    _out.Receiver = _info.Mmi_receiver;
                                    //_out.Receiverphno = _info.Mmi_mobi_no;//Edit by Chamal 31-03-2015
                                    _out.Senderphno = _info.Mmi_mobi_no;
                                    _out.Refdocno = _documentNo;
                                    _out.Sender = _NewReceipt.Sir_create_by;
                                    _out.Createtime = DateTime.Now;
                                    _generalDAL.SaveSMSOut(_out);
                                }
                            }
                        }

                    //send mail
                    List<MsgInformation> _mail = _generalDAL.GetMsgInformation(_NewReceipt.Sir_com_cd, null, _NewReceipt.Sir_receipt_type);
                    if (_mail != null)
                        if (_mail.Count > 0)
                        {
                            foreach (MsgInformation _info in _mail)
                            {
                                SmtpClient smtpClient = new SmtpClient();
                                MailMessage message = new MailMessage();

                                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                                smtpClient.Host = _generalDAL.GetMailHost();
                                smtpClient.Port = 25;
                                message.From = fromAddress;

                                string _email = "";

                                _email = "Dear Sir/Madam, \n\n" + _email;
                                _email += "Insuarance receipt generated for the profit center :" + _NewReceipt.Sir_profit_center_cd + " \n";
                                _email += "\n  Receipt # : " + _documentNo + "\n";
                                _email += "\n " + _invNo + "\n";
                                _email += "\n  Customer : " + _customer + "\n";
                                _email += "\n  Address : " + _cusAdd + "\n";
                                _email += "\n  contact # : " + _contact + "\n";
                                _email += "\n  District : " + _distric + "\n";
                                _email += "\n  Province : " + _province + "\n";

                                foreach (VehicleInsuarance _insu in _insList)
                                {
                                    _itmDetails = "";
                                    _itmDetails = "Item & Model : " + _insu.Svit_itm_cd + "-" + _insu.Svit_model + " -  Engine & chassis :" + _insu.Svit_engine + " / " + _insu.Svit_chassis + " - Insuarance company code :" + _insu.Svit_ins_com;
                                    _email += "\n " + _itmDetails + " \n";
                                }



                                _email += _generalDAL.GetMailFooterMsg();

                                message.To.Add(_info.Mmi_email);
                                message.Subject = "Vehicle Insuarance Receipt";
                                //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                                //message.Bcc.Add(new MailAddress(""));
                                message.IsBodyHtml = false;
                                message.Body = _email;
                                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                                // Send SMTP mail
                                smtpClient.Send(message);
                            }
                        }


                }
                else if (_NewReceipt.Sir_receipt_type == "VHREG")
                {
                    //send SMS 
                    List<MsgInformation> _msg = _generalDAL.GetMsgInformation(_NewReceipt.Sir_com_cd, _NewReceipt.Sir_profit_center_cd, _NewReceipt.Sir_receipt_type);

                    if (_msg != null)
                        if (_msg.Count > 0)
                        {
                            foreach (MsgInformation _info in _msg)
                            {
                                if (_info.Mmi_mobi_no.Length > 9)
                                {
                                    string _mg = "Vehicle registration receipt generated. Rec. # " + _documentNo + _invNo + _itmDetails + " - SCM2 -";
                                    OutSMS _out = new OutSMS();
                                    _out.Msg = _mg;
                                    _out.Msgstatus = 0;
                                    _out.Msgtype = _info.Mmi_msg_tp;
                                    _out.Receivedtime = DateTime.Now;
                                    _out.Receiver = _info.Mmi_receiver;
                                    //_out.Receiverphno = _info.Mmi_mobi_no; //Edit by Chamal 31-Mar-2015
                                    _out.Senderphno = _info.Mmi_mobi_no;
                                    _out.Refdocno = _documentNo;
                                    _out.Sender = _NewReceipt.Sir_create_by;
                                    _out.Createtime = DateTime.Now;
                                    _generalDAL.SaveSMSOut(_out);
                                }
                            }
                        }


                    //send mail
                    List<MsgInformation> _mail = _generalDAL.GetMsgInformation(_NewReceipt.Sir_com_cd, null, _NewReceipt.Sir_receipt_type);
                    if (_NewReceipt.Sir_profit_center_cd == "BOC") _mail = null;        //kapila 3/10/2014
                    if (_mail != null)
                        if (_mail.Count > 0)
                        {
                            foreach (MsgInformation _info in _mail)
                            {
                                SmtpClient smtpClient = new SmtpClient();
                                MailMessage message = new MailMessage();

                                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                                smtpClient.Host = _generalDAL.GetMailHost();
                                smtpClient.Port = 25;
                                message.From = fromAddress;

                                string _email = "";

                                _email = "Dear Sir/Madam, \n\n" + _email;
                                _email += "Vehicle registration receipt generated for the profit center :" + _NewReceipt.Sir_profit_center_cd + " \n";
                                _email += "\n  Receipt # : " + _documentNo + "\n";
                                _email += "\n " + _invNo + "\n";
                                _email += "\n  Customer : " + _customer + "\n";
                                _email += "\n  Address : " + _cusAdd + "\n";
                                _email += "\n  contact # : " + _contact + "\n";
                                _email += "\n  District : " + _distric + "\n";
                                _email += "\n  Province : " + _province + "\n";

                                foreach (VehicalRegistration _reg in _vehReg)
                                {
                                    _itmDetails = "";
                                    _itmDetails = "Item & Model : " + _reg.P_srvt_itm_cd + "-" + _reg.P_svrt_model + " -  Engine & chassis :" + _reg.P_svrt_engine + " / " + _reg.P_svrt_chassis;
                                    _email += "\n " + _itmDetails + " \n";
                                }



                                _email += _generalDAL.GetMailFooterMsg();

                                message.To.Add(_info.Mmi_email);
                                message.Subject = "Vehicle Registration Receipt";
                                //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                                //message.Bcc.Add(new MailAddress(""));
                                message.IsBodyHtml = false;
                                message.Body = _email;
                                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                                // Send SMTP mail
                                smtpClient.Send(message);
                            }
                        }
                }
                else if (_NewReceipt.Sir_receipt_type == "ABTCO")
                {
                    List<MsgInformation> _msg = _generalDAL.GetMsgInformation(_NewReceipt.Sir_com_cd, _NewReceipt.Sir_profit_center_cd, _NewReceipt.Sir_receipt_type);

                    if (_msg != null)
                        if (_msg.Count > 0)
                        {
                            foreach (MsgInformation _info in _msg)
                            {
                                string _mg = "Collection received for air ticket at " + _NewReceipt.Sir_profit_center_cd + " S/R.Rec. # " + _documentNo + " - SCM2 -";
                                if (_info.Mmi_mobi_no.Length > 9)
                                {
                                    OutSMS _out = new OutSMS();
                                    _out.Msg = _mg;
                                    _out.Msgstatus = 0;
                                    _out.Msgtype = _info.Mmi_msg_tp;
                                    _out.Receivedtime = DateTime.Now;
                                    _out.Receiver = _info.Mmi_receiver;
                                    //_out.Receiverphno = _info.Mmi_mobi_no;
                                    _out.Senderphno = _info.Mmi_mobi_no;
                                    _out.Refdocno = _documentNo;
                                    _out.Sender = _NewReceipt.Sir_create_by;
                                    _out.Createtime = DateTime.Now;
                                    _generalDAL.SaveSMSOut(_out);
                                }
                            }
                        }

                    //send mail
                    List<MsgInformation> _mail = _generalDAL.GetMsgInformation(_NewReceipt.Sir_com_cd, null, _NewReceipt.Sir_receipt_type);
                    if (_mail != null)
                        if (_mail.Count > 0)
                        {
                            foreach (MsgInformation _info in _mail)
                            {
                                SmtpClient smtpClient = new SmtpClient();
                                MailMessage message = new MailMessage();

                                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                                smtpClient.Host = _generalDAL.GetMailHost();
                                smtpClient.Port = 25;
                                message.From = fromAddress;

                                string _email = "";

                                _email = "Dear Sir/Madam, \n\n" + _email;
                                _email += "Collection received for the profit center :" + _NewReceipt.Sir_profit_center_cd + " \n";
                                _email += "\n  Receipt # : " + _documentNo + "\n";
                                _email += "\n  Customer : " + _customer + "\n";
                                _email += "\n  Address : " + _cusAdd + "\n";
                                _email += "\n  contact # : " + _contact + "\n";
                                _email += "\n  Amount # : " + _NewReceipt.Sir_tot_settle_amt + "\n";
                                _email += "\n  Note : " + _NewReceipt.Sir_remarks + "\n";


                                _email += " \n Thank You, \n ** This is an auto generated mail from Abans infor portal. Please don't Reply ** \n ** Abans IT Department 2012 **";

                                message.To.Add(_info.Mmi_email);
                                message.Subject = "Air Ticket collection";
                                //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                                //message.Bcc.Add(new MailAddress(""));
                                message.IsBodyHtml = false;
                                message.Body = _email;
                                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                                // Send SMTP mail
                                smtpClient.Send(message);
                            }
                        }
                }


                //Send notification SMS to customer - 14-10-2014 - Darshana
                //List<MasterBusinessEntity> _cusdet = new List<MasterBusinessEntity>();
                string _mobilNo = "";
                string _cusName = "";
                string _Newmg = "";
                string _recTp = "";
                decimal _recAmt = 0;
                //_cusdet = _salesDAL.GetActiveCustomerDetailList(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_debtor_cd, null, null, "C");
                //foreach (MasterBusinessEntity _cus in _cusdet)
                //{
                _mobilNo = _NewReceipt.Sir_mob_no;
                _cusName = _NewReceipt.Sir_debtor_name;
                _recAmt = _NewReceipt.Sir_tot_settle_amt;


                if (!string.IsNullOrEmpty(_mobilNo))
                {

                    if (_mobilNo.Length >= 9)
                    {
                        if (_NewReceipt.Sir_receipt_type == "ADVAN")
                        {
                            _recTp = "Advance payment";
                        }
                        else if (_NewReceipt.Sir_receipt_type == "GVISU")
                        {
                            _recTp = "Gift voucher purchase";
                        }
                        else if (_NewReceipt.Sir_receipt_type == "DEBT")
                        {
                            _recTp = "Credit sale settlement";
                        }
                        else if (_NewReceipt.Sir_receipt_type == "VHINS")
                        {
                            _recTp = "Vechicle insuarance";
                        }
                        else if (_NewReceipt.Sir_receipt_type == "VHREG")
                        {
                            _recTp = "Vechicle registration";
                        }
                        else if (_NewReceipt.Sir_receipt_type == "ADINS")
                        {
                            _recTp = "Insuarance";
                        }
                        else if (_NewReceipt.Sir_receipt_type == "ABTCO")
                        {
                            _recTp = "Air tickets";
                        }
                        else
                        {
                            _recTp = "";
                        }

                        if (!string.IsNullOrEmpty(_recTp))
                        {
                            if (_recAmt > 0)
                            {
                                string _pcName = "";
                                DataTable dt = _generalDAL.CheckProfitCenter(_NewReceipt.Sir_com_cd, _NewReceipt.Sir_profit_center_cd);
                                if (dt.Rows.Count > 0)
                                {
                                    _pcName = Convert.ToString(dt.Rows[0]["mpc_desc"]);
                                }

                                _Newmg = "Thank u for the payment of LKR " + _recAmt + " received to the " + _pcName + " for " + _recTp + ",R/N " + _documentNo;// "Thank u for the purchased items on HP A/C: " + _AccountNo + " @ " + _pcName + " S/R. HP value Rs.: " + _HPAccount.Hpa_hp_val + " and " + _smsInsu + " Rs.: " + _insuAmt + "-" + _generalDAL.GetHPCustContactPhoneNo();
                                OutSMS _out = new OutSMS();
                                _out.Msg = _Newmg;
                                _out.Msgstatus = 0;
                                _out.Msgtype = "S";
                                _out.Receivedtime = DateTime.Now;
                                _out.Receiver = "CUSTOMER";
                                //_out.Receiverphno = _info.Mmi_mobi_no;

                                if (_mobilNo.Length == 10)
                                {
                                    _out.Receiverphno = "+94" + _mobilNo.Substring(1, 9);
                                    _out.Senderphno = "+94" + _mobilNo.Substring(1, 9);
                                }
                                if (_mobilNo.Length == 9)
                                {
                                    _out.Receiverphno = "+94" + _mobilNo;
                                    _out.Senderphno = "+94" + _mobilNo;
                                }

                                _out.Refdocno = _documentNo;
                                _out.Sender = _NewReceipt.Sir_create_by;
                                _out.Createtime = DateTime.Now;
                                _generalDAL.SaveSMSOut(_out);
                            }
                        }
                    }
                }
                //}



                //_inventoryDAL.ConnectionClose();
                //_salesDAL.ConnectionClose();
                //_inventoryRepDAL.ConnectionClose();
                //_generalDAL.ConnectionClose();
                //_fmsInventoryDal.ConnectionClose();

                _inventoryDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();
                _generalDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();

                _effects = 1;
                // _generalDAL.ConnectionClose();
            }
            catch (Exception err)
            {
                _effects = -1;
                docno = "ERROR : " + err.Message.ToString();
                //documentNoGRN = documentNo;
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();

            }
            return _effects;

        }


        public RecieptHeader GetReceiptHeader(string _com, string _pc, string _doc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReceiptHeader(_com, _pc, _doc);
        }

        //Chamal 15-08-2012
        public RecieptHeader GetReceiptHeaderByType(string _com, string _pc, string _doc, string _type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReceiptHeaderBaseReceiptType(_com, _pc, _doc, _type);
        }

        public List<RecieptItem> GetReceiptDetails(RecieptItem _paramRecDetails)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReceiptDetails(_paramRecDetails.Sard_receipt_no);
        }

        public List<RecieptItemTBS> GetReceiptDetailsTBS(RecieptItemTBS _paramRecDetails)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReceiptDetailsTBS(_paramRecDetails.Sird_receipt_no);
        }

        public List<ReptPickSerials> GetSerialByBaseDoc(string _com, string _doc)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.Get_TEMP_PICK_SER_BY_BASEDOC(_com, _doc);
        }
        public List<ReptPickSerials> GetSerialByBaseDoc2(string _com, string _doc)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.Get_TEMP_PICK_SER_BY_BASEDOC2(_com, _doc);
        }

        public Int16 UpdateRecStatus(RecieptHeader _UpdateRec)
        {
            Int16 _effects = 0;
            _salesDAL = new SalesDAL();
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.UpdateRecStatus(_UpdateRec.Sar_receipt_no, _UpdateRec.Sar_act, _UpdateRec.Sar_com_cd, _UpdateRec.Sar_profit_center_cd, _UpdateRec.Sar_mod_by);
                _salesDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }

        public Int16 UpdateRecStatusTBS(RecieptHeaderTBS _UpdateRec)
        {
            Int16 _effects = 0;
            _salesDAL = new SalesDAL();
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.UpdateRecStatusTBS(_UpdateRec.Sir_receipt_no, _UpdateRec.Sir_act, _UpdateRec.Sir_com_cd, _UpdateRec.Sir_profit_center_cd, _UpdateRec.Sir_mod_by);
                _salesDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }

        public Int32 Save_HpTransaction(HpTransaction _transaction)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            int result = _salesDAL.Save_HpTransaction(_transaction);
            _salesDAL.ConnectionClose();
            return result;
        }

        #region Higher Purchase

        #region Collection
        //Shani 15-06-2012
        public List<string> GetAllProfCenters(string company)
        {
            _salesDAL = new SalesDAL();

            List<string> pc_names = new List<string>();
            List<MasterProfitCenter> pc_list = _salesDAL.GetAllProfCenters();
            foreach (MasterProfitCenter pc in pc_list)
            {
                if (company == pc.Mpc_com)
                {
                    pc_names.Add(pc.Mpc_cd);
                }

            }
            return pc_names;
        }

        public List<PaymentType> GetPossiblePaymentTypes_new(string _com, string _schnl, string _pc, string txn_tp, DateTime today, Int32 _isBOCN)
        {
            _salesDAL = new SalesDAL();
            List<PaymentType> pc_list = _salesDAL.GetPossiblePaymentTypes_new(_com, "PC", _pc, txn_tp, today, _isBOCN);
            if (pc_list == null)
                pc_list = _salesDAL.GetPossiblePaymentTypes_new(_com, "SCHNL", _schnl, txn_tp, today, _isBOCN);
            //else
            //    pc_list = null;

            return pc_list;

        }

        public List<PaymentType> GetPossiblePaymentTypes(string pc, string txn_tp, DateTime today)
        {
            _salesDAL = new SalesDAL();
            List<PaymentType> pc_list = _salesDAL.GetPossiblePaymentTypes(pc, txn_tp, today);
            return pc_list;

        }

        public List<HpAccount> GetHP_Accounts_Adj(string com, string pc, string seqNo, string status, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            List<HpAccount> ac_list = _salesDAL.GetHP_Accounts_Adj(com, pc, seqNo, status, _date);
            return ac_list;
        }
        public List<HpAccount> GetHP_Accounts(string com, string pc, string seqNo, string status)
        {
            _salesDAL = new SalesDAL();
            List<HpAccount> ac_list = _salesDAL.GetHP_Accounts(com, pc, seqNo, status);
            return ac_list;
        }
      
        public List<string> GetAll_prifixes(string channel, string docTP, Int32 status)
        {
            _salesDAL = new SalesDAL();
            List<string> prefixList = _salesDAL.GetAll_prifixes(channel, docTP, status);
            return prefixList;
        }
        public List<GntManualDocument> Get_valid_Man_ReceiptNo()
        {
            _fmsInventoryDal = new FMS_InventoryDAL();
            List<GntManualDocument> valid_manReceipts = _fmsInventoryDal.Get_valid_Man_ReceiptNo();
            return valid_manReceipts;

        }
        public Decimal Get_AccountBalance(DateTime date, string accNo)
        {
            // _inventoryDAL = new InventoryDAL();
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Decimal bal = _salesDAL.Get_AccountBalance(date, accNo);
            _salesDAL.ConnectionClose();
            return bal;
        }
        public List<TempPickManualDocDet> Get_temp_collection_Man_Receipts(string user, string Loc, string prefix, Int32 receipt_seqno)
        {
            _fmsInventoryDal = new FMS_InventoryDAL();
            List<TempPickManualDocDet> temp_man_receipts = _fmsInventoryDal.Get_temp_collection_Man_Receipts(user, Loc, prefix, receipt_seqno);
            return temp_man_receipts;

        }


        public Decimal Get_MonthlyRental(DateTime date, string accNo)
        {

            // _inventoryDAL = new InventoryDAL();
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Decimal rent = _salesDAL.Get_MonthlyRental(date, accNo);
            _salesDAL.ConnectionClose();
            return rent;
        }
        public Decimal Get_FutureRentals(DateTime date, string accNo)//get the number of future rentals
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Decimal rents = _salesDAL.Get_FutureRentals(date, accNo);
            _salesDAL.ConnectionClose();
            return rents;
        }
        public string saveAll_HP_Collect_Recipts(List<RecieptHeader> receiptHeaderList, List<RecieptItem> receipItemList, List<HpTransaction> transactList, MasterAutoNumber receipAuto, MasterAutoNumber tranxAuto, string loc, Boolean isECDgiven, List<Object> listECD_info, Boolean _isNormalClose)
        {
            //DateTime dt = Convert.ToDateTime(listECD_info[1]).Date;
            string _cusNo1 = "";
            Int32 effect = 0;
            string _mobilNo = "";
            string _cusName = "";
            decimal _totPay = 0;
            decimal _arrears = 0;
            string _recAccNo = "";
            DateTime _recdate = DateTime.Now.Date;
            int _validperiod = 30;
            string _manualRefMob = "";
            Boolean _isMobileRec = false;

            //manual ref number return to mob 2018-10-17 Dulanga

            string _MobmanualRef = "";



            //using (TransactionScope _tr = new TransactionScope())
            // {
            try
            {


                #region Process

                if (receiptHeaderList == null || receipItemList == null || transactList == null)
                {
                    return "";
                }
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _fmsInventoryDal = new FMS_InventoryDAL();
                _fmsInventoryDal.ConnectionOpen();
                _fmsInventoryDal.BeginTransaction();

                _generalDAL = new GeneralDAL();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();

                DataTable dtESD_EPF_WHT = new DataTable();
                dtESD_EPF_WHT = _salesDAL.Get_ESD_EPF_WHT(Convert.ToString(listECD_info[9]), Convert.ToString(listECD_info[10]), Convert.ToDateTime(listECD_info[1]).Date);

                Decimal ESD_rt = 0; Decimal EPF_rt = 0; Decimal WHT_rt = 0;
                if (dtESD_EPF_WHT.Rows.Count > 0)
                {
                    ESD_rt = Convert.ToDecimal(dtESD_EPF_WHT.Rows[0]["MPCH_ESD"]);
                    EPF_rt = Convert.ToDecimal(dtESD_EPF_WHT.Rows[0]["MPCH_EPF"]);
                    WHT_rt = Convert.ToDecimal(dtESD_EPF_WHT.Rows[0]["MPCH_WHT"]);

                }

                //kapila 5/1/2017
                foreach (RecieptHeader _recieptHeaderM in receiptHeaderList)
                {
                    if (_recieptHeaderM.Sar_prefix == "MOB")
                    {
                        _isMobileRec = true;
                        MasterAutoNumber _receiptMob = new MasterAutoNumber();
                        _receiptMob.Aut_cate_cd = _recieptHeaderM.Sar_profit_center_cd;
                        _receiptMob.Aut_cate_tp = "PC";
                        _receiptMob.Aut_direction = 1;
                        _receiptMob.Aut_modify_dt = null;
                        _receiptMob.Aut_moduleid = "MOB";
                        _receiptMob.Aut_number = 0;
                        _receiptMob.Aut_start_char = "MOB";
                        _receiptMob.Aut_year = null;

                        MasterAutoNumber _numberMob = _inventoryDAL.GetAutoNumber(_receiptMob.Aut_moduleid, _receiptMob.Aut_direction, _receiptMob.Aut_start_char, _receiptMob.Aut_cate_tp, _receiptMob.Aut_cate_cd, _receiptMob.Aut_modify_dt, _receiptMob.Aut_year);


                        _manualRefMob = _numberMob.Aut_number.ToString("0000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_receiptMob);//update MST_AUTO table
                        break;
                    }
                }

                foreach (RecieptHeader _recieptHeader in receiptHeaderList)
                {   //create MST_AUTO number for receipt table

                    if (_recieptHeader.Sar_receipt_type == "HPRS")
                    {
                        receipAuto.Aut_start_char = "HPRM";
                    }
                    else { receipAuto.Aut_start_char = "HPRM"; }
                    //------------Insurance-------------------------------------------
                    if (_recieptHeader.Sar_anal_4 == "VHINSR")
                    {
                        receipAuto.Aut_start_char = "VHINSR";
                        _recieptHeader.Sar_receipt_type = "VHINSR";
                    }
                    else if (_recieptHeader.Sar_anal_4 == "INSUR")
                    {
                        receipAuto.Aut_start_char = "INSUR";
                        _recieptHeader.Sar_receipt_type = "INSUR";
                    }
                    _recAccNo = _recieptHeader.Sar_acc_no;    //kapila 6/10/2016

                    //kapila 5/1/2017 - mobile receipt
                    if (_recieptHeader.Sar_prefix == "MOB")
                    {
                        _recieptHeader.Sar_manual_ref_no = _recieptHeader.Sar_profit_center_cd + _manualRefMob;


                    }

                    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(receipAuto.Aut_moduleid, receipAuto.Aut_direction, receipAuto.Aut_start_char, receipAuto.Aut_cate_tp, receipAuto.Aut_cate_cd, receipAuto.Aut_modify_dt, receipAuto.Aut_year);
                    _cusNo1 = receipAuto.Aut_cate_cd + "-" + receipAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(receipAuto);//update MST_AUTO table

                    _recieptHeader.Sar_receipt_no = _cusNo1;

                    Int32 RecieptSeqNo = 0;
                    RecieptSeqNo = _inventoryDAL.GetSerialID(); //will be assign to header after looping transaction list.
                    foreach (HpTransaction tr in transactList)
                    {
                        if (tr.Hpt_ref_no == _recieptHeader.Sar_seq_no.ToString())
                        {
                            tr.Hpt_txn_ref = _recieptHeader.Sar_receipt_no;
                        }
                        // effect = _salesDAL.Save_HpTransaction(tr);
                    }

                    Int32 line = 0;
                    foreach (RecieptItem _itm in receipItemList)
                    {
                        if (_recieptHeader.Sar_seq_no == _itm.Sard_seq_no)//have to check the prefix also?
                        {
                            line++;
                            _itm.Sard_seq_no = RecieptSeqNo;
                            _itm.Sard_line_no = line;
                            _itm.Sard_receipt_no = _recieptHeader.Sar_receipt_no;
                            // effect = _salesDAL.SaveReceiptItem(_itm);//save receipt item
                        }
                    }
                    _recieptHeader.Sar_seq_no = RecieptSeqNo;

                    DataTable _cusDet = new DataTable();
                    _cusDet = _salesDAL.GetHPCustomerDet(_recieptHeader.Sar_com_cd, _recieptHeader.Sar_acc_no);

                    if (_cusDet.Rows.Count > 0)
                    {
                        _recieptHeader.Sar_debtor_cd = _cusDet.Rows[0]["mbe_cd"].ToString();
                        _recieptHeader.Sar_debtor_name = _cusDet.Rows[0]["mbe_name"].ToString();
                        _recieptHeader.Sar_debtor_add_1 = _cusDet.Rows[0]["mbe_add1"].ToString();
                        _recieptHeader.Sar_debtor_add_2 = _cusDet.Rows[0]["mbe_add2"].ToString();
                        _recieptHeader.Sar_mob_no = _cusDet.Rows[0]["mbe_mob"].ToString();
                        _mobilNo = _cusDet.Rows[0]["mbe_mob"].ToString();
                    }

                    //kapila 4/10/2016
                    if (_recieptHeader.Sar_receipt_type == "HPRS" || _recieptHeader.Sar_receipt_type == "HPRM")
                    {
                        if (!string.IsNullOrEmpty(_recieptHeader.Sar_anal_3))
                        {
                            DataTable _loldetail = _salesDAL.GetLoyaltyCardDetail(_recieptHeader.Sar_debtor_cd, _recieptHeader.Sar_anal_3);
                            string _loltype = string.Empty;
                            string _membership = string.Empty;
                            if (_loldetail != null && _loldetail.Rows.Count > 0)
                            {
                                _loltype = _loldetail.Rows[0].Field<string>("salcm_loty_tp");
                                _membership = _loldetail.Rows[0].Field<string>("salcm_cus_spec");
                            }
                            if (_loltype == "MYAB")
                            {
                                List<RecieptItem> _recieptItem = new List<RecieptItem>();
                                RecieptItem _objRc = new RecieptItem();
                                _objRc.Sard_pay_tp = "HPR";
                                _recieptItem.Add(_objRc);
                                HpAccount _ac = _salesDAL.GetHP_Account_onAccNo(_recieptHeader.Sar_acc_no);
                                List<InvoiceItem> _invItmList = _salesDAL.GetInvoiceItems(_ac.Hpa_invc_no);

                                decimal _points = GetLoyaltyPoint_HPRec(_recieptHeader.Sar_tot_settle_amt, _loltype, _membership, _recieptHeader.Sar_com_cd, _recieptHeader.Sar_profit_center_cd, _recieptHeader.Sar_receipt_date, _invItmList, null, _recieptItem, _salesDAL, _inventoryDAL);
                                if (_points > 0)
                                {
                                    _salesDAL.UpdateLoyaltyCardPoint(_recieptHeader.Sar_debtor_cd, _recieptHeader.Sar_anal_3, _points, _recieptHeader.Sar_create_by);
                                    InvoiceLoyalty _lol = new InvoiceLoyalty();
                                    _lol.Stlt_inv_no = Convert.ToString(_recieptHeader.Sar_receipt_no);
                                    _lol.Stlt_pt = _points;
                                    _lol.Stlt_seq_no = _recieptHeader.Sar_seq_no;
                                    _salesDAL.SaveInvoiceLoyalty(_lol);
                                }
                            }
                        }
                    }

                    //if (isECDgiven)
                    //{
                    //    _recieptHeader.Sar_ref_doc=
                    //}
                    _recieptHeader.Sar_esd_rate = ESD_rt;
                    _recieptHeader.Sar_epf_rate = EPF_rt;
                    _recieptHeader.Sar_wht_rate = WHT_rt;
                    _recdate = _recieptHeader.Sar_receipt_date;

                    effect = _salesDAL.SaveReceiptHeader(_recieptHeader);//save receipt header
                    //   _fmsInventoryDal.UpdateManualDocNo(loc,"HPRM", Convert.ToInt32(_recieptHeader.Sar_receipt_no));
                    //   _fmsInventoryDal.UpdateManualDocNo(loc, "HPRS", Convert.ToInt32(_recieptHeader.Sar_receipt_no));
                    // effect = _fmsInventoryDal.UpdateManualDocNo(loc, _recieptHeader.Sar_receipt_type, Convert.ToInt32(_recieptHeader.Sar_manual_ref_no));//do the updation at the gnt_man_doc_dt
                    MasterCompany _masterComp = _generalDAL.GetCompByCode(_recieptHeader.Sar_com_cd);  //kapila 27/4/2016

                    //added dulanga if mob , not update FMS database 2017-7-4
                    if (!_isMobileRec)
                    {

                        if (_masterComp.MC_IS_SCM2_FMS == 1)
                            effect = _inventoryDAL.UpdateManualDocNo(loc, _recieptHeader.Sar_anal_4, Convert.ToInt32(_recieptHeader.Sar_manual_ref_no), _recieptHeader.Sar_receipt_no);//do the updation at the gnt_man_doc_dt
                        else
                            effect = _fmsInventoryDal.UpdateManualDocNo(loc, _recieptHeader.Sar_anal_4, Convert.ToInt32(_recieptHeader.Sar_manual_ref_no), _recieptHeader.Sar_receipt_no);//do the updation at the gnt_man_doc_dt
                    }//end else mob rec

                }
                //save transactons list
                foreach (HpTransaction tr in transactList)
                { // TODO:
                    //create MST_AUTO number for transaction table (for each tx object)
                    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(tranxAuto.Aut_moduleid, tranxAuto.Aut_direction, tranxAuto.Aut_start_char, tranxAuto.Aut_cate_tp, tranxAuto.Aut_cate_cd, tranxAuto.Aut_modify_dt, tranxAuto.Aut_year);
                    string _cusNo = tranxAuto.Aut_cate_cd + "-" + tranxAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(tranxAuto);//update MST_AUTO table

                    if (_isMobileRec)
                    {   //kapila 5/1/2017 //edited dulanga 2017-7-4 added ref number MOB-PC0001 format
                        tr.Hpt_mnl_ref = "MOB-" + tr.Hpt_pc + _manualRefMob;


                        //added dulanga 2018-10-17
                        _MobmanualRef = "MOB-" + tr.Hpt_pc + _manualRefMob;

                    }




                    tr.Hpt_ref_no = _cusNo;
                    //assign auto number to the tx obj.
                    tr.Hpt_seq = _inventoryDAL.GetSerialID();
                    tr.Hpt_acc_no = _recAccNo;  //kapila 6/10/2016
                    _salesDAL.Save_HpTransaction(tr);

                    if (isECDgiven)
                    {
                        //MasterAutoNumber _numberECD = _inventoryDAL.GetAutoNumber(tranxAuto.Aut_moduleid, tranxAuto.Aut_direction, tranxAuto.Aut_start_char, tranxAuto.Aut_cate_tp, tranxAuto.Aut_cate_cd, tranxAuto.Aut_modify_dt, tranxAuto.Aut_year);
                        //string _cusNoECD = tranxAuto.Aut_cate_tp + "-" + tranxAuto.Aut_start_char + "-" + _numberECD.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        //_inventoryDAL.UpdateAutoNumber(tranxAuto);//update MST_AUTO table

                        //tr.Hpt_ref_no = _cusNoECD;
                        ////assign auto number to the tx obj.
                        //tr.Hpt_seq = _inventoryDAL.GetSerialID();

                        //tr.Hpt_txn_tp = "ECD";
                        //tr.Hpt_dbt= Convert.ToDecimal(listECD_info[4]);
                        //_salesDAL.Save_HpTransaction(tr);

                    }
                }

                if (isECDgiven)
                {
                    HpTransaction tr = transactList[0];

                    MasterAutoNumber _numberECD = _inventoryDAL.GetAutoNumber(tranxAuto.Aut_moduleid, tranxAuto.Aut_direction, tranxAuto.Aut_start_char, tranxAuto.Aut_cate_tp, tranxAuto.Aut_cate_cd, tranxAuto.Aut_modify_dt, tranxAuto.Aut_year);
                    string _cusNoECD = tranxAuto.Aut_cate_cd + "-" + tranxAuto.Aut_start_char + "-" + _numberECD.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(tranxAuto);//update MST_AUTO table

                    tr.Hpt_ref_no = _cusNoECD;
                    //assign auto number to the tx obj.
                    tr.Hpt_seq = _inventoryDAL.GetSerialID();

                    tr.Hpt_txn_tp = "ECD";
                    tr.Hpt_desc = "EARLY CLOSING DISCOUNT";
                    tr.Hpt_crdt = Convert.ToDecimal(listECD_info[4]); //ecd value
                    tr.Hpt_dbt = 0; //Convert.ToDecimal(listECD_info[4]); //ecd value
                    _salesDAL.Save_HpTransaction(tr);

                    string _cusNo3 = "";
                    //++++++++++++++++++++++++++++Protection Receipt Save+++++++++++++++++++++++++++++++++++++++++++++++++
                    if (Convert.ToDecimal(listECD_info[11]) > 0)
                    {
                        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(receipAuto.Aut_moduleid, receipAuto.Aut_direction, receipAuto.Aut_start_char, receipAuto.Aut_cate_tp, receipAuto.Aut_cate_cd, receipAuto.Aut_modify_dt, receipAuto.Aut_year);
                        _cusNo3 = receipAuto.Aut_cate_cd + "-" + receipAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(receipAuto);//update MST_AUTO table

                        // _recieptHeader.Sar_receipt_no = _cusNo1;

                        Int32 RecieptSeqNo = 0;
                        RecieptSeqNo = _inventoryDAL.GetSerialID();

                        RecieptHeader ProtectionHeader = new RecieptHeader();//receiptHeaderList[0];
                        ProtectionHeader.Sar_receipt_no = _cusNo3;
                        ProtectionHeader.Sar_receipt_type = "VHINSRR";
                        ProtectionHeader.Sar_com_cd = receiptHeaderList[0].Sar_com_cd;
                        ProtectionHeader.Sar_create_by = receiptHeaderList[0].Sar_create_by;
                        ProtectionHeader.Sar_create_when = receiptHeaderList[0].Sar_create_when;
                        ProtectionHeader.Sar_direct = false;
                        ProtectionHeader.Sar_is_oth_shop = receiptHeaderList[0].Sar_is_oth_shop;
                        ProtectionHeader.Sar_is_used = false;
                        ProtectionHeader.Sar_remarks = "Auto generated when giving ECD";
                        ProtectionHeader.Sar_seq_no = RecieptSeqNo;
                        ProtectionHeader.Sar_session_id = receiptHeaderList[0].Sar_session_id;
                        ProtectionHeader.Sar_tot_settle_amt = Convert.ToDecimal(listECD_info[11]);
                        ProtectionHeader.Sar_profit_center_cd = Convert.ToString(listECD_info[10]);
                        ProtectionHeader.Sar_receipt_date = receiptHeaderList[0].Sar_receipt_date;

                        effect = _salesDAL.SaveReceiptHeader(ProtectionHeader);//save Protection receipt header
                    }

                    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

                }
                //save receipt detali list
                foreach (RecieptItem rec_itm in receipItemList)
                {
                    _salesDAL.SaveReceiptItem(rec_itm);//save receipt item
                    _totPay = _totPay + rec_itm.Sard_settle_amt;
                    if (rec_itm.Sard_pay_tp == "ADVAN")
                    {
                        _salesDAL.UpdateUsedReceiptAmt(receiptHeaderList[0].Sar_com_cd, receiptHeaderList[0].Sar_profit_center_cd, rec_itm.Sard_settle_amt, rec_itm.Sard_pay_tp, rec_itm.Sard_ref_no);
                    }
                    else if (rec_itm.Sard_pay_tp == "CRNOTE")
                    {
                        _salesDAL.UpdateCreditNoteBalance(receiptHeaderList[0].Sar_com_cd, receiptHeaderList[0].Sar_profit_center_cd, rec_itm.Sard_ref_no, rec_itm.Sard_settle_amt);
                    }
                    else if (rec_itm.Sard_pay_tp == "GVO")
                    {
                        _fmsInventoryDal.UpdateRedeemVoucher(receiptHeaderList[0].Sar_com_cd, receiptHeaderList[0].Sar_profit_center_cd, rec_itm.Sard_sim_ser, rec_itm.Sard_ref_no, rec_itm.Sard_cc_tp, rec_itm.Sard_anal_2, receiptHeaderList[0].Sar_create_by, rec_itm.Sard_settle_amt);
                    }

                }

                if (isECDgiven == true)
                {
                    string AccNo = receiptHeaderList[0].Sar_acc_no;
                    string company = receiptHeaderList[0].Sar_com_cd;
                    string pc = receiptHeaderList[0].Sar_profit_center_cd;

                    // _salesDAL.Update_hp_accountStatus(company, pc, AccNo, "C", 1, Convert.ToString(listECD_info[3]), Convert.ToDateTime(listECD_info[1]).Date);//status is changed to 'C' when closing accounts.
                    _salesDAL.Update_hp_accountStatus(company, pc, AccNo, "C", 1, Convert.ToString(listECD_info[3]), Convert.ToDateTime(listECD_info[1]).Date);//status is changed to 'C' when closing accounts.

                    //_salesDAL.UpdateAccountforCashConversion(AccNo, "C", receiptHeaderList[0].Sar_receipt_date);//ADD ON 26-06-2013
                    _salesDAL.UpdateAccLogStatus(company, AccNo, "C", receiptHeaderList[0].Sar_receipt_date, 1);

                    //listECD_info[0] = (string)lblAccNo.Text.Trim();//Account Number
                    //listECD_info[1] = Convert.ToDateTime(txtReceiptDate.Text.Trim()).Date; //Reciept date(HPA_CLS_DT/ HED_USE_DT )
                    //listECD_info[2] = 1;//ECD status (HPA_ECD_STUS )
                    //listECD_info[3] = ECD_type; // ECD Type(HPA_ECD_TP )N - Normal, S - Special, V - Voucher basis, A 
                    //listECD_info[4] = HED_ECD_VAL;// ECD value (discount)
                    //listECD_info[5] = HED_ECD_CLS_VAL; //Collected amount (Tot receipt amt);
                    //listECD_info[6] = HED_VOU_NO; //voucher number (if voucher is given in ecd)

                    if (Convert.ToString(listECD_info[3]) == "V")
                    {
                        //do updations in HPR_ECD_DEFN table
                        //        Update_hp_Voucher_Status(string com, string pc, string accountNo, string voucherNo, Decimal ECDvalue, Decimal collectAmount , DateTime date_)
                        _salesDAL.Update_hp_Voucher_Status(company, pc, AccNo, Convert.ToString(listECD_info[6]), Convert.ToDecimal(listECD_info[4]), Convert.ToDecimal(listECD_info[5]), Convert.ToDateTime(listECD_info[1]).Date);
                    }
                    else if (Convert.ToString(listECD_info[3]) == "A")
                    {
                        RequestApprovalHeader _rapphdr = new RequestApprovalHeader();
                        foreach (RecieptHeader _hdr in receiptHeaderList)
                        {
                            _rapphdr.Grah_com = company;
                            _rapphdr.Grah_loc = pc;
                            _rapphdr.Grah_fuc_cd = AccNo;
                            _rapphdr.Grah_ref = Convert.ToString(listECD_info[7]);
                            _rapphdr.Grah_app_stus = "F";
                            _rapphdr.Grah_app_lvl = -1;
                            _rapphdr.Grah_app_by = Convert.ToString(listECD_info[8]);
                            break;
                        }

                        _generalDAL.UpdateMidApprovalStatus(_rapphdr);

                    }


                    //TODO: UPDATE ACCOUNT LOG TABLE - CLOSING DATE

                }

                if (_isNormalClose == true)
                {
                    string clsAccNo = receiptHeaderList[0].Sar_acc_no;
                    string clscompany = receiptHeaderList[0].Sar_com_cd;
                    string clspc = receiptHeaderList[0].Sar_profit_center_cd;
                    DateTime clsDt = receiptHeaderList[0].Sar_receipt_date;

                    _salesDAL.Update_hp_accountStatus(clscompany, clspc, clsAccNo, "T", 3, null, clsDt.Date);//status is changed to 'C' when closing accounts.

                    //_salesDAL.UpdateAccountforCashConversion(clsAccNo, "C", clsDt);
                    _salesDAL.UpdateAccLogStatus(clscompany, clsAccNo, "T", clsDt.Date, 1);
                }


                //Notification SMS______________15-10-2014 Darshana
                ///List<MasterBusinessEntity> _cusdet = new List<MasterBusinessEntity>();

                //_cusdet = _salesDAL.GetCustomerDetailList(_InvHeader.Sah_com, _AccCus.Htc_cust_cd, null, null, "C");
                //Edit By Chamal 10/04/2014 (Disscuss with Dar)
                //_cusdet = _salesDAL.GetActiveCustomerDetailList(receiptHeaderList[0].Sar_com_cd, receiptHeaderList[0].Sar_debtor_cd, null, null, "C");

                if (receiptHeaderList[0].Sar_receipt_type == "HPRS" && receiptHeaderList[0].Sar_is_mgr_iss == false)
                {
                    if (!string.IsNullOrEmpty(_mobilNo))
                    {
                        if (_mobilNo.Length >= 9)
                        {
                            string _pcName = "";
                            string _chanl = "";
                            string _comdes = "";
                            DataTable dt = _generalDAL.CheckProfitCenter(receiptHeaderList[0].Sar_com_cd, receiptHeaderList[0].Sar_profit_center_cd);
                            if (dt.Rows.Count > 0)
                            {
                                _pcName = Convert.ToString(dt.Rows[0]["mpc_desc"]);
                                _chanl = Convert.ToString(dt.Rows[0]["mpc_chnl"]);

                            }
                            DataTable _defaultParameters = new DataTable();
                            _defaultParameters = _generalDAL.GetSysParaDetails(receiptHeaderList[0].Sar_com_cd, _chanl, "HPCOL");


                            string _pnno = string.Empty;
                            if (_defaultParameters.Rows.Count > 0)
                            {

                                _pnno = _defaultParameters.Rows[0]["msp_rest_desc"] == DBNull.Value ? string.Empty : _defaultParameters.Rows[0]["msp_rest_desc"].ToString();

                            }
                            DataTable mst_com = _generalDAL.GetCompanyByCode(receiptHeaderList[0].Sar_com_cd);
                            if (mst_com.Rows.Count > 0)
                            {
                                _comdes = mst_com.Rows[0]["mc_desc"] == DBNull.Value ? string.Empty : mst_com.Rows[0]["mc_desc"].ToString();

                            }

                            string _mg1 = "";
                            //thank u for buying [product] on Hire purchase [loc] S/R on [date]  (A/c [accNo]).Tot value [total] & diriya [diriya]-[com]-0112565293
                            //string _mg = "Thank you for the payment of LKR " + _totPay + " received to the " + _pcName + " on " + receiptHeaderList[0].Sar_acc_no + " account,R/N " + receiptHeaderList[0].Sar_manual_ref_no;// "Thank u for the purchased items on HP A/C: " + _AccountNo + " @ " + _pcName + " S/R. HP value Rs.: " + _HPAccount.Hpa_hp_val + " and " + _smsInsu + " Rs.: " + _insuAmt + "-" + _generalDAL.GetHPCustContactPhoneNo();


                            //For RC 1 / RC 4 & Mobile Customers,
                            string _mg = "Dear Customer, Thank you for your payment of Rs. " + _totPay + "/- made on " + receiptHeaderList[0].Sar_receipt_date.Date.ToString("dd/MM/yyyy") + " for HP A/C No-" + receiptHeaderList[0].Sar_acc_no + " (" + _pcName + " )" + _comdes + " " + _pnno;
                            //For RC 2 & Auto Customers,,

                            OutSMS _out = new OutSMS();
                            _out.Msg = _mg;
                            _out.Msgstatus = 0;
                            _out.Msgtype = "S";
                            _out.Receivedtime = DateTime.Now;
                            _out.Receiver = "CUSTOMER";
                            //_out.Receiverphno = _info.Mmi_mobi_no;

                            if (_mobilNo.Length == 10)
                            {
                                _out.Receiverphno = "+94" + _mobilNo.Substring(1, 9);
                                _out.Senderphno = "+94" + _mobilNo.Substring(1, 9);
                            }
                            if (_mobilNo.Length == 9)
                            {
                                _out.Receiverphno = "+94" + _mobilNo;
                                _out.Senderphno = "+94" + _mobilNo;
                            }

                            _out.Refdocno = receiptHeaderList[0].Sar_acc_no;
                            _out.Sender = receiptHeaderList[0].Sar_create_by;
                            _out.Createtime = DateTime.Now;
                            _generalDAL.SaveSMSOut(_out);
                        }
                    }
                }

                #region Generate Voucher at given rental and send SMS :: Sanjeewa 2016-06-02 :: Modified to check account closed status 2016-09-20
                DataTable _accGenRent = _salesDAL.check_Voucher_Creation_Rental(receiptHeaderList[0].Sar_acc_no);

                if (_accGenRent.Rows.Count > 0)
                {
                    foreach (DataRow drow in _accGenRent.Rows)
                    {
                        List<InvoiceVoucher> _voucher = new List<InvoiceVoucher>();
                        List<InvoiceHeader> _InvHeader1 = _salesDAL.getInvoiceHeaderbyAcc(receiptHeaderList[0].Sar_acc_no);

                        foreach (InvoiceHeader _InvHeader in _InvHeader1)
                        {
                            HpSystemParameters _SystemPara = new HpSystemParameters();
                            _SystemPara = _salesDAL.GetSystemParameter("COM", _InvHeader.Sah_com, "1RENTFREE", _recdate.Date);

                            if (_SystemPara == null)
                            {
                                _validperiod = Convert.ToInt16(_SystemPara.Hsy_val);
                            }

                            InvoiceVoucher _vou = new InvoiceVoucher();
                            GiftVoucherPages _gvou = new GiftVoucherPages();
                            //DataTable _result = _generalDAL.GetProVoutype(_InvHeader.Sah_com, drow["hap_cd"].ToString());

                            MasterBusinessEntity _businessCompany = new MasterBusinessEntity();
                            _businessCompany = _salesDAL.GetActiveBusinessCompanyDetail(_InvHeader.Sah_com, _InvHeader.Sah_cus_cd, null, null, "C");

                            _vou.Stvo_inv_no = _InvHeader.Sah_inv_no;
                            _vou.Stvo_prefix = drow["hap_cd"].ToString();
                            _vou.Stvo_bookno = 1;
                            _vou.Stvo_pageno = Convert.ToInt32(drow["hpa_seq_no"]);
                            _vou.Stvo_gv_itm = drow["hap_cd"].ToString();
                            _vou.Stvo_price = Convert.ToDecimal(drow["rental"]);
                            _vou.Stvo_itm_cd = "";
                            _vou.Stvo_cre_by = "PRO_VOU";
                            _vou.Stvo_stus = 0;
                            _gvou.Gvp_gv_tp = "VALUE";
                            _gvou.Gvp_amt = Convert.ToDecimal(drow["rental"]);
                            _gvou.Gvp_app_by = _InvHeader.Sah_cre_by;
                            _gvou.Gvp_bal_amt = Convert.ToDecimal(drow["rental"]);
                            _gvou.Gvp_book = 1;
                            _gvou.Gvp_can_by = "";
                            _gvou.Gvp_can_dt = _recdate.Date;// DateTime.Now.Date;
                            _gvou.Gvp_com = _InvHeader.Sah_com;
                            _gvou.Gvp_cre_by = _InvHeader.Sah_cre_by;
                            _gvou.Gvp_cre_dt = DateTime.Now.Date;
                            _gvou.Gvp_cus_add1 = _InvHeader.Sah_cus_add1;
                            _gvou.Gvp_cus_add2 = _InvHeader.Sah_cus_add2;
                            _gvou.Gvp_cus_cd = _InvHeader.Sah_cus_cd;
                            _gvou.Gvp_cus_mob = _businessCompany.Mbe_mob;
                            _gvou.Gvp_cus_name = _InvHeader.Sah_cus_name;
                            _gvou.Gvp_from = "-";
                            _gvou.Gvp_gv_cd = drow["hap_cd"].ToString();
                            _gvou.Gvp_gv_prefix = "GV";
                            _gvou.Gvp_is_allow_promo = true;
                            _gvou.Gvp_issu_itm = 0;
                            _gvou.Gvp_issue_by = "";
                            _gvou.Gvp_issue_dt = _recdate.Date;
                            _gvou.Gvp_line = 1;
                            _gvou.Gvp_mod_by = "";
                            _gvou.Gvp_mod_dt = DateTime.Now.Date;
                            _gvou.Gvp_noof_itm = 0;
                            _gvou.Gvp_oth_ref = _InvHeader.Sah_inv_no;// _proitm.Spd_circular_no;
                            _gvou.Gvp_page = _vou.Stvo_pageno;
                            _gvou.Gvp_pc = _InvHeader.Sah_pc;
                            _gvou.Gvp_ref = drow["hap_cd"].ToString();
                            _gvou.Gvp_stus = "A";
                            _gvou.Gvp_valid_from = _recdate.Date;
                            //_gvou.Gvp_valid_to = _InvHeader.Sah_dt.Date.AddMonths(_proitm.Spd_period);
                            _gvou.Gvp_valid_to = _recdate.Date.AddDays(_validperiod); //Chamal 24-09-2014
                            _gvou.Gvp_cus_nic = _businessCompany.Mbe_nic;

                            _voucher.Add(_vou);
                            _fmsInventoryDal.SaveGiftVoucherPages(_gvou);


                            if (_voucher != null)
                            {
                                if (_voucher.Count > 0)
                                {
                                    string _mobNo = "";
                                    string _cusNe = "";
                                    var _vouProCodes = _voucher.Where(x => x.Stvo_cre_by == "PRO_VOU").Select(x => x.Stvo_prefix).Distinct().ToList();
                                    if (_vouProCodes != null && _vouProCodes.Count > 0)
                                    {
                                        foreach (var _cd in _vouProCodes)
                                        {
                                            DataTable _result = _generalDAL.GetProVoutype(_InvHeader.Sah_com, _cd);

                                            if (_result != null || _result.Rows.Count > 0)
                                            {
                                                //updated by akila 2017/11/13
                                                int _smsAlert = 0;
                                                int.TryParse(_result.Rows[0]["spt_sms_alert"].ToString(), out _smsAlert);

                                                //if (Convert.ToInt32(_result.Rows[0]["spt_sms_alert"].ToString()) == 1)
                                                if (_smsAlert == 1)
                                                {
                                                    if (!string.IsNullOrEmpty(_result.Rows[0]["spt_cus_pur_sms"].ToString()))
                                                    {
                                                        List<MasterBusinessEntity> _cusdet1 = new List<MasterBusinessEntity>();
                                                        _cusdet1 = _salesDAL.GetActiveCustomerDetailList(_InvHeader.Sah_com, _InvHeader.Sah_cus_cd, null, null, "C");
                                                        foreach (MasterBusinessEntity newcus in _cusdet1)
                                                        {
                                                            _mobNo = newcus.Mbe_mob;
                                                            _cusNe = newcus.Mbe_name;
                                                        }

                                                        if (!string.IsNullOrEmpty(_mobNo))
                                                        {
                                                            if (_mobNo.Length >= 9)
                                                            {
                                                                string _mg = "";
                                                                string _mg1 = "";
                                                                if (_InvHeader.Sah_com == "ABL" || _InvHeader.Sah_com == "LRP")
                                                                {
                                                                    _mg = "You are awarded a gift voucher from Abans. Voucher #:" + Convert.ToInt32(drow["hpa_seq_no"]) + ", Amount :Rs." + Convert.ToDecimal(drow["rental"]).ToString("#,###.00") + ". Voucher valid till " + _gvou.Gvp_valid_to.ToShortDateString() + ". T&C Applied.";
                                                                    _mg1 = "You are awarded a gift voucher from Abans. Voucher # sent to mobile #:" + _mobNo + ". Voucher valid till " + _gvou.Gvp_valid_to.ToShortDateString() + ". T&C Applied.";
                                                                }
                                                                else if (_InvHeader.Sah_com == "SGL" || _InvHeader.Sah_com == "SGD")
                                                                {
                                                                    _mg = "You are awarded a gift voucher from Singhagiri. Voucher #:" + Convert.ToInt32(drow["hpa_seq_no"]) + ", Amount :Rs." + Convert.ToDecimal(drow["rental"]).ToString("#,###.00") + ". Voucher valid till " + _gvou.Gvp_valid_to.ToShortDateString() + ". T&C Applied.";
                                                                    _mg1 = "You are awarded a gift voucher from Singhagiri. Voucher # sent to mobile #:" + _mobNo + ". Voucher valid till " + _gvou.Gvp_valid_to.ToShortDateString() + ". T&C Applied.";
                                                                }
                                                                else
                                                                {
                                                                    _mg = "You are awarded a gift voucher. Voucher #:" + Convert.ToInt32(drow["hpa_seq_no"]) + ", Amount :Rs." + Convert.ToDecimal(drow["rental"]).ToString("#,###.00") + ". Voucher valid till " + _gvou.Gvp_valid_to.ToShortDateString() + ". T&C Applied.";
                                                                    _mg1 = "You are awarded a gift voucher. Voucher # sent to mobile #:" + _mobNo + ". Voucher valid till " + _gvou.Gvp_valid_to.ToShortDateString() + ". T&C Applied.";
                                                                }
                                                                OutSMS _out = new OutSMS();
                                                                _out.Msg = _mg;
                                                                _out.Msgstatus = 0;
                                                                _out.Msgtype = "S";
                                                                _out.Receivedtime = DateTime.Now;
                                                                _out.Receiver = "CUSTOMER";
                                                                //_out.Receiverphno = _info.Mmi_mobi_no;

                                                                if (_mobNo.Length == 10)
                                                                {
                                                                    _out.Receiverphno = "+94" + _mobNo.Substring(1, 9);
                                                                    _out.Senderphno = "+94" + _mobNo.Substring(1, 9);
                                                                }
                                                                if (_mobNo.Length == 9)
                                                                {
                                                                    _out.Receiverphno = "+94" + _mobNo;
                                                                    _out.Senderphno = "+94" + _mobNo;
                                                                }

                                                                _out.Refdocno = _InvHeader.Sah_inv_no;
                                                                _out.Sender = _InvHeader.Sah_cre_by;
                                                                _out.Createtime = DateTime.Now;
                                                                _generalDAL.SaveSMSOut(_out);
                                                                _salesDAL.UpdateReceiptSMS(_cusNo1, _mg1);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        _salesDAL.UpdateAccountAsVouGenerated(receiptHeaderList[0].Sar_acc_no);
                    }

                }
                #endregion


                //kapila 8/4/2015  send email to other shop collection
                if (receiptHeaderList[0].Sar_is_oth_shop == true)
                {
                    string _emailAddr = string.Empty;
                    string _mpc_desc = "";
                    MasterProfitCenter _masterPC = new MasterProfitCenter();
                    _masterPC = _generalDAL.GetPCByPCCode(receiptHeaderList[0].Sar_com_cd, receiptHeaderList[0].Sar_oth_sr);
                    if (_masterPC != null)
                        _emailAddr = _masterPC.Mpc_email;
                    else
                        _emailAddr = "";

                    string pattern = @"^[a-z][a-z|0-9|]*([_][a-z|0-9]+)*([.][a-z|0-9]+([_][a-z|0-9]+)*)?@[a-z][a-z|0-9|]*\.([a-z][a-z|0-9]*(\.[a-z][a-z|0-9]*)?)$";
                    System.Text.RegularExpressions.Match match = Regex.Match(_emailAddr.Trim(), pattern, RegexOptions.IgnoreCase);

                    if (match.Success)
                    {
                        SmtpClient smtpClient = new SmtpClient();
                        MailMessage message = new MailMessage();

                        MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                        smtpClient.Host = _generalDAL.GetMailHost();
                        smtpClient.Port = 25;
                        message.From = fromAddress;

                        string _email = "";

                        MasterProfitCenter _masterPC1 = new MasterProfitCenter();
                        _masterPC1 = _generalDAL.GetPCByPCCode(receiptHeaderList[0].Sar_com_cd, receiptHeaderList[0].Sar_profit_center_cd);
                        if (_masterPC1 != null)
                            _mpc_desc = _masterPC1.Mpc_desc;

                        _email = "Dear Manager, \n\n" + _email;
                        _email += "Other Shop Collection received from the profit center :" + receiptHeaderList[0].Sar_profit_center_cd + " - " + _mpc_desc + " \n";
                        _email += "\n  Receipt # : " + receiptHeaderList[0].Sar_prefix + "-" + receiptHeaderList[0].Sar_manual_ref_no + "\n";
                        _email += "\n  Account No : " + receiptHeaderList[0].Sar_acc_no + "\n";
                        _email += "\n  Customer : " + receiptHeaderList[0].Sar_debtor_name + "\n";
                        _email += "\n  Address : " + receiptHeaderList[0].Sar_debtor_add_1 + "\n";
                        _email += "\n  Amount # : " + receiptHeaderList[0].Sar_tot_settle_amt + "\n";
                        _email += "\n  Note : " + receiptHeaderList[0].Sar_remarks + "\n";


                        _email += " \n Thank You, \n ** This is an auto generated mail from Abans infor portal. Please don't Reply ** \n ** Abans IT Department 2012 **";

                        message.To.Add(_emailAddr);
                        message.Subject = "Other Shop Collection";
                        //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                        //message.Bcc.Add(new MailAddress(""));
                        message.IsBodyHtml = false;
                        message.Body = _email;
                        message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                        // Send SMTP mail
                        smtpClient.Send(message);
                    }

                }


                // _inventoryDAL.ConnectionClose();

                // _salesDAL.ConnectionClose();

                //_fmsInventoryDal.ConnectionClose();
                _inventoryDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();
                _generalDAL.TransactionCommit();

                //_tr.Complete();
                #endregion
            }//end of try block
            catch (Exception ex)
            {
                effect = -1;
                _cusNo1 = "-1";
                if (ex.Message.Contains("Mailbox unavailable. The server response was: 5.7.1 Unable to relay"))
                {
                    effect = -2;
                    _cusNo1 = "-2";

                    // MessageBox.Show("There is no free stock balance available." + "\n" + "Please check the stock balances.", "No Free Location Balance", MessageBoxButtons.OK, MessageBoxIcon.Warning); this.Cursor = Cursors.Default; CHNLSVC.CloseChannel(); return;
                }
                // effect = -1;

                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                _generalDAL.TransactionRollback();
            }
            finally
            {
                //_inventoryDAL.ConnectionClose();
                //_salesDAL.ConnectionClose();
                //_fmsInventoryDal.ConnectionClose();
            }


            // }//end of Transaction
            if (_isMobileRec == true)
            {
                return _MobmanualRef;
            }
            else
            {
                return _cusNo1;
            }
        }

        public int generate_Voucher(string in_acc)
        {
            int i = 0;
            #region Generate Voucher at given rental and send SMS :: Sanjeewa 2016-06-02 :: Modified to check account closed status 2016-09-20
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            _fmsInventoryDal = new FMS_InventoryDAL();
            _fmsInventoryDal.ConnectionOpen();
            _generalDAL = new GeneralDAL();
            _generalDAL.ConnectionOpen();
            DataTable _accGenRent = _salesDAL.check_Voucher_Creation_Rental(in_acc);

            if (_accGenRent.Rows.Count > 0)
            {
                foreach (DataRow drow in _accGenRent.Rows)
                {
                    List<InvoiceVoucher> _voucher = new List<InvoiceVoucher>();
                    List<InvoiceHeader> _InvHeader1 = _salesDAL.getInvoiceHeaderbyAcc(in_acc);

                    foreach (InvoiceHeader _InvHeader in _InvHeader1)
                    {
                        InvoiceVoucher _vou = new InvoiceVoucher();
                        GiftVoucherPages _gvou = new GiftVoucherPages();
                        //DataTable _result = _generalDAL.GetProVoutype(_InvHeader.Sah_com, drow["hap_cd"].ToString());

                        MasterBusinessEntity _businessCompany = new MasterBusinessEntity();
                        _businessCompany = _salesDAL.GetActiveBusinessCompanyDetail(_InvHeader.Sah_com, _InvHeader.Sah_cus_cd, null, null, "C");

                        _vou.Stvo_inv_no = _InvHeader.Sah_inv_no;
                        _vou.Stvo_prefix = drow["hap_cd"].ToString();
                        _vou.Stvo_bookno = 1;
                        _vou.Stvo_pageno = Convert.ToInt32(drow["hpa_seq_no"]);
                        _vou.Stvo_gv_itm = drow["hap_cd"].ToString();
                        _vou.Stvo_price = Convert.ToDecimal(drow["rental"]);
                        _vou.Stvo_itm_cd = "";
                        _vou.Stvo_cre_by = "PRO_VOU";
                        _vou.Stvo_stus = 0;
                        _gvou.Gvp_gv_tp = "VALUE";
                        _gvou.Gvp_amt = Convert.ToDecimal(drow["rental"]);
                        _gvou.Gvp_app_by = _InvHeader.Sah_cre_by;
                        _gvou.Gvp_bal_amt = Convert.ToDecimal(drow["rental"]);
                        _gvou.Gvp_book = 1;
                        _gvou.Gvp_can_by = "";
                        _gvou.Gvp_can_dt = DateTime.Now.Date;
                        _gvou.Gvp_com = _InvHeader.Sah_com;
                        _gvou.Gvp_cre_by = _InvHeader.Sah_cre_by;
                        _gvou.Gvp_cre_dt = DateTime.Now.Date;
                        _gvou.Gvp_cus_add1 = _InvHeader.Sah_cus_add1;
                        _gvou.Gvp_cus_add2 = _InvHeader.Sah_cus_add2;
                        _gvou.Gvp_cus_cd = _InvHeader.Sah_cus_cd;
                        _gvou.Gvp_cus_mob = _businessCompany.Mbe_mob;
                        _gvou.Gvp_cus_name = _InvHeader.Sah_cus_name;
                        _gvou.Gvp_from = "-";
                        _gvou.Gvp_gv_cd = drow["hap_cd"].ToString();
                        _gvou.Gvp_gv_prefix = "GV";
                        _gvou.Gvp_is_allow_promo = true;
                        _gvou.Gvp_issu_itm = 0;
                        _gvou.Gvp_issue_by = "";
                        _gvou.Gvp_issue_dt = DateTime.Now.Date;
                        _gvou.Gvp_line = 1;
                        _gvou.Gvp_mod_by = "";
                        _gvou.Gvp_mod_dt = DateTime.Now.Date;
                        _gvou.Gvp_noof_itm = 0;
                        _gvou.Gvp_oth_ref = _InvHeader.Sah_inv_no;// _proitm.Spd_circular_no;
                        _gvou.Gvp_page = _vou.Stvo_pageno;
                        _gvou.Gvp_pc = _InvHeader.Sah_pc;
                        _gvou.Gvp_ref = drow["hap_cd"].ToString();
                        _gvou.Gvp_stus = "A";
                        _gvou.Gvp_valid_from = DateTime.Now.Date;
                        //_gvou.Gvp_valid_to = _InvHeader.Sah_dt.Date.AddMonths(_proitm.Spd_period);
                        _gvou.Gvp_valid_to = _InvHeader.Sah_dt.Date.AddDays(30); //Chamal 24-09-2014
                        _gvou.Gvp_cus_nic = _businessCompany.Mbe_nic;

                        _voucher.Add(_vou);
                        _fmsInventoryDal.SaveGiftVoucherPages(_gvou);


                        if (_voucher != null)
                        {
                            if (_voucher.Count > 0)
                            {
                                string _mobNo = "";
                                string _cusNe = "";
                                var _vouProCodes = _voucher.Where(x => x.Stvo_cre_by == "PRO_VOU").Select(x => x.Stvo_prefix).Distinct().ToList();
                                if (_vouProCodes != null && _vouProCodes.Count > 0)
                                {
                                    foreach (var _cd in _vouProCodes)
                                    {
                                        DataTable _result = _generalDAL.GetProVoutype(_InvHeader.Sah_com, _cd);

                                        if (_result != null || _result.Rows.Count > 0)
                                        {
                                            //updated by akila 2017/11/13
                                            int _smsAlert = 0;
                                            int.TryParse(_result.Rows[0]["spt_sms_alert"].ToString(), out _smsAlert);

                                            //if (Convert.ToInt32(_result.Rows[0]["spt_sms_alert"].ToString()) == 1)
                                            if (_smsAlert == 1)
                                            {
                                                if (!string.IsNullOrEmpty(_result.Rows[0]["spt_cus_pur_sms"].ToString()))
                                                {
                                                    List<MasterBusinessEntity> _cusdet1 = new List<MasterBusinessEntity>();
                                                    _cusdet1 = _salesDAL.GetActiveCustomerDetailList(_InvHeader.Sah_com, _InvHeader.Sah_cus_cd, null, null, "C");
                                                    foreach (MasterBusinessEntity newcus in _cusdet1)
                                                    {
                                                        _mobNo = newcus.Mbe_mob;
                                                        _cusNe = newcus.Mbe_name;
                                                    }

                                                    if (!string.IsNullOrEmpty(_mobNo))
                                                    {
                                                        if (_mobNo.Length >= 9)
                                                        {
                                                            string _mg = "You are awarded a gift voucher from Abans. Voucher #:" + Convert.ToInt32(drow["hpa_seq_no"]) + ", Amount :Rs." + Convert.ToDecimal(drow["rental"]).ToString("#,###.00") + ". Valid Period 30 Days. T&C Apply. You can use this voucher for your next purchase.";
                                                            OutSMS _out = new OutSMS();
                                                            _out.Msg = _mg;
                                                            _out.Msgstatus = 0;
                                                            _out.Msgtype = "S";
                                                            _out.Receivedtime = DateTime.Now;
                                                            _out.Receiver = "CUSTOMER";
                                                            //_out.Receiverphno = _info.Mmi_mobi_no;

                                                            if (_mobNo.Length == 10)
                                                            {
                                                                _out.Receiverphno = "+94" + _mobNo.Substring(1, 9);
                                                                _out.Senderphno = "+94" + _mobNo.Substring(1, 9);
                                                            }
                                                            if (_mobNo.Length == 9)
                                                            {
                                                                _out.Receiverphno = "+94" + _mobNo;
                                                                _out.Senderphno = "+94" + _mobNo;
                                                            }

                                                            _out.Refdocno = _InvHeader.Sah_inv_no;
                                                            _out.Sender = _InvHeader.Sah_cre_by;
                                                            _out.Createtime = DateTime.Now;
                                                            _generalDAL.SaveSMSOut(_out);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    _salesDAL.UpdateAccountAsVouGenerated(in_acc);
                }

            }
            #endregion

            _generalDAL.ConnectionClose();
            _salesDAL.ConnectionClose();
            _fmsInventoryDal.ConnectionClose();
            return i;

        }

        public RecieptHeader Get_ReceiptHeader(string prefix, string seqNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_ReceiptHeader(prefix, seqNo);
        }
        public List<RecieptHeader> Get_ReceiptHeaderList(string prefix, string seqNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_ReceiptHeaderList(prefix, seqNo);
        }
        public List<RecieptHeader> Get_ReceiptHeaderListALL(string _parm, string _type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_ReceiptHeaderListALL(_parm, _type);
        }

        public DataTable Get_ReceiptHeaderTableALL(string _parm, string _type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_ReceiptHeaderTableALL(_parm, _type);
        }

        public DataTable Get_hpAcc_TransactionDet(string AccountNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_hpAcc_TransactionDet(AccountNo);//gets data for UserControl
        }
        public Decimal Get_TotFutureRentalValue(DateTime firstDateOfNextMonth, string accNo)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Decimal rents = _salesDAL.Get_TotFutureRentalValue(firstDateOfNextMonth, accNo);
            _salesDAL.ConnectionClose();
            return rents;

        }
        public DataTable Get_hpHierachy(string pc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_hpHierachy(pc);
        }

        public DataTable Get_ECD(string ecdTp, DateTime date, string scheme, string partyTP, string partyCD, Decimal futureRentals, string AccNo, Int32 IsReduce)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_ECD(ecdTp, date, scheme, partyTP, partyCD, futureRentals, AccNo, IsReduce);
        }
        public HpAccount GetHP_Account_onAccNo(string AccountNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHP_Account_onAccNo(AccountNo);
        }

        public Int32 Edit_HP_Collect_Recipt(List<RecieptHeader> receiptHeaderList, List<RecieptItem> receipItemList, List<HpTransaction> transactList, MasterAutoNumber tranxAuto)
        {
            Int32 effect = 0;
            //using (TransactionScope _tr = new TransactionScope())
            //{
            try
            {
                #region Process

                if (receiptHeaderList == null || receipItemList == null || transactList == null)
                {
                    return -1;
                }
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _fmsInventoryDal = new FMS_InventoryDAL();
                _fmsInventoryDal.ConnectionOpen();
                _fmsInventoryDal.BeginTransaction();

                foreach (RecieptHeader _recieptHeader in receiptHeaderList)
                {    //delete rows from Receipt Detail table
                    if (receipItemList != null)
                    {
                        if (receipItemList.Count > 0)
                        {
                            effect = _salesDAL.Delete_HpReceiptDet(_recieptHeader.Sar_receipt_no, _recieptHeader.Sar_com_cd, _recieptHeader.Sar_profit_center_cd);
                        }
                    }


                    //delete from transaction table
                    //  effect=  _salesDAL.Delete_hpTransactions(_recieptHeader.Sar_receipt_no, _recieptHeader.Sar_com_cd, _recieptHeader.Sar_profit_center_cd);


                    foreach (HpTransaction tr in transactList)
                    {
                        if (tr.Hpt_ref_no == _recieptHeader.Sar_seq_no.ToString())
                        {
                            tr.Hpt_crdt = _recieptHeader.Sar_tot_settle_amt;
                            tr.Hpt_txn_ref = _recieptHeader.Sar_receipt_no;
                            tr.Hpt_pc = _recieptHeader.Sar_profit_center_cd;
                            tr.Hpt_txn_dt = _recieptHeader.Sar_receipt_date;
                            tr.Hpt_acc_no = _recieptHeader.Sar_acc_no;

                            _salesDAL.UpdateHp_Transaction(tr);

                        }
                        // effect = _salesDAL.Save_HpTransaction(tr);
                    }

                    Int32 line = 0;
                    foreach (RecieptItem _itm in receipItemList)
                    {
                        if (_recieptHeader.Sar_seq_no == _itm.Sard_seq_no)//have to check the prefix also?
                        {
                            line++;
                            //_itm.Sard_seq_no = RecieptSeqNo;
                            _itm.Sard_seq_no = _recieptHeader.Sar_seq_no;
                            _itm.Sard_line_no = line;
                            _itm.Sard_receipt_no = _recieptHeader.Sar_receipt_no;
                            // effect = _salesDAL.SaveReceiptItem(_itm);//save receipt item
                        }
                    }
                    // _recieptHeader.Sar_seq_no = RecieptSeqNo;

                    //  effect = _salesDAL.SaveReceiptHeader(_recieptHeader);//save receipt header
                    effect = _salesDAL.UpdateHpReceipt(_recieptHeader.Sar_receipt_no, _recieptHeader.Sar_tot_settle_amt, _recieptHeader.Sar_com_cd, _recieptHeader.Sar_profit_center_cd, _recieptHeader);//update receipt header

                    //  }
                    //  ////save transactons list
                    //  //foreach (HpTransaction tr in transactList)
                    //  //{ // TODO:
                    //  //    //create MST_AUTO number for transaction table (for each tx object)
                    //  //    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(tranxAuto.Aut_moduleid, tranxAuto.Aut_direction, tranxAuto.Aut_start_char, tranxAuto.Aut_cate_tp, tranxAuto.Aut_cate_cd, tranxAuto.Aut_modify_dt, tranxAuto.Aut_year);
                    //  //    string _cusNo = tranxAuto.Aut_cate_tp + "-" + tranxAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    //  //    _inventoryDAL.UpdateAutoNumber(tranxAuto);//update MST_AUTO table

                    //  //    tr.Hpt_ref_no = _cusNo;
                    //  //    //assign auto number to the tx obj.

                    ////  effect = _salesDAL.SaveReceiptHeader(_recieptHeader);//save receipt header
                    //  effect = _salesDAL.UpdateHpReceipt(_recieptHeader.Sar_receipt_no, _recieptHeader.Sar_tot_settle_amt, _recieptHeader.Sar_com_cd, _recieptHeader.Sar_profit_center_cd, _recieptHeader);//update receipt header

                }
                ////save transactons list
                //foreach (HpTransaction tr in transactList)
                //{ // TODO:
                //    //create MST_AUTO number for transaction table (for each tx object)
                //    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(tranxAuto.Aut_moduleid, tranxAuto.Aut_direction, tranxAuto.Aut_start_char, tranxAuto.Aut_cate_tp, tranxAuto.Aut_cate_cd, tranxAuto.Aut_modify_dt, tranxAuto.Aut_year);
                //    string _cusNo = tranxAuto.Aut_cate_tp + "-" + tranxAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                //    _inventoryDAL.UpdateAutoNumber(tranxAuto);//update MST_AUTO table

                //save receipt detali list
                foreach (RecieptItem rec_itm in receipItemList)
                {
                    _salesDAL.SaveReceiptItem(rec_itm);//save receipt item
                }

                //_inventoryDAL.ConnectionClose();
                //_salesDAL.ConnectionClose();
                //_fmsInventoryDal.ConnectionClose();
                _inventoryDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();

                //_tr.Complete();
                #endregion
            }//end of try block
            catch (Exception ex)
            {
                effect = -1;
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
            }
            finally
            {

            }
            //}//end of Transaction
            return effect;
        }

        public Int32 Edit_HP_Collect_Recipt_NEW(List<RecieptHeader> Old_receiptHeaderList, List<RecieptHeader> receiptHeaderList, List<RecieptItem> receipItemList, List<HpTransaction> transactList, MasterAutoNumber receipAuto, MasterAutoNumber tranxAuto, string loc) //MasterAutoNumber tranxAuto)
        {
            string _cusNo1 = "";
            Int32 effect = 0;
            //using (TransactionScope _tr = new TransactionScope())
            // {
            try
            {
                #region Process

                if (receiptHeaderList == null || receipItemList == null || transactList == null)
                {
                    return -1;
                }
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _fmsInventoryDal = new FMS_InventoryDAL();
                _fmsInventoryDal.ConnectionOpen();
                _fmsInventoryDal.BeginTransaction();

                //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                //delete previous records
                foreach (RecieptHeader _recieptHeader in Old_receiptHeaderList)
                {

                    if (receipItemList != null)
                    {
                        if (receipItemList.Count > 0)
                        {
                            //delete old receipt details
                            effect = _salesDAL.Delete_HpReceiptDet(_recieptHeader.Sar_receipt_no, _recieptHeader.Sar_com_cd, _recieptHeader.Sar_profit_center_cd);

                            //delete old receipt transactions
                            effect = _salesDAL.Delete_hpTransactions(_recieptHeader.Sar_receipt_no, _recieptHeader.Sar_com_cd, _recieptHeader.Sar_profit_center_cd);

                            //delete old receipt 
                            effect = _salesDAL.Delete_Hp_Receipt(_recieptHeader.Sar_receipt_no, _recieptHeader.Sar_com_cd, _recieptHeader.Sar_profit_center_cd);

                        }
                    }
                }

                DataTable dtESD_EPF_WHT = new DataTable();
                dtESD_EPF_WHT = _salesDAL.Get_ESD_EPF_WHT(receiptHeaderList[0].Sar_com_cd, receiptHeaderList[0].Sar_profit_center_cd, receiptHeaderList[0].Sar_receipt_date);

                Decimal ESD_rt = 0; Decimal EPF_rt = 0; Decimal WHT_rt = 0;
                if (dtESD_EPF_WHT.Rows.Count > 0)
                {
                    ESD_rt = Convert.ToDecimal(dtESD_EPF_WHT.Rows[0]["MPCH_ESD"]);
                    EPF_rt = Convert.ToDecimal(dtESD_EPF_WHT.Rows[0]["MPCH_EPF"]);
                    WHT_rt = Convert.ToDecimal(dtESD_EPF_WHT.Rows[0]["MPCH_WHT"]);

                }
                //save new header list
                foreach (RecieptHeader _recieptHeader in receiptHeaderList)
                {
                    if (_recieptHeader.Sar_receipt_type == "HPRS")
                    {
                        receipAuto.Aut_start_char = "HPRS";
                    }
                    else { receipAuto.Aut_start_char = "HPRM"; }
                    //------------Insurance-------------------------------------------
                    if (_recieptHeader.Sar_anal_4 == "VHINSR")
                    {
                        receipAuto.Aut_start_char = "VHINSR";
                        _recieptHeader.Sar_receipt_type = "VHINSR";
                    }
                    else if (_recieptHeader.Sar_anal_4 == "INSUR")
                    {
                        receipAuto.Aut_start_char = "INSUR";
                        _recieptHeader.Sar_receipt_type = "INSUR";
                    }
                    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(receipAuto.Aut_moduleid, receipAuto.Aut_direction, receipAuto.Aut_start_char, receipAuto.Aut_cate_tp, receipAuto.Aut_cate_cd, receipAuto.Aut_modify_dt, receipAuto.Aut_year);
                    _cusNo1 = receipAuto.Aut_cate_cd + "-" + receipAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(receipAuto);//update MST_AUTO table

                    _recieptHeader.Sar_receipt_no = _cusNo1;

                    Int32 RecieptSeqNo = 0;
                    RecieptSeqNo = _inventoryDAL.GetSerialID(); //will be assign to header after looping transaction list.
                    foreach (HpTransaction tr in transactList)
                    {
                        if (tr.Hpt_ref_no == _recieptHeader.Sar_seq_no.ToString())
                        {
                            //if (_recieptHeader.Sar_receipt_type != "HPRM")
                            //{
                            //    transactList.RemoveAll(x => x.Hpt_ref_no == _recieptHeader.Sar_seq_no.ToString());//Added on 19-09-2012
                            //}
                            //else
                            //{
                            tr.Hpt_txn_ref = _recieptHeader.Sar_receipt_no;
                            //}

                        }
                        // effect = _salesDAL.Save_HpTransaction(tr);
                    }

                    Int32 line = 0;
                    //if (receipItemList.Count==0)//when the receipt amount has not changed
                    //{
                    //    //need to get the details of the old recept no and assign them to the receipItemList
                    //    foreach (RecieptHeader _recieptOld in Old_receiptHeaderList)
                    //    {

                    //    }
                    //     List<RecieptItem> existingReceiptItems= GetReceiptDetails(receipt_no);

                    //}
                    foreach (RecieptItem _itm in receipItemList)
                    {
                        if (_recieptHeader.Sar_seq_no == _itm.Sard_seq_no)//have to check the prefix also?
                        {
                            line++;
                            _itm.Sard_seq_no = RecieptSeqNo;
                            _itm.Sard_line_no = line;
                            _itm.Sard_receipt_no = _recieptHeader.Sar_receipt_no;
                            // effect = _salesDAL.SaveReceiptItem(_itm);//save receipt item
                        }
                    }
                    _recieptHeader.Sar_seq_no = RecieptSeqNo;

                    _recieptHeader.Sar_esd_rate = ESD_rt;
                    _recieptHeader.Sar_epf_rate = EPF_rt;
                    _recieptHeader.Sar_wht_rate = WHT_rt;

                    effect = _salesDAL.SaveReceiptHeader(_recieptHeader);//save receipt header
                    //   _fmsInventoryDal.UpdateManualDocNo(loc,"HPRM", Convert.ToInt32(_recieptHeader.Sar_receipt_no));
                    //   _fmsInventoryDal.UpdateManualDocNo(loc, "HPRS", Convert.ToInt32(_recieptHeader.Sar_receipt_no));
                    // effect = _fmsInventoryDal.UpdateManualDocNo(loc, _recieptHeader.Sar_receipt_type, Convert.ToInt32(_recieptHeader.Sar_manual_ref_no));//do the updation at the gnt_man_doc_dt
                }

                //save receipt detali list
                foreach (RecieptItem rec_itm in receipItemList)
                {
                    _salesDAL.SaveReceiptItem(rec_itm);//save receipt item


                }
                //save transactons list
                foreach (HpTransaction tr in transactList)
                { // TODO:
                    //create MST_AUTO number for transaction table (for each tx object)
                    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(tranxAuto.Aut_moduleid, tranxAuto.Aut_direction, tranxAuto.Aut_start_char, tranxAuto.Aut_cate_tp, tranxAuto.Aut_cate_cd, tranxAuto.Aut_modify_dt, tranxAuto.Aut_year);
                    string _cusNo = tranxAuto.Aut_cate_cd + "-" + tranxAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(tranxAuto);//update MST_AUTO table

                    tr.Hpt_ref_no = _cusNo;
                    //assign auto number to the tx obj.
                    tr.Hpt_seq = _inventoryDAL.GetSerialID();
                    _salesDAL.Save_HpTransaction(tr);

                }
                //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                //_inventoryDAL.ConnectionClose();
                //_salesDAL.ConnectionClose();
                //_fmsInventoryDal.ConnectionClose();
                _inventoryDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();

                //_tr.Complete();
                #endregion
            }//end of try block
            catch (Exception ex)
            {
                effect = -1;
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
            }
            finally
            {

            }
            // }//end of Transaction
            return effect;
        }
        public Int32 Get_TotReciptsForAccount(string accNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_TotReciptsForAccount(accNo);
        }
        public Decimal Get_hp_additionalCommision(DateTime receipt_date, string scheme, Decimal inst_comRate)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Decimal addComm = _salesDAL.Get_hp_additionalCommision(receipt_date, scheme, inst_comRate);
            _salesDAL.ConnectionClose();
            return addComm;
        }
        public DataTable Get_ArrearsInfo(DateTime lastDayOfPrevMonth, string partyTP, string partyCD)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_ArrearsInfo(lastDayOfPrevMonth, partyTP, partyCD);

        }
        public Decimal Get_hp_TotalDue(string accNo, DateTime ars_date)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Decimal addComm = _salesDAL.Get_hp_TotalDue(accNo, ars_date);
            _salesDAL.ConnectionClose();
            return addComm;
        }
        public Decimal Get_hp_TotalDue_onType(string accNo, DateTime ars_date, string type, string receiptNo, DateTime receiptDt)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Decimal addComm = _salesDAL.Get_hp_TotalDue_onType(accNo, ars_date, type, receiptNo, receiptDt);
            _salesDAL.ConnectionClose();
            return addComm;
        }
        public Decimal Get_hp_ArrearsSettlement(string accNo, DateTime sup_date)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Decimal addComm = _salesDAL.Get_hp_ArrearsSettlement(accNo, sup_date);
            _salesDAL.ConnectionClose();
            return addComm;
        }
        public Decimal Get_hp_AllDue(string accNo, DateTime ars_date, DateTime sup_date)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Decimal addComm = _salesDAL.Get_hp_AllDue(accNo, ars_date, sup_date);
            _salesDAL.ConnectionClose();
            return addComm;
        }
        public Decimal Get_hp_MinArrears(string partyTP, string partyCD)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Decimal addComm = _salesDAL.Get_hp_MinArrears(partyTP, partyCD);
            _salesDAL.ConnectionClose();
            return addComm;
        }
        public Decimal Get_hp_Adjustment(string accNo)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Decimal addComm = _salesDAL.Get_hp_Adjustment(accNo);
            _salesDAL.ConnectionClose();
            return addComm;
        }
        public Decimal Get_hp_Tot_Receipts(string accNo, DateTime date)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Decimal addComm = _salesDAL.Get_hp_Tot_Receipts(accNo, date);
            _salesDAL.ConnectionClose();
            return addComm;
        }

        public DataTable validate_Voucher(DateTime receiptDt, string AccNo, string voucherNo)
        {
            _salesDAL = new SalesDAL();

            return _salesDAL.validate_Voucher(receiptDt, AccNo, voucherNo);

        }
        public Int32 cancelReceipt(string p_com, string p_prifix, string p_receiptNo, HpTransaction transaction)
        {
            Int32 effect = 0;
            string _mobilNo = "";
            decimal _totPay = 0;
            string _accNo = "";
            // using (TransactionScope _tr = new TransactionScope())
            //{
            try
            {
                #region Process
                _salesDAL = new SalesDAL();
                _generalDAL = new GeneralDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();


                if (transaction.Hpt_txn_tp == "HPRS")
                {
                    RecieptHeader _hdr = _salesDAL.GetReceiptHeader(p_com, transaction.Hpt_pc, transaction.Hpt_txn_ref);
                    if (_hdr != null)
                    {
                        _mobilNo = _hdr.Sar_mob_no;
                        _totPay = _hdr.Sar_tot_settle_amt;
                        _accNo = _hdr.Sar_acc_no;
                    }


                    if (!string.IsNullOrEmpty(_mobilNo) && _hdr.Sar_is_mgr_iss == false)
                    {
                        if (_mobilNo.Length >= 9)
                        {
                            string _pcName = "";
                            DataTable dt = _generalDAL.CheckProfitCenter(p_com, transaction.Hpt_pc);
                            if (dt.Rows.Count > 0)
                            {
                                _pcName = Convert.ToString(dt.Rows[0]["mpc_desc"]);
                            }


                            //thank u for buying [product] on Hire purchase [loc] S/R on [date]  (A/c [accNo]).Tot value [total] & diriya [diriya]-[com]-0112565293
                            string _mg = "The payment of LKR " + _totPay + " received to the " + _pcName + " on " + _accNo + " account,R/N " + p_receiptNo + " is cancelled."; // "Thank u for the purchased items on HP A/C: " + _AccountNo + " @ " + _pcName + " S/R. HP value Rs.: " + _HPAccount.Hpa_hp_val + " and " + _smsInsu + " Rs.: " + _insuAmt + "-" + _generalDAL.GetHPCustContactPhoneNo();
                            OutSMS _out = new OutSMS();
                            _out.Msg = _mg;
                            _out.Msgstatus = 0;
                            _out.Msgtype = "S";
                            _out.Receivedtime = DateTime.Now;
                            _out.Receiver = "CUSTOMER";
                            //_out.Receiverphno = _info.Mmi_mobi_no;

                            if (_mobilNo.Length == 10)
                            {
                                _out.Receiverphno = "+94" + _mobilNo.Substring(1, 9);
                                _out.Senderphno = "+94" + _mobilNo.Substring(1, 9);
                            }
                            if (_mobilNo.Length == 9)
                            {
                                _out.Receiverphno = "+94" + _mobilNo;
                                _out.Senderphno = "+94" + _mobilNo;
                            }

                            _out.Refdocno = _accNo;
                            _out.Sender = transaction.Hpt_cre_by;
                            _out.Createtime = DateTime.Now;
                            //_generalDAL.SaveSMSOut(_out);
                        }
                    }
                }

                List<RecieptItem> _recItm = new List<RecieptItem>();
                _recItm = _salesDAL.GetReceiptDetails(transaction.Hpt_txn_ref);

                foreach (RecieptItem _rec in _recItm)
                {
                    if (_rec.Sard_pay_tp == "CRNOTE")
                    {
                        _salesDAL.UpdateCreditNoteBalance(p_com, transaction.Hpt_pc, _rec.Sard_ref_no, -_rec.Sard_settle_amt);
                    }

                    if (_rec.Sard_pay_tp == "ADVAN")
                    {
                        RecieptHeader _rHdr = new RecieptHeader();
                        _rHdr.Sar_receipt_no = _rec.Sard_ref_no;
                        _rHdr.Sar_used_amt = -_rec.Sard_settle_amt;
                        _rHdr.Sar_act = true;
                        _rHdr.Sar_direct = true;
                        _rHdr.Sar_mod_by = "CAN";
                        _salesDAL.SaveReceiptHeader(_rHdr);


                    }
                }

                effect = _salesDAL.Cancel_hp_receipt(p_com, p_prifix, p_receiptNo);
                effect = _salesDAL.UpdateHp_Transaction(transaction);

                // _salesDAL.ConnectionClose();
                _salesDAL.TransactionCommit();
                _generalDAL.TransactionCommit();
                // _tr.Complete();
                #endregion
            }//end of try block
            catch (Exception ex)
            {
                effect = -1;
                _salesDAL.TransactionRollback();
                _generalDAL.TransactionRollback();

            }
            finally
            {

            }
            //}//end of Transaction

            _salesDAL.ConnectionClose();
            return effect;
        }
        public string GetHpCustomerName(string accNo)
        {
            _salesDAL = new SalesDAL();

            return _salesDAL.GetHpCustomerName(accNo);
        }

        /// <summary>
        /// BLL for get Customer mail by quo
        /// </summary>
        /// <param name="quo"></param>
        /// <returns></returns>
        public string GetQuoCustomerMail(string quo)
        {
            _salesDAL = new SalesDAL();

            return _salesDAL.GetQuoCustomerMail(quo);
        }

        public DateTime Get_EndingDate(string AccNo)
        {
            _salesDAL = new SalesDAL();

            return _salesDAL.Get_EndingDate(AccNo);
        }
        public Decimal Get_MaxHpReceiptAmount(string hsyCD, string parytyTP, string partyCD)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Decimal rents = _salesDAL.Get_MaxHpReceiptAmount(hsyCD, parytyTP, partyCD);
            _salesDAL.ConnectionClose();
            return rents;

        }
        public Decimal Get_ProtectionPayment_RefundValue(string accNo)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Decimal refund = _salesDAL.Get_ProtectionPayment_RefundValue(accNo);
            _salesDAL.ConnectionClose();
            return refund;

        }
        public RecieptHeader Get_last_ReceiptHeaderOfTheDay(DateTime date, string AccNo)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            RecieptHeader rh = _salesDAL.Get_last_ReceiptHeaderOfTheDay(date, AccNo);
            _salesDAL.ConnectionClose();
            return rh;
        }
        public Decimal Get_Diriya_CommissionRate(string accNo, DateTime ars_date)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Decimal rate = _salesDAL.Get_Diriya_CommissionRate(accNo, ars_date);
            _salesDAL.ConnectionClose();
            return rate;
        }
        #endregion Collection

        #region HP-Receipt Reversal

        public Int32 saveAll_HP_ReceiptReversal(List<RecieptHeader> receiptHeaderList, string com, string loc, string loginuser, bool isAppCycle, string appReqno, out string _RefundReceiptNo)
        {
            Int32 effect = 0;
            _RefundReceiptNo = "";
            //using (TransactionScope _tr = new TransactionScope())
            //{
            try
            {
                #region Process

                if (receiptHeaderList == null)
                {
                    _RefundReceiptNo = "";
                    return -1;
                }
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _generalDAL = new GeneralDAL();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();

                List<RecieptItem> _receipItemList = new List<RecieptItem>();

                foreach (RecieptHeader _hdr in receiptHeaderList)
                {
                    _hdr.Sar_com_cd = com;
                    _hdr.Sar_ref_doc = _hdr.Sar_receipt_no;
                    _hdr.Sar_seq_no = _inventoryDAL.GetSerialID(); //will be assign to header after looping transaction list.
                    _hdr.Sar_receipt_no = _hdr.Sar_seq_no.ToString();
                    _hdr.Sar_direct = false;
                    //  _hdr.Sar_receipt_type = "HPREV"; //ORIGINAL RECEIPT TYPE
                    // _hdr.Sar_manual_ref_no = appReqno; // COMMENT
                    //_hdr.Sar_tot_settle_amt = _hdr.Sar_anal_5; //COMMENT

                    if (_hdr.Sar_anal_1 == "MANAGER_ISSUE")
                    {
                        _hdr.Sar_is_mgr_iss = true;
                    }
                    _hdr.Sar_act = true;

                    RecieptItem _receipItem = new RecieptItem();
                    _receipItem.Sard_seq_no = _hdr.Sar_seq_no;
                    _receipItem.Sard_line_no = 1;
                    _receipItem.Sard_receipt_no = _hdr.Sar_receipt_no;
                    _receipItem.Sard_inv_no = _hdr.Sar_ref_doc;
                    _receipItem.Sard_pay_tp = "CASH";
                    _receipItem.Sard_settle_amt = _hdr.Sar_tot_settle_amt;//_hdr.Sar_anal_5; //COMMENT
                    _receipItemList.Add(_receipItem);

                    effect = _salesDAL.SaveReceiptHeader(_hdr);//save receipt header
                }

                //save receipt detali list
                foreach (RecieptItem rec_itm in _receipItemList)
                {
                    _salesDAL.SaveReceiptItem(rec_itm);//save receipt item
                }

                //foreach (RecieptHeader _hdr in receiptHeaderList)
                //{
                //    HpTransaction transactitem = new HpTransaction();
                //    transactitem.Hpt_seq = _hdr.Sar_seq_no;
                //    transactitem.Hpt_ref_no = _hdr.Sar_receipt_no; // (39-HPT-0000098) SELECT * FROM mst_auto WHERE aut_moduleid ='HP' AND aut_start_char ='HPT' AND aut_cate_tp ='PC' AND aut_cate_cd ='39'
                //    transactitem.Hpt_com = com;
                //    transactitem.Hpt_pc = loc;
                //    transactitem.Hpt_acc_no = _hdr.Sar_acc_no;
                //    transactitem.Hpt_txn_dt = _hdr.Sar_receipt_date;
                //    transactitem.Hpt_txn_tp = "HPREV";
                //    transactitem.Hpt_txn_ref = _hdr.Sar_ref_doc; //Original Receipt No
                //    transactitem.Hpt_desc = "RECEIPT REVERSAL";
                //    transactitem.Hpt_mnl_ref = _hdr.Sar_prefix + "-" + _hdr.Sar_manual_ref_no;
                //    transactitem.Hpt_dbt = _hdr.Sar_tot_settle_amt;//_hdr.Sar_anal_5;
                //    transactitem.Hpt_crdt = 0;
                //    transactitem.Hpt_bal = 0;
                //    transactitem.Hpt_ars = 0;
                //    transactitem.Hpt_cre_by = loginuser;
                //    transactitem.Hpt_cre_dt = _hdr.Sar_receipt_date;//DateTime.Now;

                //    _salesDAL.Save_HpTransaction(transactitem);
                //}

                if (isAppCycle == true)
                {
                    RequestApprovalHeader _rapphdr = new RequestApprovalHeader();
                    foreach (RecieptHeader _hdr in receiptHeaderList)
                    {
                        _rapphdr.Grah_com = com;
                        _rapphdr.Grah_loc = loc;
                        _rapphdr.Grah_fuc_cd = _hdr.Sar_acc_no;
                        _rapphdr.Grah_ref = appReqno;
                        _rapphdr.Grah_app_stus = "F";
                        // _rapphdr.Grah_app_lvl = -1;   commented by Shani on 18-04-2013
                        // _rapphdr.Grah_app_by = loginuser;   commented by Shani on 18-04-2013
                        break;
                    }

                    //   _generalDAL.UpdateMidApprovalStatus(_rapphdr);   

                }

                //Update Auto Number
                foreach (RecieptHeader _hdr in receiptHeaderList)
                {
                    MasterAutoNumber _receiptAuto = new MasterAutoNumber();
                    //Generate Temporary Saved Receipt No
                    _receiptAuto.Aut_cate_cd = _hdr.Sar_profit_center_cd;
                    _receiptAuto.Aut_cate_tp = "HPREV";
                    _receiptAuto.Aut_direction = 0;
                    _receiptAuto.Aut_modify_dt = null;
                    _receiptAuto.Aut_moduleid = "HP";
                    _receiptAuto.Aut_number = 0;
                    _receiptAuto.Aut_start_char = "HPREV";
                    _receiptAuto.Aut_year = null; //commit by darshana 04-01-2013 Convert.ToDateTime(DateTime.Now.Date).Year;
                    //39-HPREV-00000001

                    MasterAutoNumber _hdttransAuto = new MasterAutoNumber();
                    //Generate Temporary Saved HPT Transaction
                    _hdttransAuto.Aut_cate_cd = _hdr.Sar_profit_center_cd;
                    _hdttransAuto.Aut_cate_tp = "PC";
                    _hdttransAuto.Aut_direction = 1;
                    _hdttransAuto.Aut_modify_dt = null;
                    _hdttransAuto.Aut_moduleid = "HP";
                    _hdttransAuto.Aut_number = 0;
                    _hdttransAuto.Aut_start_char = "HPT";
                    _hdttransAuto.Aut_year = null; //commt by darshana 04-01-2013 Convert.ToDateTime(DateTime.Now.Date).Year;

                    MasterAutoNumber _number1 = _inventoryDAL.GetAutoNumber(_receiptAuto.Aut_moduleid, _receiptAuto.Aut_direction, _receiptAuto.Aut_start_char, _receiptAuto.Aut_cate_tp, _receiptAuto.Aut_cate_cd, _receiptAuto.Aut_modify_dt, _receiptAuto.Aut_year);
                    string _receiptNo = loc + "-" + _receiptAuto.Aut_start_char + "-" + _number1.Aut_number.ToString("0000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_receiptAuto);//update MST_AUTO table

                    MasterAutoNumber _number2 = _inventoryDAL.GetAutoNumber(_hdttransAuto.Aut_moduleid, _hdttransAuto.Aut_direction, _hdttransAuto.Aut_start_char, _hdttransAuto.Aut_cate_tp, _hdttransAuto.Aut_cate_cd, _hdttransAuto.Aut_modify_dt, _hdttransAuto.Aut_year);
                    string _hpttransNo = loc + "-" + _hdttransAuto.Aut_start_char + "-" + _number2.Aut_number.ToString("0000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_hdttransAuto);//update MST_AUTO table

                    //Update Receipt Header/ Receipt Item
                    _salesDAL.UpdateInvoiceReceipts("-1", _receiptNo, 0, _hdr.Sar_seq_no);

                    //---------------------------------------------------------------------
                    //  foreach (RecieptHeader _hdr in receiptHeaderList)
                    //  {
                    HpTransaction transactitem = new HpTransaction();
                    transactitem.Hpt_seq = _hdr.Sar_seq_no;
                    transactitem.Hpt_ref_no = _hdr.Sar_receipt_no; // (39-HPT-0000098) SELECT * FROM mst_auto WHERE aut_moduleid ='HP' AND aut_start_char ='HPT' AND aut_cate_tp ='PC' AND aut_cate_cd ='39'
                    transactitem.Hpt_com = com;
                    transactitem.Hpt_pc = loc;
                    transactitem.Hpt_acc_no = _hdr.Sar_acc_no;
                    transactitem.Hpt_txn_dt = _hdr.Sar_receipt_date;
                    transactitem.Hpt_txn_tp = "HPREV";
                    transactitem.Hpt_txn_ref = _receiptNo; //_hdr.Sar_ref_doc; //Original Receipt No
                    transactitem.Hpt_desc = "RECEIPT REVERSAL";
                    transactitem.Hpt_mnl_ref = _hdr.Sar_prefix + "-" + _hdr.Sar_manual_ref_no;
                    transactitem.Hpt_dbt = _hdr.Sar_tot_settle_amt;//_hdr.Sar_anal_5;
                    transactitem.Hpt_crdt = 0;
                    transactitem.Hpt_bal = 0;
                    transactitem.Hpt_ars = 0;
                    transactitem.Hpt_cre_by = loginuser;
                    transactitem.Hpt_cre_dt = _hdr.Sar_receipt_date;//DateTime.Now;

                    _salesDAL.Save_HpTransaction(transactitem);
                    //  }
                    //--------------------------------------------------------------------------------

                    _salesDAL.UpdateHPTTransNo(_hpttransNo, _hdr.Sar_seq_no);


                    _RefundReceiptNo = _receiptNo;  //add by shani (added the out parameter)
                }
                //ACTIVATE CLOSE ACCOUNT WHEN REVERS RECEPT THARANGA
                _salesDAL.Update_hp_accountStatus(com, loc, receiptHeaderList.First().Sar_acc_no, "A", 3, null, Convert.ToDateTime("31/Dec/9999"));

                _salesDAL.UpdateAccLogStatus(com, receiptHeaderList.First().Sar_acc_no, "A", Convert.ToDateTime("31/Dec/9999"), 2);

                effect = 1;
                //_inventoryDAL.ConnectionClose();
                //_salesDAL.ConnectionClose();
                //_generalDAL.ConnectionClose();
                //_tr.Complete();
                _inventoryDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                _generalDAL.TransactionCommit();

                #endregion
            }//end of try block
            catch (Exception ex)
            {
                effect = -1;
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
            }
            finally
            {
                //_inventoryDAL.ConnectionClose();
                //_salesDAL.ConnectionClose();
                //_fmsInventoryDal.ConnectionClose();
                //effect = 1;
            }


            //}//end of Transaction
            return effect;
        }

        #endregion

        #endregion Higher Purchase

        public RecieptHeader GetReceiptHeaderByInvoice(string _invoice)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReceiptHeaderByInvoice(_invoice);
        }

        //kapila
        public Int32 ExchangeIssueCancelation(string _com, string _loc, string _docNo, string _user, out string _message)
        {
            Int16 _effect = 0;
            try
            {
                string _Msg = "";

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _inventoryDAL.CancelInventoryDocument(_docNo, _user);

                InventoryHeader _invHdr = _inventoryDAL.Get_Int_Hdr(_docNo);

                _salesDAL.UpdateRequestCloseStatus(_com, _loc, "ARQT035", _invHdr.Ith_sub_docno, "F", _user);
                _salesDAL.UpdateReqDetStus(_invHdr.Ith_sub_docno);

                RecieptHeader _receiptHdr = _salesDAL.GetReceiptHdrByManualRef(_invHdr.Ith_sub_docno);
                List<RecieptItem> _recItem = new List<RecieptItem>();
                if (!string.IsNullOrEmpty(_receiptHdr.Sar_receipt_no))
                {
                    _recItem = _salesDAL.GetReceiptDetails(_receiptHdr.Sar_receipt_no);
                    if (_receiptHdr != null)
                    {
                        if (_receiptHdr.Sar_com_cd != null)
                        {
                            _receiptHdr.Sar_act = false;
                            _receiptHdr.Sar_is_dayend = 0;
                            _salesDAL.SaveReceiptHeader(_receiptHdr);

                            if (_recItem != null)
                            {
                                if (_recItem.Count > 0)
                                    foreach (RecieptItem _i in _recItem)
                                    {
                                        //Advance receipt refund
                                        if (_i.Sard_pay_tp == "ADVAN")
                                        {
                                            RecieptHeader _rHdr = new RecieptHeader();
                                            _rHdr.Sar_receipt_no = _i.Sard_ref_no;
                                            _rHdr.Sar_used_amt = -_i.Sard_settle_amt;
                                            _rHdr.Sar_act = true;
                                            _rHdr.Sar_direct = true;
                                            _rHdr.Sar_mod_by = _receiptHdr.Sar_mod_by;
                                            _salesDAL.SaveReceiptHeader(_rHdr);
                                        }
                                        //Credit note refund
                                        if (_i.Sard_pay_tp == "CRNOTE")
                                        {
                                            _salesDAL.UpdateCreditNoteBalance(_receiptHdr.Sar_com_cd, _receiptHdr.Sar_profit_center_cd, _i.Sard_ref_no, -_i.Sard_settle_amt);
                                        }

                                    }
                            }
                        }
                    }
                }
                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();


                _Msg = "";
                _effect = 1;

                _message = _Msg;
                return _effect;
            }
            catch (Exception err)
            {
                _effect = 0;
                _message = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                return _effect;
            }

        }
        public Int32 InvoiceCancelation(InvoiceHeader _header, out string _message, List<InventoryHeader> InventoryList)
        {
            Int16 _effect = 0;
            try
            {

                string _Msg = "";
                string _deliveryNo = string.Empty;

                //using (TransactionScope _tr = new TransactionScope())
                //{
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                _fmsInventoryDal = new FMS_InventoryDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _fmsInventoryDal.ConnectionOpen();
                _fmsInventoryDal.BeginTransaction();

                CustServiceDAL _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();



                #region Update Invoice Header
                if (_header.Sah_stus == "H") _header.Sah_stus = "U"; else _header.Sah_stus = "C";
                _header.Sah_is_dayend = 0;

                _salesDAL.SaveSalesHeader(_header);
                #endregion
                #region Reverse Loyalty Points
                InvoiceLoyalty _loyaltypluspt = _salesDAL.GetInvoiceLoyalty(_header.Sah_inv_no);
                if (_loyaltypluspt != null && !string.IsNullOrEmpty(_loyaltypluspt.Stlt_inv_no))
                {
                    _salesDAL.RedeemLoyaltyPointCancel(_header.Sah_anal_6, _header.Sah_cus_cd, _loyaltypluspt.Stlt_pt);
                }
                #endregion
                #region Reverse Gift Vouchers
                DataTable _invoiceitem = _salesDAL.GetInvoiceVoucher(_header.Sah_inv_no, string.Empty);
                if (_invoiceitem != null)
                    if (_invoiceitem.Rows.Count > 0)
                    {
                        foreach (DataRow _row in _invoiceitem.Rows)
                        {
                            string _book = Convert.ToString(_row["stvo_bookno"]);
                            string _page = Convert.ToString(_row["stvo_pageno"]);
                            string _item = Convert.ToString(_row["stvo_gv_itm"]);
                            _fmsInventoryDal.ReversVoucher(_header.Sah_com, _header.Sah_pc, _item, _book, _page, _header.Sah_cre_by);
                        }
                    }
                #endregion
                #region Cancel Buy-Back Adjustment
                DataTable _buybackdoc = _inventoryDAL.GetBuyBackInventoryDocument(_header.Sah_com, _header.Sah_del_loc, _header.Sah_inv_no);
                if (_buybackdoc != null)
                    if (_buybackdoc.Rows.Count > 0)
                    {
                        string _adjno = Convert.ToString(_buybackdoc.Rows[0].Field<string>("ith_doc_no"));
                        _inventoryDAL.CancelInwardInventoryDocument(_header.Sah_com, _header.Sah_del_loc, _adjno, _header.Sah_cre_by);
                    }
                #endregion
                #region Reverse Receipt Details and its referance

                RecieptHeader _receiptHdr = _salesDAL.GetReceiptHeaderByInvoice(_header.Sah_inv_no);
                List<RecieptItem> _recItem = _salesDAL.GetReceiptItemList(_header.Sah_inv_no);
                if (_receiptHdr != null)
                    if (_receiptHdr.Sar_com_cd != null)
                    {
                        _receiptHdr.Sar_act = false;
                        _receiptHdr.Sar_is_dayend = 0;
                        _salesDAL.SaveReceiptHeader(_receiptHdr);
                        //if (_recItem != null)
                        //    if (_recItem.Count > 0)
                        //        foreach (RecieptItem _i in _recItem)
                        //            _salesDAL.SaveReceiptItem(_i);

                        if (_recItem != null)
                            if (_recItem.Count > 0)
                                foreach (RecieptItem _i in _recItem)
                                {
                                    //Advance receipt refund
                                    if (_i.Sard_pay_tp == "ADVAN")
                                    {
                                        RecieptHeader _rHdr = new RecieptHeader();
                                        _rHdr.Sar_receipt_no = _i.Sard_ref_no;
                                        _rHdr.Sar_used_amt = -_i.Sard_settle_amt;
                                        _rHdr.Sar_act = true;
                                        _rHdr.Sar_direct = true;
                                        _rHdr.Sar_mod_by = _receiptHdr.Sar_mod_by;
                                        _salesDAL.SaveReceiptHeader(_rHdr);
                                    }
                                    //Credit note refund
                                    if (_i.Sard_pay_tp == "CRNOTE")
                                    {
                                        _salesDAL.UpdateCreditNoteBalance(_receiptHdr.Sar_com_cd, _receiptHdr.Sar_profit_center_cd, _i.Sard_ref_no, -_i.Sard_settle_amt);
                                    }
                                    //Gift voucher refund
                                    if (_i.Sard_pay_tp == "GVO")
                                    {
                                        Int32 _page = Convert.ToInt32(_i.Sard_ref_no);
                                        Int32 _book = Convert.ToInt32(_i.Sard_sim_ser);
                                        string _gvCom = _i.Sard_anal_1;
                                        string _item = _i.Sard_anal_2;
                                        decimal _amount = _i.Sard_settle_amt;
                                        //_fmsInventoryDal.ReversVoucherBalance(Convert.ToString(_amount), _book, _item, _page, _gvCom, _header.Sah_cre_by, _header.Sah_cre_when);
                                        _fmsInventoryDal.ReversVoucherBalance(Convert.ToString(_amount), _book, _item, _page, _header.Sah_com, _header.Sah_cre_by, _header.Sah_cre_when);
                                    }
                                    if (_i.Sard_pay_tp == "LORE")
                                    {
                                        _salesDAL.RedeemLoyaltyPoint(_i.Sard_ref_no, _header.Sah_cus_cd, -_i.Sard_anal_4);
                                    }

                                }

                    }
                #endregion

                if (InventoryList == null || InventoryList.Count <= 0)
                {
                    #region Reverse Delivery Order
                    List<string> _do = _salesDAL.DeliveryOrderNoByInvoice(_header.Sah_inv_no);
                    if (_do != null)
                        if (_do.Count > 0)
                            foreach (string _d in _do)
                                _inventoryDAL.CancelInventoryDocument(_d, _header.Sah_mod_by);
                    #endregion
                }
                else
                {
                    #region Reverse Consginment Document

                    if (InventoryList != null)
                        if (InventoryList.Count > 0)
                        {
                            var _do = InventoryList.Where(x => x.Ith_doc_tp == "DO").ToList();
                            var _grn = InventoryList.Where(x => x.Ith_doc_tp == "GRN").ToList();
                            var _adj = InventoryList.Where(x => x.Ith_doc_tp == "ADJ").ToList();

                            if (_do != null) if (_do.Count > 0)
                                    foreach (InventoryHeader _d in _do)
                                        if (_d.Ith_direct == false)
                                            _inventoryDAL.CancelInventoryDocument(_d.Ith_doc_no, _header.Sah_mod_by);
                                        else
                                            _inventoryDAL.CancelInwardInventoryDocument(_header.Sah_com, _header.Sah_del_loc, _d.Ith_doc_no, _header.Sah_cre_by);

                            if (_grn != null) if (_grn.Count > 0)
                                    foreach (InventoryHeader _d in _grn)
                                        if (_d.Ith_direct == false)
                                            _inventoryDAL.CancelInventoryDocument(_d.Ith_doc_no, _header.Sah_mod_by);
                                        else
                                            _inventoryDAL.CancelInwardInventoryDocument(_header.Sah_com, _header.Sah_del_loc, _d.Ith_doc_no, _header.Sah_cre_by);

                            if (_adj != null) if (_adj.Count > 0)
                                    foreach (InventoryHeader _d in _adj)
                                        if (_d.Ith_direct == false)
                                            _inventoryDAL.CancelInventoryDocument(_d.Ith_doc_no, _header.Sah_mod_by);
                                        else
                                            _inventoryDAL.CancelInwardInventoryDocument(_header.Sah_com, _header.Sah_del_loc, _d.Ith_doc_no, _header.Sah_cre_by);
                        }
                    #endregion
                }

                //Add by Chamal 7-Jul-2014
                //discount voucher cancelation
                _salesDAL.Update_GV_Pages(2, _header.Sah_com, _header.Sah_pc, _header.Sah_dt, _header.Sah_inv_no, "C", 0, "P_GV", _header.Sah_mod_by, "");
                //Paymod voucher cancelation
                _salesDAL.Update_GV_Pages(2, _header.Sah_com, _header.Sah_pc, _header.Sah_dt, _header.Sah_inv_no, "C", 0, "GV", _header.Sah_mod_by, "");

                //Tharaka 2016-02-11 Cancel inter company PO
                _inventoryDAL.UpdatePOStatusNew(_header.Sah_anal_4, "C", _header.Sah_com, -1, _header.Sah_mod_by);

                //kapila 18/11/2016 - update pv voucher balance and status as A
                DataTable _dtSalesDet = _salesDAL.GetSalesDet(_header.Sah_inv_no);

                foreach (DataRow r in _dtSalesDet.Rows)
                {
                    if (r["SAD_RES_NO"].ToString() == "PROMO_VOU")
                    {
                        _salesDAL.Update_PV_Pages(_header.Sah_inv_no, Convert.ToInt32(r["SAD_RES_LINE_NO"]), "P_GV", _header.Sah_cus_cd);
                    }
                }

                //By Akila 2018/02/14
                #region Update Event Items
                //recall invoice items
                List<InvoicedEventItems> _InvoiceEventItems = new List<InvoicedEventItems>();
                _InvoiceEventItems = _salesDAL.GetInvoiceEventItems(_header.Sah_inv_no);
                if (_InvoiceEventItems != null && _InvoiceEventItems.Count > 0)
                {
                    //update event _header
                    EventRegistry _event = new EventRegistry();
                    _event.SERE_EVE_CD = _InvoiceEventItems[0].SERE_EVE_CD;
                    _event.SERE_UPDATE = 0;
                    _event.SERE_UPDATE_BY = _header.Sah_mod_by;
                    _event.SERE_UPDATE_DT = DateTime.Today;
                    _event.SERE_UPDATE_SESSION = _header.Sah_session_id;
                    _salesDAL.UpdateEventHdrStatus(_event);

                    //update event item
                    foreach (InvoicedEventItems _invItesm in _InvoiceEventItems)
                    {
                        EventItems _eveItem = new EventItems();
                        _eveItem.SERE_EVE_CD = _invItesm.SERE_EVE_CD;
                        _eveItem.SERE_ITM_CD = _invItesm.SERE_ITM_CD;
                        _eveItem.SERE_ITM_SOLD = (_invItesm.SERE_INVC_QTY) * -1;
                        _eveItem.SelectedQty = (_invItesm.SERE_INVC_QTY) * -1;
                        _eveItem.SERE_UPDATE_BY = _header.Sah_mod_by;
                        _eveItem.SERE_UPDATE_SESSION = _header.Sah_session_id;
                        _eveItem.SERE_UPDATE = 2; // if invoice from web 1 , windows - 2
                        _salesDAL.UpdateEventItemQty(_eveItem);
                    }

                    //Update event invoiced details
                    _salesDAL.UpdateInvoiceEventItems(_header.Sah_inv_no, _InvoiceEventItems[0].SERE_EVE_CD);
                }

                #endregion

                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();
                _Msg = "";
                _effect = 1;
                //    _tr.Complete();
                //}

                _message = _Msg;
                return _effect;
            }
            catch (Exception err)
            {
                _effect = 0;
                _message = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                return _effect;
            }

        }

        public List<LoyaltyMemeber> GetCustomerLoyality(string _customer, string _cardno, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCustomerLoyality(_customer, _cardno, _date);
        }

        public List<LoyaltyType> GetLoyalityType(string _cardtype, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetLoyalityType(_cardtype, null, _date);
        }

        public List<LoyaltyPointDiscount> GetLoyaltyDiscount(string _locyaltyType, string _partyType, string _party, DateTime _date, decimal _point, string _pricebook, string _pricelevel)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetLoyaltyDiscount(_locyaltyType, _partyType, _party, _date, _point, _pricebook, _pricelevel);
        }

        public List<LoyaltyPriorityCode> GetLoyaltyPriority(string _company)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetLoyaltyPriority(_company);
        }

        public List<InvoiceItem> GetInvoiceDetailByInvoice(string _invoice)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceDetailByInvoice(_invoice);
        }

        public DataTable GetInvoiceDetailByInvoiceTable(string _invoice)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceDetailByInvoiceTable(_invoice);
        }

        public List<InvoiceHeader> GetInvoiceByAccountNo(string _company, string _profitCenter, string _account)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceByAccountNo(_company, _profitCenter, _account);
        }

        public DataTable GetInvoiceByAccountNoTable(string _company, string _profitCenter, string _account)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceByAccountNoTable(_company, _profitCenter, _account);
        }

        public List<RecieptHeader> GetReceiptByAccountNo(string _company, string _profitCenter, string _account)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReceiptByAccountNo(_company, _profitCenter, _account);
        }

        public List<HpAdjustment> GetAccountAdjustment(string _profitCenter, string _account, string _adjtype)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAccountAdjustment(_profitCenter, _account, _adjtype);
        }

        public List<HpCashConversionDefinition> GetCashConversionDefinition(string _scheme, Int32 _period, string _book, string _level, DateTime _uptoDate, decimal _upvalue, decimal _afvalue, decimal _hpvalue, DateTime _acc_create_Date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCashConversionDefinition(_scheme, _period, _book, _level, _uptoDate, _upvalue, _afvalue, _hpvalue, _acc_create_Date);
        }

        public List<HpInsurance> GetAccountInsurance(string _account, Int16 _type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAccountInsurance(_account, _type);
        }

        public List<MasterSalesPriorityHierarchy> GetSalesPriorityHierarchy(string _company, string _profitCenter, string _category, string _type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSalesPriorityHierarchy(_company, _profitCenter, _category, _type);
        }

        public DataTable GetCustomerDetByGroupCode(string _grpCode)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCustomerDetByGroupCode(_grpCode);
        }

        //kapila 6/7/2012
        public Int32 GetGroupSaleCountByCompany(string _groupCompany)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetGroupSaleCountByCompany(_groupCompany);
        }

        //kapila 9/7/2012
        public GroupSaleHeader GetGroupSaleHeaderDetails(string _groupSaleCode)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetGroupSaleHeaderDetails(_groupSaleCode);
        }

        //kapila 9/7/2012
        public List<GroupSaleCustomer> GetGroupSaleCustomers(string _groupSaleCode)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetGroupSaleCustomers(_groupSaleCode);
        }

        //kapila 6/7/2012
        public int SaveGroupSaleData(GroupSaleHeader _groupSale, MasterAutoNumber _mastAutoNo, out string _docNo)
        {
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            int result = 0;

            using (TransactionScope scope = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();

                string _documentNo = "";

                if (_salesDAL.IsGroupSaleCodeFound(_groupSale.Hgr_grup_cd) != true)
                {
                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_mastAutoNo.Aut_moduleid, _mastAutoNo.Aut_direction, _mastAutoNo.Aut_start_char, _mastAutoNo.Aut_cate_tp, _mastAutoNo.Aut_cate_cd, _mastAutoNo.Aut_modify_dt, _mastAutoNo.Aut_year).Aut_number;
                    _documentNo = _groupSale.Hgr_pc + "-" + _mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                    // Update document no in group sale header table.
                    _inventoryDAL.UpdateAutoNumber(_mastAutoNo);
                }
                else
                {
                    _documentNo = _groupSale.Hgr_grup_cd;
                }

                //Save group sale header
                _groupSale.Hgr_grup_cd = _documentNo;
                result = _salesDAL.SaveGroupSale(_groupSale);

                //delete current customer details
                _salesDAL.Delete_Group_sale_cust(_groupSale.Hgr_grup_cd);

                //Save customer details.
                if ((_groupSale.GroupSaleCustomerList != null) && (_groupSale.GroupSaleCustomerList.Count > 0))
                {
                    foreach (GroupSaleCustomer _groupSaleCustomer in _groupSale.GroupSaleCustomerList)
                    {
                        _groupSaleCustomer.Hgc_grup_cd = _groupSale.Hgr_grup_cd;
                        _salesDAL.SaveGroupSaleCustomers(_groupSaleCustomer);
                    }
                }

                _docNo = _documentNo;

                result = 1;
                _salesDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                scope.Complete();
            }
            return result;
        }

        public Int32 SaveCashConversionEntry(InvoiceHeader _hpReversInvoiceHeader, List<InvoiceItem> _hpReversInvoiceItem, List<RecieptHeader> _hpReversReceiptHeader, InvoiceHeader _ccInvoiceHeader, List<InvoiceItem> _ccInvoiceItem, RecieptHeader _ccReceiptHeader, List<RecieptItem> _ccReceiptItem, MasterAutoNumber _reversInvoiceAuto, MasterAutoNumber _reversReceiptAuto, MasterAutoNumber _convertInvoiceAuto, MasterAutoNumber _convertReceiptAuto, HpInsurance _reversInsurance, InventoryHeader _ccInv, MasterAutoNumber _invAuto, out string _convertInvoice,
                   RequestApprovalHeader _regReqHdr, List<RequestApprovalDetail> _regReqDet, List<RequestApprovalSerials> _regReqSer, RequestApprovalHeaderLog _regReqLogHdr, List<RequestApprovalDetailLog> _regReqLogDet, List<RequestApprovalSerialsLog> _regReqLogSer, MasterAutoNumber _regReqAuto, RequestApprovalHeader _insReqHdr, List<RequestApprovalDetail> _insReqDet, List<RequestApprovalSerials> _insReqSer, RequestApprovalHeaderLog _insReqLogHdr, List<RequestApprovalDetailLog> _insReqLogDet, List<RequestApprovalSerialsLog> _insReqLogSer, MasterAutoNumber _insReqAuto, List<RecieptHeader> _regReciept, List<RecieptItem> _regRecieptItem, MasterAutoNumber _regRecieptAuto, List<RecieptHeader> _insReciept, List<RecieptItem> _insRecieptItem, MasterAutoNumber _insRecieptAuto, int option, HpTransaction _transaction, out string _err)
        {
            _reversInvoiceAuto.Aut_modify_dt = null;
            _reversReceiptAuto.Aut_modify_dt = null;
            _convertInvoiceAuto.Aut_modify_dt = null;
            _convertReceiptAuto.Aut_modify_dt = null;

            _ccReceiptHeader.Sar_session_id = _hpReversInvoiceHeader.Sah_session_id;
            _ccReceiptHeader.Sar_create_by = _hpReversInvoiceHeader.Sah_cre_by;
            _ccReceiptHeader.Sar_create_when = _hpReversInvoiceHeader.Sah_cre_when;
            _ccReceiptHeader.Sar_mod_by = _hpReversInvoiceHeader.Sah_mod_by;
            _ccReceiptHeader.Sar_mod_when = _hpReversInvoiceHeader.Sah_mod_when;

            Int32 _effect = 0;

            string _ccInvoiceNo = string.Empty;
            string _ccReceiptNo = string.Empty;
            string _ccDeliveryOrder = string.Empty;
            string _error = string.Empty;
            List<int> _revReceiptSeqNo = new List<int>();
            string _currentLoc = _ccInv.Ith_loc;
            string _doNonew = "";
            string _invoiceNo = "";
            bool _foundDeliveryOrder = false; //Add by Chamal 08/08/2014, solution for skipping HS No seq
            ReptCommonDAL _reptDAL = new ReptCommonDAL();
            try
            {
                //using (TransactionScope _tr = new TransactionScope())
                //{

                //ADDED 2013/04/04
                //REQUEST/APPROVAL/RECIEPT GENARATION

                if (option == 1)
                {
                    CashConvertionApproval(_regReqHdr, null, null, null, null, null, null, true, _insReqHdr, null, null, null, null, null, null, true, _regReciept, _regRecieptItem, _regRecieptAuto, true, _insReciept, _insRecieptItem, _insRecieptAuto, true, true, true);
                }
                else if (option == 2)
                {
                    CashConvertionApproval(_regReqHdr, null, null, null, null, null, null, true, null, null, null, null, null, null, null, false, _regReciept, _regRecieptItem, _regRecieptAuto, true, null, null, null, false, true, false);
                }
                else if (option == 3)
                {
                    CashConvertionApproval(null, null, null, null, null, null, null, false, _insReqHdr, null, null, null, null, null, null, true, null, null, null, false, _insReciept, _insRecieptItem, _insRecieptAuto, true, false, true);
                }
                else if (option == 4)
                {
                    CashConvertionApproval(_regReqHdr, _regReqDet, _regReqSer, _regReqLogHdr, _regReqLogDet, _regReqLogSer, _regReqAuto, true, _insReqHdr, _insReqDet, _insReqSer, _insReqLogHdr, _insReqLogDet, _insReqLogSer, _insReqAuto, true, null, null, null, false, null, null, null, false, false, false);
                }
                else if (option == 5)
                {
                    CashConvertionApproval(_regReqHdr, _regReqDet, _regReqSer, _regReqLogHdr, _regReqLogDet, _regReqLogSer, _regReqAuto, true, _insReqHdr, _insReqDet, _insReqSer, _insReqLogHdr, _insReqLogDet, _insReqLogSer, _insReqAuto, true, null, null, null, false, _insReciept, _insRecieptItem, _insRecieptAuto, true, false, false);
                }
                else if (option == 6)
                {
                    CashConvertionApproval(_regReqHdr, _regReqDet, _regReqSer, _regReqLogHdr, _regReqLogDet, _regReqLogSer, _regReqAuto, true, _insReqHdr, _insReqDet, _insReqSer, _insReqLogHdr, _insReqLogDet, _insReqLogSer, _insReqAuto, true, _regReciept, _regRecieptItem, _regRecieptAuto, true, null, null, null, false, false, false);
                }
                else if (option == 7)
                {
                    CashConvertionApproval(_regReqHdr, _regReqDet, _regReqSer, _regReqLogHdr, _regReqLogDet, _regReqLogSer, _regReqAuto, true, _insReqHdr, _insReqDet, _insReqSer, _insReqLogHdr, _insReqLogDet, _insReqLogSer, _insReqAuto, true, _regReciept, _regRecieptItem, _regRecieptAuto, true, _insReciept, _insRecieptItem, _insRecieptAuto, true, false, false);
                }
                else if (option == 8)
                {
                    CashConvertionApproval(_regReqHdr, _regReqDet, _regReqSer, _regReqLogHdr, _regReqLogDet, _regReqLogSer, _regReqAuto, true, null, null, null, null, null, null, null, false, _regReciept, _regRecieptItem, _regRecieptAuto, true, null, null, null, false, false, false);
                }
                else if (option == 9)
                {
                    CashConvertionApproval(null, null, null, null, null, null, null, false, _insReqHdr, _insReqDet, _insReqSer, _insReqLogHdr, _insReqLogDet, _insReqLogSer, _insReqAuto, true, null, null, null, false, _insReciept, _insRecieptItem, _insRecieptAuto, true, false, false);
                }
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                _inventoryRepDAL = new ReptCommonDAL();
                _generalDAL = new GeneralDAL();
                CommonSearchBLL _comm = new CommonSearchBLL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();
                _reptDAL.ConnectionOpen();
                _reptDAL.BeginTransaction();

                _fmsInventoryDal = new FMS_InventoryDAL();
                _fmsInventoryDal.ConnectionOpen();
                _fmsInventoryDal.BeginTransaction();
                //updated by akila 2018/03/22
                Boolean _isStrucBaseTax = false;
                MasterCompany _masterComp = _generalDAL.GetCompByCode(_hpReversInvoiceHeader.Sah_com);
                if (_masterComp.MC_TAX_CALC_MTD == "1") _isStrucBaseTax = true;

                //END
                //_reptDAL.StartTimeModule("CC", "SAVE_STAR", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);

                Int32 _invoiceLine = 1;
                //Preparing the variable for the save
                //_reptDAL.StartTimeModule("CC", "SAVE_STAR_OBJ_FILL", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                #region  Revers Entry of the Hire Sale - Invoice and Receipt
                Int32 _reversInvoiceSeqNo = _inventoryDAL.GetSerialID();
                _invoiceNo = _ccInvoiceHeader.Sah_inv_no;
                _hpReversInvoiceHeader.Sah_seq_no = _reversInvoiceSeqNo;
                _hpReversInvoiceHeader.Sah_inv_no = _reversInvoiceSeqNo.ToString();


                var _list = from _one in _hpReversReceiptHeader
                            group _one by new { _one.Sar_manual_ref_no, _one.Sar_prefix, _one.Sar_receipt_type, _one.Sar_is_oth_shop, _one.Sar_receipt_no } into _itm
                            select new { Sar_prefix = _itm.Key.Sar_prefix, Sar_manual_ref_no = _itm.Key.Sar_manual_ref_no, Sar_receipt_type = _itm.Key.Sar_receipt_type, Sar_tot_settle_amt = _itm.Sum(p => p.Sar_tot_settle_amt), Sar_comm_amt = _itm.Sum(y => y.Sar_comm_amt), Sar_anal_5 = _itm.Sum(s => s.Sar_anal_5), Oth_col = _itm.Key.Sar_is_oth_shop, Rec_no = _itm.Key.Sar_receipt_no };

                List<RecieptHeader> _hpReversReceiptHeaderActual = new List<RecieptHeader>();
                foreach (var _itm in _list)
                {
                    if (_itm.Oth_col)
                    {
                        List<HpTransaction> _txnRef = _salesDAL.GetHpTransactionByRef(_itm.Rec_no);
                        if (_txnRef != null && _txnRef.Count > 0)
                        {

                        }
                        else
                        {
                            continue;
                        }
                    }

                    RecieptHeader _hdr = new RecieptHeader();
                    _hdr.Sar_seq_no = _inventoryDAL.GetSerialID();
                    _revReceiptSeqNo.Add(_hdr.Sar_seq_no);
                    _hdr.Sar_receipt_no = _hdr.Sar_seq_no.ToString();
                    _hdr.Sar_manual_ref_no = _itm.Sar_manual_ref_no;
                    _hdr.Sar_prefix = _itm.Sar_prefix;
                    _hdr.Sar_tot_settle_amt = _itm.Sar_tot_settle_amt;
                    _hdr.Sar_direct = false;
                    _hdr.Sar_receipt_date = _hpReversInvoiceHeader.Sah_dt;
                    _hdr.Sar_acc_no = _hpReversInvoiceHeader.Sah_anal_2;
                    _hdr.Sar_act = true;
                    _hdr.Sar_com_cd = _ccInvoiceHeader.Sah_com;
                    _hdr.Sar_comm_amt = _itm.Sar_comm_amt;
                    _hdr.Sar_anal_5 = _itm.Sar_anal_5;
                    _hdr.Sar_create_by = _ccInvoiceHeader.Sah_cre_by;
                    _hdr.Sar_create_when = DateTime.Now;
                    _hdr.Sar_currency_cd = _ccInvoiceHeader.Sah_currency;
                    _hdr.Sar_debtor_add_1 = _ccInvoiceHeader.Sah_cus_add1;
                    _hdr.Sar_debtor_add_2 = _ccInvoiceHeader.Sah_cus_add2;
                    _hdr.Sar_debtor_cd = _ccInvoiceHeader.Sah_cus_cd;
                    _hdr.Sar_debtor_name = _ccInvoiceHeader.Sah_cus_name;
                    _hdr.Sar_direct_deposit_bank_cd = string.Empty;
                    _hdr.Sar_direct_deposit_branch = string.Empty;
                    _hdr.Sar_epf_rate = 0;
                    _hdr.Sar_esd_rate = 0;
                    _hdr.Sar_is_mgr_iss = false;
                    _hdr.Sar_is_oth_shop = false;
                    _hdr.Sar_is_used = false;
                    _hdr.Sar_mob_no = string.Empty;
                    _hdr.Sar_mod_by = _ccInvoiceHeader.Sah_cre_by;
                    _hdr.Sar_mod_when = DateTime.Now;
                    _hdr.Sar_nic_no = string.Empty;
                    _hdr.Sar_oth_sr = string.Empty;
                    _hdr.Sar_profit_center_cd = _ccInvoiceHeader.Sah_pc;
                    _hdr.Sar_receipt_date = Convert.ToDateTime(_ccInvoiceHeader.Sah_dt);
                    if (_itm.Sar_receipt_type == "HPDPM" || _itm.Sar_receipt_type == "HPDPS")
                    { _hdr.Sar_receipt_type = "HPDRV"; }
                    else if (_itm.Sar_receipt_type == "VHINSR")
                    {
                        _hdr.Sar_receipt_type = "VHINSRR";
                    }
                    else if (_itm.Sar_receipt_type == "INSUR")
                    {
                        _hdr.Sar_receipt_type = "INSURR";
                    }

                    else if (_itm.Sar_receipt_type == "DPINSU")
                    {
                        _hdr.Sar_receipt_type = "DPINSR";
                    }
                    else { _hdr.Sar_receipt_type = "HPREV"; }
                    _hdr.Sar_ref_doc = string.Empty;
                    _hdr.Sar_remarks = string.Empty;
                    _hdr.Sar_ser_job_no = string.Empty;
                    _hdr.Sar_session_id = _ccInvoiceHeader.Sah_session_id;
                    _hdr.Sar_tel_no = string.Empty;
                    _hdr.Sar_uploaded_to_finance = false;
                    _hdr.Sar_used_amt = 0;
                    _hdr.Sar_wht_rate = 0;
                    _hdr.Sar_create_by = _hpReversInvoiceHeader.Sah_cre_by;
                    _hdr.Sar_create_when = _hpReversInvoiceHeader.Sah_cre_when;
                    _hdr.Sar_mod_by = _hpReversInvoiceHeader.Sah_mod_by;
                    _hdr.Sar_mod_when = _hpReversInvoiceHeader.Sah_mod_when;
                    _hdr.Sar_session_id = _hpReversInvoiceHeader.Sah_session_id;

                    _hpReversReceiptHeaderActual.Add(_hdr);
                }

                #endregion

                #region SRN
                //_reptDAL.StartTimeModule("CC", "SAVE_END_OBJ_FILL", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                //_comm.StartTimeModule("DAY END - FINAL", "", DateTime.Now, BaseCls.GlbUserDefProf, BaseCls.GlbUserComCode, BaseCls.GlbUserID, txtDate.Value.Date);

                //_reptDAL.StartTimeModule("CC", "SAVE_START_SRN", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                MasterAutoNumber _auto = new MasterAutoNumber();
                _auto.Aut_cate_cd = _hpReversInvoiceHeader.Sah_pc;
                _auto.Aut_cate_tp = "LOC";
                _auto.Aut_direction = 1;
                _auto.Aut_moduleid = "SRN";
                _auto.Aut_start_char = "SRN";
                _auto.Aut_year = _hpReversInvoiceHeader.Sah_dt.Year;
                string _srnNo = "";
                int _iLine = 0;

                //ADDED BY SACHITH
                //2013/04/05
                //FOR SRN AND DO
                //_reptDAL.StartTimeModule("CC", "GetDeliveredSerialDetail_ST", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                List<InventorySerialN> _diliverserials = _inventoryDAL.GetDeliveredSerialDetail(_hpReversInvoiceHeader.Sah_com, _invoiceNo);
                //_reptDAL.StartTimeModule("CC", "GetDeliveredSerialDetail_ED", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                //List hold delivered invoice items
                List<InvoiceItem> _srnInvoiceItem = new List<InvoiceItem>();
                //list hold delivered inventory serials
                List<ReptPickSerials> _reptSer = new List<ReptPickSerials>();
                //_reptDAL.StartTimeModule("CC", "GetInvoiceDetailByInvoice_START", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                List<InvoiceItem> _temp = _salesDAL.GetInvoiceDetailByInvoice(_invoiceNo);
                //_reptDAL.StartTimeModule("CC", "GetInvoiceDetailByInvoice_END", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                if (_diliverserials != null && _diliverserials.Count > 0)
                {
                    foreach (InventorySerialN inv in _diliverserials)
                    {
                        List<InvoiceItem> invIte = _temp.Where(x => x.Sad_itm_cd == inv.Ins_itm_cd).ToList<InvoiceItem>();
                        if (invIte != null && invIte.Count > 0)
                        {
                            if (invIte[0].Sad_itm_line != _iLine)
                            {
                                if (invIte[0].Sad_do_qty > 0)
                                {
                                    invIte[0].Sad_srn_qty = invIte[0].Sad_do_qty;
                                    invIte[0].Sad_fws_ignore_qty = invIte[0].Sad_srn_qty - invIte[0].Sad_do_qty;
                                    invIte[0].Sad_do_qty = 0;
                                }
                                else
                                {
                                    invIte[0].Sad_do_qty = 0;
                                    invIte[0].Sad_fws_ignore_qty = invIte[0].Sad_qty;
                                    invIte[0].Sad_srn_qty = invIte[0].Sad_qty;
                                }
                                //invIte[0].Sad_itm_line = _iLine;

                                _srnInvoiceItem.Add(invIte[0]);
                                //_reptDAL.StartTimeModule("CC", "GetDefaultBinCode_START", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                                //string bin = _inventoryDAL.GetDefaultBinCode(_hpReversInvoiceHeader.Sah_com, _hpReversInvoiceHeader.Sah_pc);
                                string bin = _inventoryDAL.GetDefaultBinCode(_hpReversInvoiceHeader.Sah_com, _currentLoc);
                                //_reptDAL.StartTimeModule("CC", "GetDefaultBinCode_END", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                                //_reptDAL.StartTimeModule("CC", "GetInvoiceSerialForReversal_START", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);

                                //kapila 16/7/2015
                                List<ReptPickSerials> serial = new List<ReptPickSerials>();
                                //Boolean _isRep = _salesDAL.IsMainItemReplace(invIte[0].Sad_itm_cd);
                                //if (_isRep == true)
                                serial = _salesDAL.GetInvoiceSerialForReversal_Rep(_hpReversInvoiceHeader.Sah_com, "", "", "", bin, _invoiceNo, invIte[0].Sad_itm_line);
                                // else
                                // serial = _inventoryDAL.GetInvoiceSerialForReversal(_hpReversInvoiceHeader.Sah_com, "", "", "", bin, _invoiceNo, invIte[0].Sad_itm_line);

                                //_reptDAL.StartTimeModule("CC", "GetInvoiceSerialForReversal_END", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                                if (serial != null) _reptSer.AddRange(serial);
                                _iLine = invIte[0].Sad_itm_line;
                            }
                        }
                    }
                }

                InvoiceHeader _srnInv = new InvoiceHeader();
                _srnInv = _hpReversInvoiceHeader;

                //END
                //SRN save if have delivered item
                if (_srnInvoiceItem.Count > 0)
                {
                    _foundDeliveryOrder = true;
                    InventoryHeader _inventoryHeader = new InventoryHeader();
                    _inventoryHeader.Ith_com = _hpReversInvoiceHeader.Sah_com;
                    _inventoryHeader.Ith_loc = _currentLoc;//_hpReversInvoiceHeader.Sah_pc;
                    _inventoryHeader.Ith_pc = _hpReversInvoiceHeader.Sah_pc;
                    DateTime _docDate = _hpReversInvoiceHeader.Sah_dt;
                    _inventoryHeader.Ith_doc_date = _docDate;
                    _inventoryHeader.Ith_doc_year = _docDate.Year;
                    _inventoryHeader.Ith_oth_docno = _diliverserials[0].Ins_doc_no;
                    _inventoryHeader.Ith_direct = true;
                    _inventoryHeader.Ith_doc_tp = "SRN";
                    _inventoryHeader.Ith_cate_tp = "CC";
                    _inventoryHeader.Ith_bus_entity = "";
                    _inventoryHeader.Ith_is_manual = false;
                    _inventoryHeader.Ith_manual_ref = "";
                    _inventoryHeader.Ith_sub_tp = "";
                    _inventoryHeader.Ith_remarks = "";
                    _inventoryHeader.Ith_stus = "A";
                    _inventoryHeader.Ith_cre_by = _hpReversInvoiceHeader.Sah_cre_by;
                    _inventoryHeader.Ith_cre_when = DateTime.Now;
                    _inventoryHeader.Ith_mod_by = _hpReversInvoiceHeader.Sah_cre_by;
                    _inventoryHeader.Ith_mod_when = DateTime.Now;
                    _inventoryHeader.Ith_acc_no = _hpReversInvoiceHeader.Sah_acc_no;
                    _inventoryHeader.Ith_session_id = _hpReversInvoiceHeader.Sah_session_id;
                    _hpReversInvoiceHeader.Sah_inv_tp = "HS";
                    _hpReversInvoiceHeader.Sah_inv_sub_tp = "CC";
                    _hpReversInvoiceHeader.Sah_direct = false;
                    _hpReversInvoiceHeader.Sah_ref_doc = _invoiceNo;
                    _hpReversInvoiceHeader.Sah_anal_10 = 0;
                    //  _inventoryHeader.Ith_session_id = BaseCls.GlbUserSessionID;
                    //_reptDAL.StartTimeModule("CC", "SaveReversalForCommon_START", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                    SaveReversalForCommon(_hpReversInvoiceHeader, _srnInvoiceItem, _reversInvoiceAuto, true, out   _invoiceNo, _inventoryHeader, _reptSer, null, _auto, out  _srnNo);
                    //_reptDAL.StartTimeModule("CC", "SaveReversalForCommon_END", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                    //CommonSaveReversal(_srnInv, _srnInvoiceItem, _auto, false, out _srnNo);
                    //Int32 _newSeq = _inventoryDAL.GetSerialID();
                    //_hpReversInvoiceHeader.Sah_seq_no = _newSeq;

                    //_hpReversInvoiceHeader.Sah_man_ref = _srnNo;
                    _hpReversInvoiceHeader.Sah_ref_doc = _diliverserials[0].Ins_doc_no;


                    //ADDED 2013/06/13
                    if (!string.IsNullOrEmpty(_srnNo))
                    {
                        _salesDAL.UpdateInvoiceRevNo(_invoiceNo, _srnNo);
                    }
                    //END


                    //UPDATE 2013/04/29
                    //SAVE NON DILIVERD ITEMS TO SAT_ITM TABLE
                    foreach (InvoiceItem _itm in _hpReversInvoiceItem)
                    {

                        List<ReptPickSerials> serial = (from _res in _reptSer
                                                        where _res.Tus_itm_cd == _itm.Sad_itm_cd
                                                        select _res).ToList<ReptPickSerials>();
                        if (serial == null || serial.Count <= 0)
                        {
                            _itm.Sad_seq_no = _hpReversInvoiceHeader.Sah_seq_no;
                            _itm.Sad_itm_line = _itm.Sad_itm_line;
                            _itm.Sad_inv_no = Convert.ToString(_invoiceNo);
                            _salesDAL.SaveSalesItem(_itm);

                            //updated by akila 2018/03/22
                            List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                            if (_isStrucBaseTax == true)
                            {
                                MasterItem _mstItem = _inventoryDAL.GetItem(_hpReversInvoiceHeader.Sah_com, _itm.Sad_itm_cd);
                                _itmTax = _salesDAL.GetItemTax_strucbase(_hpReversInvoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _mstItem.Mi_anal1);
                            }
                            else
                                _itmTax = _salesDAL.GetItemTax(_hpReversInvoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                            //_itmTax = _salesDAL.GetItemTax(_hpReversInvoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                            foreach (MasterItemTax _one in _itmTax)
                            {
                                InvoiceItemTax _tax = new InvoiceItemTax();
                                _tax.Satx_inv_no = _itm.Sad_inv_no;
                                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                _tax.Satx_itm_line = _itm.Sad_itm_line;
                                _tax.Satx_itm_tax_amt = (_itm.Sad_unit_rt * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                _tax.Satx_job_line = 0;
                                _tax.Satx_job_no = "";
                                _tax.Satx_seq_no = _itm.Sad_seq_no;
                                _salesDAL.SaveSalesItemTax(_tax);
                            }
                            _invoiceLine += 1;
                        }
                    }
                    //END

                }
                else
                {
                    //Save Invoice Header
                    _hpReversInvoiceHeader.Sah_ref_doc = _invoiceNo;
                    _hpReversInvoiceHeader.Sah_inv_tp = "HS";
                    _hpReversInvoiceHeader.Sah_inv_sub_tp = "CC";
                    _hpReversInvoiceHeader.Sah_direct = false;
                    _hpReversInvoiceHeader.Sah_anal_10 = 0;
                    _salesDAL.SaveSalesHeader(_hpReversInvoiceHeader);

                    //Save Invoice Items
                    foreach (InvoiceItem _itm in _hpReversInvoiceItem)
                    {

                        _itm.Sad_seq_no = _hpReversInvoiceHeader.Sah_seq_no;
                        _itm.Sad_itm_line = _invoiceLine;
                        _itm.Sad_inv_no = Convert.ToString(_hpReversInvoiceHeader.Sah_seq_no);
                        _salesDAL.SaveSalesItem(_itm);

                        List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                        //updated by akila 2018/03/22
                        if (_isStrucBaseTax == true)
                        {
                            MasterItem _mstItem = _inventoryDAL.GetItem(_hpReversInvoiceHeader.Sah_com, _itm.Sad_itm_cd);
                            _itmTax = _salesDAL.GetItemTax_strucbase(_hpReversInvoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _mstItem.Mi_anal1);
                        }
                        else
                            _itmTax = _salesDAL.GetItemTax(_hpReversInvoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                        //_itmTax = _salesDAL.GetItemTax(_hpReversInvoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                        if (_itmTax == null || _itmTax.Count <= 0) _error = "Item tax definition not setup!/nItem Code - " + _itm.Sad_itm_cd.ToString() + "/nItem Status - " + _itm.Sad_itm_stus.ToString();
                        if (!string.IsNullOrEmpty(_error))
                        {
                            //Add by Chamal 26-May-2014
                            _err = _error;
                            _convertInvoice = "";
                            _salesDAL.TransactionRollback();
                            _inventoryRepDAL.TransactionRollback();
                            _inventoryDAL.TransactionRollback();
                            _generalDAL.TransactionRollback();
                            _reptDAL.TransactionRollback();
                            return -1;
                        }

                        List<InvoiceItemTax> _invItmTax = new List<InvoiceItemTax>();
                        _invItmTax = _salesDAL.GetInvItemTax(_invoiceNo, _itm.Sad_itm_cd, _itm.Sad_itm_line);

                        foreach (InvoiceItemTax _one in _invItmTax)
                        {
                            InvoiceItemTax _tax = new InvoiceItemTax();
                            _tax.Satx_inv_no = _itm.Sad_inv_no;
                            _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                            _tax.Satx_itm_line = _itm.Sad_itm_line;
                            _tax.Satx_itm_tax_amt = _one.Satx_itm_tax_amt;//(_itm.Sad_unit_rt * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                            _tax.Satx_itm_tax_rt = _one.Satx_itm_tax_rt;
                            _tax.Satx_itm_tax_tp = _one.Satx_itm_tax_tp;
                            _tax.Satx_job_line = 0;
                            _tax.Satx_job_no = "";
                            _tax.Satx_seq_no = _itm.Sad_seq_no;
                            _salesDAL.SaveSalesItemTax(_tax);
                        }
                        _invoiceLine += 1;
                    }
                }
                #endregion
                //_reptDAL.StartTimeModule("CC", "SAVE_END_SRN", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                //_reptDAL.StartTimeModule("CC", "SAVE_START_DO", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);

                #region Save Revers receipt
                if (_hpReversReceiptHeaderActual != null)
                {
                    if (_hpReversReceiptHeaderActual.Count > 0)
                    {
                        foreach (RecieptHeader _hdr in _hpReversReceiptHeaderActual)
                        {
                            _salesDAL.SaveReceiptHeader(_hdr);
                            RecieptItem _itm = new RecieptItem();
                            _itm.Sard_cc_tp = "HS";
                            _itm.Sard_inv_no = _hpReversInvoiceHeader.Sah_seq_no.ToString();
                            _itm.Sard_line_no = 1;
                            _itm.Sard_pay_tp = "CASH";
                            _itm.Sard_receipt_no = Convert.ToString(_hdr.Sar_seq_no);
                            _itm.Sard_ref_no = _hdr.Sar_manual_ref_no;
                            _itm.Sard_settle_amt = _hdr.Sar_tot_settle_amt;
                            _itm.Sard_seq_no = _hdr.Sar_seq_no;
                            _salesDAL.SaveReceiptItem(_itm);
                        }
                    }
                }
                #endregion

                #region Save Conversion Invoice
                _ccInvoiceHeader.Sah_inv_tp = "CS";
                _ccInvoiceHeader.Sah_inv_sub_tp = "CC";
                _ccInvoiceHeader.Sah_session_id = _hpReversInvoiceHeader.Sah_session_id;
                _ccInvoiceHeader.Sah_cre_by = _hpReversInvoiceHeader.Sah_cre_by;
                _ccInvoiceHeader.Sah_cre_when = _hpReversInvoiceHeader.Sah_cre_when;
                _ccInvoiceHeader.Sah_mod_by = _hpReversInvoiceHeader.Sah_mod_by;
                _ccInvoiceHeader.Sah_mod_when = _hpReversInvoiceHeader.Sah_mod_when;
                _ccInvoiceHeader.Sah_anal_10 = 0;

                //INVENTORY DOCUMENT UPDATE BASE DOC
                //_ccInv.Ith_oth_docno = _srnNo;



                //SAVE WITH DO
                //if has delivered item
                if (_reptSer.Count > 0)
                {
                    foreach (InvoiceItem _invItm in _ccInvoiceItem)
                    {
                        decimal _doQty = _reptSer.Where(x => (x.Tus_itm_cd == _invItm.Sad_itm_cd)).Sum(k => k.Tus_qty);
                        _invItm.Sad_do_qty = _doQty;
                    }
                    // _ccInvoiceItem.ForEach(x => x.Sad_do_qty = 0);
                    //Z- CC CHRG set do qty as 1
                    try
                    {
                        _ccInvoiceItem.Where(x => x.Sad_itm_cd == "Z- CC CHRG").ToList<InvoiceItem>().ForEach(a => a.Sad_do_qty = 1);
                    }
                    catch
                    {
                    }

                    //CommonSaveInvoiceWithDeliveryOrder(_ccInvoiceHeader, _srnInvoiceItem, null, _ccReceiptHeader, _ccReceiptItem, _ccInv, _reptSer, null, _convertInvoiceAuto, _convertReceiptAuto, _invAuto, true, out _ccInvoiceNo, out _ccReceiptNo, out _ccDeliveryOrder, _inventoryDAL, _salesDAL, _inventoryRepDAL, false, false, out _error, false);
                    CommonSaveInvoiceWithDeliveryOrder(_ccInvoiceHeader, _ccInvoiceItem, null, _ccReceiptHeader, _ccReceiptItem, null, null, null, _convertInvoiceAuto, _convertReceiptAuto, null, false, out _ccInvoiceNo, out _ccReceiptNo, out _ccDeliveryOrder, _inventoryDAL, _salesDAL, _inventoryRepDAL, false, false, out _error, false, _fmsInventoryDal);
                    _reptSer.ForEach(x => x.Tus_loc = _ccInv.Ith_loc);
                    List<ReptPickSerials> _srnSerials = new List<ReptPickSerials>();
                    foreach (ReptPickSerials _ser in _reptSer)
                    {

                        ReptPickSerials _serial = _inventoryDAL.GetAvailableSerIDInformation(_ser.Tus_com, _ser.Tus_loc, _ser.Tus_itm_cd, _ser.Tus_ser_1, _ser.Tus_ser_2, _ser.Tus_ser_id.ToString());
                        _serial.Tus_base_itm_line = _ser.Tus_base_itm_line;
                        _srnSerials.Add(_serial);
                    }
                    _srnSerials.ForEach(x => x.Tus_base_doc_no = _ccInvoiceNo);
                    int InventorySeqNo = _inventoryDAL.GetSerialID();
                    _reptSer.ForEach(x => x.Tus_base_doc_no = _ccInvoiceNo);
                    _reptSer.ForEach(x => x.Tus_usrseq_no = InventorySeqNo);
                    _ccInv.Ith_pc = _ccInvoiceHeader.Sah_pc;
                    _ccInv.Ith_oth_docno = _ccInvoiceNo;
                    _ccInv.Ith_seq_no = InventorySeqNo;
                    InventoryBLL _bll = new InventoryBLL();
                    string _doNo;
                    _bll.DeliveryOrderInterCompany(_ccInv, _srnSerials, null, _invAuto, out  _doNo, _inventoryRepDAL, _inventoryDAL);
                    _doNonew = _doNo;
                    //CommonSaveInvoiceWithDeliveryOrder(_ccInvoiceHeader, _srnInvoiceItem, null, _ccReceiptHeader, _ccReceiptItem, _ccInv, _reptSer, null, _convertInvoiceAuto, _convertReceiptAuto, _invAuto, true, out _ccInvoiceNo, out _ccReceiptNo, out _ccDeliveryOrder, _inventoryDAL, _salesDAL, _inventoryRepDAL, false, false, out _error, false);



                    /*
                    //UPDATE 2013/04/29
                    //SAVE NON DILIVERD ITEMS TO SAT_ITM TABLE
                        foreach (InvoiceItem _itm in _ccInvoiceItem)
                        {

                            List<ReptPickSerials> serial = (from _res in _reptSer
                                                            where _res.Tus_itm_cd == _itm.Sad_itm_cd
                                                            select _res).ToList<ReptPickSerials>();
                            if (serial == null || serial.Count <= 0)
                            {
                                _itm.Sad_seq_no = _ccInvoiceHeader.Sah_seq_no;
                                _itm.Sad_itm_line = _itm.Sad_itm_line;
                                _itm.Sad_inv_no = _ccInvoiceNo;
                                _salesDAL.SaveSalesItem(_itm);


                                List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                                _itmTax = _salesDAL.GetItemTax(_ccInvoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                                foreach (MasterItemTax _one in _itmTax)
                                {
                                    InvoiceItemTax _tax = new InvoiceItemTax();
                                    _tax.Satx_inv_no = _itm.Sad_inv_no;
                                    _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                    _tax.Satx_itm_line = _itm.Sad_itm_line;
                                    _tax.Satx_itm_tax_amt = (_itm.Sad_unit_rt * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                    _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                    _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                    _tax.Satx_job_line = 0;
                                    _tax.Satx_job_no = "";
                                    _tax.Satx_seq_no = _itm.Sad_seq;
                                    _salesDAL.SaveSalesItemTax(_tax);
                                }
                                _invoiceLine += 1;
                            }
                        }
                    //END
                     */

                }
                //SAVE WITHOUT DO
                //if has not delivered item
                else
                {
                    CommonSaveInvoiceWithDeliveryOrder(_ccInvoiceHeader, _ccInvoiceItem, null, _ccReceiptHeader, _ccReceiptItem, null, null, null, _convertInvoiceAuto, _convertReceiptAuto, null, false, out _ccInvoiceNo, out _ccReceiptNo, out _ccDeliveryOrder, _inventoryDAL, _salesDAL, _inventoryRepDAL, false, false, out _error, false);
                }

                //if error occure in CommonSaveInvoiceWithDeliveryOrder roll back and return
                if (!string.IsNullOrEmpty(_error))
                {
                    _err = _error;
                    _convertInvoice = "";
                    _salesDAL.TransactionRollback();
                    _inventoryRepDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                    _generalDAL.TransactionRollback();
                    _reptDAL.TransactionRollback();
                    _fmsInventoryDal.TransactionRollback();
                    return -1;
                }


                #endregion
                //_reptDAL.StartTimeModule("CC", "SAVE_END_DO", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                //_reptDAL.StartTimeModule("CC", "SAVE_START_UPDATES", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);

                #region Update Revers Invoice/Receipt Auto Number by Sequence no
                _reversInvoiceAuto.Aut_year = null;
                _reversInvoiceAuto.Aut_modify_dt = null;
                if (_foundDeliveryOrder == false)
                {
                    MasterAutoNumber _reversInv = _inventoryDAL.GetAutoNumber(_reversInvoiceAuto.Aut_moduleid, _reversInvoiceAuto.Aut_direction, _reversInvoiceAuto.Aut_start_char, _reversInvoiceAuto.Aut_cate_tp, _reversInvoiceAuto.Aut_cate_cd, _reversInvoiceAuto.Aut_modify_dt, _reversInvoiceAuto.Aut_year);
                    string _revInvNo = _reversInv.Aut_cate_cd + "-" + _reversInv.Aut_start_char + _reversInv.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                    _reversInv.Aut_modify_dt = null;
                    _reversInv.Aut_year = null;
                    _inventoryDAL.UpdateAutoNumber(_reversInv);
                    _invoiceNo = _revInvNo;
                }

                foreach (Int32 _lst in _revReceiptSeqNo)
                {
                    _reversReceiptAuto.Aut_modify_dt = null;
                    _reversReceiptAuto.Aut_year = null;
                    MasterAutoNumber _reversRecipt = _inventoryDAL.GetAutoNumber(_reversReceiptAuto.Aut_moduleid, _reversReceiptAuto.Aut_direction, _reversReceiptAuto.Aut_start_char, _reversReceiptAuto.Aut_cate_tp, _reversReceiptAuto.Aut_cate_cd, _reversReceiptAuto.Aut_modify_dt, _reversReceiptAuto.Aut_year);
                    _reversRecipt.Aut_modify_dt = null;
                    _reversRecipt.Aut_year = null;
                    string _revReciptNo = _reversRecipt.Aut_cate_cd + "-" + _reversRecipt.Aut_start_char + "-" + _reversRecipt.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_reversRecipt);
                    _salesDAL.UpdateInvoiceReceipts(_invoiceNo, _revReciptNo, _hpReversInvoiceHeader.Sah_seq_no, _lst);

                }
                #endregion

                #region hp_insurance
                Int32 _insSeq = _inventoryDAL.GetSerialID();
                MasterAutoNumber _receiptAuto = new MasterAutoNumber();
                _receiptAuto.Aut_cate_cd = _reversInsurance.Hti_pc;
                _receiptAuto.Aut_cate_tp = "PC";
                _receiptAuto.Aut_direction = 1;
                _receiptAuto.Aut_modify_dt = null;
                _receiptAuto.Aut_moduleid = "RECEIPT";
                _receiptAuto.Aut_number = 0;
                _receiptAuto.Aut_start_char = "INSU";
                _receiptAuto.Aut_year = null;
                _receiptAuto.Aut_number = 0;
                MasterAutoNumber _Insnumber = _inventoryDAL.GetAutoNumber(_receiptAuto.Aut_moduleid, 1, _receiptAuto.Aut_start_char, _receiptAuto.Aut_cate_tp, _receiptAuto.Aut_cate_cd, _receiptAuto.Aut_modify_dt, _receiptAuto.Aut_year);
                string _InsNo = _receiptAuto.Aut_cate_cd + "-" + _receiptAuto.Aut_start_char + _Insnumber.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_receiptAuto);
                _reversInsurance.Hti_seq = _insSeq;
                //_reversInsurance.Hti_seq = _ccInvoiceHeader.Sah_seq_no;
                _reversInsurance.Hti_mnl_num = _InsNo;
                _reversInsurance.Hti_ref = _InsNo;
                _salesDAL.Save_HpInsu(_reversInsurance);
                #endregion



                #region Update Account Status
                _salesDAL.UpdateAccountStatusforrevert(_ccInvoiceHeader.Sah_com, _ccInvoiceHeader.Sah_pc, _ccInvoiceHeader.Sah_anal_2, "C", _ccInvoiceHeader.Sah_dt);
                #endregion

                #region Update Account Log
                HPAccountLog _hpLog = _salesDAL.GetAccountLog(_ccInvoiceHeader.Sah_anal_2);
                if (!string.IsNullOrEmpty(_hpLog.Hal_acc_no))
                {
                    _salesDAL.UpdateAccountforCashConversion(_ccInvoiceHeader.Sah_anal_2, "C", _ccInvoiceHeader.Sah_dt);

                    _hpLog.Hal_seq_no = _reversInvoiceSeqNo;
                    _hpLog.Hal_sa_sub_tp = "CC";
                    _hpLog.Hal_log_dt = _ccInvoiceHeader.Sah_dt;
                    _hpLog.Hal_invc_no = _invoiceNo;
                    _hpLog.Hal_rev_stus = true;
                    _hpLog.Hal_cre_by = _hpReversInvoiceHeader.Sah_cre_by;
                    _hpLog.Hal_cre_dt = _hpReversInvoiceHeader.Sah_cre_when;
                    _hpLog.Hal_inst_stm = 0;
                    _hpLog.Hal_init_stm = 0;
                    _hpLog.Hal_cls_dt = _ccInvoiceHeader.Sah_dt;
                    _hpLog.Hal_stus = "C";
                    _hpLog.Hal_cls_dt = _ccInvoiceHeader.Sah_dt;
                    _salesDAL.SaveHPAccountLog(_hpLog);
                }
                #endregion

                //SAVE HP TXN TABLE
                _transaction.Hpt_seq = _inventoryDAL.GetSerialID();
                _salesDAL.Save_HpTransaction(_transaction);

                //UPDATE 2012/03/02
                //GET DELIVERD ITEMS FROM SAT_HDR AND SAVE SRN


                //List<InventorySerialN> _diliverserials1 = _inventoryDAL.GetDeliveredSerialDetail(_hpReversInvoiceHeader.Sah_com,_hpReversInvoiceHeader.Sah_inv_no);

                //List<ReptPickSerials> _reptSer1 = new List<ReptPickSerials>();
                //foreach (InventorySerialN inv in _diliverserials1)
                //{
                //    ReptPickSerials serial = _inventoryDAL.Get_all_details_on_serial(inv.Ins_com, inv.Ins_loc, string.Empty, inv.Ins_itm_cd, inv.Ins_ser_1);
                //    _reptSer1.Add(serial);
                //}

                //


                //ADDED BY SACHITH
                //2012/01/11

                _salesDAL.UpdateCoverNoteAndIsApp(_ccInvoiceHeader.Sah_acc_no);
                //END
                //2013/02/28

                //UpdateCashConvertionDocNo(_invoiceNo, _ccInvoiceHeader.Sah_inv_no);
                _inventoryRepDAL.UpdateDocNoAndTp(_hpReversInvoiceHeader.Sah_ref_doc, _ccInvoiceNo, "DO");



                // Nadeeka 09-10-2015
                _salesDAL.UpdateCahsConversionDet(_ccInvoiceNo, _hpReversInvoiceHeader.Sah_ref_doc, _doNonew);


                //_reptDAL.StartTimeModule("CC", "SAVE_END_UPDATES", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                //_reptDAL.StartTimeModule("CC", "SAVE_END", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);

                //_salesDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                //_inventoryRepDAL.ConnectionClose();
                //_generalDAL.ConnectionClose();
                //_reptDAL.ConnectionClose();

                DataTable _dHdr = _salesDAL.GetSalesHdr(_ccInvoiceNo);
                DataTable _dDetail = _salesDAL.GetInvoiceDetailByInvoiceTable(_ccInvoiceNo);
                if (_dHdr.Rows.Count <= 0)
                {
                    throw new System.ArgumentException("Data not saved correctly", "Header Details");
                }
                if (_dDetail.Rows.Count <= 0)
                {
                    throw new System.ArgumentException("Data not saved correctly", "Item Details");
                }


                _salesDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _generalDAL.TransactionCommit();
                _reptDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();

                //    _tr.Complete();
                //}
                _err = "";
                _convertInvoice = _ccInvoiceNo;
            }
            catch (Exception ex)
            {
                _err = ex.Message;
                _convertInvoice = "";
                _salesDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _reptDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
            }
            return _effect;

        }

        #region Price Enquiry
        //  Shani 09/07/2012
        public DataTable EnquirePriceDetails(string user, string com, string pc, string piceBookCD, string priceLevel, string itemCD, string customerCD, string Type, DateTime frmDt, DateTime toDt, string circular, string cate1, string cate2, string cate3, Int32 type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.EnquirePriceDetails(user, com, pc, piceBookCD, priceLevel, itemCD, customerCD, Type, frmDt, toDt, circular, cate1, cate2, cate3, type);
        }
        //Shani 13/07/2012
        public List<MasterPartyHierachy> get_hierarchy(string _cate)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.get_hierarchy(_cate);
        }
        //Shani 13/07/2012
        //public DataTable get_hp_schemes(DateTime as_atDate, string itemCD, string parytTP, string partyCD, string brand, string cate1, string cate2)
        //{
        //    _salesDAL = new SalesDAL();
        //    return _salesDAL.get_hp_schemes(as_atDate,itemCD, parytTP, partyCD, brand, cate1,cate2);
        //}
        //Shani 14/07/2012
        public List<HpSchemeDefinition> get_hp_Schemes(DateTime as_atDate, string itemCD, string parytTP, string partyCD, string brand, string cate1, string cate2)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.get_hp_Schemes(as_atDate, itemCD, parytTP, partyCD, brand, cate1, cate2);
        }

        public DataTable EnquirePriceDetails_forAsAtDate(string user, string com, string pc, string piceBookCD, string priceLevel, string itemCD, string customerCD, string Type, DateTime asAtDate, string circular, string cate1, string cate2, string cate3, Int32 type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.EnquirePriceDetails_forAsAtDate(user, com, pc, piceBookCD, priceLevel, itemCD, customerCD, Type, asAtDate, circular, cate1, cate2, cate3, type);
        }
        //use this instead of get_hp_Schemes
        public List<HpSchemeDefinition> get_HP_Schemes(DateTime as_atDate, string itemCD, string parytTP, string partyCD, string brand, string cate1, string cate2, string schemeCD, string priceBook, string priceLevel)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.get_HP_Schemes(as_atDate, itemCD, parytTP, partyCD, brand, cate1, cate2, schemeCD, priceBook, priceLevel);
        }
        //Shani 25/07/2012
        public Decimal GET_Item_vat_Rate(string com, string itemCD, string taxCode)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GET_Item_vat_Rate(com, itemCD, taxCode);
        }
        #endregion  Price Enquiry

        //darshana 08/07/2012
        public List<TempCommonPrice> GetCommonPriceBook(string _usr, string _ip, Int32 _count)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCommonPriceBook(_usr, _ip, _count);
        }

        //darshana 08/07/2012
        public List<TempCommonPrice> GetItemsWithPrice(string _user, string _ip, string _pb, string _lvl)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetItemsWithPrice(_user, _ip, _pb, _lvl);
        }

        //darshana 03/07/2012
        public BlackListCustomers GetBlackListCustomerDetails(string _cus, Int32 _active)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetBlackListCustomerDetails(_cus, _active);
        }

        //darshana 03/07/2012
        public MasterItem getMasterItemDetails(string _company, string _item, Int16 _active)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getMasterItemDetails(_company, _item, _active);
        }
        public MasterItem getMasterItemDetails2(string _company, string _item)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetItem(_company, _item);
        }
        //darshana 05/07/2012
        public List<PriceDefinitionRef> GetPriceBooksForPC(string _com, string _pc, string _type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceBooksForPC(_com, _pc, _type);
        }

        //darshana 08/07/2012
        public List<HpSchemeDefinition> GetAllScheme(string _type, string _value, string _book, string _level, DateTime _date, string _item, string _brand, string _maincat, string _cat, string _scheme)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAllScheme(_type, _value, _book, _level, _date, _item, _brand, _maincat, _cat, _scheme);
        }

        //darshana 08/07/2012
        public List<HpSchemeDefinition> GetAllSchemeNew(string _type, string _value, string _book, string _level, DateTime _date, string _item, string _brand, string _maincat, string _cat, string _scheme, string _promo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAllSchemeNew(_type, _value, _book, _level, _date, _item, _brand, _maincat, _cat, _scheme, _promo);
        }

        //darshana 10/07/2012
        public Int32 DeleteTempPrice(string usr, string ip, string itm)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int32 effect = _salesDAL.DeleteTempPrice(usr, ip, itm);
            _salesDAL.ConnectionClose();
            return effect;
        }
        public Int32 DeleteMgrIssueReceive(Int32 _seqno, string _com, string _pc, string _recno, Decimal _val)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int32 effect = _salesDAL.DeleteMgrIssueReceive(_seqno, _com, _pc, _recno, _val);
            _salesDAL.ConnectionClose();
            return effect;
        }

        public Int32 Save_mgr_rcv(string _com, string _pc, string _accno, string _recno, DateTime _dt, Decimal _amt, string _creby, string _rem)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int32 effect = _salesDAL.Save_mgr_rcv(_com, _pc, _accno, _recno, _dt, _amt, _creby, _rem);
            _salesDAL.ConnectionClose();
            return effect;
        }

        //kapila 13-7/2012
        public Int16 Approve_group_Sale(string _groupSaleCode, string _user)
        {

            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int16 X = _salesDAL.Approve_group_Sale(_groupSaleCode, _user);
            _salesDAL.ConnectionClose();
            return X;
        }

        //darshana 12/07/2012
        public HpSchemeDetails getSchemeDetails(string _type, string _value, Int16 _active, string _cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getSchemeDetails(_type, _value, _active, _cd);
        }

        //darshana 15/07/2012
        public List<HpServiceCharges> getServiceCharges(string _type, string _value, string _cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getServiceCharges(_type, _value, _cd);
        }

        //darshana 15/07/2012
        public List<HpServiceCharges> getServiceChargesNew(string _type, string _value, string _cd, DateTime _accDt)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getServiceChargesNew(_type, _value, _cd, _accDt);
        }

        //darshana 16/07/2012
        public List<HpOtherCharges> GetOtherCharges(string _scheme, string _book, string _level, DateTime _date, string _item, string _brand, string _maincat, string _cat)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetOtherCharges(_scheme, _book, _level, _date, _item, _brand, _maincat, _cat);
        }

        //darshana 17/07/2012
        public List<HpAdditionalServiceCharges> getAddServiceCharges(string _scheme, string _type, string _value, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getAddServiceCharges(_scheme, _type, _value, _date);
        }

        //darshana 18/07/2012
        public List<HpInsuranceDefinition> GetInsuDefinition(string _scheme, string _type, string _value, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInsuDefinition(_scheme, _type, _value, _date);
        }

        //darshana 18/07/2012
        public HpSchemeSheduleDefinition GetSchemeSheduleDef(string _scheme, Int16 _rentNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchemeSheduleDef(_scheme, _rentNo);
        }

        //darshana 25/07/2012
        public HpSystemParameters GetSystemParameter(string _type, string _value, string _code, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSystemParameter(_type, _value, _code, _date);
        }

        //darshana 26/07/2012
        public MasterCompanyItem GetAllCompanyItems(string _com, string _item, Int16 _active)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAllCompanyItems(_com, _item, _active);
        }

        //darshana 24/07/2012
        public Int32 CreateCustomer(string _pc, MasterBusinessEntity _businessCompany, out string _cusCode)
        {
            Int32 _effect = 0;
            string _cusNo = "";

            //using (TransactionScope _tr = new TransactionScope())
            //{
            _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen();
            _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen();

            MasterAutoNumber _auto = new MasterAutoNumber();
            _auto.Aut_cate_cd = null;
            _auto.Aut_cate_tp = null;
            _auto.Aut_moduleid = "CUS";
            _auto.Aut_number = 0;
            _auto.Aut_start_char = "CONT";

            MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
            _cusNo = _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
            _inventoryDAL.UpdateAutoNumber(_auto);
            _businessCompany.Mbe_cd = _cusNo;
            //_salesDAL.SaveCustomerDetail(_businessCompany);
            _effect = _salesDAL.SaveBusinessEntityDetail(_businessCompany);

            _salesDAL.ConnectionClose();
            _inventoryDAL.ConnectionClose();
            _effect = 1;
            //    _tr.Complete();
            //}

            _cusCode = _cusNo;
            return _effect;
        }

        //kapila
        public List<MasterSalesPriorityHierarchy> get_pc_info_by_code(string _code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.get_pc_info_by_code(_code);
        }

        //kapila
        public Boolean IsGroupSaleCodeFound(string _grpCode)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.IsGroupSaleCodeFound(_grpCode);
        }

        public Int32 GetGroupSaleDet(string _groupSaleCode, out  Int32 _noofacc, out  Int32 _noofprod, out  Int32 _noofcust, out  Decimal _val)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetGroupSaleDet(_groupSaleCode, out  _noofacc, out _noofprod, out  _noofcust, out  _val);
        }

        public Int32 SaveReceiptHeader(RecieptHeader _recieptHeader)
        {

            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            int i = _salesDAL.SaveReceiptHeader(_recieptHeader);
            _salesDAL.ConnectionClose();
            return i;



        }

        public Int32 SaveReceiptItem(RecieptItem _recieptItem)
        {

            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            int i = _salesDAL.SaveReceiptItem(_recieptItem);
            _salesDAL.ConnectionClose();
            return i;

        }

        public string GetRecieptNo(MasterAutoNumber _receiptAuto)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_receiptAuto.Aut_moduleid, (short)_receiptAuto.Aut_direction, _receiptAuto.Aut_start_char, _receiptAuto.Aut_cate_tp, _receiptAuto.Aut_cate_cd, _receiptAuto.Aut_modify_dt, _receiptAuto.Aut_year);
            string _cusNo = _receiptAuto.Aut_cate_tp + "-" + _receiptAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
            _inventoryDAL.UpdateAutoNumber(_receiptAuto);

            return _cusNo;
        }

        public DataTable Get_ESD_EPF_WHT(string com, string pc, DateTime p_reciptDate)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            DataTable dt = _salesDAL.Get_ESD_EPF_WHT(com, pc, p_reciptDate);
            _salesDAL.ConnectionClose();
            return dt;
        }

        #region Customer Creation

        public Int32 SaveBusinessEntityDetail(MasterBusinessEntity _businessEntity, CustomerAccountRef _account, List<MasterBusinessEntityInfo> bisInfoList, out string customerCD, List<MasterBusinessEntitySalesType> SalesType)
        {
            Int32 effect = 0;
            try
            {
                //using (TransactionScope _tr = new TransactionScope())
                {
                    _salesDAL = new SalesDAL();
                    _salesDAL.ConnectionOpen();
                    _salesDAL.BeginTransaction();

                    _inventoryDAL = new InventoryDAL();
                    _inventoryDAL.ConnectionOpen();
                    _inventoryDAL.BeginTransaction();

                    //Added by Prabhath on 04/09/2013
                    _ScmCommonDAL = new SCMCommonDAL();
                    _ScmCommonDAL.ConnectionOpen();
                    _ScmCommonDAL.BeginTransaction();

                    if (_businessEntity.Mbe_cd == null || _businessEntity.Mbe_cd == null)
                    {

                        //new customer
                        MasterAutoNumber _auto = new MasterAutoNumber();
                        //_auto.Aut_cate_cd = _businessEntity.Mbe_cre_pc;//_invoiceHeader.Sah_pc;
                        //_auto.Aut_cate_tp = "PRO";
                        _auto.Aut_moduleid = "CUS";
                        _auto.Aut_number = 0;
                        _auto.Aut_start_char = "CONT";

                        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                        // MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, null, _auto.Aut_modify_dt, _auto.Aut_year);
                        string _cusNo = _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_auto);
                        _businessEntity.Mbe_cd = _cusNo;

                        customerCD = _cusNo;
                        effect = _salesDAL.SaveBusinessEntityDetail(_businessEntity);

                        _account.Saca_cust_cd = customerCD;
                        if (_account.Saca_crdt_lmt > 0)
                        {
                            _salesDAL.SaveCustomerAccount(_account);
                        }

                        //sales type save
                        if (SalesType != null && SalesType.Count > 0)
                        {
                            foreach (MasterBusinessEntitySalesType sal in SalesType)
                            {
                                sal.Mbsa_cd = customerCD;
                                _salesDAL.SaveCustomerSalesTypes(sal);
                            }
                            //Added by Prabhath on 04/09/2013
                            _ScmCommonDAL.SaveCustomer(_businessEntity);
                        }

                        foreach (MasterBusinessEntityInfo bis in bisInfoList)
                        {
                            bis.Mbei_cd = customerCD;
                            _salesDAL.SaveBusinessEntityInfo(bis);
                        }
                    }
                    else
                    {
                        customerCD = string.Empty;
                    }
                    //_salesDAL.ConnectionClose();
                    //_inventoryDAL.ConnectionClose();
                    _salesDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();
                    //Added by Prabhath on 04/09/2013
                    _ScmCommonDAL.TransactionCommit();
                    //  _tr.Complete();
                }


            }
            catch (Exception ex)
            {
                customerCD = string.Empty;
                customerCD = "ERROR : " + ex.Message.ToString();
                //  return -1;
                effect = -1;

                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();

            }


            return effect;

        }

        public DataTable GetBusinessEntityTypes(string category)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            DataTable dt = _salesDAL.GetBusinessEntityTypes(category);

            _salesDAL.ConnectionClose();
            return dt;
        }

        public DataTable GetBusinessEntityAllValues(string category, string type_)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            DataTable dt = _salesDAL.GetBusinessEntityAllValues(category, type_);
            _salesDAL.ConnectionClose();
            return dt;
        }

        public MasterBusinessEntity GetCustomerProfile(string CustCD, string nic, string DL, string PPNo, string brNo)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            MasterBusinessEntity ent = _salesDAL.GetCustomerProfile(CustCD, nic, DL, PPNo, brNo);
            _salesDAL.ConnectionClose();
            return ent;
        }

        //Shani 04/08/2012
        public Int32 UpdateBusinessEntityProfile(MasterBusinessEntity _businessEntity, string modby, DateTime modDate, Decimal Newcredlimit, List<MasterBusinessEntityInfo> bisInfoList, List<MasterBusinessEntitySalesType> _salesTypes)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int32 effect = -1;
            effect = _salesDAL.UpdateBusinessEntityProfile(_businessEntity, 1);
            effect = effect + _salesDAL.UpdateCustomerCreditLimit(_businessEntity.Mbe_com, _businessEntity.Mbe_cd, modby, modDate, Newcredlimit);

            foreach (MasterBusinessEntityInfo bis in bisInfoList)
            {
                bis.Mbei_cd = _businessEntity.Mbe_cd;
                effect = effect + _salesDAL.UpdateBusinessEntityInfo(bis);
            }
            if (_salesTypes != null && _salesTypes.Count > 0)
            {
                string _type = "";
                _salesTypes[0].Mbsa_cd = _businessEntity.Mbe_cd;
                foreach (MasterBusinessEntitySalesType _sal in _salesTypes)
                {
                    _type = _type + "," + _sal.Mbsa_sa_tp;
                }
                _type = _type.Substring(1, _type.Length - 1);
                _salesDAL.UpdateCustomerSalesTypes(_salesTypes[0], _type);

            }
            else
            {
                MasterBusinessEntitySalesType _sal = new MasterBusinessEntitySalesType();
                _sal.Mbsa_com = _businessEntity.Mbe_com;
                _sal.Mbsa_cd = _businessEntity.Mbe_cd;
                _salesDAL.UpdateCustomerSalesTypes(_sal, "");
            }


            _salesDAL.ConnectionClose();
            return effect;
        }
        //public Int32 UpdateCustomerCreditLimit(string _com, string _cusCD, string modBy, DateTime modDate, decimal _newCreditLimit)
        //{ 

        //}
        #endregion

        #region Commission Calculation - Written By Prabhath on 03/08/2012



        Dictionary<ItemHierarchyElement, string> ISales.FixItemHierarchyElements(string _serial, string _promotion, string _item, string _brand, string _maincategory, string _subcategory, string _pricebook, string _pricelevel)
        {
            Dictionary<ItemHierarchyElement, string> _list = null;
            _list.Add(ItemHierarchyElement.SERIAL, _serial);
            _list.Add(ItemHierarchyElement.PROMOTION, _promotion);
            _list.Add(ItemHierarchyElement.ITEM, _item);
            _list.Add(ItemHierarchyElement.BRAND, _brand);
            _list.Add(ItemHierarchyElement.MAIN_CATEGORY, _maincategory);
            _list.Add(ItemHierarchyElement.SUB_CATEGORY, _subcategory);
            _list.Add(ItemHierarchyElement.PRICE_BOOK, _pricebook);
            _list.Add(ItemHierarchyElement.PRICE_LEVEL, _pricelevel);
            return _list;

        }
        public List<CashCommissionDetailRef> GetCashCommissionDetail(string _invoicetype, DateTime _date, string _pricebook, string _pricelevel, string _com, string _pc)
        {
            //_salesDAL = new SalesDAL();
            return _salesDAL.GetCashCommissionDetail(_invoicetype, _date, _pricebook, _pricelevel, _com, _pc, 0);
        }
        public List<CashCommissionDetailRef> CheckItemHierarchyWithinLocationHierarchy(string _company, string _profitcenter, List<MasterSalesPriorityHierarchy> _Hierarchy, List<CashCommissionDetailRef> _list, Dictionary<ItemHierarchyElement, string> _itemHierarchy, bool _isPromo)
        {
            List<CashCommissionDetailRef> _returnlist = null;
            string _pc = "";
            string _zone = "";
            string _area = "";
            string _reg = "";
            string _gpc = "";
            string _comp = "";
            string _chnl = "";
            string _schnl = "";

            //  string _type = "";
            //  string _value = "";


            if (_Hierarchy != null)
                if (_Hierarchy.Count > 0)
                {
                    foreach (MasterSalesPriorityHierarchy _one in _Hierarchy)
                    {
                        // _type = _one.Mpi_cd;
                        // _value = _one.Mpi_val;
                        if (_one.Mpi_cd == "PC") _pc = _one.Mpi_val;
                        if (_one.Mpi_cd == "AREA") _area = _one.Mpi_val;
                        if (_one.Mpi_cd == "CHNL") _chnl = _one.Mpi_val;
                        if (_one.Mpi_cd == "SCHNL") _schnl = _one.Mpi_val;
                        if (_one.Mpi_cd == "COM") _comp = _one.Mpi_val;
                        if (_one.Mpi_cd == "GPC") _gpc = _one.Mpi_val;
                        if (_one.Mpi_cd == "ZONE") _zone = _one.Mpi_val;
                        if (_one.Mpi_cd == "REG") _reg = _one.Mpi_val;
                    }
                }

            //check for promotion difinitions
            if (_isPromo)
            {
                if (!string.IsNullOrEmpty(_itemHierarchy[ItemHierarchyElement.DISCOUNT]))
                {
                    int _disSeq = 0;
                    try
                    {
                        _disSeq = Convert.ToInt32(_itemHierarchy[ItemHierarchyElement.DISCOUNT]);
                    }
                    catch (Exception)
                    {
                        _disSeq = 0;
                    }

                    var _chkDiscount = (from _l in _list where _l.Sccd_promo_dis_seq == _disSeq && ((_l.Sccd_pty_tp == "PC" && _l.Sccd_pty_cd == _pc) || (_l.Sccd_pty_tp == "ZONE" && _l.Sccd_pty_cd == _zone) || (_l.Sccd_pty_tp == "REG" && _l.Sccd_pty_cd == _reg) || (_l.Sccd_pty_tp == "AREA" && _l.Sccd_pty_cd == _area) || (_l.Sccd_pty_tp == "SCHNL" && _l.Sccd_pty_cd == _schnl) || (_l.Sccd_pty_tp == "CHNL" && _l.Sccd_pty_cd == _chnl) || (_l.Sccd_pty_tp == "COM" && _l.Sccd_pty_cd == _comp) || (_l.Sccd_pty_tp == "GPC" && _l.Sccd_pty_cd == _gpc)) select _l).ToList();
                    if (_chkDiscount != null) if (_chkDiscount.Count > 0) { _returnlist = _chkDiscount; goto END; }
                }

            }

            //check for serial
            if (!string.IsNullOrEmpty(_itemHierarchy[ItemHierarchyElement.SERIAL]))
            {
                var _chkSerial = (from _l in _list where _l.Sccd_ser == _itemHierarchy[ItemHierarchyElement.SERIAL] && ((_l.Sccd_pty_tp == "PC" && _l.Sccd_pty_cd == _pc) || (_l.Sccd_pty_tp == "ZONE" && _l.Sccd_pty_cd == _zone) || (_l.Sccd_pty_tp == "REG" && _l.Sccd_pty_cd == _reg) || (_l.Sccd_pty_tp == "AREA" && _l.Sccd_pty_cd == _area) || (_l.Sccd_pty_tp == "SCHNL" && _l.Sccd_pty_cd == _schnl) || (_l.Sccd_pty_tp == "CHNL" && _l.Sccd_pty_cd == _chnl) || (_l.Sccd_pty_tp == "COM" && _l.Sccd_pty_cd == _comp) || (_l.Sccd_pty_tp == "GPC" && _l.Sccd_pty_cd == _gpc)) && _l.Sccd_promo_dis_seq == 0 select _l).ToList();
                if (_chkSerial != null) if (_chkSerial.Count > 0) { _returnlist = _chkSerial; goto END; }
            }
            //check for Prmotion
            if (!string.IsNullOrEmpty(_itemHierarchy[ItemHierarchyElement.PROMOTION]))
            {
                var _chkPromotion = (from _l in _list where _l.Sccd_pro == _itemHierarchy[ItemHierarchyElement.PROMOTION] && ((_l.Sccd_pty_tp == "PC" && _l.Sccd_pty_cd == _pc) || (_l.Sccd_pty_tp == "ZONE" && _l.Sccd_pty_cd == _zone) || (_l.Sccd_pty_tp == "REG" && _l.Sccd_pty_cd == _reg) || (_l.Sccd_pty_tp == "AREA" && _l.Sccd_pty_cd == _area) || (_l.Sccd_pty_tp == "SCHNL" && _l.Sccd_pty_cd == _schnl) || (_l.Sccd_pty_tp == "CHNL" && _l.Sccd_pty_cd == _chnl) || (_l.Sccd_pty_tp == "COM" && _l.Sccd_pty_cd == _comp) || (_l.Sccd_pty_tp == "GPC" && _l.Sccd_pty_cd == _gpc)) && _l.Sccd_promo_dis_seq == 0 select _l).ToList();
                if (_chkPromotion != null) if (_chkPromotion.Count > 0) { _returnlist = _chkPromotion; goto END; }
            }
            //check for Item
            var _chkItem = (from _l in _list where _l.Sccd_itm == _itemHierarchy[ItemHierarchyElement.ITEM] && ((_l.Sccd_pty_tp == "PC" && _l.Sccd_pty_cd == _pc) || (_l.Sccd_pty_tp == "ZONE" && _l.Sccd_pty_cd == _zone) || (_l.Sccd_pty_tp == "REG" && _l.Sccd_pty_cd == _reg) || (_l.Sccd_pty_tp == "AREA" && _l.Sccd_pty_cd == _area) || (_l.Sccd_pty_tp == "SCHNL" && _l.Sccd_pty_cd == _schnl) || (_l.Sccd_pty_tp == "CHNL" && _l.Sccd_pty_cd == _chnl) || (_l.Sccd_pty_tp == "COM" && _l.Sccd_pty_cd == _comp) || (_l.Sccd_pty_tp == "GPC" && _l.Sccd_pty_cd == _gpc)) && _l.Sccd_promo_dis_seq == 0 select _l).ToList();
            if (_chkItem != null) if (_chkItem.Count > 0) { _returnlist = _chkItem; goto END; }

            //check for Brand 'n Sub Category
            var _chkBrandnSubCategory = (from _l in _list where _l.Sccd_brd == _itemHierarchy[ItemHierarchyElement.BRAND] && _l.Sccd_cat == _itemHierarchy[ItemHierarchyElement.SUB_CATEGORY] && ((_l.Sccd_pty_tp == "PC" && _l.Sccd_pty_cd == _pc) || (_l.Sccd_pty_tp == "ZONE" && _l.Sccd_pty_cd == _zone) || (_l.Sccd_pty_tp == "REG" && _l.Sccd_pty_cd == _reg) || (_l.Sccd_pty_tp == "AREA" && _l.Sccd_pty_cd == _area) || (_l.Sccd_pty_tp == "SCHNL" && _l.Sccd_pty_cd == _schnl) || (_l.Sccd_pty_tp == "CHNL" && _l.Sccd_pty_cd == _chnl) || (_l.Sccd_pty_tp == "COM" && _l.Sccd_pty_cd == _comp) || (_l.Sccd_pty_tp == "GPC" && _l.Sccd_pty_cd == _gpc)) && _l.Sccd_promo_dis_seq == 0 select _l).ToList();
            if (_chkBrandnSubCategory != null) if (_chkBrandnSubCategory.Count > 0) { _returnlist = _chkBrandnSubCategory; goto END; }

            //check for Brand 'n Main Category
            var _chkBrandnMainCategory = (from _l in _list where _l.Sccd_brd == _itemHierarchy[ItemHierarchyElement.BRAND] && _l.Sccd_main_cat == _itemHierarchy[ItemHierarchyElement.MAIN_CATEGORY] && ((_l.Sccd_pty_tp == "PC" && _l.Sccd_pty_cd == _pc) || (_l.Sccd_pty_tp == "ZONE" && _l.Sccd_pty_cd == _zone) || (_l.Sccd_pty_tp == "REG" && _l.Sccd_pty_cd == _reg) || (_l.Sccd_pty_tp == "AREA" && _l.Sccd_pty_cd == _area) || (_l.Sccd_pty_tp == "SCHNL" && _l.Sccd_pty_cd == _schnl) || (_l.Sccd_pty_tp == "CHNL" && _l.Sccd_pty_cd == _chnl) || (_l.Sccd_pty_tp == "COM" && _l.Sccd_pty_cd == _comp) || (_l.Sccd_pty_tp == "GPC" && _l.Sccd_pty_cd == _gpc)) && _l.Sccd_promo_dis_seq == 0 select _l).ToList();
            if (_chkBrandnMainCategory != null) if (_chkBrandnMainCategory.Count > 0) { _returnlist = _chkBrandnMainCategory; goto END; }

            //check for Brand - check others for null
            var _chkBrand = (from _l in _list where _l.Sccd_brd == _itemHierarchy[ItemHierarchyElement.BRAND] && _l.Sccd_ser == string.Empty && _l.Sccd_pro == string.Empty && _l.Sccd_itm == string.Empty && _l.Sccd_main_cat == string.Empty && _l.Sccd_cat == string.Empty && ((_l.Sccd_pty_tp == "PC" && _l.Sccd_pty_cd == _pc) || (_l.Sccd_pty_tp == "ZONE" && _l.Sccd_pty_cd == _zone) || (_l.Sccd_pty_tp == "REG" && _l.Sccd_pty_cd == _reg) || (_l.Sccd_pty_tp == "AREA" && _l.Sccd_pty_cd == _area) || (_l.Sccd_pty_tp == "SCHNL" && _l.Sccd_pty_cd == _schnl) || (_l.Sccd_pty_tp == "CHNL" && _l.Sccd_pty_cd == _chnl) || (_l.Sccd_pty_tp == "COM" && _l.Sccd_pty_cd == _comp) || (_l.Sccd_pty_tp == "GPC" && _l.Sccd_pty_cd == _gpc)) && _l.Sccd_promo_dis_seq == 0 select _l).ToList();
            if (_chkBrand != null) if (_chkBrand.Count > 0) { _returnlist = _chkBrand; goto END; }

            //check for Sub Category - check others for null
            var _chkSubCategory = (from _l in _list where _l.Sccd_cat == _itemHierarchy[ItemHierarchyElement.SUB_CATEGORY] && _l.Sccd_brd == string.Empty && _l.Sccd_ser == string.Empty && _l.Sccd_pro == string.Empty && _l.Sccd_itm == string.Empty && _l.Sccd_main_cat == string.Empty && ((_l.Sccd_pty_tp == "PC" && _l.Sccd_pty_cd == _pc) || (_l.Sccd_pty_tp == "ZONE" && _l.Sccd_pty_cd == _zone) || (_l.Sccd_pty_tp == "REG" && _l.Sccd_pty_cd == _reg) || (_l.Sccd_pty_tp == "AREA" && _l.Sccd_pty_cd == _area) || (_l.Sccd_pty_tp == "SCHNL" && _l.Sccd_pty_cd == _schnl) || (_l.Sccd_pty_tp == "CHNL" && _l.Sccd_pty_cd == _chnl) || (_l.Sccd_pty_tp == "COM" && _l.Sccd_pty_cd == _comp) || (_l.Sccd_pty_tp == "GPC" && _l.Sccd_pty_cd == _gpc)) && _l.Sccd_promo_dis_seq == 0 select _l).ToList();
            if (_chkSubCategory != null) if (_chkSubCategory.Count > 0) { _returnlist = _chkSubCategory; goto END; }

            //check for Main Category - check others for null
            var _chkMainCategory = (from _l in _list where _l.Sccd_main_cat == _itemHierarchy[ItemHierarchyElement.MAIN_CATEGORY] && _l.Sccd_brd == string.Empty && _l.Sccd_ser == string.Empty && _l.Sccd_pro == string.Empty && _l.Sccd_itm == string.Empty && _l.Sccd_cat == string.Empty && ((_l.Sccd_pty_tp == "PC" && _l.Sccd_pty_cd == _pc) || (_l.Sccd_pty_tp == "ZONE" && _l.Sccd_pty_cd == _zone) || (_l.Sccd_pty_tp == "REG" && _l.Sccd_pty_cd == _reg) || (_l.Sccd_pty_tp == "AREA" && _l.Sccd_pty_cd == _area) || (_l.Sccd_pty_tp == "SCHNL" && _l.Sccd_pty_cd == _schnl) || (_l.Sccd_pty_tp == "CHNL" && _l.Sccd_pty_cd == _chnl) || (_l.Sccd_pty_tp == "COM" && _l.Sccd_pty_cd == _comp) || (_l.Sccd_pty_tp == "GPC" && _l.Sccd_pty_cd == _gpc)) && _l.Sccd_promo_dis_seq == 0 select _l).ToList();
            if (_chkMainCategory != null) if (_chkMainCategory.Count > 0) { _returnlist = _chkMainCategory; goto END; }

            //check for Main Category 'n Sub Category - check others for null
            //var _chkMainCategorynSubCategory = (from _l in _list where _l.Sccd_main_cat == _itemHierarchy[ItemHierarchyElement.MAIN_CATEGORY] && _l.Sccd_cat == _itemHierarchy[ItemHierarchyElement.SUB_CATEGORY] && _l.Sccd_brd == string.Empty && _l.Sccd_ser == string.Empty && _l.Sccd_pro == string.Empty && _l.Sccd_itm == string.Empty && ((_l.Sccd_pty_tp == "PC" && _l.Sccd_pty_cd == _pc) || (_l.Sccd_pty_tp == "ZONE" && _l.Sccd_pty_cd == _zone) || (_l.Sccd_pty_tp == "REG" && _l.Sccd_pty_cd == _reg) || (_l.Sccd_pty_tp == "AREA" && _l.Sccd_pty_cd == _area) || (_l.Sccd_pty_tp == "SCHNL" && _l.Sccd_pty_cd == _schnl) || (_l.Sccd_pty_tp == "CHNL" && _l.Sccd_pty_cd == _chnl) || (_l.Sccd_pty_tp == "COM" && _l.Sccd_pty_cd == _comp) || (_l.Sccd_pty_tp == "GPC" && _l.Sccd_pty_cd == _gpc)) && _l.Sccd_promo_dis_seq == 0 select _l).ToList();
            //if (_chkMainCategorynSubCategory != null) if (_chkMainCategorynSubCategory.Count > 0) { _returnlist = _chkMainCategorynSubCategory; goto END; }

            //check for Price Book and Level - check others for null
            var _chkPriceBooknLevel = (from _l in _list where _l.Sccd_cat == string.Empty && _l.Sccd_brd == string.Empty && _l.Sccd_ser == string.Empty && _l.Sccd_pro == string.Empty && _l.Sccd_itm == string.Empty && _l.Sccd_main_cat == string.Empty && ((_l.Sccd_pty_tp == "PC" && _l.Sccd_pty_cd == _pc) || (_l.Sccd_pty_tp == "ZONE" && _l.Sccd_pty_cd == _zone) || (_l.Sccd_pty_tp == "REG" && _l.Sccd_pty_cd == _reg) || (_l.Sccd_pty_tp == "AREA" && _l.Sccd_pty_cd == _area) || (_l.Sccd_pty_tp == "SCHNL" && _l.Sccd_pty_cd == _schnl) || (_l.Sccd_pty_tp == "CHNL" && _l.Sccd_pty_cd == _chnl) || (_l.Sccd_pty_tp == "COM" && _l.Sccd_pty_cd == _comp) || (_l.Sccd_pty_tp == "GPC" && _l.Sccd_pty_cd == _gpc)) && _l.Sccd_promo_dis_seq == 0 select _l).ToList();
            if (_chkPriceBooknLevel != null) if (_chkPriceBooknLevel.Count > 0) { _returnlist = _chkPriceBooknLevel; goto END; }

            //}
        // }
        END:
            return _returnlist;


        }
        public List<CashCommissionDetailRef> GetCommissionStructure(string _company, string _profitcenter, string _invoicetype, DateTime _date, string _pricebook, string _pricelevel, string _executive, string _exetype, Dictionary<ItemHierarchyElement, string> _itemHierarchyElement, string _salesPriorityHierarchyCategory, string _salesPriorityHierarchyType, out List<CashCommissionDetailRef> _listCE, bool _isPromo)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            List<CashCommissionDetailRef> _returnList = null;
            int isCE = _exetype == "CE" ? 1 : 0;
            List<CashCommissionDetailRef> _list = _salesDAL.GetCashCommissionDetail(_invoicetype, _date, _pricebook, _pricelevel, _company, _profitcenter, isCE);
            List<MasterSalesPriorityHierarchy> _hierarchy = _salesDAL.GetSalesPriorityHierarchy(_company, _profitcenter, _salesPriorityHierarchyCategory, _salesPriorityHierarchyType);
            List<CashCommissionDetailRef> _transporter = null;
            List<CashCommissionDetailRef> _transporterCE = null;        //kapila 20/12/2013
            List<CashCommissionDetailRef> _tmplistCE = null;             //kapila 20/12/2013

            if (_list != null)
                if (_list.Count > 0)
                {
                    //check for execitve
                    var _chkByExecutive = (from _l in _list
                                           where _l.Sccd_exec_cd == _executive && _l.Sccd_is_exec_comm == false
                                           select _l).ToList();
                    //check for execitve Type
                    var _checkByExectiveType = (from _l in _list
                                                where _l.Sccd_exec_tp == _exetype && _l.Sccd_is_exec_comm == false
                                                select _l).ToList();

                    //check for CE  --kapila 20/12/2013
                    if (_exetype == "CE")
                    {
                        var _checkByExectiveTypeCE = (from _l in _list
                                                      where _l.Sccd_is_exec_comm == true
                                                      select _l).ToList();
                        if (_checkByExectiveTypeCE != null)
                            if (_checkByExectiveTypeCE.Count > 0)
                            {
                                _transporterCE = _checkByExectiveTypeCE;
                                List<CashCommissionDetailRef> _finallistCE = CheckItemHierarchyWithinLocationHierarchy(_company, _profitcenter, _hierarchy, _transporterCE, _itemHierarchyElement, _isPromo);
                                _tmplistCE = _finallistCE;
                            }
                    }


                    if (_chkByExecutive != null)
                        if (_chkByExecutive.Count > 0)
                            _transporter = _chkByExecutive;
                        else if (_checkByExectiveType != null)
                            if (_checkByExectiveType.Count > 0)
                                _transporter = _checkByExectiveType;
                            else _transporter = _list;


                    List<CashCommissionDetailRef> _finallist = CheckItemHierarchyWithinLocationHierarchy(_company, _profitcenter, _hierarchy, _transporter, _itemHierarchyElement, _isPromo);

                    if (_finallist != null)
                        if (_finallist.Count > 0)
                            _returnList = _finallist;

                }
            _listCE = _tmplistCE;
            _salesDAL.ConnectionClose();
            return _returnList;
        } //GetCommission


        //UPDATED SACHITH 2013/09/06
        //ADD CE COMMISSION

        public List<SaleCommission> GetCalculatedCommission(string _item, Int32 _lineno, decimal _netItemValue, decimal _totalValue, List<RecieptItem> _paymode, CashCommissionDetailRef _commissiondef, string _invoiceType, string _invNo, CashCommissionDetailRef _commissiondefCE, string _empType)
        {
            Decimal _virVal = 0;
            decimal _payment = 0;
            List<SaleCommission> _list = null;
            if (_totalValue <= 0) return _list;

            _salesDAL = new SalesDAL();
            int X = _salesDAL.GetVirtualItemTotal(_invNo, out _virVal);

            _list = new List<SaleCommission>();
            Int32 _commissionLineno = 0;

            //updated by akila.
            //Update cash commission amount - cash commission amount will be define for entire payment type. Therefore if there are multiple payment types, need to
            //calculate cash commission portion (total cash commission rate / no. of payments)

            if (_paymode != null && _paymode.Count > 0)
            {
                if (_commissiondefCE != null && _commissiondefCE.Sccd_cash_comm > 0)
                {
                    _commissiondefCE.Sccd_cash_comm = _commissiondefCE.Sccd_cash_comm / _paymode.Count;
                }

                if (_commissiondef != null && _commissiondef.Sccd_cash_comm > 0)
                {
                    _commissiondef.Sccd_cash_comm = _commissiondef.Sccd_cash_comm / _paymode.Count;
                }
            }

            foreach (var _mode in _paymode)
            {
                _commissionLineno += 1;
                string _pmode = _mode.Sard_pay_tp;
                if (_commissionLineno == 1)
                {
                    _payment = _mode.Sard_settle_amt - _virVal;
                }
                else
                {
                    _payment = _mode.Sard_settle_amt;
                }
                decimal _beforeCommission = _netItemValue * _payment / _totalValue;

                decimal _commissionAmt = 0;
                decimal _commissionRt = 0;
                decimal _cecommissionAmt = 0;
                decimal _cecommissionRt = 0;

                decimal _adCommissionRate = 0;
                decimal _adCommissionAmt = 0;

                switch (_pmode)
                {
                    case "CASH":


                        //add sachith   //modified kapila
                        if (_empType == "CE")
                        {
                            if (_commissiondefCE != null)
                            {
                                _cecommissionAmt = _commissiondefCE.Sccd_cash_ecomm;
                                _cecommissionRt = _commissiondefCE.Sccd_cash_ecomm_rt;
                                _commissionAmt = _commissiondefCE.Sccd_cash_comm;
                                _commissionRt = _commissiondefCE.Sccd_cash_comm_rt;
                            }
                            else
                            {
                                _cecommissionAmt = 0;
                                _cecommissionRt = 0;
                                _commissionAmt = 0;
                                _commissionRt = 0;
                            }
                        }
                        else
                        {
                            _commissionAmt = _commissiondef.Sccd_cash_comm;
                            _commissionRt = _commissiondef.Sccd_cash_comm_rt;
                        }

                        if (_commissiondef.Sccd_add_cash_comm_rt > 0 || _commissiondef.Sccd_add_allw_cash)
                        {

                            if (!string.IsNullOrEmpty(_commissiondef.Sccd_app_cust_tp))
                            {
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);

                                //customer type check
                                List<MasterBusinessEntity> _customer = _salesDAL.GetCustomerDetailList(_invHrd.Sah_com, _invHrd.Sah_cus_cd, null, null, "C");
                                if (_customer != null && _customer.Count > 0)
                                {
                                    if (_customer[0].Mbe_cate == _commissiondef.Sccd_app_cust_tp)
                                    {
                                        //default qty
                                        if ((_commissiondef.Sccd_add_from_qty >= 1 && _commissiondef.Sccd_add_to_qty >= 1000))
                                        {
                                            _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                            //comm amt
                                            if (_commissiondef.Sccd_add_allw_cash)
                                            {
                                                _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                            }
                                        }
                                        //check qty
                                        else
                                        {
                                            List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                            //item wise qty
                                            if (_commissiondef.Sccd_add_allow_comb)
                                            {
                                                foreach (InvoiceItem _itm in _itmDetails)
                                                {
                                                    if (_commissiondef.Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.Sccd_add_to_qty >= _itm.Sad_qty)
                                                    {
                                                        _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                                        //comm amt
                                                        if (_commissiondef.Sccd_add_allw_cash)
                                                        {
                                                            _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                            //all qty
                                            else
                                            {
                                                decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                                if (_commissiondef.Sccd_add_from_qty <= _qtyTotal && _commissiondef.Sccd_add_to_qty >= _qtyTotal)
                                                {
                                                    _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                                    //comm amt
                                                    if (_commissiondef.Sccd_add_allw_cash)
                                                    {
                                                        _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                            //invoice qty check
                            else
                            {
                                //default qty
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);
                                if ((_commissiondef.Sccd_add_from_qty >= 1 && _commissiondef.Sccd_add_to_qty >= 1000))
                                {
                                    _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                    //comm amt
                                    if (_commissiondef.Sccd_add_allw_cash)
                                    {
                                        _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                    }
                                }
                                //check qty
                                else
                                {
                                    List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                    //item wise qty
                                    if (_commissiondef.Sccd_add_allow_comb)
                                    {
                                        foreach (InvoiceItem _itm in _itmDetails)
                                        {
                                            if (_commissiondef.Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.Sccd_add_to_qty >= _itm.Sad_qty)
                                            {
                                                _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                                //comm amt
                                                if (_commissiondef.Sccd_add_allw_cash)
                                                {
                                                    _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                }
                                                break;
                                            }
                                        }
                                    }

                                    //all qty
                                    else
                                    {
                                        decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                        if (_commissiondef.Sccd_add_from_qty <= _qtyTotal && _commissiondef.Sccd_add_to_qty >= _qtyTotal)
                                        {
                                            _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                            //comm amt
                                            if (_commissiondef.Sccd_add_allw_cash)
                                            {
                                                _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        break;
                    case "CRCD":
                        if (_mode.Sard_cc_is_promo)
                        {

                            if (_empType == "CE")
                            {
                                //add sachith   //modified kapila
                                if (_commissiondefCE != null)
                                {
                                    _cecommissionAmt = _commissiondefCE.Sccd_cc_pro_ecomm;
                                    _cecommissionRt = _commissiondefCE.Sccd_cc_pro_ecomm_rt;
                                    _commissionAmt = _commissiondefCE.Sccd_cash_comm;
                                    _commissionRt = _commissiondefCE.Sccd_cc_pro_comm_rt;
                                }
                                else
                                {
                                    _cecommissionAmt = 0;
                                    _cecommissionRt = 0;
                                    _commissionAmt = 0;
                                    _commissionRt = 0;
                                }
                            }
                            else
                            {

                                _commissionAmt = _commissiondef.Sccd_cash_comm;
                                _commissionRt = _commissiondef.Sccd_cc_pro_comm_rt;
                            }
                        }
                        else
                        {


                            //add sachith   //modified kapila
                            if (_empType == "CE")
                            {
                                if (_commissiondefCE != null)
                                {
                                    _cecommissionAmt = _commissiondefCE.Sccd_cc_ecomm;
                                    _cecommissionRt = _commissiondefCE.Sccd_cc_ecomm_rt;
                                    _commissionAmt = _commissiondefCE.Sccd_cash_comm;
                                    _commissionRt = _commissiondefCE.Sccd_cc_comm_rt;
                                }
                                else
                                {
                                    _cecommissionAmt = 0;
                                    _cecommissionRt = 0;
                                    _commissionAmt = 0;
                                    _commissionRt = 0;
                                }
                            }
                            else
                            {
                                _commissionAmt = _commissiondef.Sccd_cash_comm;
                                _commissionRt = _commissiondef.Sccd_cc_comm_rt;
                            }
                        }
                        if (_commissiondef.Sccd_add_cash_comm_rt > 0 || _commissiondef.Sccd_add_allw_cc)
                        {

                            if (!string.IsNullOrEmpty(_commissiondef.Sccd_app_cust_tp))
                            {
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);

                                //customer type check
                                List<MasterBusinessEntity> _customer = _salesDAL.GetCustomerDetailList(_invHrd.Sah_com, _invHrd.Sah_cus_cd, null, null, "C");
                                if (_customer != null && _customer.Count > 0)
                                {
                                    if (_customer[0].Mbe_cate == _commissiondef.Sccd_app_cust_tp)
                                    {
                                        //default qty
                                        if ((_commissiondef.Sccd_add_from_qty >= 1 && _commissiondef.Sccd_add_to_qty >= 1000))
                                        {
                                            _adCommissionRate = _commissiondef.Sccd_add_cc_comm_rt;
                                            //comm amt
                                            if (_commissiondef.Sccd_add_allw_cc)
                                            {
                                                _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                            }
                                        }
                                        //check qty
                                        else
                                        {
                                            List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                            //item wise qty
                                            if (_commissiondef.Sccd_add_allow_comb)
                                            {
                                                foreach (InvoiceItem _itm in _itmDetails)
                                                {
                                                    if (_commissiondef.Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.Sccd_add_to_qty >= _itm.Sad_qty)
                                                    {
                                                        _adCommissionRate = _commissiondef.Sccd_add_cc_comm_rt;
                                                        //comm amt
                                                        if (_commissiondef.Sccd_add_allw_cc)
                                                        {
                                                            _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                            //all qty
                                            else
                                            {
                                                decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                                if (_commissiondef.Sccd_add_from_qty <= _qtyTotal && _commissiondef.Sccd_add_to_qty >= _qtyTotal)
                                                {
                                                    _adCommissionRate = _commissiondef.Sccd_add_cc_comm_rt;
                                                    //comm amt
                                                    if (_commissiondef.Sccd_add_allw_cc)
                                                    {
                                                        _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                            //invoice qty check
                            else
                            {
                                //default qty
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);
                                if ((_commissiondef.Sccd_add_from_qty >= 1 && _commissiondef.Sccd_add_to_qty >= 1000))
                                {
                                    _adCommissionRate = _commissiondef.Sccd_add_cc_comm_rt;
                                    //comm amt
                                    if (_commissiondef.Sccd_add_allw_cc)
                                    {
                                        _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                    }
                                }
                                //check qty
                                else
                                {
                                    List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                    //item wise qty
                                    if (_commissiondef.Sccd_add_allow_comb)
                                    {
                                        foreach (InvoiceItem _itm in _itmDetails)
                                        {
                                            if (_commissiondef.Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.Sccd_add_to_qty >= _itm.Sad_qty)
                                            {
                                                _adCommissionRate = _commissiondef.Sccd_add_cc_comm_rt;
                                                //comm amt
                                                if (_commissiondef.Sccd_add_allw_cc)
                                                {
                                                    _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                }
                                                break;
                                            }
                                        }
                                    }

                                    //all qty
                                    else
                                    {
                                        decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                        if (_commissiondef.Sccd_add_from_qty <= _qtyTotal && _commissiondef.Sccd_add_to_qty >= _qtyTotal)
                                        {
                                            _adCommissionRate = _commissiondef.Sccd_add_cc_comm_rt;
                                            //comm amt
                                            if (_commissiondef.Sccd_add_allw_cc)
                                            {
                                                _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "ADVAN":


                        //add sachith   //modified kapila
                        if (_empType == "CE")
                        {
                            if (_commissiondefCE != null)
                            {
                                _cecommissionAmt = _commissiondefCE.Sccd_cash_ecomm;
                                _cecommissionRt = _commissiondefCE.Sccd_cash_ecomm_rt;
                                _commissionAmt = _commissiondefCE.Sccd_cash_comm;
                                _commissionRt = _commissiondefCE.Sccd_cash_comm_rt;
                            }
                            else
                            {
                                _cecommissionAmt = 0;
                                _cecommissionRt = 0;
                                _commissionAmt = 0;
                                _commissionRt = 0;
                            }
                        }
                        else
                        {
                            _commissionAmt = _commissiondef.Sccd_cash_comm;
                            _commissionRt = _commissiondef.Sccd_cash_comm_rt;
                        }
                        if (_commissiondef.Sccd_add_cash_comm_rt > 0 || _commissiondef.Sccd_add_allw_cash)
                        {

                            if (!string.IsNullOrEmpty(_commissiondef.Sccd_app_cust_tp))
                            {
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);

                                //customer type check
                                List<MasterBusinessEntity> _customer = _salesDAL.GetCustomerDetailList(_invHrd.Sah_com, _invHrd.Sah_cus_cd, null, null, "C");
                                if (_customer != null && _customer.Count > 0)
                                {
                                    if (_customer[0].Mbe_cate == _commissiondef.Sccd_app_cust_tp)
                                    {
                                        //default qty
                                        if ((_commissiondef.Sccd_add_from_qty >= 1 && _commissiondef.Sccd_add_to_qty >= 1000))
                                        {
                                            _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                            //comm amt
                                            if (_commissiondef.Sccd_add_allw_cash)
                                            {
                                                _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                            }
                                        }
                                        //check qty
                                        else
                                        {
                                            List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                            //item wise qty
                                            if (_commissiondef.Sccd_add_allow_comb)
                                            {
                                                foreach (InvoiceItem _itm in _itmDetails)
                                                {
                                                    if (_commissiondef.Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.Sccd_add_to_qty >= _itm.Sad_qty)
                                                    {
                                                        _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                                        //comm amt
                                                        if (_commissiondef.Sccd_add_allw_cash)
                                                        {
                                                            _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                            //all qty
                                            else
                                            {
                                                decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                                if (_commissiondef.Sccd_add_from_qty <= _qtyTotal && _commissiondef.Sccd_add_to_qty >= _qtyTotal)
                                                {
                                                    _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                                    //comm amt
                                                    if (_commissiondef.Sccd_add_allw_cash)
                                                    {
                                                        _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                            //invoice qty check
                            else
                            {
                                //default qty
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);
                                if ((_commissiondef.Sccd_add_from_qty >= 1 && _commissiondef.Sccd_add_to_qty >= 1000))
                                {
                                    _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                    //comm amt
                                    if (_commissiondef.Sccd_add_allw_cash)
                                    {
                                        _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                    }
                                }
                                //check qty
                                else
                                {
                                    List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                    //item wise qty
                                    if (_commissiondef.Sccd_add_allow_comb)
                                    {
                                        foreach (InvoiceItem _itm in _itmDetails)
                                        {
                                            if (_commissiondef.Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.Sccd_add_to_qty >= _itm.Sad_qty)
                                            {
                                                _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                                //comm amt
                                                if (_commissiondef.Sccd_add_allw_cash)
                                                {
                                                    _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                }
                                                break;
                                            }
                                        }
                                    }

                                    //all qty
                                    else
                                    {
                                        decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                        if (_commissiondef.Sccd_add_from_qty <= _qtyTotal && _commissiondef.Sccd_add_to_qty >= _qtyTotal)
                                        {
                                            _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                            //comm amt
                                            if (_commissiondef.Sccd_add_allw_cash)
                                            {
                                                _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "CRNOTE":


                        //add sachith   //modified kapila
                        if (_empType == "CE")
                        {
                            if (_commissiondefCE != null)
                            {
                                _cecommissionAmt = _commissiondefCE.Sccd_cash_ecomm;
                                _cecommissionRt = _commissiondefCE.Sccd_cash_ecomm_rt;
                                _commissionAmt = _commissiondefCE.Sccd_cash_comm;
                                _commissionRt = _commissiondefCE.Sccd_cash_comm_rt;
                            }
                            else
                            {
                                _cecommissionAmt = 0;
                                _cecommissionRt = 0;
                                _commissionAmt = 0;
                                _commissionRt = 0;
                            }
                        }
                        else
                        {
                            _commissionAmt = _commissiondef.Sccd_cash_comm;
                            _commissionRt = _commissiondef.Sccd_cash_comm_rt;
                        }
                        if (_commissiondef.Sccd_add_cash_comm_rt > 0 || _commissiondef.Sccd_add_allw_cash)
                        {

                            if (!string.IsNullOrEmpty(_commissiondef.Sccd_app_cust_tp))
                            {
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);

                                //customer type check
                                List<MasterBusinessEntity> _customer = _salesDAL.GetCustomerDetailList(_invHrd.Sah_com, _invHrd.Sah_cus_cd, null, null, "C");
                                if (_customer != null && _customer.Count > 0)
                                {
                                    if (_customer[0].Mbe_cate == _commissiondef.Sccd_app_cust_tp)
                                    {
                                        //default qty
                                        if ((_commissiondef.Sccd_add_from_qty >= 1 && _commissiondef.Sccd_add_to_qty >= 1000))
                                        {
                                            _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                            //comm amt
                                            if (_commissiondef.Sccd_add_allw_cash)
                                            {
                                                _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                            }
                                        }
                                        //check qty
                                        else
                                        {
                                            List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                            //item wise qty
                                            if (_commissiondef.Sccd_add_allow_comb)
                                            {
                                                foreach (InvoiceItem _itm in _itmDetails)
                                                {
                                                    if (_commissiondef.Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.Sccd_add_to_qty >= _itm.Sad_qty)
                                                    {
                                                        _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                                        //comm amt
                                                        if (_commissiondef.Sccd_add_allw_cash)
                                                        {
                                                            _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                            //all qty
                                            else
                                            {
                                                decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                                if (_commissiondef.Sccd_add_from_qty <= _qtyTotal && _commissiondef.Sccd_add_to_qty >= _qtyTotal)
                                                {
                                                    _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                                    //comm amt
                                                    if (_commissiondef.Sccd_add_allw_cash)
                                                    {
                                                        _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                            //invoice qty check
                            else
                            {
                                //default qty
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);
                                if ((_commissiondef.Sccd_add_from_qty >= 1 && _commissiondef.Sccd_add_to_qty >= 1000))
                                {
                                    _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                    //comm amt
                                    if (_commissiondef.Sccd_add_allw_cash)
                                    {
                                        _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                    }
                                }
                                //check qty
                                else
                                {
                                    List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                    //item wise qty
                                    if (_commissiondef.Sccd_add_allow_comb)
                                    {
                                        foreach (InvoiceItem _itm in _itmDetails)
                                        {
                                            if (_commissiondef.Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.Sccd_add_to_qty >= _itm.Sad_qty)
                                            {
                                                _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                                //comm amt
                                                if (_commissiondef.Sccd_add_allw_cash)
                                                {
                                                    _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                }
                                                break;
                                            }
                                        }
                                    }

                                    //all qty
                                    else
                                    {
                                        decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                        if (_commissiondef.Sccd_add_from_qty <= _qtyTotal && _commissiondef.Sccd_add_to_qty >= _qtyTotal)
                                        {
                                            _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                            //comm amt
                                            if (_commissiondef.Sccd_add_allw_cash)
                                            {
                                                _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        break;
                    case "CHEQUE":



                        //add sachith   //modified kapila
                        if (_empType == "CE")
                        {
                            if (_commissiondefCE != null)
                            {
                                _cecommissionAmt = _commissiondefCE.Sccd_chq_ecomm;
                                _cecommissionRt = _commissiondefCE.Sccd_chq_ecomm_rt;
                                _commissionAmt = _commissiondefCE.Sccd_cash_comm;
                                _commissionRt = _commissiondefCE.Sccd_chq_comm_rt;
                            }
                            else
                            {
                                _cecommissionAmt = 0;
                                _cecommissionRt = 0;
                                _commissionAmt = 0;
                                _commissionRt = 0;
                            }
                        }
                        else
                        {
                            _commissionAmt = _commissiondef.Sccd_cash_comm;
                            _commissionRt = _commissiondef.Sccd_chq_comm_rt;
                        }
                        if (_commissiondef.Sccd_add_cash_comm_rt > 0 || _commissiondef.Sccd_add_allw_cash)
                        {

                            if (!string.IsNullOrEmpty(_commissiondef.Sccd_app_cust_tp))
                            {
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);

                                //customer type check
                                List<MasterBusinessEntity> _customer = _salesDAL.GetCustomerDetailList(_invHrd.Sah_com, _invHrd.Sah_cus_cd, null, null, "C");
                                if (_customer != null && _customer.Count > 0)
                                {
                                    if (_customer[0].Mbe_cate == _commissiondef.Sccd_app_cust_tp)
                                    {
                                        //default qty
                                        if ((_commissiondef.Sccd_add_from_qty >= 1 && _commissiondef.Sccd_add_to_qty >= 1000))
                                        {
                                            _adCommissionRate = _commissiondef.Sccd_add_chq_comm_rt;
                                            //comm amt
                                            if (_commissiondef.Sccd_add_allw_chq)
                                            {
                                                _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                            }
                                        }
                                        //check qty
                                        else
                                        {
                                            List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                            //item wise qty
                                            if (_commissiondef.Sccd_add_allow_comb)
                                            {
                                                foreach (InvoiceItem _itm in _itmDetails)
                                                {
                                                    if (_commissiondef.Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.Sccd_add_to_qty >= _itm.Sad_qty)
                                                    {
                                                        _adCommissionRate = _commissiondef.Sccd_add_chq_comm_rt;
                                                        //comm amt
                                                        if (_commissiondef.Sccd_add_allw_chq)
                                                        {
                                                            _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                            //all qty
                                            else
                                            {
                                                decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                                if (_commissiondef.Sccd_add_from_qty <= _qtyTotal && _commissiondef.Sccd_add_to_qty >= _qtyTotal)
                                                {
                                                    _adCommissionRate = _commissiondef.Sccd_add_chq_comm_rt;
                                                    //comm amt
                                                    if (_commissiondef.Sccd_add_allw_chq)
                                                    {
                                                        _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                            //invoice qty check
                            else
                            {
                                //default qty
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);
                                if ((_commissiondef.Sccd_add_from_qty >= 1 && _commissiondef.Sccd_add_to_qty >= 1000))
                                {
                                    _adCommissionRate = _commissiondef.Sccd_add_chq_comm_rt;
                                    //comm amt
                                    if (_commissiondef.Sccd_add_allw_chq)
                                    {
                                        _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                    }
                                }
                                //check qty
                                else
                                {
                                    List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                    //item wise qty
                                    if (_commissiondef.Sccd_add_allow_comb)
                                    {
                                        foreach (InvoiceItem _itm in _itmDetails)
                                        {
                                            if (_commissiondef.Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.Sccd_add_to_qty >= _itm.Sad_qty)
                                            {
                                                _adCommissionRate = _commissiondef.Sccd_add_chq_comm_rt;
                                                //comm amt
                                                if (_commissiondef.Sccd_add_allw_chq)
                                                {
                                                    _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                }
                                                break;
                                            }
                                        }
                                    }

                                    //all qty
                                    else
                                    {
                                        decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                        if (_commissiondef.Sccd_add_from_qty <= _qtyTotal && _commissiondef.Sccd_add_to_qty >= _qtyTotal)
                                        {
                                            _adCommissionRate = _commissiondef.Sccd_add_chq_comm_rt;
                                            //comm amt
                                            if (_commissiondef.Sccd_add_allw_chq)
                                            {
                                                _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        break;
                    case "LORE":


                        //add sachith   //modified kapila
                        if (_empType == "CE")
                        {
                            if (_commissiondefCE != null)
                            {
                                _cecommissionAmt = _commissiondefCE.Sccd_cash_ecomm;
                                _cecommissionRt = _commissiondefCE.Sccd_cash_ecomm_rt;
                                _commissionAmt = _commissiondefCE.Sccd_cash_comm;
                                _commissionRt = _commissiondefCE.Sccd_cash_comm_rt;
                            }
                            else
                            {
                                _cecommissionAmt = 0;
                                _cecommissionRt = 0;
                                _commissionAmt = 0;
                                _commissionRt = 0;
                            }
                        }
                        else
                        {
                            _commissionAmt = _commissiondef.Sccd_cash_comm;
                            _commissionRt = _commissiondef.Sccd_cash_comm_rt;
                        }
                        if (_commissiondef.Sccd_add_cash_comm_rt > 0 || _commissiondef.Sccd_add_allw_cash)
                        {

                            if (!string.IsNullOrEmpty(_commissiondef.Sccd_app_cust_tp))
                            {
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);

                                //customer type check
                                List<MasterBusinessEntity> _customer = _salesDAL.GetCustomerDetailList(_invHrd.Sah_com, _invHrd.Sah_cus_cd, null, null, "C");
                                if (_customer != null && _customer.Count > 0)
                                {
                                    if (_customer[0].Mbe_cate == _commissiondef.Sccd_app_cust_tp)
                                    {
                                        //default qty
                                        if ((_commissiondef.Sccd_add_from_qty >= 1 && _commissiondef.Sccd_add_to_qty >= 1000))
                                        {
                                            _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                            //comm amt
                                            if (_commissiondef.Sccd_add_allw_cash)
                                            {
                                                _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                            }
                                        }
                                        //check qty
                                        else
                                        {
                                            List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                            //item wise qty
                                            if (_commissiondef.Sccd_add_allow_comb)
                                            {
                                                foreach (InvoiceItem _itm in _itmDetails)
                                                {
                                                    if (_commissiondef.Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.Sccd_add_to_qty >= _itm.Sad_qty)
                                                    {
                                                        _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                                        //comm amt
                                                        if (_commissiondef.Sccd_add_allw_cash)
                                                        {
                                                            _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                            //all qty
                                            else
                                            {
                                                decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                                if (_commissiondef.Sccd_add_from_qty <= _qtyTotal && _commissiondef.Sccd_add_to_qty >= _qtyTotal)
                                                {
                                                    _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                                    //comm amt
                                                    if (_commissiondef.Sccd_add_allw_cash)
                                                    {
                                                        _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                            //invoice qty check
                            else
                            {
                                //default qty
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);
                                if ((_commissiondef.Sccd_add_from_qty >= 1 && _commissiondef.Sccd_add_to_qty >= 1000))
                                {
                                    _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                    //comm amt
                                    if (_commissiondef.Sccd_add_allw_cash)
                                    {
                                        _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                    }
                                }
                                //check qty
                                else
                                {
                                    List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                    //item wise qty
                                    if (_commissiondef.Sccd_add_allow_comb)
                                    {
                                        foreach (InvoiceItem _itm in _itmDetails)
                                        {
                                            if (_commissiondef.Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.Sccd_add_to_qty >= _itm.Sad_qty)
                                            {
                                                _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                                //comm amt
                                                if (_commissiondef.Sccd_add_allw_cash)
                                                {
                                                    _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                }
                                                break;
                                            }
                                        }
                                    }

                                    //all qty
                                    else
                                    {
                                        decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                        if (_commissiondef.Sccd_add_from_qty <= _qtyTotal && _commissiondef.Sccd_add_to_qty >= _qtyTotal)
                                        {
                                            _adCommissionRate = _commissiondef.Sccd_add_chq_comm_rt;
                                            //comm amt
                                            if (_commissiondef.Sccd_add_allw_cash)
                                            {
                                                _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "GVO":


                        //add sachith   //modified kapila
                        if (_empType == "CE")
                        {
                            if (_commissiondefCE != null)
                            {
                                _cecommissionAmt = _commissiondefCE.Sccd_cash_ecomm;
                                _cecommissionRt = _commissiondefCE.Sccd_cash_ecomm_rt;
                                _commissionAmt = _commissiondefCE.Sccd_cash_comm;
                                _commissionRt = _commissiondefCE.Sccd_cash_comm_rt;
                            }
                            else
                            {
                                _cecommissionAmt = 0;
                                _cecommissionRt = 0;
                                _commissionAmt = 0;
                                _commissionRt = 0;
                            }
                        }
                        else
                        {
                            _commissionAmt = _commissiondef.Sccd_cash_comm;
                            _commissionRt = _commissiondef.Sccd_cash_comm_rt;
                        }
                        if (_commissiondef.Sccd_add_cash_comm_rt > 0 || _commissiondef.Sccd_add_allw_cash)
                        {

                            if (!string.IsNullOrEmpty(_commissiondef.Sccd_app_cust_tp))
                            {
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);

                                //customer type check
                                List<MasterBusinessEntity> _customer = _salesDAL.GetCustomerDetailList(_invHrd.Sah_com, _invHrd.Sah_cus_cd, null, null, "C");
                                if (_customer != null && _customer.Count > 0)
                                {
                                    if (_customer[0].Mbe_cate == _commissiondef.Sccd_app_cust_tp)
                                    {
                                        //default qty
                                        if ((_commissiondef.Sccd_add_from_qty >= 1 && _commissiondef.Sccd_add_to_qty >= 1000))
                                        {
                                            _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                            //comm amt
                                            if (_commissiondef.Sccd_add_allw_cash)
                                            {
                                                _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                            }
                                        }
                                        //check qty
                                        else
                                        {
                                            List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                            //item wise qty
                                            if (_commissiondef.Sccd_add_allow_comb)
                                            {
                                                foreach (InvoiceItem _itm in _itmDetails)
                                                {
                                                    if (_commissiondef.Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.Sccd_add_to_qty >= _itm.Sad_qty)
                                                    {
                                                        _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                                        //comm amt
                                                        if (_commissiondef.Sccd_add_allw_cash)
                                                        {
                                                            _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                            //all qty
                                            else
                                            {
                                                decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                                if (_commissiondef.Sccd_add_from_qty <= _qtyTotal && _commissiondef.Sccd_add_to_qty >= _qtyTotal)
                                                {
                                                    _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                                    //comm amt
                                                    if (_commissiondef.Sccd_add_allw_cash)
                                                    {
                                                        _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                            //invoice qty check
                            else
                            {
                                //default qty
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);
                                if ((_commissiondef.Sccd_add_from_qty >= 1 && _commissiondef.Sccd_add_to_qty >= 1000))
                                {
                                    _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                    //comm amt
                                    if (_commissiondef.Sccd_add_allw_cash)
                                    {
                                        _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                    }
                                }
                                //check qty
                                else
                                {
                                    List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                    //item wise qty
                                    if (_commissiondef.Sccd_add_allow_comb)
                                    {
                                        foreach (InvoiceItem _itm in _itmDetails)
                                        {
                                            if (_commissiondef.Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.Sccd_add_to_qty >= _itm.Sad_qty)
                                            {
                                                _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                                //comm amt
                                                if (_commissiondef.Sccd_add_allw_cash)
                                                {
                                                    _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                }
                                                break;
                                            }
                                        }
                                    }

                                    //all qty
                                    else
                                    {
                                        decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                        if (_commissiondef.Sccd_add_from_qty <= _qtyTotal && _commissiondef.Sccd_add_to_qty >= _qtyTotal)
                                        {
                                            _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                            //comm amt
                                            if (_commissiondef.Sccd_add_allw_cash)
                                            {
                                                _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "GVS":


                        //add sachith   //modified kapila
                        if (_empType == "CE")
                        {
                            if (_commissiondefCE != null)
                            {
                                _cecommissionAmt = _commissiondefCE.Sccd_cash_ecomm;
                                _cecommissionRt = _commissiondefCE.Sccd_cash_ecomm_rt;
                                _commissionAmt = _commissiondefCE.Sccd_cash_comm;
                                _commissionRt = _commissiondefCE.Sccd_cash_comm_rt;
                            }
                            else
                            {
                                _cecommissionAmt = 0;
                                _cecommissionRt = 0;
                                _commissionAmt = 0;
                                _commissionRt = 0;
                            }
                        }
                        else
                        {
                            _commissionAmt = _commissiondef.Sccd_cash_comm;
                            _commissionRt = _commissiondef.Sccd_cash_comm_rt;
                        }
                        if (_commissiondef.Sccd_add_cash_comm_rt > 0 || _commissiondef.Sccd_add_allw_cash)
                        {

                            if (!string.IsNullOrEmpty(_commissiondef.Sccd_app_cust_tp))
                            {
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);

                                //customer type check
                                List<MasterBusinessEntity> _customer = _salesDAL.GetCustomerDetailList(_invHrd.Sah_com, _invHrd.Sah_cus_cd, null, null, "C");
                                if (_customer != null && _customer.Count > 0)
                                {
                                    if (_customer[0].Mbe_cate == _commissiondef.Sccd_app_cust_tp)
                                    {
                                        //default qty
                                        if ((_commissiondef.Sccd_add_from_qty >= 1 && _commissiondef.Sccd_add_to_qty >= 1000))
                                        {
                                            _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                            //comm amt
                                            if (_commissiondef.Sccd_add_allw_cash)
                                            {
                                                _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                            }
                                        }
                                        //check qty
                                        else
                                        {
                                            List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                            //item wise qty
                                            if (_commissiondef.Sccd_add_allow_comb)
                                            {
                                                foreach (InvoiceItem _itm in _itmDetails)
                                                {
                                                    if (_commissiondef.Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.Sccd_add_to_qty >= _itm.Sad_qty)
                                                    {
                                                        _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                                        //comm amt
                                                        if (_commissiondef.Sccd_add_allw_cash)
                                                        {
                                                            _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                            //all qty
                                            else
                                            {
                                                decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                                if (_commissiondef.Sccd_add_from_qty <= _qtyTotal && _commissiondef.Sccd_add_to_qty >= _qtyTotal)
                                                {
                                                    _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                                    //comm amt
                                                    if (_commissiondef.Sccd_add_allw_cash)
                                                    {
                                                        _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                            //invoice qty check
                            else
                            {
                                //default qty
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);
                                if ((_commissiondef.Sccd_add_from_qty >= 1 && _commissiondef.Sccd_add_to_qty >= 1000))
                                {
                                    _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                    //comm amt
                                    if (_commissiondef.Sccd_add_allw_cash)
                                    {
                                        _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                    }
                                }
                                //check qty
                                else
                                {
                                    List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                    //item wise qty
                                    if (_commissiondef.Sccd_add_allow_comb)
                                    {
                                        foreach (InvoiceItem _itm in _itmDetails)
                                        {
                                            if (_commissiondef.Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.Sccd_add_to_qty >= _itm.Sad_qty)
                                            {
                                                _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                                //comm amt
                                                if (_commissiondef.Sccd_add_allw_cash)
                                                {
                                                    _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                }
                                                break;
                                            }
                                        }
                                    }

                                    //all qty
                                    else
                                    {
                                        decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                        if (_commissiondef.Sccd_add_from_qty <= _qtyTotal && _commissiondef.Sccd_add_to_qty >= _qtyTotal)
                                        {
                                            _adCommissionRate = _commissiondef.Sccd_add_cash_comm_rt;
                                            //comm amt
                                            if (_commissiondef.Sccd_add_allw_cash)
                                            {
                                                _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "DEBT":


                        //add sachith   //modified kapila
                        if (_empType == "CE")
                        {
                            if (_commissiondefCE != null)
                            {
                                _cecommissionAmt = _commissiondefCE.Sccd_dbc_ecomm;
                                _cecommissionRt = _commissiondefCE.Sccd_dbc_ecomm_rt;
                                _commissionAmt = _commissiondefCE.Sccd_cash_comm;
                                _commissionRt = _commissiondefCE.Sccd_dbc_comm_rt;
                            }
                            else
                            {
                                _cecommissionAmt = 0;
                                _cecommissionRt = 0;
                                _commissionAmt = 0;
                                _commissionRt = 0;
                            }
                        }
                        else
                        {
                            _commissionAmt = _commissiondef.Sccd_cash_comm;
                            _commissionRt = _commissiondef.Sccd_dbc_comm_rt;
                        }
                        if (_commissiondef.Sccd_add_cash_comm_rt > 0 || _commissiondef.Sccd_add_allw_cash)
                        {

                            if (!string.IsNullOrEmpty(_commissiondef.Sccd_app_cust_tp))
                            {
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);

                                //customer type check
                                List<MasterBusinessEntity> _customer = _salesDAL.GetCustomerDetailList(_invHrd.Sah_com, _invHrd.Sah_cus_cd, null, null, "C");
                                if (_customer != null && _customer.Count > 0)
                                {
                                    if (_customer[0].Mbe_cate == _commissiondef.Sccd_app_cust_tp)
                                    {
                                        //default qty
                                        if ((_commissiondef.Sccd_add_from_qty >= 1 && _commissiondef.Sccd_add_to_qty >= 1000))
                                        {
                                            _adCommissionRate = _commissiondef.Sccd_add_dbc_comm_rt;
                                            //comm amt
                                            if (_commissiondef.Sccd_add_allw_dbc)
                                            {
                                                _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                            }
                                        }
                                        //check qty
                                        else
                                        {
                                            List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                            //item wise qty
                                            if (_commissiondef.Sccd_add_allow_comb)
                                            {
                                                foreach (InvoiceItem _itm in _itmDetails)
                                                {
                                                    if (_commissiondef.Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.Sccd_add_to_qty >= _itm.Sad_qty)
                                                    {
                                                        _adCommissionRate = _commissiondef.Sccd_add_dbc_comm_rt;
                                                        //comm amt
                                                        if (_commissiondef.Sccd_add_allw_dbc)
                                                        {
                                                            _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                            //all qty
                                            else
                                            {
                                                decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                                if (_commissiondef.Sccd_add_from_qty <= _qtyTotal && _commissiondef.Sccd_add_to_qty >= _qtyTotal)
                                                {
                                                    _adCommissionRate = _commissiondef.Sccd_add_dbc_comm_rt;
                                                    //comm amt
                                                    if (_commissiondef.Sccd_add_allw_dbc)
                                                    {
                                                        _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                            //invoice qty check
                            else
                            {
                                //default qty
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);
                                if ((_commissiondef.Sccd_add_from_qty >= 1 && _commissiondef.Sccd_add_to_qty >= 1000))
                                {
                                    _adCommissionRate = _commissiondef.Sccd_add_dbc_comm_rt;
                                    //comm amt
                                    if (_commissiondef.Sccd_add_allw_dbc)
                                    {
                                        _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                    }
                                }
                                //check qty
                                else
                                {
                                    List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                    //item wise qty
                                    if (_commissiondef.Sccd_add_allow_comb)
                                    {
                                        foreach (InvoiceItem _itm in _itmDetails)
                                        {
                                            if (_commissiondef.Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.Sccd_add_to_qty >= _itm.Sad_qty)
                                            {
                                                _adCommissionRate = _commissiondef.Sccd_add_dbc_comm_rt;
                                                //comm amt
                                                if (_commissiondef.Sccd_add_allw_dbc)
                                                {
                                                    _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                }
                                                break;
                                            }
                                        }
                                    }

                                    //all qty
                                    else
                                    {
                                        decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                        if (_commissiondef.Sccd_add_from_qty <= _qtyTotal && _commissiondef.Sccd_add_to_qty >= _qtyTotal)
                                        {
                                            _adCommissionRate = _commissiondef.Sccd_add_dbc_comm_rt;
                                            //comm amt
                                            if (_commissiondef.Sccd_add_allw_dbc)
                                            {
                                                _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    default:


                        //add sachith   //modified kapila
                        if (_empType == "CE")
                        {
                            if (_commissiondefCE != null)
                            {
                                _cecommissionAmt = _commissiondefCE.Sccd_oth_ecomm;
                                _cecommissionRt = _commissiondefCE.Sccd_oth_ecomm_rt;
                                _commissionAmt = _commissiondefCE.Sccd_cash_comm;
                                _commissionRt = _commissiondefCE.Sccd_oth_comm_rt;
                            }
                            else
                            {
                                _cecommissionAmt = 0;
                                _cecommissionRt = 0;
                                _commissionAmt = 0;
                                _commissionRt = 0;
                            }
                        }
                        else
                        {
                            _commissionAmt = _commissiondef.Sccd_cash_comm;
                            _commissionRt = _commissiondef.Sccd_oth_comm_rt;
                        }
                        if (_commissiondef.Sccd_add_cash_comm_rt > 0 || _commissiondef.Sccd_add_allw_cash)
                        {

                            if (!string.IsNullOrEmpty(_commissiondef.Sccd_app_cust_tp))
                            {
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);

                                //customer type check
                                List<MasterBusinessEntity> _customer = _salesDAL.GetCustomerDetailList(_invHrd.Sah_com, _invHrd.Sah_cus_cd, null, null, "C");
                                if (_customer != null && _customer.Count > 0)
                                {
                                    if (_customer[0].Mbe_cate == _commissiondef.Sccd_app_cust_tp)
                                    {
                                        //default qty
                                        if ((_commissiondef.Sccd_add_from_qty >= 1 && _commissiondef.Sccd_add_to_qty >= 1000))
                                        {
                                            _adCommissionRate = _commissiondef.Sccd_add_oth_comm_rt;
                                            //comm amt
                                            if (_commissiondef.Sccd_add_allw_oth)
                                            {
                                                _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                            }
                                        }
                                        //check qty
                                        else
                                        {
                                            List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                            //item wise qty
                                            if (_commissiondef.Sccd_add_allow_comb)
                                            {
                                                foreach (InvoiceItem _itm in _itmDetails)
                                                {
                                                    if (_commissiondef.Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.Sccd_add_to_qty >= _itm.Sad_qty)
                                                    {
                                                        _adCommissionRate = _commissiondef.Sccd_add_oth_comm_rt;
                                                        //comm amt
                                                        if (_commissiondef.Sccd_add_allw_oth)
                                                        {
                                                            _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                            //all qty
                                            else
                                            {
                                                decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                                if (_commissiondef.Sccd_add_from_qty <= _qtyTotal && _commissiondef.Sccd_add_to_qty >= _qtyTotal)
                                                {
                                                    _adCommissionRate = _commissiondef.Sccd_add_oth_comm_rt;
                                                    //comm amt
                                                    if (_commissiondef.Sccd_add_allw_oth)
                                                    {
                                                        _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                            //invoice qty check
                            else
                            {
                                //default qty
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);
                                if ((_commissiondef.Sccd_add_from_qty >= 1 && _commissiondef.Sccd_add_to_qty >= 1000))
                                {
                                    _adCommissionRate = _commissiondef.Sccd_add_oth_comm_rt;
                                    //comm amt
                                    if (_commissiondef.Sccd_add_allw_oth)
                                    {
                                        _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                    }
                                }
                                //check qty
                                else
                                {
                                    List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                    //item wise qty
                                    if (_commissiondef.Sccd_add_allow_comb)
                                    {
                                        foreach (InvoiceItem _itm in _itmDetails)
                                        {
                                            if (_commissiondef.Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.Sccd_add_to_qty >= _itm.Sad_qty)
                                            {
                                                _adCommissionRate = _commissiondef.Sccd_add_oth_comm_rt;
                                                //comm amt
                                                if (_commissiondef.Sccd_add_allw_oth)
                                                {
                                                    _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                                }
                                                break;
                                            }
                                        }
                                    }

                                    //all qty
                                    else
                                    {
                                        decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                        if (_commissiondef.Sccd_add_from_qty <= _qtyTotal && _commissiondef.Sccd_add_to_qty >= _qtyTotal)
                                        {
                                            _adCommissionRate = _commissiondef.Sccd_add_oth_comm_rt;
                                            //comm amt
                                            if (_commissiondef.Sccd_add_allw_oth)
                                            {
                                                _adCommissionAmt = _commissiondef.Sccd_add_comm;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                }

                decimal _commission = (_beforeCommission * _commissionRt / 100) + _commissionAmt;
                //add sachith
                decimal _cecommission = (_beforeCommission * _cecommissionRt / 100) + _cecommissionAmt;

                SaleCommission _one = new SaleCommission();

                if (_invoiceType == "CRED")
                {
                    _one.Sac_pay_mode = "CRED COMM";
                }
                else
                {
                    _one.Sac_pay_mode = _pmode;
                }
                _one.Sac_itm_cd = _item;
                _one.Sac_comm_rate = _commissionRt;
                _one.Sac_comm_rate_final = _commissionRt;       //kapila
                _one.Sac_comm_amt = Convert.ToInt32(_commission);
                _one.Sac_comm_amt_final = Convert.ToInt32(_commission); //kapila
                _one.Sac_calc_on = Convert.ToString(_beforeCommission);
                _one.Sac_itm_line = _lineno;
                _one.Sac_comm_line = _commissionLineno;

                _one.Sac_add_comm_rate = _adCommissionRate;
                _one.Sac_add_comm = _adCommissionAmt;
                _one.Sac_add_epf = _commissiondef.Sccd_add_epf_apply;

                //add sachith
                //modified kapila
                _one.Sac_ce_rate = _cecommissionRt;
                _one.Sac_ce_amt = _cecommission;

                _list.Add(_one);

            }
            return _list;
        }
        #endregion

        //darshana 02/08/2012
        public List<HPAdjustmentTypes> GetHPAdjTypes()
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHPAdjTypes();
        }

        //darshana 02/08/2012
        public HPAdjustmentTypes GetHPAdjByCode(string _code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHPAdjByCode(_code);
        }

        public List<CashGeneralDicountDef> CheckItemHierarchyWithinLocationHierarchy(string _company, string _profitcenter, List<MasterSalesPriorityHierarchy> _Hierarchy, List<CashGeneralDicountDef> _list, Dictionary<ItemHierarchyElement, string> _itemHierarchy, string _day, DateTime _time)
        {
            List<CashGeneralDicountDef> _returnlist = null;

            if (_Hierarchy != null)
                if (_Hierarchy.Count > 0)
                {
                    foreach (MasterSalesPriorityHierarchy _one in _Hierarchy)
                    {
                        string _type = _one.Mpi_cd;
                        string _value = _one.Mpi_val;

                        //#region  Serial
                        ////check for serial + day + time
                        //var _chkSerialnDaynTime = (from _l in _list where _l.Sgdd_ser == _itemHierarchy[ItemHierarchyElement.SERIAL] && _l.Sgdd_pty_tp == _type && _l.Sgdd_pty_cd == _value && _l.Sgdd_day == _day && _l.Sgdd_from_time <= _time && _l.Sgdd_to_time >= _time select _l).ToList();
                        //if (_chkSerialnDaynTime != null) if (_chkSerialnDaynTime.Count > 0) { _returnlist = _chkSerialnDaynTime; break; }

                        ////check for serial + day 
                        //var _chkSerialnDay = (from _l in _list where _l.Sgdd_ser == _itemHierarchy[ItemHierarchyElement.SERIAL] && _l.Sgdd_pty_tp == _type && _l.Sgdd_pty_cd == _value && _l.Sgdd_day == _day select _l).ToList();
                        //if (_chkSerialnDay != null) if (_chkSerialnDay.Count > 0) { _returnlist = _chkSerialnDay; break; }

                        ////check for serial + time 
                        //var _chkSerialnTime = (from _l in _list where _l.Sgdd_ser == _itemHierarchy[ItemHierarchyElement.SERIAL] && _l.Sgdd_pty_tp == _type && _l.Sgdd_pty_cd == _value && _l.Sgdd_from_time <= _time && _l.Sgdd_to_time >= _time select _l).ToList();
                        //if (_chkSerialnTime != null) if (_chkSerialnTime.Count > 0) { _returnlist = _chkSerialnTime; break; }
                        //#endregion

                        //#region  Promotion
                        ////check for Prmotion
                        //var _chkPromotion = (from _l in _list where _l.Sccd_pro == _itemHierarchy[ItemHierarchyElement.PROMOTION] && _l.Sgdd_pty_tp == _type && _l.Sgdd_pty_cd == _value select _l).ToList();
                        //if (_chkPromotion != null) if (_chkPromotion.Count > 0) { _returnlist = _chkPromotion; break; }
                        //#endregion

                        //#region  Item
                        ////check for Item
                        //var _chkItem = (from _l in _list where _l.Sccd_itm == _itemHierarchy[ItemHierarchyElement.ITEM] && _l.Sgdd_pty_tp == _type && _l.Sgdd_pty_cd == _value select _l).ToList();
                        //if (_chkItem != null) if (_chkItem.Count > 0) { _returnlist = _chkItem; break; }
                        //#endregion

                        //#region  Brand 'n Main Category
                        ////check for Brand 'n Main Category
                        //var _chkBrandnMainCategory = (from _l in _list where _l.Sccd_brd == _itemHierarchy[ItemHierarchyElement.BRAND] && _l.Sccd_main_cat == _itemHierarchy[ItemHierarchyElement.MAIN_CATEGORY] && _l.Sgdd_pty_tp == _type && _l.Sgdd_pty_cd == _value select _l).ToList();
                        //if (_chkBrandnMainCategory != null) if (_chkBrandnMainCategory.Count > 0) { _returnlist = _chkBrandnMainCategory; break; }
                        //#endregion

                        //#region  Brand 'n Sub Category
                        ////check for Brand 'n Sub Category
                        //var _chkBrandnSubCategory = (from _l in _list where _l.Sccd_brd == _itemHierarchy[ItemHierarchyElement.BRAND] && _l.Sccd_cat == _itemHierarchy[ItemHierarchyElement.SUB_CATEGORY] && _l.Sgdd_pty_tp == _type && _l.Sgdd_pty_cd == _value select _l).ToList();
                        //if (_chkBrandnSubCategory != null) if (_chkBrandnSubCategory.Count > 0) { _returnlist = _chkBrandnSubCategory; break; }
                        //#endregion

                        //#region  Brand - check others for null
                        ////check for Brand - check others for null
                        //var _chkBrand = (from _l in _list where _l.Sccd_brd == _itemHierarchy[ItemHierarchyElement.BRAND] && _l.Sccd_ser == string.Empty && _l.Sccd_pro == string.Empty && _l.Sccd_itm == string.Empty && _l.Sccd_main_cat == string.Empty && _l.Sccd_cat == string.Empty && _l.Sgdd_pty_tp == _type && _l.Sgdd_pty_cd == _value select _l).ToList();
                        //if (_chkBrand != null) if (_chkBrand.Count > 0) { _returnlist = _chkBrand; break; }
                        //#endregion

                        //#region  Main Category - check others for null
                        ////check for Main Category - check others for null
                        //var _chkMainCategory = (from _l in _list where _l.Sccd_main_cat == _itemHierarchy[ItemHierarchyElement.MAIN_CATEGORY] && _l.Sccd_brd == string.Empty && _l.Sccd_ser == string.Empty && _l.Sccd_pro == string.Empty && _l.Sccd_itm == string.Empty && _l.Sccd_cat == string.Empty && _l.Sgdd_pty_tp == _type && _l.Sgdd_pty_cd == _value select _l).ToList();
                        //if (_chkMainCategory != null) if (_chkMainCategory.Count > 0) { _returnlist = _chkMainCategory; break; }
                        //#endregion

                        //#region  Main Category 'n Sub Category - check others for null
                        ////check for Main Category 'n Sub Category - check others for null
                        //var _chkMainCategorynSubCategory = (from _l in _list where _l.Sccd_main_cat == _itemHierarchy[ItemHierarchyElement.MAIN_CATEGORY] && _l.Sccd_cat == _itemHierarchy[ItemHierarchyElement.SUB_CATEGORY] && _l.Sccd_brd == string.Empty && _l.Sccd_ser == string.Empty && _l.Sccd_pro == string.Empty && _l.Sccd_itm == string.Empty && _l.Sgdd_pty_tp == _type && _l.Sgdd_pty_cd == _value select _l).ToList();
                        //if (_chkMainCategorynSubCategory != null) if (_chkMainCategorynSubCategory.Count > 0) { _returnlist = _chkMainCategorynSubCategory; break; }
                        //#endregion

                        //#region  Sub Category - check others for null
                        ////check for Sub Category - check others for null
                        //var _chkSubCategory = (from _l in _list where _l.Sccd_cat == _itemHierarchy[ItemHierarchyElement.SUB_CATEGORY] && _l.Sccd_brd == string.Empty && _l.Sccd_ser == string.Empty && _l.Sccd_pro == string.Empty && _l.Sccd_itm == string.Empty && _l.Sccd_main_cat == string.Empty && _l.Sgdd_pty_tp == _type && _l.Sgdd_pty_cd == _value select _l).ToList();
                        //if (_chkSubCategory != null) if (_chkSubCategory.Count > 0) { _returnlist = _chkSubCategory; break; }
                        //#endregion

                        //#region  Price Book and Level - check others for null
                        ////check for Price Book and Level - check others for null
                        //var _chkPriceBooknLevel = (from _l in _list where _l.Sccd_cat == string.Empty && _l.Sccd_brd == string.Empty && _l.Sccd_ser == string.Empty && _l.Sccd_pro == string.Empty && _l.Sccd_itm == string.Empty && _l.Sccd_main_cat == string.Empty && _l.Sgdd_pty_tp == _type && _l.Sgdd_pty_cd == _value select _l).ToList();
                        //if (_chkPriceBooknLevel != null) if (_chkPriceBooknLevel.Count > 0) { _returnlist = _chkPriceBooknLevel; break; }
                        //#endregion

                    }
                }
            return _returnlist;


        }

        public Int32 SaveRevert(decimal _balancepotion, HpRevertHeader _rvhdr, InventoryHeader _invhdr, List<ReptPickSerials> _pickserial, List<ReptPickSerialsSub> _picksubserial, MasterAutoNumber _rvAuto, MasterAutoNumber _invAuto, out string _rvdoc, out string _adjDoc)
        {
            Int32 _effect = 0;
            try
            {
                //Generate ADJ+ entry

                string RVDoc = string.Empty;
                string ADJdoc = string.Empty;
                //using (TransactionScope _tr = new TransactionScope())
                //{
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                _inventoryRepDAL = new ReptCommonDAL();
                _ScmCommonDAL = new SCMCommonDAL();
                _generalDAL = new GeneralDAL();

                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _ScmCommonDAL.ConnectionOpen();
                _ScmCommonDAL.BeginTransaction();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();

                Int64 _rvSeq = _inventoryDAL.GetSerialID();
                _rvhdr.Hrt_seq = Convert.ToInt32(_rvSeq);
                _rvhdr.Hrt_ref = Convert.ToString(_rvSeq);
                List<InvoiceItem> _InvoiceItem = new List<InvoiceItem>();
                MasterCompany _mstCom = _generalDAL.GetCompByCode(_rvhdr.Hrt_com);
                DateTime monthStartDate = new DateTime(_rvhdr.Hrt_rvt_dt.Year, _rvhdr.Hrt_rvt_dt.Month, 1);

                HpAccount _ac = _salesDAL.GetHP_Account_onAccNo(_rvhdr.Hrt_acc_no);
                decimal _accInterest = _ac.Hpa_intr_rt;
                var _totalCapital = (from _l in _pickserial
                                     select (_l.Tus_unit_price * _l.Tus_qty * _balancepotion) * 100 / (100 + _accInterest)).Sum();

                var _totalInterest = (from _l in _pickserial
                                      select (_l.Tus_unit_price * _l.Tus_qty * _balancepotion) * _accInterest / (100 + _accInterest)).Sum();
                _rvhdr.Hrt_bal_cap = _totalCapital;
                _rvhdr.Hrt_bal_intr = _totalInterest;

                //ADDED BY SACHITH 2012/11/05
                //OVERWRITE Hrt_bal_cap,Hrt_bal_intr,hrt_bal
                FinancialDAL _financialDal = new FinancialDAL();
                decimal _clsBal = 0;
                int result = _financialDal.GetClosingBalance(DateTime.Now.Date, _ac.Hpa_acc_no, out _clsBal);

                _rvhdr.Hrt_bal = _clsBal;
                _rvhdr.Hrt_bal_intr = (_clsBal * _accInterest) / (100 + _accInterest);
                _rvhdr.Hrt_bal_cap = (_clsBal * 100) / (100 + _accInterest);

                // Add by Tharindu 2018-02-13
                decimal _hpval = 0;
                decimal _paidBal = 0;

                _hpval = _ac.Hpa_hp_val;
                _paidBal = _hpval - _clsBal;

                _rvhdr.Hrt_paid_bal = _paidBal;
                _rvhdr.Hrt_paid_int = (_paidBal * _accInterest) / (100 + _accInterest);
                _rvhdr.Hrt_paid_cap = (_paidBal * 100) / (100 + _accInterest);


                if (_mstCom.Mc_anal23 == "RED")
                {
                    DataTable _redBal = _salesDAL.GetDeduceBal(monthStartDate, _rvhdr.Hrt_rvt_dt, _rvhdr.Hrt_com, _rvhdr.Hrt_pc, 0, _rvhdr.Hrt_acc_no);

                    if (_redBal != null)
                    {
                        if (_redBal.Rows.Count > 0)
                        {
                            foreach (DataRow r in _redBal.Rows)
                            {
                                _rvhdr.Hrt_bal_cap = Convert.ToDecimal(r["CAPITAL"]);
                                _rvhdr.Hrt_bal_intr = Convert.ToDecimal(r["INTR"]);
                            }
                        }
                    }

                }

                //END

                _salesDAL.SaveHpRevertHeader(_rvhdr);

                Int32 _lineno = 1;

                //ADDED BY SACHITH 2012/11/05
                //GET TOTAL VALUE OF INVOICE ITEM/S
                decimal _totalVal = 0;
                List<string> _distInvLIst = _pickserial.Select(x => x.Tus_base_doc_no).Distinct().ToList<string>();
                if (_distInvLIst != null)
                {
                    foreach (string st in _distInvLIst)
                    {
                        List<InvoiceItem> _invItm = _salesDAL.GetAllInvoiceItems(st);
                        _InvoiceItem = _invItm;
                        if (_invItm != null)
                        {
                            foreach (InvoiceItem ii in _invItm)
                            {
                                //_totalVal = _totalVal + ii.Sad_unit_amt;
                                _totalVal = _totalVal + (ii.Sad_unit_amt + ii.Sad_itm_tax_amt - ii.Sad_disc_amt);//15-02-2013 MODIFIED
                            }
                        }
                    }
                }
                //END
                foreach (ReptPickSerials _one in _pickserial)
                {
                    HpRevertDetail _single = new HpRevertDetail();

                    _single.Hrd_seq = _rvhdr.Hrt_seq;
                    _single.Hrd_cre_by = _rvhdr.Hrt_cre_by;
                    _single.Hrd_cre_dt = _rvhdr.Hrt_cre_dt;
                    _single.Hrd_itm = _one.Tus_itm_cd;
                    _single.Hrd_itm_bal = _balancepotion * _one.Tus_unit_price * _one.Tus_qty;
                    _single.Hrd_itm_bal_cap = _single.Hrd_itm_bal * 100 / (100 + _accInterest);
                    _single.Hrd_itm_bal_intr = _single.Hrd_itm_bal * _accInterest / (100 + _accInterest);
                    _single.Hrd_line_no = _lineno;
                    _lineno++;

                    //ADDED BY SACHITH 2012/11/05
                    //OVERWRITE Hrd_itm_bal,Hrd_itm_bal_cap,Hrd_itm_bal_intr
                    if (_totalVal > 0)
                    {
                        decimal tem = (_clsBal * _one.Tus_unit_price) / _totalVal;

                        _single.Hrd_itm_bal = Math.Round(tem, 4);
                        _single.Hrd_itm_bal_intr = Math.Round((tem * _accInterest) / (100 + _accInterest), 4);
                        _single.Hrd_itm_bal_cap = Math.Round((tem * 100) / (100 + _accInterest), 4);
                    }

                    if (_mstCom.Mc_anal23 == "RED")
                    {
                        _single.Hrd_itm_bal_cap = Math.Round((_rvhdr.Hrt_bal_cap / _ac.Hpa_cash_val) * _one.Tus_unit_price * _one.Tus_qty, 4);
                        _single.Hrd_itm_bal_intr = Math.Round((_rvhdr.Hrt_bal_intr / _ac.Hpa_cash_val) * _one.Tus_unit_price * _one.Tus_qty, 4);
                        _single.Hrd_itm_bal = _single.Hrd_itm_bal_cap + _single.Hrd_itm_bal_intr;
                    }

                    // Add by Tharindu 2018-02-13
                    decimal ItemPaidBal = (_rvhdr.Hrt_paid_bal * ((_one.Tus_unit_price * _one.Tus_qty) / _totalVal));
                    decimal ItemPaidInt = (ItemPaidBal * _accInterest) / (100 + _accInterest);
                    decimal ItemPaidCap = (ItemPaidBal * 100) / (100 + _accInterest); // change due to req

                    _single.Hrd_itm_paid_bal = ItemPaidBal;
                    _single.Hrd_itm_paid_int = ItemPaidInt;
                    _single.Hrd_itm_paid_cap = ItemPaidCap;

                    _one.Tus_Cap_Amt = ItemPaidCap;

                    //END
                    _salesDAL.SaveHpRevertDetail(_single);
                }


                //Add by Akila 2016/11/24 - reverse loyalty members points which has earned for HP and HP collections
                DataTable _lmPointSummery = new DataTable();
                _lmPointSummery = _salesDAL.GetLoyaltyPointSummaryForHPRevert(_rvhdr.Hrt_acc_no);//check for the loyalty card available for given account numer and if available take the point summary.
                if (_lmPointSummery.Rows.Count > 0)
                {
                    string _account_no = _lmPointSummery.Rows[0]["salcm_no"].ToString();
                    double _pointEarn = Convert.ToDouble(_lmPointSummery.Rows[0]["salcm_col_pt"]);
                    double _pointRedem = Convert.ToDouble(_lmPointSummery.Rows[0]["salcm_red_pt"]);
                    double _pointExpire = Convert.ToDouble(_lmPointSummery.Rows[0]["salcm_exp_pt"]);
                    double _pointFromCollection = Convert.ToDouble(_lmPointSummery.Rows[0]["tot_collection_pt"]);
                    string tranType = "pnt_revert";

                    double pointAmt = 0;

                    if (_pointExpire > (_pointEarn - (_pointRedem + _pointExpire)))
                    {
                        pointAmt = _pointEarn - (_pointRedem + _pointExpire);
                    }
                    else
                    {
                        pointAmt = (_pointExpire + _pointFromCollection);
                    }

                    int _updatedCount = UpdateLmMembers(_account_no, tranType, pointAmt);
                    if (_updatedCount > 0)
                    {
                        //Update SAT_LOYALTY table. insert a recoed which can be link with revert header seqno
                        InvoiceLoyalty _invLoyalty = new InvoiceLoyalty();
                        _invLoyalty.Stlt_inv_no = _rvhdr.Hrt_acc_no;// this just for referance that's why account number as saved insted if inv# 
                        _invLoyalty.Stlt_pt = Convert.ToDecimal(pointAmt);//this is expired point amount
                        _invLoyalty.Stlt_seq_no = _rvhdr.Hrt_seq;

                        _salesDAL.SaveInvoiceLoyalty(_invLoyalty);
                    }
                }



                InventoryBLL _InventoryBLL = new InventoryBLL();
                _InventoryBLL._inventoryDAL = _inventoryDAL;
                _InventoryBLL._inventoryRepDAL = _inventoryRepDAL;
                _InventoryBLL._salesDAL = _salesDAL;
                _InventoryBLL._ScmCommonDAL = _ScmCommonDAL;
                MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_rvAuto.Aut_moduleid, _rvAuto.Aut_direction, _rvAuto.Aut_start_char, _rvAuto.Aut_cate_tp, _rvAuto.Aut_cate_cd, _rvAuto.Aut_modify_dt, _rvAuto.Aut_year);
                string _documentNo = _rvhdr.Hrt_pc + "+" + _rvAuto.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _number.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_rvAuto);
                _invhdr.Ith_oth_docno = _documentNo;

                //Int16 eff_new = _InventoryBLL.SaveInwardScanSerial(_invhdr, _pickserial, _picksubserial);
                //if (eff_new == -2)
                //{
                //    throw new System.ArgumentException("This serial already exist", "Information");
                //}
                //_InventoryBLL.SaveInwardScanSerial(_invhdr, _pickserial, _picksubserial);

                //_InventoryBLL.UpdateInventoryAutoNumber(_invhdr, _invAuto, "+", out ADJdoc);


                _salesDAL.UpdateAccountStatusforrevert(_rvhdr.Hrt_com, _rvhdr.Hrt_pc, _rvhdr.Hrt_acc_no, "R", _rvhdr.Hrt_rvt_dt);
                _salesDAL.UpdateRevertNo(_rvhdr.Hrt_seq, _invhdr.Ith_seq_no, _documentNo);
                //added by shani 19-01-2013
                Int32 eff = _salesDAL.UpdateAccountLogforRvtNRls(_rvhdr.Hrt_acc_no, _rvhdr.Hrt_pc, _rvhdr.Hrt_com, _rvhdr.Hrt_rvt_dt, "R", "REVERT");
                #region create SRN by tharanga 2018/06/14

                #region _invoiceAuto
                MasterAutoNumber _invoiceAuto = new MasterAutoNumber();
                _invoiceAuto.Aut_cate_cd = _rvhdr.Hrt_pc;
                _invoiceAuto.Aut_cate_tp = "PC";
                _invoiceAuto.Aut_direction = 0;
                _invoiceAuto.Aut_modify_dt = null;
                _invoiceAuto.Aut_moduleid = "REV";
                _invoiceAuto.Aut_number = 0;
                if (_rvhdr.Hrt_com == "LRP")
                {
                    _invoiceAuto.Aut_start_char = "RINREV";
                }
                else
                {
                    _invoiceAuto.Aut_start_char = "INREV";
                }
                _invoiceAuto.Aut_year = null;
                #endregion
                #region sat_hdr
                DataTable odt = _salesDAL.GetHPSaleswithDO(_rvhdr.Hrt_acc_no);

                InvoiceHeader _invheader = new InvoiceHeader();

                //_invheader.Sah_com = gvInvoice.Rows[i].Cells[2].Text;
                _invheader.Sah_com = _rvhdr.Hrt_com;
                _invheader.Sah_cre_by = _rvhdr.Hrt_cre_by;
                _invheader.Sah_cre_when = DateTime.Now;
                _invheader.Sah_currency = odt.Rows[0]["Sah_currency"].ToString();
                _invheader.Sah_cus_add1 = odt.Rows[0]["sah_cus_add1"].ToString();
                _invheader.Sah_cus_add2 = odt.Rows[0]["sah_cus_add2"].ToString();
                _invheader.Sah_cus_cd = odt.Rows[0]["sah_cus_cd"].ToString();
                _invheader.Sah_cus_name = odt.Rows[0]["sah_cus_name"].ToString();
                _invheader.Sah_d_cust_add1 = odt.Rows[0]["sah_d_cust_add1"].ToString();
                _invheader.Sah_d_cust_add2 = odt.Rows[0]["sah_d_cust_add2"].ToString();
                _invheader.Sah_d_cust_cd = odt.Rows[0]["sah_d_cust_cd"].ToString();
                _invheader.Sah_direct = false;
                _invheader.Sah_dt = DateTime.Now.Date;
                _invheader.Sah_epf_rt = 0;
                _invheader.Sah_esd_rt = 0;
                _invheader.Sah_ex_rt = Convert.ToDecimal(odt.Rows[0]["sah_ex_rt"].ToString());
                _invheader.Sah_inv_no = _documentNo;
                _invheader.Sah_inv_sub_tp = "REV";
                _invheader.Sah_inv_tp = "RVT";
                _invheader.Sah_is_acc_upload = false;
                _invheader.Sah_man_cd = odt.Rows[0]["sah_man_cd"].ToString();
                _invheader.Sah_man_ref = odt.Rows[0]["sah_man_ref"].ToString();
                _invheader.Sah_manual = false;
                _invheader.Sah_mod_by = _rvhdr.Hrt_cre_by;
                _invheader.Sah_mod_when = DateTime.Now;
                _invheader.Sah_pc = _rvhdr.Hrt_pc;
                _invheader.Sah_pdi_req = 0;
                _invheader.Sah_ref_doc = odt.Rows[0]["sah_inv_no"].ToString();
                _invheader.Sah_remarks = "HP REVERT";
                _invheader.Sah_sales_chn_cd = "";
                _invheader.Sah_sales_chn_man = "";
                _invheader.Sah_sales_ex_cd = odt.Rows[0]["Sah_sales_ex_cd"].ToString();
                _invheader.Sah_sales_region_cd = "";
                _invheader.Sah_sales_region_man = "";
                _invheader.Sah_sales_sbu_cd = "";
                _invheader.Sah_sales_sbu_man = "";
                _invheader.Sah_sales_str_cd = "";
                _invheader.Sah_sales_zone_cd = "";
                _invheader.Sah_sales_zone_man = "";
                _invheader.Sah_seq_no = 1;
                _invheader.Sah_session_id = _invhdr.Ith_session_id;
                _invheader.Sah_structure_seq = "";
                _invheader.Sah_stus = "A";
                _invheader.Sah_town_cd = "";
                _invheader.Sah_tp = "INV";
                _invheader.Sah_wht_rt = 0;//_rvhdr.Hrt_acc_no
                _invheader.Sah_acc_no = _rvhdr.Hrt_acc_no;
                _invheader.Sah_tax_inv = Convert.ToInt32(odt.Rows[0]["Sah_tax_inv"].ToString()) == 1 ? true : false;
                _invheader.Sah_anal_5 = odt.Rows[0]["Sah_anal_5"].ToString();
                _invheader.Sah_anal_3 = odt.Rows[0]["Sah_anal_3"].ToString();
                _invheader.Sah_anal_4 = "ARQT014";
                _invheader.Sah_anal_7 = Convert.ToDecimal(_rvhdr.Hrt_bal_cap);

                _invheader.Sah_cre_by = _invhdr.Ith_cre_by;

                #endregion
                #region InventoryHeader
                InventoryHeader _inventoryHeader = new InventoryHeader();
                _inventoryHeader.Ith_seq_no = _inventoryDAL.GetSerialID();
                _inventoryHeader.Ith_com = _rvhdr.Hrt_com;
                _inventoryHeader.Ith_loc = _invhdr.Ith_loc;
                DateTime _docDate = Convert.ToDateTime(_rvhdr.Hrt_rvt_dt).Date;
                _inventoryHeader.Ith_doc_date = _docDate;
                _inventoryHeader.Ith_doc_year = _docDate.Year;
                _inventoryHeader.Ith_direct = true;
                _inventoryHeader.Ith_doc_tp = "SRN";
                _inventoryHeader.Ith_cate_tp = _invhdr.Ith_cate_tp;// txtSubType.Text.Trim();
                _inventoryHeader.Ith_bus_entity = "";
                _inventoryHeader.Ith_is_manual = false;
                _inventoryHeader.Ith_manual_ref = "";
                _inventoryHeader.Ith_sub_tp = "REVERT";
                _inventoryHeader.Ith_remarks = _invhdr.Ith_remarks;
                _inventoryHeader.Ith_stus = "A";
                _inventoryHeader.Ith_cre_by = _rvhdr.Hrt_cre_by;
                _inventoryHeader.Ith_cre_when = DateTime.Now;
                _inventoryHeader.Ith_mod_by = _rvhdr.Hrt_cre_by;
                _inventoryHeader.Ith_mod_when = DateTime.Now;
                _inventoryHeader.Ith_session_id = _invhdr.Ith_session_id;
                _inventoryHeader.Ith_pc = _invhdr.Ith_pc;
                _inventoryHeader.Ith_oth_docno = _documentNo;
                _inventoryHeader.Ith_acc_no = _rvhdr.Hrt_acc_no;
                _inventoryHeader.Ith_sub_docno = _documentNo;
                _inventoryHeader.Ith_gen_frm = _invhdr.Ith_gen_frm;
                #endregion
                #region  MasterAutoNumber _SRNAuto = new MasterAutoNumber();
                MasterAutoNumber _SRNAuto = new MasterAutoNumber();
                _SRNAuto.Aut_cate_cd = _invhdr.Ith_loc;
                _SRNAuto.Aut_cate_tp = "LOC";
                _SRNAuto.Aut_direction = 1;
                _SRNAuto.Aut_modify_dt = null;
                _SRNAuto.Aut_moduleid = "SRN";
                _SRNAuto.Aut_number = 0;
                _SRNAuto.Aut_start_char = "SRN";
                _SRNAuto.Aut_year = Convert.ToDateTime(_rvhdr.Hrt_rvt_dt).Year;
                #endregion
                // _InvoiceItem = _InvoiceItem.Where(p => _pickserial.Any(p2 => p2.Tus_itm_cd == p.Sad_itm_cd)).ToList();
                _InvoiceItem = _InvoiceItem.Where(p => _pickserial.Any(p2 => p2.Tus_base_itm_line == p.Sad_itm_line)).ToList();


                foreach (InvoiceItem item in _InvoiceItem)
                {
                    foreach (ReptPickSerials _one in _pickserial)
                    {
                        // if (_one.Tus_itm_cd!=item.Sad_itm_cd)
                        if (_one.Tus_base_itm_line != item.Sad_itm_line)
                        {

                            continue;
                        }
                        HpRevertDetail _single = new HpRevertDetail();
                        _single.Hrd_itm_bal = _balancepotion * _one.Tus_unit_price * _one.Tus_qty;
                        _single.Hrd_itm_bal_cap = _single.Hrd_itm_bal * 100 / (100 + _accInterest);
                        if (_totalVal > 0)
                        {
                            //decimal tem = (_clsBal * _one.Tus_unit_price) / _totalVal;
                            //_single.Hrd_itm_bal_cap = Math.Round((tem * 100) / (100 + _accInterest), 4);
                        }
                        if (_mstCom.Mc_anal23 == "RED")
                        {
                            _single.Hrd_itm_bal = _single.Hrd_itm_bal_cap + _single.Hrd_itm_bal_intr;
                        }

                        if (_totalVal > 0)
                        {
                            decimal tem = (_clsBal * _one.Tus_unit_price) / _totalVal;

                            _single.Hrd_itm_bal = Math.Round(tem, 4);
                            _single.Hrd_itm_bal_intr = Math.Round((tem * _accInterest) / (100 + _accInterest), 4);
                            _single.Hrd_itm_bal_cap = Math.Round((tem * 100) / (100 + _accInterest), 4);
                        }

                        if (_mstCom.Mc_anal23 == "RED")
                        {
                            _single.Hrd_itm_bal_cap = Math.Round((_rvhdr.Hrt_bal_cap / _ac.Hpa_cash_val) * _one.Tus_unit_price * _one.Tus_qty, 4);
                            _single.Hrd_itm_bal_intr = Math.Round((_rvhdr.Hrt_bal_intr / _ac.Hpa_cash_val) * _one.Tus_unit_price * _one.Tus_qty, 4);
                            _single.Hrd_itm_bal = _single.Hrd_itm_bal_cap + _single.Hrd_itm_bal_intr;
                        }


                        if (item.Sad_tot_amt != 0)
                        {
                            item.Sad_tot_amt = Math.Round(_single.Hrd_itm_bal_cap, 2);
                            item.Sad_unit_rt = Math.Round(_single.Hrd_itm_bal_cap, 2);
                            item.Sad_unit_amt = Math.Round(_single.Hrd_itm_bal_cap, 2);
                            item.Sad_pb_price = Math.Round(_single.Hrd_itm_bal_cap, 2);

                            //item.Sad_tot_amt = Math.Round(_single.Hrd_itm_bal, 2);
                            //item.Sad_unit_rt = Math.Round(_single.Hrd_itm_bal, 2);
                            //item.Sad_unit_amt = Math.Round(_single.Hrd_itm_bal, 2);
                            //item.Sad_pb_price = Math.Round(_single.Hrd_itm_bal, 2);
                        }
                        item.Sad_itm_tax_amt = 0;
                        item.Sad_itm_stus = _one.Tus_itm_stus;
                        item.Sad_qty = _one.Tus_qty;
                        item.Sad_do_qty = _one.Tus_qty;
                        item.Sad_inv_no = _invheader.Sah_ref_doc;
                        item.Sad_srn_qty = _one.Tus_qty;



                    }


                }
                //var result = peopleList2.Where(p => !peopleList1.Any(p2 => p2.ID == p.ID));
                string _invoiceNo = "";
                string _docNo = "";
                List<ReptPickSerialsSub> _doitemSubSerials = new List<ReptPickSerialsSub>();
                Int32 _eff = SaveReversalForCommon(_invheader, _InvoiceItem, _invoiceAuto, true, out   _invoiceNo, _inventoryHeader, _pickserial, _picksubserial, _SRNAuto, out  _docNo);
                if (_eff == -2)
                {
                    throw new System.ArgumentException("This serial already exist", "Information");
                }

                if (!string.IsNullOrEmpty(_docNo))
                {
                    _salesDAL.UpdateInvoiceRevNo(_invoiceNo, _docNo);
                }
                _inventoryDAL.UpdateMovementDocNo(_inventoryHeader.Ith_seq_no, _docNo);

                ADJdoc = _invoiceNo + " " + _docNo;
                #endregion
                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();
                _ScmCommonDAL.TransactionCommit();
                _generalDAL.TransactionCommit();
                RVDoc = _documentNo;
                RVDoc = _docNo;

                //_tr.Complete();

                //}

                //_rvdoc = RVDoc;
                //_adjDoc = ADJdoc;

                _rvdoc = _invoiceNo;
                _adjDoc = _docNo;

                return _effect;
            }
            catch (Exception ex)
            {
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _rvdoc = ex.Message.ToString();
                _adjDoc = string.Empty;
                return -99;
            }
        }

        public Int32 SaveGeneralDiscDef(List<CashGeneralDicountDef> _genDiscList, string _circ, out string _err)
        {
            Int32 effect = 0;
            _err = "";
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                int eff = _salesDAL.DeleteGenDiscDefByCirc(_circ);

                foreach (CashGeneralDicountDef _genDisc in _genDiscList)
                {
                    effect = _salesDAL.SaveGeneralDiscDef(_genDisc);
                }
                _salesDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                effect = -1;
                _err = "ERROR : " + ex.Message.ToString();
                _salesDAL.TransactionRollback();
            }
            return effect;
        }

        public Int32 SaveBusinessEntityDiscount(CashGeneralDicountDef dicDef, List<string> pc_list)
        {
            _salesDAL = new SalesDAL();


            Int32 effect = -1;
            //if (pc == "All")
            //{
            //List<string> pc_list = GetAllProfCenters(dicDef.Sgdd_com);
            // _salesDAL.ConnectionOpen();
            using (TransactionScope _tr = new TransactionScope())
            {

                foreach (string pc_ in pc_list)
                {
                    _salesDAL.ConnectionOpen();
                    dicDef.Sgdd_pc = pc_;
                    effect = _salesDAL.SaveBusinessEntityDiscount(dicDef, pc_);
                    _salesDAL.ConnectionClose();
                }
                //
                _tr.Complete();
            }

            // _salesDAL.ConnectionClose();
            //}
            //else
            //{
            // _salesDAL.ConnectionOpen();
            //effect = _salesDAL.SaveBusinessEntityDiscount(dicDef, pc);
            // _salesDAL.ConnectionClose();
            //}


            return effect;
        }

        public VehicalRegistrationDefnition GetVehRegDef(string _com, string _inv, string _itm, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehRegDef(_com, _inv, _itm, _date);
        }

        public MasterOutsideParty GetOutSidePartyDetails(string _cd, string _type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetOutSidePartyDetails(_cd, _type);
        }

        public InsuarancePolicy GetInusPolicy(string _cd)
        {

            _salesDAL = new SalesDAL();
            return _salesDAL.GetInusPolicy(_cd);
        }

        public Boolean validateBank_and_Branch(string bus_cd, string branch_cd, string _type)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            Boolean eff = false;
            try
            {
                if (branch_cd == null)
                {
                    MasterOutsideParty bank_ = _salesDAL.GetOutSidePartyDetails(bus_cd, _type);
                    if (bank_.Mbi_cd == null)
                    {
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
                MasterOutsideParty bank = _salesDAL.GetOutSidePartyDetails(bus_cd, _type);
                if (bank.Mbi_cd == null)
                {
                    return false;
                }
                else
                {
                    DataTable tblDet = _salesDAL.Get_buscom_branch_det(bus_cd);

                    foreach (DataRow rw in tblDet.Rows)
                    {
                        string branchCD = Convert.ToString(rw["MBB_CD"]);
                        if (branchCD == branch_cd)
                        {
                            eff = true;
                        }
                        else
                        {
                            //do nothing.
                        }


                    }
                }

            }
            catch (Exception ex)
            {
                return false;
            }

            _salesDAL.ConnectionClose();
            return eff;
        }

        /// <summary>
        /// Check item/serialize or promotional discount for the filtered list from the GeneralEntityDiscountDefinition
        /// Written by Prabhath
        /// </summary>
        /// <param name="_list"> Fitered List </param>
        /// <param name="_item"> Item </param>
        /// <param name="_isAllowSerial"> Is Allow for serialized </param>
        /// <param name="_isAllowPromotion"> Is Allow for promotion </param>
        /// <returns> List of filtered detail  </returns>
        public List<CashGeneralEntiryDiscountDef> CheckItemforEntityDiscount(List<CashGeneralEntiryDiscountDef> _list, string _item, bool _isAllowSerial, bool _isAllowPromotion)
        {
            List<CashGeneralEntiryDiscountDef> _returnList = null;
            if (_list != null)
            {
                //check for item
                var _checkItem = (from _l in _list where _l.Sgdd_itm == _item select _l).ToList();
                if (_checkItem != null)
                {
                    _returnList = _checkItem;
                    //check for is serialized
                    var _isSerial = (from _l in _checkItem where _l.Sgdd_alw_ser == _isAllowSerial select _l).ToList();
                    if (_isSerial != null) _returnList = _isSerial;
                    //check for is promotion
                    if (_isSerial == null || _isSerial.Count <= 0)
                    {
                        var _isPromotion = (from _l in _checkItem where _l.Sgdd_alw_pro == _isAllowPromotion select _l).ToList();
                        if (_isPromotion != null) _returnList = _isPromotion;
                    }
                }
            }
            return _returnList;
        }

        /// <summary>
        /// Return General Entity Discount Definition to the client as per the given parameters
        /// Written by Prabhath
        /// </summary>
        /// <param name="_company">Company Code</param>
        /// <param name="_profitcenter">Profit Center</param>
        /// <param name="_date">Current Date</param>
        /// <param name="_book">Price Book</param>
        /// <param name="_level">Price Level</param>
        /// <param name="_customer">Customer Code</param>
        /// <param name="_item">Item</param>
        /// <param name="_isAllowSerial">Is Allow for serialized</param>
        /// <param name="_isAllowPromotion">Is Allow for promotion </param>
        /// <returns> List of filtered General Entity Discount Definition Detail  </returns>
        public Dictionary<decimal, decimal> GetGeneralEntityDiscountDefinition(string _company, string _profitcenter, DateTime _date, string _book, string _level, string _customer, string _item, bool _isAllowSerial, bool _isAllowPromotion)
        {
            _salesDAL = new SalesDAL();
            string _msg = string.Empty;
            List<CashGeneralEntiryDiscountDef> _list = _salesDAL.GetGeneralEntityDiscountDefinition(_company, _profitcenter, _date, _book, _level);
            CashGeneralEntiryDiscountDef _returnList = null;
            List<CashGeneralEntiryDiscountDef> _iniLists = null;
            Dictionary<decimal, decimal> _returns = new Dictionary<decimal, decimal>();

            //check for customer

            if (_list != null)
                if (_list.Count > 0)
                {
                    var _checkCustomer = (from _l in _list where _l.Sgdd_cust_cd == _customer select _l).ToList();
                    if (_checkCustomer != null && _checkCustomer.Count > 0)
                        _iniLists = _checkCustomer;
                    if (_returnList == null)
                        _iniLists = _list;

                    List<CashGeneralEntiryDiscountDef> _rList = CheckItemforEntityDiscount(_iniLists, _item, _isAllowSerial, _isAllowPromotion);
                    if (_rList != null && _rList.Count > 0)
                        _returnList = CheckItemforEntityDiscount(_iniLists, _item, _isAllowSerial, _isAllowPromotion)[0];

                    if (_returnList != null)
                        _returns.Add(_returnList.Sgdd_disc_val, _returnList.Sgdd_disc_rt);
                    else if (_iniLists != null)
                        _returns.Add(_iniLists[0].Sgdd_disc_val, _iniLists[0].Sgdd_disc_rt);
                    else
                        _returns.Add(0, 0);

                }
            return _returns;

        }

        public MasterVehicalInsuranceDefinition GetVehInsDef(string _com, string _inv, string _itm, DateTime _date, string _pc, string _insCom, string _insPol, Int32 _tearm)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehInsDef(_com, _inv, _itm, _date, _pc, _insCom, _insPol, _tearm);
        }

        #region Happy Hour Discount/Variable Discount Calculation
        private decimal FigureRoundUp(decimal value, bool _isFinal, bool _isRoundup)
        {
            if (_isRoundup && _isFinal) return RoundUpForPlace(Math.Round(value), 2);
            else return RoundUpForPlace(value, 2);
        }
        public decimal RoundUpForPlace(decimal input, int places)
        {
            double multiplier = Math.Pow(10, Convert.ToDouble(places));
            return Math.Ceiling(input * Convert.ToDecimal(multiplier)) / Convert.ToDecimal(multiplier);
        }

        // updated by akila 2018/03/26
        private decimal TaxCalculation(string _company, string _item, string _status, decimal _qty, PriceBookLevelRef _level, decimal _pbUnitPrice, decimal _discount, decimal _disRate, bool _isTaxfaction, bool _isTaxInvoice, DateTime _inv_dt, bool _isCalTax = true)
        {
            bool _isVATInvoice = _isTaxInvoice;

            if (_isCalTax)
            {
                List<MasterItemTax> _taxs = new List<MasterItemTax>();

                if (_inv_dt == DateTime.Now.Date)   //kapila 1/11/2016
                {
                    if (_isTaxfaction == false)
                        _taxs = GetTax(_company, _item, _status);
                    else
                    {
                        Boolean _isStrucBaseTax = false;
                        MasterCompany _masterComp = _generalDAL.GetCompByCode(_company);

                        if (_masterComp.MC_TAX_CALC_MTD == "1") _isStrucBaseTax = true;

                        if (_isStrucBaseTax == true)    //kapila  26/11/2015
                        {
                            MasterItem _mstItem = _inventoryDAL.GetItem(_company, _item);
                            _taxs = _salesDAL.GetItemTax_strucbase(_company, _item, _status, string.Empty, string.Empty, _mstItem.Mi_anal1);
                        }
                        else

                            _taxs = GetItemTax(_company, _item, _status, string.Empty, string.Empty);

                        var _Tax = from _itm in _taxs
                                   select _itm;
                        foreach (MasterItemTax _one in _Tax)
                        {
                            if (_isTaxfaction == false)
                                _pbUnitPrice = _pbUnitPrice * _one.Mict_tax_rate;
                            else
                                if (_isVATInvoice)
                                {
                                    _discount = _pbUnitPrice * _qty * _disRate / 100;
                                    _pbUnitPrice = ((_pbUnitPrice - _discount / _qty) * _one.Mict_tax_rate / 100) * _qty;
                                }
                                else
                                    _pbUnitPrice = (_pbUnitPrice * _one.Mict_tax_rate / 100) * _qty;
                        }
                    }
                }
                else
                {
                    _taxs = _salesDAL.GetItemTaxEffDt(_company, _item, _status, string.Empty, string.Empty, _inv_dt);

                    if (_taxs.Count == 0)
                    {
                        List<LogMasterItemTax> _taxsEffDt = new List<LogMasterItemTax>();
                        _taxsEffDt = _salesDAL.GetItemTaxLog(_company, _item, _status, string.Empty, string.Empty, _inv_dt);
                        if (_taxsEffDt != null && _taxsEffDt.Count > 0)
                        {
                            var _Tax = from _itm in _taxsEffDt
                                       select _itm;
                            foreach (LogMasterItemTax _one in _Tax)
                            {
                                if (_isTaxfaction == false)
                                    _pbUnitPrice = _pbUnitPrice * _one.Lict_tax_rate;
                                else
                                    if (_isVATInvoice)
                                    {
                                        _discount = _pbUnitPrice * _qty * _disRate / 100;
                                        _pbUnitPrice = ((_pbUnitPrice - _discount / _qty) * _one.Lict_tax_rate / 100) * _qty;
                                    }
                                    else
                                        _pbUnitPrice = (_pbUnitPrice * _one.Lict_tax_rate / 100) * _qty;
                            }
                        }

                    }
                    else
                    {
                        if (_taxs != null && _taxs.Count > 0)
                        {
                            var _Tax = from _itm in _taxs
                                       select _itm;
                            foreach (MasterItemTax _one in _Tax)
                            {
                                if (_isTaxfaction == false)
                                    _pbUnitPrice = _pbUnitPrice * _one.Mict_tax_rate;
                                else
                                    if (_isVATInvoice)
                                    {
                                        _discount = _pbUnitPrice * _qty * _disRate / 100;
                                        _pbUnitPrice = ((_pbUnitPrice - _discount / _qty) * _one.Mict_tax_rate / 100) * _qty;
                                    }
                                    else
                                        _pbUnitPrice = (_pbUnitPrice * _one.Mict_tax_rate / 100) * _qty;
                            }
                        }
                    }
                }
            }
            else
            {
                _pbUnitPrice = 0;
            }

            return _pbUnitPrice;
        }

        //updated by akila 2018/03/26
        private void CalculateItem(string _company, decimal _unitprice, decimal _qty, bool _isRoundup, string _item, string _status, decimal _discountamt, decimal _disrate, bool _isTaxInvoice, out decimal txtUnitAmt, out decimal txtTaxAmt, out decimal txtDisAmt, out decimal txtLineAmount, DateTime _invDt, bool _isCalTax = true)
        {
            txtUnitAmt = FigureRoundUp(_unitprice * _qty, true, _isRoundup);

            //updated by akila 20148/03/26
            decimal _vatPortion = FigureRoundUp(TaxCalculation(_company, _item, _status, _qty, null, _unitprice, _discountamt, _disrate, true, _isTaxInvoice, _invDt, _isCalTax), true, _isRoundup);

            txtTaxAmt = _vatPortion;
            txtDisAmt = 0;

            decimal _totalAmount = _qty * _unitprice;
            decimal _disAmt = 0;
            decimal _vatval = 0;

            if (_disrate + _discountamt != 0)
            {
                bool _isVATInvoice = _isTaxInvoice;
                if (_isVATInvoice)
                {
                    _disAmt = FigureRoundUp(_totalAmount * (_disrate / 100), true, _isRoundup);
                    if (_disAmt == 0)
                    {
                        _disAmt = _discountamt;
                    }
                }
                else
                {
                    _disAmt = FigureRoundUp((_totalAmount + _vatPortion) * (_disrate / 100), true, _isRoundup);
                    if (_disAmt == 0)
                    {
                        _disAmt = _discountamt;
                    }

                    if (_disrate > 0 || _discountamt > 0)
                    {
                        //updated by akila 2018/03/26
                        if (_isCalTax)
                        {
                            MasterCompany _masterComp = _generalDAL.GetCompByCode(_company);
                            Boolean _isStrucBaseTax = false;

                            List<MasterItemTax> _tax = new List<MasterItemTax>();
                            if (_invDt == DateTime.Now.Date)    //kapila 1/11/2016
                            {
                                if (_masterComp.MC_TAX_CALC_MTD == "1") _isStrucBaseTax = true;

                                if (_isStrucBaseTax == true)    //kapila  26/11/2015
                                {
                                    MasterItem _mstItem = _inventoryDAL.GetItem(_company, _item);
                                    _tax = _salesDAL.GetItemTax_strucbase(_company, _item, _status, string.Empty, string.Empty, _mstItem.Mi_anal1);
                                }
                                else
                                    _tax = _salesDAL.GetItemTax(_company, _item, _status, string.Empty, string.Empty);

                                if (_tax != null && _tax.Count > 0)
                                {
                                    _vatval = ((_totalAmount + _vatPortion - _disAmt) * _tax[0].Mict_tax_rate) / (100 + _tax[0].Mict_tax_rate);
                                    _vatval = FigureRoundUp(_vatval, true, _isRoundup);
                                    txtTaxAmt = _vatval;
                                }
                            }
                            else
                            {
                                _tax = _salesDAL.GetItemTaxEffDt(_company, _item, _status, string.Empty, string.Empty, _invDt);

                                if (_tax.Count == 0)
                                {
                                    List<LogMasterItemTax> _taxsEffDt = new List<LogMasterItemTax>();
                                    _taxsEffDt = _salesDAL.GetItemTaxLog(_company, _item, _status, string.Empty, string.Empty, _invDt);
                                    if (_taxsEffDt != null && _taxsEffDt.Count > 0)
                                    {
                                        _vatval = ((_totalAmount + _vatPortion - _disAmt) * _taxsEffDt[0].Lict_tax_rate) / (100 + _taxsEffDt[0].Lict_tax_rate);
                                        _vatval = FigureRoundUp(_vatval, true, _isRoundup);
                                        txtTaxAmt = _vatval;
                                    }
                                }
                                else
                                {
                                    if (_tax != null && _tax.Count > 0)
                                    {
                                        _vatval = ((_totalAmount + _vatPortion - _disAmt) * _tax[0].Mict_tax_rate) / (100 + _tax[0].Mict_tax_rate);
                                        _vatval = FigureRoundUp(_vatval, true, _isRoundup);
                                        txtTaxAmt = _vatval;
                                    }
                                }
                            }
                        }
                    }
                }

                txtDisAmt = _disAmt;
            }
            else
                txtDisAmt = 0;
            if (_disrate > 0)
                txtLineAmount = FigureRoundUp(_totalAmount + _vatPortion - _disAmt, true, _isRoundup);
            else
                txtLineAmount = FigureRoundUp(_totalAmount + Convert.ToDecimal(txtTaxAmt) - _disAmt, true, _isRoundup);
        }

        private InvoiceItem CalculateDiscount(string _company, CashPromotionDiscountDetail _discount, InvoiceItem _itm, bool _isNormal, bool _isTaxInvoice, DateTime _invDt)
        {

            decimal _specialDiscountValue = 0;
            decimal _specialDiscountRate = 0;
            InvoiceItem _Item = new InvoiceItem();
            decimal _managerDiscount = _itm.Sad_disc_rt;
            _generalDAL = new GeneralDAL();
            _inventoryDAL = new InventoryDAL();

            //Getting Values
            if (_discount != null)
            {
                _specialDiscountValue = _discount.Spdd_disc_val;

                if (_managerDiscount < _discount.Spdd_disc_rt)
                {
                    if ((_discount.Spdd_disc_rt + _itm.Sad_disc_rt) >= 100)
                    {
                        _specialDiscountRate = _discount.Spdd_disc_rt;
                    }
                    else
                    {
                        _specialDiscountRate = _discount.Spdd_disc_rt + _itm.Sad_disc_rt;
                    }

                }
                else
                {
                    _specialDiscountRate = _managerDiscount;
                }

                //_specialDiscountValue = _discount.Spdd_disc_val;
                //_specialDiscountRate = _discount.Spdd_disc_rt;
            }
            else
            {
                _specialDiscountValue = 0;
                _specialDiscountRate = 0;
            }

            //updated by akila 2018/03/26 -- check whether tax should calculate for current company
            bool _isCalculateTax = true;
            PriceBookLevelRef _priceLvl = GetPriceLevel(_company, _itm.Sad_pbook, _itm.Sad_pb_lvl);
            if (_priceLvl != null)
            {
                _isCalculateTax = _priceLvl.Sapl_vat_calc;
            }

            //MasterCompany _masterComp = _generalDAL.GetCompByCode(_company);
            //Boolean _isStrucBaseTax = false;

            //List<MasterItemTax> _tax = new List<MasterItemTax>();
            //if (_masterComp.MC_TAX_CALC_MTD == "1") _isStrucBaseTax = true;

            //if (_isStrucBaseTax == true)    //kapila  26/11/2015
            //{
            //    MasterItem _mstItem = _inventoryDAL.GetItem(_company, _itm.Sad_itm_cd);
            //    _tax = _salesDAL.GetItemTax_strucbase(_company, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _mstItem.Mi_anal1);
            //}
            //else
            //    _tax = _salesDAL.GetItemTax(_company, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "VAT", string.Empty);

            if (_managerDiscount < _specialDiscountRate + _specialDiscountValue)
            {
                decimal _disamt = 0;
                decimal _unitamt = 0;
                decimal _taxamt = 0;
                decimal _lineamt = 0;

                //updated by akila 2018/04/03
                if (_itm.Sad_unit_rt > 0)
                {
                    CalculateItem(_company, _itm.Sad_unit_rt, _itm.Sad_qty, true, _itm.Sad_itm_cd, _itm.Sad_itm_stus, _specialDiscountValue, _specialDiscountRate, _isTaxInvoice, out _unitamt, out _taxamt, out _disamt, out _lineamt, _invDt, _isCalculateTax);

                    _itm.Sad_disc_amt = _disamt;
                    _itm.Sad_itm_tax_amt = _taxamt;
                    _itm.Sad_tot_amt = _lineamt;

                    ////Re-arrange invoice items
                    //_itm.Sad_disc_amt = _itm.Sad_unit_rt * _itm.Sad_qty * _specialDiscountRate / 100 + _specialDiscountValue;
                    //if (_tax != null) if (_tax.Count > 0) if (Math.Round(_itm.Sad_itm_tax_amt) != 0)
                    //            _itm.Sad_itm_tax_amt = ((_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt) * _tax[0].Mict_tax_rate / 100;

                    //_itm.Sad_tot_amt = (_itm.Sad_unit_rt * _itm.Sad_qty) - _itm.Sad_disc_amt + _itm.Sad_itm_tax_amt;

                    _itm.Sad_disc_rt = _specialDiscountRate;
                    _itm.Sad_dis_seq = _discount.Spdi_seq; _itm.Sad_dis_line = _discount.Spdi_line;
                    if (_isNormal) _itm.Sad_dis_type = "P";
                    else _itm.Sad_dis_type = "L";
                }
                else
                {
                    _itm.Sad_disc_amt = _disamt;
                    _itm.Sad_itm_tax_amt = _taxamt;
                    _itm.Sad_tot_amt = _lineamt;
                    _itm.Sad_disc_rt = 0;
                }
            }
            else
                _itm.Sad_dis_type = "M";

            _itm.Sad_job_line = 1;
            _Item = _itm;

            return _Item;
        }
        private CashPromotionDiscountDetail GetMaxDiscountPromotionWithLoyaltyNNormal(CashPromotionDiscountDetail _lol, CashPromotionDiscountDetail _normal, out bool _isNormal)
        {

            if (_lol == null) { _isNormal = true; return _normal; }
            if (_normal == null) { _isNormal = false; return _lol; }
            bool isNormal = false;
            decimal _lolrate = _lol.Spdd_disc_rt;
            decimal _normalrate = _normal.Spdd_disc_rt;
            decimal _lolval = _lol.Spdd_disc_val;
            decimal _normalval = _normal.Spdd_disc_val;
            CashPromotionDiscountDetail _returnlist = null;

            if (_lolrate > 0 && _normalrate > 0 && _lolval == 0 && _normalval == 0)
            {
                if (_lolrate > _normalrate)
                {
                    isNormal = false;
                    _returnlist = _lol;
                }
                else
                {
                    isNormal = true;
                    _returnlist = _normal;
                }
            }
            else if (_lolval > 0 && _normalval > 0 && _lolrate == 0 && _normalrate == 0)
            {
                if (_lolval > _normalval)
                {
                    isNormal = false;
                    _returnlist = _lol;
                }
                else
                {
                    isNormal = true;
                    _returnlist = _normal;
                }
            }
            else
            {
                isNormal = true;
                _returnlist = _normal;
            }

            _isNormal = isNormal;
            return _returnlist;
        }

        public DataTable GetPromotionalDiscountSequences(string _company, string _profitcenter, string _invoicetype, Int32 _time, string _day, DateTime _date, List<InvoiceItem> _InInvDet, List<RecieptItem> _InReceiptDet, InvoiceHeader _invoiceheader, out bool isMulty, out int _seq)
        {

            try
            {

                /*
                 * 
                 * get item code
                 * get all active sequences according to paymode
                 * find best sequence according to discount amount(not rate)
                 * send discount sequence
                 * 
                 
                 *
                 * SINGLE PAYMODE
                 * get sequence according to paymode
                 * get latest sequence
                 * 
                 
                 * MULTIPLE PAYMODE
                 * 01  get sequences whicha allow muliple paymodes
                 *     get latest sequence
                 *     calculate discount full payment
                 *     add to list
                 * 
                 * 02   get sequences which allow partical payments
                 *      loop through paymodes and find matching sequences
                 *      calculate discount for paymode part
                 *      add to list
                 *      
                 * 03   calculate highest discount amount
                 *      select highest amount as sequence
                 * 
                 * 
                 */


                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                string _loltype = string.Empty;
                string _membership = string.Empty;
                DataTable _loldet = null;
                List<CashPromotionDiscountDetail> _details = new List<CashPromotionDiscountDetail>();
                List<CashPromotionDiscountDetail> _finalDetails = new List<CashPromotionDiscountDetail>();
                List<MasterSalesPriorityHierarchy> _hierarchy = _salesDAL.GetSalesPriorityHierarchy(_company, _profitcenter, "PC_PRIT_HIERARCHY", "PC");
                if (_hierarchy != null && _hierarchy.Count > 0) _hierarchy = _hierarchy.Where(x => x.Mpi_cd == "PC" || x.Mpi_cd == "CHNL" || x.Mpi_cd == "SCHNL").ToList();
                if (!string.IsNullOrEmpty(_invoiceheader.Sah_anal_6))
                {
                    _loldet = _salesDAL.GetLoyaltyCardDetail(_invoiceheader.Sah_cus_cd, _invoiceheader.Sah_anal_6);
                    if (_loldet != null) if (_loldet.Rows.Count > 0)
                        {
                            _loltype = _loldet.Rows[0].Field<string>("salcm_loty_tp");
                            _membership = _loldet.Rows[0].Field<string>("salcm_cus_spec");
                        }
                }
                //get definition for items
                foreach (InvoiceItem _itm in _InInvDet)
                {
                    if (_itm.Sad_res_line_no != 1)
                    {
                        Int16 _isSerialized = Convert.ToInt16(_salesDAL.GetPriceLevel(_company, _itm.Sad_pbook, _itm.Sad_pb_lvl).Sapl_is_serialized);
                        Int16 _isPromotion = Convert.ToInt16(string.IsNullOrEmpty(_itm.Sad_promo_cd) || _itm.Sad_promo_cd == "0" ? 0 : 1);
                        if (_itm.Sad_conf_no == "0" || _itm.Sad_conf_no == "4")     //kapila 31/12/2016
                            _isPromotion = 0;
                        if (_hierarchy != null && _hierarchy.Count > 0)
                        {
                            foreach (MasterSalesPriorityHierarchy _one in _hierarchy)
                            {
                                string _type = _one.Mpi_cd;
                                string _value = _one.Mpi_val;
                                List<CashPromotionDiscountDetail> _List = _salesDAL.GetGeneralPromotionDiscount(_company, _type, _value, _invoicetype, _time, _day, _date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _itm.Sad_itm_cd, _isSerialized, _isPromotion);
                                if (_List != null && _List.Count > 0)
                                {
                                    //updated by akila 2018/01/10
                                    _List = _List.Where(x => x.Spdi_itm == _itm.Sad_itm_cd && x.Spdd_from_qty <= _itm.Sad_qty && x.Spdd_to_qty >= _itm.Sad_qty).ToList();
                                    if (_List != null && _List.Count > 0)
                                    {
                                        _details.AddRange(_List);
                                    }
                                }
                            }
                        }
                    }
                }

                //ADDED 2014/03/18 LOYALTY DISCOUNT
                //Check for the loyalty discount
                List<CashPromotionDiscountDetail> _lolResult = null;
                if (!string.IsNullOrEmpty(_loltype) && _details != null && _details.Count > 0)
                    _lolResult = _details.Where(x => x.Spdd_pay_tp == "LORE" && x.Spdd_bank.ToUpper() == _loltype.ToUpper() && x.Spdd_cc_tp.ToUpper() == _membership.ToUpper()).ToList();

                //END

                //filter for pay modes
                //get distinct discount sequences
                List<int> _distinctSeqs = _details.Select(x => x.Spdd_seq).Distinct().ToList<int>();
                foreach (int seq in _distinctSeqs)
                {
                    List<CashPromotionDiscountDetail> _temDiscounts = (from _res in _details
                                                                       where _res.Spdd_seq == seq
                                                                       select _res).ToList<CashPromotionDiscountDetail>();

                    bool isAllMatch = false;
                    //has on pay mode
                    if (_InReceiptDet.Count == 1)
                    {
                        foreach (RecieptItem _recItm in _InReceiptDet)
                        {
                            List<CashPromotionDiscountDetail> _payModeList = (from _res in _temDiscounts
                                                                              where _res.Spdd_pay_tp == _recItm.Sard_pay_tp
                                                                              select _res).ToList<CashPromotionDiscountDetail>();
                            if (_payModeList == null || _payModeList.Count <= 0)
                            {
                                isAllMatch = false;
                                break;
                            }

                            //check receipt pay mode with discount pay modes
                            foreach (CashPromotionDiscountDetail _payTp in _temDiscounts)
                            {
                                if (_recItm.Sard_pay_tp.ToUpper() == "CRCD" && _payTp.Spdd_pay_tp == "CRCD")
                                {

                                    //pay mode detail match
                                    //filter by pd(if have)
                                    if (_recItm.Sard_cc_is_promo)
                                    {
                                        if (_recItm.Sard_cc_period == _payTp.Spdd_cc_pd)
                                        {

                                            //pay mode detail match
                                            //filter by pd(if have)
                                            if (_recItm.Sard_cc_is_promo)
                                            {
                                                if (_recItm.Sard_cc_period == _payTp.Spdd_cc_pd)
                                                {
                                                    //01.chk bank,cc type
                                                    //02.chk null bank cc type
                                                    //03.chk null bank null cc type
                                                    if (_recItm.Sard_credit_card_bank == _payTp.Spdd_bank && _recItm.Sard_cc_tp == _payTp.Spdd_cc_tp)
                                                    {
                                                        isAllMatch = true;
                                                        break;
                                                    }
                                                    if (string.IsNullOrEmpty(_payTp.Spdd_bank) && _recItm.Sard_cc_tp == _payTp.Spdd_cc_tp)
                                                    {
                                                        isAllMatch = true;
                                                        break;
                                                    }
                                                    if (string.IsNullOrEmpty(_payTp.Spdd_bank) && string.IsNullOrEmpty(_payTp.Spdd_cc_tp))
                                                    {
                                                        isAllMatch = true;
                                                        break;
                                                    }
                                                    if (_recItm.Sard_credit_card_bank == _payTp.Spdd_bank && string.IsNullOrEmpty(_payTp.Spdd_cc_tp))
                                                    {
                                                        isAllMatch = true;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (_payTp.Spdd_alw_cc_pro)
                                        {
                                            if (_recItm.Sard_cc_period == 0)
                                            {
                                                if (_recItm.Sard_cc_period == _payTp.Spdd_cc_pd)
                                                {

                                                }
                                                else
                                                {
                                                    isAllMatch = false;
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                isAllMatch = false;
                                                continue;
                                            }
                                        }
                                        //01.chk bank,cc type
                                        //02.chk null bank cc type
                                        //03.chk null bank null cc type

                                        if (_recItm.Sard_credit_card_bank == _payTp.Spdd_bank && _recItm.Sard_cc_tp == _payTp.Spdd_cc_tp)
                                        {
                                            isAllMatch = true;
                                            break;
                                        }
                                        if (string.IsNullOrEmpty(_payTp.Spdd_bank) && _recItm.Sard_cc_tp == _payTp.Spdd_cc_tp)
                                        {
                                            isAllMatch = true;
                                            break;
                                        }
                                        if (string.IsNullOrEmpty(_payTp.Spdd_bank) && string.IsNullOrEmpty(_payTp.Spdd_cc_tp))
                                        {
                                            isAllMatch = true;
                                            break;
                                        }
                                        if (_recItm.Sard_credit_card_bank == _payTp.Spdd_bank && string.IsNullOrEmpty(_payTp.Spdd_cc_tp))
                                        {
                                            isAllMatch = true;
                                            break;
                                        }
                                    }
                                }
                                else if (_recItm.Sard_pay_tp.ToUpper() == "CASH" && _payTp.Spdd_pay_tp == "CASH")
                                {
                                    isAllMatch = true;
                                    break;
                                }
                                else if (_recItm.Sard_pay_tp.ToUpper() == "LORE" && _payTp.Spdd_pay_tp == "LORE")
                                {
                                    //chk cd type and membership
                                    if (_payTp.Spdd_bank == _loltype && _payTp.Spdd_cc_tp == _membership)
                                    {
                                        isAllMatch = true;
                                        break;
                                    }
                                    else if (_payTp.Spdd_bank == _loltype && string.IsNullOrEmpty(_payTp.Spdd_cc_tp))
                                    {
                                        isAllMatch = true;
                                        break;
                                    }
                                }
                                else if ((_recItm.Sard_pay_tp.ToUpper() == "CHEQUE" && _payTp.Spdd_pay_tp.ToUpper() == "CHEQUE") || (_recItm.Sard_pay_tp.ToUpper() == "DEBT" && _payTp.Spdd_pay_tp.ToUpper() == "DEBT"))
                                {
                                    //chk cd type and membership
                                    if (_payTp.Spdd_bank == _recItm.Sard_chq_bank_cd)
                                    {
                                        isAllMatch = true;
                                        break;
                                    }
                                    else if (string.IsNullOrEmpty(_payTp.Spdd_bank))
                                    {
                                        isAllMatch = true;
                                        break;
                                    }
                                }
                                //check with pay mode only
                                else if (_recItm.Sard_pay_tp.ToUpper() == _payTp.Spdd_pay_tp)
                                {
                                    isAllMatch = true;
                                    break;
                                }
                                //chk all pay modes
                                else if (string.IsNullOrEmpty(_payTp.Spdd_pay_tp))
                                {
                                    isAllMatch = true;
                                    break;
                                }
                            }
                        }

                    }
                    //has multiple pay modes
                    else
                    {
                        isAllMatch = false;
                        List<CashPromotionDiscountDetail> _temDiscountsMulti = (from _res in _details
                                                                                where _res.Spdd_seq == seq && _res.Spdd_alw_mult == 1
                                                                                select _res).ToList<CashPromotionDiscountDetail>();
                        if (_temDiscountsMulti == null || _temDiscountsMulti.Count <= 0)
                        {
                            continue;
                        }

                        foreach (RecieptItem _recItm in _InReceiptDet)
                        {
                            isAllMatch = false;
                            //check receipt pay mode with discount pay modes
                            foreach (CashPromotionDiscountDetail _payTp in _temDiscounts)
                            {
                                if (_recItm.Sard_pay_tp.ToUpper() == "CRCD" && _payTp.Spdd_pay_tp == "CRCD")
                                {

                                    //pay mode detail match
                                    //filter by pd(if have)
                                    if (_recItm.Sard_cc_is_promo)
                                    {
                                        if (_recItm.Sard_cc_period == _payTp.Spdd_cc_pd)
                                        {
                                            //01.chk bank,cc type
                                            //02.chk null bank cc type
                                            //03.chk null bank null cc type
                                            if (_recItm.Sard_credit_card_bank == _payTp.Spdd_bank && _recItm.Sard_cc_tp == _payTp.Spdd_cc_tp)
                                            {
                                                isAllMatch = true;
                                                break;
                                            }
                                            else if (string.IsNullOrEmpty(_payTp.Spdd_bank) && _recItm.Sard_cc_tp == _payTp.Spdd_cc_tp)
                                            {
                                                isAllMatch = true;
                                                break;
                                            }
                                            else if (string.IsNullOrEmpty(_payTp.Spdd_bank) && string.IsNullOrEmpty(_payTp.Spdd_cc_tp))
                                            {
                                                isAllMatch = true;
                                                break;
                                            }
                                            else
                                            {
                                                isAllMatch = false;
                                                break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        //if (_payTp.Spdd_alw_cc_pro)
                                        //{
                                        //    isAllMatch = false;
                                        //    continue;
                                        //}
                                        //01.chk bank,cc type
                                        //02.chk null bank cc type
                                        //03.chk null bank null cc type
                                        if (_recItm.Sard_credit_card_bank == _payTp.Spdd_bank && _recItm.Sard_cc_tp == _payTp.Spdd_cc_tp)
                                        {
                                            isAllMatch = true;
                                            break;
                                        }
                                        else if (string.IsNullOrEmpty(_payTp.Spdd_bank) && _recItm.Sard_cc_tp == _payTp.Spdd_cc_tp)
                                        {
                                            isAllMatch = true;
                                            break;
                                        }
                                        else if (string.IsNullOrEmpty(_payTp.Spdd_bank) && string.IsNullOrEmpty(_payTp.Spdd_cc_tp))
                                        {
                                            isAllMatch = true;
                                            break;
                                        }
                                        else
                                        {
                                            isAllMatch = false;
                                            //break;
                                        }
                                    }


                                }
                                else if (_recItm.Sard_pay_tp.ToUpper() == "CASH" && _payTp.Spdd_pay_tp == "CASH")
                                {
                                    isAllMatch = true;
                                    break;
                                }
                                else if (_recItm.Sard_pay_tp.ToUpper() == "LORE" && _payTp.Spdd_pay_tp == "LORE")
                                {
                                    //chk cd type and membership
                                    if (_payTp.Spdd_bank == _loltype && _payTp.Spdd_cc_tp == _membership)
                                    {
                                        isAllMatch = true;
                                        break;
                                    }
                                    else if (_payTp.Spdd_bank == _loltype && string.IsNullOrEmpty(_payTp.Spdd_cc_tp))
                                    {
                                        isAllMatch = true;
                                        break;
                                    }
                                    else
                                    {
                                        isAllMatch = false;
                                        break;
                                    }
                                }
                                else if ((_recItm.Sard_pay_tp.ToUpper() == "CHEQUE" && _payTp.Spdd_pay_tp.ToUpper() == "CHEQUE") || (_recItm.Sard_pay_tp.ToUpper() == "DEBT" && _payTp.Spdd_pay_tp.ToUpper() == "DEBT"))
                                {
                                    //chk cd type and membership
                                    if (_payTp.Spdd_bank == _recItm.Sard_chq_bank_cd)
                                    {
                                        isAllMatch = true;
                                        break;
                                    }
                                    else if (string.IsNullOrEmpty(_payTp.Spdd_bank))
                                    {
                                        isAllMatch = true;
                                        break;
                                    }
                                    else
                                    {
                                        isAllMatch = false;
                                        break;
                                    }
                                }
                                //check with pay mode only
                                else if (_recItm.Sard_pay_tp.ToUpper() == _payTp.Spdd_pay_tp)
                                {
                                    isAllMatch = true;
                                    break;
                                }
                                //chk all pay modes
                                else if (string.IsNullOrEmpty(_payTp.Spdd_pay_tp))
                                {
                                    isAllMatch = true;
                                    break;
                                }
                            }
                            if (isAllMatch)// if (!isAllMatch) 28-11-2015 Modified by Nadeeka to Fix the discount issue for mutiple pay mode cehcked with Dilanda
                            {
                                goto END;
                            }
                        }
                    }
                END:
                    //if match add to final list
                    if (isAllMatch)
                    {
                        _finalDetails.AddRange(_temDiscounts);
                    }
                }



                _finalDetails = _finalDetails.OrderByDescending(x => x.Spdd_seq).ToList<CashPromotionDiscountDetail>();

                isMulty = false;
                if (_finalDetails != null && _finalDetails.Count > 0)
                {
                    _seq = _finalDetails[0].Spdd_seq;
                }
                else
                    _seq = -9999;

                //ADDED 2014/03/18
                if (_lolResult != null) if (_lolResult.Count > 0)
                    {
                        bool _normal;
                        //check allow promotion or allow genpo price
                        LoyaltyType _loyaltyType = _salesDAL.GetLoyaltyType(_loltype);
                        if (_loyaltyType == null)
                        {

                        }
                        else
                        {
                            if (!_loyaltyType.Salt_allw_promo)
                            {
                                //check contain promotion
                                int _promoCount = _InInvDet.Where(x => !string.IsNullOrEmpty(x.Sad_promo_cd)).Count();
                                //not have any promo
                                if (_promoCount <= 0)
                                {
                                    if (_finalDetails != null && _finalDetails.Count > 0)
                                    {
                                        CashPromotionDiscountDetail _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], _finalDetails[0], out _normal);
                                        _seq = _final.Spdd_seq;
                                    }
                                    else
                                    {
                                        CashPromotionDiscountDetail _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], null, out _normal);
                                        _seq = _final.Spdd_seq;
                                    }
                                }
                            }
                            else if (_loyaltyType.Salt_defa_pb_only)
                            {
                                //check def pb plevel
                                MasterCompany _com = _inventoryDAL.GetCompByCode(_company);
                                string _defPb = _com.Mc_anal7;
                                int _pbCount = _InInvDet.Where(x => x.Sad_pbook != _defPb).Count();
                                //not have any promo price book
                                if (_pbCount <= 0)
                                {
                                    if (_finalDetails != null && _finalDetails.Count > 0)
                                    {
                                        CashPromotionDiscountDetail _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], _finalDetails[0], out _normal);
                                        _seq = _final.Spdd_seq;
                                    }
                                    else
                                    {
                                        CashPromotionDiscountDetail _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], null, out _normal);
                                        _seq = _final.Spdd_seq;
                                    }
                                }

                            }
                            else
                            {
                                if (_finalDetails != null && _finalDetails.Count > 0)
                                {
                                    CashPromotionDiscountDetail _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], _finalDetails[0], out _normal);
                                    _seq = _final.Spdd_seq;
                                }
                                else
                                {
                                    CashPromotionDiscountDetail _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], null, out _normal);
                                    _seq = _final.Spdd_seq;
                                }
                            }
                        }
                    }

                //END

                return null;

                //********************************************************************

                /*
                DataTable _result = new DataTable();
                _result.TableName = "_result";
                _result.Columns.Add("sequence");
                _result.Columns.Add("circular");
                _result.Columns.Add("disProduct");
                _result.Columns.Add("disRate");
                _result.Columns.Add("finalValue");
                //format list
                List<CashPromotionDiscountDetail> _distinctDetail = _finalDetails.GroupBy(x => x.Spdd_seq).Select(x => x.First()).ToList<CashPromotionDiscountDetail>();

                if (_distinctDetail == null || _distinctDetail.Count <= 0)
                {
                    return null;
                }
                foreach (CashPromotionDiscountDetail _det in _distinctDetail)
                {
                    List<InvoiceItem> copy = new List<InvoiceItem>(_InInvDet);
                    copy.ForEach(x => x.Sad_dis_type = "");
                    copy.ForEach(x => x.Sad_disc_amt = 0);
                    copy.ForEach(x => x.Sad_disc_rt = 0);
                    copy.ForEach(x => x.Sad_dis_line = 0);
                    copy.ForEach(x => x.Sad_dis_seq = 0);
                    DataRow _dr = _result.NewRow();
                    _dr[0] = _det.Spdd_seq;
                    _dr[1] = "aa";//_salesDAL.GetPromotionalHeaderBySeq(_det.Spdd_seq).Spdh_circular;
                    //get header
                    //CashPromotionDiscountHeader _hdr=_salesDAL.getpr
                    List<InvoiceItem> _discountedItems;
                    decimal tobepay;
                    bool isDiff;
                    GetGeneralPromotionProcess(_det.Spdd_seq, _company, copy, out  _discountedItems, out  isDiff, out  tobepay, _invoiceheader);
                    string _disItems = "";
                    foreach (InvoiceItem _itm in _discountedItems)
                    {
                        if (_itm.Sad_dis_type == "P")
                        {
                            _disItems = _disItems + _itm.Sad_itm_cd + " , ";
                        }
                    }
                    if (_disItems.Length > 0)
                    {
                        _disItems = _disItems.Substring(0, _disItems.Length - 2);
                    }
                    _dr[2] = _disItems;
                    _dr[3] = _det.Spdd_disc_rt;
                    _dr[4] = tobepay;
                    _result.Rows.Add(_dr);
                }

                //return final set for user selection
                return _result;
                 */
            }
            catch (Exception ex)
            {
                isMulty = false;
                _seq = -9999;
                return null;
            }
        }


        public void GetGeneralPromotionProcess(int _disSeq, string _company, List<InvoiceItem> _InInvDet, out List<InvoiceItem> _outInvItem, out bool _isDifferent, out decimal _tobepay, InvoiceHeader _invoiceheader)
        {
            try
            {
                bool _isNormal = true;
                Boolean _isDiscFound = false;
                _salesDAL = new SalesDAL();
                _generalDAL = new GeneralDAL();
                _inventoryDAL = new InventoryDAL();
                decimal _currentPaid = _InInvDet.Sum(x => x.Sad_tot_amt);
                List<InvoiceItem> _returnInvList = new List<InvoiceItem>();

                foreach (InvoiceItem invItm in _InInvDet)
                {
                    List<CashPromotionDiscountDetail> _disDetails = _salesDAL.GetPromotinalDiscountDetail01_new(_disSeq, invItm.Sad_itm_cd, "PC", _invoiceheader.Sah_pc);
                    List<CashPromotionDiscountDetail> _dis = (from _res in _disDetails
                                                              where _res.Spdi_itm == invItm.Sad_itm_cd
                                                              select _res).ToList<CashPromotionDiscountDetail>();
                    if (_dis != null && _dis.Count > 0)
                    {
                        bool vat = _invoiceheader.Sah_tax_inv || _invoiceheader.Sah_tax_exempted ? true : false;
                        _returnInvList.Add(CalculateDiscount(_company, _disDetails[0], invItm, _isNormal, vat, _invoiceheader.Sah_dt));
                        _isDiscFound = true;
                    }
                    //else
                    //{
                    //    _returnInvList.Add(invItm);
                    //}

                    //kapila 30/3/2017
                    DataTable _dtChnl = _salesDAL.GetChanelOnPC(_company, _invoiceheader.Sah_pc, "CHNL");

                    _disDetails = _salesDAL.GetPromotinalDiscountDetail01_new(_disSeq, invItm.Sad_itm_cd, "CHNL", _dtChnl.Rows[0]["mpi_val"].ToString());
                    _dis = (from _res in _disDetails
                            where _res.Spdi_itm == invItm.Sad_itm_cd
                            select _res).ToList<CashPromotionDiscountDetail>();
                    if (_dis != null && _dis.Count > 0)
                    {
                        bool vat = _invoiceheader.Sah_tax_inv || _invoiceheader.Sah_tax_exempted ? true : false;
                        _returnInvList.Add(CalculateDiscount(_company, _disDetails[0], invItm, _isNormal, vat, _invoiceheader.Sah_dt));
                        _isDiscFound = true;
                    }
                    //else
                    //{
                    //    _returnInvList.Add(invItm);
                    //}

                    _dtChnl = _salesDAL.GetChanelOnPC(_company, _invoiceheader.Sah_pc, "SCHNL");

                    _disDetails = _salesDAL.GetPromotinalDiscountDetail01_new(_disSeq, invItm.Sad_itm_cd, "SCHNL", _dtChnl.Rows[0]["mpi_val"].ToString());
                    _dis = (from _res in _disDetails
                            where _res.Spdi_itm == invItm.Sad_itm_cd
                            select _res).ToList<CashPromotionDiscountDetail>();
                    if (_dis != null && _dis.Count > 0)
                    {
                        bool vat = _invoiceheader.Sah_tax_inv || _invoiceheader.Sah_tax_exempted ? true : false;
                        _returnInvList.Add(CalculateDiscount(_company, _disDetails[0], invItm, _isNormal, vat, _invoiceheader.Sah_dt));
                        _isDiscFound = true;
                    }

                    if (_isDiscFound == false)
                    {
                        _returnInvList.Add(invItm);
                    }
                }
                _isDifferent = false;
                _outInvItem = _returnInvList;
                decimal _NewPaid = 0;

                if (_outInvItem != null)
                    if (_outInvItem.Count > 0)
                        _NewPaid = (_outInvItem.Select(X => X.Sad_tot_amt)).Sum();
                // _NewPaid = (from _l in _outInvItem select _l.Sad_qty * _l.Sad_unit_rt + _l.Sad_itm_tax_amt - _l.Sad_disc_amt).Sum();

                if (Math.Round(_currentPaid, 2) != Math.Round(_NewPaid, 2))
                    _isDifferent = true;
                else
                    _isDifferent = false;

                _tobepay = _NewPaid;
            }
            catch (Exception ex)
            {
                _isDifferent = false;
                _outInvItem = null;
                _tobepay = 0;
            }
        }

        public void GetGeneralPromotionDiscount(string _company, string _profitcenter, string _invoicetype, Int32 _time, string _day, DateTime _date, List<InvoiceItem> _InInvDet, List<RecieptItem> _InReceiptDet, out List<InvoiceItem> _outInvItem, out bool _isDifferent, out decimal _tobepay, InvoiceHeader _invoiceheader)
        {
            List<InvoiceItem> _returnInvList = new List<InvoiceItem>();
            string _loltype = string.Empty;
            string _membership = string.Empty;
            DataTable _loldet = null;
            _salesDAL = new SalesDAL();
            bool _isNormal = true;

            #region Get Loyalty Type
            if (!string.IsNullOrEmpty(_invoiceheader.Sah_anal_6))
            {
                _loldet = _salesDAL.GetLoyaltyCardDetail(_invoiceheader.Sah_cus_cd, _invoiceheader.Sah_anal_6);
                if (_loldet != null) if (_loldet.Rows.Count > 0)
                    {
                        _loltype = _loldet.Rows[0].Field<string>("salcm_loty_tp");
                        _membership = _loldet.Rows[0].Field<string>("salcm_cus_spec");
                    }
            }
            #endregion

            List<MasterSalesPriorityHierarchy> _hierarchy = _salesDAL.GetSalesPriorityHierarchy(_company, _profitcenter, "PC_PRIT_HIERARCHY", "PC");
            if (_hierarchy != null && _hierarchy.Count > 0) _hierarchy = _hierarchy.Where(x => x.Mpi_cd == "PC" || x.Mpi_cd == "CHNL").ToList();
            decimal _currentPaid = 0;

            if ((_InInvDet == null && _InReceiptDet == null) || (_InInvDet.Count <= 0 && _InReceiptDet.Count <= 0))
            {
                _outInvItem = _returnInvList;
                _isDifferent = false;
                _tobepay = 0;
                return;
            }
            else if (_InInvDet.Count >= 0 && _InReceiptDet.Count >= 0)
            {
                _currentPaid = _InInvDet.Sum(x => x.Sad_tot_amt);
                //(from _l in _InInvDet
                //select _l.Sad_qty * _l.Sad_unit_rt + _l.Sad_itm_tax_amt - _l.Sad_disc_amt).Sum();

                //If single pay mode
                if (_InReceiptDet.Count == 1)
                {
                    #region Only One Paymode for Payment
                    //Check for pay modes
                    RecieptItem _receipt = _InReceiptDet[0];

                    foreach (InvoiceItem _itm in _InInvDet)
                    {
                        if (_itm.Sad_res_line_no != 1)
                        {
                            Int16 _isSerialized = Convert.ToInt16(_salesDAL.GetPriceLevel(_company, _itm.Sad_pbook, _itm.Sad_pb_lvl).Sapl_is_serialized);
                            Int16 _isPromotion = Convert.ToInt16(string.IsNullOrEmpty(_itm.Sad_promo_cd) || _itm.Sad_promo_cd == "0" ? 0 : 1);
                            if (_itm.Sad_conf_no == "0" || _itm.Sad_conf_no == "4")
                                _isPromotion = 0;
                            CashPromotionDiscountDetail _final = null;

                            if (_hierarchy != null && _hierarchy.Count > 0)
                            {
                                List<CashPromotionDiscountDetail> _lolResult = null;
                                foreach (MasterSalesPriorityHierarchy _one in _hierarchy)
                                {
                                    string _type = _one.Mpi_cd;
                                    string _value = _one.Mpi_val;
                                    _isNormal = true;
                                    List<CashPromotionDiscountDetail> _notAllowMultiple = null;
                                    List<CashPromotionDiscountDetail> _allowMultiple = null;

                                    List<CashPromotionDiscountDetail> _List = _salesDAL.GetGeneralPromotionDiscount(_company, _type, _value, _invoicetype, _time, _day, _date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _itm.Sad_itm_cd, _isSerialized, _isPromotion);
                                    #region Multiple Paymode allow
                                    if (_List != null && _List.Count > 0)
                                    {
                                        _notAllowMultiple = _List.Where(x => x.Spdd_alw_mult == 0).ToList();
                                        _allowMultiple = _List.Where(x => x.Spdd_alw_mult == 1).ToList();
                                    }
                                    if (_notAllowMultiple != null && _notAllowMultiple.Count > 0)
                                        _List = _notAllowMultiple;
                                    //else
                                    //  _List = _allowMultiple;
                                    #endregion

                                    //Check for the loyalty discount
                                    if (!string.IsNullOrEmpty(_loltype) && _List != null && _List.Count > 0)
                                        _lolResult = _List.Where(x => x.Spdd_pay_tp == "LORE" && x.Spdd_bank == _loltype && x.Spdd_cc_tp == _membership).ToList();

                                    if (_List != null && _List.Count > 0)
                                    {
                                        if (_receipt.Sard_pay_tp.ToUpper() == "CRCD")
                                        {
                                            //Check with pay mode with promotion
                                            //result will check with,
                                            // Bank         1   1   0   0
                                            // CC Type      1   0   1   0
                                            //If not found, discount =0
                                            List<CashPromotionDiscountDetail> _checkPaymodeNPromotion = null;

                                            if (_receipt.Sard_cc_is_promo)
                                                _checkPaymodeNPromotion = (from _l in _List where _l.Spdd_pay_tp == _receipt.Sard_pay_tp && _l.Spdd_alw_cc_pro == _receipt.Sard_cc_is_promo select _l).ToList();
                                            else
                                                _checkPaymodeNPromotion = (from _l in _List where _l.Spdd_pay_tp == _receipt.Sard_pay_tp select _l).ToList();

                                            if (_checkPaymodeNPromotion == null || _checkPaymodeNPromotion.Count <= 0)
                                                _checkPaymodeNPromotion = (from _l in _List where string.IsNullOrEmpty(_l.Spdd_pay_tp) select _l).ToList();

                                            //--------------------------------------------------
                                            if (_checkPaymodeNPromotion != null && _checkPaymodeNPromotion.Count > 0)
                                            {
                                                var _checkBank1CCtype1 = (from _l in _checkPaymodeNPromotion where _l.Spdd_bank == _receipt.Sard_credit_card_bank && _l.Spdd_cc_tp == _receipt.Sard_cc_tp select _l).ToList();
                                                if (_checkBank1CCtype1 != null && _checkBank1CCtype1.Count > 0)
                                                    _final = _checkBank1CCtype1[0];
                                                else
                                                {//1
                                                    var _checkBank1CCtype0 = (from _l in _checkPaymodeNPromotion where _l.Spdd_bank == _receipt.Sard_credit_card_bank && string.IsNullOrEmpty(_l.Spdd_cc_tp) select _l).ToList();
                                                    if (_checkBank1CCtype0 != null && _checkBank1CCtype0.Count > 0)
                                                        _final = _checkBank1CCtype0[0];
                                                    else
                                                    {//2
                                                        var _checkBank0CCtype1 = (from _l in _checkPaymodeNPromotion where string.IsNullOrEmpty(_l.Spdd_bank) && _l.Spdd_cc_tp == _receipt.Sard_cc_tp select _l).ToList();
                                                        if (_checkBank0CCtype1 != null && _checkBank0CCtype1.Count > 0)
                                                            _final = _checkBank0CCtype1[0];
                                                        else
                                                        {//3
                                                            var _checkBank0CCtype0 = (from _l in _checkPaymodeNPromotion where string.IsNullOrEmpty(_l.Spdd_bank) && string.IsNullOrEmpty(_l.Spdd_cc_tp) select _l).ToList();
                                                            if (_checkBank0CCtype0 != null && _checkBank0CCtype0.Count > 0)
                                                                _final = _checkBank0CCtype0[0];
                                                            else
                                                                _final = null;
                                                        }//3
                                                    }//2
                                                }//1

                                                if (_lolResult != null) if (_lolResult.Count > 0)
                                                        _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], _final, out _isNormal);
                                            }
                                            else
                                            {
                                                if (_lolResult != null && _lolResult.Count > 0)
                                                    _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], null, out _isNormal);
                                                else
                                                    _final = null;
                                            }
                                        }
                                        else if (_receipt.Sard_pay_tp.ToUpper() == "CHEQUE" || _receipt.Sard_pay_tp.ToUpper() == "DEBIT")
                                        {
                                            //check with pay mode with bank
                                            //Check with pay mode without bank
                                            //Check with without pay mode
                                            var _checkPaymodeNBank = (from _l in _List where _l.Spdd_pay_tp == _receipt.Sard_pay_tp && _l.Spdd_bank == _receipt.Sard_chq_bank_cd select _l).ToList();

                                            if (_checkPaymodeNBank != null && _checkPaymodeNBank.Count > 0)
                                                _final = _checkPaymodeNBank[0];
                                            else
                                            {//4
                                                var _checkPaymodeOnly = (from _l in _List where _l.Spdd_pay_tp == _receipt.Sard_pay_tp && string.IsNullOrEmpty(_l.Spdd_bank) select _l).ToList();
                                                if (_checkPaymodeOnly != null && _checkPaymodeOnly.Count > 0)
                                                    _final = _checkPaymodeOnly[0];
                                                else
                                                {//5
                                                    var _checkWithoutPaymode = (from _l in _List where string.IsNullOrEmpty(_l.Spdd_pay_tp) && string.IsNullOrEmpty(_l.Spdd_bank) select _l).ToList();
                                                    if (_checkWithoutPaymode != null && _checkWithoutPaymode.Count > 0)
                                                        _final = _checkWithoutPaymode[0];
                                                    else
                                                        _final = null;
                                                }//5
                                            }//4
                                            if (_lolResult != null) if (_lolResult.Count > 0)
                                                    _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], _final, out _isNormal);
                                        }
                                        else
                                        {
                                            //check with pay mode
                                            //check without pay mode

                                            var _checkPaymodeOnly = (from _l in _List where _l.Spdd_pay_tp == _receipt.Sard_pay_tp select _l).ToList();
                                            if (_checkPaymodeOnly != null && _checkPaymodeOnly.Count > 0)
                                                _final = _checkPaymodeOnly[0];
                                            else
                                            {//6
                                                var _checkWithoutPaymode = (from _l in _List where string.IsNullOrEmpty(_l.Spdd_pay_tp) select _l).ToList();
                                                if (_checkWithoutPaymode != null && _checkWithoutPaymode.Count > 0)
                                                    _final = _checkWithoutPaymode[0];
                                                else
                                                {//7
                                                    _final = null;
                                                }//7
                                            }//6

                                            if (_lolResult != null) if (_lolResult.Count > 0)
                                                    _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], _final, out _isNormal);
                                        }
                                    }
                                    else _final = null;

                                    if (_final != null) _returnInvList.Add(CalculateDiscount(_company, _final, _itm, _isNormal, _invoiceheader.Sah_tax_inv, _invoiceheader.Sah_dt));
                                    if (_final != null) break;
                                }//End of Hierarchy Loop
                                if (_final == null || string.IsNullOrEmpty(_final.Spdl_com)) _returnInvList.Add(_itm);
                            }//End of Hierarchy condition
                            else _returnInvList.Add(_itm);//End ELSE of Hierarchy condition
                        }//Check the tag for pick status
                    }//Invoice Item Loop
                    #endregion
                }

                else  //If multiple pay modes
                {
                    #region Multi-Paymode for Payment

                    //foreach (InvoiceItem _itm in _InInvDet)
                    //{
                    //    CashPromotionDiscountDetail _final = null;
                    //    foreach (RecieptItem _recitm in _InReceiptDet)
                    //    {
                    //        Int16 _isSerialized = Convert.ToInt16(_salesDAL.GetPriceLevel(_company, _itm.Sad_pbook, _itm.Sad_pb_lvl).Sapl_is_serialized);
                    //        Int16 _isPromotion = Convert.ToInt16(string.IsNullOrEmpty(_itm.Sad_promo_cd) || _itm.Sad_promo_cd == "0" ? 0 : 1);

                    //        if (_hierarchy != null && _hierarchy.Count > 0)
                    //        {
                    //            List<CashPromotionDiscountDetail> _lolResult = null;
                    //            foreach (MasterSalesPriorityHierarchy _one in _hierarchy)
                    //            {
                    //                string _type = _one.Mpi_cd;
                    //                string _value = _one.Mpi_val;
                    //                _isNormal = true;
                    //                List<CashPromotionDiscountDetail> _List = _salesDAL.GetGeneralPromotionDiscount(_company, _type, _value, _invoicetype, _time, _day, _date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _itm.Sad_itm_cd, _isSerialized, _isPromotion);
                    //                #region Multiple Paymode allow
                    //                List<CashPromotionDiscountDetail> _allowMultiple = null;
                    //                if (_List != null && _List.Count > 0)
                    //                {
                    //                    _allowMultiple = _List.Where(x => x.Spdd_alw_mult == 1).ToList();
                    //                }
                    //                _List = _allowMultiple;
                    //                #endregion

                    //                //Check for the loyalty discount
                    //                if (!string.IsNullOrEmpty(_loltype) && _List != null && _List.Count > 0)
                    //                    _lolResult = _List.Where(x => x.Spdd_pay_tp == "LORE" && x.Spdd_bank == _loltype && x.Spdd_cc_tp == _membership).ToList();

                    //                if (_List != null && _List.Count > 0)
                    //                {
                    //                    if (_recitm.Sard_pay_tp.ToUpper() == "CRCD")
                    //                    {
                    //                        //Check with pay mode with promotion
                    //                        //result will check with,
                    //                        // Bank         1   1   0   0
                    //                        // CC Type      1   0   1   0
                    //                        //If not found, discount =0
                    //                        List<CashPromotionDiscountDetail> _checkPaymodeNPromotion = null;

                    //                        if (_recitm.Sard_cc_is_promo)
                    //                            _checkPaymodeNPromotion = (from _l in _List where _l.Spdd_pay_tp == _recitm.Sard_pay_tp && _l.Spdd_alw_cc_pro == _recitm.Sard_cc_is_promo select _l).ToList();
                    //                        else
                    //                            _checkPaymodeNPromotion = (from _l in _List where _l.Spdd_pay_tp == _recitm.Sard_pay_tp select _l).ToList();

                    //                        if (_checkPaymodeNPromotion == null || _checkPaymodeNPromotion.Count <= 0)
                    //                            _checkPaymodeNPromotion = (from _l in _List where string.IsNullOrEmpty(_l.Spdd_pay_tp) select _l).ToList();

                    //                        //--------------------------------------------------
                    //                        if (_checkPaymodeNPromotion != null && _checkPaymodeNPromotion.Count > 0)
                    //                        {
                    //                            var _checkBank1CCtype1 = (from _l in _checkPaymodeNPromotion where _l.Spdd_bank == _recitm.Sard_credit_card_bank && _l.Spdd_cc_tp == _recitm.Sard_cc_tp select _l).ToList();
                    //                            if (_checkBank1CCtype1 != null && _checkBank1CCtype1.Count > 0)
                    //                                _final = _checkBank1CCtype1[0];
                    //                            else
                    //                            {//1
                    //                                var _checkBank1CCtype0 = (from _l in _checkPaymodeNPromotion where _l.Spdd_bank == _recitm.Sard_credit_card_bank && string.IsNullOrEmpty(_l.Spdd_cc_tp) select _l).ToList();
                    //                                if (_checkBank1CCtype0 != null && _checkBank1CCtype0.Count > 0)
                    //                                    _final = _checkBank1CCtype0[0];
                    //                                else
                    //                                {//2
                    //                                    var _checkBank0CCtype1 = (from _l in _checkPaymodeNPromotion where string.IsNullOrEmpty(_l.Spdd_bank) && _l.Spdd_cc_tp == _recitm.Sard_cc_tp select _l).ToList();
                    //                                    if (_checkBank0CCtype1 != null && _checkBank0CCtype1.Count > 0)
                    //                                        _final = _checkBank0CCtype1[0];
                    //                                    else
                    //                                    {//3
                    //                                        var _checkBank0CCtype0 = (from _l in _checkPaymodeNPromotion where string.IsNullOrEmpty(_l.Spdd_bank) && string.IsNullOrEmpty(_l.Spdd_cc_tp) select _l).ToList();
                    //                                        if (_checkBank0CCtype0 != null && _checkBank0CCtype0.Count > 0)
                    //                                            _final = _checkBank0CCtype0[0];
                    //                                        else
                    //                                            _final = null;
                    //                                    }//3
                    //                                }//2
                    //                            }//1

                    //                            if (_lolResult != null) if (_lolResult.Count > 0)
                    //                                    _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], _final, out _isNormal);
                    //                        }
                    //                        else
                    //                        {
                    //                            if (_lolResult != null && _lolResult.Count > 0)
                    //                                _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], null, out _isNormal);
                    //                            else
                    //                                _final = null;
                    //                        }
                    //                    }
                    //                    else if (_recitm.Sard_pay_tp.ToUpper() == "CHEQUE" || _recitm.Sard_pay_tp.ToUpper() == "DEBIT")
                    //                    {
                    //                        //check with pay mode with bank
                    //                        //Check with pay mode without bank
                    //                        //Check with without pay mode
                    //                        var _checkPaymodeNBank = (from _l in _List where _l.Spdd_pay_tp == _recitm.Sard_pay_tp && _l.Spdd_bank == _recitm.Sard_chq_bank_cd select _l).ToList();

                    //                        if (_checkPaymodeNBank != null && _checkPaymodeNBank.Count > 0)
                    //                            _final = _checkPaymodeNBank[0];
                    //                        else
                    //                        {//4
                    //                            var _checkPaymodeOnly = (from _l in _List where _l.Spdd_pay_tp == _recitm.Sard_pay_tp && string.IsNullOrEmpty(_l.Spdd_bank) select _l).ToList();
                    //                            if (_checkPaymodeOnly != null && _checkPaymodeOnly.Count > 0)
                    //                                _final = _checkPaymodeOnly[0];
                    //                            else
                    //                            {//5
                    //                                var _checkWithoutPaymode = (from _l in _List where string.IsNullOrEmpty(_l.Spdd_pay_tp) && string.IsNullOrEmpty(_l.Spdd_bank) select _l).ToList();
                    //                                if (_checkWithoutPaymode != null && _checkWithoutPaymode.Count > 0)
                    //                                    _final = _checkWithoutPaymode[0];
                    //                                else
                    //                                    _final = null;
                    //                            }//5
                    //                        }//4
                    //                        if (_lolResult != null) if (_lolResult.Count > 0)
                    //                                _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], _final, out _isNormal);
                    //                    }
                    //                    else
                    //                    {
                    //                        //check with pay mode
                    //                        //check without pay mode

                    //                        var _checkPaymodeOnly = (from _l in _List where _l.Spdd_pay_tp == _recitm.Sard_pay_tp select _l).ToList();
                    //                        if (_checkPaymodeOnly != null && _checkPaymodeOnly.Count > 0)
                    //                            _final = _checkPaymodeOnly[0];
                    //                        else
                    //                        {//6
                    //                            var _checkWithoutPaymode = (from _l in _List where string.IsNullOrEmpty(_l.Spdd_pay_tp) select _l).ToList();
                    //                            if (_checkWithoutPaymode != null && _checkWithoutPaymode.Count > 0)
                    //                                _final = _checkWithoutPaymode[0];
                    //                            else
                    //                            {//7
                    //                                _final = null;
                    //                            }//7
                    //                        }//6

                    //                        if (_lolResult != null) if (_lolResult.Count > 0)
                    //                                _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], _final, out _isNormal);
                    //                    }
                    //                }
                    //                else _final = null;

                    //                if (_final != null) _returnInvList.Add(CalculateDiscount(_company, _final, _itm, _isNormal));
                    //                if (_final != null) break;
                    //            }//End of Hierarchy Loop
                    //        }//End of Hierarchy condition
                    //        else _returnInvList.Add(_itm);//End ELSE of Hierarchy condition
                    //    if (_final != null) break;
                    //    }//Pay mode Loop
                    //    if (_final == null || string.IsNullOrEmpty(_final.Spdl_com)) _returnInvList.Add(_itm);
                    //}//Item Loop


                    #region Commented - Old Code - by Prabhath on 9/7/2013
                    //Not check for pay modes

                    foreach (InvoiceItem _itm in _InInvDet)
                    {
                        if (_itm.Sad_res_line_no != 1)
                        {
                            Int16 _isSerialized = Convert.ToInt16(_salesDAL.GetPriceLevel(_company, _itm.Sad_pbook, _itm.Sad_pb_lvl).Sapl_is_serialized);
                            Int16 _isPromotion = Convert.ToInt16(string.IsNullOrEmpty(_itm.Sad_promo_cd) || _itm.Sad_promo_cd == "0" ? 0 : 1);
                            if (_itm.Sad_conf_no == "0" || _itm.Sad_conf_no == "4")     //kapila 31/12/2016
                                _isPromotion = 0;
                            CashPromotionDiscountDetail _final = null;

                            if (_hierarchy != null && _hierarchy.Count > 0)
                            {
                                foreach (MasterSalesPriorityHierarchy _one in _hierarchy)
                                {
                                    string _type = _one.Mpi_cd;
                                    string _value = _one.Mpi_val;
                                    _isNormal = false;
                                    List<CashPromotionDiscountDetail> _lolResult = null;
                                    //check without pay mode
                                    List<CashPromotionDiscountDetail> _List = _salesDAL.GetGeneralPromotionDiscount(_company, _type, _value, _invoicetype, _time, _day, _date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _itm.Sad_itm_cd, _isSerialized, _isPromotion);
                                    if (!string.IsNullOrEmpty(_loltype) && _List != null && _List.Count > 0)
                                        _lolResult = _List.Where(x => x.Spdd_pay_tp == "LORE" && x.Spdd_bank == _loltype && x.Spdd_cc_tp == _membership).ToList();

                                    if (_List != null && _List.Count > 0)
                                    {
                                        var _checkWithoutPaymode = (from _l in _List where string.IsNullOrEmpty(_l.Spdd_pay_tp) select _l).ToList();
                                        if (_checkWithoutPaymode != null && _checkWithoutPaymode.Count > 0)
                                            _final = _checkWithoutPaymode[0];
                                        else
                                            _final = null;

                                        if (_lolResult != null) if (_lolResult.Count > 0)
                                                _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], _final, out _isNormal);
                                    }
                                    else
                                        if (_lolResult != null) if (_lolResult.Count > 0)
                                                _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], null, out _isNormal);


                                    if (_final != null) _returnInvList.Add(CalculateDiscount(_company, _final, _itm, _isNormal, _invoiceheader.Sah_tax_inv, _invoiceheader.Sah_dt));
                                    if (_final != null) break;
                                }//End of Hierarchy Loop
                                if (_final == null || string.IsNullOrEmpty(_final.Spdl_com)) _returnInvList.Add(_itm);
                            }//End of Hierarchy condition
                            else _returnInvList.Add(_itm);
                        }//Check the tag for pick status
                    }//Invoice Item Loop

                    #endregion

                    #endregion
                }

            }
            else if (_InReceiptDet == null) if (_InInvDet.Count >= 0 && _InReceiptDet.Count <= 0)
                {
                    _currentPaid = (from _l in _InInvDet
                                    select _l.Sad_qty * _l.Sad_unit_rt + _l.Sad_itm_tax_amt - _l.Sad_disc_amt).Sum();
                    #region Null Paymode

                    foreach (InvoiceItem _itm in _InInvDet)
                    {
                        if (_itm.Sad_res_line_no != 1)
                        {
                            Int16 _isSerialized = Convert.ToInt16(_salesDAL.GetPriceLevel(_company, _itm.Sad_pbook, _itm.Sad_pb_lvl).Sapl_is_serialized);
                            Int16 _isPromotion = Convert.ToInt16(string.IsNullOrEmpty(_itm.Sad_promo_cd) || _itm.Sad_promo_cd == "0" ? 0 : 1);
                            if (_itm.Sad_conf_no == "0" || _itm.Sad_conf_no == "4")     //kapila 31/12/2016
                                _isPromotion = 0;
                            CashPromotionDiscountDetail _final = null;

                            if (_hierarchy != null && _hierarchy.Count > 0)
                            {
                                foreach (MasterSalesPriorityHierarchy _one in _hierarchy)
                                {
                                    string _type = _one.Mpi_cd;
                                    string _value = _one.Mpi_val;
                                    _isNormal = false;
                                    List<CashPromotionDiscountDetail> _lolResult = null;
                                    //check without pay mode
                                    List<CashPromotionDiscountDetail> _List = _salesDAL.GetGeneralPromotionDiscount(_company, _type, _value, _invoicetype, _time, _day, _date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _itm.Sad_itm_cd, _isSerialized, _isPromotion);
                                    if (!string.IsNullOrEmpty(_loltype) && _List != null && _List.Count > 0)
                                        _lolResult = _List.Where(x => x.Spdd_pay_tp == "LORE" && x.Spdd_bank == _loltype && x.Spdd_cc_tp == _membership).ToList();

                                    if (_List != null && _List.Count > 0)
                                    {
                                        var _checkWithoutPaymode = (from _l in _List where string.IsNullOrEmpty(_l.Spdd_pay_tp) select _l).ToList();
                                        if (_checkWithoutPaymode != null && _checkWithoutPaymode.Count > 0)
                                            _final = _checkWithoutPaymode[0];
                                        else
                                            _final = null;

                                        if (_lolResult != null) if (_lolResult.Count > 0)
                                                _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], _final, out _isNormal);
                                    }
                                    else
                                        if (_lolResult != null) if (_lolResult.Count > 0)
                                                _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], null, out _isNormal);

                                    if (_final != null) _returnInvList.Add(CalculateDiscount(_company, _final, _itm, _isNormal, _invoiceheader.Sah_tax_inv, _invoiceheader.Sah_dt));
                                    if (_final != null) break;
                                }//End of Hierarchy Loop
                                if (_final == null || string.IsNullOrEmpty(_final.Spdl_com)) _returnInvList.Add(_itm);
                            }//End of Hierarchy condition
                            else _returnInvList.Add(_itm);
                        }//Check the tag for pick status
                    }//Invoice Item Loop
                    #endregion
                }//Main Condition (invoice item/Receipt Item list Null Check)

            _isDifferent = false;
            _outInvItem = _returnInvList;
            decimal _NewPaid = 0;
            if (_outInvItem != null)
                if (_outInvItem.Count > 0)
                    _NewPaid = (_outInvItem.Select(X => X.Sad_tot_amt)).Sum();
            // _NewPaid = (from _l in _outInvItem select _l.Sad_qty * _l.Sad_unit_rt + _l.Sad_itm_tax_amt - _l.Sad_disc_amt).Sum();

            if (Math.Round(_currentPaid, 2) != Math.Round(_NewPaid, 2))
                _isDifferent = true;
            else
                _isDifferent = false;

            _tobepay = _NewPaid;

        }


        public void GetGeneralPromotionDiscountAdvanCredit(string _company, string _profitcenter, string _invoicetype, Int32 _time, string _day, DateTime _date, List<InvoiceItem> _InInvDet, List<RecieptItem> _InReceiptDet, out List<InvoiceItem> _outInvItem, out bool _isDifferent, out decimal _tobepay, InvoiceHeader _invoiceheader)
        {
            List<InvoiceItem> _returnInvList = new List<InvoiceItem>();
            string _loltype = string.Empty;
            string _membership = string.Empty;
            DataTable _loldet = null;
            _salesDAL = new SalesDAL();
            bool _isNormal = true;

            List<RecieptItem> _originalRecieptList = _InReceiptDet;
            //if has CREDIT NOTE
            int CreditNoteCount = (from _res in _originalRecieptList
                                   where _res.Sard_pay_tp == "CRNOTE"
                                   select _res).Count();
            List<InvoiceItem> _creditItem = new List<InvoiceItem>();

            #region Get Loyalty Type
            if (!string.IsNullOrEmpty(_invoiceheader.Sah_anal_6))
            {
                _loldet = _salesDAL.GetLoyaltyCardDetail(_invoiceheader.Sah_cus_cd, _invoiceheader.Sah_anal_6);
                if (_loldet != null) if (_loldet.Rows.Count > 0)
                    {
                        _loltype = _loldet.Rows[0].Field<string>("salcm_loty_tp");
                        _membership = _loldet.Rows[0].Field<string>("salcm_cus_spec");
                    }
            }
            #endregion

            List<MasterSalesPriorityHierarchy> _hierarchy = _salesDAL.GetSalesPriorityHierarchy(_company, _profitcenter, "PC_PRIT_HIERARCHY", "PC");
            if (_hierarchy != null && _hierarchy.Count > 0) _hierarchy = _hierarchy.Where(x => x.Mpi_cd == "PC" || x.Mpi_cd == "CHNL").ToList();
            decimal _currentPaid = 0;

            if ((_InInvDet == null && _InReceiptDet == null) || (_InInvDet.Count <= 0 && _InReceiptDet.Count <= 0))
            {
                _outInvItem = _returnInvList;
                _isDifferent = false;
                _tobepay = 0;
                return;
            }

            else if (_InInvDet.Count >= 0 && _InReceiptDet.Count >= 0)
            {
                //remove advanced receipt and cr note pay mode

                for (int i = 0; i < _InReceiptDet.Count; i++)
                {
                    if (_InReceiptDet[i].Sard_pay_tp == "ADVAN")
                    {
                        List<RecieptItem> _recieptItems = _salesDAL.GetAllReceiptItems(_InReceiptDet[i].Sard_ref_no);
                        _InReceiptDet.RemoveAt(i);
                        _InReceiptDet.AddRange(_recieptItems);
                    }
                    if (_InReceiptDet[i].Sard_pay_tp == "CRNOTE")
                    {
                        List<InvoiceItem> li = _salesDAL.GetInvoiceItems(_InReceiptDet[i].Sard_ref_no);
                        if (li != null)
                            _creditItem.AddRange(li);

                        InvoiceHeader _hdr = _salesDAL.GetInvoiceHeaderDetails(_InReceiptDet[i].Sard_ref_no);
                        List<RecieptItem> _recieptItems = _salesDAL.GetReceiptItemList(_hdr.Sah_ref_doc);
                        _InReceiptDet.RemoveAt(i);
                        _InReceiptDet.AddRange(_recieptItems);


                    }

                }

                _currentPaid = _InInvDet.Sum(x => x.Sad_tot_amt);
                //(from _l in _InInvDet
                //select _l.Sad_qty * _l.Sad_unit_rt + _l.Sad_itm_tax_amt - _l.Sad_disc_amt).Sum();

                //If single pay mode
                if (_InReceiptDet.Count == 1)
                {
                    #region Only One Paymode for Payment
                    //Check for pay modes
                    RecieptItem _receipt = _InReceiptDet[0];

                    foreach (InvoiceItem _itm in _InInvDet)
                    {
                        if (_itm.Sad_res_line_no != 1)
                        {
                            Int16 _isSerialized = Convert.ToInt16(_salesDAL.GetPriceLevel(_company, _itm.Sad_pbook, _itm.Sad_pb_lvl).Sapl_is_serialized);
                            Int16 _isPromotion = Convert.ToInt16(string.IsNullOrEmpty(_itm.Sad_promo_cd) || _itm.Sad_promo_cd == "0" ? 0 : 1);
                            if (_itm.Sad_conf_no == "0" || _itm.Sad_conf_no == "4")     //kapila 31/12/2016
                                _isPromotion = 0;
                            CashPromotionDiscountDetail _final = null;

                            if (_hierarchy != null && _hierarchy.Count > 0)
                            {
                                List<CashPromotionDiscountDetail> _lolResult = null;
                                foreach (MasterSalesPriorityHierarchy _one in _hierarchy)
                                {
                                    string _type = _one.Mpi_cd;
                                    string _value = _one.Mpi_val;
                                    _isNormal = true;
                                    List<CashPromotionDiscountDetail> _notAllowMultiple = null;
                                    List<CashPromotionDiscountDetail> _allowMultiple = null;

                                    List<CashPromotionDiscountDetail> _List = _salesDAL.GetGeneralPromotionDiscount(_company, _type, _value, _invoicetype, _time, _day, _date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _itm.Sad_itm_cd, _isSerialized, _isPromotion);
                                    #region Multiple Paymode allow
                                    if (_List != null && _List.Count > 0)
                                    {
                                        _notAllowMultiple = _List.Where(x => x.Spdd_alw_mult == 0).ToList();
                                        _allowMultiple = _List.Where(x => x.Spdd_alw_mult == 1).ToList();
                                    }
                                    if (_notAllowMultiple != null && _notAllowMultiple.Count > 0)
                                        _List = _notAllowMultiple;
                                    //else
                                    //  _List = _allowMultiple;
                                    #endregion

                                    //Check for the loyalty discount
                                    if (!string.IsNullOrEmpty(_loltype) && _List != null && _List.Count > 0)
                                        _lolResult = _List.Where(x => x.Spdd_pay_tp == "LORE" && x.Spdd_bank == _loltype && x.Spdd_cc_tp == _membership).ToList();

                                    if (_List != null && _List.Count > 0)
                                    {
                                        if (_receipt.Sard_pay_tp.ToUpper() == "CRCD")
                                        {
                                            //Check with pay mode with promotion
                                            //result will check with,
                                            // Bank         1   1   0   0
                                            // CC Type      1   0   1   0
                                            //If not found, discount =0
                                            List<CashPromotionDiscountDetail> _checkPaymodeNPromotion = null;

                                            if (_receipt.Sard_cc_is_promo)
                                                _checkPaymodeNPromotion = (from _l in _List where _l.Spdd_pay_tp == _receipt.Sard_pay_tp && _l.Spdd_alw_cc_pro == _receipt.Sard_cc_is_promo && _l.Spdd_cc_pd == _receipt.Sard_cc_period select _l).ToList();
                                            else
                                                _checkPaymodeNPromotion = (from _l in _List where _l.Spdd_pay_tp == _receipt.Sard_pay_tp && _l.Spdd_alw_cc_pro select _l).ToList();

                                            if (_checkPaymodeNPromotion == null || _checkPaymodeNPromotion.Count <= 0)
                                                _checkPaymodeNPromotion = (from _l in _List where string.IsNullOrEmpty(_l.Spdd_pay_tp) select _l).ToList();

                                            //--------------------------------------------------
                                            if (_checkPaymodeNPromotion != null && _checkPaymodeNPromotion.Count > 0)
                                            {
                                                var _checkBank1CCtype1 = (from _l in _checkPaymodeNPromotion where _l.Spdd_bank == _receipt.Sard_credit_card_bank && _l.Spdd_cc_tp == _receipt.Sard_cc_tp select _l).ToList();
                                                if (_checkBank1CCtype1 != null && _checkBank1CCtype1.Count > 0)
                                                    _final = _checkBank1CCtype1[0];
                                                else
                                                {//1
                                                    var _checkBank1CCtype0 = (from _l in _checkPaymodeNPromotion where _l.Spdd_bank == _receipt.Sard_credit_card_bank && string.IsNullOrEmpty(_l.Spdd_cc_tp) select _l).ToList();
                                                    if (_checkBank1CCtype0 != null && _checkBank1CCtype0.Count > 0)
                                                        _final = _checkBank1CCtype0[0];
                                                    else
                                                    {//2
                                                        var _checkBank0CCtype1 = (from _l in _checkPaymodeNPromotion where string.IsNullOrEmpty(_l.Spdd_bank) && _l.Spdd_cc_tp == _receipt.Sard_cc_tp select _l).ToList();
                                                        if (_checkBank0CCtype1 != null && _checkBank0CCtype1.Count > 0)
                                                            _final = _checkBank0CCtype1[0];
                                                        else
                                                        {//3
                                                            var _checkBank0CCtype0 = (from _l in _checkPaymodeNPromotion where string.IsNullOrEmpty(_l.Spdd_bank) && string.IsNullOrEmpty(_l.Spdd_cc_tp) select _l).ToList();
                                                            if (_checkBank0CCtype0 != null && _checkBank0CCtype0.Count > 0)
                                                                _final = _checkBank0CCtype0[0];
                                                            else
                                                                _final = null;
                                                        }//3
                                                    }//2
                                                }//1

                                                if (_lolResult != null) if (_lolResult.Count > 0)
                                                        _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], _final, out _isNormal);
                                            }
                                            else
                                            {
                                                if (_lolResult != null && _lolResult.Count > 0)
                                                    _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], null, out _isNormal);
                                                else
                                                    _final = null;
                                            }
                                        }
                                        else if (_receipt.Sard_pay_tp.ToUpper() == "CHEQUE" || _receipt.Sard_pay_tp.ToUpper() == "DEBIT")
                                        {
                                            //check with pay mode with bank
                                            //Check with pay mode without bank
                                            //Check with without pay mode
                                            var _checkPaymodeNBank = (from _l in _List where _l.Spdd_pay_tp == _receipt.Sard_pay_tp && _l.Spdd_bank == _receipt.Sard_chq_bank_cd select _l).ToList();

                                            if (_checkPaymodeNBank != null && _checkPaymodeNBank.Count > 0)
                                                _final = _checkPaymodeNBank[0];
                                            else
                                            {//4
                                                var _checkPaymodeOnly = (from _l in _List where _l.Spdd_pay_tp == _receipt.Sard_pay_tp && string.IsNullOrEmpty(_l.Spdd_bank) select _l).ToList();
                                                if (_checkPaymodeOnly != null && _checkPaymodeOnly.Count > 0)
                                                    _final = _checkPaymodeOnly[0];
                                                else
                                                {//5
                                                    var _checkWithoutPaymode = (from _l in _List where string.IsNullOrEmpty(_l.Spdd_pay_tp) && string.IsNullOrEmpty(_l.Spdd_bank) select _l).ToList();
                                                    if (_checkWithoutPaymode != null && _checkWithoutPaymode.Count > 0)
                                                        _final = _checkWithoutPaymode[0];
                                                    else
                                                        _final = null;
                                                }//5
                                            }//4
                                            if (_lolResult != null) if (_lolResult.Count > 0)
                                                    _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], _final, out _isNormal);
                                        }
                                        else
                                        {
                                            //check with pay mode
                                            //check without pay mode

                                            var _checkPaymodeOnly = (from _l in _List where _l.Spdd_pay_tp == _receipt.Sard_pay_tp select _l).ToList();
                                            if (_checkPaymodeOnly != null && _checkPaymodeOnly.Count > 0)
                                                _final = _checkPaymodeOnly[0];
                                            else
                                            {//6
                                                var _checkWithoutPaymode = (from _l in _List where string.IsNullOrEmpty(_l.Spdd_pay_tp) select _l).ToList();
                                                if (_checkWithoutPaymode != null && _checkWithoutPaymode.Count > 0)
                                                    _final = _checkWithoutPaymode[0];
                                                else
                                                {//7
                                                    _final = null;
                                                }//7
                                            }//6

                                            if (_lolResult != null) if (_lolResult.Count > 0)
                                                    _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], _final, out _isNormal);
                                        }
                                    }
                                    else _final = null;

                                    if (_final != null) _returnInvList.Add(CalculateDiscount(_company, _final, _itm, _isNormal, _invoiceheader.Sah_tax_inv, _invoiceheader.Sah_dt));
                                    if (_final != null) break;
                                }//End of Hierarchy Loop
                                if (_final == null || string.IsNullOrEmpty(_final.Spdl_com)) _returnInvList.Add(_itm);
                            }//End of Hierarchy condition
                            else _returnInvList.Add(_itm);//End ELSE of Hierarchy condition
                        }//Check the tag for pick status
                    }//Invoice Item Loop
                    #endregion
                }

                else  //If multiple pay modes
                {
                    #region null paymode

                    #region Commented - Old Code - by Prabhath on 9/7/2013
                    //Not check for pay modes
                    bool discounted = false;
                    foreach (InvoiceItem _itm in _InInvDet)
                    {
                        if (_itm.Sad_res_line_no != 1)
                        {
                            Int16 _isSerialized = Convert.ToInt16(_salesDAL.GetPriceLevel(_company, _itm.Sad_pbook, _itm.Sad_pb_lvl).Sapl_is_serialized);
                            Int16 _isPromotion = Convert.ToInt16(string.IsNullOrEmpty(_itm.Sad_promo_cd) || _itm.Sad_promo_cd == "0" ? 0 : 1);
                            if (_itm.Sad_conf_no == "0" || _itm.Sad_conf_no == "4")     //kapila 31/12/2016
                                _isPromotion = 0;
                            CashPromotionDiscountDetail _final = null;

                            if (_hierarchy != null && _hierarchy.Count > 0)
                            {
                                foreach (MasterSalesPriorityHierarchy _one in _hierarchy)
                                {
                                    string _type = _one.Mpi_cd;
                                    string _value = _one.Mpi_val;
                                    _isNormal = false;
                                    List<CashPromotionDiscountDetail> _lolResult = null;
                                    //check without pay mode
                                    List<CashPromotionDiscountDetail> _List = _salesDAL.GetGeneralPromotionDiscount(_company, _type, _value, _invoicetype, _time, _day, _date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _itm.Sad_itm_cd, _isSerialized, _isPromotion);
                                    if (!string.IsNullOrEmpty(_loltype) && _List != null && _List.Count > 0)
                                        _lolResult = _List.Where(x => x.Spdd_pay_tp == "LORE" && x.Spdd_bank == _loltype && x.Spdd_cc_tp == _membership).ToList();

                                    if (_List != null && _List.Count > 0)
                                    {
                                        var _checkWithoutPaymode = (from _l in _List where string.IsNullOrEmpty(_l.Spdd_pay_tp) select _l).ToList();
                                        if (_checkWithoutPaymode != null && _checkWithoutPaymode.Count > 0)
                                            _final = _checkWithoutPaymode[0];
                                        else
                                            _final = null;

                                        if (_lolResult != null) if (_lolResult.Count > 0)
                                                _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], _final, out _isNormal);
                                    }
                                    else
                                        if (_lolResult != null) if (_lolResult.Count > 0)
                                                _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], null, out _isNormal);


                                    if (_final != null) { _returnInvList.Add(CalculateDiscount(_company, _final, _itm, _isNormal, _invoiceheader.Sah_tax_inv, _invoiceheader.Sah_dt)); discounted = true; }
                                    if (_final != null) break;
                                }//End of Hierarchy Loop
                                if (_final == null || string.IsNullOrEmpty(_final.Spdl_com)) _returnInvList.Add(_itm);
                            }//End of Hierarchy condition
                            else _returnInvList.Add(_itm);
                        }//Check the tag for pick status
                    }//Invoice Item Loop

                    #endregion

                    #endregion

                    #region multi pay mode

                    if (!discounted)
                    {
                        _returnInvList = new List<InvoiceItem>();
                        foreach (InvoiceItem _itm in _InInvDet)
                        {
                            if (_itm.Sad_res_line_no != 1)
                            {
                                Int16 _isSerialized = Convert.ToInt16(_salesDAL.GetPriceLevel(_company, _itm.Sad_pbook, _itm.Sad_pb_lvl).Sapl_is_serialized);
                                Int16 _isPromotion = Convert.ToInt16(string.IsNullOrEmpty(_itm.Sad_promo_cd) || _itm.Sad_promo_cd == "0" ? 0 : 1);
                                if (_itm.Sad_conf_no == "0" || _itm.Sad_conf_no == "4")     //kapila 31/12/2016
                                    _isPromotion = 0;
                                CashPromotionDiscountDetail _final = null;

                                if (_hierarchy != null && _hierarchy.Count > 0)
                                {
                                    List<CashPromotionDiscountDetail> _lolResult = null;
                                    foreach (MasterSalesPriorityHierarchy _one in _hierarchy)
                                    {
                                        string _type = _one.Mpi_cd;
                                        string _value = _one.Mpi_val;
                                        _isNormal = true;
                                        List<CashPromotionDiscountDetail> _notAllowMultiple = null;
                                        List<CashPromotionDiscountDetail> _allowMultiple = null;

                                        List<CashPromotionDiscountDetail> _List = _salesDAL.GetGeneralPromotionDiscount(_company, _type, _value, _invoicetype, _time, _day, _date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _itm.Sad_itm_cd, _isSerialized, _isPromotion);
                                        #region Multiple Paymode allow
                                        if (_List != null && _List.Count > 0)
                                        {
                                            _notAllowMultiple = _List.Where(x => x.Spdd_alw_mult == 0).ToList();
                                            _allowMultiple = _List.Where(x => x.Spdd_alw_mult == 1).ToList();
                                        }
                                        // if (_notAllowMultiple != null && _notAllowMultiple.Count > 0)
                                        //  _List = _notAllowMultiple;
                                        // else
                                        _List = _allowMultiple;
                                        #endregion

                                        if (CreditNoteCount > 0 && (_List != null && _List.Count > 0))
                                        {
                                            //update list
                                            List<InvoiceItem> _promotionList = (from _res in _creditItem
                                                                                where _res.Sad_dis_type == "P"
                                                                                select _res).ToList<InvoiceItem>();

                                            List<CashPromotionDiscountDetail> _crDisList = new List<CashPromotionDiscountDetail>();


                                            //get all promotion discount definitions to credit note
                                            foreach (InvoiceItem inv in _promotionList)
                                            {
                                                _crDisList.AddRange(_salesDAL.GetPromotinalDiscountDetail01(inv.Sad_dis_seq, inv.Sad_itm_cd, _invoiceheader.Sah_pc));
                                            }
                                            if (_promotionList == null || _promotionList.Count <= 0)
                                            {

                                            }
                                            List<CashPromotionDiscountDetail> _temRemoveList = new List<CashPromotionDiscountDetail>();
                                            for (int i = 0; i < _List.Count; i++)
                                            {

                                                List<CashPromotionDiscountDetail> _temList1 = (from tem in _crDisList
                                                                                               where tem.Spdd_seq == _List[i].Spdd_seq
                                                                                               select tem).ToList<CashPromotionDiscountDetail>();
                                                if (_temList1 != null && _temList1.Count > 0)
                                                {

                                                }
                                                else
                                                {
                                                    _temRemoveList.Add(_List[i]);
                                                }

                                            }

                                            //remove from _list
                                            if (_temRemoveList != null && _temRemoveList.Count > 0)
                                            {
                                                foreach (CashPromotionDiscountDetail _det in _temRemoveList)
                                                    _List.Remove(_det);
                                            }
                                        }


                                        //Check for the loyalty discount
                                        if (!string.IsNullOrEmpty(_loltype) && _List != null && _List.Count > 0)
                                            _lolResult = _List.Where(x => x.Spdd_pay_tp == "LORE" && x.Spdd_bank == _loltype && x.Spdd_cc_tp == _membership).ToList();

                                        if (_List != null && _List.Count > 0)
                                        {

                                            //multi pay mode process
                                            /*
                                             * Get distinct circulars
                                             * Check all pay modes in that circular
                                             */



                                            //01.GET DISTINCT CIRCULARS
                                            _List = _List.OrderByDescending(x => x.Spdd_seq).ToList<CashPromotionDiscountDetail>();
                                            List<int> _distinct = _List.GroupBy(x => x.Spdd_seq).Select(x => x.First().Spdd_seq).ToList<int>();


                                            foreach (int _seq in _distinct)
                                            {

                                                List<CashPromotionDiscountDetail> _detail = (from _res in _List
                                                                                             where _res.Spdd_seq == _seq
                                                                                             select _res).ToList<CashPromotionDiscountDetail>();
                                                bool allPaymodeMatch = true;
                                                foreach (RecieptItem _rec in _InReceiptDet)
                                                {

                                                    if (_rec.Sard_pay_tp == "CRCD")
                                                    {
                                                        List<CashPromotionDiscountDetail> _checkPaymodeNPromotion = null;

                                                        if (_rec.Sard_cc_is_promo)
                                                            _checkPaymodeNPromotion = (from _l in _detail where _l.Spdd_pay_tp == _rec.Sard_pay_tp && _l.Spdd_alw_cc_pro == _rec.Sard_cc_is_promo && _l.Spdd_cc_pd == _rec.Sard_cc_period select _l).ToList();
                                                        else
                                                            _checkPaymodeNPromotion = (from _l in _detail where _l.Spdd_pay_tp == _rec.Sard_pay_tp && _l.Spdd_alw_cc_pro == false select _l).ToList();

                                                        if (_checkPaymodeNPromotion == null || _checkPaymodeNPromotion.Count <= 0)
                                                            _checkPaymodeNPromotion = (from _l in _detail where string.IsNullOrEmpty(_l.Spdd_pay_tp) select _l).ToList();

                                                        //--------------------------------------------------
                                                        if (_checkPaymodeNPromotion != null && _checkPaymodeNPromotion.Count > 0)
                                                        {
                                                            var _checkBank1CCtype1 = (from _l in _checkPaymodeNPromotion where _l.Spdd_bank == _rec.Sard_credit_card_bank && _l.Spdd_cc_tp == _rec.Sard_cc_tp select _l).ToList();
                                                            if (_checkBank1CCtype1 != null && _checkBank1CCtype1.Count > 0)
                                                            {
                                                                _final = _checkBank1CCtype1[0];

                                                            }
                                                            else
                                                            {//1
                                                                var _checkBank1CCtype0 = (from _l in _checkPaymodeNPromotion where _l.Spdd_bank == _rec.Sard_credit_card_bank && string.IsNullOrEmpty(_l.Spdd_cc_tp) select _l).ToList();
                                                                if (_checkBank1CCtype0 != null && _checkBank1CCtype0.Count > 0)
                                                                    _final = _checkBank1CCtype0[0];
                                                                else
                                                                {//2
                                                                    var _checkBank0CCtype1 = (from _l in _checkPaymodeNPromotion where string.IsNullOrEmpty(_l.Spdd_bank) && _l.Spdd_cc_tp == _rec.Sard_cc_tp select _l).ToList();
                                                                    if (_checkBank0CCtype1 != null && _checkBank0CCtype1.Count > 0)
                                                                        _final = _checkBank0CCtype1[0];
                                                                    else
                                                                    {//3
                                                                        var _checkBank0CCtype0 = (from _l in _checkPaymodeNPromotion where string.IsNullOrEmpty(_l.Spdd_bank) && string.IsNullOrEmpty(_l.Spdd_cc_tp) select _l).ToList();
                                                                        if (_checkBank0CCtype0 != null && _checkBank0CCtype0.Count > 0)
                                                                        {
                                                                            _final = _checkBank0CCtype0[0];

                                                                        }
                                                                        else
                                                                        {
                                                                            allPaymodeMatch = false;
                                                                            _final = null;
                                                                        }
                                                                    }//3
                                                                }//2
                                                            }//1   
                                                        }
                                                        else
                                                        {
                                                            allPaymodeMatch = false;
                                                            _final = null;
                                                        }
                                                    }
                                                    else if (_rec.Sard_pay_tp == "CHEQUE")
                                                    {
                                                        var _checkPaymodeNBank = (from _l in _detail where _l.Spdd_pay_tp == _rec.Sard_pay_tp && _l.Spdd_bank == _rec.Sard_chq_bank_cd select _l).ToList();

                                                        if (_checkPaymodeNBank != null && _checkPaymodeNBank.Count > 0)
                                                            _final = _checkPaymodeNBank[0];
                                                        else
                                                        {//4
                                                            var _checkPaymodeOnly = (from _l in _detail where _l.Spdd_pay_tp == _rec.Sard_pay_tp && string.IsNullOrEmpty(_l.Spdd_bank) select _l).ToList();
                                                            if (_checkPaymodeOnly != null && _checkPaymodeOnly.Count > 0)
                                                                _final = _checkPaymodeOnly[0];
                                                            else
                                                            {//5
                                                                var _checkWithoutPaymode = (from _l in _List where string.IsNullOrEmpty(_l.Spdd_pay_tp) && string.IsNullOrEmpty(_l.Spdd_bank) select _l).ToList();
                                                                if (_checkWithoutPaymode != null && _checkWithoutPaymode.Count > 0)
                                                                    _final = _checkWithoutPaymode[0];
                                                                else
                                                                {
                                                                    allPaymodeMatch = false;
                                                                    _final = null;
                                                                }
                                                            }//5
                                                        }//4
                                                    }
                                                    else
                                                    {
                                                        var _checkPaymodeOnly = (from _l in _detail where _l.Spdd_pay_tp == _rec.Sard_pay_tp select _l).ToList();
                                                        if (_checkPaymodeOnly != null && _checkPaymodeOnly.Count > 0)
                                                            _final = _checkPaymodeOnly[0];
                                                        else
                                                        {//6
                                                            var _checkWithoutPaymode = (from _l in _detail where string.IsNullOrEmpty(_l.Spdd_pay_tp) select _l).ToList();
                                                            if (_checkWithoutPaymode != null && _checkWithoutPaymode.Count > 0)
                                                                _final = _checkWithoutPaymode[0];
                                                            else
                                                            {//7
                                                                allPaymodeMatch = false;
                                                                _final = null;
                                                            }//7
                                                        }//6
                                                    }
                                                }
                                                if (allPaymodeMatch)
                                                {
                                                    //loyalty check
                                                    //ADDED 2014/03/19
                                                    if (_lolResult != null) if (_lolResult.Count > 0)
                                                        {
                                                            bool _normal;
                                                            //check allow promotion or allow genpo price
                                                            LoyaltyType _loyaltyType = _salesDAL.GetLoyaltyType(_loltype);
                                                            if (_loyaltyType == null)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                if (!_loyaltyType.Salt_allw_promo)
                                                                {
                                                                    //check contain promotion
                                                                    int _promoCount = _InInvDet.Where(x => !string.IsNullOrEmpty(x.Sad_promo_cd)).Count();
                                                                    //not have any promo
                                                                    if (_promoCount <= 0)
                                                                    {
                                                                        _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], _final, out _normal);

                                                                    }
                                                                }
                                                                else if (_loyaltyType.Salt_defa_pb_only)
                                                                {
                                                                    //check def pb plevel
                                                                    MasterCompany _com = _inventoryDAL.GetCompByCode(_company);
                                                                    string _defPb = _com.Mc_anal7;
                                                                    int _pbCount = _InInvDet.Where(x => x.Sad_pbook != _defPb).Count();
                                                                    //not have any promo price book
                                                                    if (_pbCount <= 0)
                                                                    {
                                                                        _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], _final, out _normal);

                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], _final, out _normal);

                                                                }
                                                            }
                                                        }
                                                    //END

                                                    goto END;

                                                    // break;
                                                }
                                                else
                                                {
                                                    _final = null;
                                                }
                                                // if (_lolResult != null) if (_lolResult.Count > 0)
                                                //   _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], _final, out _isNormal);

                                            }
                                        }
                                        else { _final = null; }
                                    END:
                                        if (_final != null) _returnInvList.Add(CalculateDiscount(_company, _final, _itm, _isNormal, _invoiceheader.Sah_tax_inv, _invoiceheader.Sah_dt));
                                        if (_final != null) break;
                                    }//End of Hierarchy Loop
                                    if (_final == null || string.IsNullOrEmpty(_final.Spdl_com)) _returnInvList.Add(_itm);
                                }//End of Hierarchy condition
                                else _returnInvList.Add(_itm);//End ELSE of Hierarchy condition
                            }//Check the tag for pick status
                        }//Invoice Item Loop
                    }
                    #endregion
                }

            }
            else if (_InReceiptDet == null) if (_InInvDet.Count >= 0 && _InReceiptDet.Count <= 0)
                {
                    _currentPaid = (from _l in _InInvDet
                                    select _l.Sad_qty * _l.Sad_unit_rt + _l.Sad_itm_tax_amt - _l.Sad_disc_amt).Sum();
                    #region Null Paymode

                    foreach (InvoiceItem _itm in _InInvDet)
                    {
                        if (_itm.Sad_res_line_no != 1)
                        {
                            Int16 _isSerialized = Convert.ToInt16(_salesDAL.GetPriceLevel(_company, _itm.Sad_pbook, _itm.Sad_pb_lvl).Sapl_is_serialized);
                            Int16 _isPromotion = Convert.ToInt16(string.IsNullOrEmpty(_itm.Sad_promo_cd) || _itm.Sad_promo_cd == "0" ? 0 : 1);
                            if (_itm.Sad_conf_no == "0" || _itm.Sad_conf_no == "4")     //kapila 31/12/2016
                                _isPromotion = 0;
                            CashPromotionDiscountDetail _final = null;

                            if (_hierarchy != null && _hierarchy.Count > 0)
                            {
                                foreach (MasterSalesPriorityHierarchy _one in _hierarchy)
                                {
                                    string _type = _one.Mpi_cd;
                                    string _value = _one.Mpi_val;
                                    _isNormal = false;
                                    List<CashPromotionDiscountDetail> _lolResult = null;
                                    //check without pay mode
                                    List<CashPromotionDiscountDetail> _List = _salesDAL.GetGeneralPromotionDiscount(_company, _type, _value, _invoicetype, _time, _day, _date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _itm.Sad_itm_cd, _isSerialized, _isPromotion);
                                    if (!string.IsNullOrEmpty(_loltype) && _List != null && _List.Count > 0)
                                        _lolResult = _List.Where(x => x.Spdd_pay_tp == "LORE" && x.Spdd_bank == _loltype && x.Spdd_cc_tp == _membership).ToList();

                                    if (_List != null && _List.Count > 0)
                                    {
                                        var _checkWithoutPaymode = (from _l in _List where string.IsNullOrEmpty(_l.Spdd_pay_tp) select _l).ToList();
                                        if (_checkWithoutPaymode != null && _checkWithoutPaymode.Count > 0)
                                            _final = _checkWithoutPaymode[0];
                                        else
                                            _final = null;

                                        if (_lolResult != null) if (_lolResult.Count > 0)
                                                _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], _final, out _isNormal);
                                    }
                                    else
                                        if (_lolResult != null) if (_lolResult.Count > 0)
                                                _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], null, out _isNormal);

                                    if (_final != null) _returnInvList.Add(CalculateDiscount(_company, _final, _itm, _isNormal, _invoiceheader.Sah_tax_inv, _invoiceheader.Sah_dt));
                                    if (_final != null) break;
                                }//End of Hierarchy Loop
                                if (_final == null || string.IsNullOrEmpty(_final.Spdl_com)) _returnInvList.Add(_itm);
                            }//End of Hierarchy condition
                            else _returnInvList.Add(_itm);
                        }//Check the tag for pick status
                    }//Invoice Item Loop
                    #endregion
                }//Main Condition (invoice item/Receipt Item list Null Check)
        FEND: ;
            _isDifferent = false;
            _outInvItem = _returnInvList;
            decimal _NewPaid = 0;
            if (_outInvItem != null)
                if (_outInvItem.Count > 0)
                    _NewPaid = (_outInvItem.Select(X => X.Sad_tot_amt)).Sum();
            // _NewPaid = (from _l in _outInvItem select _l.Sad_qty * _l.Sad_unit_rt + _l.Sad_itm_tax_amt - _l.Sad_disc_amt).Sum();

            if (Math.Round(_currentPaid, 2) != Math.Round(_NewPaid, 2))
                _isDifferent = true;
            else
                _isDifferent = false;

            _tobepay = _NewPaid;

        }


        //ADDED SACHITH
        //2013/09.04
        public void GetGeneralPromotionDiscountCreditNote(string _company, string _profitcenter, string _invoicetype, Int32 _time, string _day, DateTime _date, List<InvoiceItem> _InInvDet, out List<InvoiceItem> _outInvItem, out bool _isDifferent, out decimal _tobepay, InvoiceHeader _invoiceheader, List<InvoiceItem> _promotionList, List<RecieptItem> _InReceiptDet, out string _error)
        {

            try
            {
                List<InvoiceItem> _returnInvList = new List<InvoiceItem>();

                string _loltype = string.Empty;
                string _membership = string.Empty;
                DataTable _loldet = null;
                _salesDAL = new SalesDAL();
                bool _isNormal = true;

                #region Get Loyalty Type
                if (!string.IsNullOrEmpty(_invoiceheader.Sah_anal_6))
                {
                    _loldet = _salesDAL.GetLoyaltyCardDetail(_invoiceheader.Sah_cus_cd, _invoiceheader.Sah_anal_6);
                    if (_loldet != null) if (_loldet.Rows.Count > 0)
                        {
                            _loltype = _loldet.Rows[0].Field<string>("salcm_loty_tp");
                            _membership = _loldet.Rows[0].Field<string>("salcm_cus_spec");
                        }
                }
                #endregion

                List<MasterSalesPriorityHierarchy> _hierarchy = _salesDAL.GetSalesPriorityHierarchy(_company, _profitcenter, "PC_PRIT_HIERARCHY", "PC");
                if (_hierarchy != null && _hierarchy.Count > 0) _hierarchy = _hierarchy.Where(x => x.Mpi_cd == "PC" || x.Mpi_cd == "CHNL").ToList();
                decimal _currentPaid = 0;

                if ((_InInvDet == null) || (_InInvDet.Count <= 0))
                {
                    _outInvItem = _returnInvList;
                    _isDifferent = false;
                    _tobepay = 0;
                    _error = "";
                    return;
                }
                else if (_InInvDet.Count >= 0)
                {
                    _currentPaid = (from _l in _InInvDet
                                    select _l.Sad_qty * _l.Sad_unit_rt + _l.Sad_itm_tax_amt - _l.Sad_disc_amt).Sum();

                    //If single pay mode

                    #region Only One Paymode for Payment
                    //Check for pay modes

                    if (_InReceiptDet.Count == 0)
                    {
                        foreach (InvoiceItem _itm in _InInvDet)
                        {
                            if (_itm.Sad_res_line_no != 1)
                            {
                                Int16 _isSerialized = Convert.ToInt16(_salesDAL.GetPriceLevel(_company, _itm.Sad_pbook, _itm.Sad_pb_lvl).Sapl_is_serialized);
                                Int16 _isPromotion = Convert.ToInt16(string.IsNullOrEmpty(_itm.Sad_promo_cd) || _itm.Sad_promo_cd == "0" ? 0 : 1);
                                if (_itm.Sad_conf_no == "0" || _itm.Sad_conf_no == "4")     //kapila 31/12/2016
                                    _isPromotion = 0;
                                CashPromotionDiscountDetail _final = null;

                                if (_hierarchy != null && _hierarchy.Count > 0)
                                {
                                    List<CashPromotionDiscountDetail> _lolResult = null;
                                    foreach (MasterSalesPriorityHierarchy _one in _hierarchy)
                                    {
                                        string _type = _one.Mpi_cd;
                                        string _value = _one.Mpi_val;
                                        _isNormal = true;
                                        List<CashPromotionDiscountDetail> _notAllowMultiple = null;
                                        List<CashPromotionDiscountDetail> _allowMultiple = null;
                                        List<CashPromotionDiscountDetail> _dis = new List<CashPromotionDiscountDetail>();
                                        //get all promotion discount definitions to credit note
                                        foreach (InvoiceItem inv in _promotionList)
                                        {
                                            _dis.AddRange(_salesDAL.GetPromotinalDiscountDetail01(inv.Sad_dis_seq, inv.Sad_itm_cd, _invoiceheader.Sah_pc));
                                        }
                                        List<CashPromotionDiscountDetail> _temList = _salesDAL.GetGeneralPromotionDiscount(_company, _type, _value, _invoicetype, _time, _day, _date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _itm.Sad_itm_cd, _isSerialized, _isPromotion);
                                        List<CashPromotionDiscountDetail> _List = new List<CashPromotionDiscountDetail>();

                                        //if credit not promotion in item  promotion
                                        if (_dis != null && _dis.Count > 0 && _temList != null && _temList.Count > 0)
                                        {
                                            foreach (CashPromotionDiscountDetail det in _dis)
                                            {
                                                List<CashPromotionDiscountDetail> _temList1 = (from tem in _temList
                                                                                               where tem.Spdd_seq == det.Spdd_seq
                                                                                               select tem).ToList<CashPromotionDiscountDetail>();
                                                if (_temList1 != null && _temList1.Count > 0)
                                                {
                                                    _List.AddRange(_temList1);
                                                }
                                            }

                                        }

                                        #region Multiple Paymode allow
                                        if (_List != null && _List.Count > 0)
                                        {
                                            _notAllowMultiple = _List.Where(x => x.Spdd_alw_mult == 0).ToList();
                                            _allowMultiple = _List.Where(x => x.Spdd_alw_mult == 1).ToList();
                                        }
                                        if (_notAllowMultiple != null && _notAllowMultiple.Count > 0)
                                            _List = _notAllowMultiple;
                                        //else
                                        //   _List = _allowMultiple;
                                        #endregion

                                        //Check for the loyalty discount
                                        if (!string.IsNullOrEmpty(_loltype) && _List != null && _List.Count > 0)
                                            _lolResult = _List.Where(x => x.Spdd_pay_tp == "LORE" && x.Spdd_bank == _loltype && x.Spdd_cc_tp == _membership).ToList();

                                        if (_List != null && _List.Count > 0)
                                        {

                                            if (_lolResult != null)
                                            {
                                                if (_lolResult.Count > 0)
                                                    _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], _List[0], out _isNormal);
                                                else
                                                    _final = _List[0];
                                            }
                                            else
                                                _final = _List[0];
                                        }
                                        else _final = null;

                                        if (_final != null) _returnInvList.Add(CalculateDiscount(_company, _final, _itm, _isNormal, _invoiceheader.Sah_tax_inv, _invoiceheader.Sah_dt));
                                        if (_final != null) break;
                                    }//End of Hierarchy Loop
                                    if (_final == null || string.IsNullOrEmpty(_final.Spdl_com)) _returnInvList.Add(_itm);
                                }//End of Hierarchy condition
                                else _returnInvList.Add(_itm);//End ELSE of Hierarchy condition
                            }//Check the tag for pick status
                        }//Invoice Item Loop
                    }
                    else
                    {
                        foreach (InvoiceItem _itm in _InInvDet)
                        {
                            if (_itm.Sad_res_line_no != 1)
                            {
                                Int16 _isSerialized = Convert.ToInt16(_salesDAL.GetPriceLevel(_company, _itm.Sad_pbook, _itm.Sad_pb_lvl).Sapl_is_serialized);
                                Int16 _isPromotion = Convert.ToInt16(string.IsNullOrEmpty(_itm.Sad_promo_cd) || _itm.Sad_promo_cd == "0" ? 0 : 1);
                                if (_itm.Sad_conf_no == "0" || _itm.Sad_conf_no == "4")     //kapila 31/12/2016
                                    _isPromotion = 0;
                                CashPromotionDiscountDetail _final = null;

                                if (_hierarchy != null && _hierarchy.Count > 0)
                                {
                                    foreach (MasterSalesPriorityHierarchy _one in _hierarchy)
                                    {
                                        string _type = _one.Mpi_cd;
                                        string _value = _one.Mpi_val;
                                        _isNormal = false;
                                        List<CashPromotionDiscountDetail> _lolResult = null;
                                        //check without pay mode
                                        List<CashPromotionDiscountDetail> _dis = new List<CashPromotionDiscountDetail>();
                                        //get all promotion discount definitions to credit note
                                        foreach (InvoiceItem inv in _promotionList)
                                        {
                                            _dis.AddRange(_salesDAL.GetPromotinalDiscountDetail01(inv.Sad_dis_seq, inv.Sad_itm_cd, _invoiceheader.Sah_pc));
                                        }
                                        List<CashPromotionDiscountDetail> _temList = _salesDAL.GetGeneralPromotionDiscount(_company, _type, _value, _invoicetype, _time, _day, _date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _itm.Sad_itm_cd, _isSerialized, _isPromotion);
                                        List<CashPromotionDiscountDetail> _List = new List<CashPromotionDiscountDetail>();

                                        //if credit not promotion in item  promotion
                                        if (_dis != null && _dis.Count > 0 && _temList != null && _temList.Count > 0)
                                        {
                                            foreach (CashPromotionDiscountDetail det in _dis)
                                            {

                                                List<CashPromotionDiscountDetail> _temList1 = (from tem in _temList
                                                                                               where tem.Spdd_seq == det.Spdd_seq
                                                                                               select tem).ToList<CashPromotionDiscountDetail>();
                                                if (_temList1 != null && _temList1.Count > 0)
                                                {
                                                    _List.AddRange(_temList1);
                                                }
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(_loltype) && _List != null && _List.Count > 0)
                                            _lolResult = _List.Where(x => x.Spdd_pay_tp == "LORE" && x.Spdd_bank == _loltype && x.Spdd_cc_tp == _membership).ToList();

                                        if (_List != null && _List.Count > 0)
                                        {
                                            var _checkWithoutPaymode = (from _l in _List where string.IsNullOrEmpty(_l.Spdd_pay_tp) select _l).ToList();
                                            if (_checkWithoutPaymode != null && _checkWithoutPaymode.Count > 0)
                                                _final = _checkWithoutPaymode[0];
                                            else
                                                _final = null;

                                            if (_lolResult != null) if (_lolResult.Count > 0)
                                                    _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], _final, out _isNormal);
                                        }
                                        else
                                            if (_lolResult != null) if (_lolResult.Count > 0)
                                                    _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], null, out _isNormal);


                                        if (_final != null) _returnInvList.Add(CalculateDiscount(_company, _final, _itm, _isNormal, _invoiceheader.Sah_tax_inv, _invoiceheader.Sah_dt));
                                        if (_final != null) break;
                                    }//End of Hierarchy Loop
                                    if (_final == null || string.IsNullOrEmpty(_final.Spdl_com)) _returnInvList.Add(_itm);
                                }//End of Hierarchy condition
                                else _returnInvList.Add(_itm);
                            }//Check the tag for pick status
                        }//Invoice Item Loop

                    }
                    #endregion

                }
                /*
            else if  (_InInvDet.Count >= 0 )
                {
                    _currentPaid = (from _l in _InInvDet
                                    select _l.Sad_qty * _l.Sad_unit_rt + _l.Sad_itm_tax_amt - _l.Sad_disc_amt).Sum();
                    #region Null Paymode

                    foreach (InvoiceItem _itm in _InInvDet)
                    {
                        if (_itm.Sad_res_line_no != 1)
                        {
                            Int16 _isSerialized = Convert.ToInt16(_salesDAL.GetPriceLevel(_company, _itm.Sad_pbook, _itm.Sad_pb_lvl).Sapl_is_serialized);
                            Int16 _isPromotion = Convert.ToInt16(string.IsNullOrEmpty(_itm.Sad_promo_cd) || _itm.Sad_promo_cd == "0" ? 0 : 1);
                            CashPromotionDiscountDetail _final = null;

                            if (_hierarchy != null && _hierarchy.Count > 0)
                            {
                                foreach (MasterSalesPriorityHierarchy _one in _hierarchy)
                                {
                                    string _type = _one.Mpi_cd;
                                    string _value = _one.Mpi_val;
                                    _isNormal = false;
                                    List<CashPromotionDiscountDetail> _lolResult = null;
                                    //check without pay mode
                                    List<CashPromotionDiscountDetail> _List = _salesDAL.GetGeneralPromotionDiscount(_company, _type, _value, _invoicetype, _time, _day, _date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _itm.Sad_itm_cd, _isSerialized, _isPromotion);
                                    if (!string.IsNullOrEmpty(_loltype) && _List != null && _List.Count > 0)
                                        _lolResult = _List.Where(x => x.Spdd_pay_tp == "LORE" && x.Spdd_bank == _loltype && x.Spdd_cc_tp == _membership).ToList();

                                    if (_List != null && _List.Count > 0)
                                    {

                                        _final = _List[0];

                                        if (_lolResult != null) if (_lolResult.Count > 0)
                                                _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], _final, out _isNormal);
                                    }
                                    else
                                        if (_lolResult != null) if (_lolResult.Count > 0)
                                                _final = GetMaxDiscountPromotionWithLoyaltyNNormal(_lolResult[0], null, out _isNormal);

                                    if (_final != null) _returnInvList.Add(CalculateDiscount(_company, _final, _itm, _isNormal, _invoiceheader.Sah_tax_inv));
                                    if (_final != null) break;
                                }//End of Hierarchy Loop
                                if (_final == null || string.IsNullOrEmpty(_final.Spdl_com)) _returnInvList.Add(_itm);
                            }//End of Hierarchy condition
                            else _returnInvList.Add(_itm);
                        }//Check the tag for pick status
                    }//Invoice Item Loop
                    #endregion
                }//Main Condition (invoice item/Receipt Item list Null Check)
            */
                _isDifferent = false;
                _outInvItem = _returnInvList;
                decimal _NewPaid = 0;
                if (_outInvItem != null)
                    if (_outInvItem.Count > 0)
                        _NewPaid = (_outInvItem.Select(X => X.Sad_tot_amt)).Sum();
                // _NewPaid = (from _l in _outInvItem select _l.Sad_qty * _l.Sad_unit_rt + _l.Sad_itm_tax_amt - _l.Sad_disc_amt).Sum();

                if (Math.Round(_currentPaid, 2) != Math.Round(_NewPaid, 2))
                    _isDifferent = true;
                else
                    _isDifferent = false;

                _tobepay = _NewPaid;
                _error = "";
            }
            catch (Exception ex)
            {
                _error = ex.Message;
                _tobepay = 0;
                _isDifferent = false;
                _outInvItem = null;
            }

        }

        #endregion

        #region Vehicle job
        public InventorySerialMaster GetVehicleDetails(string RegistrationNo, string EngineNo, string ChasseNo)
        {

            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            InventorySerialMaster ent = _salesDAL.GetVehicleDetails(RegistrationNo, EngineNo, ChasseNo);
            _salesDAL.ConnectionClose();
            return ent;
        }
        public DataTable GetServiceTypes(string com, string loc)
        {

            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            DataTable ent = _salesDAL.GetServiceTypes(com, loc);
            _salesDAL.ConnectionClose();
            return ent;
        }


        public DataTable GetMsgColumn()
        {

            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            DataTable ent = _salesDAL.GetMsgColumn();
            _salesDAL.ConnectionClose();
            return ent;
        }



        public DataTable GetNextServiceDet(string RegistrationNo, string EngineNo, string ChasseNo)
        {

            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            DataTable ent = _salesDAL.GetNextServiceDet(RegistrationNo, EngineNo, ChasseNo);
            _salesDAL.ConnectionClose();
            return ent;
        }
        public DataTable GetLastServiceDet(string RegistrationNo, string EngineNo, string ChasseNo)
        {

            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            DataTable ent = _salesDAL.GetLastServiceDet(RegistrationNo, EngineNo, ChasseNo);
            _salesDAL.ConnectionClose();
            return ent;
        }
        public DataTable Get_DefectTypes(string com, string loc)
        {

            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            DataTable ent = _salesDAL.Get_DefectTypes(com, loc);
            _salesDAL.ConnectionClose();
            return ent;
        }
        public Int32 SaveVehicleJob(ServiceJobHeader jobHdr, ServiceJobDetail jobDet, List<ServiceJobDefect> defectsList, ServiceJobStageLog _stagelog, Int32 serID, Int32 IsService, Int32 IsUpdateShedule, MasterAutoNumber _jobAuto, bool isExternal, out string jobNo)
        {
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            _ScmCommonDAL = new SCMCommonDAL();

            Int32 ent = -1;
            string _cusNo1;
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();
                _ScmCommonDAL.ConnectionOpen();
                MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_jobAuto.Aut_moduleid, _jobAuto.Aut_direction, _jobAuto.Aut_start_char, _jobAuto.Aut_cate_tp, _jobAuto.Aut_cate_cd, _jobAuto.Aut_modify_dt, _jobAuto.Aut_year);
                _cusNo1 = _jobAuto.Aut_cate_cd + "-" + _jobAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_jobAuto);//update MST_AUTO table




                jobHdr.Sjb_jobno = _cusNo1;
                ent = _salesDAL.Save_Job_Header(jobHdr);

                //SCM Upload
                SCMServiceJobHeader _header = new SCMServiceJobHeader();
                _header.Sjb_jobno = _cusNo1;
                _header.Sjb_company = jobHdr.Sjb_com;
                _header.Sjb_date = jobHdr.Sjb_dt;
                _header.Sjb_createby = jobHdr.Sjb_cre_by;
                _header.Sjb_createwhen = jobHdr.Sjb_cre_dt;
                _header.Sjb_profitcenter = jobHdr.Sjb_pc;
                _header.Sjb_location = jobHdr.Sjb_loc;
                _header.Sjb_startdate = jobHdr.Sjb_start_dt;
                _header.Sjb_enddate = jobHdr.Sjb_end_dt;
                _header.Sjb_channel = jobHdr.Sjb_chnl;
                _header.Sjb_jobcategory = jobHdr.Sjb_substage;
                _header.Sjb_status = jobHdr.Sjb_stus;
                _header.Sjb_custcode = jobHdr.Sjb_cust_cd;
                _header.Sjb_custname = jobHdr.Sjb_cust_name;
                _header.Sjb_custtitle = jobHdr.Sjb_title;
                _header.Sjb_job_remarks = jobHdr.Sjb_job_rmk;

                _ScmCommonDAL.SaveServiceJobHeader(_header);


                jobDet.Jbd_jobno = jobHdr.Sjb_jobno;
                ent = _salesDAL.Save_JobDetail(jobDet);

                //SCM Upload
                SCMServiceJobDetails _details = new SCMServiceJobDetails();
                _details.Jbd_jobno = _cusNo1;
                _details.Jbd_jobline = 1; //only one item, so one jobline
                _details.Jbd_itemcode = jobDet.Jbd_itm_cd;
                _details.Jbd_itemdesc = jobDet.Jbd_itm_desc;
                _details.Jbd_model = jobDet.Jbd_model;
                _details.Jbd_regno = _details.Jbd_regno;
                _details.Jbd_serial1 = jobDet.Jbd_ser1;
                _details.Jbd_serial2 = jobDet.Jbd_ser2;
                _details.Jbd_warranty_status = jobDet.Jbd_warr_stus;
                _details.Jbd_warrperiod = jobDet.Jbd_warrperiod;
                _details.Jbd_itemstatus = jobDet.Jbd_itm_stus;
                _details.Jbd_warrstartdate = jobDet.Jbd_warrstartdt;
                _details.Jbd_warranty = jobDet.Jbd_warr;//is this ok?
                _details.Jbd_ser_term = jobDet.Jbd_sev_term; //free service
                _details.Jbd_milage = Convert.ToInt32(jobDet.Jbd_milage);
                _details.Jbd_invoiceno = jobDet.Jbd_invoiceno;
                _ScmCommonDAL.SaveServiceJobDetails(_details);

                //request
                MasterAutoNumber _req = new MasterAutoNumber();

                _req.Aut_cate_cd = _jobAuto.Aut_cate_cd;
                _req.Aut_cate_tp = "PC";
                _req.Aut_direction = 1;
                _req.Aut_modify_dt = null;
                _req.Aut_moduleid = "VEHREQ";
                _req.Aut_number = 0;
                _req.Aut_start_char = "VEHREQ";
                _req.Aut_year = null;

                MasterAutoNumber _auto = _inventoryDAL.GetAutoNumber(_req.Aut_moduleid, _req.Aut_direction, _req.Aut_start_char, _req.Aut_cate_tp, _req.Aut_cate_cd, _req.Aut_modify_dt, _req.Aut_year);
                string _reqNo = _req.Aut_cate_cd + "-" + _req.Aut_start_char + "-" + _auto.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_req);


                //SCMServiceRequestHeader _request = new SCMServiceRequestHeader();
                //_request.Srh_company = jobHdr.Sjb_com;
                //_request.Srh_req_no = _reqNo;
                //_request.Srh_profitcenter = jobHdr.Sjb_pc;
                //_request.Srh_location = jobHdr.Sjb_loc;
                //_request.Srh_remarks = jobHdr.Sjb_job_rmk;
                //_request.Srh_channel = jobHdr.Sjb_chnl;
                //_request.Srh_status = jobHdr.Sjb_stus;
                //_request.Srh_town = jobHdr.Sjb_town;
                //_request.Srh_tech_remarks = jobHdr.Sjb_tech_rmk;
                //_request.Srh_reqtype = jobHdr.Sjb_job_tp;
                //_request.Srh_manualref = jobHdr.Sjb_manualref;
                //_request.Srh_req_sub_type = jobHdr.Sjb_job_sub_tp;
                //_request.Srh_reqcategory = jobHdr.Sjb_job_cat;
                //_request.Srh_priority = jobHdr.Sjb_prority;
                //_request.Srh_otherref = jobHdr.Sjb_othref;
                //_request.Srh_custcode = jobHdr.Sjb_cust_cd;
                //_request.Srh_custname = jobHdr.Sjb_cust_name;
                //_request.Srh_custtitle = jobHdr.Sjb_title;
                //_request.Srh_bill_cus_code = jobHdr.Sjb_bill_cust_cd;
                //_request.Srh_bill_address1 = jobHdr.Sjb_bill_address1;
                //_request.Srh_bill_address2 = jobHdr.Sjb_bill_address2;
                //_request.Srh_bill_address3 = jobHdr.Sjb_bill_address3;
                //_request.Srh_bill_cus_name = jobHdr.Sjb_bill_cust_name;
                //_request.Srh_req_sub_type = jobHdr.Sjb_job_sub_tp;
                //_request.Srh_tech_remarks = jobHdr.Sjb_tech_rmk;
                //_request.Srh_createby = jobHdr.Sjb_cre_by;
                //_request.Srh_createwhen = jobHdr.Sjb_cre_dt;
                //_request.Srh_lastmodifyby = jobHdr.Sjb_cre_by;
                //_request.Srh_lastmodifywhen = jobHdr.Sjb_mod_dt;

                //if (string.IsNullOrEmpty(_request.Srh_manualref))
                //{
                //    _request.Srh_manualref = "N/A";
                //}
                //if (string.IsNullOrEmpty(_request.Srh_reqtype))
                //{
                //    _request.Srh_reqtype = "N/A";
                //}
                //if (string.IsNullOrEmpty(_request.Srh_reqcategory))
                //{
                //    _request.Srh_reqcategory = "N/A";
                //}
                //if (string.IsNullOrEmpty(_request.Srh_priority))
                //{
                //    _request.Srh_priority = "N/A";
                //}
                //if (string.IsNullOrEmpty(_request.Srh_otherref))
                //{
                //    _request.Srh_otherref = "N/A";
                //}
                //if (string.IsNullOrEmpty(_request.Srh_req_sub_type))
                //{
                //    _request.Srh_req_sub_type = "N/A";
                //}
                //if (string.IsNullOrEmpty(_request.Srh_tech_remarks))
                //{
                //    _request.Srh_tech_remarks = "N/A";
                //}
                //_ScmCommonDAL.SaveServiceRequest(_request);

                //details
                //SCMServiceRequestDetails _reqDetails = new SCMServiceRequestDetails();
                //_reqDetails.Sri_req_no = _reqNo;
                //_reqDetails.Sri_jobno = _cusNo1;
                //_reqDetails.Sri_req_line = 1; 
                //_reqDetails.Sri_itemcode = jobDet.Jbd_itm_cd;
                //_reqDetails.Sri_itemdesc = jobDet.Jbd_itm_desc;
                //_reqDetails.Sri_model = jobDet.Jbd_model;
                //_reqDetails.Sri_regno = _details.Jbd_regno;
                //_reqDetails.Sri_serial1 = jobDet.Jbd_ser1;
                //_reqDetails.Sri_serial2 = jobDet.Jbd_ser2;
                //_reqDetails.Sri_warranty_status = jobDet.Jbd_warr_stus;
                //_reqDetails.Sri_warrperiod = jobDet.Jbd_warrperiod;
                //_reqDetails.Sri_itemstatus = jobDet.Jbd_itm_stus;
                //_reqDetails.Sri_warrstartdate = jobDet.Jbd_warrstartdt;
                //_reqDetails.Sri_warranty = jobDet.Jbd_warr;//is this ok?
                //_reqDetails.Sri_milage = Convert.ToInt32(jobDet.Jbd_milage);

                //_ScmCommonDAL.SaveRequestDetail(_reqDetails);

                int Defect_LineNo = 0;
                foreach (ServiceJobDefect defect in defectsList)
                {
                    Defect_LineNo++;
                    defect.Srd_defc_line = Defect_LineNo;
                    defect.Srd_jobno = jobHdr.Sjb_jobno;
                    defect.Srd_job_line = jobDet.Jbd_jobline;

                    ent = _salesDAL.Save_Job_Defect(defect);

                    //SCM Upload
                    SCMServiceJobDefects _defect = new SCMServiceJobDefects();
                    _defect.Srd_def_line = Defect_LineNo;
                    _defect.Srd_job_no = jobHdr.Sjb_jobno;
                    _defect.Srd_job_line = jobDet.Jbd_jobline;
                    _defect.Srd_company = jobHdr.Sjb_com;
                    _defect.Srd_job_def_type = defect.Srd_job_defc_tp;
                    _defect.Srd_job_def_remarks = defect.Srd_job_defc_rmk;

                    //request table
                    //SCMServiceRequestDefect _reqDefect = new SCMServiceRequestDefect();
                    //_reqDefect.Srd_company = jobHdr.Sjb_com;
                    //_reqDefect.Srd_def_line = Defect_LineNo;
                    //_reqDefect.Srd_job_def_remarks = defect.Srd_job_defc_rmk; ;
                    //_reqDefect.Srd_job_def_type = defect.Srd_job_defc_tp;
                    //_reqDefect.Srd_req_def_remarks = defect.Srd_job_defc_rmk;
                    //_reqDefect.Srd_req_def_type = defect.Srd_job_defc_tp;
                    //_reqDefect.Srd_req_no = _reqNo;
                    //_reqDefect.Srd_req_line = Defect_LineNo;


                    _ScmCommonDAL.SaveServiceJobItems(_defect);
                    //_ScmCommonDAL.SaveRequestDefects(_reqDefect);
                }

                _stagelog.Sjl_jobno = jobHdr.Sjb_jobno;
                _salesDAL.Save_Job_stagelog(_stagelog);

                //SCM Upload


                SCMServiceStageLog _stage = new SCMServiceStageLog();
                _stage.Sjl_reqno = _reqNo;
                _stage.Sjl_createby = _stagelog.Sjl_cre_by;
                _stage.Sjl_createwhen = _stagelog.Sjl_cre_dt;
                _stage.Sjl_jobstage = 2;
                _stage.Sjl_location = _stagelog.Sjl_loc;
                _stage.Sjl_jobno = jobHdr.Sjb_jobno;

                _ScmCommonDAL.SaveServiceStageLog(_stage);
                if (!isExternal)
                {
                    if (IsService == 1)
                    {

                        // _salesDAL.UpdateOrInsert_ServiceShedule(jobDet, 1, serID, jobHdr.Sjb_cre_dt);
                        if (IsUpdateShedule == 1)
                        {
                            _salesDAL.UpdateOrInsert_ServiceShedule(jobDet, 1, serID, jobHdr.Sjb_cre_dt);

                            //SCM Upload
                            SCMServiceSchedule _schedule = new SCMServiceSchedule();
                            _schedule.Serial_no = jobDet.Jbd_ser1;
                            _schedule.Item_code = jobDet.Jbd_itm_cd;
                            _schedule.Is_free = false;
                            _schedule.Item_status = jobDet.Jbd_itm_stus;
                            _schedule.Job_date = jobHdr.Sjb_dt;
                            _schedule.Job_no = jobHdr.Sjb_jobno;
                            _schedule.Service_term = jobDet.Jbd_sev_term;

                            _ScmCommonDAL.InsertUpdateServiceSchedule(_schedule, true);
                        }
                        else if (IsUpdateShedule == 0)
                        {
                            _salesDAL.UpdateOrInsert_ServiceShedule(jobDet, 0, serID, jobHdr.Sjb_cre_dt);

                            MasterAutoNumber _warr = new MasterAutoNumber();

                            _warr.Aut_cate_cd = _jobAuto.Aut_cate_cd;
                            _warr.Aut_cate_tp = "PC";
                            _warr.Aut_direction = 1;
                            _warr.Aut_modify_dt = null;
                            _warr.Aut_moduleid = "VEHWAR";
                            _warr.Aut_number = 0;
                            _warr.Aut_start_char = "VEHWAR";
                            _warr.Aut_year = null;

                            MasterAutoNumber _auto1 = _inventoryDAL.GetAutoNumber(_warr.Aut_moduleid, _warr.Aut_direction, _warr.Aut_start_char, _warr.Aut_cate_tp, _warr.Aut_cate_cd, _warr.Aut_modify_dt, _warr.Aut_year);
                            string _warrNo = _req.Aut_cate_cd + "-" + _warr.Aut_start_char + "-" + _auto.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                            _inventoryDAL.UpdateAutoNumber(_auto1);


                            SCMServiceSchedule _schedule = new SCMServiceSchedule();
                            _schedule.Warr_no = _warrNo;
                            _schedule.Serial_no = jobDet.Jbd_ser1;
                            _schedule.Item_code = jobDet.Jbd_itm_cd;
                            _schedule.Is_free = false;
                            _schedule.Item_status = jobDet.Jbd_itm_stus;
                            _schedule.Job_date = jobHdr.Sjb_dt;
                            _schedule.Job_no = jobHdr.Sjb_jobno;
                            _schedule.Service_term = jobDet.Jbd_sev_term;

                            _ScmCommonDAL.InsertUpdateServiceSchedule(_schedule, false);
                        }
                    }
                }

                _salesDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _ScmCommonDAL.ConnectionClose();
                _tr.Complete();
            }
            jobNo = _cusNo1;
            return ent;
        }
        #endregion Vehicle job

        public string GetInvoicePrefix(string _company, string _profitcenter, string _invoicetype)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoicePrefix(_company, _profitcenter, _invoicetype);
        }

        public List<CashGeneralEntiryDiscountDef> GetGeneralEntityDiscountDef(string _company, string _profitcenter, DateTime _date, string _book, string _level)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetGeneralEntityDiscountDefinition(_company, _profitcenter, _date, _book, _level);
        }

        public Int32 SaveCashGeneralEntityDiscount(string _smsDocType, string _company, string _location, string _documentno, string _user, List<CashGeneralEntiryDiscountDef> _list)
        {
            _salesDAL = new SalesDAL();
            _generalDAL = new GeneralDAL();
            _inventoryDAL = new InventoryDAL();
            Int32 _effect = 0;
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _generalDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();

                List<MsgInformation> _msg = _generalDAL.GetMsgInformation(_company, _location, _smsDocType);


                foreach (MsgInformation _info in _msg)
                {
                    string _mg = "";
                    string _email = "";

                    if (_msg != null)
                        if (_msg.Count > 0)
                        {
                            //old pos SMS format
                            //..Discount Reqest.. Customer: Restaurant Systems (pvt) Ltd  ,  Product: HRWH200REMB x 1, From: 07/Sep/2012, To: 07/Sep/2012, Discount: 10.00%

                            _mg = "Discount Reqest by " + _user + ", Customer:" + _salesDAL.GetBusinessCompanyDetail(_company, _list[0].Sgdd_cust_cd, string.Empty, string.Empty, "C").Mbe_name + " for Item(s) \n\n";
                            _email = "Dear Sir/Madam, \n\n" + _mg;

                            foreach (CashGeneralEntiryDiscountDef _discount in _list)
                            {
                                _discount.Sgdd_seq = _inventoryDAL.GetSerialID();
                                _salesDAL.SaveCashGeneralEntityDiscount(_discount);
                                _mg += _discount.Sgdd_itm + " - Rate: " + _discount.Sgdd_disc_rt + "/ discount value: " + _discount.Sgdd_disc_val + " ,";
                                _email += _discount.Sgdd_itm + " - Rate: " + _discount.Sgdd_disc_rt + "/ discount value: " + _discount.Sgdd_disc_val + " \n";
                            }

                            _email += _generalDAL.GetMailFooterMsg();


                            OutSMS _out = new OutSMS();
                            _out.Msg = _mg;
                            _out.Msgstatus = 0;
                            _out.Msgtype = _info.Mmi_msg_tp;
                            _out.Receivedtime = DateTime.Now;
                            _out.Receiver = _info.Mmi_receiver;
                            _out.Receiverphno = _info.Mmi_mobi_no;
                            _out.Refdocno = _documentno;
                            _out.Sender = _user;
                            _out.Createtime = DateTime.Now;
                            _generalDAL.SaveSMSOut(_out);


                            #region Mail
                            SmtpClient smtpClient = new SmtpClient();
                            MailMessage message = new MailMessage();

                            MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                            smtpClient.Host = _generalDAL.GetMailHost();
                            smtpClient.Port = 25;
                            message.From = fromAddress;

                            message.To.Add(_info.Mmi_email);
                            message.Subject = _smsDocType;
                            message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                            //message.Bcc.Add(new MailAddress(""));
                            message.IsBodyHtml = false;
                            message.Body = _email;
                            message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                            // Send SMTP mail
                            smtpClient.Send(message);
                            #endregion

                        }
                }

                _salesDAL.ConnectionClose();
                _generalDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _effect = 1;
                _tr.Complete();

            }



            return _effect;
        }



        public Int32 SaveMsgForExpiryReceipt(string _smsDocType, string _company, string _location, string _documentno, string _user, DateTime _expDate)
        {
            _salesDAL = new SalesDAL();
            _generalDAL = new GeneralDAL();
            _inventoryDAL = new InventoryDAL();
            Int32 _effect = 0;
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _generalDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();

                List<MsgInformation> _msg = _generalDAL.GetMsgInformation(_company, _location, _smsDocType);

                StringBuilder _mg = new StringBuilder(string.Empty);



                _mg.Append("Advance Receipt : " + _documentno + ", Expired on :" + _expDate + " P/C : " + _location + "  \n\n");



                if (_msg != null)
                    _msg = _msg.Where(X => X.Mmi_msg_tp != "A" && X.Mmi_receiver == _user).ToList();
                if (_msg.Count > 0)
                {
                    bool _DiscountReqGen = false;
                    bool _isSend = false;
                    foreach (MsgInformation _info in _msg)
                    {




                        _mg = new StringBuilder(string.Empty);



                        Int32 _SERID = Convert.ToInt32(_inventoryDAL.GetSMSSerialID());




                        //SMS
                        if (_info.Mmi_msg_tp == "S")
                        {
                            OutSMS _out = new OutSMS();
                            _out.Msg = _mg.ToString();
                            _out.Msgstatus = 0;
                            _out.Msgtype = _info.Mmi_msg_tp;
                            _out.Receivedtime = DateTime.Now;
                            _out.Receiver = _info.Mmi_receiver;
                            _out.Receiverphno = _info.Mmi_mobi_no;
                            _out.Senderphno = _info.Mmi_mobi_no;
                            _out.Refdocno = _documentno;
                            _out.Sender = _user;
                            _out.Msgid = Convert.ToString(_SERID);
                            _out.Createtime = DateTime.Now;
                            _generalDAL.SaveSMSOut(_out);
                        }
                        _isSend = true;









                    }
                }

                _salesDAL.ConnectionClose();
                _generalDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _effect = 1;
                _tr.Complete();
            }

            return _effect;
        }



        public Int32 SaveCashGeneralEntityDiscountWindows(string _smsDocType, string _company, string _location, string _documentno, string _user, List<CashGeneralEntiryDiscountDef> _list, string _customer, decimal _discountRate, string _reqRemarks = "")
        {
            _salesDAL = new SalesDAL();
            _generalDAL = new GeneralDAL();
            _inventoryDAL = new InventoryDAL();
            Int32 _effect = 0;
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _generalDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();

                List<MsgInformation> _msg = _generalDAL.GetMsgInformation(_company, _location, _smsDocType);

                StringBuilder _mg = new StringBuilder(string.Empty);
                StringBuilder _email = new StringBuilder(string.Empty);
                string _customerName = _salesDAL.GetBusinessCompanyDetail(_company, _customer, string.Empty, string.Empty, "C").Mbe_name;


                _mg.Append("DISCOUNT: Discount requested by " + _user + ", Showroom " + _location + ", Customer:" + _customerName + " for item(s) \n\n");
                _email.Append("Dear Sir/Madam, \n\n" + _mg.ToString());
                _msg = _msg.Where(X => X.Mmi_msg_tp != "A" && X.Mmi_receiver == _user).ToList();

                if (_msg != null)
                    if (_msg.Count > 0)
                    {
                        bool _DiscountReqGen = false;
                        bool _isSend = false;
                        foreach (MsgInformation _info in _msg)
                        {

                            //old pos SMS format
                            //..Discount Reqest.. Customer: Restaurant Systems (pvt) Ltd  ,  Product: HRWH200REMB x 1, From: 07/Sep/2012, To: 07/Sep/2012, Discount: 10.00%

                            if (_list != null)
                                if (_list.Count > 0 && _discountRate == 0)
                                    foreach (CashGeneralEntiryDiscountDef _discount in _list)
                                    {

                                        _mg = new StringBuilder(string.Empty);
                                        _email = new StringBuilder(string.Empty);

                                        if (_DiscountReqGen == false) _discount.Sgdd_seq = _inventoryDAL.GetSMSSerialID(); //_inventoryDAL.GetSerialID();
                                        _mg.Append("DISCOUNT: " + _discount.Sgdd_seq.ToString() + " Discount requested by " + _user + ", Showroom " + _location + ", Customer: " + _customerName + " for item(s) \n\n");
                                        if (_DiscountReqGen == false) _salesDAL.SaveCashGeneralEntityDiscount(_discount);
                                        _mg.Append(" " + _discount.Sgdd_itm + " - Rate: " + _discount.Sgdd_disc_rt + "% , Discount value: " + _discount.Sgdd_disc_val + " ,");
                                        _email.Append(" " + _discount.Sgdd_itm + " - Rate: " + _discount.Sgdd_disc_rt + "% , Discount value: " + _discount.Sgdd_disc_val + " \n");

                                        //kapila 15/7/2017
                                        if (!string.IsNullOrEmpty(_reqRemarks))
                                        {
                                            _mg.Append(" - Remarks: " + _reqRemarks);
                                            _email.Append(" - Remarks: " + _reqRemarks + " \n");
                                        }
                                        //SMS
                                        if (_info.Mmi_msg_tp == "S")
                                        {
                                            OutSMS _out = new OutSMS();
                                            _out.Msg = _mg.ToString();
                                            _out.Msgstatus = 0;
                                            _out.Msgtype = _info.Mmi_msg_tp;
                                            _out.Receivedtime = DateTime.Now;
                                            _out.Receiver = _info.Mmi_receiver;
                                            _out.Receiverphno = _info.Mmi_mobi_no;
                                            _out.Senderphno = _info.Mmi_mobi_no;
                                            _out.Refdocno = _documentno;
                                            _out.Sender = _user;
                                            _out.Msgid = Convert.ToString(_discount.Sgdd_seq);
                                            _out.Createtime = DateTime.Now;
                                            _generalDAL.SaveSMSOut(_out);
                                        }
                                        _isSend = true;
                                    }

                            if (_isSend) _DiscountReqGen = true;


                            if (_discountRate > 0)
                            {
                                if (_DiscountReqGen == false) _list.ForEach(X => X.Sgdd_seq = _inventoryDAL.GetSMSSerialID()); //_inventoryDAL.GetSerialID());
                                _mg = new StringBuilder(string.Empty);
                                _mg.Append("DISCOUNT: " + _list[0].Sgdd_seq.ToString() + " Discount requested by " + _user + ", Showroom " + _location + ", Customer: " + _customerName + " for item(s) \n\n");
                                if (_DiscountReqGen == false) { _salesDAL.SaveCashGeneralEntityDiscount(_list[0]); _DiscountReqGen = true; }
                                _mg.Append(" Rate: " + _discountRate + " ");
                                _email.Append(" Rate: " + _discountRate + " \n");
                                //kapila 15/7/2017
                                if (!string.IsNullOrEmpty(_reqRemarks))
                                {
                                    _mg.Append(" - Remarks: " + _reqRemarks + " ");
                                    _email.Append(" - Remarks: " + _reqRemarks + " \n");
                                }
                            }

                            _email.Append(_generalDAL.GetMailFooterMsg());

                            //Email
                            if (_info.Mmi_msg_tp == "M")
                            {
                                #region Mail
                                SmtpClient smtpClient = new SmtpClient();
                                MailMessage message = new MailMessage();

                                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                                smtpClient.Host = _generalDAL.GetMailHost();
                                smtpClient.Port = 25;
                                message.From = fromAddress;

                                message.To.Add(_info.Mmi_email);
                                message.Subject = _smsDocType;
                                if (!string.IsNullOrEmpty(_info.Mmi_superior_mail))
                                    message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                                //message.Bcc.Add(new MailAddress(""));
                                message.IsBodyHtml = false;
                                message.Body = _email.ToString();
                                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                                // Send SMTP mail
                                smtpClient.Send(message);
                                #endregion
                            }

                            if (_isSend == false)
                            {
                                //SMS
                                if (_info.Mmi_msg_tp == "S")
                                {
                                    OutSMS _out = new OutSMS();
                                    _out.Msg = _mg.ToString();
                                    _out.Msgstatus = 0;
                                    _out.Msgtype = _info.Mmi_msg_tp;
                                    _out.Receivedtime = DateTime.Now;
                                    _out.Receiver = _info.Mmi_receiver;
                                    _out.Receiverphno = _info.Mmi_mobi_no;
                                    _out.Senderphno = _info.Mmi_mobi_no;
                                    _out.Refdocno = _documentno;
                                    _out.Sender = _user;
                                    _out.Msgid = Convert.ToString(_list[0].Sgdd_seq);
                                    _out.Createtime = DateTime.Now;
                                    _generalDAL.SaveSMSOut(_out);
                                }
                            }
                        }
                    }

                _salesDAL.ConnectionClose();
                _generalDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _effect = 1;
                _tr.Complete();
            }

            return _effect;
        }


        public Int32 SaveHPExchange(DateTime _date, string _accountno, string _company, string _location, string _profitcenter, string _createdBy, string _inSubType, string _outSubType, List<ReptPickSerials> _list, List<ReptPickSerials> _outList, List<InvoiceItem> _outPureInvoiceItem, List<RecieptHeader> receiptHeaderList, List<RecieptItem> receipItemList, MasterAutoNumber receipAuto, out string _creditnotelist, out string _inventorydoclist, HPAccountLog _accLog, HpAccount _newAccount, List<HpSheduleDetails> _currentSchedule, List<HpSheduleDetails> _newSchedule, HpInsurance _insurance, MasterAutoNumber _insuranceAuto, RequestApprovalHeader _request, out string _diriya, out string _invNo, out string _recNo)
        {
            Int32 _effect = 0;


            //----------------IN items----------------

            //Check the serial list divide to status of the IN list as Delivered/Forward status + DO No + Invoice no
            //if the Tus_ser_id =0 + Invoice no then its a forward sales (Credit Note only (HS-EXI))
            //if the Tus_ser_id=1 and need to check with the DO, if the DO is same its goes to single SRN
            //If its differ then there are multiple SRN's as per the count of DO's (SRN with Credit Note)

            //----------------OUT items----------------

            //The total OUT items should save as Invoice with the reference of the account no. (HS-EXO)
            //and the as per the reply of the customer, should raise DO

            //----------------Account----------------

            //Save the Whole current account to LOG with Sales Type - EXI
            //New Trial Calculation will be update to the Hpt_Acc table and the Sales Type - EXO
            //In Hpt_Sch, save the current to the HPT_Sch_Log
            //write the new schdule to the Hpt_sch
            // Term         Current Value           New Value           Save Process        paid status
            // 1            1000                    1200                1000                1
            // 2            1000                    1200                1000                1
            // 3            1000                    1200                1200+400 x          0   <- term 1,2 remain as it is and the balance will add to the next term as total
            // 4            1000                    1200                1200 x              0   <- term will be as the new calcullated term
            // 5            1000                    1200                1200 x              0   <- term will be as the new calcullated term
            //--------------------------------------* New Value = Amount Finance + Interest Amount / Terms
            //Save Receipt Entry with the type HPDPS


            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            _inventoryRepDAL = new ReptCommonDAL();
            _fmsInventoryDal = new FMS_InventoryDAL();
            _generalDAL = new GeneralDAL();
            string _inventoryDocumentList = string.Empty;
            string _creditNoteNoList = string.Empty;
            _recNo = "";

            string _outInvoiceForDuplicate = string.Empty;


            try
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _fmsInventoryDal.ConnectionOpen();
                _fmsInventoryDal.BeginTransaction();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();


                //------------------------------------EXI---------------------------------------
                #region Revers Entries
                string _crnote = string.Empty;
                string _srnno = string.Empty;
                string _outInvoice = "";
                bool _isForwardSale = true;
                string _outDO = "";
                foreach (ReptPickSerials _doc in _list)
                {
                    _isForwardSale = Convert.ToInt32(_doc.Tus_ser_id) == 0 ? true : false;
                    _outInvoice = Convert.ToString(_doc.Tus_base_doc_no);
                    _outDO = Convert.ToString(_doc.Tus_doc_no);
                    if (string.IsNullOrEmpty(_outInvoiceForDuplicate)) _outInvoiceForDuplicate = _outInvoice;
                    if (!_isForwardSale)
                        break;
                }
                if (_isForwardSale)//revers the invoice only (Credit Note)
                {

                    var _CreditNoteList = (from _one in _outList where _one.Tus_base_doc_no == _outInvoice && _one.Tus_ser_id == 0 select _one).ToList();

                    //Invoice Header - Invoice Item - invoice Auto Number
                    InvoiceHeader _hdr = _salesDAL.GetInvoiceHeader(_outInvoice);
                    _hdr.Sah_dt = _date.Date;
                    _hdr.Sah_inv_no = string.Empty;
                    _hdr.Sah_tp = "REV";
                    _hdr.Sah_inv_sub_tp = _inSubType;
                    _hdr.Sah_direct = false;
                    _hdr.Sah_pc = _profitcenter;
                    _hdr.Sah_stus = "D";//updated 2013/01/29 
                    _hdr.Sah_cre_by = _createdBy;
                    _hdr.Sah_cre_when = DateTime.Now;
                    _hdr.Sah_mod_by = _createdBy;
                    _hdr.Sah_mod_when = DateTime.Now;
                    _hdr.Sah_del_loc = _location;
                    //added 2013/08/06
                    _hdr.Sah_ref_doc = _outInvoice;
                    _hdr.Sah_anal_10 = 0;

                    List<InvoiceItem> _itm = _salesDAL.GetInvoiceDetailByInvoice(_outInvoice);
                    MasterAutoNumber _auto = new MasterAutoNumber();
                    string _prefix = _salesDAL.GetInvoicePrefix(_company, _profitcenter, "HS");
                    _auto.Aut_cate_cd = _profitcenter;
                    _auto.Aut_cate_tp = "PC";
                    _auto.Aut_direction = 0;
                    _auto.Aut_moduleid = "REV";
                    _auto.Aut_start_char = "INREV";
                    _auto.Aut_year = null;

                    List<InvoiceItem> _invItemSaveList = new List<InvoiceItem>();
                    foreach (ReptPickSerials _Itm in _CreditNoteList)
                    {
                        var _outinvItem = (from _l in _itm where _l.Sad_itm_line == _Itm.Tus_base_itm_line select _l).ToList();
                        _outinvItem.ForEach(x => { x.Sad_do_qty = 1; x.Sad_srn_qty = 1; });

                        _invItemSaveList.AddRange(_outinvItem);
                    }


                    CommonSaveReversal(_hdr, _invItemSaveList, _auto, false, out _crnote);

                    if (string.IsNullOrEmpty(_creditNoteNoList))
                        _creditNoteNoList = _crnote;
                    else
                        _creditNoteNoList += "," + _crnote;

                    //call CommonSaveReversal()
                }
                else//Raise revers invoice (Credit Note) with SRN 
                {

                    var _SRNList = (from _one in _outList where _one.Tus_base_doc_no == _outInvoice && _one.Tus_doc_no == _outDO && _one.Tus_ser_id > 0 select _one).ToList();

                    //Invoice header/Invoice Item/invoice auto number/inventory header/pick serial/pick serial sub/inventoru auto
                    InvoiceHeader _hdr = _salesDAL.GetInvoiceHeader(_outInvoice);
                    _hdr.Sah_dt = _date.Date;
                    _hdr.Sah_inv_no = string.Empty;
                    _hdr.Sah_inv_sub_tp = _inSubType;
                    _hdr.Sah_direct = false;
                    _hdr.Sah_pc = _profitcenter;
                    _hdr.Sah_stus = "A";
                    _hdr.Sah_cre_by = _createdBy;
                    _hdr.Sah_cre_when = DateTime.Now;
                    _hdr.Sah_mod_by = _createdBy;
                    _hdr.Sah_mod_when = DateTime.Now;
                    _hdr.Sah_ref_doc = _outInvoice;
                    _hdr.Sah_anal_10 = 0;

                    List<InvoiceItem> _itm = _salesDAL.GetInvoiceDetailByInvoice(_outInvoice);
                    MasterAutoNumber _auto = new MasterAutoNumber();
                    string _prefix = _salesDAL.GetInvoicePrefix(_company, _profitcenter, "HS");
                    _auto.Aut_cate_cd = _profitcenter;
                    _auto.Aut_cate_tp = "PC";
                    _auto.Aut_direction = 0;
                    _auto.Aut_moduleid = "REV";
                    _auto.Aut_start_char = "INREV";
                    _auto.Aut_year = null;

                    List<InvoiceItem> _invItemSaveList = new List<InvoiceItem>();
                    foreach (ReptPickSerials _Itm in _SRNList)
                    {
                        var _outinvItem = (from _l in _itm where _l.Sad_itm_line == _Itm.Tus_base_itm_line select _l).ToList();
                        // _outinvItem.ForEach(x => { x.Sad_do_qty = 1; x.Sad_srn_qty = 1; });

                        _invItemSaveList.AddRange(_outinvItem);
                    }

                    InventoryHeader _inventoryHeader = new InventoryHeader();
                    _inventoryHeader.Ith_acc_no = _accountno;
                    _inventoryHeader.Ith_com = _company;
                    _inventoryHeader.Ith_cre_by = _createdBy;
                    _inventoryHeader.Ith_cre_when = DateTime.Now;
                    _inventoryHeader.Ith_direct = true;
                    _inventoryHeader.Ith_doc_date = _date.Date;
                    _inventoryHeader.Ith_doc_tp = "SRN";
                    _inventoryHeader.Ith_doc_year = _date.Year;
                    _inventoryHeader.Ith_loc = _location;
                    _inventoryHeader.Ith_mod_by = _createdBy;
                    _inventoryHeader.Ith_mod_when = DateTime.Now;
                    _inventoryHeader.Ith_pc = _profitcenter;
                    _inventoryHeader.Ith_stus = "A";
                    _inventoryHeader.Ith_cate_tp = "NOR";
                    _inventoryHeader.Ith_sub_tp = "NORMAL";
                    _inventoryHeader.Ith_entry_no = _outInvoice;
                    _inventoryHeader.Ith_manual_ref = _outDO;
                    _inventoryHeader.Ith_oth_docno = _outDO;

                    MasterAutoNumber _inventoryauto = new MasterAutoNumber();
                    _inventoryauto.Aut_cate_cd = _location;
                    _inventoryauto.Aut_cate_tp = "LOC";
                    _inventoryauto.Aut_direction = 1;
                    _inventoryauto.Aut_moduleid = "SRN";
                    _inventoryauto.Aut_start_char = "SRN";

                    foreach (InvoiceItem item in _invItemSaveList)
                    {
                        if (item.Sad_do_qty > 0)
                        {

                            item.Sad_srn_qty = item.Sad_do_qty;
                            item.Sad_fws_ignore_qty = item.Sad_do_qty;
                            item.Sad_do_qty = 0;

                        }
                        else
                        {
                            item.Sad_do_qty = 0;
                            item.Sad_fws_ignore_qty = item.Sad_qty;
                            item.Sad_srn_qty = item.Sad_qty;
                        }
                    }


                    SaveReversalForCommon(_hdr, _invItemSaveList, _auto, false, out _crnote, _inventoryHeader, _SRNList, null, _inventoryauto, out _srnno);


                    //ADDED 2013/06/20
                    if (!string.IsNullOrEmpty(_srnno))
                    {
                        _salesDAL.UpdateInvoiceRevNo(_crnote, _srnno);
                    }

                    //call SaveReversal()
                    if (string.IsNullOrEmpty(_creditNoteNoList))
                        _creditNoteNoList = _crnote;
                    else
                        _creditNoteNoList += "," + _crnote;

                    if (string.IsNullOrEmpty(_inventoryDocumentList))
                        _inventoryDocumentList = _srnno;

                }




                #endregion

                //------------------------------------EXO---------------------------------------
                #region  Invoice Entry

                InvoiceHeader _pureInvoiceHdr = _salesDAL.GetInvoiceHeader(_outInvoiceForDuplicate);
                _pureInvoiceHdr.Sah_dt = _date.Date;
                _pureInvoiceHdr.Sah_inv_no = string.Empty;
                _pureInvoiceHdr.Sah_inv_sub_tp = _outSubType;
                _pureInvoiceHdr.Sah_direct = true;
                _pureInvoiceHdr.Sah_pc = _profitcenter;
                _pureInvoiceHdr.Sah_stus = "A";
                _pureInvoiceHdr.Sah_cre_by = _createdBy;
                _pureInvoiceHdr.Sah_cre_when = DateTime.Now;
                _pureInvoiceHdr.Sah_mod_by = _createdBy;
                _pureInvoiceHdr.Sah_mod_when = DateTime.Now;
                _pureInvoiceHdr.Sah_anal_10 = 0;
                _pureInvoiceHdr.Sah_del_loc = _location;

                MasterAutoNumber _pureAuto = new MasterAutoNumber();
                string _purePrefix = _salesDAL.GetInvoicePrefix(_company, _profitcenter, "HS");
                _pureAuto.Aut_cate_cd = _profitcenter;
                _pureAuto.Aut_cate_tp = "PC";
                _pureAuto.Aut_direction = 1;
                _pureAuto.Aut_moduleid = "HS";
                _pureAuto.Aut_start_char = _purePrefix;
                _pureAuto.Aut_year = _date.Year;

                string _pureInvoiceno = string.Empty;
                string _pureReceiptno = string.Empty;
                string _pureDOno = string.Empty;
                string _errorList = string.Empty;

                CommonSaveInvoiceWithDeliveryOrder(_pureInvoiceHdr, _outPureInvoiceItem, null, new RecieptHeader(), new List<RecieptItem>(), null, null, null, _pureAuto, null, null, false, out _pureInvoiceno, out _pureReceiptno, out _pureDOno, _inventoryDAL, _salesDAL, _inventoryRepDAL, false, false, out _errorList, true);

                if (!string.IsNullOrEmpty(_errorList))
                {

                    _salesDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                    _inventoryRepDAL.TransactionRollback();
                    _fmsInventoryDal.TransactionRollback();
                    _generalDAL.TransactionRollback();
                    _creditnotelist = "";
                    _inventorydoclist = "";
                    _diriya = "";
                    _invNo = "";
                    return -1;

                }

                //call public void CommonSaveInvoiceWithDeliveryOrder(InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, List<InvoiceSerial> _invoiceSerial, RecieptHeader _recieptHeader, List<RecieptItem> _recieptItem, InventoryHeader _inventoryHeader, List<ReptPickSerials> _pickSerial, List<ReptPickSerialsSub> _pickSubSerial, MasterAutoNumber _invoiceAuto, MasterAutoNumber _recieptAuto, MasterAutoNumber _inventoryAuto, bool _isDeliveryNow, out  string _invoiceNo, out string _receiptNo, out string _deliveryOrder, InventoryDAL _invDAL, SalesDAL _salDAL, ReptCommonDAL _invRepDAL, bool _isHold, bool _isHoldInvoiceProcess, out string _errorlist)

                if (string.IsNullOrEmpty(_creditNoteNoList))
                    _creditNoteNoList = "Issued Invoice : " + _pureInvoiceno;
                else
                    _creditNoteNoList += ",Issued Invoice : " + _pureInvoiceno;

                #endregion

                _creditNoteNoList += "Issue Receipts : -";

                //HP TRANSACTION AUTONUMBER
                MasterAutoNumber _transactionAuto = new MasterAutoNumber();
                _transactionAuto.Aut_cate_cd = _newAccount.Hpa_pc;
                _transactionAuto.Aut_cate_tp = "PC";
                _transactionAuto.Aut_direction = 1;
                _transactionAuto.Aut_modify_dt = null;
                _transactionAuto.Aut_moduleid = "HP";
                _transactionAuto.Aut_number = 0;
                _transactionAuto.Aut_start_char = "HPT";
                _transactionAuto.Aut_year = null;
                List<HpTransaction> _transactionList = new List<HpTransaction>();


                #region  Receipt Entry - for the new invoice
                if (receiptHeaderList != null)
                {
                    foreach (RecieptHeader _recieptHeader in receiptHeaderList)
                    {   //create MST_AUTO number for receipt table
                        string recType = _recieptHeader.Sar_receipt_type;
                        if (_recieptHeader.Sar_receipt_type == "HPRS")
                        {
                            _recieptHeader.Sar_receipt_type = "HPDPS";
                            receipAuto.Aut_start_char = "HPDPM";
                        }
                        else
                        {
                            _recieptHeader.Sar_receipt_type = "HPDPM";
                            receipAuto.Aut_start_char = "HPDPM";
                        }
                        _recieptHeader.Sar_receipt_date = _date;
                        _recieptHeader.Sar_anal_5 = _newAccount.Hpa_dp_comm;
                        _recieptHeader.Sar_is_oth_shop = false;
                        //receipAuto.Aut_year = _date.Year;
                        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(receipAuto.Aut_moduleid, receipAuto.Aut_direction, receipAuto.Aut_start_char, receipAuto.Aut_cate_tp, receipAuto.Aut_cate_cd, receipAuto.Aut_modify_dt, receipAuto.Aut_year);
                        string _cusNo = receipAuto.Aut_cate_cd + "-" + "HPDPM" + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(receipAuto);//update MST_AUTO table

                        _recieptHeader.Sar_receipt_no = _cusNo;

                        Int32 RecieptSeqNo = 0;
                        RecieptSeqNo = _inventoryDAL.GetSerialID(); //will be assign to header after looping transaction list.

                        Int32 line = 0;
                        foreach (RecieptItem _itm in receipItemList)
                        {
                            if (_recieptHeader.Sar_seq_no == _itm.Sard_seq_no)//have to check the prefix also?
                            {
                                line++;
                                _itm.Sard_seq_no = RecieptSeqNo;
                                _itm.Sard_line_no = line;
                                _itm.Sard_receipt_no = _recieptHeader.Sar_receipt_no;
                            }
                        }
                        _recieptHeader.Sar_seq_no = RecieptSeqNo;

                        _recieptHeader.Sar_esd_rate = 0;
                        _recieptHeader.Sar_epf_rate = 0;
                        _recieptHeader.Sar_wht_rate = 0;


                        HpTransaction _transaction = new HpTransaction();
                        _transaction.Hpt_acc_no = _newAccount.Hpa_acc_no;
                        _transaction.Hpt_ars = 0;
                        _transaction.Hpt_bal = 0;
                        _transaction.Hpt_txn_dt = _date;
                        _transaction.Hpt_com = _newAccount.Hpa_com;
                        _transaction.Hpt_crdt = _recieptHeader.Sar_tot_settle_amt;
                        _transaction.Hpt_cre_by = _newAccount.Hpa_cre_by;
                        _transaction.Hpt_cre_dt = _date;
                        _transaction.Hpt_dbt = 0;
                        _transaction.Hpt_txn_tp = _recieptHeader.Sar_receipt_type;
                        _transaction.Hpt_desc = "DOWN PAYMENT";
                        _transaction.Hpt_pc = _newAccount.Hpa_pc;
                        _transaction.Hpt_mnl_ref = _recieptHeader.Sar_prefix + "-" + _recieptHeader.Sar_manual_ref_no;
                        _transaction.Hpt_txn_ref = _recieptHeader.Sar_receipt_no;

                        _transactionList.Add(_transaction);

                        _salesDAL.SaveReceiptHeader(_recieptHeader);//save receipt header
                        MasterCompany _masterComp = _generalDAL.GetCompByCode(_recieptHeader.Sar_com_cd);  //kapila 27/4/2016
                        if (_masterComp.MC_IS_SCM2_FMS == 1)
                            _inventoryDAL.UpdateManualDocNo(_location, recType, Convert.ToInt32(_recieptHeader.Sar_manual_ref_no), _recieptHeader.Sar_receipt_no);//do the updation at the gnt_man_doc_dt
                        else
                            _fmsInventoryDal.UpdateManualDocNo(_location, recType, Convert.ToInt32(_recieptHeader.Sar_manual_ref_no), _recieptHeader.Sar_receipt_no);//do the updation at the gnt_man_doc_dt




                        if (string.IsNullOrEmpty(_creditNoteNoList))
                            _creditNoteNoList = " " + _cusNo;
                        else
                            _creditNoteNoList += ", " + _cusNo;

                        _recNo = _cusNo;
                    }
                }


                //save receipt detali list
                if (receipItemList != null)
                    if (receipItemList.Count > 0)
                        foreach (RecieptItem rec_itm in receipItemList)
                            _salesDAL.SaveReceiptItem(rec_itm);


                #endregion

                //Account Log EXI entry 
                //2013/01/29
                Int32 _otherSeqno = _inventoryDAL.GetSerialID();
                _accLog.Hal_invc_no = _crnote;
                _accLog.Hal_seq_no = _otherSeqno;
                _newAccount.Hpa_seq_no = _otherSeqno;

                #region  Re-schadule the hire sale history
                //ADDED 2013/01/29
                //HP Account Log EXO Entry
                _otherSeqno = _inventoryDAL.GetSerialID();


                HpAccount _acc = _salesDAL.GetHP_Account_onAccNo(_accLog.Hal_acc_no);

                //HP TRANSACTION OBEX RECORD

                if (_acc.Hpa_hp_val > _newAccount.Hpa_hp_val)
                {
                    HpTransaction _transaction = new HpTransaction();
                    _transaction.Hpt_acc_no = _newAccount.Hpa_acc_no;
                    _transaction.Hpt_ars = 0;
                    _transaction.Hpt_bal = 0;
                    _transaction.Hpt_com = _newAccount.Hpa_com;
                    _transaction.Hpt_crdt = _acc.Hpa_hp_val - _newAccount.Hpa_hp_val;
                    _transaction.Hpt_cre_by = _newAccount.Hpa_cre_by;
                    _transaction.Hpt_cre_dt = _date;
                    _transaction.Hpt_txn_tp = "OBEX";
                    _transaction.Hpt_desc = "Exchange Balance Adjustment";
                    _transaction.Hpt_pc = _newAccount.Hpa_pc;
                    _transaction.Hpt_txn_dt = _date;
                    _transactionList.Add(_transaction);

                }
                else
                {
                    HpTransaction _transaction = new HpTransaction();
                    _transaction.Hpt_acc_no = _newAccount.Hpa_acc_no;
                    _transaction.Hpt_ars = 0;
                    _transaction.Hpt_bal = 0;
                    _transaction.Hpt_com = _newAccount.Hpa_com;
                    _transaction.Hpt_dbt = _newAccount.Hpa_hp_val - _acc.Hpa_hp_val;
                    _transaction.Hpt_cre_by = _newAccount.Hpa_cre_by;
                    _transaction.Hpt_cre_dt = _date;
                    _transaction.Hpt_txn_dt = _date;
                    _transaction.Hpt_txn_tp = "OBEX";
                    _transaction.Hpt_desc = "Exchange Balance Adjustment";
                    _transaction.Hpt_pc = _newAccount.Hpa_pc;
                    _transactionList.Add(_transaction);
                }

                _salesDAL.UpdateResheduleAccLog(_pureInvoiceHdr.Sah_dt, _acc.Hpa_acc_no);

                HPAccountLog _accLogEXO = new HPAccountLog();
                _accLogEXO.Hal_seq_no = _inventoryDAL.GetSerialID();
                _accLogEXO.Hal_acc_no = _newAccount.Hpa_acc_no;
                _accLogEXO.Hal_af_val = _newAccount.Hpa_af_val;
                _accLogEXO.Hal_bank = _newAccount.Hpa_bank;
                _accLogEXO.Hal_buy_val = _newAccount.Hpa_buy_val;
                _accLogEXO.Hal_cash_val = _newAccount.Hpa_cash_val;
                _accLogEXO.Hal_cls_dt = _newAccount.Hpa_cls_dt;
                _accLogEXO.Hal_com = _newAccount.Hpa_com;
                _accLogEXO.Hal_cre_by = _newAccount.Hpa_cre_by;
                _accLogEXO.Hal_cre_dt = _newAccount.Hpa_cre_dt;
                _accLogEXO.Hal_dp_comm = _newAccount.Hpa_dp_comm;
                _accLogEXO.Hal_dp_val = _newAccount.Hpa_dp_val;
                _accLogEXO.Hal_ecd_stus = _newAccount.Hpa_ecd_stus;
                _accLogEXO.Hal_ecd_tp = _newAccount.Hpa_ecd_tp;
                _accLogEXO.Hal_flag = _newAccount.Hpa_flag;
                _accLogEXO.Hal_grup_cd = _newAccount.Hpa_grup_cd;
                _accLogEXO.Hal_hp_val = _newAccount.Hpa_hp_val;
                _accLogEXO.Hal_init_ins = _newAccount.Hpa_init_ins;
                _accLogEXO.Hal_init_ser_chg = _newAccount.Hpa_init_ser_chg;
                _accLogEXO.Hal_init_stm = _newAccount.Hpa_init_stm;
                _accLogEXO.Hal_init_vat = _newAccount.Hpa_init_vat;
                _accLogEXO.Hal_inst_comm = _newAccount.Hpa_inst_comm;
                _accLogEXO.Hal_inst_ins = _newAccount.Hpa_inst_ins;
                _accLogEXO.Hal_inst_ser_chg = _newAccount.Hpa_inst_ser_chg;
                _accLogEXO.Hal_inst_stm = _newAccount.Hpa_inst_stm;
                _accLogEXO.Hal_inst_vat = _newAccount.Hpa_inst_vat;
                _accLogEXO.Hal_intr_rt = _newAccount.Hpa_intr_rt;
                _accLogEXO.Hal_invc_no = _pureInvoiceno;
                _accLogEXO.Hal_is_rsch = _newAccount.Hpa_is_rsch;
                _accLogEXO.Hal_log_dt = _date;
                _accLogEXO.Hal_mgr_cd = _newAccount.Hpa_mgr_cd;
                _accLogEXO.Hal_net_val = _newAccount.Hpa_net_val;
                _accLogEXO.Hal_oth_chg = _newAccount.Hpa_oth_chg;
                _accLogEXO.Hal_pc = _newAccount.Hpa_pc;
                _accLogEXO.Hal_rev_stus = false;
                _accLogEXO.Hal_rls_dt = _newAccount.Hpa_rls_dt;
                _accLogEXO.Hal_rsch_dt = _newAccount.Hpa_rsch_dt;
                _accLogEXO.Hal_rv_dt = _newAccount.Hpa_rv_dt;
                _accLogEXO.Hal_sa_sub_tp = "EXO";
                _accLogEXO.Hal_sch_cd = _newAccount.Hpa_sch_cd;
                _accLogEXO.Hal_sch_tp = _newAccount.Hpa_sch_tp;
                _accLogEXO.Hal_seq = _newAccount.Hpa_seq;
                _accLogEXO.Hal_ser_chg = _newAccount.Hpa_ser_chg;
                _accLogEXO.Hal_stus = _newAccount.Hpa_stus;
                _accLogEXO.Hal_tc_val = _newAccount.Hpa_tc_val;
                _accLogEXO.Hal_term = _newAccount.Hpa_term;
                _accLogEXO.Hal_tot_intr = _newAccount.Hpa_tot_intr;
                _accLogEXO.Hal_tot_vat = _newAccount.Hpa_tot_vat;
                _accLogEXO.Hal_val_01 = _newAccount.Hpa_val_01;
                _accLogEXO.Hal_val_02 = _newAccount.Hpa_val_02;
                _accLogEXO.Hal_val_03 = _newAccount.Hpa_val_03;
                _accLogEXO.Hal_val_04 = _newAccount.Hpa_val_04;
                _accLogEXO.Hal_val_05 = _newAccount.Hpa_val_05;
                _accLogEXO.Hal_init_stm = _newAccount.Hpa_init_stm;
                _accLogEXO.Hal_inst_stm = _newAccount.Hpa_inst_stm;
                _accLogEXO.Hpa_acc_cre_dt = _newAccount.Hpa_acc_cre_dt.Date;


                _salesDAL.SaveHPAccountLog(_accLog);
                //Comment by darshana 29-05-2014 - After discuss with Mr. dilanda 
                //_salesDAL.UpdateResheduleAccLog(_date.Date, _accLog.Hal_acc_no);
                _salesDAL.UpdateAccLogClsDt(_date.Date, _accLog.Hal_acc_no, _accLog.Hal_com);

                _accLog.Hal_seq_no = _otherSeqno;
                _newAccount.Hpa_seq_no = _otherSeqno;
                _salesDAL.SaveHPAccountLog(_accLogEXO);
                _salesDAL.UpdateHPAccountReschedule(_newAccount);
                // _salesDAL.SaveHPAccount(_newAccount);
                //END


                foreach (HpSheduleDetails sch in _currentSchedule)
                {
                    HpScheduleDetailLog _log = new HpScheduleDetailLog();
                    _log.Hsh_acc_no = sch.Hts_acc_no;
                    _log.Hsh_cre_by = sch.Hts_cre_by;
                    _log.Hsh_cre_dt = sch.Hts_cre_dt;
                    _log.Hsh_dt = DateTime.Now;
                    _log.Hsh_due_dt = sch.Hts_due_dt;
                    _log.Hsh_ins = sch.Hts_ins;
                    _log.Hsh_intr = sch.Hts_intr;
                    _log.Hsh_rnt_no = sch.Hts_rnt_no;
                    _log.Hsh_rnt_val = sch.Hts_rnt_val;
                    _log.Hsh_sdt = sch.Hts_sdt;
                    _log.Hsh_seq = _inventoryDAL.GetSerialID();
                    _log.Hsh_ser = sch.Hts_ser;
                    _log.Hsh_vat = sch.Hts_vat;

                    _salesDAL.SaveHPScheduleLog(_log);
                }


                //delete
                _salesDAL.DeleteHPSchedule(_acc.Hpa_acc_no);
                foreach (HpSheduleDetails sch in _newSchedule)
                {
                    sch.Hts_seq = _inventoryDAL.GetSerialID();
                    _salesDAL.SaveHpShedule(sch);
                }



                //insert hpinsurance
                if (_insurance != null)
                {
                    //add reverse
                    HpInsurance _insu = _salesDAL.GetLatestInsurance(_insurance.Hti_acc_num);
                    if (_insu != null)
                    {
                        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_insuranceAuto.Aut_moduleid, _insuranceAuto.Aut_direction, _insuranceAuto.Aut_start_char, _insuranceAuto.Aut_cate_tp, _insuranceAuto.Aut_cate_cd, _insuranceAuto.Aut_modify_dt, _insuranceAuto.Aut_year);
                        string _cusNo = _insuranceAuto.Aut_cate_cd + "-" + _insuranceAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_insuranceAuto);
                        _insu.Hti_seq = _inventoryDAL.GetSerialID();
                        _insu.Hti_ref = _cusNo;
                        _insu.Hit_is_rvs = true;
                        _insu.Hti_mnl_num = _cusNo;
                        _insu.Hti_dt = _date.Date;
                        _salesDAL.Save_HpInsu(_insu);
                    }


                    MasterAutoNumber _number1 = _inventoryDAL.GetAutoNumber(_insuranceAuto.Aut_moduleid, _insuranceAuto.Aut_direction, _insuranceAuto.Aut_start_char, _insuranceAuto.Aut_cate_tp, _insuranceAuto.Aut_cate_cd, _insuranceAuto.Aut_modify_dt, _insuranceAuto.Aut_year);
                    string _cusNo1 = _insuranceAuto.Aut_cate_cd + "-" + _insuranceAuto.Aut_start_char + "-" + _number1.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_insuranceAuto);

                    _insurance.Hti_seq = _inventoryDAL.GetSerialID();
                    _insurance.Hti_ref = _cusNo1;
                    _insurance.Hti_mnl_num = _cusNo1;
                    _salesDAL.Save_HpInsu(_insurance);
                    _diriya = _cusNo1;
                }
                else
                {
                    _diriya = "";
                }

                #endregion


                #region save hptransaction

                if (_transactionList != null && _transactionList.Count > 0)
                {
                    foreach (HpTransaction _transaction in _transactionList)
                    {
                        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_transactionAuto.Aut_moduleid, _transactionAuto.Aut_direction, _transactionAuto.Aut_start_char, _transactionAuto.Aut_cate_tp, _transactionAuto.Aut_cate_cd, _transactionAuto.Aut_modify_dt, _transactionAuto.Aut_year);
                        string _cusNo1 = _transactionAuto.Aut_cate_cd + "-" + _transactionAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_transactionAuto);//update MST_AUTO table
                        _transaction.Hpt_seq = _inventoryDAL.GetSerialID();
                        _transaction.Hpt_ref_no = _cusNo1;

                        _salesDAL.Save_HpTransaction(_transaction);
                    }
                }

                #endregion

                //ADDED 2013/05/31
                //REQUEST FINISH
                _generalDAL.UpdateApprovalStatus(_request);


                //_salesDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                //_inventoryRepDAL.ConnectionClose();
                //_fmsInventoryDal.ConnectionClose();
                //_generalDAL.ConnectionClose();

                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();
                _generalDAL.TransactionCommit();
                _effect = 1;
                _creditnotelist = _creditNoteNoList;
                _inventorydoclist = _inventoryDocumentList;
                _invNo = _pureInvoiceno;
                if (string.IsNullOrEmpty(_recNo))
                {
                    _recNo = "";
                }

            }
            catch (Exception ex)
            {
                _effect = -1;
                _creditnotelist = "";
                _inventorydoclist = "";
                _invNo = "";
                _diriya = "";
                _recNo = "";
            }

            return _effect;
        }

        public Int32 SaveExchangeOutHP(DateTime _date, string _accountno, string _company, string _location, string _profitcenter, string _createdBy, string _inSubType, string _outSubType, List<ReptPickSerials> _list, List<ReptPickSerials> _outList, List<InvoiceItem> _outPureInvoiceItem, List<RecieptHeader> receiptHeaderList, List<RecieptItem> receipItemList, MasterAutoNumber receipAuto, out string _creditnotelist, out string _inventorydoclist, HPAccountLog _accLog, HpAccount _newAccount, List<HpSheduleDetails> _currentSchedule, List<HpSheduleDetails> _newSchedule, HpInsurance _insurance, MasterAutoNumber _insuranceAuto, RequestApprovalHeader _request, out string _diriya, out string _invNo, out string _recNo, InventoryHeader _ccInv, MasterAutoNumber _invAuto, InventoryHeader _buybackheader, MasterAutoNumber _buybackauto, List<ReptPickSerials> _buybacklist, string _outInv, string _out_do, Int32 _isNew, List<HpTransaction> _trans)
        {
            Int32 _effect = 0;

            //----------------IN items----------------

            //Check the serial list divide to status of the IN list as Delivered/Forward status + DO No + Invoice no
            //if the Tus_ser_id =0 + Invoice no then its a forward sales (Credit Note only (HS-EXI))
            //if the Tus_ser_id=1 and need to check with the DO, if the DO is same its goes to single SRN
            //If its differ then there are multiple SRN's as per the count of DO's (SRN with Credit Note)

            //----------------OUT items----------------

            //The total OUT items should save as Invoice with the reference of the account no. (HS-EXO)
            //and the as per the reply of the customer, should raise DO

            //----------------Account----------------

            //Save the Whole current account to LOG with Sales Type - EXI
            //New Trial Calculation will be update to the Hpt_Acc table and the Sales Type - EXO
            //In Hpt_Sch, save the current to the HPT_Sch_Log
            //write the new schdule to the Hpt_sch
            // Term         Current Value           New Value           Save Process        paid status
            // 1            1000                    1200                1000                1
            // 2            1000                    1200                1000                1
            // 3            1000                    1200                1200+400 x          0   <- term 1,2 remain as it is and the balance will add to the next term as total
            // 4            1000                    1200                1200 x              0   <- term will be as the new calcullated term
            // 5            1000                    1200                1200 x              0   <- term will be as the new calcullated term
            //--------------------------------------* New Value = Amount Finance + Interest Amount / Terms
            //Save Receipt Entry with the type HPDPS

            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            _inventoryRepDAL = new ReptCommonDAL();
            _fmsInventoryDal = new FMS_InventoryDAL();
            _generalDAL = new GeneralDAL();
            string _inventoryDocumentList = string.Empty;
            string _creditNoteNoList = string.Empty;
            _recNo = "";
            string _outInvoice = "";
            string _outDO = "";
            string _invoiceNo = "";
            string _orgInvoiceNo = "";

            string _outInvoiceForDuplicate = string.Empty;

            try
            {
                _salesDAL.ConnectionOpen(); _salesDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen(); _inventoryDAL.BeginTransaction();
                _inventoryRepDAL.ConnectionOpen(); _inventoryRepDAL.BeginTransaction();
                _fmsInventoryDal.ConnectionOpen(); _fmsInventoryDal.BeginTransaction();
                _generalDAL.ConnectionOpen(); _generalDAL.BeginTransaction();

                //------------------------------------EXI---------------------------------------
                #region new method

                foreach (ReptPickSerials _doc in _list)
                {
                    _outInvoice = Convert.ToString(_doc.Tus_base_doc_no);
                    _outDO = Convert.ToString(_doc.Tus_doc_no);
                }

                if (_outInvoice == "")
                {
                    _outInvoice = _outInv;
                    _outDO = _out_do;
                }

                _list.RemoveAll(item => item.Tus_batch_line == -1);
                #region SRN
                MasterAutoNumber _auto = new MasterAutoNumber();
                _auto.Aut_cate_cd = _profitcenter; //_hpReversInvoiceHeader.Sah_pc;
                _auto.Aut_cate_tp = "PC";
                _auto.Aut_direction = 0;
                _auto.Aut_moduleid = "REV";
                _auto.Aut_start_char = "INREV";
                _auto.Aut_year = null;
                string _srnNo = "";

                ////ADDED BY SACHITH
                ////2013/04/05
                ////FOR SRN AND DO
                //Invoice Header - Invoice Item - invoice Auto Number
                InvoiceHeader _hpReversInvoiceHeader = _salesDAL.GetInvoiceHeader(_outInvoice);
                _hpReversInvoiceHeader.Sah_dt = _date.Date;
                _hpReversInvoiceHeader.Sah_inv_no = string.Empty;
                _hpReversInvoiceHeader.Sah_tp = "REV";
                _hpReversInvoiceHeader.Sah_inv_sub_tp = _inSubType;
                _hpReversInvoiceHeader.Sah_direct = false;
                _hpReversInvoiceHeader.Sah_pc = _profitcenter;
                _hpReversInvoiceHeader.Sah_stus = "D";//updated 2013/01/29 
                _hpReversInvoiceHeader.Sah_cre_by = _createdBy;
                _hpReversInvoiceHeader.Sah_cre_when = DateTime.Now;
                _hpReversInvoiceHeader.Sah_mod_by = _createdBy;
                _hpReversInvoiceHeader.Sah_mod_when = DateTime.Now;
                _hpReversInvoiceHeader.Sah_del_loc = _location;
                _hpReversInvoiceHeader.Sah_ref_doc = _outInvoice;
                _hpReversInvoiceHeader.Sah_anal_10 = 0;


                List<InventorySerialN> _diliverserials = _inventoryDAL.GetDeliveredSerialDetail(_company, _outInvoice);
                ////List hold delivered invoice items
                List<InvoiceItem> _srnInvoiceItem = new List<InvoiceItem>();
                ////list hold delivered inventory serials
                List<ReptPickSerials> _reptSer = new List<ReptPickSerials>();
                List<InvoiceItem> _temp = _salesDAL.GetInvoiceDetailByInvoice(_outInvoice);
                if (_isNew == 0)
                {
                    if (_diliverserials != null && _diliverserials.Count > 0)
                    {
                        foreach (InventorySerialN inv in _diliverserials)
                        {
                            //List<InvoiceItem> invIte = _temp.Where(x => x.Sad_itm_cd == inv.Ins_itm_cd  ).ToList<InvoiceItem>(); Nadeeka 09-09-2015(Fixed Similar item issue)
                            List<InvoiceItem> invIte = _temp.Where(x => x.Sad_itm_cd == inv.Ins_itm_cd || x.Sad_sim_itm_cd == inv.Ins_itm_cd).ToList<InvoiceItem>();
                            if (invIte != null && invIte.Count > 0)
                            {
                                if (invIte[0].Sad_do_qty > 0)
                                {

                                    invIte[0].Sad_srn_qty = invIte[0].Sad_do_qty;
                                    invIte[0].Sad_fws_ignore_qty = invIte[0].Sad_do_qty;
                                    invIte[0].Sad_do_qty = 0;
                                }
                                else
                                {
                                    invIte[0].Sad_do_qty = 0;
                                    invIte[0].Sad_fws_ignore_qty = invIte[0].Sad_qty;
                                    invIte[0].Sad_srn_qty = invIte[0].Sad_qty;
                                }
                                _srnInvoiceItem.Add(invIte[0]);
                                string bin = _inventoryDAL.GetDefaultBinCode(_company, _profitcenter);
                                List<ReptPickSerials> serial = _inventoryDAL.GetInvoiceSerialForReversal(_company, "", "", "", bin, _outInvoice, invIte[0].Sad_itm_line);
                                if (serial != null)
                                    _reptSer.AddRange(serial);
                            }
                        }
                    }
                }

                foreach (ReptPickSerials _ser in _reptSer)
                {
                    if (_outList != null)
                    {
                        foreach (ReptPickSerials _inSer in _outList)
                        {
                            if (_inSer.Tus_itm_cd == _ser.Tus_itm_cd && _inSer.Tus_ser_1 == _ser.Tus_ser_1)
                            {
                                _ser.Tus_itm_stus = _inSer.Tus_itm_stus;
                                _ser.Tus_unit_cost = _inSer.Tus_unit_cost;
                            }
                        }
                    }
                }

                #region Check Main Unit Replace Serial Exist :: Add by Chamal 16-Jul-2015
                foreach (ReptPickSerials _ser in _reptSer)
                {
                    if (!string.IsNullOrEmpty(_ser.Tus_ser_1))
                    {
                        if (_ser.Tus_ser_1.ToString().ToUpper() != "N/A")
                        {
                            List<Warr_Replacement_Det> _replList = _inventoryDAL.GetWarrReplDetails(_ser.Tus_itm_cd, _ser.Tus_ser_1, "C");
                            if (_replList != null && _replList.Count > 0)
                            {
                                //_effect = -1; //Commented As per the mail sent by Mr. Indrajith on 27 January 2018 2:58 PM
                                //_creditnotelist = "";
                                //_inventorydoclist = "";
                                //_invNo = "";
                                //_diriya = "";
                                //_recNo = "Warranty replacement found for item code - " + _ser.Tus_itm_cd + " | serial no - " + _ser.Tus_ser_1 + "/nYou can't process this exchange!";
                                //_salesDAL.TransactionRollback();
                                //_inventoryDAL.TransactionRollback();
                                //_inventoryRepDAL.TransactionRollback();
                                //_fmsInventoryDal.TransactionRollback();
                                //_generalDAL.TransactionRollback();
                                //return _effect;
                            }
                            _replList = new List<Warr_Replacement_Det>();
                            _replList = _inventoryDAL.GetWarrReplDetails(_ser.Tus_itm_cd, _ser.Tus_ser_1, "M");
                            if (_replList != null && _replList.Count > 0)
                            {
                                var _maxItms = _replList.Max(y => y.Swr_seq);
                                var _replList2 = _replList.Where(x => x.Swr_seq == _maxItms).Select(x => x.Swr_n_itm_ser).Distinct().ToList();
                                _ser.Tus_ser_1 = _replList2[0].ToString();
                            }
                        }
                    }
                }
                #endregion


                InvoiceHeader _srnInv = new InvoiceHeader();
                _srnInv = _hpReversInvoiceHeader;

                ////END
                ////SRN save if have delivered item
                if (_srnInvoiceItem.Count > 0)
                {
                    InventoryHeader _inventoryHeader = new InventoryHeader();
                    _inventoryHeader.Ith_com = _hpReversInvoiceHeader.Sah_com;
                    _inventoryHeader.Ith_loc = _hpReversInvoiceHeader.Sah_pc;
                    _inventoryHeader.Ith_pc = _hpReversInvoiceHeader.Sah_pc;
                    DateTime _docDate = _hpReversInvoiceHeader.Sah_dt;
                    _inventoryHeader.Ith_doc_date = _docDate;
                    _inventoryHeader.Ith_doc_year = _docDate.Year;
                    _inventoryHeader.Ith_oth_docno = _diliverserials[0].Ins_doc_no;
                    _inventoryHeader.Ith_direct = true;
                    _inventoryHeader.Ith_doc_tp = "SRN";
                    _inventoryHeader.Ith_cate_tp = "NOR";
                    _inventoryHeader.Ith_bus_entity = "";
                    _inventoryHeader.Ith_is_manual = false;
                    _inventoryHeader.Ith_manual_ref = "";
                    _inventoryHeader.Ith_sub_tp = "";
                    _inventoryHeader.Ith_remarks = "";
                    _inventoryHeader.Ith_stus = "A";
                    _inventoryHeader.Ith_cre_by = _hpReversInvoiceHeader.Sah_cre_by;
                    _inventoryHeader.Ith_cre_when = DateTime.Now;
                    _inventoryHeader.Ith_mod_by = _hpReversInvoiceHeader.Sah_cre_by;
                    _inventoryHeader.Ith_mod_when = DateTime.Now;
                    _inventoryHeader.Ith_acc_no = _hpReversInvoiceHeader.Sah_acc_no;



                    _hpReversInvoiceHeader.Sah_inv_tp = "HS";
                    _hpReversInvoiceHeader.Sah_inv_sub_tp = "EXI";
                    _hpReversInvoiceHeader.Sah_direct = false;
                    _hpReversInvoiceHeader.Sah_ref_doc = _outInvoice;
                    _hpReversInvoiceHeader.Sah_anal_10 = 0;


                    MasterAutoNumber _inventoryauto = new MasterAutoNumber();
                    _inventoryauto.Aut_cate_cd = _location;
                    _inventoryauto.Aut_cate_tp = "LOC";
                    _inventoryauto.Aut_direction = 1;
                    _inventoryauto.Aut_moduleid = "SRN";
                    _inventoryauto.Aut_start_char = "SRN";

                    //  _inventoryHeader.Ith_session_id = BaseCls.GlbUserSessionID;
                    //_reptDAL.StartTimeModule("CC", "SaveReversalForCommon_START", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                    if (_isNew == 1)
                    {
                        DataTable _receiveserial = _salesDAL.GetDPExchangeSerial(_request.Grah_com, _request.Grah_oth_pc, _request.Grah_loc, _request.Grah_app_tp, _request.Grah_ref);
                        foreach (DataRow _r in _receiveserial.Rows)
                        {
                            Int32 serid = 0;
                            serid = Convert.ToInt32(_r.Field<decimal>("gras_anal6"));
                            _reptSer.RemoveAll(item => item.Tus_itm_cd == _r.Field<string>("gras_anal2") && item.Tus_ser_id == serid && item.Tus_ser_1 == _r.Field<string>("gras_anal3"));

                        }
                    }

                    SaveReversalForCommon(_hpReversInvoiceHeader, _srnInvoiceItem, _auto, true, out   _invoiceNo, _inventoryHeader, _reptSer, null, _inventoryauto, out  _srnNo);
                    // _reptDAL.StartTimeModule("CC", "SaveReversalForCommon_END", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                    //CommonSaveReversal(_srnInv, _srnInvoiceItem, _auto, false, out _srnNo);
                    //Int32 _newSeq = _inventoryDAL.GetSerialID();
                    //_hpReversInvoiceHeader.Sah_seq_no = _newSeq;

                    //_hpReversInvoiceHeader.Sah_man_ref = _srnNo;
                    _orgInvoiceNo = _hpReversInvoiceHeader.Sah_ref_doc;
                    _hpReversInvoiceHeader.Sah_ref_doc = _diliverserials[0].Ins_doc_no;


                    //ADDED 2013/06/13
                    if (!string.IsNullOrEmpty(_srnNo))
                    {
                        _salesDAL.UpdateInvoiceRevNo(_invoiceNo, _srnNo);
                    }
                    //END


                    //UPDATE 2013/04/29
                    //SAVE NON DILIVERD ITEMS TO SAT_ITM TABLE
                    foreach (InvoiceItem _itm in _temp)
                    {

                        string bin1 = _inventoryDAL.GetDefaultBinCode(_company, _profitcenter);
                        List<ReptPickSerials> serial1 = _inventoryDAL.GetInvoiceSerialForReversal(_company, "", "", "", bin1, _outInvoice, _itm.Sad_itm_line);
                        if (serial1 != null)
                            _reptSer.AddRange(serial1);

                        List<ReptPickSerials> serial = (from _res in _reptSer
                                                        where _res.Tus_itm_cd == _itm.Sad_itm_cd || _res.Tus_itm_cd == _itm.Sad_sim_itm_cd
                                                        select _res).ToList<ReptPickSerials>();
                        if (serial == null || serial.Count <= 0)
                        {
                            _itm.Sad_seq_no = _hpReversInvoiceHeader.Sah_seq_no;
                            _itm.Sad_itm_line = _itm.Sad_itm_line;
                            _itm.Sad_inv_no = Convert.ToString(_invoiceNo);
                            _salesDAL.SaveSalesItem(_itm);


                            List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                            _itmTax = _salesDAL.GetItemTax(_hpReversInvoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                            foreach (MasterItemTax _one in _itmTax)
                            {
                                InvoiceItemTax _tax = new InvoiceItemTax();
                                _tax.Satx_inv_no = _itm.Sad_inv_no;
                                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                _tax.Satx_itm_line = _itm.Sad_itm_line;
                                _tax.Satx_itm_tax_amt = (_itm.Sad_unit_rt * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                _tax.Satx_job_line = 0;
                                _tax.Satx_job_no = "";
                                _tax.Satx_seq_no = _itm.Sad_seq;
                                _salesDAL.SaveSalesItemTax(_tax);
                            }
                            //_invoiceLine += 1;
                            _salesDAL.UpdateInvRevQty(_orgInvoiceNo, _itm.Sad_itm_cd, _itm.Sad_qty, _itm.Sad_itm_line, _itm.Sad_qty);
                        }

                        //if (_fwsQty < 0)
                        //{
                        //    _fwsQty = 0;
                        //}


                    }
                    //END

                }
                else
                {
                    //Save Invoice Header
                    _hpReversInvoiceHeader.Sah_ref_doc = _outInvoice;
                    _hpReversInvoiceHeader.Sah_inv_tp = "HS";
                    _hpReversInvoiceHeader.Sah_inv_sub_tp = "EXI";
                    _hpReversInvoiceHeader.Sah_direct = false;
                    _hpReversInvoiceHeader.Sah_anal_10 = 0;
                    Int32 InvoiceSeqNo = _inventoryDAL.GetSerialID();
                    _hpReversInvoiceHeader.Sah_seq_no = InvoiceSeqNo;
                    _hpReversInvoiceHeader.Sah_inv_no = Convert.ToString(InvoiceSeqNo);
                    //_salesDAL.SaveSalesHeader(_hpReversInvoiceHeader);

                    _temp.ForEach(x => x.Sad_srn_qty = x.Sad_qty);

                    SaveReversalForCommon(_hpReversInvoiceHeader, _temp, _auto, true, out   _invoiceNo, null, null, null, null, out  _srnNo);

                    _orgInvoiceNo = _hpReversInvoiceHeader.Sah_ref_doc;

                    //Save Invoice Items
                    //foreach (InvoiceItem _itm in _temp)
                    //{

                    ////    _itm.Sad_seq_no = _hpReversInvoiceHeader.Sah_seq_no;
                    ////    _itm.Sad_itm_line = _itm.Sad_itm_line;
                    ////    _itm.Sad_inv_no = Convert.ToString(_hpReversInvoiceHeader.Sah_seq_no);
                    ////    _salesDAL.SaveSalesItem(_itm);


                    ////    List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                    ////    _itmTax = _salesDAL.GetItemTax(_hpReversInvoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                    ////    foreach (MasterItemTax _one in _itmTax)
                    ////    {
                    ////        InvoiceItemTax _tax = new InvoiceItemTax();
                    ////        _tax.Satx_inv_no = _itm.Sad_inv_no;
                    ////        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                    ////        _tax.Satx_itm_line = _itm.Sad_itm_line;
                    ////        _tax.Satx_itm_tax_amt = (_itm.Sad_unit_rt * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                    ////        _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                    ////        _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                    ////        _tax.Satx_job_line = 0;
                    ////        _tax.Satx_job_no = "";
                    ////        _tax.Satx_seq_no = _itm.Sad_seq;
                    ////        _salesDAL.SaveSalesItemTax(_tax);
                    ////    }
                    ////    // _invoiceLine += 1;
                    //    _salesDAL.UpdateInvRevQty(_orgInvoiceNo, _itm.Sad_itm_cd, _itm.Sad_qty, _itm.Sad_itm_line, _itm.Sad_qty);
                    //}
                }

                #endregion

                #endregion

                _salesDAL.UpdateInvoiceRevStatus(_orgInvoiceNo);

                #region Revers Entries
                //string _crnote = string.Empty;
                //string _srnno = string.Empty;
                //string _outInvoice = "";
                //bool _isForwardSale = true;
                //string _outDO = "";
                //foreach (ReptPickSerials _doc in _list)
                //{
                //    _isForwardSale = Convert.ToInt32(_doc.Tus_ser_id) == 0 ? true : false;
                //    _outInvoice = Convert.ToString(_doc.Tus_base_doc_no);
                //    _outDO = Convert.ToString(_doc.Tus_doc_no);
                //    if (string.IsNullOrEmpty(_outInvoiceForDuplicate)) _outInvoiceForDuplicate = _outInvoice;
                //    if (!_isForwardSale)
                //        break;
                //}
                //if (_isForwardSale)//revers the invoice only (Credit Note)
                //{

                //    var _CreditNoteList = (from _one in _outList where _one.Tus_base_doc_no == _outInvoice && _one.Tus_ser_id == 0 select _one).ToList();

                //    //Invoice Header - Invoice Item - invoice Auto Number
                //    InvoiceHeader _hdr = _salesDAL.GetInvoiceHeader(_outInvoice);
                //    _hdr.Sah_dt = _date.Date;
                //    _hdr.Sah_inv_no = string.Empty;
                //    _hdr.Sah_tp = "REV";
                //    _hdr.Sah_inv_sub_tp = _inSubType;
                //    _hdr.Sah_direct = false;
                //    _hdr.Sah_pc = _profitcenter;
                //    _hdr.Sah_stus = "D";//updated 2013/01/29 
                //    _hdr.Sah_cre_by = _createdBy;
                //    _hdr.Sah_cre_when = DateTime.Now;
                //    _hdr.Sah_mod_by = _createdBy;
                //    _hdr.Sah_mod_when = DateTime.Now;
                //    _hdr.Sah_del_loc = _location;
                //    //added 2013/08/06
                //    _hdr.Sah_ref_doc = _outInvoice;
                //    _hdr.Sah_anal_10 = 0;

                //    List<InvoiceItem> _itm = _salesDAL.GetInvoiceDetailByInvoice(_outInvoice);
                //    MasterAutoNumber _auto = new MasterAutoNumber();
                //    string _prefix = _salesDAL.GetInvoicePrefix(_company, _profitcenter, "HS");
                //    _auto.Aut_cate_cd = _profitcenter;
                //    _auto.Aut_cate_tp = "PC";
                //    _auto.Aut_direction = 0;
                //    _auto.Aut_moduleid = "REV";
                //    _auto.Aut_start_char = "INREV";
                //    _auto.Aut_year = null;

                //    List<InvoiceItem> _invItemSaveList = new List<InvoiceItem>();
                //    foreach (ReptPickSerials _Itm in _CreditNoteList)
                //    {
                //        var _outinvItem = (from _l in _itm where _l.Sad_itm_line == _Itm.Tus_base_itm_line select _l).ToList();
                //        _outinvItem.ForEach(x => { x.Sad_do_qty = 1; x.Sad_srn_qty = 1; });

                //        _invItemSaveList.AddRange(_outinvItem);
                //    }


                //    CommonSaveReversal(_hdr, _invItemSaveList, _auto, false, out _crnote);

                //    if (string.IsNullOrEmpty(_creditNoteNoList))
                //        _creditNoteNoList = _crnote;
                //    else
                //        _creditNoteNoList += "," + _crnote;

                //    //call CommonSaveReversal()
                //}
                //else//Raise revers invoice (Credit Note) with SRN 
                //{

                //    var _SRNList = (from _one in _outList where _one.Tus_base_doc_no == _outInvoice && _one.Tus_doc_no == _outDO && _one.Tus_ser_id > 0 select _one).ToList();

                //    //Invoice header/Invoice Item/invoice auto number/inventory header/pick serial/pick serial sub/inventoru auto
                //    InvoiceHeader _hdr = _salesDAL.GetInvoiceHeader(_outInvoice);
                //    _hdr.Sah_dt = _date.Date;
                //    _hdr.Sah_inv_no = string.Empty;
                //    _hdr.Sah_inv_sub_tp = _inSubType;
                //    _hdr.Sah_direct = false;
                //    _hdr.Sah_pc = _profitcenter;
                //    _hdr.Sah_stus = "A";
                //    _hdr.Sah_cre_by = _createdBy;
                //    _hdr.Sah_cre_when = DateTime.Now;
                //    _hdr.Sah_mod_by = _createdBy;
                //    _hdr.Sah_mod_when = DateTime.Now;
                //    _hdr.Sah_ref_doc = _outInvoice;
                //    _hdr.Sah_anal_10 = 0;

                //    List<InvoiceItem> _itm = _salesDAL.GetInvoiceDetailByInvoice(_outInvoice);
                //    MasterAutoNumber _auto = new MasterAutoNumber();
                //    string _prefix = _salesDAL.GetInvoicePrefix(_company, _profitcenter, "HS");
                //    _auto.Aut_cate_cd = _profitcenter;
                //    _auto.Aut_cate_tp = "PC";
                //    _auto.Aut_direction = 0;
                //    _auto.Aut_moduleid = "REV";
                //    _auto.Aut_start_char = "INREV";
                //    _auto.Aut_year = null;

                //    List<InvoiceItem> _invItemSaveList = new List<InvoiceItem>();
                //    foreach (ReptPickSerials _Itm in _SRNList)
                //    {
                //        var _outinvItem = (from _l in _itm where _l.Sad_itm_line == _Itm.Tus_base_itm_line select _l).ToList();
                //        // _outinvItem.ForEach(x => { x.Sad_do_qty = 1; x.Sad_srn_qty = 1; });

                //        _invItemSaveList.AddRange(_outinvItem);
                //    }

                //    InventoryHeader _inventoryHeader = new InventoryHeader();
                //    _inventoryHeader.Ith_acc_no = _accountno;
                //    _inventoryHeader.Ith_com = _company;
                //    _inventoryHeader.Ith_cre_by = _createdBy;
                //    _inventoryHeader.Ith_cre_when = DateTime.Now;
                //    _inventoryHeader.Ith_direct = true;
                //    _inventoryHeader.Ith_doc_date = _date.Date;
                //    _inventoryHeader.Ith_doc_tp = "SRN";
                //    _inventoryHeader.Ith_doc_year = _date.Year;
                //    _inventoryHeader.Ith_loc = _location;
                //    _inventoryHeader.Ith_mod_by = _createdBy;
                //    _inventoryHeader.Ith_mod_when = DateTime.Now;
                //    _inventoryHeader.Ith_pc = _profitcenter;
                //    _inventoryHeader.Ith_stus = "A";
                //    _inventoryHeader.Ith_cate_tp = "NOR";
                //    _inventoryHeader.Ith_sub_tp = "NORMAL";
                //    _inventoryHeader.Ith_entry_no = _outInvoice;
                //    _inventoryHeader.Ith_manual_ref = _outDO;
                //    _inventoryHeader.Ith_oth_docno = _outDO;

                //    MasterAutoNumber _inventoryauto = new MasterAutoNumber();
                //    _inventoryauto.Aut_cate_cd = _location;
                //    _inventoryauto.Aut_cate_tp = "LOC";
                //    _inventoryauto.Aut_direction = 1;
                //    _inventoryauto.Aut_moduleid = "SRN";
                //    _inventoryauto.Aut_start_char = "SRN";

                //    foreach (InvoiceItem item in _invItemSaveList)
                //    {
                //        if (item.Sad_do_qty > 0)
                //        {

                //            item.Sad_srn_qty = item.Sad_do_qty;
                //            item.Sad_fws_ignore_qty = item.Sad_do_qty;
                //            item.Sad_do_qty = 0;

                //        }
                //        else
                //        {
                //            item.Sad_do_qty = 0;
                //            item.Sad_fws_ignore_qty = item.Sad_qty;
                //            item.Sad_srn_qty = item.Sad_qty;
                //        }
                //    }


                //    SaveReversalForCommon(_hdr, _invItemSaveList, _auto, false, out _crnote, _inventoryHeader, _SRNList, null, _inventoryauto, out _srnno);


                //    //ADDED 2013/06/20
                //    if (!string.IsNullOrEmpty(_srnno))
                //    {
                //        _salesDAL.UpdateInvoiceRevNo(_crnote, _srnno);
                //    }

                //    //call SaveReversal()
                //    if (string.IsNullOrEmpty(_creditNoteNoList))
                //        _creditNoteNoList = _crnote;
                //    else
                //        _creditNoteNoList += "," + _crnote;

                //    if (string.IsNullOrEmpty(_inventoryDocumentList))
                //        _inventoryDocumentList = _srnno;

                //}




                #endregion

                //------------------------------------EXO---------------------------------------
                #region  Invoice Entry

                InvoiceHeader _pureInvoiceHdr = _salesDAL.GetInvoiceHeader(_outInvoice);
                _pureInvoiceHdr.Sah_dt = _date.Date;
                _pureInvoiceHdr.Sah_inv_no = string.Empty;
                _pureInvoiceHdr.Sah_inv_sub_tp = _outSubType;
                _pureInvoiceHdr.Sah_direct = true;
                _pureInvoiceHdr.Sah_pc = _profitcenter;
                _pureInvoiceHdr.Sah_stus = "A";
                _pureInvoiceHdr.Sah_cre_by = _createdBy;
                _pureInvoiceHdr.Sah_cre_when = DateTime.Now;
                _pureInvoiceHdr.Sah_mod_by = _createdBy;
                _pureInvoiceHdr.Sah_mod_when = DateTime.Now;
                _pureInvoiceHdr.Sah_anal_10 = 0;
                _pureInvoiceHdr.Sah_del_loc = _location;
                _pureInvoiceHdr.Sah_anal_3 = _request.Grah_ref;

                MasterAutoNumber _pureAuto = new MasterAutoNumber();
                string _purePrefix = _salesDAL.GetInvoicePrefix(_company, _profitcenter, "HS");
                _pureAuto.Aut_cate_cd = _profitcenter;
                _pureAuto.Aut_cate_tp = "PC";
                _pureAuto.Aut_direction = 1;
                _pureAuto.Aut_moduleid = "HS";
                _pureAuto.Aut_start_char = _purePrefix;
                _pureAuto.Aut_year = _date.Year;

                string _pureInvoiceno = string.Empty;
                string _pureReceiptno = string.Empty;
                string _pureDOno = string.Empty;
                string _errorList = string.Empty;
                string _exOutItem = string.Empty;
                Int32 _exOutLine = 0;

                List<InvoiceItem> _tempOut = _salesDAL.GetInvoiceDetailByInvoice(_outInvoice);
                List<InvoiceItem> _outSaveItem = new List<InvoiceItem>();
                _outSaveItem = _outPureInvoiceItem;


                //Boolean _found = true;
                if (_isNew == 0)
                {
                    foreach (InvoiceItem _j in _outPureInvoiceItem)
                    {
                        _exOutItem = _j.Sad_itm_cd;
                        _exOutLine = _j.Sad_itm_line;

                        var _record = (from _lst in _tempOut
                                       where _lst.Sad_itm_line != _j.Sad_itm_line
                                       select _lst).ToList();

                        if (_record.Count > 0)
                        {
                            foreach (InvoiceItem _I in _record)
                            {
                                _I.Sad_do_qty = 0;
                                _I.Sad_srn_qty = 0;
                                _outSaveItem.Add(_I);
                            }
                        }
                        goto L2;
                    }
                }

            L2: Int16 i = 0;

                //foreach (InvoiceItem _I in _tempOut)
                //{
                //    foreach (InvoiceItem _j in _outPureInvoiceItem)
                //    {
                //        _found = false;
                //        if (_I.Sad_itm_line == _j.Sad_itm_line)
                //        {
                //            _found = true;
                //            goto L2;
                //        }
                //        else
                //        {
                //            _found = false;

                //        }
                //    }
                //L2: Int16 i = 0;
                //    if (_found == false)
                //    {
                //        _I.Sad_do_qty = 0;
                //        _I.Sad_srn_qty = 0;
                //        _outSaveItem.Add(_I);
                //    }
                //}

                var _newDo = (from _lst in _reptSer
                              where _lst.Tus_itm_cd != _exOutItem && _lst.Tus_base_itm_line != _exOutLine
                              select _lst).ToList();

                if (_newDo.Count > 0)
                {
                    //foreach (InvoiceItem _invItm in _outSaveItem) //Sanjeewa 2016-05-18
                    //{
                    //    decimal _doQty = _newDo.Where(x => (x.Tus_itm_cd == _invItm.Sad_itm_cd)).Sum(k => k.Tus_qty);
                    //    _invItm.Sad_do_qty = _doQty;
                    //}

                    // _ccInvoiceItem.ForEach(x => x.Sad_do_qty = 0);
                    //Z- CC CHRG set do qty as 1
                    try
                    {
                        _outSaveItem.Where(x => x.Sad_itm_cd == "USAGE CHARGE").ToList<InvoiceItem>().ForEach(a => a.Sad_do_qty = 1);
                    }
                    catch
                    {
                    }
                    Boolean isdel = false;
                    if (_outList != null)
                        if (_outList.Count > 0)
                        { isdel = true; }
                    //CommonSaveInvoiceWithDeliveryOrder(_ccInvoiceHeader, _srnInvoiceItem, null, _ccReceiptHeader, _ccReceiptItem, _ccInv, _reptSer, null, _convertInvoiceAuto, _convertReceiptAuto, _invAuto, true, out _ccInvoiceNo, out _ccReceiptNo, out _ccDeliveryOrder, _inventoryDAL, _salesDAL, _inventoryRepDAL, false, false, out _error, false);
                    //CommonSaveInvoiceWithDeliveryOrder(_ccInvoiceHeader, _ccInvoiceItem, null, _ccReceiptHeader, _ccReceiptItem, null, null, null, _convertInvoiceAuto, _convertReceiptAuto, null, false, out _ccInvoiceNo, out _ccReceiptNo, out _ccDeliveryOrder, _inventoryDAL, _salesDAL, _inventoryRepDAL, false, false, out _error, false);
                    if (isdel == true)
                    {

                        // Release serial reservation
                        // Nadeeka 27-01-2015
                        foreach (ReptPickSerials _lst in _outList)
                        {
                            MasterItem _mItem = _inventoryDAL.GetItem(_company, _lst.Tus_itm_cd);
                            if (_mItem.Mi_is_ser1 == 1)
                            {
                                _inventoryDAL.UpdateSerialAvailability(_company, _ccInv.Ith_loc, _lst.Tus_itm_cd, _lst.Tus_ser_1);
                            }

                        }
                        _ccInv.Ith_cate_tp = _pureInvoiceHdr.Sah_inv_tp;

                        CommonSaveInvoiceWithDeliveryOrder(_pureInvoiceHdr, _outSaveItem, null, new RecieptHeader(), new List<RecieptItem>(), _ccInv, _outList, null, _pureAuto, null, _invAuto, isdel, out _pureInvoiceno, out _pureReceiptno, out _pureDOno, _inventoryDAL, _salesDAL, _inventoryRepDAL, false, false, out _errorList, true);
                    }
                    else
                    {
                        CommonSaveInvoiceWithDeliveryOrder(_pureInvoiceHdr, _outSaveItem, null, new RecieptHeader(), new List<RecieptItem>(), null, _outList, null, _pureAuto, null, _invAuto, isdel, out _pureInvoiceno, out _pureReceiptno, out _pureDOno, _inventoryDAL, _salesDAL, _inventoryRepDAL, false, false, out _errorList, true);

                    }
                    _newDo.ForEach(x => x.Tus_loc = _ccInv.Ith_loc);
                    List<ReptPickSerials> _srnSerials = new List<ReptPickSerials>();
                    foreach (ReptPickSerials _ser in _newDo)
                    {

                        ReptPickSerials _serial = _inventoryDAL.GetAvailableSerIDInformation(_ser.Tus_com, _ser.Tus_loc, _ser.Tus_itm_cd, _ser.Tus_ser_1, _ser.Tus_ser_2, _ser.Tus_ser_id.ToString());
                        _serial.Tus_base_itm_line = _ser.Tus_base_itm_line;
                        _srnSerials.Add(_serial);
                    }
                    _srnSerials.ForEach(x => x.Tus_base_doc_no = _pureInvoiceno);
                    int InventorySeqNo = _inventoryDAL.GetSerialID();
                    _newDo.ForEach(x => x.Tus_base_doc_no = _pureInvoiceno);
                    _newDo.ForEach(x => x.Tus_usrseq_no = InventorySeqNo);
                    _ccInv.Ith_pc = _pureInvoiceHdr.Sah_pc;
                    _ccInv.Ith_oth_docno = _pureInvoiceno;
                    _ccInv.Ith_seq_no = InventorySeqNo;
                    InventoryBLL _bll = new InventoryBLL();
                    string _doNo;
                    _bll.DeliveryOrderInterCompany(_ccInv, _srnSerials, null, _invAuto, out  _doNo, _inventoryRepDAL, _inventoryDAL);

                }
                //SAVE WITHOUT DO
                //if has not delivered item
                else
                {
                    Boolean isdel = false;
                    if (_outList != null)
                    {
                        if (_outList.Count > 0)
                        { isdel = true; }

                    }


                    if (isdel == true)
                    {


                        // Release serial reservation
                        // Nadeeka 27-01-2015
                        foreach (ReptPickSerials _lst in _outList)
                        {
                            MasterItem _mItem = _inventoryDAL.GetItem(_company, _lst.Tus_itm_cd);
                            if (_mItem.Mi_is_ser1 == 1)
                            {
                                _inventoryDAL.UpdateSerialAvailability(_company, _ccInv.Ith_loc, _lst.Tus_itm_cd, _lst.Tus_ser_1);
                            }

                        }
                        _pureInvoiceHdr.Sah_stus = "D";

                        _ccInv.Ith_cate_tp = _pureInvoiceHdr.Sah_inv_tp;
                        CommonSaveInvoiceWithDeliveryOrder(_pureInvoiceHdr, _outSaveItem, null, new RecieptHeader(), new List<RecieptItem>(), _ccInv, _outList, null, _pureAuto, null, _invAuto, isdel, out _pureInvoiceno, out _pureReceiptno, out _pureDOno, _inventoryDAL, _salesDAL, _inventoryRepDAL, false, false, out _errorList, true);
                    }
                    else
                    {
                        CommonSaveInvoiceWithDeliveryOrder(_pureInvoiceHdr, _outSaveItem, null, new RecieptHeader(), new List<RecieptItem>(), null, _outList, null, _pureAuto, null, _invAuto, isdel, out _pureInvoiceno, out _pureReceiptno, out _pureDOno, _inventoryDAL, _salesDAL, _inventoryRepDAL, false, false, out _errorList, true);

                    }
                }

                // Update account for new invoice
                _salesDAL.UpdateAccountInv(_pureInvoiceno, _hpReversInvoiceHeader.Sah_acc_no);

                //CommonSaveInvoiceWithDeliveryOrder(_pureInvoiceHdr, _outSaveItem, null, new RecieptHeader(), new List<RecieptItem>(), null, null, null, _pureAuto, null, null, false, out _pureInvoiceno, out _pureReceiptno, out _pureDOno, _inventoryDAL, _salesDAL, _inventoryRepDAL, false, false, out _errorList, true);

                if (!string.IsNullOrEmpty(_errorList))
                {

                    _salesDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                    _inventoryRepDAL.TransactionRollback();
                    _fmsInventoryDal.TransactionRollback();
                    _generalDAL.TransactionRollback();
                    _creditnotelist = "";
                    _inventorydoclist = "";
                    _diriya = "";
                    _invNo = "";
                    return -1;

                }

                //call public void CommonSaveInvoiceWithDeliveryOrder(InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, List<InvoiceSerial> _invoiceSerial, RecieptHeader _recieptHeader, List<RecieptItem> _recieptItem, InventoryHeader _inventoryHeader, List<ReptPickSerials> _pickSerial, List<ReptPickSerialsSub> _pickSubSerial, MasterAutoNumber _invoiceAuto, MasterAutoNumber _recieptAuto, MasterAutoNumber _inventoryAuto, bool _isDeliveryNow, out  string _invoiceNo, out string _receiptNo, out string _deliveryOrder, InventoryDAL _invDAL, SalesDAL _salDAL, ReptCommonDAL _invRepDAL, bool _isHold, bool _isHoldInvoiceProcess, out string _errorlist)

                if (string.IsNullOrEmpty(_creditNoteNoList))
                    _creditNoteNoList = "Issued Invoice : " + _pureInvoiceno;
                else
                    _creditNoteNoList += ",Issued Invoice : " + _pureInvoiceno;

                #endregion

                _creditNoteNoList += "Issue Receipts : -";

                //HP TRANSACTION AUTONUMBER
                MasterAutoNumber _transactionAuto = new MasterAutoNumber();
                _transactionAuto.Aut_cate_cd = _newAccount.Hpa_pc;
                _transactionAuto.Aut_cate_tp = "PC";
                _transactionAuto.Aut_direction = 1;
                _transactionAuto.Aut_modify_dt = null;
                _transactionAuto.Aut_moduleid = "HP";
                _transactionAuto.Aut_number = 0;
                _transactionAuto.Aut_start_char = "HPT";
                _transactionAuto.Aut_year = null;
                List<HpTransaction> _transactionList = new List<HpTransaction>();

                #region  Receipt Entry - for the new invoice
                if (receiptHeaderList != null)
                {
                    foreach (RecieptHeader _recieptHeader in receiptHeaderList)
                    {   //create MST_AUTO number for receipt table
                        string recType = _recieptHeader.Sar_receipt_type;
                        //if (_recieptHeader.Sar_receipt_type == "HPRS")
                        //{
                        //    _recieptHeader.Sar_receipt_type = "HPDPS";
                        //    receipAuto.Aut_start_char = "HPDPM";
                        //}
                        //else
                        //{
                        //    _recieptHeader.Sar_receipt_type = "HPDPM";
                        //    receipAuto.Aut_start_char = "HPDPM";
                        //}

                        if (_recieptHeader.Sar_receipt_type == "HPDPS")
                        {
                            recType = "HPRS";
                            receipAuto.Aut_start_char = "HPDPM";
                        }
                        else
                        {
                            recType = "HPRM";
                            receipAuto.Aut_start_char = "HPDPM";
                        }


                        _recieptHeader.Sar_receipt_date = _date;
                        _recieptHeader.Sar_anal_5 = _newAccount.Hpa_dp_comm;
                        _recieptHeader.Sar_is_oth_shop = false;
                        //receipAuto.Aut_year = _date.Year;
                        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(receipAuto.Aut_moduleid, receipAuto.Aut_direction, receipAuto.Aut_start_char, receipAuto.Aut_cate_tp, receipAuto.Aut_cate_cd, receipAuto.Aut_modify_dt, receipAuto.Aut_year);
                        string _cusNo = receipAuto.Aut_cate_cd + "-" + "HPDPM" + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(receipAuto);//update MST_AUTO table

                        _recieptHeader.Sar_receipt_no = _cusNo;

                        Int32 RecieptSeqNo = 0;
                        RecieptSeqNo = _inventoryDAL.GetSerialID(); //will be assign to header after looping transaction list.

                        Int32 line = 0;
                        foreach (RecieptItem _itm in receipItemList)
                        {
                            if (_recieptHeader.Sar_seq_no == _itm.Sard_seq_no)//have to check the prefix also?
                            {
                                line++;
                                _itm.Sard_seq_no = RecieptSeqNo;
                                _itm.Sard_line_no = line;
                                _itm.Sard_receipt_no = _recieptHeader.Sar_receipt_no;
                            }
                        }
                        _recieptHeader.Sar_seq_no = RecieptSeqNo;

                        _recieptHeader.Sar_esd_rate = 0;
                        _recieptHeader.Sar_epf_rate = 0;
                        _recieptHeader.Sar_wht_rate = 0;


                        HpTransaction _transaction = new HpTransaction();
                        _transaction.Hpt_acc_no = _newAccount.Hpa_acc_no;
                        _transaction.Hpt_ars = 0;
                        _transaction.Hpt_bal = 0;
                        _transaction.Hpt_txn_dt = _date;
                        _transaction.Hpt_com = _newAccount.Hpa_com;
                        _transaction.Hpt_crdt = _recieptHeader.Sar_tot_settle_amt;
                        _transaction.Hpt_cre_by = _newAccount.Hpa_cre_by;
                        _transaction.Hpt_cre_dt = _date;
                        _transaction.Hpt_dbt = 0;
                        _transaction.Hpt_txn_tp = _recieptHeader.Sar_receipt_type;
                        _transaction.Hpt_desc = "DOWN PAYMENT";
                        _transaction.Hpt_pc = _newAccount.Hpa_pc;
                        _transaction.Hpt_mnl_ref = _recieptHeader.Sar_prefix + "-" + _recieptHeader.Sar_manual_ref_no;
                        _transaction.Hpt_txn_ref = _recieptHeader.Sar_receipt_no;

                        _transactionList.Add(_transaction);

                        _salesDAL.SaveReceiptHeader(_recieptHeader);//save receipt header

                        MasterCompany _masterComp = _generalDAL.GetCompByCode(_recieptHeader.Sar_com_cd);  //kapila 27/4/2016
                        if (_masterComp.MC_IS_SCM2_FMS == 1)
                            _inventoryDAL.UpdateManualDocNo(_location, recType, Convert.ToInt32(_recieptHeader.Sar_manual_ref_no), _recieptHeader.Sar_receipt_no);//do the updation at the gnt_man_doc_dt
                        else
                            _fmsInventoryDal.UpdateManualDocNo(_location, recType, Convert.ToInt32(_recieptHeader.Sar_manual_ref_no), _recieptHeader.Sar_receipt_no);//do the updation at the gnt_man_doc_dt




                        if (string.IsNullOrEmpty(_creditNoteNoList))
                            _creditNoteNoList = " " + _cusNo;
                        else
                            _creditNoteNoList += ", " + _cusNo;

                        _recNo = _cusNo;
                    }
                }


                //save receipt detali list
                if (receipItemList != null)
                    if (receipItemList.Count > 0)
                        foreach (RecieptItem rec_itm in receipItemList)
                            _salesDAL.SaveReceiptItem(rec_itm);


                #endregion

                //Account Log EXI entry 
                //2013/01/29
                Int32 _otherSeqno = _inventoryDAL.GetSerialID();
                _accLog.Hal_invc_no = _invoiceNo;//_crnote;
                _accLog.Hal_seq_no = _otherSeqno;
                _newAccount.Hpa_seq_no = _otherSeqno;

                #region  Re-schadule the hire sale history
                //ADDED 2013/01/29
                //HP Account Log EXO Entry
                _otherSeqno = _inventoryDAL.GetSerialID();


                HpAccount _acc = _salesDAL.GetHP_Account_onAccNo(_accLog.Hal_acc_no);

                //HP TRANSACTION OBEX RECORD

                if (_acc.Hpa_hp_val > _newAccount.Hpa_hp_val)
                {
                    HpTransaction _transaction = new HpTransaction();
                    _transaction.Hpt_acc_no = _newAccount.Hpa_acc_no;
                    _transaction.Hpt_ars = 0;
                    _transaction.Hpt_bal = 0;
                    _transaction.Hpt_com = _newAccount.Hpa_com;
                    _transaction.Hpt_crdt = _acc.Hpa_hp_val - _newAccount.Hpa_hp_val;
                    _transaction.Hpt_cre_by = _newAccount.Hpa_cre_by;
                    _transaction.Hpt_cre_dt = _date;
                    _transaction.Hpt_txn_tp = "OBEX";
                    _transaction.Hpt_desc = "Exchange Balance Adjustment";
                    _transaction.Hpt_pc = _newAccount.Hpa_pc;
                    _transaction.Hpt_txn_dt = _date;
                    _transactionList.Add(_transaction);

                }
                else
                {
                    HpTransaction _transaction = new HpTransaction();
                    _transaction.Hpt_acc_no = _newAccount.Hpa_acc_no;
                    _transaction.Hpt_ars = 0;
                    _transaction.Hpt_bal = 0;
                    _transaction.Hpt_com = _newAccount.Hpa_com;
                    _transaction.Hpt_dbt = _newAccount.Hpa_hp_val - _acc.Hpa_hp_val;
                    _transaction.Hpt_cre_by = _newAccount.Hpa_cre_by;
                    _transaction.Hpt_cre_dt = _date;
                    _transaction.Hpt_txn_dt = _date;
                    _transaction.Hpt_txn_tp = "OBEX";
                    _transaction.Hpt_desc = "Exchange Balance Adjustment";
                    _transaction.Hpt_pc = _newAccount.Hpa_pc;
                    _transactionList.Add(_transaction);
                }

                _salesDAL.UpdateResheduleAccLog(_pureInvoiceHdr.Sah_dt, _acc.Hpa_acc_no);

                HPAccountLog _accLogEXO = new HPAccountLog();
                _accLogEXO.Hal_seq_no = _inventoryDAL.GetSerialID();
                _accLogEXO.Hal_acc_no = _newAccount.Hpa_acc_no;
                _accLogEXO.Hal_af_val = _newAccount.Hpa_af_val;
                _accLogEXO.Hal_bank = _newAccount.Hpa_bank;
                _accLogEXO.Hal_buy_val = _newAccount.Hpa_buy_val;
                _accLogEXO.Hal_cash_val = _newAccount.Hpa_cash_val;
                _accLogEXO.Hal_cls_dt = _newAccount.Hpa_cls_dt;
                _accLogEXO.Hal_com = _newAccount.Hpa_com;
                _accLogEXO.Hal_cre_by = _newAccount.Hpa_cre_by;
                _accLogEXO.Hal_cre_dt = _newAccount.Hpa_cre_dt;
                _accLogEXO.Hal_dp_comm = _newAccount.Hpa_dp_comm;
                _accLogEXO.Hal_dp_val = _newAccount.Hpa_dp_val;
                _accLogEXO.Hal_ecd_stus = _newAccount.Hpa_ecd_stus;
                _accLogEXO.Hal_ecd_tp = _newAccount.Hpa_ecd_tp;
                _accLogEXO.Hal_flag = _newAccount.Hpa_flag;
                _accLogEXO.Hal_grup_cd = _newAccount.Hpa_grup_cd;
                _accLogEXO.Hal_hp_val = _newAccount.Hpa_hp_val;
                _accLogEXO.Hal_init_ins = _newAccount.Hpa_init_ins;
                _accLogEXO.Hal_init_ser_chg = _newAccount.Hpa_init_ser_chg;
                _accLogEXO.Hal_init_stm = _newAccount.Hpa_init_stm;
                _accLogEXO.Hal_init_vat = _newAccount.Hpa_init_vat;
                _accLogEXO.Hal_inst_comm = _newAccount.Hpa_inst_comm;
                _accLogEXO.Hal_inst_ins = _newAccount.Hpa_inst_ins;
                _accLogEXO.Hal_inst_ser_chg = _newAccount.Hpa_inst_ser_chg;
                _accLogEXO.Hal_inst_stm = _newAccount.Hpa_inst_stm;
                _accLogEXO.Hal_inst_vat = _newAccount.Hpa_inst_vat;
                _accLogEXO.Hal_intr_rt = _newAccount.Hpa_intr_rt;
                _accLogEXO.Hal_invc_no = _pureInvoiceno;
                _accLogEXO.Hal_is_rsch = _newAccount.Hpa_is_rsch;
                _accLogEXO.Hal_log_dt = _date;
                _accLogEXO.Hal_mgr_cd = _newAccount.Hpa_mgr_cd;
                _accLogEXO.Hal_net_val = _newAccount.Hpa_net_val;
                _accLogEXO.Hal_oth_chg = _newAccount.Hpa_oth_chg;
                _accLogEXO.Hal_pc = _newAccount.Hpa_pc;
                _accLogEXO.Hal_rev_stus = false;
                _accLogEXO.Hal_rls_dt = _newAccount.Hpa_rls_dt;
                _accLogEXO.Hal_rsch_dt = _newAccount.Hpa_rsch_dt;
                _accLogEXO.Hal_rv_dt = _newAccount.Hpa_rv_dt;
                _accLogEXO.Hal_sa_sub_tp = "EXO";
                _accLogEXO.Hal_sch_cd = _newAccount.Hpa_sch_cd;
                _accLogEXO.Hal_sch_tp = _newAccount.Hpa_sch_tp;
                _accLogEXO.Hal_seq = _newAccount.Hpa_seq;
                _accLogEXO.Hal_ser_chg = _newAccount.Hpa_ser_chg;
                _accLogEXO.Hal_stus = _newAccount.Hpa_stus;
                _accLogEXO.Hal_tc_val = _newAccount.Hpa_tc_val;
                _accLogEXO.Hal_term = _newAccount.Hpa_term;
                _accLogEXO.Hal_tot_intr = _newAccount.Hpa_tot_intr;
                _accLogEXO.Hal_tot_vat = _newAccount.Hpa_tot_vat;
                _accLogEXO.Hal_val_01 = _newAccount.Hpa_val_01;
                _accLogEXO.Hal_val_02 = _newAccount.Hpa_val_02;
                _accLogEXO.Hal_val_03 = _newAccount.Hpa_val_03;
                _accLogEXO.Hal_val_04 = _newAccount.Hpa_val_04;
                _accLogEXO.Hal_val_05 = _newAccount.Hpa_val_05;
                _accLogEXO.Hal_init_stm = _newAccount.Hpa_init_stm;
                _accLogEXO.Hal_inst_stm = _newAccount.Hpa_inst_stm;
                _accLogEXO.Hpa_acc_cre_dt = _newAccount.Hpa_acc_cre_dt.Date;


                _salesDAL.SaveHPAccountLog(_accLog);
                //Comment by darshana 29-05-2014 - After discuss with Mr. dilanda 
                //_salesDAL.UpdateResheduleAccLog(_date.Date, _accLog.Hal_acc_no);
                _salesDAL.UpdateAccLogClsDt(_date.Date, _accLog.Hal_acc_no, _accLog.Hal_com);

                _accLog.Hal_seq_no = _otherSeqno;
                _newAccount.Hpa_seq_no = _otherSeqno;
                _salesDAL.SaveHPAccountLog(_accLogEXO);
                _salesDAL.UpdateHPAccountReschedule(_newAccount);
                // _salesDAL.SaveHPAccount(_newAccount);
                //END


                foreach (HpSheduleDetails sch in _currentSchedule)
                {
                    HpScheduleDetailLog _log = new HpScheduleDetailLog();
                    _log.Hsh_acc_no = sch.Hts_acc_no;
                    _log.Hsh_cre_by = sch.Hts_cre_by;
                    _log.Hsh_cre_dt = sch.Hts_cre_dt;
                    _log.Hsh_dt = DateTime.Now;
                    _log.Hsh_due_dt = sch.Hts_due_dt;
                    _log.Hsh_ins = sch.Hts_ins;
                    _log.Hsh_intr = sch.Hts_intr;
                    _log.Hsh_rnt_no = sch.Hts_rnt_no;
                    _log.Hsh_rnt_val = sch.Hts_rnt_val;
                    _log.Hsh_sdt = sch.Hts_sdt;
                    _log.Hsh_seq = _inventoryDAL.GetSerialID();
                    _log.Hsh_ser = sch.Hts_ser;
                    _log.Hsh_vat = sch.Hts_vat;

                    _salesDAL.SaveHPScheduleLog(_log);
                }


                //delete
                _salesDAL.DeleteHPSchedule(_acc.Hpa_acc_no);
                foreach (HpSheduleDetails sch in _newSchedule)
                {
                    sch.Hts_seq = _inventoryDAL.GetSerialID();
                    _salesDAL.SaveHpShedule(sch);
                }



                //insert hpinsurance
                if (_insurance != null)
                {
                    //add reverse
                    HpInsurance _insu = _salesDAL.GetLatestInsurance(_insurance.Hti_acc_num);
                    if (_insu != null)
                    {
                        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_insuranceAuto.Aut_moduleid, _insuranceAuto.Aut_direction, _insuranceAuto.Aut_start_char, _insuranceAuto.Aut_cate_tp, _insuranceAuto.Aut_cate_cd, _insuranceAuto.Aut_modify_dt, _insuranceAuto.Aut_year);
                        string _cusNo = _insuranceAuto.Aut_cate_cd + "-" + _insuranceAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_insuranceAuto);
                        _insu.Hti_seq = _inventoryDAL.GetSerialID();
                        _insu.Hti_ref = _cusNo;
                        _insu.Hit_is_rvs = true;
                        _insu.Hti_mnl_num = _cusNo;
                        _insu.Hti_dt = _date.Date;
                        _salesDAL.Save_HpInsu(_insu);
                    }


                    MasterAutoNumber _number1 = _inventoryDAL.GetAutoNumber(_insuranceAuto.Aut_moduleid, _insuranceAuto.Aut_direction, _insuranceAuto.Aut_start_char, _insuranceAuto.Aut_cate_tp, _insuranceAuto.Aut_cate_cd, _insuranceAuto.Aut_modify_dt, _insuranceAuto.Aut_year);
                    string _cusNo1 = _insuranceAuto.Aut_cate_cd + "-" + _insuranceAuto.Aut_start_char + "-" + _number1.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_insuranceAuto);

                    _insurance.Hti_seq = _inventoryDAL.GetSerialID();
                    _insurance.Hti_ref = _cusNo1;
                    _insurance.Hti_mnl_num = _cusNo1;
                    _salesDAL.Save_HpInsu(_insurance);
                    _diriya = _cusNo1;
                }
                else
                {
                    _diriya = "";
                }

                #endregion


                #region save hptransaction

                if (_transactionList != null && _transactionList.Count > 0)
                {
                    foreach (HpTransaction _transaction in _transactionList)
                    {
                        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_transactionAuto.Aut_moduleid, _transactionAuto.Aut_direction, _transactionAuto.Aut_start_char, _transactionAuto.Aut_cate_tp, _transactionAuto.Aut_cate_cd, _transactionAuto.Aut_modify_dt, _transactionAuto.Aut_year);
                        string _cusNo1 = _transactionAuto.Aut_cate_cd + "-" + _transactionAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_transactionAuto);//update MST_AUTO table
                        _transaction.Hpt_seq = _inventoryDAL.GetSerialID();
                        _transaction.Hpt_ref_no = _cusNo1;

                        _salesDAL.Save_HpTransaction(_transaction);
                    }
                }

                #endregion


                #region Buyback Item
                string _buybackinv = string.Empty;
                if (_buybacklist != null) if (_buybacklist.Count > 0)
                    {
                        InventoryBLL _bll = new InventoryBLL();
                        _bll._salesDAL = _salesDAL;
                        _bll._inventoryDAL = _inventoryDAL;
                        _bll._FMSinventoryDAL = _fmsInventoryDal;
                        _bll._inventoryRepDAL = _inventoryRepDAL;
                        _buybackheader.Ith_manual_ref = _outInvoice;
                        _bll.SaveInwardScanSerial(_buybackheader, _buybacklist, null);
                        _bll.UpdateInventoryAutoNumber(_buybackheader, _buybackauto, "+", out  _buybackinv);
                        _inventoryDAL.UpdateMovementDocNo_Other(_buybackheader.Ith_seq_no, _buybackinv);
                    }
                #endregion




                #region save hptransaction for diff

                if (_trans != null && _trans.Count > 0)
                {

                    MasterAutoNumber _transactionAuto1 = new MasterAutoNumber();
                    _transactionAuto1.Aut_cate_cd = _newAccount.Hpa_pc;
                    _transactionAuto1.Aut_cate_tp = "PC";
                    _transactionAuto1.Aut_direction = 1;
                    _transactionAuto1.Aut_modify_dt = null;
                    _transactionAuto1.Aut_moduleid = "HP";
                    _transactionAuto1.Aut_number = 0;
                    _transactionAuto1.Aut_start_char = "HPT";
                    _transactionAuto1.Aut_year = null;

                    foreach (HpTransaction _transaction in _trans)
                    {
                        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_transactionAuto1.Aut_moduleid, _transactionAuto1.Aut_direction, _transactionAuto1.Aut_start_char, _transactionAuto1.Aut_cate_tp, _transactionAuto1.Aut_cate_cd, _transactionAuto1.Aut_modify_dt, _transactionAuto1.Aut_year);
                        string _cusNo1 = _transactionAuto1.Aut_cate_cd + "-" + _transactionAuto1.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_transactionAuto1);//update MST_AUTO table
                        _transaction.Hpt_seq = _inventoryDAL.GetSerialID();
                        _transaction.Hpt_ref_no = _cusNo1;
                        if (_transaction.Hpt_dbt > 0)
                        {
                            _salesDAL.Save_HpTransaction(_transaction);
                        }
                    }
                }

                #endregion



                //ADDED 2013/05/31
                //REQUEST FINISH
                _generalDAL.UpdateApprovalStatus(_request);
                _generalDAL.UpdateCreditNoteExchange(_request.Grah_ref, _invoiceNo);

                //_salesDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                //_inventoryRepDAL.ConnectionClose();
                //_fmsInventoryDal.ConnectionClose();
                //_generalDAL.ConnectionClose();

                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();
                _generalDAL.TransactionCommit();
                _effect = 1;
                _creditnotelist = _creditNoteNoList;
                _inventorydoclist = _inventoryDocumentList;
                _invNo = _pureInvoiceno;
                if (string.IsNullOrEmpty(_recNo))
                {
                    _recNo = "";
                }

            }
            catch (Exception ex)
            {
                _effect = -1;
                _creditnotelist = "";
                _inventorydoclist = "";
                _invNo = "";
                _diriya = "";
                _recNo = ex.Message.ToString();
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                _generalDAL.TransactionRollback();
            }

            return _effect;
        }


        public Int32 SaveHPExchangeNew(DateTime _date, string _accountno, string _company, string _location, string _profitcenter, string _createdBy, string _inSubType, string _outSubType, List<ReptPickSerials> _list, List<ReptPickSerials> _outList, List<InvoiceItem> _outPureInvoiceItem, List<RecieptHeader> receiptHeaderList, List<RecieptItem> receipItemList, MasterAutoNumber receipAuto, out string _creditnotelist, out string _inventorydoclist, HPAccountLog _accLog, HpAccount _newAccount, List<HpSheduleDetails> _currentSchedule, List<HpSheduleDetails> _newSchedule, HpInsurance _insurance, MasterAutoNumber _insuranceAuto, RequestApprovalHeader _request, out string _diriya, out string _invNo, out string _recNo, InventoryHeader _ccInv, MasterAutoNumber _invAuto)
        {
            Int32 _effect = 0;

            //----------------IN items----------------

            //Check the serial list divide to status of the IN list as Delivered/Forward status + DO No + Invoice no
            //if the Tus_ser_id =0 + Invoice no then its a forward sales (Credit Note only (HS-EXI))
            //if the Tus_ser_id=1 and need to check with the DO, if the DO is same its goes to single SRN
            //If its differ then there are multiple SRN's as per the count of DO's (SRN with Credit Note)

            //----------------OUT items----------------

            //The total OUT items should save as Invoice with the reference of the account no. (HS-EXO)
            //and the as per the reply of the customer, should raise DO

            //----------------Account----------------

            //Save the Whole current account to LOG with Sales Type - EXI
            //New Trial Calculation will be update to the Hpt_Acc table and the Sales Type - EXO
            //In Hpt_Sch, save the current to the HPT_Sch_Log
            //write the new schdule to the Hpt_sch
            // Term         Current Value           New Value           Save Process        paid status
            // 1            1000                    1200                1000                1
            // 2            1000                    1200                1000                1
            // 3            1000                    1200                1200+400 x          0   <- term 1,2 remain as it is and the balance will add to the next term as total
            // 4            1000                    1200                1200 x              0   <- term will be as the new calcullated term
            // 5            1000                    1200                1200 x              0   <- term will be as the new calcullated term
            //--------------------------------------* New Value = Amount Finance + Interest Amount / Terms
            //Save Receipt Entry with the type HPDPS

            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            _inventoryRepDAL = new ReptCommonDAL();
            _fmsInventoryDal = new FMS_InventoryDAL();
            _generalDAL = new GeneralDAL();
            string _inventoryDocumentList = string.Empty;
            string _creditNoteNoList = string.Empty;
            _recNo = "";
            string _outInvoice = "";
            string _outDO = "";
            string _invoiceNo = "";
            string _orgInvoiceNo = "";

            string _outInvoiceForDuplicate = string.Empty;

            try
            {
                _salesDAL.ConnectionOpen(); _salesDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen(); _inventoryDAL.BeginTransaction();
                _inventoryRepDAL.ConnectionOpen(); _inventoryRepDAL.BeginTransaction();
                _fmsInventoryDal.ConnectionOpen(); _fmsInventoryDal.BeginTransaction();
                _generalDAL.ConnectionOpen(); _generalDAL.BeginTransaction();

                //------------------------------------EXI---------------------------------------
                #region new method

                foreach (ReptPickSerials _doc in _list)
                {
                    _outInvoice = Convert.ToString(_doc.Tus_base_doc_no);
                    _outDO = Convert.ToString(_doc.Tus_doc_no);
                }

                #region SRN
                MasterAutoNumber _auto = new MasterAutoNumber();
                _auto.Aut_cate_cd = _profitcenter; //_hpReversInvoiceHeader.Sah_pc;
                _auto.Aut_cate_tp = "PC";
                _auto.Aut_direction = 0;
                _auto.Aut_moduleid = "REV";
                _auto.Aut_start_char = "INREV";
                _auto.Aut_year = null;
                string _srnNo = "";

                ////ADDED BY SACHITH
                ////2013/04/05
                ////FOR SRN AND DO
                //Invoice Header - Invoice Item - invoice Auto Number
                InvoiceHeader _hpReversInvoiceHeader = _salesDAL.GetInvoiceHeader(_outInvoice);
                _hpReversInvoiceHeader.Sah_dt = _date.Date;
                _hpReversInvoiceHeader.Sah_inv_no = string.Empty;
                _hpReversInvoiceHeader.Sah_tp = "REV";
                _hpReversInvoiceHeader.Sah_inv_sub_tp = _inSubType;
                _hpReversInvoiceHeader.Sah_direct = false;
                _hpReversInvoiceHeader.Sah_pc = _profitcenter;
                _hpReversInvoiceHeader.Sah_stus = "D";//updated 2013/01/29 
                _hpReversInvoiceHeader.Sah_cre_by = _createdBy;
                _hpReversInvoiceHeader.Sah_cre_when = DateTime.Now;
                _hpReversInvoiceHeader.Sah_mod_by = _createdBy;
                _hpReversInvoiceHeader.Sah_mod_when = DateTime.Now;
                _hpReversInvoiceHeader.Sah_del_loc = _location;
                _hpReversInvoiceHeader.Sah_ref_doc = _outInvoice;
                _hpReversInvoiceHeader.Sah_anal_10 = 0;


                List<InventorySerialN> _diliverserials = _inventoryDAL.GetDeliveredSerialDetail(_company, _outInvoice);
                ////List hold delivered invoice items
                List<InvoiceItem> _srnInvoiceItem = new List<InvoiceItem>();
                ////list hold delivered inventory serials
                List<ReptPickSerials> _reptSer = new List<ReptPickSerials>();
                List<InvoiceItem> _temp = _salesDAL.GetInvoiceDetailByInvoice(_outInvoice);

                if (_diliverserials != null && _diliverserials.Count > 0)
                {
                    foreach (InventorySerialN inv in _diliverserials)
                    {
                        //List<InvoiceItem> invIte = _temp.Where(x => x.Sad_itm_cd == inv.Ins_itm_cd  ).ToList<InvoiceItem>(); Nadeeka 09-09-2015(Fixed Similar item issue)
                        List<InvoiceItem> invIte = _temp.Where(x => x.Sad_itm_cd == inv.Ins_itm_cd || x.Sad_sim_itm_cd == inv.Ins_itm_cd).ToList<InvoiceItem>();
                        if (invIte != null && invIte.Count > 0)
                        {
                            if (invIte[0].Sad_do_qty > 0)
                            {

                                invIte[0].Sad_srn_qty = invIte[0].Sad_do_qty;
                                invIte[0].Sad_fws_ignore_qty = invIte[0].Sad_do_qty;
                                invIte[0].Sad_do_qty = 0;
                            }
                            else
                            {
                                invIte[0].Sad_do_qty = 0;
                                invIte[0].Sad_fws_ignore_qty = invIte[0].Sad_qty;
                                invIte[0].Sad_srn_qty = invIte[0].Sad_qty;
                            }
                            _srnInvoiceItem.Add(invIte[0]);
                            string bin = _inventoryDAL.GetDefaultBinCode(_company, _profitcenter);
                            List<ReptPickSerials> serial = _inventoryDAL.GetInvoiceSerialForReversal(_company, "", "", "", bin, _outInvoice, invIte[0].Sad_itm_line);
                            if (serial != null)
                                _reptSer.AddRange(serial);
                        }
                    }
                }

                foreach (ReptPickSerials _ser in _reptSer)
                {
                    foreach (ReptPickSerials _inSer in _outList)
                    {
                        if (_inSer.Tus_itm_cd == _ser.Tus_itm_cd && _inSer.Tus_ser_1 == _ser.Tus_ser_1)
                        {
                            _ser.Tus_itm_stus = _inSer.Tus_itm_stus;
                            _ser.Tus_unit_cost = _inSer.Tus_unit_cost;
                        }
                    }
                }

                #region Check Main Unit Replace Serial Exist :: Add by Chamal 16-Jul-2015
                foreach (ReptPickSerials _ser in _reptSer)
                {
                    if (!string.IsNullOrEmpty(_ser.Tus_ser_1))
                    {
                        if (_ser.Tus_ser_1.ToString().ToUpper() != "N/A")
                        {
                            List<Warr_Replacement_Det> _replList = _inventoryDAL.GetWarrReplDetails(_ser.Tus_itm_cd, _ser.Tus_ser_1, "C");
                            if (_replList != null && _replList.Count > 0)
                            {
                                //_effect = -1; //Commented As per the mail sent by Mr. Indrajith on 27 January 2018 2:58 PM 2018-09-13 Sanjeewa
                                //_creditnotelist = "";
                                //_inventorydoclist = "";
                                //_invNo = "";
                                //_diriya = "";
                                //_recNo = "Warranty replacement found for item code - " + _ser.Tus_itm_cd + " | serial no - " + _ser.Tus_ser_1 + "/nYou can't process this exchange!";
                                //_salesDAL.TransactionRollback();
                                //_inventoryDAL.TransactionRollback();
                                //_inventoryRepDAL.TransactionRollback();
                                //_fmsInventoryDal.TransactionRollback();
                                //_generalDAL.TransactionRollback();
                                //return _effect;
                            }
                            _replList = new List<Warr_Replacement_Det>();
                            _replList = _inventoryDAL.GetWarrReplDetails(_ser.Tus_itm_cd, _ser.Tus_ser_1, "M");
                            if (_replList != null && _replList.Count > 0)
                            {
                                var _maxItms = _replList.Max(y => y.Swr_seq);
                                var _replList2 = _replList.Where(x => x.Swr_seq == _maxItms).Select(x => x.Swr_n_itm_ser).Distinct().ToList();
                                _ser.Tus_ser_1 = _replList2[0].ToString();
                            }
                        }
                    }
                }
                #endregion


                InvoiceHeader _srnInv = new InvoiceHeader();
                _srnInv = _hpReversInvoiceHeader;

                ////END
                ////SRN save if have delivered item
                if (_srnInvoiceItem.Count > 0)
                {
                    InventoryHeader _inventoryHeader = new InventoryHeader();
                    _inventoryHeader.Ith_com = _hpReversInvoiceHeader.Sah_com;
                    _inventoryHeader.Ith_loc = _hpReversInvoiceHeader.Sah_pc;
                    _inventoryHeader.Ith_pc = _hpReversInvoiceHeader.Sah_pc;
                    DateTime _docDate = _hpReversInvoiceHeader.Sah_dt;
                    _inventoryHeader.Ith_doc_date = _docDate;
                    _inventoryHeader.Ith_doc_year = _docDate.Year;
                    _inventoryHeader.Ith_oth_docno = _diliverserials[0].Ins_doc_no;
                    _inventoryHeader.Ith_direct = true;
                    _inventoryHeader.Ith_doc_tp = "SRN";
                    _inventoryHeader.Ith_cate_tp = "NOR";
                    _inventoryHeader.Ith_bus_entity = "";
                    _inventoryHeader.Ith_is_manual = false;
                    _inventoryHeader.Ith_manual_ref = "";
                    _inventoryHeader.Ith_sub_tp = "";
                    _inventoryHeader.Ith_remarks = "";
                    _inventoryHeader.Ith_stus = "A";
                    _inventoryHeader.Ith_cre_by = _hpReversInvoiceHeader.Sah_cre_by;
                    _inventoryHeader.Ith_cre_when = DateTime.Now;
                    _inventoryHeader.Ith_mod_by = _hpReversInvoiceHeader.Sah_cre_by;
                    _inventoryHeader.Ith_mod_when = DateTime.Now;
                    _inventoryHeader.Ith_acc_no = _hpReversInvoiceHeader.Sah_acc_no;



                    _hpReversInvoiceHeader.Sah_inv_tp = "HS";
                    _hpReversInvoiceHeader.Sah_inv_sub_tp = "EXI";
                    _hpReversInvoiceHeader.Sah_direct = false;
                    _hpReversInvoiceHeader.Sah_ref_doc = _outInvoice;
                    _hpReversInvoiceHeader.Sah_anal_10 = 0;


                    MasterAutoNumber _inventoryauto = new MasterAutoNumber();
                    _inventoryauto.Aut_cate_cd = _location;
                    _inventoryauto.Aut_cate_tp = "LOC";
                    _inventoryauto.Aut_direction = 1;
                    _inventoryauto.Aut_moduleid = "SRN";
                    _inventoryauto.Aut_start_char = "SRN";

                    //  _inventoryHeader.Ith_session_id = BaseCls.GlbUserSessionID;
                    //_reptDAL.StartTimeModule("CC", "SaveReversalForCommon_START", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                    SaveReversalForCommon(_hpReversInvoiceHeader, _srnInvoiceItem, _auto, true, out   _invoiceNo, _inventoryHeader, _reptSer, null, _inventoryauto, out  _srnNo);
                    // _reptDAL.StartTimeModule("CC", "SaveReversalForCommon_END", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                    //CommonSaveReversal(_srnInv, _srnInvoiceItem, _auto, false, out _srnNo);
                    //Int32 _newSeq = _inventoryDAL.GetSerialID();
                    //_hpReversInvoiceHeader.Sah_seq_no = _newSeq;

                    //_hpReversInvoiceHeader.Sah_man_ref = _srnNo;
                    _orgInvoiceNo = _hpReversInvoiceHeader.Sah_ref_doc;
                    _hpReversInvoiceHeader.Sah_ref_doc = _diliverserials[0].Ins_doc_no;


                    //ADDED 2013/06/13
                    if (!string.IsNullOrEmpty(_srnNo))
                    {
                        _salesDAL.UpdateInvoiceRevNo(_invoiceNo, _srnNo);
                    }
                    //END


                    //UPDATE 2013/04/29
                    //SAVE NON DILIVERD ITEMS TO SAT_ITM TABLE
                    foreach (InvoiceItem _itm in _temp)
                    {

                        List<ReptPickSerials> serial = (from _res in _reptSer
                                                        where _res.Tus_itm_cd == _itm.Sad_itm_cd || _res.Tus_itm_cd == _itm.Sad_sim_itm_cd
                                                        select _res).ToList<ReptPickSerials>();
                        if (serial == null || serial.Count <= 0)
                        {
                            _itm.Sad_seq_no = _hpReversInvoiceHeader.Sah_seq_no;
                            _itm.Sad_itm_line = _itm.Sad_itm_line;
                            _itm.Sad_inv_no = Convert.ToString(_invoiceNo);
                            _salesDAL.SaveSalesItem(_itm);


                            List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                            _itmTax = _salesDAL.GetItemTax(_hpReversInvoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                            foreach (MasterItemTax _one in _itmTax)
                            {
                                InvoiceItemTax _tax = new InvoiceItemTax();
                                _tax.Satx_inv_no = _itm.Sad_inv_no;
                                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                _tax.Satx_itm_line = _itm.Sad_itm_line;
                                _tax.Satx_itm_tax_amt = (_itm.Sad_unit_rt * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                _tax.Satx_job_line = 0;
                                _tax.Satx_job_no = "";
                                _tax.Satx_seq_no = _itm.Sad_seq;
                                _salesDAL.SaveSalesItemTax(_tax);
                            }
                            //_invoiceLine += 1;
                            _salesDAL.UpdateInvRevQty(_orgInvoiceNo, _itm.Sad_itm_cd, _itm.Sad_qty, _itm.Sad_itm_line, _itm.Sad_qty);
                        }

                        //if (_fwsQty < 0)
                        //{
                        //    _fwsQty = 0;
                        //}


                    }
                    //END

                }
                else
                {
                    //Save Invoice Header
                    _hpReversInvoiceHeader.Sah_ref_doc = _outInvoice;
                    _hpReversInvoiceHeader.Sah_inv_tp = "HS";
                    _hpReversInvoiceHeader.Sah_inv_sub_tp = "EXI";
                    _hpReversInvoiceHeader.Sah_direct = false;
                    _hpReversInvoiceHeader.Sah_anal_10 = 0;
                    Int32 InvoiceSeqNo = _inventoryDAL.GetSerialID();
                    _hpReversInvoiceHeader.Sah_seq_no = InvoiceSeqNo;
                    _hpReversInvoiceHeader.Sah_inv_no = Convert.ToString(InvoiceSeqNo);
                    //_salesDAL.SaveSalesHeader(_hpReversInvoiceHeader);

                    _temp.ForEach(x => x.Sad_srn_qty = x.Sad_qty);

                    SaveReversalForCommon(_hpReversInvoiceHeader, _temp, _auto, true, out   _invoiceNo, null, null, null, null, out  _srnNo);

                    _orgInvoiceNo = _hpReversInvoiceHeader.Sah_ref_doc;

                    //Save Invoice Items
                    //foreach (InvoiceItem _itm in _temp)
                    //{

                    ////    _itm.Sad_seq_no = _hpReversInvoiceHeader.Sah_seq_no;
                    ////    _itm.Sad_itm_line = _itm.Sad_itm_line;
                    ////    _itm.Sad_inv_no = Convert.ToString(_hpReversInvoiceHeader.Sah_seq_no);
                    ////    _salesDAL.SaveSalesItem(_itm);


                    ////    List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                    ////    _itmTax = _salesDAL.GetItemTax(_hpReversInvoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                    ////    foreach (MasterItemTax _one in _itmTax)
                    ////    {
                    ////        InvoiceItemTax _tax = new InvoiceItemTax();
                    ////        _tax.Satx_inv_no = _itm.Sad_inv_no;
                    ////        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                    ////        _tax.Satx_itm_line = _itm.Sad_itm_line;
                    ////        _tax.Satx_itm_tax_amt = (_itm.Sad_unit_rt * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                    ////        _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                    ////        _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                    ////        _tax.Satx_job_line = 0;
                    ////        _tax.Satx_job_no = "";
                    ////        _tax.Satx_seq_no = _itm.Sad_seq;
                    ////        _salesDAL.SaveSalesItemTax(_tax);
                    ////    }
                    ////    // _invoiceLine += 1;
                    //    _salesDAL.UpdateInvRevQty(_orgInvoiceNo, _itm.Sad_itm_cd, _itm.Sad_qty, _itm.Sad_itm_line, _itm.Sad_qty);
                    //}
                }

                #endregion

                #endregion

                _salesDAL.UpdateInvoiceRevStatus(_orgInvoiceNo);

                #region Revers Entries
                //string _crnote = string.Empty;
                //string _srnno = string.Empty;
                //string _outInvoice = "";
                //bool _isForwardSale = true;
                //string _outDO = "";
                //foreach (ReptPickSerials _doc in _list)
                //{
                //    _isForwardSale = Convert.ToInt32(_doc.Tus_ser_id) == 0 ? true : false;
                //    _outInvoice = Convert.ToString(_doc.Tus_base_doc_no);
                //    _outDO = Convert.ToString(_doc.Tus_doc_no);
                //    if (string.IsNullOrEmpty(_outInvoiceForDuplicate)) _outInvoiceForDuplicate = _outInvoice;
                //    if (!_isForwardSale)
                //        break;
                //}
                //if (_isForwardSale)//revers the invoice only (Credit Note)
                //{

                //    var _CreditNoteList = (from _one in _outList where _one.Tus_base_doc_no == _outInvoice && _one.Tus_ser_id == 0 select _one).ToList();

                //    //Invoice Header - Invoice Item - invoice Auto Number
                //    InvoiceHeader _hdr = _salesDAL.GetInvoiceHeader(_outInvoice);
                //    _hdr.Sah_dt = _date.Date;
                //    _hdr.Sah_inv_no = string.Empty;
                //    _hdr.Sah_tp = "REV";
                //    _hdr.Sah_inv_sub_tp = _inSubType;
                //    _hdr.Sah_direct = false;
                //    _hdr.Sah_pc = _profitcenter;
                //    _hdr.Sah_stus = "D";//updated 2013/01/29 
                //    _hdr.Sah_cre_by = _createdBy;
                //    _hdr.Sah_cre_when = DateTime.Now;
                //    _hdr.Sah_mod_by = _createdBy;
                //    _hdr.Sah_mod_when = DateTime.Now;
                //    _hdr.Sah_del_loc = _location;
                //    //added 2013/08/06
                //    _hdr.Sah_ref_doc = _outInvoice;
                //    _hdr.Sah_anal_10 = 0;

                //    List<InvoiceItem> _itm = _salesDAL.GetInvoiceDetailByInvoice(_outInvoice);
                //    MasterAutoNumber _auto = new MasterAutoNumber();
                //    string _prefix = _salesDAL.GetInvoicePrefix(_company, _profitcenter, "HS");
                //    _auto.Aut_cate_cd = _profitcenter;
                //    _auto.Aut_cate_tp = "PC";
                //    _auto.Aut_direction = 0;
                //    _auto.Aut_moduleid = "REV";
                //    _auto.Aut_start_char = "INREV";
                //    _auto.Aut_year = null;

                //    List<InvoiceItem> _invItemSaveList = new List<InvoiceItem>();
                //    foreach (ReptPickSerials _Itm in _CreditNoteList)
                //    {
                //        var _outinvItem = (from _l in _itm where _l.Sad_itm_line == _Itm.Tus_base_itm_line select _l).ToList();
                //        _outinvItem.ForEach(x => { x.Sad_do_qty = 1; x.Sad_srn_qty = 1; });

                //        _invItemSaveList.AddRange(_outinvItem);
                //    }


                //    CommonSaveReversal(_hdr, _invItemSaveList, _auto, false, out _crnote);

                //    if (string.IsNullOrEmpty(_creditNoteNoList))
                //        _creditNoteNoList = _crnote;
                //    else
                //        _creditNoteNoList += "," + _crnote;

                //    //call CommonSaveReversal()
                //}
                //else//Raise revers invoice (Credit Note) with SRN 
                //{

                //    var _SRNList = (from _one in _outList where _one.Tus_base_doc_no == _outInvoice && _one.Tus_doc_no == _outDO && _one.Tus_ser_id > 0 select _one).ToList();

                //    //Invoice header/Invoice Item/invoice auto number/inventory header/pick serial/pick serial sub/inventoru auto
                //    InvoiceHeader _hdr = _salesDAL.GetInvoiceHeader(_outInvoice);
                //    _hdr.Sah_dt = _date.Date;
                //    _hdr.Sah_inv_no = string.Empty;
                //    _hdr.Sah_inv_sub_tp = _inSubType;
                //    _hdr.Sah_direct = false;
                //    _hdr.Sah_pc = _profitcenter;
                //    _hdr.Sah_stus = "A";
                //    _hdr.Sah_cre_by = _createdBy;
                //    _hdr.Sah_cre_when = DateTime.Now;
                //    _hdr.Sah_mod_by = _createdBy;
                //    _hdr.Sah_mod_when = DateTime.Now;
                //    _hdr.Sah_ref_doc = _outInvoice;
                //    _hdr.Sah_anal_10 = 0;

                //    List<InvoiceItem> _itm = _salesDAL.GetInvoiceDetailByInvoice(_outInvoice);
                //    MasterAutoNumber _auto = new MasterAutoNumber();
                //    string _prefix = _salesDAL.GetInvoicePrefix(_company, _profitcenter, "HS");
                //    _auto.Aut_cate_cd = _profitcenter;
                //    _auto.Aut_cate_tp = "PC";
                //    _auto.Aut_direction = 0;
                //    _auto.Aut_moduleid = "REV";
                //    _auto.Aut_start_char = "INREV";
                //    _auto.Aut_year = null;

                //    List<InvoiceItem> _invItemSaveList = new List<InvoiceItem>();
                //    foreach (ReptPickSerials _Itm in _SRNList)
                //    {
                //        var _outinvItem = (from _l in _itm where _l.Sad_itm_line == _Itm.Tus_base_itm_line select _l).ToList();
                //        // _outinvItem.ForEach(x => { x.Sad_do_qty = 1; x.Sad_srn_qty = 1; });

                //        _invItemSaveList.AddRange(_outinvItem);
                //    }

                //    InventoryHeader _inventoryHeader = new InventoryHeader();
                //    _inventoryHeader.Ith_acc_no = _accountno;
                //    _inventoryHeader.Ith_com = _company;
                //    _inventoryHeader.Ith_cre_by = _createdBy;
                //    _inventoryHeader.Ith_cre_when = DateTime.Now;
                //    _inventoryHeader.Ith_direct = true;
                //    _inventoryHeader.Ith_doc_date = _date.Date;
                //    _inventoryHeader.Ith_doc_tp = "SRN";
                //    _inventoryHeader.Ith_doc_year = _date.Year;
                //    _inventoryHeader.Ith_loc = _location;
                //    _inventoryHeader.Ith_mod_by = _createdBy;
                //    _inventoryHeader.Ith_mod_when = DateTime.Now;
                //    _inventoryHeader.Ith_pc = _profitcenter;
                //    _inventoryHeader.Ith_stus = "A";
                //    _inventoryHeader.Ith_cate_tp = "NOR";
                //    _inventoryHeader.Ith_sub_tp = "NORMAL";
                //    _inventoryHeader.Ith_entry_no = _outInvoice;
                //    _inventoryHeader.Ith_manual_ref = _outDO;
                //    _inventoryHeader.Ith_oth_docno = _outDO;

                //    MasterAutoNumber _inventoryauto = new MasterAutoNumber();
                //    _inventoryauto.Aut_cate_cd = _location;
                //    _inventoryauto.Aut_cate_tp = "LOC";
                //    _inventoryauto.Aut_direction = 1;
                //    _inventoryauto.Aut_moduleid = "SRN";
                //    _inventoryauto.Aut_start_char = "SRN";

                //    foreach (InvoiceItem item in _invItemSaveList)
                //    {
                //        if (item.Sad_do_qty > 0)
                //        {

                //            item.Sad_srn_qty = item.Sad_do_qty;
                //            item.Sad_fws_ignore_qty = item.Sad_do_qty;
                //            item.Sad_do_qty = 0;

                //        }
                //        else
                //        {
                //            item.Sad_do_qty = 0;
                //            item.Sad_fws_ignore_qty = item.Sad_qty;
                //            item.Sad_srn_qty = item.Sad_qty;
                //        }
                //    }


                //    SaveReversalForCommon(_hdr, _invItemSaveList, _auto, false, out _crnote, _inventoryHeader, _SRNList, null, _inventoryauto, out _srnno);


                //    //ADDED 2013/06/20
                //    if (!string.IsNullOrEmpty(_srnno))
                //    {
                //        _salesDAL.UpdateInvoiceRevNo(_crnote, _srnno);
                //    }

                //    //call SaveReversal()
                //    if (string.IsNullOrEmpty(_creditNoteNoList))
                //        _creditNoteNoList = _crnote;
                //    else
                //        _creditNoteNoList += "," + _crnote;

                //    if (string.IsNullOrEmpty(_inventoryDocumentList))
                //        _inventoryDocumentList = _srnno;

                //}




                #endregion

                //------------------------------------EXO---------------------------------------
                #region  Invoice Entry

                InvoiceHeader _pureInvoiceHdr = _salesDAL.GetInvoiceHeader(_outInvoice);
                _pureInvoiceHdr.Sah_dt = _date.Date;
                _pureInvoiceHdr.Sah_inv_no = string.Empty;
                _pureInvoiceHdr.Sah_inv_sub_tp = _outSubType;
                _pureInvoiceHdr.Sah_direct = true;
                _pureInvoiceHdr.Sah_pc = _profitcenter;
                _pureInvoiceHdr.Sah_stus = "A";
                _pureInvoiceHdr.Sah_cre_by = _createdBy;
                _pureInvoiceHdr.Sah_cre_when = DateTime.Now;
                _pureInvoiceHdr.Sah_mod_by = _createdBy;
                _pureInvoiceHdr.Sah_mod_when = DateTime.Now;
                _pureInvoiceHdr.Sah_anal_10 = 0;
                _pureInvoiceHdr.Sah_del_loc = _location;

                MasterAutoNumber _pureAuto = new MasterAutoNumber();
                string _purePrefix = _salesDAL.GetInvoicePrefix(_company, _profitcenter, "HS");
                _pureAuto.Aut_cate_cd = _profitcenter;
                _pureAuto.Aut_cate_tp = "PC";
                _pureAuto.Aut_direction = 1;
                _pureAuto.Aut_moduleid = "HS";
                _pureAuto.Aut_start_char = _purePrefix;
                _pureAuto.Aut_year = _date.Year;

                string _pureInvoiceno = string.Empty;
                string _pureReceiptno = string.Empty;
                string _pureDOno = string.Empty;
                string _errorList = string.Empty;
                string _exOutItem = string.Empty;
                Int32 _exOutLine = 0;

                List<InvoiceItem> _tempOut = _salesDAL.GetInvoiceDetailByInvoice(_outInvoice);
                List<InvoiceItem> _outSaveItem = new List<InvoiceItem>();
                _outSaveItem = _outPureInvoiceItem;
                //Boolean _found = true;

                foreach (InvoiceItem _j in _outPureInvoiceItem)
                {
                    _exOutItem = _j.Sad_itm_cd;
                    _exOutLine = _j.Sad_itm_line;

                    var _record = (from _lst in _tempOut
                                   where _lst.Sad_itm_line != _j.Sad_itm_line
                                   select _lst).ToList();

                    if (_record.Count > 0)
                    {
                        foreach (InvoiceItem _I in _record)
                        {
                            _I.Sad_do_qty = 0;
                            _I.Sad_srn_qty = 0;
                            _outSaveItem.Add(_I);
                        }
                    }
                    goto L2;
                }

            L2: Int16 i = 0;

                //foreach (InvoiceItem _I in _tempOut)
                //{
                //    foreach (InvoiceItem _j in _outPureInvoiceItem)
                //    {
                //        _found = false;
                //        if (_I.Sad_itm_line == _j.Sad_itm_line)
                //        {
                //            _found = true;
                //            goto L2;
                //        }
                //        else
                //        {
                //            _found = false;

                //        }
                //    }
                //L2: Int16 i = 0;
                //    if (_found == false)
                //    {
                //        _I.Sad_do_qty = 0;
                //        _I.Sad_srn_qty = 0;
                //        _outSaveItem.Add(_I);
                //    }
                //}

                var _newDo = (from _lst in _reptSer
                              where _lst.Tus_itm_cd != _exOutItem && _lst.Tus_base_itm_line != _exOutLine
                              select _lst).ToList();

                if (_newDo.Count > 0)
                {
                    foreach (InvoiceItem _invItm in _outSaveItem)
                    {
                        decimal _doQty = _newDo.Where(x => (x.Tus_itm_cd == _invItm.Sad_itm_cd)).Sum(k => k.Tus_qty);
                        _invItm.Sad_do_qty = _doQty;
                    }
                    // _ccInvoiceItem.ForEach(x => x.Sad_do_qty = 0);
                    //Z- CC CHRG set do qty as 1
                    try
                    {
                        _outSaveItem.Where(x => x.Sad_itm_cd == "USAGE CHARGE").ToList<InvoiceItem>().ForEach(a => a.Sad_do_qty = 1);
                    }
                    catch
                    {
                    }

                    //CommonSaveInvoiceWithDeliveryOrder(_ccInvoiceHeader, _srnInvoiceItem, null, _ccReceiptHeader, _ccReceiptItem, _ccInv, _reptSer, null, _convertInvoiceAuto, _convertReceiptAuto, _invAuto, true, out _ccInvoiceNo, out _ccReceiptNo, out _ccDeliveryOrder, _inventoryDAL, _salesDAL, _inventoryRepDAL, false, false, out _error, false);
                    //CommonSaveInvoiceWithDeliveryOrder(_ccInvoiceHeader, _ccInvoiceItem, null, _ccReceiptHeader, _ccReceiptItem, null, null, null, _convertInvoiceAuto, _convertReceiptAuto, null, false, out _ccInvoiceNo, out _ccReceiptNo, out _ccDeliveryOrder, _inventoryDAL, _salesDAL, _inventoryRepDAL, false, false, out _error, false);
                    CommonSaveInvoiceWithDeliveryOrder(_pureInvoiceHdr, _outSaveItem, null, new RecieptHeader(), new List<RecieptItem>(), null, null, null, _pureAuto, null, null, false, out _pureInvoiceno, out _pureReceiptno, out _pureDOno, _inventoryDAL, _salesDAL, _inventoryRepDAL, false, false, out _errorList, true);
                    _newDo.ForEach(x => x.Tus_loc = _ccInv.Ith_loc);
                    List<ReptPickSerials> _srnSerials = new List<ReptPickSerials>();
                    foreach (ReptPickSerials _ser in _newDo)
                    {

                        ReptPickSerials _serial = _inventoryDAL.GetAvailableSerIDInformation(_ser.Tus_com, _ser.Tus_loc, _ser.Tus_itm_cd, _ser.Tus_ser_1, _ser.Tus_ser_2, _ser.Tus_ser_id.ToString());
                        _serial.Tus_base_itm_line = _ser.Tus_base_itm_line;
                        _srnSerials.Add(_serial);
                    }
                    _srnSerials.ForEach(x => x.Tus_base_doc_no = _pureInvoiceno);
                    int InventorySeqNo = _inventoryDAL.GetSerialID();
                    _newDo.ForEach(x => x.Tus_base_doc_no = _pureInvoiceno);
                    _newDo.ForEach(x => x.Tus_usrseq_no = InventorySeqNo);
                    _ccInv.Ith_pc = _pureInvoiceHdr.Sah_pc;
                    _ccInv.Ith_oth_docno = _pureInvoiceno;
                    _ccInv.Ith_seq_no = InventorySeqNo;
                    InventoryBLL _bll = new InventoryBLL();
                    string _doNo;
                    _bll.DeliveryOrderInterCompany(_ccInv, _srnSerials, null, _invAuto, out  _doNo, _inventoryRepDAL, _inventoryDAL);

                }
                //SAVE WITHOUT DO
                //if has not delivered item
                else
                {
                    CommonSaveInvoiceWithDeliveryOrder(_pureInvoiceHdr, _outSaveItem, null, new RecieptHeader(), new List<RecieptItem>(), null, null, null, _pureAuto, null, null, false, out _pureInvoiceno, out _pureReceiptno, out _pureDOno, _inventoryDAL, _salesDAL, _inventoryRepDAL, false, false, out _errorList, true);
                }

                //CommonSaveInvoiceWithDeliveryOrder(_pureInvoiceHdr, _outSaveItem, null, new RecieptHeader(), new List<RecieptItem>(), null, null, null, _pureAuto, null, null, false, out _pureInvoiceno, out _pureReceiptno, out _pureDOno, _inventoryDAL, _salesDAL, _inventoryRepDAL, false, false, out _errorList, true);

                if (!string.IsNullOrEmpty(_errorList))
                {

                    _salesDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                    _inventoryRepDAL.TransactionRollback();
                    _fmsInventoryDal.TransactionRollback();
                    _generalDAL.TransactionRollback();
                    _creditnotelist = "";
                    _inventorydoclist = "";
                    _diriya = "";
                    _invNo = "";
                    return -1;

                }

                //call public void CommonSaveInvoiceWithDeliveryOrder(InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, List<InvoiceSerial> _invoiceSerial, RecieptHeader _recieptHeader, List<RecieptItem> _recieptItem, InventoryHeader _inventoryHeader, List<ReptPickSerials> _pickSerial, List<ReptPickSerialsSub> _pickSubSerial, MasterAutoNumber _invoiceAuto, MasterAutoNumber _recieptAuto, MasterAutoNumber _inventoryAuto, bool _isDeliveryNow, out  string _invoiceNo, out string _receiptNo, out string _deliveryOrder, InventoryDAL _invDAL, SalesDAL _salDAL, ReptCommonDAL _invRepDAL, bool _isHold, bool _isHoldInvoiceProcess, out string _errorlist)

                if (string.IsNullOrEmpty(_creditNoteNoList))
                    _creditNoteNoList = "Issued Invoice : " + _pureInvoiceno;
                else
                    _creditNoteNoList += ",Issued Invoice : " + _pureInvoiceno;

                #endregion

                _creditNoteNoList += "Issue Receipts : -";

                //HP TRANSACTION AUTONUMBER
                MasterAutoNumber _transactionAuto = new MasterAutoNumber();
                _transactionAuto.Aut_cate_cd = _newAccount.Hpa_pc;
                _transactionAuto.Aut_cate_tp = "PC";
                _transactionAuto.Aut_direction = 1;
                _transactionAuto.Aut_modify_dt = null;
                _transactionAuto.Aut_moduleid = "HP";
                _transactionAuto.Aut_number = 0;
                _transactionAuto.Aut_start_char = "HPT";
                _transactionAuto.Aut_year = null;
                List<HpTransaction> _transactionList = new List<HpTransaction>();

                #region  Receipt Entry - for the new invoice
                if (receiptHeaderList != null)
                {
                    foreach (RecieptHeader _recieptHeader in receiptHeaderList)
                    {   //create MST_AUTO number for receipt table
                        string recType = _recieptHeader.Sar_receipt_type;
                        if (_recieptHeader.Sar_receipt_type == "HPRS")
                        {
                            _recieptHeader.Sar_receipt_type = "HPDPS";
                            receipAuto.Aut_start_char = "HPDPM";
                        }
                        else
                        {
                            _recieptHeader.Sar_receipt_type = "HPDPM";
                            receipAuto.Aut_start_char = "HPDPM";
                        }
                        _recieptHeader.Sar_receipt_date = _date;
                        _recieptHeader.Sar_anal_5 = _newAccount.Hpa_dp_comm;
                        _recieptHeader.Sar_is_oth_shop = false;
                        //receipAuto.Aut_year = _date.Year;
                        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(receipAuto.Aut_moduleid, receipAuto.Aut_direction, receipAuto.Aut_start_char, receipAuto.Aut_cate_tp, receipAuto.Aut_cate_cd, receipAuto.Aut_modify_dt, receipAuto.Aut_year);
                        string _cusNo = receipAuto.Aut_cate_cd + "-" + "HPDPM" + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(receipAuto);//update MST_AUTO table

                        _recieptHeader.Sar_receipt_no = _cusNo;

                        Int32 RecieptSeqNo = 0;
                        RecieptSeqNo = _inventoryDAL.GetSerialID(); //will be assign to header after looping transaction list.

                        Int32 line = 0;
                        foreach (RecieptItem _itm in receipItemList)
                        {
                            if (_recieptHeader.Sar_seq_no == _itm.Sard_seq_no)//have to check the prefix also?
                            {
                                line++;
                                _itm.Sard_seq_no = RecieptSeqNo;
                                _itm.Sard_line_no = line;
                                _itm.Sard_receipt_no = _recieptHeader.Sar_receipt_no;
                            }
                        }
                        _recieptHeader.Sar_seq_no = RecieptSeqNo;

                        _recieptHeader.Sar_esd_rate = 0;
                        _recieptHeader.Sar_epf_rate = 0;
                        _recieptHeader.Sar_wht_rate = 0;


                        HpTransaction _transaction = new HpTransaction();
                        _transaction.Hpt_acc_no = _newAccount.Hpa_acc_no;
                        _transaction.Hpt_ars = 0;
                        _transaction.Hpt_bal = 0;
                        _transaction.Hpt_txn_dt = _date;
                        _transaction.Hpt_com = _newAccount.Hpa_com;
                        _transaction.Hpt_crdt = _recieptHeader.Sar_tot_settle_amt;
                        _transaction.Hpt_cre_by = _newAccount.Hpa_cre_by;
                        _transaction.Hpt_cre_dt = _date;
                        _transaction.Hpt_dbt = 0;
                        _transaction.Hpt_txn_tp = _recieptHeader.Sar_receipt_type;
                        _transaction.Hpt_desc = "DOWN PAYMENT";
                        _transaction.Hpt_pc = _newAccount.Hpa_pc;
                        _transaction.Hpt_mnl_ref = _recieptHeader.Sar_prefix + "-" + _recieptHeader.Sar_manual_ref_no;
                        _transaction.Hpt_txn_ref = _recieptHeader.Sar_receipt_no;

                        _transactionList.Add(_transaction);

                        _salesDAL.SaveReceiptHeader(_recieptHeader);//save receipt header

                        MasterCompany _masterComp = _generalDAL.GetCompByCode(_recieptHeader.Sar_com_cd);  //kapila 27/4/2016
                        if (_masterComp.MC_IS_SCM2_FMS == 1)
                            _inventoryDAL.UpdateManualDocNo(_location, recType, Convert.ToInt32(_recieptHeader.Sar_manual_ref_no), _recieptHeader.Sar_receipt_no);//do the updation at the gnt_man_doc_dt
                        else
                            _fmsInventoryDal.UpdateManualDocNo(_location, recType, Convert.ToInt32(_recieptHeader.Sar_manual_ref_no), _recieptHeader.Sar_receipt_no);//do the updation at the gnt_man_doc_dt




                        if (string.IsNullOrEmpty(_creditNoteNoList))
                            _creditNoteNoList = " " + _cusNo;
                        else
                            _creditNoteNoList += ", " + _cusNo;

                        _recNo = _cusNo;
                    }
                }


                //save receipt detali list
                if (receipItemList != null)
                    if (receipItemList.Count > 0)
                        foreach (RecieptItem rec_itm in receipItemList)
                            _salesDAL.SaveReceiptItem(rec_itm);


                #endregion

                //Account Log EXI entry 
                //2013/01/29
                Int32 _otherSeqno = _inventoryDAL.GetSerialID();
                _accLog.Hal_invc_no = _invoiceNo;//_crnote;
                _accLog.Hal_seq_no = _otherSeqno;
                _newAccount.Hpa_seq_no = _otherSeqno;

                #region  Re-schadule the hire sale history
                //ADDED 2013/01/29
                //HP Account Log EXO Entry
                _otherSeqno = _inventoryDAL.GetSerialID();


                HpAccount _acc = _salesDAL.GetHP_Account_onAccNo(_accLog.Hal_acc_no);

                //HP TRANSACTION OBEX RECORD

                if (_acc.Hpa_hp_val > _newAccount.Hpa_hp_val)
                {
                    HpTransaction _transaction = new HpTransaction();
                    _transaction.Hpt_acc_no = _newAccount.Hpa_acc_no;
                    _transaction.Hpt_ars = 0;
                    _transaction.Hpt_bal = 0;
                    _transaction.Hpt_com = _newAccount.Hpa_com;
                    _transaction.Hpt_crdt = _acc.Hpa_hp_val - _newAccount.Hpa_hp_val;
                    _transaction.Hpt_cre_by = _newAccount.Hpa_cre_by;
                    _transaction.Hpt_cre_dt = _date;
                    _transaction.Hpt_txn_tp = "OBEX";
                    _transaction.Hpt_desc = "Exchange Balance Adjustment";
                    _transaction.Hpt_pc = _newAccount.Hpa_pc;
                    _transaction.Hpt_txn_dt = _date;
                    _transactionList.Add(_transaction);

                }
                else
                {
                    HpTransaction _transaction = new HpTransaction();
                    _transaction.Hpt_acc_no = _newAccount.Hpa_acc_no;
                    _transaction.Hpt_ars = 0;
                    _transaction.Hpt_bal = 0;
                    _transaction.Hpt_com = _newAccount.Hpa_com;
                    _transaction.Hpt_dbt = _newAccount.Hpa_hp_val - _acc.Hpa_hp_val;
                    _transaction.Hpt_cre_by = _newAccount.Hpa_cre_by;
                    _transaction.Hpt_cre_dt = _date;
                    _transaction.Hpt_txn_dt = _date;
                    _transaction.Hpt_txn_tp = "OBEX";
                    _transaction.Hpt_desc = "Exchange Balance Adjustment";
                    _transaction.Hpt_pc = _newAccount.Hpa_pc;
                    _transactionList.Add(_transaction);
                }

                _salesDAL.UpdateResheduleAccLog(_pureInvoiceHdr.Sah_dt, _acc.Hpa_acc_no);

                HPAccountLog _accLogEXO = new HPAccountLog();
                _accLogEXO.Hal_seq_no = _inventoryDAL.GetSerialID();
                _accLogEXO.Hal_acc_no = _newAccount.Hpa_acc_no;
                _accLogEXO.Hal_af_val = _newAccount.Hpa_af_val;
                _accLogEXO.Hal_bank = _newAccount.Hpa_bank;
                _accLogEXO.Hal_buy_val = _newAccount.Hpa_buy_val;
                _accLogEXO.Hal_cash_val = _newAccount.Hpa_cash_val;
                _accLogEXO.Hal_cls_dt = _newAccount.Hpa_cls_dt;
                _accLogEXO.Hal_com = _newAccount.Hpa_com;
                _accLogEXO.Hal_cre_by = _newAccount.Hpa_cre_by;
                _accLogEXO.Hal_cre_dt = _newAccount.Hpa_cre_dt;
                _accLogEXO.Hal_dp_comm = _newAccount.Hpa_dp_comm;
                _accLogEXO.Hal_dp_val = _newAccount.Hpa_dp_val;
                _accLogEXO.Hal_ecd_stus = _newAccount.Hpa_ecd_stus;
                _accLogEXO.Hal_ecd_tp = _newAccount.Hpa_ecd_tp;
                _accLogEXO.Hal_flag = _newAccount.Hpa_flag;
                _accLogEXO.Hal_grup_cd = _newAccount.Hpa_grup_cd;
                _accLogEXO.Hal_hp_val = _newAccount.Hpa_hp_val;
                _accLogEXO.Hal_init_ins = _newAccount.Hpa_init_ins;
                _accLogEXO.Hal_init_ser_chg = _newAccount.Hpa_init_ser_chg;
                _accLogEXO.Hal_init_stm = _newAccount.Hpa_init_stm;
                _accLogEXO.Hal_init_vat = _newAccount.Hpa_init_vat;
                _accLogEXO.Hal_inst_comm = _newAccount.Hpa_inst_comm;
                _accLogEXO.Hal_inst_ins = _newAccount.Hpa_inst_ins;
                _accLogEXO.Hal_inst_ser_chg = _newAccount.Hpa_inst_ser_chg;
                _accLogEXO.Hal_inst_stm = _newAccount.Hpa_inst_stm;
                _accLogEXO.Hal_inst_vat = _newAccount.Hpa_inst_vat;
                _accLogEXO.Hal_intr_rt = _newAccount.Hpa_intr_rt;
                _accLogEXO.Hal_invc_no = _pureInvoiceno;
                _accLogEXO.Hal_is_rsch = _newAccount.Hpa_is_rsch;
                _accLogEXO.Hal_log_dt = _date;
                _accLogEXO.Hal_mgr_cd = _newAccount.Hpa_mgr_cd;
                _accLogEXO.Hal_net_val = _newAccount.Hpa_net_val;
                _accLogEXO.Hal_oth_chg = _newAccount.Hpa_oth_chg;
                _accLogEXO.Hal_pc = _newAccount.Hpa_pc;
                _accLogEXO.Hal_rev_stus = false;
                _accLogEXO.Hal_rls_dt = _newAccount.Hpa_rls_dt;
                _accLogEXO.Hal_rsch_dt = _newAccount.Hpa_rsch_dt;
                _accLogEXO.Hal_rv_dt = _newAccount.Hpa_rv_dt;
                _accLogEXO.Hal_sa_sub_tp = "EXO";
                _accLogEXO.Hal_sch_cd = _newAccount.Hpa_sch_cd;
                _accLogEXO.Hal_sch_tp = _newAccount.Hpa_sch_tp;
                _accLogEXO.Hal_seq = _newAccount.Hpa_seq;
                _accLogEXO.Hal_ser_chg = _newAccount.Hpa_ser_chg;
                _accLogEXO.Hal_stus = _newAccount.Hpa_stus;
                _accLogEXO.Hal_tc_val = _newAccount.Hpa_tc_val;
                _accLogEXO.Hal_term = _newAccount.Hpa_term;
                _accLogEXO.Hal_tot_intr = _newAccount.Hpa_tot_intr;
                _accLogEXO.Hal_tot_vat = _newAccount.Hpa_tot_vat;
                _accLogEXO.Hal_val_01 = _newAccount.Hpa_val_01;
                _accLogEXO.Hal_val_02 = _newAccount.Hpa_val_02;
                _accLogEXO.Hal_val_03 = _newAccount.Hpa_val_03;
                _accLogEXO.Hal_val_04 = _newAccount.Hpa_val_04;
                _accLogEXO.Hal_val_05 = _newAccount.Hpa_val_05;
                _accLogEXO.Hal_init_stm = _newAccount.Hpa_init_stm;
                _accLogEXO.Hal_inst_stm = _newAccount.Hpa_inst_stm;
                _accLogEXO.Hpa_acc_cre_dt = _newAccount.Hpa_acc_cre_dt.Date;


                _salesDAL.SaveHPAccountLog(_accLog);
                //Comment by darshana 29-05-2014 - After discuss with Mr. dilanda 
                //_salesDAL.UpdateResheduleAccLog(_date.Date, _accLog.Hal_acc_no);
                _salesDAL.UpdateAccLogClsDt(_date.Date, _accLog.Hal_acc_no, _accLog.Hal_com);

                _accLog.Hal_seq_no = _otherSeqno;
                _newAccount.Hpa_seq_no = _otherSeqno;
                _salesDAL.SaveHPAccountLog(_accLogEXO);
                _salesDAL.UpdateHPAccountReschedule(_newAccount);
                // _salesDAL.SaveHPAccount(_newAccount);
                //END


                foreach (HpSheduleDetails sch in _currentSchedule)
                {
                    HpScheduleDetailLog _log = new HpScheduleDetailLog();
                    _log.Hsh_acc_no = sch.Hts_acc_no;
                    _log.Hsh_cre_by = sch.Hts_cre_by;
                    _log.Hsh_cre_dt = sch.Hts_cre_dt;
                    _log.Hsh_dt = DateTime.Now;
                    _log.Hsh_due_dt = sch.Hts_due_dt;
                    _log.Hsh_ins = sch.Hts_ins;
                    _log.Hsh_intr = sch.Hts_intr;
                    _log.Hsh_rnt_no = sch.Hts_rnt_no;
                    _log.Hsh_rnt_val = sch.Hts_rnt_val;
                    _log.Hsh_sdt = sch.Hts_sdt;
                    _log.Hsh_seq = _inventoryDAL.GetSerialID();
                    _log.Hsh_ser = sch.Hts_ser;
                    _log.Hsh_vat = sch.Hts_vat;

                    _salesDAL.SaveHPScheduleLog(_log);
                }


                //delete
                _salesDAL.DeleteHPSchedule(_acc.Hpa_acc_no);
                foreach (HpSheduleDetails sch in _newSchedule)
                {
                    sch.Hts_seq = _inventoryDAL.GetSerialID();
                    _salesDAL.SaveHpShedule(sch);
                }



                //insert hpinsurance
                if (_insurance != null)
                {
                    //add reverse
                    HpInsurance _insu = _salesDAL.GetLatestInsurance(_insurance.Hti_acc_num);
                    if (_insu != null)
                    {
                        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_insuranceAuto.Aut_moduleid, _insuranceAuto.Aut_direction, _insuranceAuto.Aut_start_char, _insuranceAuto.Aut_cate_tp, _insuranceAuto.Aut_cate_cd, _insuranceAuto.Aut_modify_dt, _insuranceAuto.Aut_year);
                        string _cusNo = _insuranceAuto.Aut_cate_cd + "-" + _insuranceAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_insuranceAuto);
                        _insu.Hti_seq = _inventoryDAL.GetSerialID();
                        _insu.Hti_ref = _cusNo;
                        _insu.Hit_is_rvs = true;
                        _insu.Hti_mnl_num = _cusNo;
                        _insu.Hti_dt = _date.Date;
                        _salesDAL.Save_HpInsu(_insu);
                    }


                    MasterAutoNumber _number1 = _inventoryDAL.GetAutoNumber(_insuranceAuto.Aut_moduleid, _insuranceAuto.Aut_direction, _insuranceAuto.Aut_start_char, _insuranceAuto.Aut_cate_tp, _insuranceAuto.Aut_cate_cd, _insuranceAuto.Aut_modify_dt, _insuranceAuto.Aut_year);
                    string _cusNo1 = _insuranceAuto.Aut_cate_cd + "-" + _insuranceAuto.Aut_start_char + "-" + _number1.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_insuranceAuto);

                    _insurance.Hti_seq = _inventoryDAL.GetSerialID();
                    _insurance.Hti_ref = _cusNo1;
                    _insurance.Hti_mnl_num = _cusNo1;
                    _salesDAL.Save_HpInsu(_insurance);
                    _diriya = _cusNo1;
                }
                else
                {
                    _diriya = "";
                }

                #endregion


                #region save hptransaction

                if (_transactionList != null && _transactionList.Count > 0)
                {
                    foreach (HpTransaction _transaction in _transactionList)
                    {
                        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_transactionAuto.Aut_moduleid, _transactionAuto.Aut_direction, _transactionAuto.Aut_start_char, _transactionAuto.Aut_cate_tp, _transactionAuto.Aut_cate_cd, _transactionAuto.Aut_modify_dt, _transactionAuto.Aut_year);
                        string _cusNo1 = _transactionAuto.Aut_cate_cd + "-" + _transactionAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_transactionAuto);//update MST_AUTO table
                        _transaction.Hpt_seq = _inventoryDAL.GetSerialID();
                        _transaction.Hpt_ref_no = _cusNo1;

                        _salesDAL.Save_HpTransaction(_transaction);
                    }
                }

                #endregion

                //ADDED 2013/05/31
                //REQUEST FINISH
                _generalDAL.UpdateApprovalStatus(_request);

                //_salesDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                //_inventoryRepDAL.ConnectionClose();
                //_fmsInventoryDal.ConnectionClose();
                //_generalDAL.ConnectionClose();

                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();
                _generalDAL.TransactionCommit();
                _effect = 1;
                _creditnotelist = _creditNoteNoList;
                _inventorydoclist = _inventoryDocumentList;
                _invNo = _pureInvoiceno;
                if (string.IsNullOrEmpty(_recNo))
                {
                    _recNo = "";
                }

            }
            catch (Exception ex)
            {
                _effect = -1;
                _creditnotelist = "";
                _inventorydoclist = "";
                _invNo = "";
                _diriya = "";
                _recNo = ex.Message.ToString();
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                _generalDAL.TransactionRollback();
            }

            return _effect;
        }

        //darshana 27/08/2012
        public HpSchemeType getSchemeType(string _type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getSchemeType(_type);
        }

        public DataTable GetExternalVehicalJob(string _company, string _loc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetExternalVehicalJob(_company, _loc);
        }

        #region Hp Acc Restriction
        public Int32 SaveAccRestriction(List<AccountRestriction> _accRestList)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                foreach (AccountRestriction _accRest in _accRestList)
                {
                    effect = effect + _salesDAL.SaveAccRestriction(_accRest);
                }
                // _salesDAL.ConnectionClose();
                _salesDAL.TransactionCommit();
                //return effect;
            }
            catch (Exception ex)
            {
                effect = -1;
                //return effect;
                _salesDAL.TransactionRollback();
            }
            return effect;
        }

        public DataTable GetPC_from_Hierachy(string com, string channel, string subChannel, string area, string region, string zone, string pc_code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPC_from_Hierachy(com, channel, subChannel, area, region, zone, pc_code);
        }

        public DataTable GetPC_from_Hierachy_Rep(string user, string com, string channel, string subChannel, string area, string region, string zone, string pc_code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPC_from_Hierachy_Rep(user, com, channel, subChannel, area, region, zone, pc_code);
        }

        public DataTable GetLoc_from_Hierachy_Rep(string user, string com, string channel, string subChannel, string area, string region, string zone, string pc_code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetLoc_from_Hierachy_Rep(user, com, channel, subChannel, area, region, zone, pc_code);
        }
        public DataTable GetLoc_from_Hierachy_Rep_all(string com, string channel, string subChannel, string area, string region, string zone, string pc_code)
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("LocHeirarchySearch") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetLoc_from_Hierachy_Rep_all(com, channel, subChannel, area, region, zone, pc_code);
        }

        #endregion Hp Acc Restriction

        //sachith 2012/09/08
        public Int32 GetDOPbCount(string _com, string _pb, string _pb_level)
        {
            Int32 effected;
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            effected = _salesDAL.GetDOPbCount(_com, _pb, _pb_level);
            _salesDAL.ConnectionClose();
            return effected;
        }

        //written by darshana 11/09/2012
        public VehicalRegistration CheckPrvRegDetails(string _engine, string _item, string _com, Int32 _status)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.CheckPrvRegDetails(_engine, _item, _com, _status);
        }

        public bool CheckItemStatus(string _company, string _book, string _level, string _status)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.CheckItemStatus(_company, _book, _level, _status);
        }

        //written by darshana 11/09/2012
        public VehicleInsuarance CheckPrvInsDetails(string _engine, string _item, string _com, Int32 _status)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.CheckPrvInsDetails(_engine, _item, _com, _status);
        }

        public List<ReptPickSerials> GetStatusGodSerial(string company, string location, string itemCode, string pbook, string pblvl, string itemstatus)
        {
            //Edit code by Chamal 13-11-2012
            InventoryDAL _inventoryDAL = new InventoryDAL();
            _salesDAL = new SalesDAL();
            List<ReptPickSerials> _list = new List<ReptPickSerials>();
            List<PriceBookLevelRef> _pblvls = new List<PriceBookLevelRef>();
            //modifyrukshan 14/jan/2016 add 2 param
            _list = _inventoryDAL.Search_serials_for_itemCD(company, location, itemCode, pbook, pblvl, "", false);

            List<ReptPickSerials> _list1 = new List<ReptPickSerials>();

            if (_list != null)
            {
                //add code by Chamal 27-07-2013
                _pblvls = _salesDAL.GetPriceLevelList(company, pbook, pblvl);
                var _listSerials = from list1Item in _list
                                   join list2Item in _pblvls on list1Item.Tus_itm_stus equals list2Item.Sapl_itm_stuts
                                   select list1Item;
                _list1 = _listSerials.ToList();

                //for (int i = 0; i < _list.Count; i++)
                //{
                //    //if (_list[i].Tus_itm_stus != "GOD")
                //    if (_list[i].Tus_itm_stus != itemstatus)
                //        _list.RemoveAt(i);
                //}

            }
            return _list1;
        }

        public MasterVehicalInsuranceDefinition GetVehInsAmtDirect(string _com, string _pc, string _salesTP, string _insCom, string _insPol, string _itm, DateTime _date, Int32 _tearm)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehInsAmtDirect(_com, _pc, _salesTP, _insCom, _insPol, _itm, _date, _tearm);
        }

        public VehicalRegistrationDefnition GetVehRegAmtDirect(string _com, string _pc, string _type, string _itm, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehRegAmtDirect(_com, _pc, _type, _itm, _date);
        }

        //darshana 15-08-2012
        public List<RecieptHeader> GetReceiptBydaterange(string _com, string _pc, DateTime _from, DateTime _to, string _type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReceiptBydaterange(_com, _pc, _from, _to, _type);
        }

        public List<RecieptHeader> GetReceiptBydaterangeExpired(string _com, string _pc, DateTime _from, DateTime _to, string _type, string _recno)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReceiptBydaterangeExpired(_com, _pc, _from, _to, _type, _recno);
        }

        public List<RecieptHeader> GetReceiptBydaterangeItem(string _com, string _pc, DateTime _from, DateTime _to, string _type, string _recno)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReceiptBydaterangeItem(_com, _pc, _from, _to, _type, _recno);
        }

        public Int32 Update_ReceiptItemExpriryDate(string _com, string _recNo, DateTime _Todate, DateTime _serDate, DateTime _refDate)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            int result = 0;

            using (TransactionScope _tr = new TransactionScope())
            {
                result = _salesDAL.Update_ReceiptItemExpriryDate(_com, _recNo, _Todate, _serDate, _refDate);
                _tr.Complete();
            }
            _salesDAL.ConnectionClose();
            return result;
        }

        public Int32 Update_ReceiptItemSerial(string _com, string _recNo, string _reqNo)
        {
            _salesDAL = new SalesDAL();
            _generalDAL = new GeneralDAL();
            _salesDAL.ConnectionOpen();
            _generalDAL.ConnectionOpen();
            _inventoryDAL = new InventoryDAL();
            int result = 0;
            Int32 _line = 0;
            Int32 _seqno = 0;
            List<RequestApprovalSerials> Listrec = new List<RequestApprovalSerials>();
            MasterItem _itemList = new MasterItem();

            using (TransactionScope _tr = new TransactionScope())
            {
                result = _salesDAL.Update_ReceiptItemSerial(_com, _recNo);

                DataTable _dtlrec = _salesDAL.GetReceiptByRecNo(_recNo);
                if (_dtlrec.Rows.Count > 0)
                {
                    _seqno = Convert.ToInt32(_dtlrec.Rows[0]["sar_seq_no"].ToString());
                }
                _generalDAL.Get_gen_reqapp_ser(_com, _reqNo, out Listrec);
                foreach (RequestApprovalSerials ser in Listrec)
                {
                    _itemList = _inventoryDAL.GetItem(_com, ser.Gras_anal2);
                    if (_seqno != 0)
                    {
                        _salesDAL.SaveReceiptItemDetails(_seqno, _line, _recNo, ser.Gras_anal2, _itemList.Mi_shortdesc, _itemList.Mi_model, ser.Gras_anal3, null, null, 0, null, null, 0, 0, 0, null, null);
                        _line = _line + 1;
                    }
                }


                _tr.Complete();
            }
            _salesDAL.ConnectionClose();
            _generalDAL.ConnectionClose();
            return result;
        }


        //darshana 18/09/2012
        public List<RecieptItem> GetAllReceiptItems(string _rec)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAllReceiptItems(_rec);
        }

        public DataTable GetSAllchemeCategoryies(string _code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSAllchemeCategoryies(_code);
        }

        public DataTable GetSchemes(string _type, string _code)
        {

            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchemes(_type, _code);
        }

        public DataTable GetPendingInvoiceItemsByItemDT(string _inv, string _itemcode)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPendingInvoiceItemsByItemDT(_inv, _itemcode);
        }

        public PriceDetailRef GetPriceDetailByItemLineSeq(string _item, Int32 _itemline, Int32 _pbseq)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceDetailByItemLineSeq(_item, _itemline, _pbseq);
        }

        public Int32 Save_TEMP_PC_LOC(string username, string com, string pc, string loc)//FOR HP CLOSING BALANCE
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int32 effect1 = 0;
            effect1 = _salesDAL.Save_TEMP_PC_LOC(username, com, pc, loc);
            _salesDAL.ConnectionClose();
            return effect1;
        }

        public Int32 Delete_TEMP_PC_LOC(string userid, string com, string _pc, string loc)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int32 effect1 = _salesDAL.Delete_TEMP_PC_LOC(userid, com, _pc, loc);
            _salesDAL.ConnectionClose();
            return effect1;
        }

        public Int32 Save_TEMP_PC_LOC_RPTDB(string username, string com, string pc, string loc)//FOR HP CLOSING BALANCE
        {
            //_salesDAL = new SalesDAL();
            //_salesDAL.ConnectionOpen();
            _inventoryRepDAL = new ReptCommonDAL(); _inventoryRepDAL.ConnectionOpen();
            Int32 effect1 = 0;
            effect1 = _inventoryRepDAL.Save_TEMP_PC_LOC(username, com, pc, loc);
            _inventoryRepDAL.ConnectionClose();
            return effect1;
        }

        public Int32 Delete_TEMP_PC_LOC_RPTDB(string userid, string com, string _pc, string loc)
        {
            //_salesDAL = new SalesDAL();
            //_salesDAL.ConnectionOpen();
            _inventoryRepDAL = new ReptCommonDAL(); _inventoryRepDAL.ConnectionOpen();
            Int32 effect1 = _inventoryRepDAL.Delete_TEMP_PC_LOC(userid, com, _pc, loc);
            _inventoryRepDAL.ConnectionClose();
            return effect1;
        }

        public List<HpSchemeType> GetSchemeTypeByCategory(string _cat)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchemeTypeByCategory(_cat);
        }

        public Int32 SaveCashConv(string scheme, string parttype, string partycode, string pb, string pblvl, CashConversionDefinition _cashdef)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            return _salesDAL.SaveCashConv(scheme, parttype, partycode, pb, pblvl, _cashdef);
        }

        public DataTable GetInvRep(string _inv)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvRep(_inv);
        }

        //kapila 3/10/2012
        public int Process_DayEnd_Commission(string _com, string _pc, DateTime _date, out string _strMsg)
        {
            int _eff = 0;
            int _needCashComDef = 0;
            int _needCredComDef = 0;
            string _zone = "";
            string _area = "";
            string _reg = "";
            string _gpc = "";
            string _comp = "";
            string _chnl = "";
            string _schnl = "";
            _strMsg = "";

            SalesDAL _salDAL = new SalesDAL(); _salDAL.ConnectionOpen();

            InventoryDAL _invDAL = new InventoryDAL();

            //check this chanel need commission definition  2/7/2014
            DataTable _dtChnl = _salDAL.GetChanelOnPC(_com, _pc, "CHNL");
            DataTable _dtComm = _salDAL.GetChanelData(_com, _dtChnl.Rows[0]["mpi_val"].ToString());
            if (Convert.ToInt32(_dtComm.Rows[0]["MSC_IS_CASHCOM_MAN"]) == 1)
                _needCashComDef = 1;
            if (Convert.ToInt32(_dtComm.Rows[0]["MSC_IS_CREDCOM_MAN"]) == 1)
                _needCredComDef = 1;

            //cash sales commissions--------------------------------------------------------------
            #region cash sales
            List<InvoiceHeader> _ListInv = _salDAL.GetCommissionInvoices(_com, _pc, _date, "CS");

            if (_ListInv != null)
            {
                //invoices
                for (int i = 0; i < _ListInv.Count; i++)
                {
                    List<SaleCommission> _saveCommission = new List<SaleCommission>();

                    //get executive
                    DataTable _tbl = _salDAL.GetEmployee(_ListInv[i].Sah_com, _ListInv[i].Sah_sales_ex_cd);
                    string _executiveType = string.Empty;
                    foreach (DataRow _r in _tbl.Rows)
                    {
                        _executiveType = Convert.ToString(_r["esep_cat_cd"]);
                    }

                    if (Convert.ToBoolean(_ListInv[i].Sah_direct) == true)
                    {
                        //get receipts
                        List<RecieptItem> _ListRecItem = _salDAL.GetReceiptItemsByInvoice(_ListInv[i].Sah_inv_no);

                        List<InvoiceItem> _ListInvDet = new List<InvoiceItem>();
                        _ListInvDet = _salDAL.GetCommissionInvoicesItems(_ListInv[i].Sah_inv_no);
                        //invoice Details
                        if (_ListInvDet != null)
                        {
                            for (int x = 0; x < _ListInvDet.Count; x++)
                            {
                                //decimal _totalNetValue = _ListInvDet.Sum(y => y.Sad_unit_rt * y.Sad_qty - y.Sad_disc_amt + y.Sad_itm_tax_amt);  COMENTED BY KAPILA - INSTRUCT BY DILANDA 25/11/2016
                                decimal _totalNetValue = _ListInvDet.Sum(y => y.Sad_tot_amt);

                                MasterItem _item = _invDAL.GetItem(_ListInv[i].Sah_com, _ListInvDet[x].Sad_itm_cd);
                                string _discountSeq = "";
                                bool _isPromo = false;
                                try
                                {
                                    _discountSeq = _ListInvDet[x].Sad_dis_seq.ToString();
                                    _isPromo = _ListInvDet[x].Sad_dis_type == "P" ? true : false;
                                }
                                catch (Exception) { _discountSeq = "0"; _isPromo = false; }

                                //kapila 20/1/2015 get serial
                                string _serial = "";
                                DataTable _dtSer = _salDAL.getSerialByInvLine(_ListInvDet[x].Sad_inv_no, _ListInvDet[x].Sad_itm_line);
                                if (_dtSer.Rows.Count > 0)
                                    _serial = _dtSer.Rows[0]["its_ser_1"].ToString();

                                Dictionary<ItemHierarchyElement, string> _itemHierarchyElement = new Dictionary<ItemHierarchyElement, string>();
                                _itemHierarchyElement.Add(ItemHierarchyElement.DISCOUNT, _discountSeq);
                                _itemHierarchyElement.Add(ItemHierarchyElement.BRAND, _item.Mi_brand);
                                _itemHierarchyElement.Add(ItemHierarchyElement.ITEM, _item.Mi_cd);
                                _itemHierarchyElement.Add(ItemHierarchyElement.MAIN_CATEGORY, _item.Mi_cate_1);
                                _itemHierarchyElement.Add(ItemHierarchyElement.PRICE_BOOK, _ListInvDet[x].Sad_pbook);
                                _itemHierarchyElement.Add(ItemHierarchyElement.PRICE_LEVEL, _ListInvDet[x].Sad_pb_lvl);
                                _itemHierarchyElement.Add(ItemHierarchyElement.PROMOTION, _ListInvDet[x].Sad_promo_cd);
                                _itemHierarchyElement.Add(ItemHierarchyElement.SERIAL, _serial);
                                _itemHierarchyElement.Add(ItemHierarchyElement.SUB_CATEGORY, _item.Mi_cate_2);

                                List<CashCommissionDetailRef> _listCommCE = null;     //kapila 20/12/2013


                                List<CashCommissionDetailRef> _CashCommissionDetail = GetCommissionStructure(_ListInv[i].Sah_com, _ListInv[i].Sah_pc, _ListInv[i].Sah_inv_tp, _ListInv[i].Sah_dt, _ListInvDet[x].Sad_pbook, _ListInvDet[x].Sad_pb_lvl, _ListInv[i].Sah_sales_ex_cd, _executiveType, _itemHierarchyElement, "PC_PRIT_HIERARCHY", "PC", out _listCommCE, _isPromo);
                                List<SaleCommission> _commission = null;

                                //commission calculation
                                if (_CashCommissionDetail != null)
                                {
                                    if (_CashCommissionDetail.Count > 0)
                                    {
                                        if (_listCommCE != null)
                                        {
                                            //_commission = GetCalculatedCommission(_ListInvDet[x].Sad_itm_cd, _ListInvDet[x].Sad_itm_line, _ListInvDet[x].Sad_unit_rt * _ListInvDet[x].Sad_qty - _ListInvDet[x].Sad_disc_amt, _totalNetValue, _ListRecItem, _CashCommissionDetail[0], "CS", _ListInv[i].Sah_inv_no, _listCommCE[0], _executiveType); COMENTED BY KAPILA CHECK N INSTRUCTED BY DILANDA 25/11/2016
                                            _commission = GetCalculatedCommission(_ListInvDet[x].Sad_itm_cd, _ListInvDet[x].Sad_itm_line, _ListInvDet[x].Sad_tot_amt - _ListInvDet[x].Sad_itm_tax_amt, _totalNetValue, _ListRecItem, _CashCommissionDetail[0], "CS", _ListInv[i].Sah_inv_no, _listCommCE[0], _executiveType);
                                        }
                                        else
                                        {
                                            //_commission = GetCalculatedCommission(_ListInvDet[x].Sad_itm_cd, _ListInvDet[x].Sad_itm_line, _ListInvDet[x].Sad_unit_rt * _ListInvDet[x].Sad_qty - _ListInvDet[x].Sad_disc_amt, _totalNetValue, _ListRecItem, _CashCommissionDetail[0], "CS", _ListInv[i].Sah_inv_no, null, _executiveType);    COMENTED BY KAPILA CHECK N INSTRUCTED BY DILANDA 25/11/2016
                                            _commission = GetCalculatedCommission(_ListInvDet[x].Sad_itm_cd, _ListInvDet[x].Sad_itm_line, _ListInvDet[x].Sad_tot_amt - _ListInvDet[x].Sad_itm_tax_amt, _totalNetValue, _ListRecItem, _CashCommissionDetail[0], "CS", _ListInv[i].Sah_inv_no, null, _executiveType);
                                        }
                                    }
                                    if (_commission != null)
                                        _saveCommission.AddRange(_commission);
                                }
                                else
                                {
                                    //comm def not found 2/7/2014
                                    if (_needCashComDef == 1)
                                    {
                                        _strMsg = _ListInv[i].Sah_inv_no;
                                        return _eff;
                                    }
                                }
                            }
                        }

                    }
                    else    //reversals
                    { }

                    if (_saveCommission != null)
                    {
                        if (_saveCommission.Count > 0)
                        {
                            //delete already saved commission
                            //_salDAL.DeleteSalesCommission(_ListInv[i].Sah_seq_no);
                            Boolean _isSalesComFound = IsCheckSalesComm(_ListInv[i].Sah_seq_no);

                            if (_isSalesComFound == false)
                            {
                                //Save Commissiom
                                _saveCommission.ForEach(x => x.Sac_invoice_no = Convert.ToString(_ListInv[i].Sah_inv_no));
                                _saveCommission.ForEach(x => x.Sac_seq_no = _ListInv[i].Sah_seq_no);
                                foreach (SaleCommission _commm in _saveCommission)
                                {
                                    _salDAL.SaveSalesCommission(_commm);
                                }
                            }
                        }
                    }


                }
            }
            #endregion

            //credit sale commissions--------------------------------------------------------
            #region credit sales
            List<InvoiceHeader> _ListInvCred = _salDAL.GetCommissionInvoices(_com, _pc, _date, "CRED");

            if (_ListInvCred != null)
            {
                //invoices
                for (int i = 0; i < _ListInvCred.Count; i++)
                {
                    List<SaleCommission> _saveCommission = new List<SaleCommission>();

                    //get executive
                    DataTable _tbl = _salDAL.GetEmployee(_ListInvCred[i].Sah_com, _ListInvCred[i].Sah_sales_ex_cd);
                    string _executiveType = string.Empty;
                    foreach (DataRow _r in _tbl.Rows)
                    {
                        _executiveType = Convert.ToString(_r["esep_cat_cd"]);
                    }

                    List<InvoiceItem> _ListInvDet = new List<InvoiceItem>();
                    _ListInvDet = _salDAL.GetCommissionInvoicesItems(_ListInvCred[i].Sah_inv_no);
                    //invoice Details
                    if (_ListInvDet != null)
                    {
                        for (int x = 0; x < _ListInvDet.Count; x++)
                        {
                            //decimal _totalNetValue = _ListInvDet.Sum(y => y.Sad_unit_amt * y.Sad_qty - y.Sad_disc_amt + y.Sad_itm_tax_amt);
                            //decimal _totalNetValue = _ListInvDet.Sum(y => y.Sad_unit_rt * y.Sad_qty - y.Sad_disc_amt);  COMMENTED BY KAPILA CHECK N INSTRUCT BY DILANDA 25/11/2016
                            decimal _totalNetValue = _ListInvDet.Sum(y => y.Sad_tot_amt);

                            MasterItem _item = _invDAL.GetItem(_ListInvCred[i].Sah_com, _ListInvDet[x].Sad_itm_cd);
                            string _discountSeq = "";
                            bool _isPromo;
                            try
                            {
                                _discountSeq = _ListInvDet[x].Sad_dis_seq.ToString();
                                _isPromo = _ListInvDet[x].Sad_dis_type == "P" ? true : false;
                            }
                            catch (Exception) { _discountSeq = "0"; _isPromo = false; }
                            Dictionary<ItemHierarchyElement, string> _itemHierarchyElement = new Dictionary<ItemHierarchyElement, string>();
                            _itemHierarchyElement.Add(ItemHierarchyElement.DISCOUNT, _discountSeq);
                            _itemHierarchyElement.Add(ItemHierarchyElement.BRAND, _item.Mi_brand);
                            _itemHierarchyElement.Add(ItemHierarchyElement.ITEM, _item.Mi_cd);
                            _itemHierarchyElement.Add(ItemHierarchyElement.MAIN_CATEGORY, _item.Mi_cate_1);
                            _itemHierarchyElement.Add(ItemHierarchyElement.PRICE_BOOK, _ListInvDet[x].Sad_pbook);
                            _itemHierarchyElement.Add(ItemHierarchyElement.PRICE_LEVEL, _ListInvDet[x].Sad_pb_lvl);
                            _itemHierarchyElement.Add(ItemHierarchyElement.PROMOTION, _ListInvDet[x].Sad_promo_cd);
                            _itemHierarchyElement.Add(ItemHierarchyElement.SERIAL, string.Empty);
                            _itemHierarchyElement.Add(ItemHierarchyElement.SUB_CATEGORY, _item.Mi_cate_2);

                            List<CashCommissionDetailRef> _listCommCE = null;     //kapila 20/12/2013
                            List<CashCommissionDetailRef> _CashCommissionDetail = GetCommissionStructure(_ListInvCred[i].Sah_com, _ListInvCred[i].Sah_pc, _ListInvCred[i].Sah_inv_tp, _ListInvCred[i].Sah_dt, _ListInvDet[x].Sad_pbook, _ListInvDet[x].Sad_pb_lvl, _ListInvCred[i].Sah_sales_ex_cd, _executiveType, _itemHierarchyElement, "PC_PRIT_HIERARCHY", "PC", out _listCommCE, _isPromo);
                            List<SaleCommission> _commission = null;

                            //get receipts
                            RecieptItem _recItm = new RecieptItem();
                            _recItm.Sard_pay_tp = "CASH";
                            //_recItm.Sard_settle_amt = _ListInvDet[x].Sad_unit_amt - _ListInvDet[x].Sad_disc_amt;
                            _recItm.Sard_settle_amt = _totalNetValue;
                            _recItm.Sard_cc_is_promo = false;

                            List<RecieptItem> _ListRecItem = new List<RecieptItem>();
                            _ListRecItem.Add(_recItm);

                            //commission calculation
                            if (_CashCommissionDetail != null)
                            {
                                if (_CashCommissionDetail.Count > 0)
                                {
                                    if (_listCommCE != null)
                                    {
                                        //_commission = GetCalculatedCommission(_ListInvDet[x].Sad_itm_cd, _ListInvDet[x].Sad_itm_line, _ListInvDet[x].Sad_unit_rt * _ListInvDet[x].Sad_qty - _ListInvDet[x].Sad_disc_amt, _totalNetValue, _ListRecItem, _CashCommissionDetail[0], "CRED", _ListInvCred[i].Sah_inv_no, _listCommCE[0], _executiveType);  COMENTED BY KAPILA - INSTRUCT BY DILANDA 25/11/2016
                                        _commission = GetCalculatedCommission(_ListInvDet[x].Sad_itm_cd, _ListInvDet[x].Sad_itm_line, _ListInvDet[x].Sad_tot_amt - _ListInvDet[x].Sad_itm_tax_amt, _totalNetValue, _ListRecItem, _CashCommissionDetail[0], "CRED", _ListInvCred[i].Sah_inv_no, _listCommCE[0], _executiveType);
                                    }
                                    else
                                    {
                                        //_commission = GetCalculatedCommission(_ListInvDet[x].Sad_itm_cd, _ListInvDet[x].Sad_itm_line, _ListInvDet[x].Sad_unit_rt * _ListInvDet[x].Sad_qty - _ListInvDet[x].Sad_disc_amt, _totalNetValue, _ListRecItem, _CashCommissionDetail[0], "CRED", _ListInvCred[i].Sah_inv_no, null, _executiveType);  COMENTED BY KAPILA - INSTRUCT BY DILANDA 25/11/2016
                                        _commission = GetCalculatedCommission(_ListInvDet[x].Sad_itm_cd, _ListInvDet[x].Sad_itm_line, _ListInvDet[x].Sad_tot_amt - _ListInvDet[x].Sad_itm_tax_amt, _totalNetValue, _ListRecItem, _CashCommissionDetail[0], "CRED", _ListInvCred[i].Sah_inv_no, null, _executiveType);
                                    }
                                }
                                if (_commission != null)
                                    _saveCommission.AddRange(_commission);
                            }
                            else
                            {
                                //comm def not found 2/7/2014
                                if (_needCredComDef == 1)
                                {
                                    _strMsg = _ListInvCred[i].Sah_inv_no;
                                    return _eff;
                                }
                            }
                        }
                    }
                    if (_saveCommission != null)
                    {
                        if (_saveCommission.Count > 0)
                        {
                            //delete already saved commission
                            //_salDAL.DeleteSalesCommission(_ListInvCred[i].Sah_seq_no);
                            Boolean _isSalesComFound = IsCheckSalesComm(_ListInvCred[i].Sah_seq_no);
                            if (_isSalesComFound == false)
                            {
                                //Save Commissiom
                                _saveCommission.ForEach(x => x.Sac_invoice_no = Convert.ToString(_ListInvCred[i].Sah_inv_no));
                                _saveCommission.ForEach(x => x.Sac_seq_no = _ListInvCred[i].Sah_seq_no);
                                foreach (SaleCommission _commm in _saveCommission)
                                {
                                    _salDAL.SaveSalesCommission(_commm);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            //11/5/2015 promotor commission calculation--
            Int32 _efPCom = _salDAL.sp_process_promotor_comm(_com, _pc, _date, _pc);

            _salDAL.ConnectionClose();

            return 1;
        }

        public DataTable getSerialByInvLine(string _inv, Int32 _line)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getSerialByInvLine(_inv, _line);
        }
        public MasterReceiptDivision GetDefRecDivision(string _com, string _pc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDefRecDivision(_com, _pc);
        }

        #region Accounts Detail Updates

        public Boolean IsRegInsuAllowed(string _com, string _type, string _itmStus, string _saleType)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.IsRegInsuAllowed(_com, _type, _itmStus, _saleType);
        }
        public DataTable GetHp_ActiveAccounts(string com, string pc, DateTime currentDate, DateTime fromDt, DateTime toDt, string accountNo, string status, Int32 given_esd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHp_ActiveAccounts(com, pc, currentDate, fromDt, toDt, accountNo, status, given_esd);
        }
        public DataTable GetHp_flag_bank_onType(string type_)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHp_flag_bank_onType(type_);
        }
        public Int32 Update_Flag_Bank(string type, string newCode, List<string> accNoList)
        {
            Int32 _effects = 0;
            _salesDAL = new SalesDAL();
            // using (TransactionScope _tr = new TransactionScope())
            // {
            try
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                foreach (string AccNo in accNoList)
                {
                    _effects = _salesDAL.Update_Flag_Bank(type, newCode, AccNo);
                }
                //_salesDAL.ConnectionClose();
                _salesDAL.TransactionCommit();
                // _tr.Complete();
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                return -1;
            }
            //}
            return 1;
        }

        public Int32 Transfer_accounts(string newPC, DateTime transferingDate, List<string> accNoList, Int32 IntCommZero, decimal CommAmt)
        {
            Int32 _effects = 0;
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            // using (TransactionScope _tr = new TransactionScope())
            {
                try
                {
                    _salesDAL.ConnectionOpen();
                    _inventoryDAL.ConnectionOpen();

                    _salesDAL.BeginTransaction();
                    _inventoryDAL.BeginTransaction();
                    //-------------------------------------
                    foreach (string AccNo in accNoList)
                    {
                        HPAccountLog latest = _salesDAL.Get_latest_IN_hpt_acc_log(AccNo);
                        string prev_status = latest.Hal_stus;

                        //TODO: updates                       
                        Int32 eff = _salesDAL.Update_Account_Transfer_Det(AccNo, latest.Hal_seq_no, transferingDate, newPC, IntCommZero, CommAmt);//update (hpt_acc_log) and 
                        DateTime closeDt = latest.Hal_cls_dt;
                        // and insert 
                        HPAccountLog _HpAccountLog = latest;
                        _HpAccountLog.Hal_seq_no = _inventoryDAL.GetSerialID();

                        _HpAccountLog.Hal_sa_sub_tp = "TROUT";
                        _HpAccountLog.Hal_log_dt = transferingDate;
                        _HpAccountLog.Hal_rev_stus = true;
                        //-------ADDED ON 20-03-2013-----------
                        _HpAccountLog.Hal_cls_dt = transferingDate;
                        //----------------------------------------
                        _effects = _salesDAL.SaveHPAccountLog(_HpAccountLog);
                        //-----------------------------------------------------
                        _HpAccountLog.Hal_seq_no = _inventoryDAL.GetSerialID();
                        _HpAccountLog.Hal_pc = newPC;
                        _HpAccountLog.Hal_cre_dt = transferingDate;
                        _HpAccountLog.Hal_sa_sub_tp = "TRIN";
                        _HpAccountLog.Hal_rev_stus = false;
                        _HpAccountLog.Hal_cls_dt = closeDt; //latest.Hal_cls_dt;
                        //added by dilshan on 09/01/2019
                        if (IntCommZero == 1)
                        {
                            _HpAccountLog.Hal_inst_comm = CommAmt;
                        }
                                                
                        _effects = _salesDAL.SaveHPAccountLog(_HpAccountLog);
                    }
                    //------------------------------------- 
                    //_salesDAL.ConnectionClose();
                    //_inventoryDAL.ConnectionClose();
                    //_tr.Complete();
                    _salesDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();
                }
                catch (Exception ex)
                {
                    _salesDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                    return -1;
                }
            }
            return 1;
        }

        public Int32 Update_Account_Ownership(string NewCustCode, List<string> accNoList, DateTime curDate)
        {
            Int32 _effects = 0;
            _salesDAL = new SalesDAL();
            //using (TransactionScope _tr = new TransactionScope())
            //{
            try
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                foreach (string AccNo in accNoList)
                {
                    //TODO:
                    _effects = _salesDAL.Update_Account_Ownership(NewCustCode, AccNo, curDate);
                }

                //_salesDAL.ConnectionClose();
                _salesDAL.TransactionCommit();
                //  _tr.Complete();
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                return -1;
            }
            // }
            return 1;
        }
        public Int32 UpdateBizEntity_OnPermission(MasterBusinessEntity _businessEntity)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int32 effect = -1;
            effect = _salesDAL.UpdateBusinessEntityProfile(_businessEntity, 2);
            //effect = _salesDAL.UpdateCustomerCreditLimit(_businessEntity.Mbe_com, _businessEntity.Mbe_cd, modby, modDate, Newcredlimit);

            //foreach (MasterBusinessEntityInfo bis in bisInfoList)
            //{
            //    bis.Mbei_cd = _businessEntity.Mbe_cd;
            //    _salesDAL.UpdateBusinessEntityInfo(bis);
            //}

            _salesDAL.ConnectionClose();
            return effect;
        }
        public Int32 Update_AccCustomer(HpCustomer _HpAccountCus, List<string> AccountsList, string CustCode)
        {
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            _salesDAL.ConnectionOpen();
            _inventoryDAL.ConnectionOpen();
            Int32 effect = -1;
            foreach (string accNo in AccountsList)
            {
                Int32 CustSeqNo = 0;
                CustSeqNo = _inventoryDAL.GetSerialID();
                _HpAccountCus.Htc_seq = CustSeqNo;
                _HpAccountCus.Htc_acc_no = accNo;
                effect = _salesDAL.Update_AccCustomer(_HpAccountCus);
            }
            // effect = _salesDAL.Update_AccCustomer(_HpAccountCus);
            _salesDAL.ConnectionClose();
            _inventoryDAL.ConnectionClose();
            return effect;
        }
        public HpCustomer Get_HpAccCustomer(string custTp, string custID, Int32 addrTp, string accountNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_HpAccCustomer(custTp, custID, addrTp, accountNo);
        }
        public Int32 Save_FlagBank(HPR_FlagBank _flagBank)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int32 eff = _salesDAL.Save_FlagBank(_flagBank);
            _salesDAL.ConnectionClose();
            return eff;
        }

        #endregion Accounts Detail Updates

        #region loyalty definions

        public Int32 SaveLoyaltyType(LoyaltyType _loyal)
        {
            int result = 0;
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            //  using (TransactionScope scope = new TransactionScope())
            // {
            _inventoryDAL.ConnectionOpen();
            _salesDAL.ConnectionOpen();



            result = result + _salesDAL.SaveLoyaltyType(_loyal);


            //if (isItem)
            //{
            //    foreach (string st in _item)
            //    {
            //        foreach (string st1 in _party)
            //        {
            //            for (int i = 0; i < _pricebook.Rows.Count; i++)
            //            {
            //                _loyal.Salt_itm = st;
            //                _loyal.Salt_pt_tp = "PC";
            //                _loyal.Salt_prt = st1;
            //                _loyal.Salt_pb = _pricebook.Rows[i][0].ToString();
            //                _loyal.Salt_pblvl = _pricebook.Rows[i][0].ToString();
            //                result = _salesDAL.SaveLoyaltyType(_loyal);
            //            }
            //        }
            //    }
            //}
            //else if (isSerial)
            //{
            //    foreach (string st in _serial)
            //    {
            //        foreach (string st1 in _party)
            //        {
            //            for (int i = 0; i < _pricebook.Rows.Count; i++)
            //            {
            //                _loyal.Salt_ser = st;
            //                _loyal.Salt_pt_tp = "PC";
            //                _loyal.Salt_prt = st1;
            //                _loyal.Salt_pb = _pricebook.Rows[i][0].ToString();
            //                _loyal.Salt_pblvl = _pricebook.Rows[i][0].ToString();
            //                result = _salesDAL.SaveLoyaltyType(_loyal);
            //            }
            //        }
            //    }
            //}
            //else if (isPromotion)
            //{
            //    foreach (string st in _promotion)
            //    {
            //        foreach (string st1 in _party)
            //        {
            //            for (int i = 0; i < _pricebook.Rows.Count; i++)
            //            {
            //                _loyal.Salt_promo = st;
            //                _loyal.Salt_pt_tp = "PC";
            //                _loyal.Salt_prt = st1;
            //                _loyal.Salt_pb = _pricebook.Rows[i][0].ToString();
            //                _loyal.Salt_pblvl = _pricebook.Rows[i][0].ToString();
            //                result = _salesDAL.SaveLoyaltyType(_loyal);
            //            }
            //        }
            //    }
            //}
            //else
            //{
            //    foreach (string st1 in _party)
            //    {
            //        for (int i = 0; i < _pricebook.Rows.Count; i++)
            //        {
            //            _loyal.Salt_pt_tp = "PC";
            //            _loyal.Salt_prt = st1;
            //            _loyal.Salt_pb = _pricebook.Rows[i][0].ToString();
            //            _loyal.Salt_pblvl = _pricebook.Rows[i][0].ToString();
            //            result = _salesDAL.SaveLoyaltyType(_loyal);
            //        }
            //    }
            //}
            //  scope.Complete();
            _salesDAL.ConnectionClose();
            _inventoryDAL.ConnectionClose();
            //  scope.Complete();
            // }
            return result;
        }

        public Int32 SaveLoyaltyPointDefinition(LoyaltyPointDefinition _loyal, List<LoyaltyPointDefinition> _loyaltyList, List<string> _party, List<PriceBookLevelRef> _pricebook, List<CashCommissionDetailRef> item, string _itemType)
        {
            int result = 0;
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            //  using (TransactionScope scope = new TransactionScope())
            //   {
            _inventoryDAL.ConnectionOpen();
            _salesDAL.ConnectionOpen();

            //save loyalty points
            bool isSave = false;
            foreach (string pc in _party)
            {
                if (_pricebook.Count > 0) //add by tharanga 2018/10/15
                {

                    #region with price book and level
                foreach (PriceBookLevelRef plevl in _pricebook)
                {
                    foreach (CashCommissionDetailRef _ref in item)
                    {
                        if (_itemType == "BRAND")
                        {
                            _loyal.Saldf_brand = _ref.Sccd_itm;
                        }
                        if (_itemType == "MAIN CATEGORY")
                        {
                            _loyal.Saldf_cat_1 = _ref.Sccd_itm;
                        }
                        if (_itemType == "CATEGORY")
                        {
                            _loyal.Saldf_cat_2 = _ref.Sccd_itm;
                        }

                        if (_itemType == "ITEM")
                        {
                            _loyal.Saldf_itm = _ref.Sccd_itm;
                        }
                        if (_itemType == "SERIAL")
                        {
                            _loyal.Saldf_ser = _ref.Sccd_itm;
                        }
                        if (_itemType == "PROMOTION")
                        {
                            _loyal.Saldf_promo = _ref.Sccd_itm;
                        }

                        _loyal.Saldf_alw_tp = pc;
                        _loyal.Saldf_pb = plevl.Sapl_pb;
                        _loyal.Saldf_plvl = plevl.Sapl_pb_lvl_cd;

                        int seq = _inventoryDAL.GetSerialID();
                        if (_loyaltyList != null && _loyaltyList.Count > 0)
                        {
                            int line = 0;
                            foreach (LoyaltyPointDefinition loyal in _loyaltyList)
                            {
                                _loyal.Saldf_seq = seq;
                                _loyal.Saldf_line = ++line;
                                _loyal.Saldf_value_frm = loyal.Saldf_value_frm;
                                _loyal.Saldf_value_to = loyal.Saldf_value_to;
                                _loyal.Saldf_qt_frm = loyal.Saldf_qt_frm;
                                _loyal.Saldf_qt_to = loyal.Saldf_qt_to;
                                _loyal.Saldf_pt = loyal.Saldf_pt;
                                _loyal.Saldf_alw_ins = loyal.Saldf_alw_ins;
                                _loyal.Saldf_alw_ptp = loyal.Saldf_alw_ptp;
                                _loyal.Saldf_alw_dis = loyal.Saldf_alw_dis;
                                _loyal.Saldf_pmod = loyal.Saldf_pmod;
                                _loyal.Saldf_bank = loyal.Saldf_bank;
                                _loyal.Saldf_cd_tp = loyal.Saldf_cd_tp;
                                _loyal.Saldf_cus_spec = loyal.Saldf_cus_spec;

                                result = result + _salesDAL.saveLoyaltyPointDefinition(_loyal);
                            }
                        }
                        else
                        {
                            _loyal.Saldf_seq = seq;
                            result = result + _salesDAL.saveLoyaltyPointDefinition(_loyal);
                        }
                        isSave = true;

                    }
                    if (!isSave)
                    {
                        _loyal.Saldf_alw_tp = pc;
                        _loyal.Saldf_pb = plevl.Sapl_pb;
                        _loyal.Saldf_plvl = plevl.Sapl_pb_lvl_cd;

                        int seq1 = _inventoryDAL.GetSerialID();
                        if (_loyaltyList != null && _loyaltyList.Count > 0)
                        {
                            int line = 0;
                            foreach (LoyaltyPointDefinition loyal in _loyaltyList)
                            {
                                _loyal.Saldf_seq = seq1;
                                _loyal.Saldf_line = ++line;
                                _loyal.Saldf_value_frm = loyal.Saldf_value_frm;
                                _loyal.Saldf_value_to = loyal.Saldf_value_to;
                                _loyal.Saldf_qt_frm = loyal.Saldf_qt_frm;
                                _loyal.Saldf_qt_to = loyal.Saldf_qt_to;
                                _loyal.Saldf_pmod = loyal.Saldf_pmod;
                                _loyal.Saldf_bank = loyal.Saldf_bank;
                                _loyal.Saldf_cd_tp = loyal.Saldf_cd_tp;
                                _loyal.Saldf_cus_spec = loyal.Saldf_cus_spec;
                                _loyal.Saldf_pt = loyal.Saldf_pt;
                                _loyal.Saldf_alw_ins = loyal.Saldf_alw_ins;
                                _loyal.Saldf_alw_ptp = loyal.Saldf_alw_ptp;
                                _loyal.Saldf_alw_dis = loyal.Saldf_alw_dis;
                                _loyal.Saldf_minv_tp = loyal.Saldf_minv_tp;

                                result = result + _salesDAL.saveLoyaltyPointDefinition(_loyal);
                            }
                        }
                        else
                        {
                            _loyal.Saldf_seq = seq1;
                            result = result + _salesDAL.saveLoyaltyPointDefinition(_loyal);
                        }
                    }

                }
                    #endregion
                }
                else
                {
                    foreach (CashCommissionDetailRef _ref in item)
                    {
                        if (_itemType == "BRAND")
                        {
                            _loyal.Saldf_brand = _ref.Sccd_itm;
            }
                        if (_itemType == "MAIN CATEGORY")
                        {
                            _loyal.Saldf_cat_1 = _ref.Sccd_itm;
            }
                        if (_itemType == "CATEGORY")
                        {
                            _loyal.Saldf_cat_2 = _ref.Sccd_itm;
                        }

                        if (_itemType == "ITEM")
                        {
                            _loyal.Saldf_itm = _ref.Sccd_itm;
                        }
                        if (_itemType == "SERIAL")
                        {
                            _loyal.Saldf_ser = _ref.Sccd_itm;
                        }
                        if (_itemType == "PROMOTION")
                        {
                            _loyal.Saldf_promo = _ref.Sccd_itm;
                        }

                        _loyal.Saldf_alw_tp = pc;
                        _loyal.Saldf_pb = "";
                        _loyal.Saldf_plvl = "";

                        int seq = _inventoryDAL.GetSerialID();
                        if (_loyaltyList != null && _loyaltyList.Count > 0)
                        {
                            int line = 0;
                            foreach (LoyaltyPointDefinition loyal in _loyaltyList)
                            {
                                _loyal.Saldf_seq = seq;
                                _loyal.Saldf_line = ++line;
                                _loyal.Saldf_value_frm = loyal.Saldf_value_frm;
                                _loyal.Saldf_value_to = loyal.Saldf_value_to;
                                _loyal.Saldf_qt_frm = loyal.Saldf_qt_frm;
                                _loyal.Saldf_qt_to = loyal.Saldf_qt_to;
                                _loyal.Saldf_pt = loyal.Saldf_pt;
                                _loyal.Saldf_alw_ins = loyal.Saldf_alw_ins;
                                _loyal.Saldf_alw_ptp = loyal.Saldf_alw_ptp;
                                _loyal.Saldf_alw_dis = loyal.Saldf_alw_dis;
                                _loyal.Saldf_pmod = loyal.Saldf_pmod;
                                _loyal.Saldf_bank = loyal.Saldf_bank;
                                _loyal.Saldf_cd_tp = loyal.Saldf_cd_tp;
                                _loyal.Saldf_cus_spec = loyal.Saldf_cus_spec;

                                result = result + _salesDAL.saveLoyaltyPointDefinition(_loyal);
                            }
                        }
                        else
                        {
                            _loyal.Saldf_seq = seq;
                            result = result + _salesDAL.saveLoyaltyPointDefinition(_loyal);
                        }
                        isSave = true;

                    }
                    if (!isSave)
                    {
                        _loyal.Saldf_alw_tp = pc;
                        _loyal.Saldf_pb = "";
                        _loyal.Saldf_plvl = "";

                        int seq1 = _inventoryDAL.GetSerialID();
                        if (_loyaltyList != null && _loyaltyList.Count > 0)
                        {
                            int line = 0;
                            foreach (LoyaltyPointDefinition loyal in _loyaltyList)
                            {
                                _loyal.Saldf_seq = seq1;
                                _loyal.Saldf_line = ++line;
                                _loyal.Saldf_value_frm = loyal.Saldf_value_frm;
                                _loyal.Saldf_value_to = loyal.Saldf_value_to;
                                _loyal.Saldf_qt_frm = loyal.Saldf_qt_frm;
                                _loyal.Saldf_qt_to = loyal.Saldf_qt_to;
                                _loyal.Saldf_pmod = loyal.Saldf_pmod;
                                _loyal.Saldf_bank = loyal.Saldf_bank;
                                _loyal.Saldf_cd_tp = loyal.Saldf_cd_tp;
                                _loyal.Saldf_cus_spec = loyal.Saldf_cus_spec;
                                _loyal.Saldf_pt = loyal.Saldf_pt;
                                _loyal.Saldf_alw_ins = loyal.Saldf_alw_ins;
                                _loyal.Saldf_alw_ptp = loyal.Saldf_alw_ptp;
                                _loyal.Saldf_alw_dis = loyal.Saldf_alw_dis;

                                result = result + _salesDAL.saveLoyaltyPointDefinition(_loyal);
                            }
                        }
                        else
                        {
                            _loyal.Saldf_seq = seq1;
                            result = result + _salesDAL.saveLoyaltyPointDefinition(_loyal);
                        }
                    }

                }

            }


            /*
            if (isItem)
            {
                foreach (string st in _item)
                {
                    foreach (string st1 in _party)
                    {
                        for (int i = 0; i < _pricebook.Rows.Count; i++)
                        {
                            _loyal.Saldf_itm = st;
                            _loyal.Saldf_alw_prt_tp = "PC";
                            _loyal.Saldf_alw_tp = st1;
                            _loyal.Saldf_pb = _pricebook.Rows[i][0].ToString();
                            _loyal.Saldf_plvl = _pricebook.Rows[i][0].ToString();
                            result = _salesDAL.saveLoyaltyPointDefinition(_loyal);
                        }
                    }
                }
            }
            else if (isSerial)
            {
                foreach (string st in _serial)
                {
                    foreach (string st1 in _party)
                    {
                        for (int i = 0; i < _pricebook.Rows.Count; i++)
                        {
                            _loyal.Saldf_itm = st;
                            _loyal.Saldf_alw_prt_tp = "PC";
                            _loyal.Saldf_alw_tp = st1;
                            _loyal.Saldf_pb = _pricebook.Rows[i][0].ToString();
                            _loyal.Saldf_plvl = _pricebook.Rows[i][0].ToString();
                            result = _salesDAL.saveLoyaltyPointDefinition(_loyal);
                        }
                    }
                }
            }
            else if (isPromotion)
            {
                foreach (string st in _promotion)
                {
                    foreach (string st1 in _party)
                    {
                        for (int i = 0; i < _pricebook.Rows.Count; i++)
                        {
                            _loyal.Saldf_itm = st;
                            _loyal.Saldf_alw_prt_tp = "PC";
                            _loyal.Saldf_alw_tp = st1;
                            _loyal.Saldf_pb = _pricebook.Rows[i][0].ToString();
                            _loyal.Saldf_plvl = _pricebook.Rows[i][0].ToString();
                            result = _salesDAL.saveLoyaltyPointDefinition(_loyal);
                        }
                    }
                }
            }
            else
            {
                foreach (string st1 in _party)
                {
                    for (int i = 0; i < _pricebook.Rows.Count; i++)
                    {
                        _loyal.Saldf_alw_prt_tp = "PC";
                        _loyal.Saldf_alw_prt_tp = st1;
                        _loyal.Saldf_pb = _pricebook.Rows[i][0].ToString();
                        _loyal.Saldf_plvl = _pricebook.Rows[i][0].ToString();
                        result = _salesDAL.saveLoyaltyPointDefinition(_loyal);
                    }
                }
            }
             */
            //   scope.Complete();
            _salesDAL.ConnectionClose();
            _inventoryDAL.ConnectionClose();
            //  }
            return result;
        }

        public Int32 SaveLoyaltyRedeemDefinition(LoyaltyPointRedeemDefinition _loyal, List<string> _party)
        {
            int result = 0;
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            //  using (TransactionScope scope = new TransactionScope())
            // {
            _inventoryDAL.ConnectionOpen();
            _salesDAL.ConnectionOpen();

            foreach (string pc in _party)
            {
                _loyal.Salre_alw_prt = pc;
                result = result + _salesDAL.saveLoyaltyRedeemDefinition(_loyal);

            }




            /*
            if (isItem)
            {
                foreach (string st in _item)
                {
                    foreach (string st1 in _party)
                    {
                        for (int i = 0; i < _pricebook.Rows.Count; i++)
                        {
                            _loyal.Salre_itm = st;
                            _loyal.Salre_alw_prt_tp = "PC";
                            _loyal.Salre_alw_prt = st1;
                            _loyal.Salre_pb = _pricebook.Rows[i][0].ToString();
                            _loyal.Salre_plvl = _pricebook.Rows[i][0].ToString();
                            result = _salesDAL.saveLoyaltyRedeemDefinition(_loyal);
                        }
                    }
                }
            }
            else if (isSerial)
            {
                foreach (string st in _serial)
                {
                    foreach (string st1 in _party)
                    {
                        for (int i = 0; i < _pricebook.Rows.Count; i++)
                        {
                            _loyal.Salre_itm = st;
                            _loyal.Salre_alw_prt_tp = "PC";
                            _loyal.Salre_alw_prt = st1;
                            _loyal.Salre_pb = _pricebook.Rows[i][0].ToString();
                            _loyal.Salre_plvl = _pricebook.Rows[i][0].ToString();
                            result = _salesDAL.saveLoyaltyRedeemDefinition(_loyal);
                        }
                    }
                }
            }
            else if (isPromotion)
            {
                foreach (string st in _promotion)
                {
                    foreach (string st1 in _party)
                    {
                        for (int i = 0; i < _pricebook.Rows.Count; i++)
                        {
                            _loyal.Salre_itm = st;
                            _loyal.Salre_alw_prt_tp = "PC";
                            _loyal.Salre_alw_prt = st1;
                            _loyal.Salre_pb = _pricebook.Rows[i][0].ToString();
                            _loyal.Salre_plvl = _pricebook.Rows[i][0].ToString();
                            result = _salesDAL.saveLoyaltyRedeemDefinition(_loyal);
                        }
                    }
                }
            }
            else
            {
                foreach (string st1 in _party)
                {
                    for (int i = 0; i < _pricebook.Rows.Count; i++)
                    {

                        _loyal.Salre_alw_prt_tp = "PC";
                        _loyal.Salre_alw_prt = st1;
                        _loyal.Salre_pb = _pricebook.Rows[i][0].ToString();
                        _loyal.Salre_plvl = _pricebook.Rows[i][0].ToString();
                        result = _salesDAL.saveLoyaltyRedeemDefinition(_loyal);
                    }
                }
            }
             */
            //  scope.Complete();
            _salesDAL.ConnectionClose();
            _inventoryDAL.ConnectionClose();
            //  }
            return result;
        }

        public Int32 SaveLoyaltyDiscountDefinition(LoyaltyPointDiscount _loyal, List<CashCommissionDetailRef> item, List<string> _party, List<PriceBookLevelRef> _pricebook, string _itemType)
        {
            int result = 0;
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            // using (TransactionScope scope = new TransactionScope())
            // {
            _inventoryDAL.ConnectionOpen();
            _salesDAL.ConnectionOpen();


            foreach (string pc in _party)
            {
                foreach (PriceBookLevelRef plevl in _pricebook)
                {
                    foreach (CashCommissionDetailRef _ref in item)
                    {
                        if (_itemType == "BRAND")
                        {
                            _loyal.Saldi_brand = _ref.Sccd_itm;
                        }
                        if (_itemType == "MAIN CATEGORY")
                        {
                            _loyal.Saldi_cat_1 = _ref.Sccd_itm;
                        }
                        if (_itemType == "CATEGORY")
                        {
                            _loyal.Saldi_cat_2 = _ref.Sccd_itm;
                        }
                        if (_itemType == "ITEM")
                        {
                            _loyal.Saldi_itm = _ref.Sccd_itm;
                        }
                        if (_itemType == "SERIAL")
                        {
                            _loyal.Saldi_ser = _ref.Sccd_itm;
                        }
                        if (_itemType == "PROMOTION")
                        {
                            _loyal.Saldi_promo = _ref.Sccd_itm;
                        }

                        _loyal.Saldi_prt = pc;
                        _loyal.Saldi_pb = plevl.Sapl_pb;
                        _loyal.Saldi_plvl = plevl.Sapl_pb_lvl_cd;
                        result = result + _salesDAL.saveLoyaltyDiscountDefinition(_loyal);
                    }
                    _loyal.Saldi_prt = pc;
                    _loyal.Saldi_pb = plevl.Sapl_pb;
                    _loyal.Saldi_plvl = plevl.Sapl_pb_lvl_cd;
                    result = result + _salesDAL.saveLoyaltyDiscountDefinition(_loyal);
                }
            }



            /*
            if (isItem)
            {
                foreach (string st in _item)
                {
                    foreach (string st1 in _party)
                    {
                        for (int i = 0; i < _pricebook.Rows.Count; i++)
                        {
                            _loyal.Saldi_itm = st;
                            _loyal.Saldi_prt_tp = "PC";
                            _loyal.Saldi_prt = st1;
                            _loyal.Saldi_pb = _pricebook.Rows[i][0].ToString();
                            _loyal.Saldi_plvl = _pricebook.Rows[i][0].ToString();
                            result = _salesDAL.saveLoyaltyDiscountDefinition(_loyal);
                        }
                    }
                }
            }
            else if (isSerial)
            {
                foreach (string st in _serial)
                {
                    foreach (string st1 in _party)
                    {
                        for (int i = 0; i < _pricebook.Rows.Count; i++)
                        {
                            _loyal.Saldi_itm = st;
                            _loyal.Saldi_prt_tp = "PC";
                            _loyal.Saldi_prt = st1;
                            _loyal.Saldi_pb = _pricebook.Rows[i][0].ToString();
                            _loyal.Saldi_plvl = _pricebook.Rows[i][0].ToString();
                            result = _salesDAL.saveLoyaltyDiscountDefinition(_loyal);
                        }
                    }
                }
            }
            else if (isPromotion)
            {
                foreach (string st in _promotion)
                {
                    foreach (string st1 in _party)
                    {
                        for (int i = 0; i < _pricebook.Rows.Count; i++)
                        {
                            _loyal.Saldi_itm = st;
                            _loyal.Saldi_prt_tp = "PC";
                            _loyal.Saldi_prt = st1;
                            _loyal.Saldi_pb = _pricebook.Rows[i][0].ToString();
                            _loyal.Saldi_plvl = _pricebook.Rows[i][0].ToString();
                            result = _salesDAL.saveLoyaltyDiscountDefinition(_loyal);
                        }
                    }
                }
            }
            else
            {
                foreach (string st1 in _party)
                {
                    for (int i = 0; i < _pricebook.Rows.Count; i++)
                    {
                        _loyal.Saldi_prt_tp = "PC";
                        _loyal.Saldi_prt = st1;
                        _loyal.Saldi_pb = _pricebook.Rows[i][0].ToString();
                        _loyal.Saldi_plvl = _pricebook.Rows[i][0].ToString();
                        result = _salesDAL.saveLoyaltyDiscountDefinition(_loyal);
                    }
                }
            }
              
             */
            //  scope.Complete();
            _salesDAL.ConnectionClose();
            _inventoryDAL.ConnectionClose();
            //  }
            return result;
        }

        #endregion

        public List<InvoiceSerial> GetInvoiceSerial(string _invoiceno)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceSerial(_invoiceno);
        }

        public HpSchemeDetails GetSchemeDetailAccordingToHierarchy(string _company, string _profitcenter, string _scheme, string _salesPriorityHierarchyCategory, string _salesPriorityHierarchyType)
        {
            _salesDAL = new SalesDAL();
            HpSchemeDetails _return = null;
            List<MasterSalesPriorityHierarchy> _hierarchy = _salesDAL.GetSalesPriorityHierarchy(_company, _profitcenter, _salesPriorityHierarchyCategory, _salesPriorityHierarchyType);

            foreach (MasterSalesPriorityHierarchy _hie in _hierarchy)
            {
                string _type = _hie.Mpi_cd;
                string _value = _hie.Mpi_val;

                _return = _salesDAL.getSchemeDetails(_type, _value, 1, _scheme);
                if (_return != null)
                    if (!string.IsNullOrEmpty(_return.Hsd_cd))
                    {
                        break;
                    }
            }
            return _return;
        }

        #region  Commission Definition
        public DataTable GetBrandsCatsItems(string selectOn, string brand, string cate1, string cate2, string cate3, string itemCode, string serialNo, string circularNo, string promotionCd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetBrandsCatsItems(selectOn, brand, cate1, cate2, cate3, itemCode, serialNo, circularNo, promotionCd);
        }
        //kapila
        public DataTable GetBrandsCatsItems_new(string selectOn, string brand, string cate1, string cate2, string cate3, string itemCode, string serialNo, string circularNo, string promotionCd, string model)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetBrandsCatsItems_new(selectOn, brand, cate1, cate2, cate3, itemCode, serialNo, circularNo, promotionCd, model);
        }

        public Int32 saveTempTablesForCommision(CashCommissionHeaderRef commHeader, List<string> Selected_PC_List, List<PriceBookLevelRef> PBook_List, List<CashCommissionDetailRef> ExcecutiveList, List<CashCommissionDetailRef> BrandCatItmList, string selectType, string username, string circularNo, Dictionary<string, Decimal> commissionValues, DateTime fromDt, DateTime toDt, MasterAutoNumber _auto, out string commisson_code, string _selectedPcType,
            string _cusType, decimal _from, decimal _to, int _isComb, int _isEpf, decimal _amt)
        {
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            _salesDAL.ConnectionOpen();
            _inventoryDAL.ConnectionOpen();
            List<CashCommissionHeaderRef> commHdList = _salesDAL.Get_CommissionHeader(null, circularNo);
            if (commHdList.Count < 1) //TODO: if commission number NOT existst with this number.
            {
                MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                string _circular_No = _auto.Aut_start_char + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_auto);

                commHeader.Scch_cd = _circular_No;
                Int32 hdr_eff = _salesDAL.save_cash_comm_hdr(commHeader);
            }
            else
            {
                commHeader = commHdList[0];
            }
            //-------------------
            //Int32 eff = _salesDAL.saveTempTablesForCommision(Selected_PC_List, PBook_List, ExcecutiveList, BrandCatItmList, selectType,  username, circularNo, commissionValues, fromDt, toDt);
            Int32 eff = _salesDAL.saveTempTablesForCommision(Selected_PC_List, PBook_List, ExcecutiveList, BrandCatItmList, selectType, username, commHeader.Scch_cd, commissionValues, fromDt, toDt, _selectedPcType, _cusType, _from, _to, _isComb, _isEpf, _amt);
            commisson_code = commHeader.Scch_cd;
            _salesDAL.ConnectionClose();
            _inventoryDAL.ConnectionClose();
            return eff;
        }
        public Int32 Save_CloneCommissions(string pc, List<string> cloningPC_list, string _user)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int32 eff = _salesDAL.Save_CloneCommissions(pc, cloningPC_list, _user);
            _salesDAL.ConnectionClose();
            return eff;

        }
        #endregion Commission Definition

        public Int32 Save_Temp_PC(string _com, string _pc, string _loc, string _user)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int32 eff = _salesDAL.Save_Temp_PC(_com, _pc, _loc, _user);
            _salesDAL.ConnectionClose();
            return eff;

        }

        public Int32 Delete_Temp_PC(string userid)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int32 eff = _salesDAL.Delete_Temp_PC(userid);
            _salesDAL.ConnectionClose();
            return eff;
        }

        public object[] SaveLoyaltyMembership(LoyaltyMemeber _loyal, MasterAutoNumber _autoNum, MasterAutoNumber _recAuto, List<RecieptItem> _recieptItem, RecieptHeader _reciept, out string _cardNo, out string _recieptNo, out string _serialNumber, string _pc)
        {
            _salesDAL = new SalesDAL();
            Int32 eff = 0;
            _inventoryDAL = new InventoryDAL();
            using (TransactionScope _scope = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();
                MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_autoNum.Aut_moduleid, _autoNum.Aut_direction, _autoNum.Aut_start_char, _autoNum.Aut_cate_tp, _autoNum.Aut_cate_cd, _autoNum.Aut_modify_dt, _autoNum.Aut_year);
                string _cusNo = _autoNum.Aut_cate_cd + "-" + _autoNum.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_autoNum);
                string _tserialNumber = "";

                //Commented by Udesh 02-Nov-2018
                /*if (string.IsNullOrEmpty(_loyal.Salcm_cd_ser))
                {
                    MasterAutoNumber _serial = new MasterAutoNumber();
                    _serial.Aut_start_char = "";
                    _serial.Aut_moduleid = "LO_SE";
                    _serial.Aut_cate_cd = "PC";
                    _serial.Aut_cate_tp = _pc;
                    _serial.Aut_direction = 0;

                    MasterAutoNumber _serialNo = _inventoryDAL.GetAutoNumber(_serial.Aut_moduleid, _serial.Aut_direction, _serial.Aut_start_char, _serial.Aut_cate_tp, _serial.Aut_cate_cd, _serial.Aut_modify_dt, _serial.Aut_year);
                    string seila = _serial.Aut_cate_tp + " " + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture) + " 001";
                    _inventoryDAL.UpdateAutoNumber(_serial);
                    _loyal.Salcm_cd_ser = seila;
                }*/

                _tserialNumber = _loyal.Salcm_cd_ser;
                _loyal.Salcm_cd_ser = (_loyal.Salcm_issue_phy_cd == 1) ? _loyal.Salcm_cd_ser : _cusNo; // Added by Udesh 02-Nov-2018
                _loyal.Salcm_no = _cusNo;
                eff = _salesDAL.SaveLoyaltyMembership(_loyal);

                //Added by Udesh 03-Nov-2018
                //Update status into GNT_GV_PAGES (card) table
                if (_loyal.Salcm_issue_phy_cd == 1)
                {
                    _salesDAL.Update_GV_Page_Status("A", int.Parse(_loyal.Salcm_cd_ser), _loyal.Salcm_cus_cd, _reciept.Sar_debtor_name, _reciept.Sar_debtor_add_1, _loyal.Salcm_cd_ser);
                }

                string _trecieptNo = "";
                if (_recieptItem != null && _recieptItem.Count > 0)
                {
                    MasterAutoNumber _number1 = _inventoryDAL.GetAutoNumber(_recAuto.Aut_moduleid, _recAuto.Aut_direction, _recAuto.Aut_start_char, _recAuto.Aut_cate_tp, _recAuto.Aut_cate_cd, _recAuto.Aut_modify_dt, _recAuto.Aut_year);
                    _trecieptNo = _recAuto.Aut_cate_cd + "-" + _recAuto.Aut_start_char + "-" + _number1.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_recAuto);
                    int serialId = _inventoryDAL.GetSerialID();

                    _reciept.Sar_receipt_no = _trecieptNo;
                    _reciept.Sar_seq_no = serialId;
                    //save receipt
                    _salesDAL.SaveReceiptHeader(_reciept);

                    foreach (RecieptItem _rec in _recieptItem)
                    {
                        _rec.Sard_seq_no = serialId;
                        _rec.Sard_receipt_no = _trecieptNo;
                        _salesDAL.SaveReceiptItem(_rec);
                    }
                }

                _salesDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _scope.Complete();
                _cardNo = _cusNo;
                _recieptNo = _trecieptNo;
                _serialNumber = _tserialNumber;

            }

            //return eff; // Commented by Udesh 06-Nov-2018
            return new object[] { eff, _loyal.Salcm_cd_ser };//Added by Udesh  06-Nov-2018
        }

        public LoyaltyMemeber GetLoyaltyMember(LoyaltyMemeber _loyal, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            List<LoyaltyMemeber> _loyaltymemeber = _salesDAL.GetCustomerLoyaltyies(_loyal.Salcm_cus_cd, _loyal.Salcm_no, _date, _loyal.Salcm_loty_tp);
            if (_loyaltymemeber.Count > 0)
                return _loyaltymemeber[0];
            else
                return null;

        }

        public List<LoyaltyMemeber> GetLoyaltyMemberList(string _cusCd, string _cardNo, DateTime _date, string _lotyTp)
        {
            _salesDAL = new SalesDAL();
            List<LoyaltyMemeber> _loyaltymemeber = _salesDAL.GetCustomerLoyaltyies(_cusCd, _cardNo, _date, _lotyTp);
            return _loyaltymemeber;

        }

        public decimal GetDiscount(string _cusCode, string _loyaltytype, string _item, DateTime _date, string _loc, string _pb, string _pblvl)
        {
            _salesDAL = new SalesDAL();
            List<LoyaltyMemeber> _loyal = _salesDAL.GetDiscount(_cusCode, _loyaltytype, _item, _date, _loc, _pb, _pblvl);
            return _loyal[0].Salcm_dis_rt;
        }

        public bool UpdateLoyaltyPoints(string _cuscode, string _card, DateTime _date, string _item, string _loc, string _pb, string _pblvl, int _qty, int _val, string _salesTp, string _bank, string _cdTp)
        {
            _salesDAL = new SalesDAL();
            int effect = 0;
            using (TransactionScope _scope = new TransactionScope())
            {
                decimal _loyaltypoints = 0;
                string _cusSpec = "";
                decimal _disrt = 0;
                _salesDAL.ConnectionOpen();
                List<LoyaltyMemeber> _loyaltymemeber = _salesDAL.GetCustomerLoyaltyies(_cuscode, _card, _date, null);
                if (_loyaltymemeber != null)
                {
                    //one card number can have many loyalty types
                    foreach (LoyaltyMemeber lm in _loyaltymemeber)
                    {
                        List<LoyaltyPointDefinition> _loyaldefinitions = _salesDAL.GetCardPoints(_item, lm.Salcm_loty_tp, _date, _loc, _pb, _pblvl, lm.Salcm_cus_spec, _salesTp, _bank, _cdTp);

                        //calculation
                        //start
                        //if is multiple 
                        if (_loyaldefinitions[0].Saldf_is_multi && _loyaldefinitions[0].Saldf_qt_frm < _qty && _loyaldefinitions[0].Saldf_qt_to > _qty && _loyaldefinitions[0].Saldf_value_frm < _val && _loyaldefinitions[0].Saldf_value_to > _val)
                        {
                            //  _loyaltypoints = _loyaltypoints + (_val / _loyaldefinitions[0].Saldf_val_div * _loyaldefinitions[0].Saldf_pt) * _qty;
                        }
                        else
                        {
                            //if (_loyaldefinitions[0].Saldf_qt_frm < _qty && _loyaldefinitions[0].Saldf_qt_to > _qty && _loyaldefinitions[0].Saldf_value_frm < _val && _loyaldefinitions[0].Saldf_value_to > _val)
                            //    _loyaltypoints = _loyaltypoints + (_val / _loyaldefinitions[0].Saldf_val_div * _loyaldefinitions[0].Saldf_pt);
                        }
                        //end

                        //update specification
                        LoyaltyCustomerSpecification _cus = _salesDAL.GetLoyaltyMemberSpecification(_cuscode, lm.Salcm_loty_tp);
                        if (_cus != null)
                        {
                            _cusSpec = _cus.Salcs_spec;
                        }
                        else
                            _cusSpec = _loyaltymemeber[0].Salcm_cus_spec;

                        //update discount rate
                        List<LoyaltyPointDiscount> _loyalDis = _salesDAL.GetDiscountRate(lm.Salcm_loty_tp, _item, _date, _loc, _pb, _pblvl);
                        if (_loyalDis != null)
                        {
                            _disrt = _loyalDis[0].Saldi_dis_rt;
                        }
                        else
                            _disrt = _loyaltymemeber[0].Salcm_dis_rt;

                        effect = _salesDAL.UpdateLoyaltyMember(_disrt, _loyaltypoints + lm.Salcm_bal_pt, lm.Salcm_val_to, _cuscode, lm.Salcm_loty_tp, _cusSpec, lm.Salcm_cd_ser, lm.Salcm_red_pt);

                        //send sms
                    }

                }
                //update allow muliple loyalties
                List<LoyaltyMemeber> _loyalTemMember = _salesDAL.GetCustomerLoyaltyies(_cuscode, null, _date, null);

                //one card number can have many loyalty types
                foreach (LoyaltyMemeber lm in _loyalTemMember)
                {
                    //remove used cards
                    if (lm.Salcm_no == _card)
                        continue;

                    List<LoyaltyType> _loyal = _salesDAL.GetLoyalityType(lm.Salcm_loty_tp, _item, _date);
                    foreach (LoyaltyType lt in _loyal)
                    {
                        if (lt.Salt_alw_multi_cdpnt)
                        {

                            List<LoyaltyPointDefinition> _loyaldefinitions = _salesDAL.GetCardPoints(_item, lm.Salcm_loty_tp, _date, _loc, _pb, _pblvl, lm.Salcm_cus_spec, _salesTp, _bank, _cdTp);
                            //calculation
                            //start
                            //if is multiple 
                            if (_loyaldefinitions[0].Saldf_is_multi && _loyaldefinitions[0].Saldf_qt_frm < _qty && _loyaldefinitions[0].Saldf_qt_to > _qty && _loyaldefinitions[0].Saldf_value_frm < _val && _loyaldefinitions[0].Saldf_value_to > _val)
                            {
                                _loyaltypoints = _loyaltypoints + _loyaldefinitions[0].Saldf_pt * _qty;
                            }
                            else
                            {
                                if (_loyaldefinitions[0].Saldf_qt_frm < _qty && _loyaldefinitions[0].Saldf_qt_to > _qty && _loyaldefinitions[0].Saldf_value_frm < _val && _loyaldefinitions[0].Saldf_value_to > _val)
                                    _loyaltypoints = _loyaltypoints + _loyaldefinitions[0].Saldf_pt;
                            }
                            //end

                            //update specification
                            LoyaltyCustomerSpecification _cus = _salesDAL.GetLoyaltyMemberSpecification(_cuscode, lm.Salcm_loty_tp);
                            if (_cus != null)
                            {
                                _cusSpec = _cus.Salcs_spec;
                            }
                            else
                                _cusSpec = _loyaltymemeber[0].Salcm_cus_spec;

                            //update discount rate
                            List<LoyaltyPointDiscount> _loyalDis = _salesDAL.GetDiscountRate(lm.Salcm_loty_tp, _item, _date, _loc, _pb, _pblvl);
                            if (_loyalDis != null)
                            {
                                _disrt = _loyalDis[0].Saldi_dis_rt;
                            }
                            else
                                _disrt = _loyaltymemeber[0].Salcm_dis_rt;

                            effect = _salesDAL.UpdateLoyaltyMember(_disrt, _loyaltypoints + lm.Salcm_bal_pt, lm.Salcm_val_to, _cuscode, lm.Salcm_loty_tp, _cusSpec, lm.Salcm_cd_ser, lm.Salcm_red_pt);

                            //send sms
                        }

                    }
                }
                _salesDAL.ConnectionClose();
                _scope.Complete();
            }
            if (effect > 0)
                return true;
            else
                return false;
        }

        public LoyaltyPointRedeemDefinition GetLoyaltyRedeemPoints(string _cusCode, string _loyaltytype, string _item, DateTime _date, string _loc, string _pb, string _pblvl)
        {
            _salesDAL = new SalesDAL();
            LoyaltyPointRedeemDefinition _loyal = _salesDAL.GetRedeemPoints(_loyaltytype, _item, _date, _loc, _pb, _pblvl);
            return _loyal;
        }

        public Int32 SaveLoyaltyCustomerSpecification(LoyaltyCustomerSpecification _loyal)
        {
            _salesDAL = new SalesDAL();
            Int32 eff = 0;
            _inventoryDAL = new InventoryDAL();
            using (TransactionScope _scope = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();
                _loyal.Salcs_seq_no = _inventoryDAL.GetSerialID();
                eff = _salesDAL.SaveLoyaltyCustomerSpecification(_loyal);
                _salesDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _scope.Complete();
            }
            return eff;
        }

        public bool UpdateLoyaltyMembership(LoyaltyMemeber _loyal, MasterAutoNumber _autoNum, LoyaltyMemberLog _loyalLog)
        {
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            int effect = 0;



            using (TransactionScope _scope = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.UpdateAutoNumber(_autoNum);
                //update loyalty membership table
                effect = _salesDAL.UpdateLoyaltyMember(_loyal.Salcm_dis_rt, _loyal.Salcm_bal_pt, _loyal.Salcm_val_to, _loyal.Salcm_cus_cd, _loyal.Salcm_no, _loyal.Salcm_cus_spec, _loyal.Salcm_cd_ser, _loyal.Salcm_red_pt);
                //insert loyalty membership log table
                _loyalLog.Sacml_seq_no = _inventoryDAL.GetSerialID();
                _salesDAL.SaveLoyaltyMemberLog(_loyalLog);
                _salesDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _scope.Complete();
            }
            if (effect > 0)
                return true;
            else
                return false;

        }

        public Int32 SaveLoyaltyMemberLog(LoyaltyMemberLog _loyal)
        {
            _salesDAL = new SalesDAL();
            Int32 eff = 0;
            _inventoryDAL = new InventoryDAL();
            using (TransactionScope _scope = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();
                _loyal.Sacml_seq_no = _inventoryDAL.GetSerialID();
                eff = _salesDAL.SaveLoyaltyMemberLog(_loyal);
                _salesDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _scope.Complete();
            }
            return eff;
        }

        public bool CheckIsCompulsory(string _item, DateTime _date, string _loc, string _pb, string _pbLvl)
        {
            _salesDAL = new SalesDAL();
            LoyaltyType _loyal = _salesDAL.GetLoyalty(_item, _date, _loc, _pb, _pbLvl);
            if (_loyal == null)
                return false;
            else
            {
                if (_loyal.Salt_is_comp)
                    return true;
                else
                    return false;
            }
        }

        public DataTable GetLoyaltyCustomerSpecifications(string _loyalType)
        {
            _salesDAL = new SalesDAL();
            DataTable _loyal = _salesDAL.GetLoyaltyCustomerSpecifications(_loyalType);
            return _loyal;
        }

        public bool LoyaltyRedeem(string _cuscode, string _card, string _loyalty, DateTime _date, decimal _points)
        {
            _salesDAL = new SalesDAL();

            int effect = 0;
            List<LoyaltyMemeber> _loyaltymemeber = _salesDAL.GetCustomerLoyaltyies(_cuscode, _card, _date, _loyalty);
            if (_loyaltymemeber.Count > 0)
            {
                using (TransactionScope _scope = new TransactionScope())
                {
                    _salesDAL.ConnectionOpen();
                    //update loyalty membership table
                    effect = _salesDAL.UpdateLoyaltyMember(_loyaltymemeber[0].Salcm_dis_rt, _loyaltymemeber[0].Salcm_bal_pt - _points, _loyaltymemeber[0].Salcm_val_to, _loyaltymemeber[0].Salcm_cus_cd, _loyaltymemeber[0].Salcm_loty_tp, _loyaltymemeber[0].Salcm_cus_spec, _loyaltymemeber[0].Salcm_cd_ser, _loyaltymemeber[0].Salcm_red_pt + _points);
                    //insert loyalty membership log table
                    _salesDAL.ConnectionClose();
                    _scope.Complete();
                }
            }
            if (effect > 0)
                return true;
            else
                return false;
        }

        public DataTable GetBankCC(string _bank)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetBankCC(_bank);
        }

        public DataTable GetLoyaltySpecifications()
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetLoyaltySpecifications();
        }

        public Int32 SaveLoyaltySpecifications(string _spec, string _creBy, DateTime _creDt)
        {
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            int _result = 0;
            _salesDAL.ConnectionOpen();
            _inventoryDAL.ConnectionOpen();
            _result = _salesDAL.SaveLoyaltySpecifications(_inventoryDAL.GetSerialID(), _spec, _creBy, _creDt);
            _salesDAL.ConnectionClose();
            _inventoryDAL.ConnectionClose();
            return _result;
        }

        //Darshana 16-10-2012
        public Boolean IsCheckLeaseCom(string _inv, string _com, string _pc, string _cate)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.IsCheckLeaseCom(_inv, _com, _pc, _cate);
        }
        public Boolean IsCheckLeaseCompany(string _inv, string _com, string _pc, string _cate)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.IsCheckLeaseCompany(_inv, _com, _pc, _cate);
        }


        //kapila 28/2/2013
        public Boolean IsCheckSalesComm(Int32 _seqno)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.IsCheckSalesComm(_seqno);
        }

        public List<string> DeliveryOrderNoByInvoice(string _invoice)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.DeliveryOrderNoByInvoice(_invoice);
        }

        //darshana 18-10-2012
        public List<HPGurantorParam> getGurParam(string _sch, string _type, string _value, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getGurParam(_sch, _type, _value, _date);
        }
        #region Commission Change
        public DataTable Get_invoiceItemsForCommis(string inv_no, string item_code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_invoiceItemsForCommis(inv_no, item_code); //doesn't matter if item_code is null.
        }
        public DataTable Get_Paymodes_ofItemsForCommis(string inv_no, string item_code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_Paymodes_ofItemsForCommis(inv_no, item_code); //doesn't matter if item_code is null.
        }

        public Int32 UpdateCommissionLine(string invoiceNo, string itemCode, Int32 itmLine, Decimal commLine, Decimal finCommRt, Decimal finCommAmt)
        {
            Int32 _effects = 0;
            _salesDAL = new SalesDAL();
            // using (TransactionScope _tr = new TransactionScope())
            try
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _salesDAL.UpdateCommissionLine(invoiceNo, itemCode, itmLine, commLine, finCommRt, finCommAmt);
                //_salesDAL.ConnectionClose();
                _effects = 1;
                _salesDAL.TransactionCommit();
                // _tr.Complete();
            }
            catch (Exception ex)
            {
                _effects = -1;
                _salesDAL.TransactionRollback();
            }
            return _effects;
        }
        public Int32 circularWise_Commission_change(string _com, List<string> _pcList, DateTime _date, string circularName, string circularCode)
        {

            SalesDAL _salDAL = new SalesDAL();
            _salDAL.ConnectionOpen();
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            InventoryDAL _invDAL = new InventoryDAL();
            //List<InvoiceHeader> _ListInv = _salDAL.GetCommissionInvoices(_com, _pc, _date);
            //---------------------------------addition----------------------------------------------------
            List<InvoiceHeader> _ListInv = new List<InvoiceHeader>();
            foreach (string _pc in _pcList)
            {
                //List<InvoiceHeader> addList = _salDAL.GetCommissionInvoices_ON_circular(circularName, circularCode, _pc);
                //if (addList != null)
                List<InvoiceHeader> addList = _salDAL.GetCommissionInvoices_ON_circular(circularName, circularCode, _pc);//gets all invoices that are between the circular's from and to dates.

                //addList.RemoveAll(xx => xx.Sah_inv_no!="CS00385");
                if (addList != null)
                {
                    _ListInv.AddRange(addList);
                }

            }
            //------------------------------------------------------------------------------
            if (_ListInv != null)
            {
                //invoices
                for (int i = 0; i < _ListInv.Count; i++)
                {
                    List<SaleCommission> _saveCommission = new List<SaleCommission>();

                    //get executive
                    DataTable _tbl = _salDAL.GetEmployee(_ListInv[i].Sah_com, _ListInv[i].Sah_sales_ex_cd);
                    string _executiveType = string.Empty;
                    foreach (DataRow _r in _tbl.Rows)
                    {
                        _executiveType = Convert.ToString(_r["esep_cat_cd"]);
                    }

                    //get receipts
                    List<RecieptItem> _ListRecItem = _salDAL.GetReceiptItemsByInvoice(_ListInv[i].Sah_inv_no);
                    if (_ListRecItem == null)
                    {

                    }
                    else
                    {
                        List<InvoiceItem> _ListInvDet = new List<InvoiceItem>();
                        _ListInvDet = _salDAL.GetCommissionInvoicesItems(_ListInv[i].Sah_inv_no);
                        //invoice Details
                        if (_ListInvDet != null)
                        {
                            for (int x = 0; x < _ListInvDet.Count; x++)
                            {
                                decimal _totalNetValue = _ListInvDet.Sum(y => y.Sad_unit_amt * y.Sad_qty - y.Sad_disc_amt + y.Sad_itm_tax_amt);

                                MasterItem _item = _invDAL.GetItem(_ListInv[i].Sah_com, _ListInvDet[x].Sad_itm_cd);
                                string _discountSeq = "";
                                bool _isPromo;
                                try
                                {
                                    _discountSeq = _ListInvDet[x].Sad_dis_seq.ToString();
                                    _isPromo = _ListInvDet[x].Sad_dis_type == "P" ? true : false;
                                }
                                catch (Exception) { _discountSeq = "0"; _isPromo = false; }
                                Dictionary<ItemHierarchyElement, string> _itemHierarchyElement = new Dictionary<ItemHierarchyElement, string>();
                                _itemHierarchyElement.Add(ItemHierarchyElement.DISCOUNT, _discountSeq);
                                _itemHierarchyElement.Add(ItemHierarchyElement.BRAND, _item.Mi_brand);
                                _itemHierarchyElement.Add(ItemHierarchyElement.ITEM, _item.Mi_cd);
                                _itemHierarchyElement.Add(ItemHierarchyElement.MAIN_CATEGORY, _item.Mi_cate_1);
                                _itemHierarchyElement.Add(ItemHierarchyElement.PRICE_BOOK, _ListInvDet[x].Sad_pbook);
                                _itemHierarchyElement.Add(ItemHierarchyElement.PRICE_LEVEL, _ListInvDet[x].Sad_pb_lvl);
                                _itemHierarchyElement.Add(ItemHierarchyElement.PROMOTION, _ListInvDet[x].Sad_promo_cd);
                                _itemHierarchyElement.Add(ItemHierarchyElement.SERIAL, string.Empty);
                                _itemHierarchyElement.Add(ItemHierarchyElement.SUB_CATEGORY, _item.Mi_cate_2);

                                List<CashCommissionHeaderRef> CommissionHeader = _salDAL.Get_CommissionHeader(null, circularName);

                                if (CommissionHeader != null)
                                {
                                    if (CommissionHeader.Count > 0)
                                    {
                                        // List<CashCommissionDetailRef> _CashCommissionDetail = GetCommissionStructure(_ListInv[i].Sah_com, _ListInv[i].Sah_pc, _ListInv[i].Sah_inv_tp, _ListInv[i].Sah_dt, _ListInvDet[x].Sad_pbook, _ListInvDet[x].Sad_pb_lvl, _ListInv[i].Sah_sales_ex_cd, _executiveType, _itemHierarchyElement, "PC_PRIT_HIERARCHY", "PC");
                                        List<CashCommissionDetailRef> _listCommCE = null;     //kapila 20/12/2013
                                        List<CashCommissionDetailRef> _CashCommissionDetail = GetCommissionStructure_onCircular(_ListInv[i].Sah_com, _ListInv[i].Sah_pc, _ListInv[i].Sah_inv_tp, _ListInv[i].Sah_dt, _ListInvDet[x].Sad_pbook, _ListInvDet[x].Sad_pb_lvl, _ListInv[i].Sah_sales_ex_cd, _executiveType, _itemHierarchyElement, "PC_PRIT_HIERARCHY", "PC", CommissionHeader[0].Scch_cd, _isPromo);
                                        if (_CashCommissionDetail != null)
                                        {
                                            //  _CashCommissionDetail.RemoveAll(xx => xx.Sccd_cd != CommissionHeader[0].Scch_cd);
                                            if (_CashCommissionDetail.Count > 0)
                                            {
                                                // if (CommissionHeader[0].Scch_cd == _CashCommissionDetail[0].Sccd_cd)
                                                if (true)
                                                {
                                                    List<SaleCommission> _commission = null;

                                                    //commission calculation
                                                    if (_CashCommissionDetail != null)
                                                    {
                                                        if (_CashCommissionDetail.Count > 0)
                                                        {
                                                            _commission = GetCalculatedCommission(_ListInvDet[x].Sad_itm_cd, _ListInvDet[x].Sad_itm_line, _ListInvDet[x].Sad_unit_rt * _ListInvDet[x].Sad_qty - _ListInvDet[x].Sad_disc_amt, _totalNetValue, _ListRecItem, _CashCommissionDetail[0], "CS", _ListInv[i].Sah_inv_no, _listCommCE[0], _executiveType);
                                                        }
                                                        if (_commission != null)
                                                            _saveCommission.AddRange(_commission);
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }

                            }

                        }
                        //////////////////////////////////////////
                        //////////////////////////////////////////
                        if (_saveCommission != null)
                        {
                            if (_saveCommission.Count > 0)
                            {
                                //delete already saved commission
                                // _salDAL.DeleteSalesCommission(_ListInv[i].Sah_seq_no);

                                //Save Commissiom
                                _saveCommission.ForEach(xX => xX.Sac_invoice_no = Convert.ToString(_ListInv[i].Sah_inv_no));
                                _saveCommission.ForEach(xX => xX.Sac_seq_no = _ListInv[i].Sah_seq_no);
                                foreach (SaleCommission _commm in _saveCommission)
                                {
                                    //_salDAL.SaveSalesCommission(_commm);
                                    //TODO: update commission
                                    if (_commm.Sac_invoice_no == "CS00385")
                                    {
                                        Decimal DD = _commm.Sac_comm_rate;
                                    }
                                    Int32 eff = UpdateCommissionLine(_commm.Sac_invoice_no, _commm.Sac_itm_cd, _commm.Sac_itm_line, _commm.Sac_comm_line, _commm.Sac_comm_rate, _commm.Sac_comm_amt);
                                }

                            }
                        }
                        ///////////////////////////////////////////
                        ///////////////////////////////////////////

                    }

                }

            }

            _salDAL.ConnectionClose();
            _salesDAL.ConnectionClose();
            return 1;
        }
        public List<CashCommissionDetailRef> GetCommissionStructure_onCircular(string _company, string _profitcenter, string _invoicetype, DateTime _date, string _pricebook, string _pricelevel, string _executive, string _exetype, Dictionary<ItemHierarchyElement, string> _itemHierarchyElement, string _salesPriorityHierarchyCategory, string _salesPriorityHierarchyType, string circularCode, bool _isPromo)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            List<CashCommissionDetailRef> _returnList = null;
            // List<CashCommissionDetailRef> _list = _salesDAL.GetCashCommissionDetail(_invoicetype, _date, _pricebook, _pricelevel);
            List<CashCommissionDetailRef> _list = _salesDAL.GetCashCommissionDetail_basedCircular(_invoicetype, _date, _pricebook, _pricelevel, circularCode);
            List<MasterSalesPriorityHierarchy> _hierarchy = _salesDAL.GetSalesPriorityHierarchy(_company, _profitcenter, _salesPriorityHierarchyCategory, _salesPriorityHierarchyType);
            List<CashCommissionDetailRef> _transporter = null;

            if (_list != null)
                if (_list.Count > 0)
                {
                    //check for execitve
                    var _chkByExecutive = (from _l in _list
                                           where _l.Sccd_exec_cd == _executive
                                           select _l).ToList();
                    //check for execitve Type
                    var _checkByExectiveType = (from _l in _list
                                                where _l.Sccd_exec_tp == _exetype
                                                select _l).ToList();

                    if (_chkByExecutive != null) if (_chkByExecutive.Count > 0) _transporter = _chkByExecutive; else if (_checkByExectiveType != null) if (_checkByExectiveType.Count > 0) _transporter = _checkByExectiveType; else _transporter = _list;

                    List<CashCommissionDetailRef> _finallist = CheckItemHierarchyWithinLocationHierarchy(_company, _profitcenter, _hierarchy, _transporter, _itemHierarchyElement, _isPromo);
                    if (_finallist != null)
                        if (_finallist.Count > 0)
                            _returnList = _finallist;

                }
            _salesDAL.ConnectionClose();
            return _returnList;
        } //GetCommission
        //public Int32 Process_Commission_change_at_PC(string _com, List<string> _pcList, DateTime _date)
        //{
        //    //(string _com, List<string> _pcList, DateTime _date, string circularName, string circularCode)
        //    SalesDAL _salDAL = new SalesDAL(); _salDAL.ConnectionOpen();
        //    _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen();
        //    InventoryDAL _invDAL = new InventoryDAL();
        //    List<InvoiceHeader> _ListInv = new List<InvoiceHeader>();// _salDAL.GetCommissionInvoices(_com, _pc, _date);
        //    foreach (string _pc in _pcList)
        //    {
        //        List<InvoiceHeader> addList = _salDAL.GetCommissionInvoices(_com, _pc, _date);

        //        //addList.RemoveAll(xx => xx.Sah_inv_no!="CS00385");
        //        if (addList != null)
        //        {
        //            _ListInv.AddRange(addList);
        //        }
        //    }
        //    if (_ListInv != null)
        //    {
        //        //invoices
        //        for (int i = 0; i < _ListInv.Count; i++)
        //        {
        //            List<SaleCommission> _saveCommission = new List<SaleCommission>();

        //            //get executive
        //            DataTable _tbl = _salDAL.GetEmployee(_ListInv[i].Sah_com, _ListInv[i].Sah_sales_ex_cd);
        //            string _executiveType = string.Empty;
        //            foreach (DataRow _r in _tbl.Rows)
        //            {
        //                _executiveType = Convert.ToString(_r["esep_cat_cd"]);
        //            }

        //            //get receipts
        //            List<RecieptItem> _ListRecItem = _salDAL.GetReceiptItemsByInvoice(_ListInv[i].Sah_inv_no);

        //            List<InvoiceItem> _ListInvDet = new List<InvoiceItem>();
        //            _ListInvDet = _salDAL.GetCommissionInvoicesItems(_ListInv[i].Sah_inv_no);
        //            //invoice Details
        //            if (_ListInvDet != null)
        //            {
        //                for (int x = 0; x < _ListInvDet.Count; x++)
        //                {
        //                    decimal _totalNetValue = _ListInvDet.Sum(y => y.Sad_unit_amt * y.Sad_qty - y.Sad_disc_amt + y.Sad_itm_tax_amt);

        //                    MasterItem _item = _invDAL.GetItem(_ListInv[i].Sah_com, _ListInvDet[x].Sad_itm_cd);

        //                    Dictionary<ItemHierarchyElement, string> _itemHierarchyElement = new Dictionary<ItemHierarchyElement, string>();
        //                    _itemHierarchyElement.Add(ItemHierarchyElement.BRAND, _item.Mi_brand);
        //                    _itemHierarchyElement.Add(ItemHierarchyElement.ITEM, _item.Mi_cd);
        //                    _itemHierarchyElement.Add(ItemHierarchyElement.MAIN_CATEGORY, _item.Mi_cate_1);
        //                    _itemHierarchyElement.Add(ItemHierarchyElement.PRICE_BOOK, _ListInvDet[x].Sad_pbook);
        //                    _itemHierarchyElement.Add(ItemHierarchyElement.PRICE_LEVEL, _ListInvDet[x].Sad_pb_lvl);
        //                    _itemHierarchyElement.Add(ItemHierarchyElement.PROMOTION, _ListInvDet[x].Sad_promo_cd);
        //                    _itemHierarchyElement.Add(ItemHierarchyElement.SERIAL, string.Empty);
        //                    _itemHierarchyElement.Add(ItemHierarchyElement.SUB_CATEGORY, _item.Mi_cate_2);

        //                    List<CashCommissionDetailRef> _CashCommissionDetail = GetCommissionStructure(_ListInv[i].Sah_com, _ListInv[i].Sah_pc, _ListInv[i].Sah_inv_tp, _ListInv[i].Sah_dt, _ListInvDet[x].Sad_pbook, _ListInvDet[x].Sad_pb_lvl, _ListInv[i].Sah_sales_ex_cd, _executiveType, _itemHierarchyElement, "PC_PRIT_HIERARCHY", "PC");
        //                    List<SaleCommission> _commission = null;

        //                    //commission calculation
        //                    if (_CashCommissionDetail != null)
        //                    {
        //                        if (_CashCommissionDetail.Count > 0)
        //                        {
        //                            _commission = GetCalculatedCommission(_ListInvDet[x].Sad_itm_cd, _ListInvDet[x].Sad_itm_line, _ListInvDet[x].Sad_unit_rt * _ListInvDet[x].Sad_qty - _ListInvDet[x].Sad_disc_amt, _totalNetValue, _ListRecItem, _CashCommissionDetail[0]);
        //                        }
        //                        if (_commission != null)
        //                            _saveCommission.AddRange(_commission);
        //                    }

        //                }

        //            }
        //            if (_saveCommission != null)
        //            {
        //                if (_saveCommission.Count > 0)
        //                {
        //                    //delete already saved commission
        //                   // _salDAL.DeleteSalesCommission(_ListInv[i].Sah_seq_no);

        //                    //Save Commissiom
        //                    _saveCommission.ForEach(x => x.Sac_invoice_no = Convert.ToString(_ListInv[i].Sah_inv_no));
        //                    _saveCommission.ForEach(x => x.Sac_seq_no = _ListInv[i].Sah_seq_no);
        //                    //foreach (SaleCommission _commm in _saveCommission)
        //                    //{
        //                    //    _salDAL.SaveSalesCommission(_commm);
        //                    //}
        //                    foreach (SaleCommission _commm in _saveCommission)
        //                    {
        //                        //_salDAL.SaveSalesCommission(_commm);
        //                        //TODO: update commission
        //                        if (_commm.Sac_invoice_no == "CS00385")
        //                        {
        //                            Decimal DD = _commm.Sac_comm_rate;
        //                        }
        //                        Int32 eff = UpdateCommissionLine(_commm.Sac_invoice_no, _commm.Sac_itm_cd, _commm.Sac_itm_line, _commm.Sac_comm_line, _commm.Sac_comm_rate, _commm.Sac_comm_amt);
        //                    }
        //                }
        //            }
        //        }

        //    }
        //    _salDAL.ConnectionClose();
        //    _salesDAL.ConnectionClose();
        //    return 1;
        //}
        public Int32 Process_Commission_change_at_PC(string _com, List<string> _pcList, List<DateTime> _dateList)
        {

            SalesDAL _salDAL = new SalesDAL();
            FinancialDAL _finDAL = new FinancialDAL();

            _salDAL.ConnectionOpen();
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            _finDAL.ConnectionOpen();
            InventoryDAL _invDAL = new InventoryDAL();
            //List<InvoiceHeader> _ListInv = _salDAL.GetCommissionInvoices(_com, _pc, _date);
            //---------------------------------addition----------------------------------------------------
            List<InvoiceHeader> _ListInv = new List<InvoiceHeader>();
            foreach (string _pc in _pcList)
            {
                foreach (DateTime _date in _dateList)
                {
                    Boolean isPeriodClose = _finDAL.IsPeriodClosed(_com, _pc, "FIN_REM", _date);

                    if (isPeriodClose == false)
                    {
                        //List<InvoiceHeader> addList = _salDAL.GetCommissionInvoices(_com, _pc, _date, "CS");
                        List<InvoiceHeader> addList = _salDAL.GetCommissionInvoicesforUpdate(_com, _pc, _date, "CS");
                        if (addList != null)
                        {
                            _ListInv.AddRange(addList);
                        }
                    }

                }
                // List<InvoiceHeader> addList = _salDAL.GetCommissionInvoices(_com, _pc, _date);

                //addList.RemoveAll(xx => xx.Sah_inv_no!="CS00385");

            }
            //------------------------------------------------------------------------------
            if (_ListInv != null)
            {
                //invoices
                for (int i = 0; i < _ListInv.Count; i++)
                {
                    List<SaleCommission> _saveCommission = new List<SaleCommission>();

                    //get executive
                    DataTable _tbl = _salDAL.GetEmployee(_ListInv[i].Sah_com, _ListInv[i].Sah_sales_ex_cd);
                    string _executiveType = string.Empty;
                    foreach (DataRow _r in _tbl.Rows)
                    {
                        _executiveType = Convert.ToString(_r["esep_cat_cd"]);
                    }

                    //get receipts
                    List<RecieptItem> _ListRecItem = _salDAL.GetReceiptItemsByInvoice(_ListInv[i].Sah_inv_no);
                    if (_ListRecItem == null)
                    {

                    }
                    else
                    {
                        List<InvoiceItem> _ListInvDet = new List<InvoiceItem>();
                        _ListInvDet = _salDAL.GetCommissionInvoicesItems(_ListInv[i].Sah_inv_no);
                        //invoice Details
                        if (_ListInvDet != null)
                        {
                            for (int x = 0; x < _ListInvDet.Count; x++)
                            {
                                decimal _totalNetValue = _ListInvDet.Sum(y => y.Sad_unit_amt * y.Sad_qty - y.Sad_disc_amt + y.Sad_itm_tax_amt);

                                MasterItem _item = _invDAL.GetItem(_ListInv[i].Sah_com, _ListInvDet[x].Sad_itm_cd);
                                string _discountSeq = "";
                                bool _isPromo;
                                try
                                {
                                    _discountSeq = _ListInvDet[x].Sad_dis_seq.ToString();
                                    _isPromo = _ListInvDet[x].Sad_dis_type == "P" ? true : false;
                                }
                                catch (Exception) { _discountSeq = "0"; _isPromo = false; }
                                Dictionary<ItemHierarchyElement, string> _itemHierarchyElement = new Dictionary<ItemHierarchyElement, string>();
                                _itemHierarchyElement.Add(ItemHierarchyElement.DISCOUNT, _discountSeq);
                                _itemHierarchyElement.Add(ItemHierarchyElement.BRAND, _item.Mi_brand);
                                _itemHierarchyElement.Add(ItemHierarchyElement.ITEM, _item.Mi_cd);
                                _itemHierarchyElement.Add(ItemHierarchyElement.MAIN_CATEGORY, _item.Mi_cate_1);
                                _itemHierarchyElement.Add(ItemHierarchyElement.PRICE_BOOK, _ListInvDet[x].Sad_pbook);
                                _itemHierarchyElement.Add(ItemHierarchyElement.PRICE_LEVEL, _ListInvDet[x].Sad_pb_lvl);
                                _itemHierarchyElement.Add(ItemHierarchyElement.PROMOTION, _ListInvDet[x].Sad_promo_cd);
                                _itemHierarchyElement.Add(ItemHierarchyElement.SERIAL, string.Empty);
                                _itemHierarchyElement.Add(ItemHierarchyElement.SUB_CATEGORY, _item.Mi_cate_2);

                                //List<CashCommissionHeaderRef> CommissionHeader = _salDAL.Get_CommissionHeader(null, circularName);

                                //if (CommissionHeader != null)
                                //{
                                // if (CommissionHeader.Count > 0)
                                //{

                                List<CashCommissionDetailRef> _listCommCE = null;     //kapila 20/12/2013
                                List<CashCommissionDetailRef> _CashCommissionDetail = GetCommissionStructure(_ListInv[i].Sah_com, _ListInv[i].Sah_pc, _ListInv[i].Sah_inv_tp, _ListInv[i].Sah_dt, _ListInvDet[x].Sad_pbook, _ListInvDet[x].Sad_pb_lvl, _ListInv[i].Sah_sales_ex_cd, _executiveType, _itemHierarchyElement, "PC_PRIT_HIERARCHY", "PC", out _listCommCE, _isPromo);
                                //  List<CashCommissionDetailRef> _CashCommissionDetail = GetCommissionStructure_onCircular(_ListInv[i].Sah_com, _ListInv[i].Sah_pc, _ListInv[i].Sah_inv_tp, _ListInv[i].Sah_dt, _ListInvDet[x].Sad_pbook, _ListInvDet[x].Sad_pb_lvl, _ListInv[i].Sah_sales_ex_cd, _executiveType, _itemHierarchyElement, "PC_PRIT_HIERARCHY", "PC", CommissionHeader[0].Scch_cd);
                                if (_CashCommissionDetail != null)
                                {
                                    //  _CashCommissionDetail.RemoveAll(xx => xx.Sccd_cd != CommissionHeader[0].Scch_cd);
                                    if (_CashCommissionDetail.Count > 0)
                                    {
                                        // if (CommissionHeader[0].Scch_cd == _CashCommissionDetail[0].Sccd_cd)
                                        if (true)
                                        {
                                            List<SaleCommission> _commission = null;

                                            //commission calculation
                                            if (_CashCommissionDetail != null)
                                            {
                                                if (_CashCommissionDetail.Count > 0)
                                                {
                                                    _commission = GetCalculatedCommission(_ListInvDet[x].Sad_itm_cd, _ListInvDet[x].Sad_itm_line, _ListInvDet[x].Sad_unit_rt * _ListInvDet[x].Sad_qty - _ListInvDet[x].Sad_disc_amt, _totalNetValue, _ListRecItem, _CashCommissionDetail[0], "CS", _ListInv[i].Sah_inv_no, _listCommCE[0], _executiveType);
                                                }
                                                if (_commission != null)
                                                    _saveCommission.AddRange(_commission);
                                            }
                                        }
                                    }
                                }

                                // }
                                //}

                            }

                        }
                        //////////////////////////////////////////
                        //////////////////////////////////////////
                        if (_saveCommission != null)
                        {
                            if (_saveCommission.Count > 0)
                            {
                                //delete already saved commission
                                // _salDAL.DeleteSalesCommission(_ListInv[i].Sah_seq_no);

                                //Save Commissiom
                                _saveCommission.ForEach(xX => xX.Sac_invoice_no = Convert.ToString(_ListInv[i].Sah_inv_no));
                                _saveCommission.ForEach(xX => xX.Sac_seq_no = _ListInv[i].Sah_seq_no);
                                foreach (SaleCommission _commm in _saveCommission)
                                {
                                    //_salDAL.SaveSalesCommission(_commm);
                                    //TODO: update commission
                                    // Int32 eff = UpdateCommissionLine(_commm.Sac_invoice_no, _commm.Sac_itm_cd, _commm.Sac_comm_line, _commm.Sac_comm_rate, _commm.Sac_comm_amt,);
                                    //if (_commm.Sac_invoice_no == "CS00385")
                                    //{
                                    //    Decimal DD = _commm.Sac_comm_rate;
                                    //}
                                    //Int32 eff = UpdateCommissionLine(_commm.Sac_invoice_no, _commm.Sac_itm_cd, _commm.Sac_itm_line, _commm.Sac_comm_line, _commm.Sac_comm_rate, _commm.Sac_comm_amt);
                                    Decimal _calcOn = Convert.ToDecimal(_commm.Sac_calc_on);
                                    Int32 eff = UpdateCommissionBulk(_commm.Sac_invoice_no, _commm.Sac_itm_cd, _commm.Sac_itm_line, _commm.Sac_comm_line, _commm.Sac_comm_rate_final, _commm.Sac_comm_amt_final, _commm.Sac_seq_no, _commm.Sac_pay_mode, _calcOn, 0, 0);
                                }

                            }
                        }
                        ///////////////////////////////////////////
                        ///////////////////////////////////////////

                    }

                }

            }
            _finDAL.ConnectionClose();
            _salDAL.ConnectionClose();
            _salesDAL.ConnectionClose();
            return 1;
        }
        #endregion Commission Change

        public Dictionary<string, string> GetInvoiceWarrantyDetail(string _invoice)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceWarrantyDetail(_invoice);
        }

        //darshana 19-10-2012
        public List<HpAccRestriction> getAccRest(string _pc, DateTime _date, Int32 _type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getAccRest(_pc, _date, _type);
        }

        //darshana 19-10-2012
        public List<HpAccount> getAccDetRest(string _com, string _pc, DateTime _fdate, DateTime _tdate)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getAccDetRest(_com, _pc, _fdate, _tdate);
        }

        //written by darshana - 21/10/2012 - save hp adjustment
        public Int32 SaveHPResheduleApp(RequestApprovalHeader _AppHdr, RequestApprovalDetail _AppDet, MasterAutoNumber _AppReqAuto, out string _docNo)
        {
            Int32 _effect = 0;
            string _ReqNo = "";


            using (TransactionScope _tr = new TransactionScope())
            {
                _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen();
                _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen();


                MasterAutoNumber ReqNoAuto = _inventoryDAL.GetAutoNumber(_AppReqAuto.Aut_moduleid, _AppReqAuto.Aut_direction, _AppReqAuto.Aut_start_char, _AppReqAuto.Aut_cate_tp, _AppReqAuto.Aut_cate_cd, _AppReqAuto.Aut_modify_dt, _AppReqAuto.Aut_year);
                string _ReqAppNo = ReqNoAuto.Aut_cate_cd + "-" + ReqNoAuto.Aut_start_char + "-" + ReqNoAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                _ReqNo = _ReqAppNo;
                _inventoryDAL.UpdateAutoNumber(_AppReqAuto);

                _AppHdr.Grah_ref = _ReqAppNo;
                _AppDet.Grad_ref = _ReqAppNo;

                _generalDAL.SaveRequestApproveHear(_AppHdr);
                _generalDAL.Save_RequestApprove_Det(_AppDet);


                _generalDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _effect = 1;
                _tr.Complete();
            }
            _docNo = _ReqNo;
            return _effect;
        }

        //written by darshana on 22-10-2012
        public List<RequestApprovalHeader> getReqbyType(string _com, string _pc, string _type, DateTime _fdate, DateTime _tdate)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getReqbyType(_com, _pc, _type, _fdate, _tdate);
        }

        //written by darshana on 22-10-2012
        public List<HPResheScheme> getAllowSch(string _sch)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getAllowSch(_sch);
        }

        //written by darshana on 22/10/2012
        public List<PriceBookLevelRef> getWarrExBook(string _com, string _pbook, string _plevel)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getWarrExBook(_com, _pbook, _plevel);
        }

        //written by darshana on 24-10-2012
        public List<ReceiptWaraExtend> GetWarrantyExtendReceipt(string _recNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetWarrantyExtendReceipt(_recNo);
        }

        //Written By Prabhath on 20/10/2012
        public List<HpSheduleDetails> GetHpAccountSchedule(string _account)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHpAccountSchedule(_account);
        }

        public DataTable GetCustomerAcknowledgment(string _com, string _pc, DateTime _from, DateTime _to)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCustomerAcknowledgment(_com, _pc, _from, _to);
        }

        //Written By Prabhath on 20/10/2012
        public string GetMonitorCustomer(string _company, string _profitcenter, string _parameter, string _searchtype)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetMonitorCustomer(_company, _profitcenter, _parameter, _searchtype);
        }

        //by darshan on 31-07-2013
        public DataTable GetCusMonitorByDocument(string _company, string _profitcenter, string _doc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCusMonitorByDocument(_company, _profitcenter, _doc);
        }

        //Written By Prabhath on 26/10/2012
        public DataTable GetMonitorByCustomerDocument(string _company, string _profitcenter, string _customer)
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();   //kapila 5/5/2016
            if (_securityDAL.Is_Report_DR("MonitorByCustomerDocument") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetMonitorByCustomerDocument(_company, _profitcenter, _customer);
        }

        public DataTable GetSMSManagers(string _com, string _type, string _code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSMSManagers(_com, _type, _code);
        }

        public DataTable GetHPCustomer(string _com, string _pc, DateTime _from, DateTime _to, string _type, string _accNo, DateTime _date, DateTime _ars, DateTime _sup, Int32 _isAll, List<InsuItem> _items, Boolean _isInv, DateTime _fromInv, DateTime _ToInv, Boolean _isReg, DateTime _fromReg, DateTime _ToReg, Boolean _isno, DateTime _fromPlate, DateTime _ToPlate, Boolean _isCR, DateTime _fromCr, DateTime _ToCr)
        {
            DataTable _dt = new DataTable();
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _salesDAL.Deletesms_items();
                _dt = _salesDAL.GetHPCustomer(_com, _pc, _from, _to, _type, _accNo, _date, _ars, _sup, _isAll, null, _isInv, _fromInv, _ToInv, _isReg, _fromReg, _ToReg, _isno, _fromPlate, _ToPlate, _isCR, _fromCr, _ToCr);

                _salesDAL.TransactionCommit();
            }
            catch (Exception ex)
            {

                _salesDAL.TransactionRollback();
            }

            return _dt;
        }

        //Written By Prabhath on 30/10/2012
        public DataTable GetHpGuarantor(string _type, string _account)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHpGuarantor(_type, _account);
        }

        public DataTable GetHpItems(string _account)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHpItems(_account);
        }

        //Written By Prabhath on 30/10/2012
        public DataTable GetAccountSummary(string _account)
        {
            _salesDAL = new SalesDAL();
            DataTable _t = _salesDAL.GetAccountSummary(_account);
            if (_t != null)
                if (_t.Rows.Count > 0)
                    _t.Rows.RemoveAt(_t.Rows.Count - 1);
            return _t;
        }

        //Written By Prabhath on 30/10/2012
        public DataTable GetAccountScheduleHistory(string _account)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAccountScheduleHistory(_account);
        }

        //Written By Prabhath on 30/10/2012
        public DataTable GetInvoiceWithSerial(string _invoice)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceWithSerial(_invoice);
        }

        //writtn by darshana on 30-07-2013
        public DataTable GetInvoiceWithSerialCusMonitor(string _com, string _invoice)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceWithSerialCusMonitor(_com, _invoice);
        }

        //Written By Prabhath on 30/10/2012
        public DataTable GetRevertAccountDetail(string _account)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRevertAccountDetail(_account);
        }

        //Written By Prabhath on 30/10/2012
        public DataTable GetRevertReleaseAccountDetail(string _account)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRevertReleaseAccountDetail(_account);
        }

        //Written By Prabhath on 30/10/2012
        public DataTable GetExchangeDetail(string _com, string _account)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetExchangeDetail(_com, _account);
        }

        public Int32 SaveHPReminderLetter(ReminderLetter _ltr)
        {
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            int result = 0;
            using (TransactionScope tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();
                _ltr.Hrl_seq = _inventoryDAL.GetSerialID();
                result = _salesDAL.SaveHPReminderLetter(_ltr);
                _inventoryDAL.ConnectionClose();
                _salesDAL.ConnectionClose();
                tr.Complete();
            }
            return result;
        }

        public Int32 GetReminderLetterCount(string _accNo, string _loc, string _com, string _type, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            int result = 0;
            _salesDAL.ConnectionOpen();
            result = _salesDAL.GetReminderLetterCount(_accNo, _loc, _com, _type, _date);
            _salesDAL.ConnectionClose();
            return result;
        }

        public MasterExchangeRate GetLaterstExchangeRate(string _company, string _execode, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetLaterstExchangeRate(_company, _execode, _date);
        }

        public Int32 SaveHPReminder(HPReminder _rmd)
        {
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            int result = 0;
            using (TransactionScope tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();
                _rmd.Hra_seq = _inventoryDAL.GetSerialID();
                result = _salesDAL.SaveHPReminder(_rmd);
                _inventoryDAL.ConnectionClose();
                _salesDAL.ConnectionClose();
                tr.Complete();
            }
            return result;
        }

        public bool IsCheckAllowFunction(string _company, string _pc, string _module, string _func)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.IsCheckAllowFunction(_company, _pc, _module, _func);
        }

        public DataTable GetReminders(string _ref, string _stus, string _com, string _pc, string _type, DateTime _date)
        {

            _salesDAL = new SalesDAL();
            return _salesDAL.GetReminders(_ref, _stus, _com, _pc, _type, _date);
        }

        public Int32 UpdateHPReminder(HPReminder _rmd)
        {
            _salesDAL = new SalesDAL();
            int result = 0;
            using (TransactionScope tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                result = _salesDAL.SaveHPReminder(_rmd);
                _salesDAL.ConnectionClose();
                tr.Complete();
            }
            return result;
        }

        public Int32 SaveReminderSMS(HPReminderSMS _sms, OutSMS _smsOut, string userId, string company, string sessionId/*, out string _err*/)
        {
            //_err = "";
            int _eff = 0;
            try
            {
                GeneralBLL _generalBLL = new GeneralBLL();
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                _generalDAL = new GeneralDAL();
                using (TransactionScope tr = new TransactionScope())
                {
                    _salesDAL.ConnectionOpen();
                    _generalDAL.ConnectionOpen();
                    _inventoryDAL.ConnectionOpen();
                    _sms.Hsrm_seq = _inventoryDAL.GetSerialID();
                    _eff = _salesDAL.SaveReminderSMS(_sms);
                    //_eff = _generalDAL.SaveSMSOut(_smsOut);//Commented by Udesh 26-Nov-2018
                    _eff = _generalBLL.SendPromotionSMS(userId, company, _smsOut, sessionId).Result;// Added by Udesh 26-Nov-2018
                    _inventoryDAL.ConnectionClose();
                    _salesDAL.ConnectionClose();
                    _generalDAL.ConnectionClose();
                    tr.Complete();
                }
            }
            catch (Exception ex)
            {
                //_err = ex.ToString();
                _eff = 0;
            }
            return _eff;
        }

        public HPReminderSMS GetSMSReminder(string _com, string _pc, string _acc, DateTime _date)
        {

            _salesDAL = new SalesDAL();

            List<HPReminderSMS> _sms = _salesDAL.GetSMSReminder(_com, _pc, _acc, _date);
            if (_sms != null)
            {
                return _sms[0];
            }
            else
                return null;
        }

        public int UpdateHPPrintStus(string _com, string _pc, int _stus, string _acc)
        {
            _salesDAL = new SalesDAL();
            int result = 0;
            _salesDAL.ConnectionOpen();
            result = _salesDAL.UpdateHPPrintStus(_com, _pc, _stus, _acc);
            _salesDAL.ConnectionClose();
            return result;
        }

        public int SaveGrpCompAsCustomer(MasterBusinessEntity _customer)
        {

            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            //int X = _salesDAL.SaveCustomerDetail(_customer);
            Int32 X = _salesDAL.SaveBusinessEntityDetail(_customer);
            _salesDAL.ConnectionClose();
            return 1;
        }

        public List<InvoiceItem> GetQuotationDetail(string _company, string _profit, string _quotation, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetQuotationDetail(_company, _profit, _quotation, _date);
        }

        public List<InvoiceItem> GetQuotationDetailforInvoice(string _company, string _DO)
        {      //Written By Nadeeka 28-03-2015
            _salesDAL = new SalesDAL();
            return _salesDAL.GetQuotationDetailforInvoice(_company, _DO);
        }

        public Int32 GetSysPara(string _locType, string _locValue, String _paraType)
        {   // Nadeeka


            Int32 _effect = 0;

            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            _effect = _salesDAL.GetSysPara(_locType, _locValue, _paraType);

            _salesDAL.ConnectionClose();

            return _effect;
        }

        public Decimal Get_Acc_Arrears(string _accno, DateTime _asatDate, string _issame_date)
        {   // Nadeeka


            Decimal _effect = 0;

            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            _effect = _salesDAL.Get_Acc_Arrears(_accno, _asatDate, _issame_date);

            _salesDAL.ConnectionClose();

            return _effect;
        }

        public Int32 SaveRevertRelease(string _profitCenter, InventoryHeader _inventoryheader, MasterAutoNumber _inventoryAuto, List<ReptPickSerials> _pickSerial, List<ReptPickSerialsSub> _pickSubSerial, List<RecieptHeader> _receiptHeaderList, MasterAutoNumber _receiptAuto, List<RecieptItem> _receiptItem, out string _inventorydoc, out string _salesdoc, bool _isPartlyPayment, decimal _accountbal, decimal _settlement, decimal _ecd, decimal _balance, List<HpTransaction> _hpTansaction, MasterAutoNumber tranxAuto, List<HpTransaction> _hpECDTxns)
        {
            string _invDoc = string.Empty;
            string _salDoc = string.Empty;
            string _tempDoc = string.Empty;
            Int32 _effect = -1;

            try
            {
                //using (TransactionScope _tr = new TransactionScope())
                //{
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _generalDAL = new GeneralDAL();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();
                _fmsInventoryDal = new FMS_InventoryDAL();
                _fmsInventoryDal.ConnectionOpen();
                _fmsInventoryDal.BeginTransaction();

                InventoryBLL _inventoryBLL = new InventoryBLL();
                _inventoryBLL._inventoryDAL = _inventoryDAL;
                _inventoryBLL._salesDAL = _salesDAL;
                _inventoryBLL._inventoryRepDAL = _inventoryRepDAL;
                _inventoryBLL._generalDAL = _generalDAL;
                string _location = _inventoryheader.Ith_loc;
                string _account = _inventoryheader.Ith_acc_no;
                string _recertno = _inventoryheader.Ith_oth_docno;

                //_effect = _inventoryBLL.SaveOutwardScanSerial(_inventoryheader, _pickSerial, _pickSubSerial, null, false);
                //_effect = _inventoryBLL.UpdateInventoryAutoNumber(_inventoryheader, _inventoryAuto, "-", out _tempDoc);

                _invDoc = _tempDoc;

                #region  Receipt Entry - for the new invoice

                if (_receiptHeaderList != null && _receiptHeaderList.Count > 0)
                    foreach (RecieptHeader _recieptHeader in _receiptHeaderList)
                    {   //create MST_AUTO number for receipt table
                        if (_recieptHeader.Sar_receipt_type == "HPRM")
                        {
                            _receiptAuto.Aut_start_char = "HPRM";
                        }
                        else { _receiptAuto.Aut_start_char = "HPRS"; }
                        _receiptAuto.Aut_year = null;
                        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_receiptAuto.Aut_moduleid, _receiptAuto.Aut_direction, _receiptAuto.Aut_start_char, _receiptAuto.Aut_cate_tp, _receiptAuto.Aut_cate_cd, _receiptAuto.Aut_modify_dt, _receiptAuto.Aut_year);
                        string _cusNo = _receiptAuto.Aut_cate_cd + "-" + _receiptAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_receiptAuto);//update MST_AUTO table

                        _recieptHeader.Sar_receipt_no = _cusNo;

                        Int32 RecieptSeqNo = 0;
                        RecieptSeqNo = _inventoryDAL.GetSerialID(); //will be assign to header after looping transaction list.

                        foreach (HpTransaction tr in _hpTansaction)
                        {
                            if (tr.Hpt_ref_no == _recieptHeader.Sar_seq_no.ToString())
                            {
                                tr.Hpt_txn_ref = _recieptHeader.Sar_receipt_no;
                            }
                            // effect = _salesDAL.Save_HpTransaction(tr);
                        }



                        Int32 line = 0;
                        foreach (RecieptItem _itm in _receiptItem)
                        {
                            if (_recieptHeader.Sar_seq_no == _itm.Sard_seq_no)//have to check the prefix also?
                            {
                                line++;
                                _itm.Sard_seq_no = RecieptSeqNo;
                                _itm.Sard_line_no = line;
                                _itm.Sard_receipt_no = _recieptHeader.Sar_receipt_no;
                            }
                        }
                        _recieptHeader.Sar_seq_no = RecieptSeqNo;

                        _recieptHeader.Sar_esd_rate = 0;
                        _recieptHeader.Sar_epf_rate = 0;
                        _recieptHeader.Sar_wht_rate = 0;

                        _salesDAL.SaveReceiptHeader(_recieptHeader);//save receipt header
                        MasterCompany _masterComp = _generalDAL.GetCompByCode(_recieptHeader.Sar_com_cd);  //kapila 27/4/2016
                        if (_masterComp.MC_IS_SCM2_FMS == 1)
                            _inventoryDAL.UpdateManualDocNo(_location, _recieptHeader.Sar_receipt_type, Convert.ToInt32(_recieptHeader.Sar_manual_ref_no), _recieptHeader.Sar_receipt_no);//do the updating at the gnt_man_doc_dt
                        else
                            _fmsInventoryDal.UpdateManualDocNo(_location, _recieptHeader.Sar_receipt_type, Convert.ToInt32(_recieptHeader.Sar_manual_ref_no), _recieptHeader.Sar_receipt_no);//do the updating at the gnt_man_doc_dt


                        _salDoc = _cusNo;
                    }

                //save receipt detail list
                foreach (RecieptItem rec_itm in _receiptItem)
                {
                    _salesDAL.SaveReceiptItem(rec_itm);

                    if (rec_itm.Sard_pay_tp == "ADVAN")
                    {
                        _salesDAL.UpdateUsedReceiptAmt(_inventoryheader.Ith_com, _profitCenter, rec_itm.Sard_settle_amt, rec_itm.Sard_pay_tp, rec_itm.Sard_ref_no);
                    }
                    else if (rec_itm.Sard_pay_tp == "CRNOTE")
                    {
                        _salesDAL.UpdateCreditNoteBalance(_inventoryheader.Ith_com, _profitCenter, rec_itm.Sard_ref_no, rec_itm.Sard_settle_amt);
                    }
                }

                foreach (HpTransaction tr in _hpTansaction)
                {
                    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(tranxAuto.Aut_moduleid, tranxAuto.Aut_direction, tranxAuto.Aut_start_char, tranxAuto.Aut_cate_tp, tranxAuto.Aut_cate_cd, tranxAuto.Aut_modify_dt, tranxAuto.Aut_year);
                    string _cusNo = tranxAuto.Aut_cate_cd + "-" + tranxAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(tranxAuto);//update MST_AUTO table

                    tr.Hpt_ref_no = _cusNo;

                    tr.Hpt_seq = _inventoryDAL.GetSerialID();
                    _salesDAL.Save_HpTransaction(tr);
                }

                if (_hpECDTxns.Count != 0)
                {

                    string AccNo = _hpECDTxns[0].Hpt_acc_no;
                    string company = _hpECDTxns[0].Hpt_com;
                    string pc = _hpECDTxns[0].Hpt_pc;

                    _salesDAL.Update_hp_accountStatus(company, pc, AccNo, "C", 1, _hpECDTxns[0].Hpt_txn_ref, Convert.ToDateTime(_hpECDTxns[0].Hpt_txn_dt).Date);//status is changed to 'C' when closing accounts.

                    _salesDAL.UpdateAccLogStatus(company, AccNo, "C", _hpECDTxns[0].Hpt_txn_dt, 1);

                    //if (Convert.ToString(listECD_info[3]) == "V")
                    //{
                    //  _salesDAL.Update_hp_Voucher_Status(company, pc, AccNo, Convert.ToString(listECD_info[6]), Convert.ToDecimal(listECD_info[4]), Convert.ToDecimal(listECD_info[5]), Convert.ToDateTime(listECD_info[1]).Date);
                    //}
                    //else if (Convert.ToString(listECD_info[3]) == "A")
                    //{
                    //    RequestApprovalHeader _rapphdr = new RequestApprovalHeader();
                    //    foreach (RecieptHeader _hdr in receiptHeaderList)
                    //    {
                    //        _rapphdr.Grah_com = company;
                    //        _rapphdr.Grah_loc = pc;
                    //        _rapphdr.Grah_fuc_cd = AccNo;
                    //        _rapphdr.Grah_ref = Convert.ToString(listECD_info[7]);
                    //        _rapphdr.Grah_app_stus = "F";
                    //        _rapphdr.Grah_app_lvl = -1;
                    //        _rapphdr.Grah_app_by = Convert.ToString(listECD_info[8]);
                    //        break;
                    //    }

                    //    _generalDAL.UpdateMidApprovalStatus(_rapphdr);
                    //}
                }

                _salesDAL.UpdateRevertForRelease(_account, _recertno, _settlement, _ecd, _balance, _inventoryheader.Ith_cre_by, _inventoryheader.Ith_doc_date);
                if (_ecd > 0)
                {

                    HpTransaction tr = _hpTansaction[0];

                    MasterAutoNumber _numberECD = _inventoryDAL.GetAutoNumber(tranxAuto.Aut_moduleid, tranxAuto.Aut_direction, tranxAuto.Aut_start_char, tranxAuto.Aut_cate_tp, tranxAuto.Aut_cate_cd, tranxAuto.Aut_modify_dt, tranxAuto.Aut_year);
                    string _cusNoECD = tranxAuto.Aut_cate_cd + "-" + tranxAuto.Aut_start_char + "-" + _numberECD.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(tranxAuto);

                    tr.Hpt_ref_no = _cusNoECD;
                    tr.Hpt_txn_ref = string.Empty;
                    tr.Hpt_mnl_ref = string.Empty;
                    tr.Hpt_seq = _inventoryDAL.GetSerialID();
                    tr.Hpt_desc = "EARLY CLOSING DISCOUNT";
                    tr.Hpt_txn_tp = "ECD";
                    tr.Hpt_crdt = _ecd;
                    tr.Hpt_dbt = 0;
                    _salesDAL.Save_HpTransaction(tr);
                }

                if (_accountbal - (_settlement + _ecd) > 10)
                {
                    _salesDAL.UpdateAccountLogforRvtNRls(_account, _profitCenter, _inventoryheader.Ith_com, _inventoryheader.Ith_doc_date.Date, "A", "REVERT_RLS");
                    _salesDAL.UpdateAccountStatusforrevert(_inventoryheader.Ith_com, _profitCenter, _account, "A", _inventoryheader.Ith_doc_date.Date);
                }
                else
                {
                    _salesDAL.UpdateAccountLogforRvtNRls(_account, _profitCenter, _inventoryheader.Ith_com, _inventoryheader.Ith_doc_date.Date, "C", "REVERT_RLS");
                    _salesDAL.UpdateAccountStatusforrevert(_inventoryheader.Ith_com, _profitCenter, _account, "RLS-C", _inventoryheader.Ith_doc_date.Date);
                }
                #endregion

                #region Genarate Debit note
                #region create _debtAuto
                MasterAutoNumber _debtAuto = new MasterAutoNumber();
                _debtAuto.Aut_cate_cd = _profitCenter;
                _debtAuto.Aut_cate_tp = "PC";
                _debtAuto.Aut_direction = 0;
                _debtAuto.Aut_modify_dt = null;
                _debtAuto.Aut_moduleid = "DEBT";
                _debtAuto.Aut_number = 1;
                _debtAuto.Aut_start_char = "DEBT";
                _debtAuto.Aut_year = null;
                #endregion
                #region update auto number
                MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_debtAuto.Aut_moduleid, _debtAuto.Aut_direction, _debtAuto.Aut_start_char, _debtAuto.Aut_cate_tp, _debtAuto.Aut_cate_cd, _debtAuto.Aut_modify_dt, _debtAuto.Aut_year);
                string _tmpInvNo = _debtAuto.Aut_cate_cd + "-" + _debtAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_debtAuto);
                _salDoc = _tmpInvNo;
                #endregion
                #region Create sat headr
                DataTable odt = _salesDAL.GetHPSaleswithDO(_account);
                DataTable HPT_RVT_DET = _inventoryDAL.GetRevertReleaseAccountDetail(_inventoryheader.Ith_com, _profitCenter, _account, null);
                // odt.Rows[0]["Sah_currency"].ToString();
                InvoiceHeader _debtInvHdr = new InvoiceHeader();
                _debtInvHdr.Sah_seq_no = _inventoryDAL.GetSerialID();
                _debtInvHdr.Sah_com = _inventoryheader.Ith_com;
                _debtInvHdr.Sah_pc = _profitCenter;
                _debtInvHdr.Sah_tp = "INV";
                _debtInvHdr.Sah_inv_tp = "RVT";
                _debtInvHdr.Sah_inv_sub_tp = "SA";
                _debtInvHdr.Sah_inv_no = _tmpInvNo;
                _debtInvHdr.Sah_dt = _inventoryheader.Ith_doc_date;
                _debtInvHdr.Sah_manual = false;
                _debtInvHdr.Sah_ref_doc = _account; //_NewReceipt.Sar_receipt_no;
                _debtInvHdr.Sah_cus_cd = odt.Rows[0]["Sah_cus_cd"].ToString();
                _debtInvHdr.Sah_cus_name = odt.Rows[0]["Sah_cus_name"].ToString();
                _debtInvHdr.Sah_cus_add1 = odt.Rows[0]["Sah_cus_add1"].ToString();
                _debtInvHdr.Sah_cus_add2 = odt.Rows[0]["Sah_cus_add2"].ToString();
                _debtInvHdr.Sah_currency = odt.Rows[0]["Sah_currency"].ToString();
                _debtInvHdr.Sah_ex_rt = 1;
                _debtInvHdr.Sah_d_cust_cd = odt.Rows[0]["Sah_d_cust_cd"].ToString();
                _debtInvHdr.Sah_d_cust_add1 = odt.Rows[0]["Sah_d_cust_add1"].ToString();
                _debtInvHdr.Sah_d_cust_add2 = odt.Rows[0]["Sah_d_cust_add2"].ToString();
                _debtInvHdr.Sah_man_cd = odt.Rows[0]["Sah_man_cd"].ToString();
                _debtInvHdr.Sah_sales_ex_cd = odt.Rows[0]["Sah_sales_ex_cd"].ToString();
                _debtInvHdr.Sah_esd_rt = 0;
                _debtInvHdr.Sah_wht_rt = 0;
                _debtInvHdr.Sah_epf_rt = 0;
                _debtInvHdr.Sah_remarks = "";
                _debtInvHdr.Sah_is_acc_upload = false;
                _debtInvHdr.Sah_stus = "D";
                _debtInvHdr.Sah_cre_by = _inventoryheader.Ith_cre_by;
                _debtInvHdr.Sah_cre_when = _inventoryheader.Ith_cre_when;
                _debtInvHdr.Sah_mod_by = _inventoryheader.Ith_mod_by;
                _debtInvHdr.Sah_mod_when = DateTime.Now;
                _debtInvHdr.Sah_session_id = _inventoryheader.Ith_session_id;


                //_debtInvHdr.Sah_anal_2 = _NewReceipt.Sar_receipt_type;
                _debtInvHdr.Sah_anal_7 = Convert.ToDecimal(HPT_RVT_DET.Rows[0]["hrt_bal"].ToString());
                _debtInvHdr.Sah_anal_10 = 1;
                _debtInvHdr.Sah_anal_11 = 0;
                _debtInvHdr.Sah_anal_12 = DateTime.Today.Date;
                _debtInvHdr.Sah_direct = true;
                _debtInvHdr.Sah_tax_inv = false;
                _debtInvHdr.Sah_tax_exempted = false;
                _debtInvHdr.Sah_is_svat = false;
                _debtInvHdr.Sah_fin_chrg = 0;
                _debtInvHdr.Sah_is_grn = false;
                _debtInvHdr.Sah_acc_no = _account;
                _debtInvHdr.Sah_d_cust_name = odt.Rows[0]["Sah_d_cust_name"].ToString();
                int _affectedCount = 0;
                _affectedCount = _salesDAL.SaveSalesHeader(_debtInvHdr);
                #endregion
                #region sat_itm and tax
                if (_affectedCount > 0)
                {
                    var _tbsers =
                         (from _pickSerials in _pickSerial
                          where _pickSerials.Tus_ser_id != 0 // This is no need to feauture becoz
                          select _pickSerials).ToList().OrderBy(x => x.Tus_itm_cd).OrderBy(x => x.Tus_itm_stus).OrderBy(x => x.Tus_bin); //Order by Prabhath on 21/02/2014
                    Int32 sat_itmline = 1;
                    foreach (var sers in _tbsers)
                    {
                        //Save invoice details
                        List<InvoiceItem> _debtItems = new List<InvoiceItem>();
                        MasterItem _itemMaster = new MasterItem();
                        _itemMaster = _salesDAL.GetItem(_debtInvHdr.Sah_com, sers.Tus_itm_cd);
                        if (_itemMaster != null)
                        {
                            DataTable tempdet = new DataTable();
                            tempdet = _inventoryDAL.GetRevertReleaseAccountDetail(_inventoryheader.Ith_com, _profitCenter, _account, sers.Tus_itm_cd);

                            //List<InvoiceItemTax> _itmTax = new List<InvoiceItemTax>();

                            //_itmTax = _salesDAL.GetInvItemTax(_itm.Sad_inv_no, _itm.Sad_itm_cd, sers.Sad_itm_line);
                            if (tempdet.Rows.Count > 0)
                            {
                                List<MasterItemTax> _taxs = new List<MasterItemTax>();
                                _taxs = _inventoryDAL.GetItemTax(_inventoryheader.Ith_com, _itemMaster.Mi_cd, sers.Tus_itm_stus, string.Empty, string.Empty);
                                //decimal _unitamt=Convert.ToDecimal((tempdet.Rows[0]["hrd_itm_bal"].ToString() * _taxs.First().Mict_tax_rate) / (100 +  _taxs.First().Mict_tax_rate));
                                decimal _itm_bal = Convert.ToDecimal(tempdet.Rows[0]["hrd_itm_bal"].ToString());
                                decimal _unitamt = 0;
                                decimal Mict_tax_rate = 0;
                                if (_taxs.Count > 0)
                                {
                                    _unitamt = Math.Round(Convert.ToDecimal(_itm_bal * 100) / (100 + _taxs.First().Mict_tax_rate), 2);
                                    Mict_tax_rate = _taxs.First().Mict_tax_rate;
                                }
                                else
                                {
                                    _unitamt = _itm_bal;
                                }


                                decimal _taxnew = Math.Round(TaxCalculation(_inventoryheader.Ith_com, _itemMaster.Mi_cd, sers.Tus_itm_stus, Convert.ToDecimal(_unitamt), 0), 2);


                                InvoiceItem _debtItem = new InvoiceItem();
                                _debtItem.Sad_seq_no = _debtInvHdr.Sah_seq_no;
                                //_debtItem.Sad_itm_line += 1;
                                //_debtItem.Sad_itm_line = sers.Tus_itm_line;
                                _debtItem.Sad_itm_line = sat_itmline;
                                //sers.Tus_base_itm_line = sers.Tus_itm_line;
                                sers.Tus_base_itm_line = sat_itmline;
                                sers.Tus_itm_line = sat_itmline;
                                _debtItem.Sad_inv_no = _debtInvHdr.Sah_inv_no;
                                _debtItem.Sad_itm_cd = _itemMaster.Mi_cd;
                                _debtItem.Sad_itm_stus = "RVT";//_itemMaster.Mi_itm_stus;
                                _debtItem.Sad_itm_tp = _itemMaster.Mi_itm_tp;
                                _debtItem.Sad_uom = _itemMaster.Mi_itm_uom; // "NOS";
                                _debtItem.Sad_qty = 1;
                                _debtItem.Sad_do_qty = 1;
                                _debtItem.Sad_fws_ignore_qty = _itemMaster.Mi_itm_tp == "V" ? 1 : 0;
                                _debtItem.Sad_srn_qty = 0;
                                _debtItem.Sad_unit_rt = _unitamt;
                                _debtItem.Sad_unit_amt = _unitamt;
                                _debtItem.Sad_disc_rt = 0;
                                _debtItem.Sad_disc_amt = 0;
                                _debtItem.Sad_itm_tax_amt = _taxnew;
                                _debtItem.Sad_tot_amt = _itm_bal;
                                DataTable _scm2 = _salesDAL.GetSCM2InvoiceDetail_by_itm(_inventoryheader.Ith_com, _inventoryheader.Ith_oth_docno, _itemMaster.Mi_cd);
                                if (_scm2.Rows.Count > 0)
                                {
                                    _debtItem.Sad_pbook = _scm2.Rows[0]["sad_pbook"].ToString();
                                    _debtItem.Sad_pb_lvl = _scm2.Rows[0]["sad_pb_lvl"].ToString();
                                }
                                else
                                {
                                    _debtItem.Sad_pbook = "";
                                    _debtItem.Sad_pb_lvl = "";
                                }

                                _debtItem.Sad_pb_price = 0;
                                _salesDAL.SaveSalesItem(_debtItem);
                                _pickSerial.Where(r => r.Tus_itm_cd == _itemMaster.Mi_cd && r.Tus_itm_stus == sers.Tus_itm_stus).ToList()
                                         .ForEach(i =>
                                         {
                                             //i.Tus_base_itm_line = sers.Tus_itm_line;
                                             i.Tus_base_itm_line = sat_itmline;
                                             i.Tus_base_doc_no = _debtInvHdr.Sah_inv_no;
                                         });//itm_Lineno
                                //save tax
                                InvoiceItemTax _tax = new InvoiceItemTax();
                                _tax.Satx_inv_no = _debtInvHdr.Sah_inv_no;
                                _tax.Satx_itm_cd = _itemMaster.Mi_cd;
                                _tax.Satx_itm_line = sat_itmline;
                                _tax.Satx_itm_tax_amt = _taxnew;
                                _tax.Satx_itm_tax_rt = Mict_tax_rate; ;
                                _tax.Satx_itm_tax_tp = "VAT";
                                _tax.Satx_job_line = 0;
                                _tax.Satx_job_no = "";
                                _tax.Satx_seq_no = _debtInvHdr.Sah_seq_no;
                                _salesDAL.SaveSalesItemTax(_tax);
                                sat_itmline++;
                            }
                        }
                        else { throw new Exception("Debit note cannot be generated! Item code - " + sers.Tus_itm_cd + " has not define"); }
                    }
                }
                #endregion

                InventoryHeader _invHdr = null;
                DataTable _dataTable = null; ;
                #region inv hdr
                InventoryHeader invHdr = new InventoryHeader();
                DataTable dt_location = _inventoryDAL.Get_location_by_code(_inventoryheader.Ith_com, _inventoryheader.Ith_loc);
                foreach (DataRow r in dt_location.Rows)
                {
                    // Get the value of the wanted column and cast it to string
                    invHdr.Ith_sbu = (string)r["ML_OPE_CD"];
                    if (System.DBNull.Value != r["ML_CATE_2"])
                    {
                        invHdr.Ith_channel = (string)r["ML_CATE_2"];
                    }
                    else
                    {
                        invHdr.Ith_channel = string.Empty;
                    }

                    if (System.DBNull.Value != r["ML_CATE_1"])
                    {
                        invHdr.Ith_cate_tp = (string)r["ML_CATE_1"];
                    }
                    else
                    {
                        invHdr.Ith_cate_tp = "DEBT";
                    }

                }
                invHdr.Ith_seq_no = _inventoryDAL.GetSerialID();
                invHdr.Ith_loc = _inventoryheader.Ith_loc;
                invHdr.Ith_com = _inventoryheader.Ith_com;
                invHdr.Ith_doc_tp = "DO";
                invHdr.Ith_doc_date = _inventoryheader.Ith_doc_date;
                invHdr.Ith_doc_year = _inventoryheader.Ith_doc_date.Year;
                invHdr.Ith_sub_tp = "RVTRL";
                invHdr.Ith_is_manual = false;
                invHdr.Ith_stus = "A";
                invHdr.Ith_cre_by = _inventoryheader.Ith_cre_by;
                invHdr.Ith_mod_by = _inventoryheader.Ith_cre_by;
                invHdr.Ith_direct = false;
                invHdr.Ith_session_id = _inventoryheader.Ith_session_id;
                //invHdr.Ith_manual_ref = _inventoryheader.Ith_manual_ref;
                invHdr.Ith_vehi_no = "";
                invHdr.Ith_remarks = "";
                invHdr.Ith_anal_1 = Convert.ToString(_debtInvHdr.Sah_seq_no);
                invHdr.Ith_oth_docno = _tmpInvNo;
                invHdr.Ith_entry_no = _tmpInvNo;
                invHdr.Ith_bus_entity = _debtInvHdr.Sah_cus_cd;

                //invHdr.Ith_del_add1 = txtCustAddress1.Text;
                //invHdr.Ith_del_add2 = txtCustAddress2.Text;

                invHdr.Ith_del_code = _debtInvHdr.Sah_d_cust_cd;
                invHdr.Ith_del_cust_name = _debtInvHdr.Sah_d_cust_name;
                invHdr.Ith_del_add1 = _debtInvHdr.Sah_d_cust_add1;
                invHdr.Ith_del_add2 = _debtInvHdr.Sah_d_cust_add2;

                invHdr.Ith_cre_by = _inventoryheader.Ith_cre_by;
                invHdr.Ith_cre_when = _inventoryheader.Ith_cre_when;
                invHdr.Ith_mod_by = _inventoryheader.Ith_mod_by;
                invHdr.Ith_mod_when = _inventoryheader.Ith_mod_when;
                invHdr.Ith_gen_frm = _inventoryheader.Ith_gen_frm;
                invHdr.Ith_acc_no = _account;
                invHdr.Ith_pc = _profitCenter;
                #endregion
                #region DO auto no
                MasterAutoNumber masterAutoNum = new MasterAutoNumber();
                masterAutoNum.Aut_cate_cd = _inventoryheader.Ith_loc;
                masterAutoNum.Aut_cate_tp = "LOC";
                masterAutoNum.Aut_direction = 0;
                masterAutoNum.Aut_moduleid = "DO";
                masterAutoNum.Aut_start_char = "DO";
                masterAutoNum.Aut_year = _inventoryheader.Ith_doc_date.Year;
                #endregion
                InventoryBLL _bll = new InventoryBLL();
                string _doNo = "";
                _bll.DeliveryOrder(invHdr, _pickSerial, _pickSubSerial, masterAutoNum, out  _invDoc, _inventoryRepDAL, _inventoryDAL, true);
                //_bll.DeliveryOrderWithoutAutoNo(invHdr, _pickSerial, _pickSubSerial, masterAutoNum, _inventoryRepDAL, _inventoryDAL, true, out _invHdr, out _dataTable);
                //_inventoryDAL.UpdateInventoryAutoNumber(_invHdr, masterAutoNum, "-", out _doNo);
                List<InvoiceHeader> _invoice = _salesDAL.GetInvoiceByAccountNo(invHdr.Ith_com, invHdr.Ith_pc, invHdr.Ith_acc_no);

                if (_invoice != null)
                {
                    if (_invoice.Count > 0)
                    {
                        _invoice = _invoice.OrderByDescending(x => x.Sah_direct).ToList();
                        var _sales = from _lst in _invoice
                                     where _lst.Sah_direct == true
                                     select _lst;
                        foreach (InvoiceHeader _hdrnew in _sales)
                        {

                            _salesDAL.UpdateInvoiceStatus(_hdrnew.Sah_inv_no, "D");

                        }
                    }
                }

                #endregion
                _inventoryDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                _generalDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();

                _effect = 1;
                // if (_effect != -1) _tr.Complete();
                //}
            }
            catch (Exception ex)
            {

                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();

                _invDoc = ex.Message;
                _salDoc = ex.Message;
                _effect = -1;
            }

            _inventorydoc = _invDoc;
            _salesdoc = _salDoc;
            return _effect;

        }

        public Int32 CheckforInvoiceRegistration(string _company, string _profitcenter, string _invoice)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int32 _bool = _salesDAL.CheckforInvoiceRegistration(_company, _profitcenter, _invoice);
            _salesDAL.ConnectionClose();
            return _bool;
        }

        public Int32 CheckforInvoiceInsurance(string _company, string _profitcenter, string _invoice)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int32 _bool = _salesDAL.CheckforInvoiceInsurance(_company, _profitcenter, _invoice);
            _salesDAL.ConnectionClose();
            return _bool;
        }

        #region Paymode Inquiry
        public DataTable GetPaymodeDetail(string com, string pc, string payType, string docNo, string selectedCd, string selectedTp)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPaymodeDetail(com, payType, docNo, selectedCd, selectedTp);
        }
        public DataTable getInvoicesBased_onPayType(string com, string docNo, string payType, string bankCode, string selectedTp)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getInvoicesBased_onPayType(com, docNo, payType, bankCode, selectedTp);
        }
        public DataTable get_Receipts_BasedonPayType(string com, string docNo, string payType, string bankCode, string selectedTp)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.get_Receipts_BasedonPayType(com, docNo, payType, bankCode, selectedTp);
        }

        public DataTable GetReturnCheque_detWithPayments(string chequeNo, string chequeBank)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReturnCheque_detWithPayments(chequeNo, chequeBank);
        }

        #endregion Paymode Inquiry

        //darshana 06/11/2012
        public HpSchemeDetails getSchemeDetByCode(string _cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getSchemeDetByCode(_cd);
        }

        //darshana 09/11/2012
        public decimal Process_WaraEx_Commission(string _com, string _pc, DateTime _date, string _itm, string _pb, string _lvl, string _invTP, Int32 _line, decimal _amt, string _payMode)
        {

            SalesDAL _salDAL = new SalesDAL(); _salDAL.ConnectionOpen();
            _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen();
            InventoryDAL _invDAL = new InventoryDAL();
            decimal _comAmt = 0;
            //List<InvoiceHeader> _ListInv = _salDAL.GetCommissionInvoices(_com, _pc, _date);

            //if (_ListInv != null)
            //{
            //    //invoices
            //    for (int i = 0; i < _ListInv.Count; i++)
            //    {
            //        List<SaleCommission> _saveCommission = new List<SaleCommission>();

            //        //get executive
            //        DataTable _tbl = _salDAL.GetEmployee(_ListInv[i].Sah_com, _ListInv[i].Sah_sales_ex_cd);
            //        string _executiveType = string.Empty;
            //        foreach (DataRow _r in _tbl.Rows)
            //        {
            //            _executiveType = Convert.ToString(_r["esep_cat_cd"]);
            //        }

            //        //get receipts
            //        List<RecieptItem> _ListRecItem = _salDAL.GetReceiptItemsByInvoice(_ListInv[i].Sah_inv_no);

            //        List<InvoiceItem> _ListInvDet = new List<InvoiceItem>();
            //        _ListInvDet = _salDAL.GetCommissionInvoicesItems(_ListInv[i].Sah_inv_no);
            //        //invoice Details
            //        if (_ListInvDet != null)
            //        {
            //            for (int x = 0; x < _ListInvDet.Count; x++)
            //            {
            //                decimal _totalNetValue = _ListInvDet.Sum(y => y.Sad_unit_amt * y.Sad_qty - y.Sad_disc_amt + y.Sad_itm_tax_amt);

            MasterItem _item = _invDAL.GetItem(_com, _itm);

            Dictionary<ItemHierarchyElement, string> _itemHierarchyElement = new Dictionary<ItemHierarchyElement, string>();
            _itemHierarchyElement.Add(ItemHierarchyElement.BRAND, _item.Mi_brand);
            _itemHierarchyElement.Add(ItemHierarchyElement.ITEM, _item.Mi_cd);
            _itemHierarchyElement.Add(ItemHierarchyElement.MAIN_CATEGORY, _item.Mi_cate_1);
            _itemHierarchyElement.Add(ItemHierarchyElement.PRICE_BOOK, _pb);
            _itemHierarchyElement.Add(ItemHierarchyElement.PRICE_LEVEL, _lvl);
            _itemHierarchyElement.Add(ItemHierarchyElement.PROMOTION, string.Empty);
            _itemHierarchyElement.Add(ItemHierarchyElement.SERIAL, string.Empty);
            _itemHierarchyElement.Add(ItemHierarchyElement.SUB_CATEGORY, _item.Mi_cate_2);

            List<CashCommissionDetailRef> _listCommCE = null;     //kapila 20/12/2013
            List<CashCommissionDetailRef> _CashCommissionDetail = GetCommissionStructure(_com, _pc, _invTP, _date, _pb, _lvl, string.Empty, string.Empty, _itemHierarchyElement, "PC_PRIT_HIERARCHY", "PC", out _listCommCE, false);
            //List<SaleCommission> _commission = null;

            //commission calculation
            if (_CashCommissionDetail != null)
            {
                if (_CashCommissionDetail.Count > 0)
                {
                    _comAmt = GetCalculatedCommissionForWaraExtend(_itm, _line, _amt, _amt, _payMode, _CashCommissionDetail[0]);
                }
                //if (_commission != null)
                //    _saveCommission.AddRange(_commission);
            }


            //    }

            //}
            //if (_saveCommission != null)
            //{
            //    if (_saveCommission.Count > 0)
            //    {
            //        //delete already saved commission
            //        _salDAL.DeleteSalesCommission(_ListInv[i].Sah_seq_no);

            //        //Save Commissiom
            //        _saveCommission.ForEach(x => x.Sac_invoice_no = Convert.ToString(_ListInv[i].Sah_inv_no));
            //        _saveCommission.ForEach(x => x.Sac_seq_no = _ListInv[i].Sah_seq_no);
            //        foreach (SaleCommission _commm in _saveCommission)
            //        {
            //            _salDAL.SaveSalesCommission(_commm);
            //        }

            //    }
            //}
            //    }

            //}
            _salDAL.ConnectionClose();
            _salesDAL.ConnectionClose();
            return _comAmt;
            //}

        }

        public decimal GetCalculatedCommissionForWaraExtend(string _item, Int32 _lineno, decimal _netItemValue, decimal _totalValue, string _paymode, CashCommissionDetailRef _commissiondef)
        {
            List<SaleCommission> _list = null;
            _list = new List<SaleCommission>();
            Int32 _commissionLineno = 0;

            _commissionLineno += 1;
            string _pmode = _paymode;
            decimal _payment = _totalValue;
            decimal _beforeCommission = _payment;

            decimal _commissionAmt = 0;
            decimal _commissionRt = 0;
            decimal _commission = 0;

            switch (_pmode)
            {
                case "CASH":
                    _commissionAmt = _commissiondef.Sccd_cash_comm;
                    _commissionRt = _commissiondef.Sccd_cash_comm_rt;
                    break;
                case "CRCD":
                    _commissionAmt = _commissiondef.Sccd_cc_comm;
                    _commissionRt = _commissiondef.Sccd_cc_comm_rt;
                    break;
                case "ADVAN":
                    _commissionAmt = _commissiondef.Sccd_cash_comm;
                    _commissionRt = _commissiondef.Sccd_cash_comm_rt;
                    break;
                case "CRNOTE":
                    _commissionAmt = _commissiondef.Sccd_cash_comm;
                    _commissionRt = _commissiondef.Sccd_cash_comm_rt;
                    break;
                case "CHEQUE":
                    _commissionAmt = _commissiondef.Sccd_chq_comm;
                    _commissionRt = _commissiondef.Sccd_chq_comm_rt;
                    break;
                case "LORE":
                    _commissionAmt = _commissiondef.Sccd_cash_comm;
                    _commissionRt = _commissiondef.Sccd_cash_comm_rt;
                    break;
                case "GVO":
                    _commissionAmt = _commissiondef.Sccd_cash_comm;
                    _commissionRt = _commissiondef.Sccd_cash_comm_rt;
                    break;
                case "GVS":
                    _commissionAmt = _commissiondef.Sccd_cash_comm;
                    _commissionRt = _commissiondef.Sccd_cash_comm_rt;
                    break;
                case "DEBT":
                    _commissionAmt = _commissiondef.Sccd_dbc_comm;
                    _commissionRt = _commissiondef.Sccd_dbc_comm_rt;
                    break;
                default:
                    _commissionAmt = _commissiondef.Sccd_oth_comm;
                    _commissionRt = _commissiondef.Sccd_oth_comm_rt;
                    break;




                //SaleCommission _one = new SaleCommission();

                //_one.Sac_pay_mode = _pmode;
                //_one.Sac_itm_cd = _item;
                //_one.Sac_comm_rate = _commissionRt;
                //_one.Sac_comm_rate_final = _commissionRt;       //kapila
                //_one.Sac_comm_amt = Convert.ToInt32(_commission);
                //_one.Sac_comm_amt_final = Convert.ToInt32(_commission); //kapila
                //_one.Sac_calc_on = Convert.ToString(_beforeCommission);
                //_one.Sac_itm_line = _lineno;
                //_one.Sac_comm_line = _commissionLineno;
                //_list.Add(_one);

            }
            _commission = (_beforeCommission * _commissionRt / 100) + _commissionAmt;
            return _commission;
        }

        public Int16 CancelWaraRec(RecieptHeader _UpdateRec, List<ReceiptWaraExtend> _ExtendWara)
        {
            Int16 _effects = 0;
            _salesDAL = new SalesDAL();
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.UpdateRecStatus(_UpdateRec.Sar_receipt_no, _UpdateRec.Sar_act, _UpdateRec.Sar_com_cd, _UpdateRec.Sar_profit_center_cd, _UpdateRec.Sar_mod_by);

                if (_ExtendWara != null)
                {
                    foreach (ReceiptWaraExtend _ExtendDetails in _ExtendWara)
                    {
                        _salesDAL.CancelExtendWarranty(_ExtendDetails.Srw_do_no, _ExtendDetails.Srw_itm, _ExtendDetails.Srw_ser_id, _ExtendDetails.Srw_new_period, _UpdateRec.Sar_mod_by, _UpdateRec.Sar_receipt_no, _ExtendDetails.Srw_warra);
                    }
                }

                _salesDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }

        public Int32 SaveCustomerPassportNums(CustomerPassoprt _pass)
        {
            _salesDAL = new SalesDAL();
            int result = 0;
            _salesDAL.ConnectionOpen();
            result = _salesDAL.SaveCustomerPassportNums(_pass);
            _salesDAL.ConnectionClose();
            return result;
        }

        public DataTable GetCustomerDocumentWithSettlement(string _company, string _profitcenter, string _customer, Int16 _isOutstand)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCustomerDocumentWithSettlement(_company, _profitcenter, _customer, _isOutstand);
        }

        public DataTable GetCustomerPaymentSummary(string _company, string _profitcenter, string _customer)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCustomerPaymentSummary(_company, _profitcenter, _customer);
        }

        public List<HpSchemeType> GetAllSchemeTypes()
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAllSchemeTypes();
        }

        public DataTable GetInvoiceReceipt(string _invoice)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceReceipt(_invoice);

        }

        public DataTable GetHireSaleAccountBalance(string _company, string _profitcenter, string _customer, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHireSaleAccountBalance(_company, _profitcenter, _customer, _date);
        }

        public List<HpSchemeDetails> GetHPInsuranceSchemeCodes(string _schCd, string _cshTp, string _type, int _term, string _condi)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHPInsuranceSchemeCodes(_schCd, _cshTp, _type, _term, _condi);
        }

        public int SaveHPInsurance(List<string> _pcList, List<string> _schList, HPInsuranceScheme _scheme)
        {
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            int result = 0;

            _salesDAL.ConnectionOpen();
            _inventoryDAL.ConnectionOpen();
            foreach (string st in _pcList)
            {
                foreach (string st1 in _schList)
                {
                    _scheme.Hpi_seq = 0;//_inventoryDAL.GetSerialID();
                    _scheme.Hpi_pty_cd = st;
                    //_scheme.Hpi_pty_tp = "PC";
                    _scheme.Hpi_sch_cd = st1;
                    result = _salesDAL.SaveHPInsurance(_scheme);
                }
            }
            _inventoryDAL.ConnectionClose();
            _salesDAL.ConnectionClose();
            return result;
        }

        public MasterExchangeRate GetExchangeRate(string _com, string _fromCur, DateTime _date, string _toCur, string _pc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetExchangeRate(_com, _fromCur, _date, _toCur, _pc);
        }

        //DARSHANA ON 14-11-2012
        public Int32 SaveExchangeRate(List<MasterExchangeRate> _ExchangeRate)
        {
            Int32 _effect = 0;

            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen();

                foreach (MasterExchangeRate _Exchange in _ExchangeRate)
                {
                    //commented by shani 17-04-2013
                    //  _salesDAL.Delete_ExRate(_Exchange.Mer_com, _Exchange.Mer_cur, _Exchange.Mer_vad_from, _Exchange.Mer_to_cur);
                    _salesDAL.Save_ExchangeRate(_Exchange);
                }

                _salesDAL.ConnectionClose();
                _effect = 1;
                _tr.Complete();

            }
            return _effect;
        }

        public DataTable GetInsuranceOnEngine(string _com, string _pc, string _type, string _eng)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInsuranceOnEngine(_com, _pc, _type, _eng);
        }

        public List<HPInsuranceScheme> GetSchemeByPCOrSchemeCode(string _ptTp, string _ptCd, string _type, string _sch, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchemeByPCOrSchemeCode(_ptTp, _ptCd, _type, _sch, _date);
        }

        public DataTable GetCustomerAccountSchedule(string _account)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCustomerAccountSchedule(_account);
        }

        public DataTable GetCustomerAccountBalance(string _account)
        {
            _salesDAL = new SalesDAL();
            //DataTable _tbl1 = _salesDAL.GetMonthlyDue(_account);
            DataTable _tbl2 = _salesDAL.GetCustomerAccountBalance(_account);
            //_tbl2.Merge(_tbl1);
            //_tbl2.DefaultView.Sort = "Date ASC,Seq.no ASC";
            return _tbl2;
        }

        public DataTable GetAccountTransfer(string _account)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAccountTransfer(_account);
        }

        public DataTable GetAccountCustomerTrasnfer(string _account)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAccountCustomerTrasnfer(_account);
        }

        public DataTable GetAccountDiriyaDetail(string _account)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAccountDiriyaDetail(_account);
        }

        public List<PriceDetailRef> GetCombinePrice(string _company, string _profitCenter, string _invType, string _priceBook, string _priceLevel, string _customer, string _item, decimal _qty, DateTime _currentDate)
        {

            _salesDAL = new SalesDAL();
            //Check the price for the specific customer availabillity (even for special promotions)
            //Check the price for special promotion without Customer
            //Check the price for normal price
            //If no price =>message

            List<PriceDetailRef> _priceDetailRef = new List<PriceDetailRef>();


            //1.With customer
            _priceDetailRef = _salesDAL.GetCombinePrice(_priceBook, _priceLevel, _item, _qty, _currentDate, _customer, _company, _profitCenter);

            //2.Without Customer
            if (_priceDetailRef.Count <= 0)
            {
                _priceDetailRef = _salesDAL.GetCombinePrice(_priceBook, _priceLevel, _item, _qty, _currentDate, string.Empty, _company, _profitCenter);
            }



            return _priceDetailRef;

        }

        /* 
         * Logic for pick paymodes for the invoice :)
         * 
         1.   ALL NULL  (6)
         2.   PB/LVL  OTHER NULL -(1)
         2.1  PB OTHER NULL -(0)
         3.   PB/LVL+BRAND OTHER NULL -0
         3.1  PB/BRAND OTHER NULL -0
         4.   BRAND ONLY OTHER NULL -0
         5.   PB/LVL+BRAND+MAINCAT OTHER NULL -0
         5.1  PB/BARND+MAINCAT OTHER NULL -0
         6.   BRAND+MAINCAT OTHER NULL -0
         7.   PB/LVL+MAINCAT OTHER NULL -0
         7.1  PB+MAINCAT OTHER NULL -0
         8.   PB/LVL+BRAND+SUBCAT  OTHER NULL -0
         8.1  PB/BARND+SUBCAT OTHER NULL -0
         9.   BRAND+SUBCAT OTHER NULL -0
         10.  PB/LVL+SUBCAT OTHER NULL -0
         10.1 PB+SUBCAT OTHER NULL -0
         11.  PB/LVL+ITEM  OTHER NULL -0
         11.1 PB/ITEM OTHER NULL -0
         12.  ITEM OTHER NULL -(1)
         13.  ITEM+SERIAL OTHER NULL -0
         14   PROMOTION CD OTHER NULL -0
 
         */

        public DataTable GetDelaerCommissionDetails(string _com, string _pc, DateTime _from, DateTime _to)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDelaerCommissionDetails(_com, _pc, _from, _to);
        }

        public Int32 UpdateItemCommission(List<InvoiceItem> _list)
        {
            _salesDAL = new SalesDAL();
            int result = 0;

            using (TransactionScope tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                foreach (InvoiceItem _ii in _list)
                {

                    List<CashCommissionDetailRef> comm = _salesDAL.GetItemCashCommission(_ii.Mi_itm_tp, _ii.Mi_cd, _ii.Mi_cre_dt, "", "", "", _ii.Sad_itm_cd, "", _ii.Sad_pbook, _ii.Sad_pb_lvl);
                    if (comm.Count > 0)
                    {
                        _ii.Sad_comm_amt = (comm[0].Sccd_cash_comm_rt / 100) * _ii.Sad_unit_amt + comm[0].Sccd_cash_comm * _ii.Sad_qty;
                    }
                    result = result + _salesDAL.UpdateItemCommission(_ii.Sad_comm_amt, _ii.Sad_itm_cd, _ii.Sad_inv_no);
                }

                _salesDAL.ConnectionClose();
                tr.Complete();
            }
            return result;

        }

        #region HP Parameters
        public Int32 Save_hpr_sys_para(List<Hpr_SysParameter> paraheaders)
        {
            _salesDAL = new SalesDAL();
            int result = 0;
            try
            {
                //using (TransactionScope tr = new TransactionScope())
                {
                    _salesDAL.ConnectionOpen();
                    _salesDAL.BeginTransaction();

                    foreach (Hpr_SysParameter para in paraheaders)
                    {
                        result = _salesDAL.Save_hpr_sys_para(para);
                    }

                    // _salesDAL.ConnectionClose();
                    _salesDAL.TransactionCommit();

                    result = 1;
                    //tr.Complete();
                    return result;
                }
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                return -1;
            }
        }

        public List<Hpr_SysParameter> GetAll_hpr_Para(string code, string type, string value)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAll_hpr_Para(code, type, value);
        }

        public DataTable Get_get_hpr_para_types(string _code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_get_hpr_para_types(_code);
        }
        public Int32 Clone_hpr_para_types(string code, string pc, List<string> pcList_toClone, string createdBy, DateTime createdDate)
        {
            Int32 _effect = 0;

            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen();

                foreach (string clone_pc in pcList_toClone)
                {
                    List<Hpr_SysParameter> hpr_Para = _salesDAL.GetAll_hpr_Para(code, "PC", pc);
                    if (hpr_Para != null)
                    {
                        if (hpr_Para.Count > 0)
                        {
                            //TODO: Delete,then insert. 
                            Hpr_SysParameter firstPara = hpr_Para[0];
                            firstPara.Hsy_cre_by = createdBy;
                            firstPara.Hsy_cre_dt = createdDate;
                            firstPara.Hsy_pty_cd = clone_pc;

                            _effect = _salesDAL.Delete_hpr_para_types(code, clone_pc);
                            _effect = _salesDAL.Save_hpr_sys_para(firstPara);
                            _effect = 1;
                        }
                        else
                        {
                            _effect = -1; //original PC doesn't have records to clone
                        }
                    }
                    else
                    {
                        _effect = -1; //original PC doesn't have records to clone
                    }
                }

                _salesDAL.ConnectionClose();

                _tr.Complete();
                return _effect;
            }
        }

        //method belongs to Account Restriction
        public List<HpAccRestriction> GetAll_SavedAccountRestrictons(string pc, Int32 type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAll_SavedAccountRestrictons(pc, type);
        }
        #endregion HP Parameters

        public int SaveServiceAgentDetail(MasterBusinessEntity _customer)
        {

            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int32 X = _salesDAL.SaveServiceAgentDetail(_customer);
            _salesDAL.ConnectionClose();
            return 1;
        }

        public List<MasterExchangeRate> GetAll_ExchangeRates(string _com)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAll_ExchangeRates(_com);

        }

        public List<HpSchemeDetails> GetSchemaByTypeCat(string _schtp, string _schcat)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchemaByTypeCat(_schtp, _schcat);
        }

        public Int32 SaveECDDefinition(EarlyClosingDiscount _ecd, string _pcList, string _pbList, string _pblvlList, string _schList)
        {
            _salesDAL = new SalesDAL();
            int result = 0;
            //using (TransactionScope _scope = new TransactionScope())
            //{
            _salesDAL.ConnectionOpen();
            result = _salesDAL.SaveECDDefinition(_ecd, _pcList, _pbList, _pblvlList, _schList);
            _salesDAL.ConnectionClose();
            //    _scope.Complete();
            //}
            return result;

        }

        public Int32 SaveECDVoucher(ECDVoucher _vou, string _pcList, string _schList)
        {
            _salesDAL = new SalesDAL();
            int effect = 0;

            _salesDAL.ConnectionOpen();
            effect = _salesDAL.SaveECDVoucher(_vou, _pcList, _schList);
            _salesDAL.ConnectionClose();

            return effect;
        }

        public Int32 Save_TEMP_PC_LOC_HP(string username, string com, List<string> pcList, string loc)//FOR HP CLOSING BALANCE
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int32 effect1 = 0;
            foreach (string st in pcList)
            {
                //  Int32 effect = _salesDAL.Delete_TEMP_PC_LOC(username, com, null, null);
                effect1 = effect1 + _salesDAL.Save_TEMP_PC_LOC(username, com, st, loc);
            }
            _salesDAL.ConnectionClose();
            return effect1;
        }

        public DataTable GetECDVoucherGeneratePc(string _com, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetECDVoucherGeneratePc(_com, _date);
        }

        public Int32 ProcessECDVoucherGeneration(List<string> pcList, DateTime _from, string _com, string _user)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            int result = 0;
            for (int i = 0; i < pcList.Count; i++)
            {

                //GET ALLOW SCHEMES
                List<ECDVoucher> _ecdVou = _salesDAL.GetAlowEcdDefs(pcList[i], _from);
                for (int j = 0; j < _ecdVou.Count; j++)
                {

                    //GET ACTIVE ACCOUNT
                    DataTable _actAcc = _salesDAL.GetActiveAccountsFromScheme(_com, pcList[i], DateTime.Now.Date, _ecdVou[j].Hvd_sch_cd);
                    for (int k = 0; k < _actAcc.Rows.Count; k++)
                    {

                        //GET CLOSING BAL
                        decimal _clsBal = _salesDAL.Get_AccountBalance(DateTime.Now.Date, _actAcc.Rows[k]["hpa_acc_no"].ToString());

                        //CHECK COUNDITION

                        if (_ecdVou[j].Hvd_from_bal <= _clsBal && _ecdVou[j].Hvd_to_bal >= _clsBal)
                        {

                            decimal _ecdVal = 0;
                            //CALCULATE EVD VALUE
                            if (_ecdVou[j].Hvd_is_rt)
                            {
                                _ecdVal = _ecdVou[j].Hvd_ecd_val * _clsBal / 100;
                            }
                            else
                                _ecdVal = _ecdVou[j].Hvd_ecd_val;

                            //VOUCHER NUMBER GENERATE
                            MasterAutoNumber _receiptAuto = new MasterAutoNumber();
                            _receiptAuto.Aut_cate_cd = pcList[i];
                            _receiptAuto.Aut_cate_tp = "PC";
                            _receiptAuto.Aut_start_char = "ECD-VOU";
                            _receiptAuto.Aut_direction = 1;
                            _receiptAuto.Aut_modify_dt = null;
                            _receiptAuto.Aut_moduleid = "VOU";
                            _receiptAuto.Aut_number = 0;
                            _receiptAuto.Aut_year = null;


                            MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_receiptAuto.Aut_moduleid, (short)_receiptAuto.Aut_direction, _receiptAuto.Aut_start_char, _receiptAuto.Aut_cate_tp, _receiptAuto.Aut_cate_cd, _receiptAuto.Aut_modify_dt, _receiptAuto.Aut_year);
                            string _cusNo = _receiptAuto.Aut_cate_tp + "-" + _receiptAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                            _inventoryDAL.UpdateAutoNumber(_receiptAuto);

                            //INSERT HPR_ECD_DEFN

                            EarlyClosingDiscount _ecd = new EarlyClosingDiscount();
                            _ecd.Hed_tp = "V";
                            _ecd.Hed_pty_tp = "PC";
                            _ecd.Hed_cre_by = _user;
                            _ecd.Hed_cre_dt = DateTime.Now;
                            _ecd.Hed_sch_cd = _ecdVou[j].Hvd_sch_cd;
                            _ecd.Hed_pty_cd = pcList[i];
                            _ecd.Hed_pty_tp = "PC";
                            _ecd.Hed_from_dt = _from;
                            _ecd.Hed_to_dt = _ecdVou[j].Hvd_to_dt;

                            _ecd.Hed_eff_dt = DateTime.Now;
                            _ecd.Hed_acc_no = _actAcc.Rows[k]["hpa_acc_no"].ToString();
                            _ecd.Hed_vou_no = _cusNo;
                            _ecd.Hed_ecd_cls_val = _ecdVal;


                            result = result + _salesDAL.SaveECDDefinitionVoucher(_ecd);
                        }
                    }
                }
            }
            _salesDAL.ConnectionClose();
            return result;
        }

        public DataTable GetECDNotPrintPcs(string _com, DateTime _from, DateTime _to)
        {

            _salesDAL = new SalesDAL();
            return _salesDAL.GetECDNotPrintPcs(_com, _from, _to);
        }

        public DataTable GetECDDefnSchemesFromPcsAndDates(DateTime _from, DateTime _to, string _pcList)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetECDDefnSchemesFromPcsAndDates(_from, _to, _pcList);

        }

        public DataTable GetECDDefnRateFromPcAndSchmes(DateTime _from, DateTime _to, string _pcList, string _schList)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetECDDefnRateFromPcAndSchmes(_from, _to, _pcList, _schList);
        }

        public DataTable GetECDDefnVouFromPcAndSchAndRate(DateTime _from, DateTime _to, string _pcList, string _schList, string _rateList)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetECDDefnVouFromPcAndSchAndRate(_from, _to, _pcList, _schList, _rateList);
        }

        public Int32 UpdateECDVoucherPrintStatus(string _vou)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            int result = 0;
            result = _salesDAL.UpdateECDVoucherPrintStatus(_vou);
            _salesDAL.ConnectionClose();
            return result;
        }

        public MasterItemBrand GetItemBrand(string _cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetItemBrand(_cd);
        }

        public DataTable HPExcessShortReport(DateTime _fromDate, string _user, string _company, string _PC)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.HPExcessShortReport(_fromDate, _user, _company, _PC);
        }

        public List<HpAccount> GetActiveAccount(string _com, string _ac, DateTime _date)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetActiveAccount(_com, _ac, _date);
        }

        // Nadeeka 23-03-2015
        #region QuatationBased DO


        public DataTable GetDeliveredQuotation(string _company, string _quo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDeliveredQuotation(_company, _quo);
        }

        public DataTable GetPendingDoToInv(string _company, DateTime _fromDate, DateTime _toDate, string _doNo, string _sts, string _pc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPendingDoToInv(_company, _fromDate, _toDate, _doNo, _sts, _pc);
        }

        public DataTable GetPendingQuotationToDO(string _company, DateTime _fromDate, DateTime _toDate, string _custCode, string _QuoNo, string _sts, string _pc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPendingQuotationToDO(_company, _fromDate, _toDate, _custCode, _QuoNo, _sts, _pc);
        }


        public List<QoutationDetails> GetAllQuotationItemList(string _QuoNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAllQuotationItemList(_QuoNo);
        }

        #endregion


        public DataTable getReturnChequeBank(string _Bank)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.getReturnChequeBank(_Bank);
        }

        public DataTable GetPromotionByInvoice(string _inv)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPromotionByInvoice(_inv);
        }


        public DataTable getSalesGiftVouchaer(string _InvNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.getSalesGiftVouchaer(_InvNo);
        }
        public DataTable GetWarrantyCommenceDate(string _com, string _pc, string _invNo)
        {  // Nadeeka
            _salesDAL = new SalesDAL();

            return _salesDAL.GetWarrantyCommenceDate(_com, _pc, _invNo);
        }

        public DataTable getDailyExpences(DateTime _FromDate, DateTime _ToDate, string _user_id, string _company, string _code, string _pc)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.getDailyExpences(_FromDate, _ToDate, _user_id, _company, _code, _pc);
        }

        public DataTable getReturnChequeLocHigh(string _Com, string _Type, string _Code)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.getReturnChequeLocHigh(_Com, _Type, _Code);
        }

        public DataTable GetDeliverCustomer(string _invNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDeliverCustomer(_invNo);
        }

        public DataTable GetSalesHdr(string _invNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSalesHdr(_invNo);
        }

        public DataTable GetInsuranceAgreement(string _accNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInsuranceAgreement(_accNo);
        }

        public DataTable GetSalesDet(string _invNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSalesDet(_invNo);
        }
        public DataTable GetInvItemCode(string _invNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvItemCode(_invNo);
        }
        public DataTable GetinvSubType(string _Type, string _sType)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetinvSubType(_Type, _sType);
        }

        public DataTable GetinvBatch(string _invNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetinvBatch(_invNo);
        }
        public DataTable GetinvSer(double _seq)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetinvSer(_seq);
        }
        public DataTable GetinvEmp(string _com, string _emp)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetinvEmp(_com, _emp);
        }

        public DataTable GetinvUser(string _user)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetinvUser(_user);
        }

        public DataTable GetInvoiceReceiptHdr(string _invNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceReceiptHdr(_invNo);
        }

        public DataTable GetPriceCombineDetails()
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceCombineDetails();
        }

        public DataTable GetPriceLocationDetails()
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceLocationDetails();
        }

        //Written By Nadeeka on 04/07/2013
        //public DataTable DeliveredSalesWithSerial(DateTime in_FromDate, DateTime in_ToDate, string in_user_id, string in_Company, string in_item, string in_Brand, string in_cat1, string in_cat2, string in_cat3, string in_model, string in_Profit)
        //{
        //    _salesDAL = new SalesDAL();
        //    _securityDAL = new SecurityDAL();
        //    if (_securityDAL.Is_Report_DR("DeliveredSalesWithSerial") == true) _salesDAL.ConnectionOpen_DR();
        //    return _salesDAL.DeliveredSalesWithSerial(in_FromDate, in_ToDate, in_user_id, in_Company, in_item, in_Brand, in_cat1, in_cat2, in_cat3, in_model, in_Profit);

        //    //DataTable GLOB_DataTable = new DataTable();
        //    //string _filePath = string.Empty;

        //    //string _err = string.Empty;
        //    //DataTable _dtResults;
        //    //DataTable tmp_user_pc = _salesDAL.GetTempUserPc(in_Company, in_user_id);
        //    //if (tmp_user_pc.Rows.Count > 0)
        //    //{
        //    //    foreach (DataRow drow in tmp_user_pc.Rows)
        //    //    {
        //    //        _securityDAL = new SecurityDAL();
        //    //        if (_securityDAL.Is_Report_DR("DeliveredSalesWithSerial") == true) _salesDAL.ConnectionOpen_DR();
        //    //        _dtResults = _salesDAL.DeliveredSalesWithSerial(in_FromDate, in_ToDate, in_user_id, in_Company, in_item, in_Brand, in_cat1, in_cat2, in_cat3, in_model, drow["tpl_pc"].ToString());
        //    //        GLOB_DataTable.Merge(_dtResults);

        //    //    }
        //    //}

        //    //_err = "";
        //    //_filePath = "";
        //    //_filePath = ExportExcel2007(in_Company, in_user_id, GLOB_DataTable, out in_Company);
        //    //if (GLOB_DataTable.Rows.Count == 0)
        //    //{
        //    //    _err = "No Records Found.";
        //    //}



        //    //return _filePath;


        //}

        //Written By Sanjeewa on 05/10/2013
        //public DataTable GetCutomerDetails(DateTime in_FromDate, DateTime in_ToDate, DateTime in_asatDate, string in_user_id, Int16 in_NoOfMonths, string _com, string _pc, Int16 in_ISlast)
        //{
        //    _salesDAL = new SalesDAL();
        //    return _salesDAL.GetCutomerDetails(in_FromDate, in_ToDate, in_asatDate, in_user_id, in_NoOfMonths, _com, _pc, in_ISlast);
        //}
        //public string GetCutomerDetails(DateTime in_FromDate, DateTime in_ToDate, DateTime in_asatDate, string in_user_id, Int16 in_NoOfMonths, string _com, out string _err)
        //{
        //    int in_ISlast;
        //    _err = string.Empty;
        //    string _filePath = string.Empty;
        //    in_ISlast = 1;

        //    DataTable _dtResults;
        //    _salesDAL = new SalesDAL();
        //    DataTable GLOB_DataTable = new DataTable();

        //    DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, in_user_id);
        //    if (tmp_user_pc.Rows.Count > 0)
        //    {
        //        foreach (DataRow drow in tmp_user_pc.Rows)
        //        {
        //            _securityDAL = new SecurityDAL();
        //            if (_securityDAL.Is_Report_DR("CustomerDetails") == true) _salesDAL.ConnectionOpen_DR();
        //            _dtResults = _salesDAL.GetCutomerDetails(in_FromDate, in_ToDate, in_asatDate, in_user_id, in_NoOfMonths, _com, drow["tpl_pc"].ToString(), in_ISlast);
        //            GLOB_DataTable.Merge(_dtResults);
        //            in_ISlast = in_ISlast + 1;
        //        }
        //    }

        //    _err = "";
        //    _filePath = "";
        //    _filePath = ExportExcel2007(_com, in_user_id, GLOB_DataTable, out _err);
        //    if (GLOB_DataTable.Rows.Count == 0)
        //    {
        //        _err = "No Records Found.";
        //    }



        //    return _filePath;
        //}
        //public string GetCutomerDetails_ReduceBal(DateTime in_FromDate, DateTime in_ToDate, DateTime in_asatDate, string in_user_id, Int16 in_NoOfMonths, string _com, out string _err)
        //{
        //    int in_ISlast;
        //    _err = string.Empty;
        //    string _filePath = string.Empty;
        //    in_ISlast = 1;

        //    DataTable _dtResults;
        //    _salesDAL = new SalesDAL();



        //    DataTable GLOB_DataTable = new DataTable();

        //    DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, in_user_id);
        //    if (tmp_user_pc.Rows.Count > 0)
        //    {
        //        _securityDAL = new SecurityDAL();
        //        if (_securityDAL.Is_Report_DR("CutomerDetails_ReduceBal") == true) _salesDAL.ConnectionOpen_DR();

        //        foreach (DataRow drow in tmp_user_pc.Rows)
        //        {
        //            _dtResults = _salesDAL.GetCutomerDetails_ReduceBal(in_FromDate, in_ToDate, in_asatDate, in_user_id, in_NoOfMonths, _com, drow["tpl_pc"].ToString(), in_ISlast);
        //            GLOB_DataTable.Merge(_dtResults);
        //            in_ISlast = in_ISlast + 1;
        //        }
        //    }

        //    _err = "";
        //    _filePath = "";
        //    _filePath = ExportExcel2007(_com, in_user_id, GLOB_DataTable, out _err);
        //    if (GLOB_DataTable.Rows.Count == 0)
        //    {
        //        _err = "No Records Found.";
        //    }


        //    return _filePath;
        //}


        public DataTable GetReduceBalInterestAccno(DateTime in_ToDate, string _com, string _pc, string _accNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();

            return _salesDAL.GetReduceBalInterestAccno(in_ToDate, _com, _pc, _accNo);
        }

        public DataTable ProcessInsuranceCoverNote(string _refNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.ProcessInsuranceCoverNote(_refNo);
        }

        public DataTable GetinvTax(string _invNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetinvTax(_invNo);
        }

        public DataTable GetDFCusPassport(string _inv)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDFCusPassport(_inv);
        }

        public DataTable ECD_vouchers_Print(string voucherNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.ECD_vouchers_Print(voucherNo);
        }

        public DataTable GetManagerDefProfit(string _com, string _epf)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetManagerDefProfit(_com, _epf);
        }

        public DataTable GetSalesDetails(string _invNo, string _acc)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSalesDetails(_invNo, _acc);
        }

        public DataTable GetInvCreditDetails(string _invNo)
        {   // Sanjeewa 2016-09-20
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvCreditDetails(_invNo);
        }


        public DataTable GetHPRevertHeader(string _refNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHPRevertHeader(_refNo);
        }

        public DataTable GetSevJobHeader(string _job)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSevJobHeader(_job);
        }

        public DataTable GetSevJobDet(string _job)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSevJobDet(_job);
        }

        public DataTable GetSevJobCost(string _job)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSevJobCost(_job);
        }

        public DataTable GetHPSaleswithDO(string _acc)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHPSaleswithDO(_acc);
        }
        public DataTable GetHPSaleswithDOItems(string _acc, string _item)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHPSaleswithDOItems(_acc, _item);
        }

        public DataTable GetAccountTrans(string _acc)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAccountTrans(_acc);
        }

        public DataTable GetHP_Account_AccNo(string _acc)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHP_Account_AccNo(_acc);
        }

        public DataTable GetDeliveredSerialDetails(string _invNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDeliveredSerialDetails(_invNo);
        }

        public DataTable GetAccountDetails(string _invNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAccountDetails(_invNo);
        }

        public DataTable getReturnChequePayments(DateTime _AsAtDate, string _RetNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.getReturnChequePayments(_AsAtDate, _RetNo);
        }

        public DataTable ProcessVehicleInsuranceArrearsDet()
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.ProcessVehicleInsuranceArrearsDet();
        }

        public DataTable GetVehicalRegDetails(string _accNo)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehicalRegDetails(_accNo);
        }

        public DataTable GetVehicalInsuranceDetails(string _accNo)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehicalInsuranceDetails(_accNo);
        }

        public DataTable GetReq_App_Headings()
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReq_App_Headings();
        }

        public DataTable GetReq_App_HeadingsView()
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReq_App_HeadingsView();
        }

        public DataTable GetAccountTransactionDetails(string _accNo)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAccountTransactionDetails(_accNo);
        }

        public DataTable GetInvoiceReceiptDet(string _invNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceReceiptDet(_invNo);
        }

        public DataTable GetInsuranceCompanyName(string _recNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInsuranceCompanyName(_recNo);
        }
        public DataTable GetInvoice_Serials(string _recNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoice_Serials(_recNo);
        }
        public DataTable GetExchangeReceiptHdr(string _ReqNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetExchangeReceiptHdr(_ReqNo);
        }
        public DataTable GetExchangeReceiptDet(string _ReqNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetExchangeReceiptDet(_ReqNo);
        }
        public DataTable GetAccountSchedule(string _invNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAccountSchedule(_invNo);
        }
        public DataTable GetAccountSchedule_Acc(string _accNo)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAccountSchedule_Acc(_accNo);
        }
        public DataTable GetCustAcknowledgeDetails(string _User)
        {   // Sanjeewa
            _reptDAL = new ReptDAL();
            return _reptDAL.GetCustAcknowledgeDetails(_User);
        }
        public DataTable TrPayTpDefEnquiry(string _com, string _circular, string _promocode, string _paytp, string _isasatdate, DateTime _fDate, DateTime _tDate, DateTime _asatDate, string _barnd, string _pb, string _pblevel, string _mcate, string _scate, string _pc, string _item)
        {// Nadeeka
            //_salesDAL = new SalesDAL();
            //return _salesDAL.TrPayTpDefEnquiry(  _com,   _circular,   _promocode,   _paytp,   _isasatdate,   _fDate,   _tDate,   _asatDate,      _barnd,   _pb,   _pblevel,   _mcate,   _scate);



            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            DataTable _MTBL = new DataTable();
            _MTBL = _salesDAL.TrPayTpDefEnquiry("N/A", _circular, _promocode, _paytp, _isasatdate, _fDate, _tDate, _asatDate, _barnd, _pb, _pblevel, _mcate, _scate, "N/A", "N/A", _item);

            if (_circular == "") { _circular = null; }

            if (_promocode == "") { _promocode = null; }

            if (_paytp == "") { _paytp = null; }

            if (_barnd == "") { _barnd = null; }

            if (_pb == "") { _pb = null; }

            if (_pblevel == "") { _pblevel = null; }
            if (_mcate == "") { _mcate = null; }
            if (_scate == "") { _scate = null; }
            if (_item == "") { _item = null; }

            List<MasterSalesPriorityHierarchy> _hierarchy = _salesDAL.GetSalesPriorityHierarchy(_com, _pc, "PC_PRIT_HIERARCHY", "PC");
            //    if (_hierarchy != null && _hierarchy.Count > 0) _hierarchy = _hierarchy.Where(x => x.Mpi_cd == "PC" || x.Mpi_cd == "CHNL").ToList();
            if (_hierarchy != null && _hierarchy.Count > 0) _hierarchy = _hierarchy.Where(x => x.Mpi_cd == "PC" || x.Mpi_cd == "CHNL" || x.Mpi_cd == "SCHNL" || x.Mpi_cd == "AREA" || x.Mpi_cd == "COM" || x.Mpi_cd == "ZONE").ToList();

            //Int32 _isserialized = Convert.ToInt16(_salesDAL.GetPriceLevel(_company, _book, _level).Sapl_is_serialized);
            //Int32 _ispromotion = _isPromotion;
            //List<CashPromotionDiscountDetail> _List = new List<CashPromotionDiscountDetail>();

            if (_hierarchy != null && _hierarchy.Count > 0)
            {
                foreach (MasterSalesPriorityHierarchy _one in _hierarchy)
                {
                    string _type = _one.Mpi_cd;
                    string _value = _one.Mpi_val;
                    DataTable _DTL = _salesDAL.TrPayTpDefEnquiry(_com, _circular, _promocode, _paytp, _isasatdate, _fDate, _tDate, _asatDate, _barnd, _pb, _pblevel, _mcate, _scate, _value, _type, _item);

                    if (_DTL != null && _DTL.Rows.Count > 0)
                        _MTBL.Merge(_DTL);


                }
            }
            _MTBL.TableName = "sar_txnpay_tp";
            return _MTBL;

        }
        public DataTable GetNoOfAccountDetails(DateTime _fromDate, DateTime _toDate, string _User, string _com, string _pc)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetNoOfAccountDetails(_fromDate, _toDate, _User, _com, _pc);
        }

        //.............................. 
        public DataTable GetReportInfor(string _RepName)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReportInfor(_RepName);
        }

        public DataTable GetMovementSerials(string _docNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetMovementSerials(_docNo);
        }

        public DataTable GetMovementSerials_wo_Ser(string _docNo)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetMovementSerials_wo_Ser(_docNo);
        }

        public DataTable GetMovementSerials_WithExpireDates(string _docNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetMovementSerials_WithExpireDates(_docNo);
        }


        public DataTable GetCaseQty(string _docNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCaseQty(_docNo);
        }


        public DataTable GetVehicleNo(string _docNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehicleNo(_docNo);
        }


        public DataTable Get_CustomerDetails(string _CustCode)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_CustomerDetails(_CustCode);
        }
        public DataTable GetPODetails(string _docNo)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPODetails(_docNo);
        }

        public DataTable GetLocationCode(string _comCode, string _locCode)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetLocationCode(_comCode, _locCode);
        }

        public DataTable GetItemCode(string _comCode, string _itmCode)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetItemCode(_comCode, _itmCode);
        }

        public DataTable GetItemStatus(string _itmSts)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetItemStatus(_itmSts);
        }

        public DataTable GetReceiptType(string _recType)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReceiptType(_recType);
        }
        //kapila
        public Int32 UpdateDayEnd(string _com, string _pc, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int32 X = _salesDAL.UpdateDayEnd(_com, _pc, _date);
            _salesDAL.ConnectionClose();
            return X;
        }

        public DataTable GetReceiptWarranty(string _recNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReceiptWarranty(_recNo);
        }

        public DataTable GetInsurance(string _accNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInsurance(_accNo);
        }

        public DataTable CollectionSummaryReport(DateTime _fromDate, DateTime _toDate, string _user, string _company, string _pc, string _mgrcd)
        {   // Nadeeka            
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();
            if (_securityDAL.Is_Report_DR("collection_summ") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.CollectionSummaryReport(_fromDate, _toDate, _user, _company, _pc, _mgrcd);
        }

        public DataTable CollectionSummaryReport_other(DateTime _fromDate, DateTime _toDate, string _user, string _company, string _pc)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.CollectionSummaryReport_other(_fromDate, _toDate, _user, _company, _pc);
        }

        public DataTable CollectionSummaryReport_otherCol(DateTime _fromDate, DateTime _toDate, string _user, string _company, string _pc)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.CollectionSummaryReport_otherCol(_fromDate, _toDate, _user, _company, _pc);
        }

        public DataTable CollectionSummaryReportECD(DateTime _fromDate, DateTime _toDate, string _user, string _company, string _pc)
        {   // Nadeeka
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();
            if (_securityDAL.Is_Report_DR("collection_summ") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.CollectionSummaryReportECD(_fromDate, _toDate, _user, _company, _pc);
        }

        public DataTable TransactionVarienceReport(DateTime _fromDate, DateTime _toDate, string _user, string _company, string _loc)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("TransactionVarience") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.TransactionVarienceReport(_fromDate, _toDate, _user, _company, _loc);
        }

        public DataTable GetReceivableDetails(DateTime in_FromDate, DateTime in_ToDate, string in_user_id, string _com, string _pc, string _item, string _cat, string _stype)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ReceivableDetails") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetReceivableDetails(in_FromDate, in_ToDate, in_user_id, _com, _pc, _item, _cat, _stype);
        }




        public DataTable ReceivableMovemntReport(DateTime _fromDate, DateTime _toDate, string _user, string _pc, string _company, Int16 _isSum)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            //_salesDAL.ConnectionOpen();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ReceivableMovemnt") == true) _salesDAL.ConnectionOpen_DR();
            DataTable _TBL = _salesDAL.ReceivableMovemntReport(_fromDate, _toDate, _user, _pc, _company, _isSum);
            //_salesDAL.ConnectionClose();
            return _TBL;
        }

        public DataTable GPInsuranceFundReport(DateTime _fromDate, string _user, string _company, string _LOC, Int16 _isSum)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("InsuranceFund") == true) _salesDAL.ConnectionOpen_DR();
            DataTable _TBL = _salesDAL.GPInsuranceFundReport(_fromDate, _user, _company, _LOC, _isSum);

            return _TBL;
        }

        public DataTable HPInsuranceReport(DateTime _fromDate, DateTime _toDate, string _user, string _compan, string _LOC)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("HPInsurance") == true) _salesDAL.ConnectionOpen_DR();
            DataTable _TBL = _salesDAL.HPInsuranceReport(_fromDate, _toDate, _user, _compan, _LOC);

            return _TBL;
        }

        public DataTable GetBusinessCompanyDetailTable(string _company, string _businessCompanyCode, string _nic, string _mobile, string _businessType)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetBusinessCompanyDetailTable(_company, _businessCompanyCode, _nic, _mobile, _businessType);
        }

        public DataTable GetHpAccCustomer(string _accNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHpAccCustomer(_accNo);
        }

        public DataTable GetVehicalRegistrations(string _regNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehicalRegistrations(_regNo);
        }

        public DataTable GetAdvanRecItems(string _recNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAdvanRecItems(_recNo);
        }


        public DataTable GetSalesSubTypeTable(string _type, string _stype)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSalesSubTypeTable(_type, _stype);
        }

        public DataTable GetReceipt(string _doc)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReceipt(_doc);
        }
        public DataTable GetReceiptTBS(string _doc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReceiptTBS(_doc);
        }

        public DataTable GetReceiptByAnal3(string _doc, string _pc, string _com)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReceiptByAnal3(_doc, _pc, _com);
        }

        public DataTable GetRecDivision(string _com, string _pc)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRecDivision(_com, _pc);
        }

        public DataTable HPCashFlowForecastingReport(DateTime _fromDate, string _user, string _company, string _pc)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("HPCashFlowForecasting") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.HPCashFlowForecastingReport(_fromDate, _user, _company, _pc);
        }
        public string GetCollectionBonusDetailsRepNew(string _user, DateTime _asAtDate, Int16 _issum, string _loc, string _company, out string _err)
        {   // Nadeeka
            try
            {
                _salesDAL = new SalesDAL();
                _securityDAL = new SecurityDAL();
                if (_securityDAL.Is_Report_DR("CollectionBonus") == true) _salesDAL.ConnectionOpen_DR();

                DataTable HPT_COL_BONUS_DET = new DataTable();
                DataTable tmp_user_pc = new DataTable();
                tmp_user_pc = _salesDAL.GetTempUserPc(_company, _user);

                if (tmp_user_pc.Rows.Count > 0)
                {
                    foreach (DataRow drow in tmp_user_pc.Rows)
                    {
                        DataTable TMP_HP_CLS_BAL = new DataTable();
                        TMP_HP_CLS_BAL = _salesDAL.GetCollectionBonusDetailsRep(_user, _asAtDate, _issum, drow["tpl_pc"].ToString());
                        //  TMP_HP_CLS_BAL = bsObj.CHNLSVC.Sales.GetCollectionBonusDetailsRep(BaseCls.GlbUserID, Convert.ToDateTime(BaseCls.GlbReportAsAtDate), 0, drow["tpl_pc"].ToString());
                        HPT_COL_BONUS_DET.Merge(TMP_HP_CLS_BAL);


                    }
                }


                string _targetFilename = CreateExcelFile.ExportToExcelxlsx(_user, _company, HPT_COL_BONUS_DET, 60000, out _err);

                HPT_COL_BONUS_DET.Dispose();
                GC.Collect();

                if (string.IsNullOrEmpty(_err))
                { return _targetFilename; }
                else
                { return "Err"; }
            }

            catch (Exception err)
            {
                GC.Collect();
                _err = err.ToString();
                return "Err";
            }
        }



        public DataTable GetCollectionBonusDetailsRep(string _user, DateTime _asAtDate, Int16 _issum, string _loc)
        {   // Nadeeka

            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CollectionBonus") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetCollectionBonusDetailsRep(_user, _asAtDate, _issum, _loc);

        }


        public DataTable GetSalesTax(string _inv)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSalesTax(_inv);
        }

        public DataTable GetReceiptItemDetails(string _doc)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            _financialDAL = new FinancialDAL();
            if (_securityDAL.Is_Report_DR("ReceiptPrints_n") == true) _financialDAL.ConnectionOpen_DR();
            return _salesDAL.GetReceiptItemDetails(_doc);
        }

        public DataTable GetInvoiceDocumentDefinition(string _company, string _profitCenter, string _invType)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceDocumentDefinition(_company, _profitCenter, _invType);
        }

        public List<RecieptHeader> GetRecieptHeaderByTypeAndAccNo(string _com, string _pc, string _type, string _accno)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRecieptHeaderByTypeAndAccNo(_com, _pc, _type, _accno);
        }

        public List<HpAccount> GetAccByCustType(string _com, string _cust, string _custTP)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAccByCustType(_com, _cust, _custTP);
        }

        public int SaveHpInsu(HpInsurance _hpInsu)
        {
            int result = 0;
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _salesDAL.ConnectionOpen();
            Int32 _insSeq = _inventoryDAL.GetSerialID();
            MasterAutoNumber _receiptAuto = new MasterAutoNumber();
            _receiptAuto.Aut_cate_cd = _hpInsu.Hti_pc;
            _receiptAuto.Aut_cate_tp = "PC";
            _receiptAuto.Aut_direction = 1;
            _receiptAuto.Aut_modify_dt = null;
            _receiptAuto.Aut_moduleid = "RECEIPT";
            _receiptAuto.Aut_number = 0;
            _receiptAuto.Aut_start_char = "INSU";
            _receiptAuto.Aut_year = null;
            _receiptAuto.Aut_number = 0;
            MasterAutoNumber _Insnumber = _inventoryDAL.GetAutoNumber(_receiptAuto.Aut_moduleid, 1, _receiptAuto.Aut_start_char, _receiptAuto.Aut_cate_tp, _receiptAuto.Aut_cate_cd, _receiptAuto.Aut_modify_dt, _receiptAuto.Aut_year);
            string _InsNo = _receiptAuto.Aut_cate_cd + "-" + _receiptAuto.Aut_start_char + _Insnumber.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
            _inventoryDAL.UpdateAutoNumber(_receiptAuto);

            _hpInsu.Hti_seq = _insSeq;
            _hpInsu.Hti_mnl_num = _InsNo;
            _hpInsu.Hti_ref = _InsNo;

            result = _salesDAL.Save_HpInsu(_hpInsu);
            _salesDAL.ConnectionClose();
            _inventoryDAL.ConnectionClose();
            return result;
        }

        public PriceBookLevelRef GetPriceLevelForHp(string _company, string _book, string _level, string _stus)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceLevelForHp(_company, _book, _level, _stus);
        }

        //kapila
        public DataTable GetGlobDebtAgeOuts(string _user)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetGlobDebtAgeOuts(_user);
        }

        //kapila
        public DataTable GetGlobDebtSettle(string _user)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetGlobDebtSettle(_user);
        }

        //kapila
        public DataTable GetTempPCLoc(string _user)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetTempPCLoc(_user);
        }


        #region AC Services Job


        public DataTable GetInvoiceServiceItemSerDet(string invoiceNo, string serialID)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceServiceItemSerDet(invoiceNo, serialID);
        }
        public DataTable Get_all_jobTypes(string com, string sev_chanel)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_all_jobTypes(com, sev_chanel); //for AC jobs, chanel is "AC"
        }
        public DataTable Get_item_servicChargeInfo(string itmeCd, string serviceType)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_item_servicChargeInfo(itmeCd, serviceType);
        }

        public Int32 Save_Ac_Service_Job(MasterAutoNumber jobAuto, ServiceJobHeader jobHdr, ServiceJobDetail jobDet, MasterAutoNumber receipAuto, RecieptHeader _recieptHeader, List<RecieptItem> receipItemList, List<ServiceCostSheet> costsheets, ServiceJobStageLog stageLog, out string outPara_JobNumber, out string outPara_ReceiptNo)
        {
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();

            Int32 ent = -1;
            try
            {
                #region
                using (TransactionScope _tr = new TransactionScope())
                {
                    _salesDAL.ConnectionOpen();
                    _inventoryDAL.ConnectionOpen();

                    string JOBNo = "";
                    MasterAutoNumber _Jnumber = _inventoryDAL.GetAutoNumber(jobAuto.Aut_moduleid, jobAuto.Aut_direction, jobAuto.Aut_start_char, jobAuto.Aut_cate_tp, jobAuto.Aut_cate_cd, jobAuto.Aut_modify_dt, jobAuto.Aut_year);
                    JOBNo = jobAuto.Aut_cate_cd + "-" + jobAuto.Aut_start_char + "-" + _Jnumber.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(jobAuto);//update MST_AUTO table


                    // jobHdr.Sjb_jobno = _inventoryDAL.GetSerialID().ToString();
                    jobHdr.Sjb_jobno = JOBNo;
                    ent = _salesDAL.Save_Job_Header(jobHdr);

                    jobDet.Jbd_jobno = jobHdr.Sjb_jobno;
                    ent = _salesDAL.Save_JobDetail(jobDet);//save the details of the item that is serviced

                    outPara_JobNumber = jobDet.Jbd_jobno;

                    //  stageLog.Sjl_jobno = jobHdr.Sjb_jobno;
                    //  _salesDAL.Save_Job_stagelog(stageLog);

                    string receiptNo = "";
                    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(receipAuto.Aut_moduleid, receipAuto.Aut_direction, receipAuto.Aut_start_char, receipAuto.Aut_cate_tp, receipAuto.Aut_cate_cd, receipAuto.Aut_modify_dt, receipAuto.Aut_year);
                    receiptNo = receipAuto.Aut_cate_cd + "-" + receipAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(receipAuto);//update MST_AUTO table

                    _recieptHeader.Sar_receipt_no = receiptNo;
                    outPara_ReceiptNo = receiptNo;
                    //-----------------------------------------
                    Int32 RecieptSeqNo = 0;
                    RecieptSeqNo = _inventoryDAL.GetSerialID();

                    _recieptHeader.Sar_seq_no = RecieptSeqNo;
                    _recieptHeader.Sar_ser_job_no = jobHdr.Sjb_jobno;

                    ent = _salesDAL.SaveReceiptHeader(_recieptHeader);//save receipt header

                    Int32 line = 0;
                    foreach (RecieptItem _itm in receipItemList)
                    {
                        //if (_recieptHeader.Sar_seq_no == _itm.Sard_seq_no)//have to check the prefix also?
                        //{
                        line++;
                        _itm.Sard_seq_no = RecieptSeqNo;
                        _itm.Sard_line_no = line;
                        _itm.Sard_receipt_no = _recieptHeader.Sar_receipt_no;
                        // effect = _salesDAL.SaveReceiptItem(_itm);//save receipt item
                        _salesDAL.SaveReceiptItem(_itm);//save receipt item
                        //}
                    }
                    //----------------------------------------------
                    line = 0;
                    foreach (ServiceCostSheet cs in costsheets)
                    {
                        line = line + 1;
                        cs.Scs_line = line;
                        cs.Scs_jobno = jobHdr.Sjb_jobno;
                        cs.Scs_joblineno = 1;
                        ent = _salesDAL.sp_save_sev_costsheet(cs);
                    }


                    _salesDAL.ConnectionClose();
                    _inventoryDAL.ConnectionClose();

                    _tr.Complete();
                }
                return 1;
                #endregion
            }
            catch (Exception ex)
            {
                outPara_JobNumber = "n/a"; outPara_ReceiptNo = "n/a";
                return -99;
            }


        }

        public ServiceJobHeader Get_AC_JobHeaderOnDet(string jobno, string jobStatus)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            ServiceJobHeader ent = _salesDAL.Get_AC_JobHeaderOnDet(jobno, jobStatus);
            _salesDAL.ConnectionClose();
            return ent;

        }
        public List<ServiceCostSheet> Get_Sev_CostSheets(string jobno)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            List<ServiceCostSheet> list = _salesDAL.Get_Sev_CostSheets(jobno);
            _salesDAL.ConnectionClose();
            return list;
        }

        public DataTable Get_AC_chargeItem_VAT(string com, string chgItemCd, DateTime date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_AC_chargeItem_VAT(com, chgItemCd, date);
        }

        public Int32 Approve_Ac_Job(string jobNo, string status, string modifyBy, DateTime modifyDt, ServiceJobStageLog stgLog)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();

                Int32 eff = _salesDAL.Update_AC_jobStatus(jobNo, status, modifyBy, modifyDt);
                //  stageLog.Sjl_jobno = jobHdr.Sjb_jobno;
                //  _salesDAL.Save_Job_stagelog(stageLog);

                _salesDAL.ConnectionClose();


                _tr.Complete();
            }

            _salesDAL.ConnectionClose();
            return 1;
        }
        public Int32 UpdateManagerClaims_custPayments(List<ServiceCostSheet> chargeItemsList)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();

                foreach (ServiceCostSheet cs in chargeItemsList)
                {
                    //string jobNo, Int32 lineNo, Decimal new_amount
                    _salesDAL.Update_AC_Job_Claimed_Paid(cs.Scs_jobno, cs.Scs_line, cs.Scs_anal5);
                }

                _salesDAL.ConnectionClose();

                _tr.Complete();
            }

            _salesDAL.ConnectionClose();
            return 1;

        }
        public List<ServiceJobDetail> Get_Sev_JobDet(string jobno)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            List<ServiceJobDetail> list = _salesDAL.Get_Sev_JobDet(jobno);
            _salesDAL.ConnectionClose();
            return list;
        }
        public Decimal Get_MaxAC_ClaimRate(string hsyCD, string parytyTP, string partyCD, DateTime currentDt)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            Decimal maxRt = _salesDAL.Get_MaxAC_ClaimRate(hsyCD, parytyTP, partyCD, currentDt);
            _salesDAL.ConnectionClose();
            return maxRt;
        }

        public DataTable Get_AC_jobItem_shedule(string serialID)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_AC_jobItem_shedule(serialID);
        }
        public Int32 Save_AC_JobShedule(ServiceJobShedule shed)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            Int32 noOfFreeServices = 0;
            try
            {
                List<Hpr_SysParameter> FreeServices = _salesDAL.GetAll_hpr_Para("ACINSTRM", DBNull.Value.ToString(), DBNull.Value.ToString());
                noOfFreeServices = Convert.ToInt32(FreeServices[0].Hsy_val);
            }
            catch (Exception ex)
            {

            }
            Int32 serviceterm = 0;
            try
            {
                List<Hpr_SysParameter> FreeServiceTerm = _salesDAL.GetAll_hpr_Para("ACMONTRM", "", "");
                serviceterm = Convert.ToInt32(FreeServiceTerm[0].Hsy_val);
            }
            catch (Exception ex)
            {

            }
            //save shedule
            for (Int32 i = 1; i <= noOfFreeServices; i++)
            {
                shed.Svjs_term = i;
                shed.Svjs_shed_dt = shed.Svjs_shed_dt.AddMonths(serviceterm);
                shed.Svjs_stus = false;
                _salesDAL.SaveJobShedule(shed);
            }

            _salesDAL.ConnectionClose();
            return 1;
        }
        public Int32 Update_AC_jobItem_shedule(string itemCd, string serialID, string job_no, Boolean stuts)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            int result = 0;
            result = _salesDAL.Update_AC_jobItem_shedule(itemCd, serialID, job_no, stuts);
            _salesDAL.ConnectionClose();
            return result;
        }



        public DataTable GetInvoiceServiceItemSerDet_POS(string invoiceNo, string serialNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceServiceItemSerDet_POS(invoiceNo, serialNo);
        }

        //darshana 26-02-2013
        public DataTable GetInvoiceServiceItemSerDet_Oth(string invoiceNo, string serialNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceServiceItemSerDet_Oth(invoiceNo, serialNo);
        }
        public DataTable Get_item_servicChargeInfo_New(string itmeCd, string serviceType, List<string> seviceItemCode)
        {
            _salesDAL = new SalesDAL();
            DataTable final_dt = new DataTable("finaltbl");
            foreach (string sevItmCd in seviceItemCode)
            {
                DataTable _dt = _salesDAL.Get_item_servicChargeInfo_New(itmeCd, serviceType, sevItmCd);
                final_dt.Merge(_dt);
            }
            return final_dt;
        }
        #endregion  AC Services Job

        public MasterBusinessEntity GetCustomerProfileByCom(string CustCD, string nic, string DL, string PPNo, string brNo, string com)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            MasterBusinessEntity ent = _salesDAL.GetCustomerProfileByCom(CustCD, nic, DL, PPNo, brNo, com);
            _salesDAL.ConnectionClose();
            return ent;
        }

        public Int16 VehRegReceiptCancelProcess(List<VehicalRegistration> _regList)
        {
            Int16 _effects = 0;
            string _invNo = "";
            string _refNo = "";
            _salesDAL = new SalesDAL();

            List<string> _invNoList = new List<string>();

            try
            {
                _salesDAL.ConnectionOpen(); _salesDAL.BeginTransaction();

                if (_regList != null)
                {
                    foreach (VehicalRegistration reg in _regList)
                    {
                        _salesDAL.UpdateVehicleRegTxn(reg.P_svrt_com, reg.P_svrt_pc, reg.P_srvt_ref_no, reg.P_srvt_itm_cd, reg.P_svrt_model, reg.P_svrt_brd, reg.P_svrt_engine, reg.P_svrt_chassis, reg.P_svrt_last_name, reg.P_svrt_full_name, reg.P_svrt_city, reg.P_svrt_add01, reg.P_svrt_add02, reg.P_svrt_district, reg.P_svrt_province, reg.P_svrt_contact, reg.P_svrt_cust_title);
                        _invNo = reg.P_svrt_inv_no;
                        _effects = 1;
                    }
                }

                _salesDAL.TransactionCommit();

                if (_effects == 1)
                    _effects = 1;
                else
                    _effects = 0;

            }
            catch (Exception err)
            {
                _effects = -1;
                _refNo = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();
            }

            return _effects;
        }

        public Int16 ReceiptCancelProcess(RecieptHeader _UpdateRec, List<RecieptItem> _recItem, List<VehicalRegistration> _regList, List<VehicleInsuarance> _insList, List<GiftVoucherPages> _gvlist, List<ReceiptItemDetails> _itmDet)
        {
            Int16 _effects = 0;
            string _invNo = "";
            string _refNo = "";
            _salesDAL = new SalesDAL();
            _inventoryRepDAL = new ReptCommonDAL();
            _generalDAL = new GeneralDAL();
            _fmsInventoryDal = new FMS_InventoryDAL();
            _inventoryDAL = new InventoryDAL();//Added by Prabhath on 12/12/2013 -- because reveres reservation, inventory function written in inventoryDAL :D Not in salesDAL

            List<string> _invNoList = new List<string>();

            try// using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen(); _salesDAL.BeginTransaction();
                _inventoryRepDAL.ConnectionOpen(); _inventoryRepDAL.BeginTransaction();
                _generalDAL.ConnectionOpen(); _generalDAL.BeginTransaction();
                _fmsInventoryDal.ConnectionOpen(); _fmsInventoryDal.BeginTransaction();
                _inventoryDAL.ConnectionOpen(); _inventoryDAL.BeginTransaction();

                _effects = _salesDAL.UpdateRecStatus(_UpdateRec.Sar_receipt_no, _UpdateRec.Sar_act, _UpdateRec.Sar_com_cd, _UpdateRec.Sar_profit_center_cd, _UpdateRec.Sar_mod_by);

                if (_UpdateRec.Sar_receipt_type == "DEBT" || _UpdateRec.Sar_receipt_type == "SVAT" || _UpdateRec.Sar_receipt_type == "DAJ")
                {

                    // get invoice numbers
                    var _lst = (from n in _recItem
                                group n by new { n.Sard_inv_no } into r
                                select new { Sard_inv_no = r.Key.Sard_inv_no }).ToList();

                    decimal _Balance = 0;
                    decimal _commAmt = 0;
                    decimal _wkNo = 0;
                    decimal _minCommAllow = 0;

                    foreach (var s in _lst)
                    {
                        if (_UpdateRec.Sar_is_oth_shop == true)
                            _Balance = _salesDAL.GetOutInvAmt(_UpdateRec.Sar_com_cd, _UpdateRec.Sar_oth_sr, _UpdateRec.Sar_debtor_cd, s.Sard_inv_no);
                        else
                            _Balance = _salesDAL.GetOutInvAmt(_UpdateRec.Sar_com_cd, _UpdateRec.Sar_profit_center_cd, _UpdateRec.Sar_debtor_cd, s.Sard_inv_no);
                        HpSystemParameters _getSystemParameter = _salesDAL.GetSystemParameter("COM", _UpdateRec.Sar_com_cd, "CRCOMMINAW", _UpdateRec.Sar_receipt_date);

                        if (_getSystemParameter.Hsy_cd != null)
                        {
                            _minCommAllow = _getSystemParameter.Hsy_val;
                        }
                        else
                        {
                            _minCommAllow = 0;
                        }


                        if (_Balance <= _minCommAllow)
                        {
                            //  _invNoList.Add(s.Sard_inv_no);
                            //get commission amount
                            _commAmt = _salesDAL.GetFinalCreditCommission(s.Sard_inv_no);
                            //save GNT_REM_SUM 
                            RemitanceSummaryDetail _remDet = new RemitanceSummaryDetail();
                            _remDet.Rem_com = _UpdateRec.Sar_com_cd;
                            if (_UpdateRec.Sar_is_oth_shop == true)
                                _remDet.Rem_pc = _UpdateRec.Sar_oth_sr;
                            else
                                _remDet.Rem_pc = _UpdateRec.Sar_profit_center_cd;
                            _remDet.Rem_dt = _UpdateRec.Sar_receipt_date;
                            _remDet.Rem_sec = "02";
                            _remDet.Rem_cd = "005";
                            _remDet.Rem_sh_desc = "Group sale comm";
                            _remDet.Rem_lg_desc = "GROUP SALE COMM";
                            _remDet.Rem_val = _commAmt * -1;
                            _remDet.Rem_val_final = _commAmt * -1;
                            int _weekNo = _generalDAL.GetWeek(Convert.ToDateTime(_UpdateRec.Sar_receipt_date).Date, out _wkNo, _UpdateRec.Sar_com_cd);
                            _remDet.Rem_week = _wkNo + "S";
                            _remDet.Rem_ref_no = _UpdateRec.Sar_receipt_no;
                            _remDet.Rem_rmk = s.Sard_inv_no;
                            _remDet.Rem_cr_acc = null;
                            _remDet.Rem_db_acc = null;
                            _remDet.Rem_del_alw = false;
                            _remDet.Rem_cre_by = _UpdateRec.Sar_mod_by;
                            _remDet.Rem_cre_dt = _UpdateRec.Sar_receipt_date;
                            _remDet.Rem_is_sos = true;
                            _remDet.Rem_is_dayend = true;
                            _remDet.Rem_is_sun = true;
                            _remDet.Rem_cat = 17;
                            _remDet.Rem_add = 0;
                            _remDet.Rem_ded = 0;
                            _remDet.Rem_net = _commAmt * -1;
                            _remDet.Rem_epf = 0;
                            _remDet.Rem_esd = 0;
                            _remDet.Rem_wht = 0;
                            _remDet.Rem_add_fin = 0;
                            _remDet.Rem_ded_fin = 0;
                            _remDet.Rem_net_fin = _commAmt * -1;
                            _remDet.Rem_rmk_fin = s.Sard_inv_no;
                            _remDet.Rem_bnk_cd = null;
                            _remDet.Rem_is_rem_sum = true;
                            _remDet.REM_CAN_REC = 1;
                            _salesDAL.SaveRemSummaryForFinalCreditComm(_remDet);
                        }
                    }

                    foreach (RecieptItem rec in _recItem)
                    {
                        if (_UpdateRec.Sar_is_oth_shop == true)
                            _effects = _salesDAL.UpdateCancelInvoiceSettleAmt(_UpdateRec.Sar_com_cd, _UpdateRec.Sar_oth_sr, _UpdateRec.Sar_debtor_cd, rec.Sard_inv_no, rec.Sard_settle_amt);
                        else
                            _effects = _salesDAL.UpdateCancelInvoiceSettleAmt(_UpdateRec.Sar_com_cd, _UpdateRec.Sar_profit_center_cd, _UpdateRec.Sar_debtor_cd, rec.Sard_inv_no, rec.Sard_settle_amt);
                    }

                }
                else if (_UpdateRec.Sar_receipt_type == "VHREG")
                {

                    //update registration details and release reservation if reserve item
                    if (_regList != null)
                    {
                        ////Added by Prabhath on 14/12/2013 **** start *****
                        //var _invoice = _recItem.Select(x => x.Sard_inv_no).Distinct().ToList();
                        //foreach (string _no in _invoice)
                        //{
                        //    List<ReptPickSerials> _ser = _inventoryRepDAL.GetInvoiceAdvanceReceiptSerial(_UpdateRec.Sar_com_cd, _no);
                        //    if (_ser != null && _ser.Count > 0)
                        //        foreach (ReptPickSerials _s in _ser)
                        //            _inventoryDAL.UpdateLocationResRevers(_s.Tus_com, _s.Tus_loc, _s.Tus_itm_cd, _s.Tus_itm_stus, _s.Tus_cre_by, _s.Tus_qty);
                        //}
                        ////Added by Prabhath on 14/12/2013 **** end *****

                        foreach (VehicalRegistration reg in _regList)
                        {
                            _salesDAL.UpdateRegTxn(reg.P_svrt_com, reg.P_svrt_pc, reg.P_svrt_inv_no, reg.P_srvt_ref_no, reg.P_srvt_itm_cd, reg.P_svrt_engine, reg.P_svrt_chassis, 2);
                            _inventoryRepDAL.DeleteResSerial(reg.P_svrt_inv_no, reg.P_svrt_com, reg.P_srvt_itm_cd, reg.P_svrt_engine, reg.P_svrt_chassis);
                            _salesDAL.UpdateRegResAvailability(reg.P_svrt_com, reg.P_srvt_itm_cd, reg.P_svrt_engine, reg.P_svrt_chassis, 1);
                            _invNo = reg.P_svrt_inv_no;

                            List<ReptPickSerials> tempSer = new List<ReptPickSerials>();
                            tempSer = _inventoryRepDAL.Get_TEMP_PICK_SER_BY_BASEDOC(_UpdateRec.Sar_com_cd, _invNo);

                            if (tempSer == null)
                            {
                                _inventoryRepDAL.DeleteResHdr(_UpdateRec.Sar_com_cd, _invNo);
                            }
                        }
                    }

                    //if (_regList != null)
                    //{
                    //    List<ReptPickSerials> tempSer = new List<ReptPickSerials>();
                    //    tempSer = _inventoryRepDAL.Get_TEMP_PICK_SER_BY_BASEDOC(_UpdateRec.Sar_com_cd, _invNo);

                    //    if (tempSer == null)
                    //    {
                    //        _inventoryRepDAL.DeleteResHdr(_UpdateRec.Sar_com_cd, _invNo);
                    //    }
                    //}
                }
                else if (_UpdateRec.Sar_receipt_type == "VHINS")
                {
                    if (_insList != null)
                    {
                        ////Added by Prabhath on 14/12/2013 **** start *****
                        //var _invoice = _recItem.Select(x => x.Sard_inv_no).Distinct().ToList();
                        //foreach (string _no in _invoice)
                        //{
                        //    List<ReptPickSerials> _ser = _inventoryRepDAL.GetInvoiceAdvanceReceiptSerial(_UpdateRec.Sar_com_cd, _UpdateRec.Sar_receipt_no);
                        //    if (_ser != null && _ser.Count > 0)
                        //        foreach (ReptPickSerials _s in _ser)
                        //            _inventoryDAL.UpdateLocationResRevers(_s.Tus_com, _s.Tus_loc, _s.Tus_itm_cd, _s.Tus_itm_stus, _s.Tus_cre_by, _s.Tus_qty);
                        //}
                        ////Added by Prabhath on 14/12/2013 **** end *****
                        foreach (VehicleInsuarance ins in _insList)
                        {
                            _salesDAL.UpdateInsTxnCan(ins.Svit_com, ins.Svit_pc, ins.Svit_inv_no, ins.Svit_ref_no, ins.Svit_itm_cd, ins.Svit_engine, ins.Svit_chassis, 2);
                            _inventoryRepDAL.DeleteResSerial(ins.Svit_inv_no, ins.Svit_com, ins.Svit_itm_cd, ins.Svit_engine, ins.Svit_chassis);
                            _salesDAL.UpdateRegResAvailability(ins.Svit_com, ins.Svit_itm_cd, ins.Svit_engine, ins.Svit_chassis, 1);
                            _invNo = ins.Svit_inv_no;

                            InvoiceHeader _tmpInv = new InvoiceHeader();
                            _tmpInv = _salesDAL.GetInvoiceHeader(_invNo);

                            if (_tmpInv != null)
                            {
                                if (_tmpInv.Sah_inv_no != null)
                                {
                                    _salesDAL.UpdateHPSheduleInsuCancel(_tmpInv.Sah_acc_no, _UpdateRec.Sar_mod_by);
                                }
                            }

                            List<ReptPickSerials> tempSer = new List<ReptPickSerials>();
                            tempSer = _inventoryRepDAL.Get_TEMP_PICK_SER_BY_BASEDOC(_UpdateRec.Sar_com_cd, _invNo);

                            if (tempSer == null)
                            {
                                _inventoryRepDAL.DeleteResHdr(_UpdateRec.Sar_com_cd, _invNo);
                            }
                        }
                    }
                }
                else if (_UpdateRec.Sar_receipt_type == "ADINS")
                {
                    if (_insList != null)
                    {
                        foreach (VehicleInsuarance ins in _insList)
                        {
                            _salesDAL.UpdateInsTxnCan(ins.Svit_com, ins.Svit_pc, ins.Svit_inv_no, ins.Svit_ref_no, ins.Svit_itm_cd, ins.Svit_engine, ins.Svit_chassis, 2);
                        }
                    }
                }
                else if (_UpdateRec.Sar_receipt_type == "GVISU")
                {
                    foreach (GiftVoucherPages _tmpGv in _gvlist)
                    {
                        _tmpGv.Gvp_mod_by = _UpdateRec.Sar_mod_by;
                        _tmpGv.Gvp_stus = "C";
                        _tmpGv.Gvp_cus_cd = null;
                        _tmpGv.Gvp_cus_name = null;
                        _tmpGv.Gvp_cus_add1 = null;
                        _tmpGv.Gvp_cus_add2 = null;
                        _tmpGv.Gvp_cus_mob = null;
                        _tmpGv.Gvp_issue_by = null;
                        _tmpGv.Gvp_amt = _tmpGv.Gvp_amt;
                        _tmpGv.Gvp_valid_to = _UpdateRec.Sar_receipt_date;

                        _fmsInventoryDal.UpdateGiftVoucherByReceipt(_tmpGv);
                    }
                }
                else if (_UpdateRec.Sar_receipt_type == "ADVAN")
                {
                    if (_itmDet != null)
                    {
                        //Added by Prabhath on 14/12/2013 **** start *****
                        List<ReptPickSerials> _ser = _inventoryRepDAL.GetInvoiceAdvanceReceiptSerial(_UpdateRec.Sar_com_cd, _UpdateRec.Sar_receipt_no);
                        if (_ser != null && _ser.Count > 0)
                            foreach (ReptPickSerials _s in _ser)
                                _inventoryDAL.UpdateLocationResRevers(_s.Tus_com, _s.Tus_loc, _s.Tus_itm_cd, _s.Tus_itm_stus, _s.Tus_cre_by, _s.Tus_qty);
                        //Added by Prabhath on 14/12/2013 **** end *****

                        foreach (ReceiptItemDetails res in _itmDet)
                        {
                            _inventoryRepDAL.DeleteResSerial(res.Sari_rec_no, _UpdateRec.Sar_com_cd, res.Sari_item, res.Sari_serial, res.Sari_serial_1);
                            _salesDAL.UpdateRegResAvailability(_UpdateRec.Sar_com_cd, res.Sari_item, res.Sari_serial, res.Sari_serial_1, 1);
                            _invNo = res.Sari_rec_no;

                            List<ReptPickSerials> tempSer = new List<ReptPickSerials>();
                            tempSer = _inventoryRepDAL.Get_TEMP_PICK_SER_BY_BASEDOC(_UpdateRec.Sar_com_cd, _invNo);

                            if (tempSer == null)
                            {
                                _inventoryRepDAL.DeleteResHdr(_UpdateRec.Sar_com_cd, _invNo);
                            }
                        }

                        foreach (ReceiptItemDetails res in _itmDet)
                        {// Nadeeka 11-11-2015
                            _inventoryRepDAL.UpdateitemAllocation(res.Sari_item, 1, 0);
                        }
                    }
                }

                string _mobilNo = "";
                string _cusName = "";
                string _Newmg = "";
                string _recTp = "";
                decimal _recAmt = 0;
                //_cusdet = _salesDAL.GetActiveCustomerDetailList(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_debtor_cd, null, null, "C");
                //foreach (MasterBusinessEntity _cus in _cusdet)
                //{
                _mobilNo = _UpdateRec.Sar_mob_no;
                _cusName = _UpdateRec.Sar_debtor_name;
                _recAmt = _UpdateRec.Sar_tot_settle_amt;

                if (!string.IsNullOrEmpty(_mobilNo))
                {

                    if (_mobilNo.Length >= 9)
                    {

                        if (_UpdateRec.Sar_receipt_type == "ADVAN")
                        {
                            _recTp = "Advance payment";
                        }
                        else if (_UpdateRec.Sar_receipt_type == "GVISU")
                        {
                            _recTp = "Gift voucher purchase";
                        }
                        else if (_UpdateRec.Sar_receipt_type == "DEBT")
                        {
                            _recTp = "Credit sale settlement";
                        }
                        else if (_UpdateRec.Sar_receipt_type == "VHINS")
                        {
                            _recTp = "Vechicle insuarance";
                        }
                        else if (_UpdateRec.Sar_receipt_type == "VHREG")
                        {
                            _recTp = "Vechicle registration";
                        }
                        else
                        {
                            _recTp = "";
                        }


                        string _pcName = "";
                        DataTable dt = _generalDAL.CheckProfitCenter(_UpdateRec.Sar_com_cd, _UpdateRec.Sar_profit_center_cd);
                        if (dt.Rows.Count > 0)
                        {
                            _pcName = Convert.ToString(dt.Rows[0]["mpc_desc"]);
                        }

                        _Newmg = "The payment of LKR " + _recAmt + " received to the " + _pcName + " for " + _recTp + ",R/N " + _UpdateRec.Sar_receipt_no + " is cancelled.";// "Thank u for the purchased items on HP A/C: " + _AccountNo + " @ " + _pcName + " S/R. HP value Rs.: " + _HPAccount.Hpa_hp_val + " and " + _smsInsu + " Rs.: " + _insuAmt + "-" + _generalDAL.GetHPCustContactPhoneNo();
                        OutSMS _out = new OutSMS();
                        _out.Msg = _Newmg;
                        _out.Msgstatus = 0;
                        _out.Msgtype = "S";
                        _out.Receivedtime = DateTime.Now;
                        _out.Receiver = "CUSTOMER";
                        //_out.Receiverphno = _info.Mmi_mobi_no;

                        if (_mobilNo.Length == 10)
                        {
                            _out.Receiverphno = "+94" + _mobilNo.Substring(1, 9);
                            _out.Senderphno = "+94" + _mobilNo.Substring(1, 9);
                        }
                        if (_mobilNo.Length == 9)
                        {
                            _out.Receiverphno = "+94" + _mobilNo;
                            _out.Senderphno = "+94" + _mobilNo;
                        }

                        _out.Refdocno = _UpdateRec.Sar_receipt_no;
                        _out.Sender = _UpdateRec.Sar_mod_by;
                        _out.Createtime = DateTime.Now;
                        _generalDAL.SaveSMSOut(_out);
                    }
                }


                //_salesDAL.ConnectionClose();
                //_inventoryRepDAL.ConnectionClose();
                //_generalDAL.ConnectionClose();
                //_fmsInventoryDal.ConnectionClose();
                _salesDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();
                _generalDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();
                _inventoryDAL.TransactionCommit();

                if (_effects == 1)
                {
                    _effects = 1;

                }
                else
                {
                    _effects = 0;
                }

            }
            catch (Exception err)
            {
                _effects = -1;
                _refNo = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                _inventoryDAL.TransactionRollback();
            }

            return _effects;
        }

        public Int16 ReceiptCancelProcessTBS(RecieptHeaderTBS _UpdateRec, List<RecieptItemTBS> _recItem, List<VehicalRegistration> _regList, List<VehicleInsuarance> _insList, List<GiftVoucherPages> _gvlist, List<ReceiptItemDetails> _itmDet)
        {
            Int16 _effects = 0;
            string _invNo = "";
            string _refNo = "";
            _salesDAL = new SalesDAL();
            _inventoryRepDAL = new ReptCommonDAL();
            _generalDAL = new GeneralDAL();
            _fmsInventoryDal = new FMS_InventoryDAL();
            _inventoryDAL = new InventoryDAL();//Added by Prabhath on 12/12/2013 -- because reveres reservation, inventory function written in inventoryDAL :D Not in salesDAL

            List<string> _invNoList = new List<string>();

            try// using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen(); _salesDAL.BeginTransaction();
                _inventoryRepDAL.ConnectionOpen(); _inventoryRepDAL.BeginTransaction();
                _generalDAL.ConnectionOpen(); _generalDAL.BeginTransaction();
                _fmsInventoryDal.ConnectionOpen(); _fmsInventoryDal.BeginTransaction();
                _inventoryDAL.ConnectionOpen(); _inventoryDAL.BeginTransaction();

                _effects = _salesDAL.UpdateRecStatusTBS(_UpdateRec.Sir_receipt_no, _UpdateRec.Sir_act, _UpdateRec.Sir_com_cd, _UpdateRec.Sir_profit_center_cd, _UpdateRec.Sir_mod_by);

                if (_UpdateRec.Sir_receipt_type == "DEBT")
                {

                    // get invoice numbers
                    var _lst = (from n in _recItem
                                group n by new { n.Sird_inv_no } into r
                                select new { Sird_inv_no = r.Key.Sird_inv_no }).ToList();

                    decimal _Balance = 0;
                    decimal _commAmt = 0;
                    decimal _wkNo = 0;
                    decimal _minCommAllow = 0;

                    foreach (var s in _lst)
                    {
                        if (_UpdateRec.Sir_is_oth_shop == true)
                            _Balance = _salesDAL.GetOutInvAmtTBS(_UpdateRec.Sir_com_cd, _UpdateRec.Sir_oth_sr, _UpdateRec.Sir_debtor_cd, s.Sird_inv_no);
                        else
                            _Balance = _salesDAL.GetOutInvAmtTBS(_UpdateRec.Sir_com_cd, _UpdateRec.Sir_profit_center_cd, _UpdateRec.Sir_debtor_cd, s.Sird_inv_no);
                        HpSystemParameters _getSystemParameter = _salesDAL.GetSystemParameter("COM", _UpdateRec.Sir_com_cd, "CRCOMMINAW", _UpdateRec.Sir_receipt_date);

                        if (_getSystemParameter.Hsy_cd != null)
                        {
                            _minCommAllow = _getSystemParameter.Hsy_val;
                        }
                        else
                        {
                            _minCommAllow = 0;
                        }


                        if (_Balance <= _minCommAllow)
                        {
                            //  _invNoList.Add(s.Sard_inv_no);
                            //get commission amount
                            _commAmt = _salesDAL.GetFinalCreditCommission(s.Sird_inv_no);
                            //save GNT_REM_SUM 
                            RemitanceSummaryDetail _remDet = new RemitanceSummaryDetail();
                            _remDet.Rem_com = _UpdateRec.Sir_com_cd;
                            if (_UpdateRec.Sir_is_oth_shop == true)
                                _remDet.Rem_pc = _UpdateRec.Sir_oth_sr;
                            else
                                _remDet.Rem_pc = _UpdateRec.Sir_profit_center_cd;
                            _remDet.Rem_dt = _UpdateRec.Sir_receipt_date;
                            _remDet.Rem_sec = "02";
                            _remDet.Rem_cd = "005";
                            _remDet.Rem_sh_desc = "Group sale comm";
                            _remDet.Rem_lg_desc = "GROUP SALE COMM";
                            _remDet.Rem_val = _commAmt * -1;
                            _remDet.Rem_val_final = _commAmt * -1;
                            int _weekNo = _generalDAL.GetWeek(Convert.ToDateTime(_UpdateRec.Sir_receipt_date).Date, out _wkNo, _UpdateRec.Sir_com_cd);
                            _remDet.Rem_week = _wkNo + "S";
                            _remDet.Rem_ref_no = _UpdateRec.Sir_receipt_no;
                            _remDet.Rem_rmk = s.Sird_inv_no;
                            _remDet.Rem_cr_acc = null;
                            _remDet.Rem_db_acc = null;
                            _remDet.Rem_del_alw = false;
                            _remDet.Rem_cre_by = _UpdateRec.Sir_mod_by;
                            _remDet.Rem_cre_dt = _UpdateRec.Sir_receipt_date;
                            _remDet.Rem_is_sos = true;
                            _remDet.Rem_is_dayend = true;
                            _remDet.Rem_is_sun = true;
                            _remDet.Rem_cat = 17;
                            _remDet.Rem_add = 0;
                            _remDet.Rem_ded = 0;
                            _remDet.Rem_net = _commAmt * -1;
                            _remDet.Rem_epf = 0;
                            _remDet.Rem_esd = 0;
                            _remDet.Rem_wht = 0;
                            _remDet.Rem_add_fin = 0;
                            _remDet.Rem_ded_fin = 0;
                            _remDet.Rem_net_fin = _commAmt * -1;
                            _remDet.Rem_rmk_fin = s.Sird_inv_no;
                            _remDet.Rem_bnk_cd = null;
                            _remDet.Rem_is_rem_sum = true;
                            _salesDAL.SaveRemSummaryForFinalCreditComm(_remDet);
                        }
                    }

                    foreach (RecieptItemTBS rec in _recItem)
                    {
                        if (_UpdateRec.Sir_is_oth_shop == true)
                            _effects = _salesDAL.UpdateCancelInvoiceSettleAmtTBS(_UpdateRec.Sir_com_cd, _UpdateRec.Sir_oth_sr, _UpdateRec.Sir_debtor_cd, rec.Sird_inv_no, rec.Sird_settle_amt);
                        else
                            _effects = _salesDAL.UpdateCancelInvoiceSettleAmtTBS(_UpdateRec.Sir_com_cd, _UpdateRec.Sir_profit_center_cd, _UpdateRec.Sir_debtor_cd, rec.Sird_inv_no, rec.Sird_settle_amt);
                    }

                }
                else if (_UpdateRec.Sir_receipt_type == "VHREG")
                {
                    //update registration details and release reservation if reserve item
                    if (_regList != null)
                    {
                        ////Added by Prabhath on 14/12/2013 **** start *****
                        //var _invoice = _recItem.Select(x => x.Sard_inv_no).Distinct().ToList();
                        //foreach (string _no in _invoice)
                        //{
                        //    List<ReptPickSerials> _ser = _inventoryRepDAL.GetInvoiceAdvanceReceiptSerial(_UpdateRec.Sar_com_cd, _no);
                        //    if (_ser != null && _ser.Count > 0)
                        //        foreach (ReptPickSerials _s in _ser)
                        //            _inventoryDAL.UpdateLocationResRevers(_s.Tus_com, _s.Tus_loc, _s.Tus_itm_cd, _s.Tus_itm_stus, _s.Tus_cre_by, _s.Tus_qty);
                        //}
                        ////Added by Prabhath on 14/12/2013 **** end *****

                        foreach (VehicalRegistration reg in _regList)
                        {
                            _salesDAL.UpdateRegTxn(reg.P_svrt_com, reg.P_svrt_pc, reg.P_svrt_inv_no, reg.P_srvt_ref_no, reg.P_srvt_itm_cd, reg.P_svrt_engine, reg.P_svrt_chassis, 2);
                            _inventoryRepDAL.DeleteResSerial(reg.P_svrt_inv_no, reg.P_svrt_com, reg.P_srvt_itm_cd, reg.P_svrt_engine, reg.P_svrt_chassis);
                            _salesDAL.UpdateRegResAvailability(reg.P_svrt_com, reg.P_srvt_itm_cd, reg.P_svrt_engine, reg.P_svrt_chassis, 1);
                            _invNo = reg.P_svrt_inv_no;

                            List<ReptPickSerials> tempSer = new List<ReptPickSerials>();
                            tempSer = _inventoryRepDAL.Get_TEMP_PICK_SER_BY_BASEDOC(_UpdateRec.Sir_com_cd, _invNo);

                            if (tempSer == null)
                            {
                                _inventoryRepDAL.DeleteResHdr(_UpdateRec.Sir_com_cd, _invNo);
                            }
                        }
                    }

                    //if (_regList != null)
                    //{
                    //    List<ReptPickSerials> tempSer = new List<ReptPickSerials>();
                    //    tempSer = _inventoryRepDAL.Get_TEMP_PICK_SER_BY_BASEDOC(_UpdateRec.Sar_com_cd, _invNo);

                    //    if (tempSer == null)
                    //    {
                    //        _inventoryRepDAL.DeleteResHdr(_UpdateRec.Sar_com_cd, _invNo);
                    //    }
                    //}
                }
                else if (_UpdateRec.Sir_receipt_type == "VHINS")
                {
                    if (_insList != null)
                    {
                        ////Added by Prabhath on 14/12/2013 **** start *****
                        //var _invoice = _recItem.Select(x => x.Sard_inv_no).Distinct().ToList();
                        //foreach (string _no in _invoice)
                        //{
                        //    List<ReptPickSerials> _ser = _inventoryRepDAL.GetInvoiceAdvanceReceiptSerial(_UpdateRec.Sar_com_cd, _UpdateRec.Sar_receipt_no);
                        //    if (_ser != null && _ser.Count > 0)
                        //        foreach (ReptPickSerials _s in _ser)
                        //            _inventoryDAL.UpdateLocationResRevers(_s.Tus_com, _s.Tus_loc, _s.Tus_itm_cd, _s.Tus_itm_stus, _s.Tus_cre_by, _s.Tus_qty);
                        //}
                        ////Added by Prabhath on 14/12/2013 **** end *****
                        foreach (VehicleInsuarance ins in _insList)
                        {
                            _salesDAL.UpdateInsTxnCan(ins.Svit_com, ins.Svit_pc, ins.Svit_inv_no, ins.Svit_ref_no, ins.Svit_itm_cd, ins.Svit_engine, ins.Svit_chassis, 2);
                            _inventoryRepDAL.DeleteResSerial(ins.Svit_inv_no, ins.Svit_com, ins.Svit_itm_cd, ins.Svit_engine, ins.Svit_chassis);
                            _salesDAL.UpdateRegResAvailability(ins.Svit_com, ins.Svit_itm_cd, ins.Svit_engine, ins.Svit_chassis, 1);
                            _invNo = ins.Svit_inv_no;

                            InvoiceHeaderTBS _tmpInv = new InvoiceHeaderTBS();
                            _tmpInv = _salesDAL.GetInvoiceHeaderTBS(_invNo);

                            if (_tmpInv != null)
                            {
                                if (_tmpInv.Sih_inv_no != null)
                                {
                                    _salesDAL.UpdateHPSheduleInsuCancel(_tmpInv.Sih_acc_no, _UpdateRec.Sir_mod_by);
                                }
                            }

                            List<ReptPickSerials> tempSer = new List<ReptPickSerials>();
                            tempSer = _inventoryRepDAL.Get_TEMP_PICK_SER_BY_BASEDOC(_UpdateRec.Sir_com_cd, _invNo);

                            if (tempSer == null)
                            {
                                _inventoryRepDAL.DeleteResHdr(_UpdateRec.Sir_com_cd, _invNo);
                            }
                        }
                    }
                }
                else if (_UpdateRec.Sir_receipt_type == "ADINS")
                {
                    if (_insList != null)
                    {
                        foreach (VehicleInsuarance ins in _insList)
                        {
                            _salesDAL.UpdateInsTxnCan(ins.Svit_com, ins.Svit_pc, ins.Svit_inv_no, ins.Svit_ref_no, ins.Svit_itm_cd, ins.Svit_engine, ins.Svit_chassis, 2);
                        }
                    }
                }
                else if (_UpdateRec.Sir_receipt_type == "GVISU")
                {
                    foreach (GiftVoucherPages _tmpGv in _gvlist)
                    {
                        _tmpGv.Gvp_mod_by = _UpdateRec.Sir_mod_by;
                        _tmpGv.Gvp_stus = "C";
                        _tmpGv.Gvp_cus_cd = null;
                        _tmpGv.Gvp_cus_name = null;
                        _tmpGv.Gvp_cus_add1 = null;
                        _tmpGv.Gvp_cus_add2 = null;
                        _tmpGv.Gvp_cus_mob = null;
                        _tmpGv.Gvp_issue_by = null;
                        _tmpGv.Gvp_amt = _tmpGv.Gvp_amt;
                        _tmpGv.Gvp_valid_to = _UpdateRec.Sir_receipt_date;

                        _fmsInventoryDal.UpdateGiftVoucherByReceipt(_tmpGv);
                    }
                }
                else if (_UpdateRec.Sir_receipt_type == "ADVAN")
                {
                    if (_itmDet != null)
                    {
                        //Added by Prabhath on 14/12/2013 **** start *****
                        List<ReptPickSerials> _ser = _inventoryRepDAL.GetInvoiceAdvanceReceiptSerial(_UpdateRec.Sir_com_cd, _UpdateRec.Sir_receipt_no);
                        if (_ser != null && _ser.Count > 0)
                            foreach (ReptPickSerials _s in _ser)
                                _inventoryDAL.UpdateLocationResRevers(_s.Tus_com, _s.Tus_loc, _s.Tus_itm_cd, _s.Tus_itm_stus, _s.Tus_cre_by, _s.Tus_qty);
                        //Added by Prabhath on 14/12/2013 **** end *****

                        foreach (ReceiptItemDetails res in _itmDet)
                        {
                            _inventoryRepDAL.DeleteResSerial(res.Sari_rec_no, _UpdateRec.Sir_com_cd, res.Sari_item, res.Sari_serial, res.Sari_serial_1);
                            _salesDAL.UpdateRegResAvailability(_UpdateRec.Sir_com_cd, res.Sari_item, res.Sari_serial, res.Sari_serial_1, 1);
                            _invNo = res.Sari_rec_no;

                            List<ReptPickSerials> tempSer = new List<ReptPickSerials>();
                            tempSer = _inventoryRepDAL.Get_TEMP_PICK_SER_BY_BASEDOC(_UpdateRec.Sir_com_cd, _invNo);

                            if (tempSer == null)
                            {
                                _inventoryRepDAL.DeleteResHdr(_UpdateRec.Sir_com_cd, _invNo);
                            }
                        }
                    }
                }

                string _mobilNo = "";
                string _cusName = "";
                string _Newmg = "";
                string _recTp = "";
                decimal _recAmt = 0;
                //_cusdet = _salesDAL.GetActiveCustomerDetailList(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_debtor_cd, null, null, "C");
                //foreach (MasterBusinessEntity _cus in _cusdet)
                //{
                _mobilNo = _UpdateRec.Sir_mob_no;
                _cusName = _UpdateRec.Sir_debtor_name;
                _recAmt = _UpdateRec.Sir_tot_settle_amt;

                if (!string.IsNullOrEmpty(_mobilNo))
                {

                    if (_mobilNo.Length >= 9)
                    {

                        if (_UpdateRec.Sir_receipt_type == "ADVAN")
                        {
                            _recTp = "Advance payment";
                        }
                        else if (_UpdateRec.Sir_receipt_type == "GVISU")
                        {
                            _recTp = "Gift voucher purchase";
                        }
                        else if (_UpdateRec.Sir_receipt_type == "DEBT")
                        {
                            _recTp = "Credit sale settlement";
                        }
                        else if (_UpdateRec.Sir_receipt_type == "VHINS")
                        {
                            _recTp = "Vechicle insuarance";
                        }
                        else if (_UpdateRec.Sir_receipt_type == "VHREG")
                        {
                            _recTp = "Vechicle registration";
                        }
                        else
                        {
                            _recTp = "";
                        }


                        string _pcName = "";
                        DataTable dt = _generalDAL.CheckProfitCenter(_UpdateRec.Sir_com_cd, _UpdateRec.Sir_profit_center_cd);
                        if (dt.Rows.Count > 0)
                        {
                            _pcName = Convert.ToString(dt.Rows[0]["mpc_desc"]);
                        }

                        _Newmg = "The payment of LKR " + _recAmt + " received to the " + _pcName + " for " + _recTp + ",R/N " + _UpdateRec.Sir_receipt_no + " is cancelled.";// "Thank u for the purchased items on HP A/C: " + _AccountNo + " @ " + _pcName + " S/R. HP value Rs.: " + _HPAccount.Hpa_hp_val + " and " + _smsInsu + " Rs.: " + _insuAmt + "-" + _generalDAL.GetHPCustContactPhoneNo();
                        OutSMS _out = new OutSMS();
                        _out.Msg = _Newmg;
                        _out.Msgstatus = 0;
                        _out.Msgtype = "S";
                        _out.Receivedtime = DateTime.Now;
                        _out.Receiver = "CUSTOMER";
                        //_out.Receiverphno = _info.Mmi_mobi_no;

                        if (_mobilNo.Length == 10)
                        {
                            _out.Receiverphno = "+94" + _mobilNo.Substring(1, 9);
                            _out.Senderphno = "+94" + _mobilNo.Substring(1, 9);
                        }
                        if (_mobilNo.Length == 9)
                        {
                            _out.Receiverphno = "+94" + _mobilNo;
                            _out.Senderphno = "+94" + _mobilNo;
                        }

                        _out.Refdocno = _UpdateRec.Sir_receipt_no;
                        _out.Sender = _UpdateRec.Sir_mod_by;
                        _out.Createtime = DateTime.Now;
                        _generalDAL.SaveSMSOut(_out);
                    }
                }


                //_salesDAL.ConnectionClose();
                //_inventoryRepDAL.ConnectionClose();
                //_generalDAL.ConnectionClose();
                //_fmsInventoryDal.ConnectionClose();
                _salesDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();
                _generalDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();
                _inventoryDAL.TransactionCommit();

                if (_effects == 1)
                {
                    _effects = 1;

                }
                else
                {
                    _effects = 0;
                }

            }
            catch (Exception err)
            {
                _effects = -1;
                _refNo = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                _inventoryDAL.TransactionRollback();
            }

            return _effects;
        }

        public Int16 UpdateQuotationReserve(string _com, string _loc, string _QutNo, string _itm, string _Ser, string _newSer, string _newser2, out string _errmsg)
        {
            Int16 _effects = 0;
            _errmsg = "";
            _salesDAL = new SalesDAL();

            try
            {
                _salesDAL.ConnectionOpen(); _salesDAL.BeginTransaction();

                //update quo_ser
                //inv_item_serial_details set reserved=1 , delete from > inv_document_serials 
                // inv_location_inventory_header set free_qty=free_qty+1 , reserved_qty=reserved_qty- 1
                _salesDAL.UpdateDispatchReservation("", _com, _loc, _QutNo, _itm, _Ser, _newSer, _newser2);

            }
            catch (Exception err)
            {
                _effects = -1;
                _errmsg = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();
            }

            return _effects;
        }
        public Int16 QuotationCancelProcess(string _com, string _pc, string _QutNo, string _jobno, string _whcode, string _user, string _sess, out string _errmsg)
        {
            Int16 _effects = 0;
            _errmsg = "";
            _salesDAL = new SalesDAL();
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryDAL = new InventoryDAL();

            try
            {
                _salesDAL.ConnectionOpen(); _salesDAL.BeginTransaction();
                _inventoryRepDAL.ConnectionOpen(); _inventoryRepDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen(); _inventoryDAL.BeginTransaction();

                QuotationHeader _qutHdr = new QuotationHeader();
                _qutHdr = Get_Quotation_HDR(_QutNo);
                _salesDAL.ConnectionOpen();
                if (_qutHdr.Qh_anal_5 == 1)
                {
                    List<QuotationSerial> _QuoSerials = new List<QuotationSerial>();
                    _QuoSerials = _salesDAL.GetQuoSerials(_QutNo);

                    List<ReptPickSerials> _ser = _inventoryRepDAL.GetInvoiceAdvanceReceiptSerial(_com, _QutNo);
                    if (_ser != null && _ser.Count > 0)
                        _inventoryRepDAL.DeleteTempPickObjs(_ser[0].Tus_usrseq_no);
                    foreach (ReptPickSerials _s in _ser)
                        if (_s.Tus_ser_1 != "N/A")
                        {
                            _inventoryDAL.UpdateLocationResRevers(_s.Tus_com, _s.Tus_loc, _s.Tus_itm_cd, _s.Tus_itm_stus, _s.Tus_cre_by, _s.Tus_qty);
                        }




                    foreach (QuotationSerial _tmp in _QuoSerials)
                    {
                        _inventoryRepDAL.DeleteResSerial(_QutNo, _com, _tmp.Qs_item, _tmp.Qs_ser, _tmp.Qs_chassis);
                        _salesDAL.UpdateRegResAvailability(_com, _tmp.Qs_item, _tmp.Qs_ser, _tmp.Qs_chassis, 1);
                    }

                    List<ReptPickSerials> tempSer = new List<ReptPickSerials>();
                    tempSer = _inventoryRepDAL.Get_TEMP_PICK_SER_BY_BASEDOC(_com, _QutNo);
                    if (tempSer == null)
                    {
                        _inventoryRepDAL.DeleteResHdr(_com, _QutNo);
                    }
                }

                //kapila 2/8/2016
                if (_jobno == "W/H RESERVE")
                {
                    //cancel from  > int_req
                    InventoryRequest _inventoryRequest = new InventoryRequest();
                    _inventoryRequest.Itr_com = _com;
                    _inventoryRequest.Itr_loc = _pc;
                    _inventoryRequest.Itr_ref = _QutNo;
                    _inventoryRequest.Itr_stus = "C";
                    _inventoryRequest.Itr_mod_by = _user;
                    _inventoryRequest.Itr_session_id = _sess;

                    _inventoryDAL.UpdateInventoryRequestStusByRef(_inventoryRequest);

                    //cancel from > inv_dispatch_request , inv_dispatch_warehouse_header ,inv_item_serial_details set reserved=0 , 
                    // delete from > inv_document_serials / inv_location_inventory_header set free_qty=free_qty+1 , reserved_qty=reserved_qty- 1
                    _inventoryDAL.UpdateDispatchRequestStatus(_inventoryRequest.Itr_com, _whcode, _QutNo);

                }

                Int32 _eff = _salesDAL.Update_Quotation_HDR_status(_QutNo, "C");

                _salesDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();

                if (_effects == 1)
                    _effects = 1;

                else
                    _effects = 0;
            }
            catch (Exception err)
            {
                _effects = -1;
                _errmsg = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
            }

            return _effects;

        }

        public Int16 ReceiptCancelInfo(RecieptHeader _UpdateRec, List<VehicalRegistration> _vehReg, List<VehicleInsuarance> _vehIns)
        {
            _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen();
            string _itmDetails = "";
            string _invNo = "";
            string _contact = "";
            string _customer = "";
            string _distric = "";
            string _province = "";
            string _cusAdd = "";
            Int16 _effects = 0;

            if (_UpdateRec.Sar_receipt_type == "VHINS")
            {
                //save vehicle insuarance details
                if (_vehIns != null)
                {
                    foreach (VehicleInsuarance _insu in _vehIns)
                    {
                        if (_itmDetails == "")
                        {
                            _itmDetails = " Engine & chassis :" + _insu.Svit_engine + "," + _insu.Svit_chassis;
                        }
                        else
                        {
                            _itmDetails = "," + _itmDetails + _insu.Svit_engine + "," + _insu.Svit_chassis;
                        }


                        if (_invNo == "")
                        {
                            _invNo = " Inv # :" + _insu.Svit_inv_no;
                        }

                        _contact = _insu.Svit_contact;
                    }


                }
                //send SMS 
                List<MsgInformation> _msg = _generalDAL.GetMsgInformation(_UpdateRec.Sar_com_cd, _UpdateRec.Sar_profit_center_cd, _UpdateRec.Sar_receipt_type);

                if (_msg != null)
                    if (_msg.Count > 0)
                    {
                        foreach (MsgInformation _info in _msg)
                        {
                            string _mg = "Insuarance receipt cancelled. Rec. # " + _UpdateRec.Sar_receipt_no + _invNo + _itmDetails + " - SCM2 -";
                            OutSMS _out = new OutSMS();
                            _out.Msg = _mg;
                            _out.Msgstatus = 0;
                            _out.Msgtype = _info.Mmi_msg_tp;
                            _out.Receivedtime = DateTime.Now;
                            _out.Receiver = _info.Mmi_receiver;
                            _out.Receiverphno = _info.Mmi_mobi_no;
                            _out.Refdocno = _UpdateRec.Sar_receipt_no;
                            _out.Sender = _UpdateRec.Sar_create_by;
                            _out.Createtime = DateTime.Now;
                            _generalDAL.SaveSMSOut(_out);

                        }
                    }

                _customer = _UpdateRec.Sar_debtor_cd + "-" + _UpdateRec.Sar_debtor_name;
                _distric = _UpdateRec.Sar_anal_1;
                _province = _UpdateRec.Sar_anal_2;
                _cusAdd = _UpdateRec.Sar_debtor_add_1 + "," + _UpdateRec.Sar_debtor_add_2;


                //send mail
                List<MsgInformation> _mail = _generalDAL.GetMsgInformation(_UpdateRec.Sar_com_cd, null, _UpdateRec.Sar_receipt_type);
                if (_mail != null)
                    if (_mail.Count > 0)
                    {
                        foreach (MsgInformation _info in _mail)
                        {
                            SmtpClient smtpClient = new SmtpClient();
                            MailMessage message = new MailMessage();

                            MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                            smtpClient.Host = _generalDAL.GetMailHost();
                            smtpClient.Port = 25;
                            message.From = fromAddress;

                            string _email = "";

                            _email = "Dear Sir/Madam, \n\n" + _email;
                            _email += "Insuarance receipt cancelled for the profit center :" + _UpdateRec.Sar_profit_center_cd + " \n";
                            _email += "\n  Receipt # : " + _UpdateRec.Sar_receipt_no + "\n";
                            _email += "\n " + _invNo + "\n";
                            _email += "\n  Customer : " + _customer + "\n";
                            _email += "\n  Address : " + _cusAdd + "\n";
                            _email += "\n  contact # : " + _contact + "\n";
                            _email += "\n  District : " + _distric + "\n";
                            _email += "\n  Province : " + _province + "\n";

                            foreach (VehicleInsuarance _insu in _vehIns)
                            {
                                _itmDetails = "";
                                _itmDetails = "Item & Model : " + _insu.Svit_itm_cd + "-" + _insu.Svit_model + " -  Engine & chassis :" + _insu.Svit_engine + " / " + _insu.Svit_chassis;
                                _email += "\n " + _itmDetails + " \n";
                            }



                            _email += _generalDAL.GetMailFooterMsg();

                            message.To.Add(_info.Mmi_email);
                            message.Subject = "Vehicle Insuarance Receipt Cancellation";
                            //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                            //message.Bcc.Add(new MailAddress(""));
                            message.IsBodyHtml = false;
                            message.Body = _email;
                            message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                            // Send SMTP mail
                            smtpClient.Send(message);
                        }
                    }


            }
            else if (_UpdateRec.Sar_receipt_type == "VHREG")
            {
                //save vehicle registration details
                if (_vehReg != null)
                {
                    foreach (VehicalRegistration _vehList in _vehReg)
                    {

                        if (_itmDetails == "")
                        {
                            _itmDetails = " Engine & chassis :" + _vehList.P_svrt_engine + "," + _vehList.P_svrt_chassis;
                        }
                        else
                        {
                            _itmDetails = "," + _itmDetails + _vehList.P_svrt_engine + "," + _vehList.P_svrt_chassis;
                        }


                        if (_invNo == "")
                        {
                            _invNo = " Inv # :" + _vehList.P_svrt_inv_no;
                        }

                        _contact = _vehList.P_svrt_contact;
                    }
                }

                //send SMS 
                List<MsgInformation> _msg = _generalDAL.GetMsgInformation(_UpdateRec.Sar_com_cd, _UpdateRec.Sar_profit_center_cd, _UpdateRec.Sar_receipt_type);

                if (_msg != null)
                    if (_msg.Count > 0)
                    {
                        foreach (MsgInformation _info in _msg)
                        {
                            string _mg = "Vehicle registration receipt cancelled. Rec. # " + _UpdateRec.Sar_receipt_no + _invNo + _itmDetails + " - SCM2 -";
                            OutSMS _out = new OutSMS();
                            _out.Msg = _mg;
                            _out.Msgstatus = 0;
                            _out.Msgtype = _info.Mmi_msg_tp;
                            _out.Receivedtime = DateTime.Now;
                            _out.Receiver = _info.Mmi_receiver;
                            _out.Receiverphno = _info.Mmi_mobi_no;
                            _out.Refdocno = _UpdateRec.Sar_receipt_no;
                            _out.Sender = _UpdateRec.Sar_create_by;
                            _out.Createtime = DateTime.Now;
                            _generalDAL.SaveSMSOut(_out);

                        }
                    }

                _customer = _UpdateRec.Sar_debtor_cd + "-" + _UpdateRec.Sar_debtor_name;
                _distric = _UpdateRec.Sar_anal_1;
                _province = _UpdateRec.Sar_anal_2;
                _cusAdd = _UpdateRec.Sar_debtor_add_1 + "," + _UpdateRec.Sar_debtor_add_2;


                //send mail
                List<MsgInformation> _mail = _generalDAL.GetMsgInformation(_UpdateRec.Sar_com_cd, null, _UpdateRec.Sar_receipt_type);
                if (_mail != null)
                    if (_mail.Count > 0)
                    {
                        foreach (MsgInformation _info in _mail)
                        {
                            SmtpClient smtpClient = new SmtpClient();
                            MailMessage message = new MailMessage();

                            MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                            smtpClient.Host = _generalDAL.GetMailHost();
                            smtpClient.Port = 25;
                            message.From = fromAddress;

                            string _email = "";

                            _email = "Dear Sir/Madam, \n\n" + _email;
                            _email += "Vehicle registration receipt cancelled for the profit center :" + _UpdateRec.Sar_profit_center_cd + " \n";
                            _email += "\n  Receipt # : " + _UpdateRec.Sar_receipt_no + "\n";
                            _email += "\n " + _invNo + "\n";
                            _email += "\n  Customer : " + _customer + "\n";
                            _email += "\n  Address : " + _cusAdd + "\n";
                            _email += "\n  contact # : " + _contact + "\n";
                            _email += "\n  District : " + _distric + "\n";
                            _email += "\n  Province : " + _province + "\n";

                            foreach (VehicalRegistration _reg in _vehReg)
                            {
                                _itmDetails = "";
                                _itmDetails = "Item & Model : " + _reg.P_srvt_itm_cd + "-" + _reg.P_svrt_model + " -  Engine & chassis :" + _reg.P_svrt_engine + " / " + _reg.P_svrt_chassis;
                                _email += "\n " + _itmDetails + " \n";
                            }



                            _email += _generalDAL.GetMailFooterMsg();

                            message.To.Add(_info.Mmi_email);
                            message.Subject = "Vehicle Registration Receipt Cancellation";
                            //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                            //message.Bcc.Add(new MailAddress(""));
                            message.IsBodyHtml = false;
                            message.Body = _email;
                            message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                            // Send SMTP mail
                            smtpClient.Send(message);
                        }
                    }
            }
            _generalDAL.ConnectionClose();
            _effects = 1;
            return _effects;
        }

        public Int16 ReceiptCancelInfoTBS(RecieptHeaderTBS _UpdateRec, List<VehicalRegistration> _vehReg, List<VehicleInsuarance> _vehIns)
        {
            _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen();
            string _itmDetails = "";
            string _invNo = "";
            string _contact = "";
            string _customer = "";
            string _distric = "";
            string _province = "";
            string _cusAdd = "";
            Int16 _effects = 0;

            if (_UpdateRec.Sir_receipt_type == "VHINS")
            {
                //save vehicle insuarance details
                if (_vehIns != null)
                {
                    foreach (VehicleInsuarance _insu in _vehIns)
                    {
                        if (_itmDetails == "")
                        {
                            _itmDetails = " Engine & chassis :" + _insu.Svit_engine + "," + _insu.Svit_chassis;
                        }
                        else
                        {
                            _itmDetails = "," + _itmDetails + _insu.Svit_engine + "," + _insu.Svit_chassis;
                        }


                        if (_invNo == "")
                        {
                            _invNo = " Inv # :" + _insu.Svit_inv_no;
                        }

                        _contact = _insu.Svit_contact;
                    }


                }
                //send SMS 
                List<MsgInformation> _msg = _generalDAL.GetMsgInformation(_UpdateRec.Sir_com_cd, _UpdateRec.Sir_profit_center_cd, _UpdateRec.Sir_receipt_type);

                if (_msg != null)
                    if (_msg.Count > 0)
                    {
                        foreach (MsgInformation _info in _msg)
                        {
                            string _mg = "Insuarance receipt cancelled. Rec. # " + _UpdateRec.Sir_receipt_no + _invNo + _itmDetails + " - SCM2 -";
                            OutSMS _out = new OutSMS();
                            _out.Msg = _mg;
                            _out.Msgstatus = 0;
                            _out.Msgtype = _info.Mmi_msg_tp;
                            _out.Receivedtime = DateTime.Now;
                            _out.Receiver = _info.Mmi_receiver;
                            _out.Receiverphno = _info.Mmi_mobi_no;
                            _out.Refdocno = _UpdateRec.Sir_receipt_no;
                            _out.Sender = _UpdateRec.Sir_create_by;
                            _out.Createtime = DateTime.Now;
                            _generalDAL.SaveSMSOut(_out);

                        }
                    }

                _customer = _UpdateRec.Sir_debtor_cd + "-" + _UpdateRec.Sir_debtor_name;
                _distric = _UpdateRec.Sir_anal_1;
                _province = _UpdateRec.Sir_anal_2;
                _cusAdd = _UpdateRec.Sir_debtor_add_1 + "," + _UpdateRec.Sir_debtor_add_2;


                //send mail
                List<MsgInformation> _mail = _generalDAL.GetMsgInformation(_UpdateRec.Sir_com_cd, null, _UpdateRec.Sir_receipt_type);
                if (_mail != null)
                    if (_mail.Count > 0)
                    {
                        foreach (MsgInformation _info in _mail)
                        {
                            SmtpClient smtpClient = new SmtpClient();
                            MailMessage message = new MailMessage();

                            MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                            smtpClient.Host = _generalDAL.GetMailHost();
                            smtpClient.Port = 25;
                            message.From = fromAddress;

                            string _email = "";

                            _email = "Dear Sir/Madam, \n\n" + _email;
                            _email += "Insuarance receipt cancelled for the profit center :" + _UpdateRec.Sir_profit_center_cd + " \n";
                            _email += "\n  Receipt # : " + _UpdateRec.Sir_receipt_no + "\n";
                            _email += "\n " + _invNo + "\n";
                            _email += "\n  Customer : " + _customer + "\n";
                            _email += "\n  Address : " + _cusAdd + "\n";
                            _email += "\n  contact # : " + _contact + "\n";
                            _email += "\n  District : " + _distric + "\n";
                            _email += "\n  Province : " + _province + "\n";

                            foreach (VehicleInsuarance _insu in _vehIns)
                            {
                                _itmDetails = "";
                                _itmDetails = "Item & Model : " + _insu.Svit_itm_cd + "-" + _insu.Svit_model + " -  Engine & chassis :" + _insu.Svit_engine + " / " + _insu.Svit_chassis;
                                _email += "\n " + _itmDetails + " \n";
                            }



                            _email += _generalDAL.GetMailFooterMsg();

                            message.To.Add(_info.Mmi_email);
                            message.Subject = "Vehicle Insuarance Receipt Cancellation";
                            //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                            //message.Bcc.Add(new MailAddress(""));
                            message.IsBodyHtml = false;
                            message.Body = _email;
                            message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                            // Send SMTP mail
                            smtpClient.Send(message);
                        }
                    }


            }
            else if (_UpdateRec.Sir_receipt_type == "VHREG")
            {
                //save vehicle registration details
                if (_vehReg != null)
                {
                    foreach (VehicalRegistration _vehList in _vehReg)
                    {

                        if (_itmDetails == "")
                        {
                            _itmDetails = " Engine & chassis :" + _vehList.P_svrt_engine + "," + _vehList.P_svrt_chassis;
                        }
                        else
                        {
                            _itmDetails = "," + _itmDetails + _vehList.P_svrt_engine + "," + _vehList.P_svrt_chassis;
                        }


                        if (_invNo == "")
                        {
                            _invNo = " Inv # :" + _vehList.P_svrt_inv_no;
                        }

                        _contact = _vehList.P_svrt_contact;
                    }
                }

                //send SMS 
                List<MsgInformation> _msg = _generalDAL.GetMsgInformation(_UpdateRec.Sir_com_cd, _UpdateRec.Sir_profit_center_cd, _UpdateRec.Sir_receipt_type);

                if (_msg != null)
                    if (_msg.Count > 0)
                    {
                        foreach (MsgInformation _info in _msg)
                        {
                            string _mg = "Vehicle registration receipt cancelled. Rec. # " + _UpdateRec.Sir_receipt_no + _invNo + _itmDetails + " - SCM2 -";
                            OutSMS _out = new OutSMS();
                            _out.Msg = _mg;
                            _out.Msgstatus = 0;
                            _out.Msgtype = _info.Mmi_msg_tp;
                            _out.Receivedtime = DateTime.Now;
                            _out.Receiver = _info.Mmi_receiver;
                            _out.Receiverphno = _info.Mmi_mobi_no;
                            _out.Refdocno = _UpdateRec.Sir_receipt_no;
                            _out.Sender = _UpdateRec.Sir_create_by;
                            _out.Createtime = DateTime.Now;
                            _generalDAL.SaveSMSOut(_out);

                        }
                    }

                _customer = _UpdateRec.Sir_debtor_cd + "-" + _UpdateRec.Sir_debtor_name;
                _distric = _UpdateRec.Sir_anal_1;
                _province = _UpdateRec.Sir_anal_2;
                _cusAdd = _UpdateRec.Sir_debtor_add_1 + "," + _UpdateRec.Sir_debtor_add_2;


                //send mail
                List<MsgInformation> _mail = _generalDAL.GetMsgInformation(_UpdateRec.Sir_com_cd, null, _UpdateRec.Sir_receipt_type);
                if (_mail != null)
                    if (_mail.Count > 0)
                    {
                        foreach (MsgInformation _info in _mail)
                        {
                            SmtpClient smtpClient = new SmtpClient();
                            MailMessage message = new MailMessage();

                            MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                            smtpClient.Host = _generalDAL.GetMailHost();
                            smtpClient.Port = 25;
                            message.From = fromAddress;

                            string _email = "";

                            _email = "Dear Sir/Madam, \n\n" + _email;
                            _email += "Vehicle registration receipt cancelled for the profit center :" + _UpdateRec.Sir_profit_center_cd + " \n";
                            _email += "\n  Receipt # : " + _UpdateRec.Sir_receipt_no + "\n";
                            _email += "\n " + _invNo + "\n";
                            _email += "\n  Customer : " + _customer + "\n";
                            _email += "\n  Address : " + _cusAdd + "\n";
                            _email += "\n  contact # : " + _contact + "\n";
                            _email += "\n  District : " + _distric + "\n";
                            _email += "\n  Province : " + _province + "\n";

                            foreach (VehicalRegistration _reg in _vehReg)
                            {
                                _itmDetails = "";
                                _itmDetails = "Item & Model : " + _reg.P_srvt_itm_cd + "-" + _reg.P_svrt_model + " -  Engine & chassis :" + _reg.P_svrt_engine + " / " + _reg.P_svrt_chassis;
                                _email += "\n " + _itmDetails + " \n";
                            }



                            _email += _generalDAL.GetMailFooterMsg();

                            message.To.Add(_info.Mmi_email);
                            message.Subject = "Vehicle Registration Receipt Cancellation";
                            //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                            //message.Bcc.Add(new MailAddress(""));
                            message.IsBodyHtml = false;
                            message.Body = _email;
                            message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                            // Send SMTP mail
                            smtpClient.Send(message);
                        }
                    }
            }
            _generalDAL.ConnectionClose();
            _effects = 1;
            return _effects;
        }


        public DataTable Process_Hp_Closing_Bal(string _com, string _user, string _schTp, string _schCD, DateTime _asAT)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            DataTable clsBal = _salesDAL.Process_Hp_Closing_Bal(_com, _user, _schTp, _schCD, _asAT);
            _salesDAL.ConnectionClose();
            return clsBal;
        }

        public DataTable GetMonthlyDueWithAccountSummary(string _account)
        {
            _salesDAL = new SalesDAL();

            //DataTable _tbl1 = _salesDAL.GetMonthlyDue(_account);
            DataTable _tbl2 = _salesDAL.GetCustomerAccountBalance(_account);
            //_tbl2.Merge(_tbl1);
            //_tbl2.DefaultView.Sort = "Date ASC,Seq.no ASC";
            return _tbl2;
        }

        //Written By Prabhath on 22 01 2013
        public int SaveBlackListCustomer(BlackListCustomers _customer)
        {
            int _effect = -1;
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _effect = _salesDAL.SaveBlackListCustomer(_customer);
                _salesDAL.ConnectionClose();
                _tr.Complete();
            }
            return _effect;
        }

        //written by darshana on 23-01-2013
        public List<RequestApprovalHeader> getPendingReqbyType(string _com, string _pc, string _type, string _user, string _selectPC)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getPendingReqbyType(_com, _pc, _type, _user, _selectPC);
        }

        public int ReleaseBlackListCustomer(string _customer, string _company, string _profitcenter, string _isheadofficelevel)
        {

            int _effect = -1;
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _effect = _salesDAL.ReleaseBlackListCustomer(_customer, _company, _profitcenter, _isheadofficelevel);
                _salesDAL.ConnectionClose();
                if (_effect <= 0) _effect = -1; else _tr.Complete();
            }
            return _effect;

        }

        public SystemAppLevelParam CheckApprovePermission(string type, string user)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.CheckApprovePermission(type, user);
        }

        //written by darshana on 24/01/2013
        public List<InvoiceItem> GetInvoiceDetailsForReversal(string _inv, string _tp)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceDetailsForReversal(_inv, _tp);
        }

        //written by Chamal on 30/04/2014
        public List<InvoiceItem> GetInvoiceDetailsForIntrPRN(string _inv, string _tp, string _baseDoc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceDetailsForIntrPRN(_inv, _tp, _baseDoc);
        }

        //written by Chamal on 29/04/2013
        public List<InvoiceItem> GetInvoiceDetailsForReversalSCM(string _inv, string _tp, string _baseDoc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceDetailsForReversalSCM(_inv, _tp, _baseDoc);
        }

        //written by darshana on 29-01-2012
        public List<InvoiceItem> GetRevDetailsFromRequest(string _inv, string _tp, string _com, string _pc, string _reqNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRevDetailsFromRequest(_inv, _tp, _com, _pc, _reqNo);
        }

        //written by darshana - 29/01/2013 - save sales reversal request
        public Int32 SaveSaleRevReqApp(RequestApprovalHeader _AppHdr, List<RequestApprovalDetail> _AppDet, List<RequestApprovalSerials> _AppSer, MasterAutoNumber _AppReqAuto, RequestApprovalHeader _RegHdr, List<RequestApprovalDetail> _RegDet, List<RequestApprovalSerials> _RegSer, MasterAutoNumber _AppRegAuto, RequestApprovalHeaderLog _AppHdrLog, List<RequestApprovalDetailLog> _AppDetLog, List<RequestApprovalSerialsLog> _AppSerLog, RequestApprovalHeaderLog _RegHdrLog, List<RequestApprovalDetailLog> _RegDetLog, List<RequestApprovalSerialsLog> _RegSerLog, Boolean _isRegReq, RequestApprovalHeader _insHdr, List<RequestApprovalDetail> _insDet, List<RequestApprovalSerials> _insSer, MasterAutoNumber _AppinsAuto, RequestApprovalHeaderLog _insHdrLog, List<RequestApprovalDetailLog> _insDetLog, List<RequestApprovalSerialsLog> _insSerLog, Boolean _isinsReq, out string _docNo, out string _regReq, out string _insReq, List<RequestAppAddDet> _appAddDet)
        {
            Int32 _effect = 0;
            string _ReqNo = "";
            string _RegReqNo = "";
            string _insReqNo = "";
            Int32 _line = 0;

            try
            {
                _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen(); _generalDAL.BeginTransaction();
                _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen(); _inventoryDAL.BeginTransaction();

                //if (_AppSer != null)  //Commented As per the mail sent by Mr. Indrajith on 27 January 2018 2:58 PM 2018-09-13 Sanjeewa
                //{
                //    foreach (RequestApprovalSerials _ser in _AppSer)
                //    {
                //        if (!string.IsNullOrEmpty(_ser.Gras_anal3))
                //        {
                //            if (_ser.Gras_anal3.ToString().ToUpper() != "N/A")
                //            {
                //                List<Warr_Replacement_Det> _replList = _inventoryDAL.GetWarrReplDetails(_ser.Gras_anal2, _ser.Gras_anal3, "C");
                //                if (_replList != null && _replList.Count > 0)
                //                {
                //                    _docNo = "Warranty replacement found for \nitem code - " + _ser.Gras_anal2 + " | serial no - " + _ser.Gras_anal3 + "\nYou can't process this reversal!";
                //                    _effect = -1;
                //                    _regReq = "";
                //                    _insReq = "";
                //                    _generalDAL.TransactionRollback();
                //                    _inventoryDAL.TransactionRollback();
                //                    return _effect;
                //                }
                //            }
                //        }
                //    }
                //}


                //EDITED BY PRABHATH ON 13/03/2013
                string _ReqAppNo = _AppHdr.Grah_ref;
                if (string.IsNullOrEmpty(_AppHdr.Grah_ref))
                {
                    MasterAutoNumber ReqNoAuto = _inventoryDAL.GetAutoNumber(_AppReqAuto.Aut_moduleid, _AppReqAuto.Aut_direction, _AppReqAuto.Aut_start_char, _AppReqAuto.Aut_cate_tp, _AppReqAuto.Aut_cate_cd, _AppReqAuto.Aut_modify_dt, _AppReqAuto.Aut_year);
                    _ReqAppNo = ReqNoAuto.Aut_cate_cd + "-" + ReqNoAuto.Aut_start_char + "-" + ReqNoAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_AppReqAuto);
                }
                else
                    _inventoryDAL.DeleteAppReqTable(_ReqAppNo);


                _ReqNo = _ReqAppNo;
                _AppHdr.Grah_ref = _ReqAppNo;
                if (_AppHdrLog != null) _AppHdrLog.Grah_ref = _ReqAppNo;
                // _AppDet.Grad_ref = _ReqAppNo;

                _generalDAL.SaveRequestApproveHear(_AppHdr);
                if (_AppHdrLog != null) _generalDAL.SaveRequestApproveHear_Log(_AppHdrLog);

                _line = 0;
                if (_AppDet != null)
                {
                    foreach (RequestApprovalDetail _itm in _AppDet)
                    {
                        _line++;
                        _itm.Grad_ref = _ReqAppNo;
                        //_itm.Grad_line = _line;
                        _generalDAL.Save_RequestApprove_Det(_itm);

                    }
                }

                _line = 0;
                if (_AppDetLog != null)
                {
                    foreach (RequestApprovalDetailLog _itm in _AppDetLog)
                    {
                        _line++;
                        _itm.Grad_ref = _ReqAppNo;
                        _itm.Grad_line = _line;
                        _generalDAL.Save_RequestApprove_Det_Log(_itm);
                    }
                }

                if (_AppSer != null)
                {
                    foreach (RequestApprovalSerials _ser in _AppSer)
                    {
                        _ser.Gras_ref = _ReqAppNo;
                        _generalDAL.Save_RequestApprove_Ser(_ser);
                        _generalDAL.UpdateSerAppStus(_AppHdr.Grah_com, _ser.Gras_anal5, "A");
                    }
                }
                if (_AppSerLog != null)
                {
                    foreach (RequestApprovalSerialsLog _ser in _AppSerLog)
                    {
                        _ser.Gras_ref = _ReqAppNo;
                        _generalDAL.Save_RequestApprove_Serial_Log(_ser);
                    }
                }

                _line = 0;
                if (_appAddDet != null)
                {
                    foreach (RequestAppAddDet _tmp in _appAddDet)
                    {
                        RequestAppAddDetLog _tmpLog = new RequestAppAddDetLog();
                        _line++;
                        _tmp.Grad_line = _line;
                        _tmp.Grad_ref = _ReqAppNo;
                        _generalDAL.Save_RequestApprove_AddDet(_tmp);

                        _tmpLog.Grad_ref = _ReqAppNo;
                        _tmpLog.Grad_line = _line;
                        _tmpLog.Grad_anal1 = _tmp.Grad_anal1;
                        _tmpLog.Grad_anal2 = _tmp.Grad_anal2;
                        _tmpLog.Grad_anal3 = _tmp.Grad_anal3;
                        _tmpLog.Grad_anal4 = _tmp.Grad_anal4;
                        _tmpLog.Grad_anal5 = _tmp.Grad_anal5;
                        _tmpLog.Grad_anal6 = _tmp.Grad_anal6;
                        _tmpLog.Grad_anal7 = _tmp.Grad_anal7;
                        _tmpLog.Grad_anal8 = _tmp.Grad_anal8;
                        _tmpLog.Grad_anal9 = _tmp.Grad_anal9;
                        _tmpLog.Grad_anal10 = _tmp.Grad_anal10;
                        _tmpLog.Grad_anal11 = _tmp.Grad_anal11;
                        _tmpLog.Grad_lvl = 0;
                        _generalDAL.Save_RequestApprove_AddDetLog(_tmpLog);
                    }


                }

                if (_isRegReq == true)
                {
                    MasterAutoNumber RegReqAuto = _inventoryDAL.GetAutoNumber(_AppRegAuto.Aut_moduleid, _AppRegAuto.Aut_direction, _AppRegAuto.Aut_start_char, _AppRegAuto.Aut_cate_tp, _AppRegAuto.Aut_cate_cd, _AppRegAuto.Aut_modify_dt, _AppRegAuto.Aut_year);
                    string _RegAppNo = RegReqAuto.Aut_cate_cd + "-" + RegReqAuto.Aut_start_char + "-" + RegReqAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                    _RegReqNo = _RegAppNo;
                    _inventoryDAL.UpdateAutoNumber(_AppRegAuto);

                    _RegHdr.Grah_ref = _RegAppNo;
                    _RegHdr.Grah_fuc_cd = _ReqAppNo;

                    _RegHdrLog.Grah_ref = _RegAppNo;
                    _RegHdrLog.Grah_fuc_cd = _ReqAppNo;

                    _generalDAL.SaveRequestApproveHear(_RegHdr);
                    _generalDAL.SaveRequestApproveHear_Log(_RegHdrLog);

                    _line = 0;
                    if (_RegDet != null)
                    {
                        foreach (RequestApprovalDetail _itm in _RegDet)
                        {
                            _line++;
                            _itm.Grad_ref = _RegAppNo;
                            //commnet by tharanga gen_reqapp_ser gras line insert change 2017/11/16
                            //  _itm.Grad_line = _line;
                            _generalDAL.Save_RequestApprove_Det(_itm);
                        }
                    }

                    _line = 0;
                    if (_RegDetLog != null)
                    {
                        foreach (RequestApprovalDetailLog _itm in _RegDetLog)
                        {
                            _line++;
                            _itm.Grad_ref = _RegAppNo;
                            _itm.Grad_line = _line;
                            _generalDAL.Save_RequestApprove_Det_Log(_itm);
                        }
                    }

                    if (_RegSer != null)
                    {
                        foreach (RequestApprovalSerials _ser in _RegSer)
                        {
                            _ser.Gras_ref = _RegAppNo;
                            _generalDAL.Save_RequestApprove_Ser(_ser);
                        }
                    }
                    if (_RegSerLog != null)
                    {
                        foreach (RequestApprovalSerialsLog _ser in _RegSerLog)
                        {
                            _ser.Gras_ref = _RegAppNo;
                            _generalDAL.Save_RequestApprove_Serial_Log(_ser);
                        }
                    }


                }

                if (_isinsReq == true)
                {
                    MasterAutoNumber InsReqAuto = _inventoryDAL.GetAutoNumber(_AppinsAuto.Aut_moduleid, _AppinsAuto.Aut_direction, _AppinsAuto.Aut_start_char, _AppinsAuto.Aut_cate_tp, _AppinsAuto.Aut_cate_cd, _AppinsAuto.Aut_modify_dt, _AppinsAuto.Aut_year);
                    string _InsAppNo = InsReqAuto.Aut_cate_cd + "-" + InsReqAuto.Aut_start_char + "-" + InsReqAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                    _insReqNo = _InsAppNo;
                    _inventoryDAL.UpdateAutoNumber(_AppinsAuto);

                    _insHdr.Grah_ref = _InsAppNo;
                    _insHdr.Grah_fuc_cd = _ReqAppNo;

                    _insHdrLog.Grah_ref = _InsAppNo;
                    _insHdrLog.Grah_fuc_cd = _ReqAppNo;

                    _generalDAL.SaveRequestApproveHear(_insHdr);
                    _generalDAL.SaveRequestApproveHear_Log(_insHdrLog);

                    _line = 0;
                    if (_insDet != null)
                    {
                        foreach (RequestApprovalDetail _itm in _insDet)
                        {
                            _line++;
                            _itm.Grad_ref = _InsAppNo;
                            _itm.Grad_line = _line;
                            _generalDAL.Save_RequestApprove_Det(_itm);
                        }
                    }

                    _line = 0;
                    if (_insDetLog != null)
                    {
                        foreach (RequestApprovalDetailLog _itm in _insDetLog)
                        {
                            _line++;
                            _itm.Grad_ref = _InsAppNo;
                            _itm.Grad_line = _line;
                            _generalDAL.Save_RequestApprove_Det_Log(_itm);
                        }
                    }

                    if (_insSer != null)
                    {
                        foreach (RequestApprovalSerials _ser in _insSer)
                        {
                            _ser.Gras_ref = _InsAppNo;
                            _generalDAL.Save_RequestApprove_Ser(_ser);
                        }

                        foreach (RequestApprovalSerialsLog _ser in _insSerLog)
                        {
                            _ser.Gras_ref = _InsAppNo;
                            _generalDAL.Save_RequestApprove_Serial_Log(_ser);
                        }
                    }


                }

                _docNo = _ReqNo;
                _regReq = _RegReqNo;
                _insReq = _insReqNo;

                _generalDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _effect = 1;

            }
            catch (Exception err)
            {
                _effect = -1;
                _docNo = "ERROR : " + err.Message.ToString();
                _regReq = "";
                _insReq = "";
                //documentNoGRN = documentNo;
                _generalDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
            }
            return _effect;
        }


        public List<RecieptHeader> GetReceiptHdr(string _receiptNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReceiptHdr(_receiptNo);
        }
        public List<RecieptHeader> GetReceiptHdrByAnal3(string _receiptNo, string _pc, string _com)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReceiptHdrByAnal3(_receiptNo, _pc, _com);
        }

        public CollectionBonusDefinition GetCollectionBonus(decimal _arrFrom, decimal _arrTo, int _locFrom, int _locTo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCollectionBonus(_arrFrom, _arrTo, _locFrom, _locTo);
        }

        public int SaveCollectionBonusDefinition(CollectionBonusDefinition _col)
        {
            _salesDAL = new SalesDAL();
            int effect = 0;
            _salesDAL.ConnectionOpen();
            effect = _salesDAL.SaveCollectionBonusDefinition(_col);
            _salesDAL.ConnectionClose();
            return effect;
        }

        public List<CollectionBonusDefinition> GetAllCollectionBonusDefinition()
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAllCollectionBonusDefinition();
        }

        public int UpdateCollectionBonus(CollectionBonusDefinition _col, decimal _arsFrom, decimal _arsTo, int _locFrom, int _locTo)
        {
            _salesDAL = new SalesDAL();
            int effect = 0;
            _salesDAL.ConnectionOpen();
            effect = _salesDAL.UpdateCollectionBonus(_col, _arsFrom, _arsTo, _locFrom, _locTo);
            _salesDAL.ConnectionClose();
            return effect;
        }

        public int SaveManagerCreation(ManegerCreation mgr)
        {
            _salesDAL = new SalesDAL();
            int effect = 0;
            _salesDAL.ConnectionOpen();
            effect = _salesDAL.SaveManagerCreation(mgr);
            _salesDAL.ConnectionClose();
            return effect;
        }

        public DataTable GetManagerCreation(string _com, string _pc, string _mgr)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetManagerCreation(_com, _pc, _mgr);

        }

        public int UpdateManagerCreation(ManegerCreation mgr)
        {
            _salesDAL = new SalesDAL();
            int effect = 0;
            _salesDAL.ConnectionOpen();
            using (TransactionScope _tr = new TransactionScope())
            {
                effect = _salesDAL.UpdateManagerCreation(mgr);
                _tr.Complete();
            }
            _salesDAL.ConnectionClose();
            return effect;
        }

        public DataTable GetPC_from_Hierachy_Rep_All(string com, string channel, string subChannel, string area, string region, string zone, string pc_code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPC_from_Hierachy_Rep_all(com, channel, subChannel, area, region, zone, pc_code);
        }

        public DataTable GetPC_from_Hierachy_SubChannel(string com, string channel, string subChannel, string area, string region, string zone, string pc_code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPC_from_Hierachy_SubChannel(com, channel, subChannel, area, region, zone, pc_code);
        }

        public DataTable GetEmployee(string _company, string _employee)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetEmployee(_company, _employee);
        }

        public List<InvoiceItem> GetInterTransferInvoice(string _invoice)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInterTransferInvoice(_invoice);
        }

        public int DeleteManager(string _com, string _pc, string _mgr)
        {
            _salesDAL = new SalesDAL();
            int effect = 0;
            _salesDAL.ConnectionOpen();
            using (TransactionScope _tr = new TransactionScope())
            {
                effect = _salesDAL.DeleteManager(_com, _pc, _mgr);
                _tr.Complete();
            }
            _salesDAL.ConnectionClose();
            return effect;
        }

        public int SaveDisregardValueDefinition(DisregardValueDefinition val)
        {
            _salesDAL = new SalesDAL();
            int effect = 0;
            _salesDAL.ConnectionOpen();
            effect = _salesDAL.SaveDisregardValueDefinition(val);
            _salesDAL.ConnectionClose();
            return effect;
        }

        public int UpdateDisregardValueDefinition(DisregardValueDefinition val, decimal _from, decimal _to, decimal _val, int _type)
        {
            _salesDAL = new SalesDAL();
            int effect = 0;
            _salesDAL.ConnectionOpen();
            effect = _salesDAL.UpdateDisregardValueDefinition(val, _from, _to, _val, _type);
            _salesDAL.ConnectionClose();
            return effect;

        }

        public List<DisregardValueDefinition> GetDisregardValueDefinitiom(decimal _from, decimal _to, decimal _value, int _type, string _select)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDisregardValueDefinitiom(_from, _to, _value, _type, _select);
        }

        public int SaveDisregardPCDefinition(DisregardPCDefinition pc)
        {
            _salesDAL = new SalesDAL();
            int effect = 0;
            _salesDAL.ConnectionOpen();
            effect = _salesDAL.SaveDisregardPCDefinition(pc);
            _salesDAL.ConnectionClose();
            return effect;
        }

        public int UpdateDisregardPCDefinition(DisregardPCDefinition pc, string _com, string _pc)
        {
            _salesDAL = new SalesDAL();
            int effect = 0;
            _salesDAL.ConnectionOpen();
            effect = _salesDAL.UpdateDisregardPCDefinition(pc, _com, _pc);
            _salesDAL.ConnectionClose();
            return effect;

        }

        public List<DisregardPCDefinition> GetDisregardPCDefinitiom(string _com, string _pc, string _type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDisregardPCDefinitiom(_com, _pc, _type);
        }

        public int SaveHandlingOveAccounts(HandlingOverAccount hand)
        {
            _salesDAL = new SalesDAL();
            int effect = 0;
            _salesDAL.ConnectionOpen();
            effect = _salesDAL.SaveHandlingOveAccounts(hand);
            _salesDAL.ConnectionClose();
            return effect;
        }

        public int UpdateHandlinOverAccount(HandlingOverAccount hand, string _com, string _pc, string _ac)
        {
            _salesDAL = new SalesDAL();
            int effect = 0;
            _salesDAL.ConnectionOpen();
            effect = _salesDAL.UpdateHandlinOverAccount(hand, _com, _pc, _ac);
            _salesDAL.ConnectionClose();
            return effect;

        }



        public List<HandlingOverAccount> GetHandlingOverAccounts(string _com, string _pc, string _ac, DateTime _bonus, string _type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHandlingOverAccounts(_com, _pc, _ac, _bonus, _type);
        }

        public DataTable GetCollectionBonusByDate(string _com, string _pc, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCollectionBonusByDate(_com, _pc, _date);
        }

        public DataTable GetArrearsScheme(DateTime _date, string _scheme)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetArrearsScheme(_date, _scheme);
        }

        public DataTable GetPriceCombinedItemTable(Int32 _priceBookSeq, Int32 _priceitemseq, string _mainItem, string _mainSerial)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceCombinedItemTable(_priceBookSeq, _priceitemseq, _mainItem, _mainSerial);
        }

        public DataTable GetAllCombineItemDetail()
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAllCombineItemDetail();
        }

        public List<CollectionBonusAdjusment> GetCollectionBonusAdjusment(string _com, string _pc, string _acc, string _type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCollectionBonusAdjusment(_com, _pc, _acc, _type);
        }

        public int SaveCollectionBonusAdjusment(CollectionBonusAdjusment adj)
        {
            _salesDAL = new SalesDAL();
            int effect = 0;
            using (TransactionScope tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                effect = _salesDAL.SaveCollectionBonusAdjusment(adj);
                tr.Complete();
                _salesDAL.ConnectionClose();
            }
            return effect;

        }

        //darshana 27-02-2013
        public Int32 Save_Ac_Service_Job_New(MasterAutoNumber jobAuto, ServiceJobHeader jobHdr, ServiceJobDetail jobDet, MasterAutoNumber receipAuto, RecieptHeader _recieptHeader, List<RecieptItem> receipItemList, List<ServiceCostSheet> costsheets, ServiceJobStageLog stageLog, ServiceJobAlloc JobAlloc, out string outPara_JobNumber, out string outPara_ReceiptNo)
        {
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();

            Int32 ent = -1;
            string debug = " _salesDAL-ConnectionOpen";
            try
            {
                #region
                using (TransactionScope _tr = new TransactionScope())
                {
                    _salesDAL.ConnectionOpen();

                    debug = " _inventoryDAL-ConnectionOpen";
                    _inventoryDAL.ConnectionOpen();

                    debug = " _inventoryDAL-UpdateAutoNumber-01";
                    string JOBNo = "";
                    MasterAutoNumber _Jnumber = _inventoryDAL.GetAutoNumber(jobAuto.Aut_moduleid, jobAuto.Aut_direction, jobAuto.Aut_start_char, jobAuto.Aut_cate_tp, jobAuto.Aut_cate_cd, jobAuto.Aut_modify_dt, jobAuto.Aut_year);
                    JOBNo = jobAuto.Aut_cate_cd + "-" + jobAuto.Aut_start_char + "-" + _Jnumber.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(jobAuto);//update MST_AUTO table


                    // jobHdr.Sjb_jobno = _inventoryDAL.GetSerialID().ToString();
                    debug = "Save_Job_Header";
                    jobHdr.Sjb_jobno = JOBNo;
                    ent = _salesDAL.Save_Job_Header(jobHdr);

                    debug = "Save_JobDetail";
                    jobDet.Jbd_jobno = jobHdr.Sjb_jobno;
                    ent = _salesDAL.Save_JobDetail(jobDet);//save the details of the item that is serviced

                    //update session
                    debug = "Update_Job_Base_Details";
                    //_salesDAL.Update_Job_Base_Details(jobDet.Jbd_invoiceno, jobDet.Jbd_itm_cd, jobDet.Jbd_ser1, 1, jobHdr.Sjb_loc, 0, jobHdr.Sjb_dt, jobHdr.Sjb_jobno);
                    _salesDAL.Save_Job_Allocation(JobAlloc);

                    outPara_JobNumber = jobDet.Jbd_jobno;

                    //  stageLog.Sjl_jobno = jobHdr.Sjb_jobno;
                    //  _salesDAL.Save_Job_stagelog(stageLog);

                    debug = "UpdateAutoNumber-02";
                    string receiptNo = "";
                    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(receipAuto.Aut_moduleid, receipAuto.Aut_direction, receipAuto.Aut_start_char, receipAuto.Aut_cate_tp, receipAuto.Aut_cate_cd, receipAuto.Aut_modify_dt, receipAuto.Aut_year);
                    receiptNo = receipAuto.Aut_cate_cd + "-" + receipAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(receipAuto);//update MST_AUTO table

                    _recieptHeader.Sar_receipt_no = receiptNo;
                    outPara_ReceiptNo = receiptNo;
                    //-----------------------------------------
                    debug = "GetSerialID";
                    Int32 RecieptSeqNo = 0;
                    RecieptSeqNo = _inventoryDAL.GetSerialID();

                    _recieptHeader.Sar_seq_no = RecieptSeqNo;
                    _recieptHeader.Sar_ser_job_no = jobHdr.Sjb_jobno;

                    debug = "SaveReceiptHeader";
                    ent = _salesDAL.SaveReceiptHeader(_recieptHeader);//save receipt header

                    debug = "SaveReceiptItem";
                    Int32 line = 0;
                    foreach (RecieptItem _itm in receipItemList)
                    {
                        //if (_recieptHeader.Sar_seq_no == _itm.Sard_seq_no)//have to check the prefix also?
                        //{
                        line++;
                        _itm.Sard_seq_no = RecieptSeqNo;
                        _itm.Sard_line_no = line;
                        _itm.Sard_receipt_no = _recieptHeader.Sar_receipt_no;
                        // effect = _salesDAL.SaveReceiptItem(_itm);//save receipt item
                        _salesDAL.SaveReceiptItem(_itm);//save receipt item
                        //}
                    }
                    //----------------------------------------------
                    debug = "sp_save_sev_costsheet";
                    line = 0;
                    foreach (ServiceCostSheet cs in costsheets)
                    {
                        line = line + 1;
                        cs.Scs_line = line;
                        cs.Scs_jobno = jobHdr.Sjb_jobno;
                        cs.Scs_joblineno = 1;
                        ent = _salesDAL.sp_save_sev_costsheet(cs);
                    }


                    _salesDAL.ConnectionClose();
                    _inventoryDAL.ConnectionClose();

                    _tr.Complete();
                }
                return 1;
                #endregion
            }
            catch (Exception ex)
            {
                outPara_JobNumber = "n/a"; outPara_ReceiptNo = "n/a";
                outPara_ReceiptNo = debug + "(" + ex.Message + ")";
                return -99;
            }


        }

        public int UpdateCashConvertionDocNo(string oldDoc, string newDoc)
        {
            ReptCommonDAL _rept = new ReptCommonDAL();
            int effect = 0;
            _rept.ConnectionOpen();
            effect = _rept.UpdateCashConvertionDocNo(oldDoc, newDoc);
            _rept.ConnectionClose();
            return effect;
        }

        public DataTable GetVehicleInsurance(string _account)
        {

            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehicleInsurance(_account);

        }

        //written by darshana on 04-03-2013
        public List<VehicalRegistration> GetVehRegForRev(string _com, string _pc, string _inv, string _itm, Int32 _status)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehRegForRev(_com, _pc, _inv, _itm, _status);
        }

        public List<RecieptItem> Get_receiptitm_OnPayTp(string seq, string payTp, string receiptNo)
        {
            _salesDAL = new SalesDAL();
            return null;// _salesDAL.Get_receiptitm_OnPayTp(seq, payTp, receiptNo);
        }

        public DataTable LoadWarrantyClaimCreditNote(string _company, string _profitcenter)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.LoadWarrantyClaimCreditNote(_company, _profitcenter);
        }

        public DataTable LoadWarrantyClaimCompany(string _company, string _supp)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.LoadWarrantyClaimCompany(_company, _supp);
        }

        public int ProcessHPReschedule(HpAccount _Oldaccount, HpAccount _newAccount, List<HpSheduleDetails> _newSchedule, RequestApprovalHeader _request, List<RecieptHeader> _recieptList, List<RecieptItem> _recieptItemList, List<HpTransaction> _transactionList, MasterAutoNumber _recieptAuto, MasterAutoNumber _transactionAuto, DateTime _date, out string _recNo, out string _error)
        {
            try
            {
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                _generalDAL = new GeneralDAL();
                _fmsInventoryDal = new FMS_InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _fmsInventoryDal.ConnectionOpen();
                _salesDAL.ConnectionOpen();
                _generalDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.BeginTransaction();
                _fmsInventoryDal.BeginTransaction();
                _generalDAL.BeginTransaction();
                _recNo = "";
                int result;
                //create account log
                HPAccountLog _OldLog = new HPAccountLog();
                _OldLog.Hal_acc_no = _Oldaccount.Hpa_acc_no;
                _OldLog.Hal_af_val = _Oldaccount.Hpa_af_val;
                _OldLog.Hal_bank = _Oldaccount.Hpa_bank;
                _OldLog.Hal_buy_val = _Oldaccount.Hpa_buy_val;
                _OldLog.Hal_cash_val = _Oldaccount.Hpa_cash_val;
                _OldLog.Hal_cls_dt = _Oldaccount.Hpa_cls_dt;
                _OldLog.Hal_com = _Oldaccount.Hpa_com;
                _OldLog.Hal_cre_by = _Oldaccount.Hpa_cre_by;
                _OldLog.Hal_cre_dt = _Oldaccount.Hpa_cre_dt;
                _OldLog.Hal_dp_comm = _Oldaccount.Hpa_dp_comm;
                _OldLog.Hal_dp_val = _Oldaccount.Hpa_dp_val;
                _OldLog.Hal_ecd_stus = _Oldaccount.Hpa_ecd_stus;
                _OldLog.Hal_ecd_tp = _Oldaccount.Hpa_ecd_tp;
                _OldLog.Hal_flag = _Oldaccount.Hpa_flag;
                _OldLog.Hal_grup_cd = _Oldaccount.Hpa_grup_cd;
                _OldLog.Hal_hp_val = _Oldaccount.Hpa_hp_val;
                _OldLog.Hal_init_ins = _Oldaccount.Hpa_init_ins;
                _OldLog.Hal_init_ser_chg = _Oldaccount.Hpa_init_ser_chg;
                _OldLog.Hal_init_stm = _Oldaccount.Hpa_init_stm;
                _OldLog.Hal_init_vat = _Oldaccount.Hpa_init_vat;
                _OldLog.Hal_inst_comm = _Oldaccount.Hpa_inst_comm;
                _OldLog.Hal_inst_ins = _Oldaccount.Hpa_inst_ins;
                _OldLog.Hal_inst_ser_chg = _Oldaccount.Hpa_inst_ser_chg;
                _OldLog.Hal_inst_stm = _Oldaccount.Hpa_inst_stm;
                _OldLog.Hal_inst_vat = _Oldaccount.Hpa_inst_vat;
                _OldLog.Hal_intr_rt = _Oldaccount.Hpa_intr_rt;
                _OldLog.Hal_invc_no = _Oldaccount.Hpa_invc_no;
                _OldLog.Hal_is_rsch = _Oldaccount.Hpa_is_rsch;
                _OldLog.Hal_log_dt = DateTime.Now.Date;
                _OldLog.Hal_mgr_cd = _Oldaccount.Hpa_mgr_cd;
                _OldLog.Hal_net_val = _Oldaccount.Hpa_net_val;
                _OldLog.Hal_oth_chg = _Oldaccount.Hpa_oth_chg;
                _OldLog.Hal_pc = _Oldaccount.Hpa_pc;
                _OldLog.Hal_rls_dt = _Oldaccount.Hpa_rls_dt;
                _OldLog.Hal_rsch_dt = _Oldaccount.Hpa_rsch_dt;
                _OldLog.Hal_rv_dt = _Oldaccount.Hpa_rv_dt;
                _OldLog.Hal_sa_sub_tp = "RSCHR";
                _OldLog.Hal_sch_cd = _Oldaccount.Hpa_sch_cd;
                _OldLog.Hal_sch_tp = _Oldaccount.Hpa_sch_tp;
                _OldLog.Hal_seq = _Oldaccount.Hpa_seq;
                _OldLog.Hal_seq_no = _inventoryDAL.GetSerialID();
                _OldLog.Hal_ser_chg = _Oldaccount.Hpa_ser_chg;
                _OldLog.Hal_stus = _Oldaccount.Hpa_stus;
                _OldLog.Hal_tc_val = _Oldaccount.Hpa_tc_val;
                _OldLog.Hal_term = _Oldaccount.Hpa_term;
                _OldLog.Hal_tot_intr = _Oldaccount.Hpa_tot_intr;
                _OldLog.Hal_tot_vat = _Oldaccount.Hpa_tot_vat;
                _OldLog.Hal_val_01 = _Oldaccount.Hpa_val_01;
                _OldLog.Hal_val_02 = _Oldaccount.Hpa_val_02;
                _OldLog.Hal_val_03 = _Oldaccount.Hpa_val_03;
                _OldLog.Hal_val_04 = _Oldaccount.Hpa_val_04;
                _OldLog.Hal_val_05 = _Oldaccount.Hpa_val_05;
                _OldLog.Hpa_acc_cre_dt = _Oldaccount.Hpa_acc_cre_dt;
                _OldLog.Hal_cls_dt = _date.Date;
                _OldLog.Hal_bank = _Oldaccount.Hpa_bank;
                _OldLog.Hal_flag = _Oldaccount.Hpa_flag;
                _OldLog.Hal_rev_stus = true;


                HPAccountLog _newLog = new HPAccountLog();
                _newLog.Hal_acc_no = _newAccount.Hpa_acc_no;
                _newLog.Hal_af_val = _newAccount.Hpa_af_val;
                _newLog.Hal_bank = _newAccount.Hpa_bank;
                _newLog.Hal_buy_val = _newAccount.Hpa_buy_val;
                _newLog.Hal_cash_val = _newAccount.Hpa_cash_val;
                _newLog.Hal_cls_dt = _newAccount.Hpa_cls_dt;
                _newLog.Hal_com = _newAccount.Hpa_com;
                _newLog.Hal_cre_by = _newAccount.Hpa_cre_by;
                _newLog.Hal_cre_dt = _newAccount.Hpa_cre_dt;
                _newLog.Hal_dp_comm = _newAccount.Hpa_dp_comm;
                _newLog.Hal_dp_val = _newAccount.Hpa_dp_val;
                _newLog.Hal_ecd_stus = _newAccount.Hpa_ecd_stus;
                _newLog.Hal_ecd_tp = _newAccount.Hpa_ecd_tp;
                _newLog.Hal_flag = _newAccount.Hpa_flag;
                _newLog.Hal_grup_cd = _newAccount.Hpa_grup_cd;
                _newLog.Hal_hp_val = _newAccount.Hpa_hp_val;
                _newLog.Hal_init_ins = _newAccount.Hpa_init_ins;
                _newLog.Hal_init_ser_chg = _newAccount.Hpa_init_ser_chg;
                _newLog.Hal_init_stm = _newAccount.Hpa_init_stm;
                _newLog.Hal_init_vat = _newAccount.Hpa_init_vat;
                _newLog.Hal_inst_comm = _newAccount.Hpa_inst_comm;
                _newLog.Hal_inst_ins = _newAccount.Hpa_inst_ins;
                _newLog.Hal_inst_ser_chg = _newAccount.Hpa_inst_ser_chg;
                _newLog.Hal_inst_stm = _newAccount.Hpa_inst_stm;
                _newLog.Hal_inst_vat = _newAccount.Hpa_inst_vat;
                _newLog.Hal_intr_rt = _newAccount.Hpa_intr_rt;
                _newLog.Hal_invc_no = _newAccount.Hpa_invc_no;
                _newLog.Hal_is_rsch = _newAccount.Hpa_is_rsch;
                _newLog.Hal_log_dt = DateTime.Now.Date;
                _newLog.Hal_mgr_cd = _newAccount.Hpa_mgr_cd;
                _newLog.Hal_net_val = _newAccount.Hpa_net_val;
                _newLog.Hal_oth_chg = _newAccount.Hpa_oth_chg;
                _newLog.Hal_pc = _Oldaccount.Hpa_pc;
                _newLog.Hal_rev_stus = false;
                _newLog.Hal_rls_dt = _newAccount.Hpa_rls_dt;
                _newLog.Hal_rsch_dt = _newAccount.Hpa_rsch_dt;
                _newLog.Hal_rv_dt = _newAccount.Hpa_rv_dt;
                _newLog.Hal_sa_sub_tp = "RSCH";
                _newLog.Hal_sch_cd = _newAccount.Hpa_sch_cd;
                _newLog.Hal_sch_tp = _newAccount.Hpa_sch_tp;
                _newLog.Hal_seq = _newAccount.Hpa_seq;
                _newLog.Hal_seq_no = _inventoryDAL.GetSerialID();
                _newLog.Hal_ser_chg = _newAccount.Hpa_ser_chg;
                _newLog.Hal_stus = _newAccount.Hpa_stus;
                _newLog.Hal_tc_val = _newAccount.Hpa_tc_val;
                _newLog.Hal_term = _newAccount.Hpa_term;
                _newLog.Hal_tot_intr = _newAccount.Hpa_tot_intr;
                _newLog.Hal_tot_vat = _newAccount.Hpa_tot_vat;
                _newLog.Hal_val_01 = _newAccount.Hpa_val_01;
                _newLog.Hal_val_02 = _newAccount.Hpa_val_02;
                _newLog.Hal_val_03 = _newAccount.Hpa_val_03;
                _newLog.Hal_val_04 = _newAccount.Hpa_val_04;
                _newLog.Hal_val_05 = _newAccount.Hpa_val_05;
                _newLog.Hal_bank = _newAccount.Hpa_bank;
                _newLog.Hal_flag = _newAccount.Hpa_flag;
                _newLog.Hal_cls_dt = _newAccount.Hpa_cls_dt;
                _newLog.Hpa_acc_cre_dt = _newAccount.Hpa_acc_cre_dt;


                //_salesDAL.ConnectionOpen();
                //_generalDAL.ConnectionOpen();
                //01.A SAVE OLD ACCOUNT DETAILS TO ACCOUNT LOG
                result = _salesDAL.SaveHPAccountLog(_OldLog);
                //01.B UPDATE OLD ENTRIES CLS DATE
                result = _salesDAL.UpdateResheduleAccLog(_date.Date, _OldLog.Hal_acc_no);
                //02. UDDATE NEW ACCOUNT DETAILS
                _salesDAL.UpdateHPAccountReschedule(_newAccount);

                //03. SAVE NEW ACCOUNT DETAILS TO LOG
                result = result + _salesDAL.SaveHPAccountLog(_newLog);

                //04. DELETE OLD hpt_shed
                //save history
                List<HpSheduleDetails> _oldSchedule = _salesDAL.GetHpAccountSchedule(_Oldaccount.Hpa_acc_no);

                foreach (HpSheduleDetails sch in _oldSchedule)
                {
                    HpScheduleDetailLog _log = new HpScheduleDetailLog();
                    _log.Hsh_acc_no = sch.Hts_acc_no;
                    _log.Hsh_cre_by = sch.Hts_cre_by;
                    _log.Hsh_cre_dt = sch.Hts_cre_dt;
                    _log.Hsh_dt = DateTime.Now;
                    _log.Hsh_due_dt = sch.Hts_due_dt;
                    _log.Hsh_ins = sch.Hts_ins;
                    _log.Hsh_intr = sch.Hts_intr;
                    _log.Hsh_rnt_no = sch.Hts_rnt_no;
                    _log.Hsh_rnt_val = sch.Hts_rnt_val;
                    _log.Hsh_sdt = sch.Hts_sdt;
                    _log.Hsh_seq = _inventoryDAL.GetSerialID();
                    _log.Hsh_ser = sch.Hts_ser;
                    _log.Hsh_vat = sch.Hts_vat;

                    _salesDAL.SaveHPScheduleLog(_log);
                }

                //delete
                _salesDAL.DeleteHPSchedule(_Oldaccount.Hpa_acc_no);

                //05. SAVE NEW hpt_shed
                foreach (HpSheduleDetails sch in _newSchedule)
                {
                    sch.Hts_seq = _inventoryDAL.GetSerialID();
                    _salesDAL.SaveHpShedule(sch);
                }

                //06. UPDATE REQUEST STATUS TO COMPLETE
                _generalDAL.UpdateApprovalStatus(_request);
                //07 ADD RECORD TO RECIEPT TABLE
                decimal _recieptVal = 0;
                if (_recieptList != null && _recieptList.Count > 0)
                {
                    foreach (RecieptHeader _recieptHeader in _recieptList)
                    {   //create MST_AUTO number for receipt table
                        _recieptHeader.Sar_is_oth_shop = false;
                        _recieptHeader.Sar_acc_no = _newAccount.Hpa_acc_no;
                        _recieptHeader.Sar_receipt_date = _date.Date;

                        if (_recieptHeader.Sar_receipt_type == "HPRS")
                        {
                            _recieptHeader.Sar_receipt_type = "HPDPS";
                            _recieptAuto.Aut_start_char = "HPRS";
                        }
                        else
                        {
                            _recieptAuto.Aut_start_char = "HPDPM";
                            _recieptHeader.Sar_receipt_type = "HPDPM";
                        }

                        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_recieptAuto.Aut_moduleid, _recieptAuto.Aut_direction, _recieptAuto.Aut_start_char, _recieptAuto.Aut_cate_tp, _recieptAuto.Aut_cate_cd, _recieptAuto.Aut_modify_dt, _recieptAuto.Aut_year);
                        string _cusNo1 = _recieptAuto.Aut_cate_cd + "-" + "HPDPM" + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_recieptAuto);//update MST_AUTO table

                        _recieptHeader.Sar_receipt_no = _cusNo1;

                        Int32 RecieptSeqNo = 0;
                        RecieptSeqNo = _inventoryDAL.GetSerialID(); //will be assign to header after looping transaction list.
                        foreach (HpTransaction _transaction in _transactionList)
                        {
                            if (_transaction.Hpt_seq == 1)
                            {
                                _transaction.Hpt_txn_ref = _recieptHeader.Sar_receipt_no;
                                _transaction.Hpt_mnl_ref = _recieptHeader.Sar_prefix + "-" + _recieptHeader.Sar_manual_ref_no;
                            }
                        }

                        Int32 line = 0;
                        _recieptVal = _recieptVal + _recieptHeader.Sar_tot_settle_amt;
                        foreach (RecieptItem _itm in _recieptItemList)
                        {
                            if (_recieptHeader.Sar_seq_no == _itm.Sard_seq_no)//have to check the prefix also?
                            {
                                line++;
                                _itm.Sard_seq_no = RecieptSeqNo;
                                _itm.Sard_line_no = line;
                                _itm.Sard_receipt_no = _recieptHeader.Sar_receipt_no;
                            }
                        }
                        _recieptHeader.Sar_seq_no = RecieptSeqNo;

                        _salesDAL.SaveReceiptHeader(_recieptHeader);

                        MasterCompany _masterComp = _generalDAL.GetCompByCode(_recieptHeader.Sar_com_cd);  //kapila 27/4/2016
                        if (_masterComp.MC_IS_SCM2_FMS == 1)
                            _inventoryDAL.UpdateManualDocNo(_recieptHeader.Sar_profit_center_cd, _recieptHeader.Sar_anal_4, Convert.ToInt32(_recieptHeader.Sar_manual_ref_no), _recieptHeader.Sar_receipt_no);
                        else
                            _fmsInventoryDal.UpdateManualDocNo(_recieptHeader.Sar_profit_center_cd, _recieptHeader.Sar_anal_4, Convert.ToInt32(_recieptHeader.Sar_manual_ref_no), _recieptHeader.Sar_receipt_no);
                        _recNo = _cusNo1;
                    }

                }
                //08 SAVE RECIEPT ITEM
                if (_recieptItemList != null && _recieptItemList.Count > 0)
                {

                    foreach (RecieptItem _itm in _recieptItemList)
                    {
                        if (_itm.Sard_pay_tp == "GVO")
                        {
                            if (_recieptList != null)
                                _fmsInventoryDal.UpdateGiftVpucherPagesBalance(_newAccount.Hpa_com, Convert.ToInt32(_itm.Sard_sim_ser), _itm.Sard_anal_2, Convert.ToInt32(_itm.Sard_ref_no), _recieptList[0].Sar_mod_by, _recieptList[0].Sar_mod_when, _itm.Sard_settle_amt);
                            else
                                _fmsInventoryDal.UpdateGiftVpucherPagesBalance(_newAccount.Hpa_com, Convert.ToInt32(_itm.Sard_sim_ser), _itm.Sard_anal_2, Convert.ToInt32(_itm.Sard_ref_no), "", DateTime.Now, _itm.Sard_settle_amt);
                        }
                        if (_itm.Sard_pay_tp == "CRNOTE")
                        {
                            _salesDAL.UpdateCreditNoteBalance(_newAccount.Hpa_com, _newAccount.Hpa_pc, _itm.Sard_ref_no, _itm.Sard_settle_amt);
                        }
                        _salesDAL.SaveReceiptItem(_itm);
                    }
                }
                //09 SAVE HP TRANSACTION
                if (_transactionList != null && _transactionList.Count > 0)
                {
                    foreach (HpTransaction _transaction in _transactionList)
                    {
                        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_transactionAuto.Aut_moduleid, _transactionAuto.Aut_direction, _transactionAuto.Aut_start_char, _transactionAuto.Aut_cate_tp, _transactionAuto.Aut_cate_cd, _transactionAuto.Aut_modify_dt, _transactionAuto.Aut_year);
                        string _cusNo1 = _transactionAuto.Aut_cate_cd + "-" + _transactionAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_transactionAuto);//update MST_AUTO table
                        _transaction.Hpt_seq = _inventoryDAL.GetSerialID();
                        _transaction.Hpt_ref_no = _cusNo1;

                        _salesDAL.Save_HpTransaction(_transaction);
                    }
                }

                _salesDAL.TransactionCommit();
                _generalDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _error = "";
                return 1;
                // tr.Complete();
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _recNo = "";
                _error = ex.Message;
                return -1;

            }

        }

        public List<VehicleInsuarance> GetVehicalInsuranceByInvoice(string _inv)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehicalInsuranceByInvoice(_inv);
        }

        public DataTable GetSCMInvoice(string _company, string _customer, string _item)
        {
            _ScmCommonDAL = new SCMCommonDAL();
            return _ScmCommonDAL.GetSCMInvoice(_company, _customer, _item);
        }

        public DataTable GetSCMInvoiceSerial(string _company, string _invoice, string _item)
        {
            _ScmCommonDAL = new SCMCommonDAL();
            return _ScmCommonDAL.GetSCMInvoiceSerial(_company, _invoice, _item);
        }

        public DataTable GetInvoiceDetail(string _company, string _invoice, string _item)
        {
            _ScmCommonDAL = new SCMCommonDAL();
            _salesDAL = new SalesDAL();
            DataTable _scm = _ScmCommonDAL.GetSCMInvoiceDetail(_company, _invoice, _item);
            DataTable _scm2 = _salesDAL.GetSCM2InvoiceDetail(_company, _invoice, _item);
            if (_scm2 != null)
                _scm2.Merge(_scm, false, MissingSchemaAction.Add);
            else
                _scm2 = _scm;

            return _scm2;
        }

        public DataTable GetCashCommissionserach(string circular)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCashCommissionserach(circular);
        }

        public int GenerateWarrantyClaimCredit(DateTime _date, string _invType, string _requestno, string _customer, string _remarks, string _receiveCompany, string _receiveProfitCenter, string _receiveLocation, string _createBy, InventoryHeader _adjPlusHeader, MasterAutoNumber _adjPlusAuto, List<RequestApprovalDetail> _itemLst, string _sessionID, out string _creditNote, out string _adjPlusDocument, out int _effects, out string _msg, string _sapNo = null, string _claimNo = null) // updated by akila 2017/09/02
        {
            int _effect = 0;

            try
            {
                string _crnote = string.Empty;
                string _adjPlusDoc = string.Empty;
                string _message = string.Empty;

                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                _ScmCommonDAL = new SCMCommonDAL();
                _inventoryRepDAL = new ReptCommonDAL();

                //generate credit note in scm2 for the given profit center
                //pick that no and do upload from Chamal's EMS Upload function

                //check the location system (SCM1/SCM2)
                //if system SCM2 raise Adjustment for SCM2 from common function
                //if system is not SCM2 or POS then raise the Adjustment for SCM1

                //SCM2 fake process

                DataTable _loc = new DataTable();
                string _system = string.Empty;
                MasterBusinessEntity _masterBusinessCompany = null;
                string _defBin = string.Empty;
                DataSet _emsDataSet = new DataSet();

                List<InvoiceItem> _invoiceItem = new List<InvoiceItem>();
                List<InventorySerialN> _invneotrySerial = new List<InventorySerialN>();
                List<ReptPickSerials> _pickSerial = new List<ReptPickSerials>();
                int _counter = 1;


                //using (TransactionScope _tr = new TransactionScope())
                //{
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _ScmCommonDAL.ConnectionOpen();
                _ScmCommonDAL.BeginTransaction();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                #region Check Inward Location Operating System
                _loc = _inventoryDAL.Get_location_by_code(_receiveCompany, _receiveLocation);
                _system = Convert.ToString(_loc.Rows[0].Field<string>("ml_anal1"));
                if (string.IsNullOrEmpty(_system))
                {
                    _creditNote = string.Empty;
                    _adjPlusDocument = string.Empty;
                    _msg = "The location " + _receiveLocation + " is not setup its operation system.";
                    _effects = -1;
                    _effect = -1;
                    return _effect;
                }
                if (_system.ToUpper() == "POS")
                {
                    _creditNote = string.Empty;
                    _adjPlusDocument = string.Empty;
                    _msg = "The location " + _receiveLocation + " is setup its operation system as 'POS'.";
                    _effects = -1;
                    _effect = -1;
                    return _effect;
                }




                #endregion

                #region Load Customer Detail
                _masterBusinessCompany = _salesDAL.GetBusinessCompanyDetail(_receiveCompany, _customer, string.Empty, string.Empty, "C");
                #endregion

                #region Get Default Bin
                _defBin = _inventoryDAL.GetDefaultBinCode(_receiveCompany, _receiveLocation);
                if (string.IsNullOrEmpty(_defBin))
                {
                    _creditNote = string.Empty;
                    _adjPlusDocument = string.Empty;
                    _msg = "Default Bin is not setup for the location " + _receiveLocation;
                    _effects = -1;
                    _effect = -1;
                    return _effect;
                }
                #endregion

                #region Adj+ Auto Number

                MasterAutoNumber masterAuto = new MasterAutoNumber();
                masterAuto.Aut_cate_cd = _receiveProfitCenter;
                masterAuto.Aut_cate_tp = "LOC";
                masterAuto.Aut_direction = null;
                masterAuto.Aut_modify_dt = null;
                masterAuto.Aut_moduleid = "ADJ";
                masterAuto.Aut_number = 0;
                masterAuto.Aut_start_char = "ADJ";
                masterAuto.Aut_year = null;

                #endregion

                #region Movement Header
                //Inventory Adj+ for SCM2
                InventoryHeader inHeader = new InventoryHeader();
                inHeader.Ith_acc_no = string.Empty;
                inHeader.Ith_anal_10 = false;
                inHeader.Ith_anal_11 = false;
                inHeader.Ith_anal_12 = false;
                inHeader.Ith_anal_2 = string.Empty;
                inHeader.Ith_bus_entity = string.Empty;
                inHeader.Ith_cate_tp = "NOR";
                inHeader.Ith_channel = string.Empty;
                inHeader.Ith_com = _receiveCompany;
                inHeader.Ith_com_docno = string.Empty;
                inHeader.Ith_cre_by = _createBy;
                inHeader.Ith_cre_when = DateTime.Now;
                inHeader.Ith_del_add1 = "";
                inHeader.Ith_del_add2 = "";
                inHeader.Ith_del_code = "";
                inHeader.Ith_del_party = "";
                inHeader.Ith_del_town = "";
                inHeader.Ith_direct = true;
                inHeader.Ith_doc_date = _date.Date;
                inHeader.Ith_doc_no = string.Empty;
                inHeader.Ith_doc_tp = "ADJ";
                inHeader.Ith_doc_year = DateTime.Today.Year;
                inHeader.Ith_entry_no = string.Empty;
                inHeader.Ith_entry_tp = string.Empty;
                inHeader.Ith_git_close = false;
                inHeader.Ith_isprinted = true;
                inHeader.Ith_is_manual = true;
                inHeader.Ith_job_no = string.Empty;
                inHeader.Ith_loading_point = string.Empty;
                inHeader.Ith_loading_user = string.Empty;
                inHeader.Ith_loc = _receiveLocation;
                inHeader.Ith_manual_ref = string.Empty;
                inHeader.Ith_mod_by = _createBy;
                inHeader.Ith_mod_when = DateTime.Now;
                inHeader.Ith_noofcopies = 0;
                inHeader.Ith_oth_loc = _defBin; // Tharindu
                inHeader.Ith_oth_docno = _requestno;
                inHeader.Ith_manual_ref = _requestno;
                inHeader.Ith_remarks = _remarks;
                inHeader.Ith_sbu = string.Empty;
                inHeader.Ith_seq_no = 0;
                inHeader.Ith_stus = "A";
                inHeader.Ith_sub_tp = "NOR";
                inHeader.Ith_vehi_no = string.Empty;
                inHeader.Ith_anal_12 = true;
                inHeader.Ith_session_id = _sessionID;
                #endregion

                #region Invoice/Pick Serial Detail - Credit Note/Adjustment +
                foreach (RequestApprovalDetail _one in _itemLst.Where(x => x.Grad_anal8 == "CLAIM").ToList())
                {
                    InvoiceItem _lst = new InvoiceItem();
                    InventorySerialN _iSerial = new InventorySerialN();


                    string _invoice = _one.Grad_anal1;
                    string _item = _one.Grad_req_param;
                    string _description = _one.Description;
                    string _model = _one.Model;
                    decimal _qty = Convert.ToDecimal(_one.Grad_anal2);
                    string _returnStatus = _one.Grad_anal5;
                    string _returnSerial = _one.Grad_anal6;
                    string _mainSerial = _one.Grad_anal7;
                    string _invoiceline = _one.Grad_anal9;

                    MasterItem _itmMst = _inventoryDAL.GetItem(_receiveCompany, _item);
                    Int32 _serialID = 0;

                    //Tharindu 

                    //int x = 0;



                    //if (Int32.TryParse(_mainSerial, out x))
                    //{
                    //    inHeader.Ith_seq_no = Convert.ToInt32(_mainSerial.ToString());
                    //}
                    //else
                    //{
                    //    inHeader.Ith_seq_no = 0;
                    //}



                    #region Fill Invoic Item
                    //DataTable _invDetail = _ScmCommonDAL.GetInvoiceDetail(_invoice, _item, Convert.ToInt32(_invoiceline), _qty);
                    //if (_invDetail.Rows.Count <= 0)
                    //{
                    //Akila 2018/02/23 - Get Invoice detail from SCM2
                    DataTable _invDetail = _salesDAL.GetInvoiceDetailsInSCM2(_invoice, _item, Convert.ToInt32(_invoiceline));
                    if (_invDetail.Rows.Count < 1)
                    {
                        _creditNote = string.Empty;
                        _adjPlusDocument = string.Empty;
                        _msg = "There is no entry in SCM1 And SCM2 for the invoice " + _invoice + " and the item " + _item;
                        _effects = -1;
                        return _effects;
                    }
                    //    }

                    // Convert.ToDecimal(_invDetail.Rows[0].Field<decimal>("QTY")); //aDD BY tHARINDU due to the reverse invoice values will double depend on the qty 2018-08-06

                    decimal qty = _invDetail.Rows[0].Field<decimal>("QTY");

                    if (_itmMst.Mi_is_ser1 != 1)
                    {
                        if (qty > 0)
                        {

                            _lst.Sad_disc_amt = Convert.ToDecimal(_invDetail.Rows[0].Field<decimal>("DIS_AMOUNT"));
                            _lst.Sad_disc_rt = Convert.ToDecimal(_invDetail.Rows[0].Field<decimal>("DIS_RATE"));
                            _lst.Sad_do_qty = 0;
                            _lst.Sad_inv_no = null;
                            _lst.Sad_isapp = true;
                            _lst.Sad_iscovernote = true;
                            _lst.Sad_itm_cd = _item;
                            _lst.Sad_itm_line = _counter;
                            _lst.Sad_itm_seq = Convert.ToInt32(_invDetail.Rows[0]["PB_ITEM_SEQ_NO"]);
                            _lst.Sad_itm_stus = Convert.ToString(_invDetail.Rows[0].Field<string>("STATUS"));
                            _lst.Sad_itm_tax_amt = Convert.ToDecimal(_invDetail.Rows[0].Field<decimal>("ITEM_TAX_AMOUNT"));
                            _lst.Sad_itm_tp = Convert.ToString(_invDetail.Rows[0].Field<string>("ITEM_TYPE"));
                            _lst.Sad_job_line = 0;
                            _lst.Sad_job_no = null;
                            _lst.Sad_pb_lvl = Convert.ToString(_invDetail.Rows[0].Field<string>("PRICE_LEVEL"));
                            _lst.Sad_pb_price = Convert.ToDecimal(_invDetail.Rows[0].Field<decimal>("PRICE_BOOK_PRICE"));
                            _lst.Sad_pbook = Convert.ToString(_invDetail.Rows[0].Field<string>("PRICE_BOOK"));
                            _lst.Sad_qty = _qty;
                            _lst.Sad_srn_qty = _qty;
                            _lst.Sad_seq = Convert.ToInt32(_invDetail.Rows[0]["PB_SEQ"]);
                            _lst.Sad_seq_no = 0;
                            _lst.Sad_tot_amt = Convert.ToDecimal(_invDetail.Rows[0].Field<decimal>("TOT_AMOUNT"));
                            _lst.Sad_unit_amt = Convert.ToDecimal(_invDetail.Rows[0].Field<decimal>("AMOUNT"));
                            _lst.Sad_unit_rt = Convert.ToDecimal(_invDetail.Rows[0].Field<decimal>("UNIT_RATE"));
                            _lst.Sad_uom = Convert.ToString(_invDetail.Rows[0].Field<string>("UOM"));
                            _lst.Sad_warr_period = Convert.ToInt32(_invDetail.Rows[0]["WARA_FROM_PB"]);
                            _lst.Sad_warr_remarks = Convert.ToString(_invDetail.Rows[0].Field<string>("WARA_REMARKS"));
                            _lst.Sad_job_no = _invoice;
                            _lst.Sad_job_line = Convert.ToInt32(_invoiceline);
                            _lst.Sad_merge_itm = _mainSerial;

                            _invoiceItem.Add(_lst);

                        }
                    }
                    else
                    {

                        if (qty > 0)
                        {

                            _lst.Sad_disc_amt = Convert.ToDecimal(_invDetail.Rows[0].Field<decimal>("DIS_AMOUNT")) / Convert.ToDecimal(_invDetail.Rows[0].Field<decimal>("QTY"));
                            _lst.Sad_disc_rt = Convert.ToDecimal(_invDetail.Rows[0].Field<decimal>("DIS_RATE"));
                            _lst.Sad_do_qty = 0;
                            _lst.Sad_inv_no = null;
                            _lst.Sad_isapp = true;
                            _lst.Sad_iscovernote = true;
                            _lst.Sad_itm_cd = _item;
                            _lst.Sad_itm_line = _counter;
                            _lst.Sad_itm_seq = Convert.ToInt32(_invDetail.Rows[0]["PB_ITEM_SEQ_NO"]);
                            _lst.Sad_itm_stus = Convert.ToString(_invDetail.Rows[0].Field<string>("STATUS"));
                            _lst.Sad_itm_tax_amt = Convert.ToDecimal(_invDetail.Rows[0].Field<decimal>("ITEM_TAX_AMOUNT")) / Convert.ToDecimal(_invDetail.Rows[0].Field<decimal>("QTY"));
                            _lst.Sad_itm_tp = Convert.ToString(_invDetail.Rows[0].Field<string>("ITEM_TYPE"));
                            _lst.Sad_job_line = 0;
                            _lst.Sad_job_no = null;
                            _lst.Sad_pb_lvl = Convert.ToString(_invDetail.Rows[0].Field<string>("PRICE_LEVEL"));
                            _lst.Sad_pb_price = Convert.ToDecimal(_invDetail.Rows[0].Field<decimal>("PRICE_BOOK_PRICE"));
                            _lst.Sad_pbook = Convert.ToString(_invDetail.Rows[0].Field<string>("PRICE_BOOK"));
                            _lst.Sad_qty = _qty;
                            _lst.Sad_srn_qty = _qty;
                            _lst.Sad_seq = Convert.ToInt32(_invDetail.Rows[0]["PB_SEQ"]);
                            _lst.Sad_seq_no = 0;
                            _lst.Sad_tot_amt = Convert.ToDecimal(_invDetail.Rows[0].Field<decimal>("TOT_AMOUNT")) / Convert.ToDecimal(_invDetail.Rows[0].Field<decimal>("QTY")); //aDD BY tHARINDU
                            _lst.Sad_unit_amt = Convert.ToDecimal(_invDetail.Rows[0].Field<decimal>("AMOUNT")) / Convert.ToDecimal(_invDetail.Rows[0].Field<decimal>("QTY"));
                            _lst.Sad_unit_rt = Convert.ToDecimal(_invDetail.Rows[0].Field<decimal>("UNIT_RATE"));
                            _lst.Sad_uom = Convert.ToString(_invDetail.Rows[0].Field<string>("UOM"));
                            _lst.Sad_warr_period = Convert.ToInt32(_invDetail.Rows[0]["WARA_FROM_PB"]);
                            _lst.Sad_warr_remarks = Convert.ToString(_invDetail.Rows[0].Field<string>("WARA_REMARKS"));
                            _lst.Sad_job_no = _invoice;
                            _lst.Sad_job_line = Convert.ToInt32(_invoiceline);
                            _lst.Sad_merge_itm = _mainSerial;

                            _invoiceItem.Add(_lst);
                        }
                    }
                    #endregion

                    #region Fill Pick Serial
                    if (_itmMst.Mi_is_ser1 == 1)
                    {
                        ReptPickSerials _tempSerial = new ReptPickSerials();
                        _serialID = _inventoryDAL.GetSerialID();
                        _tempSerial.Tus_usrseq_no = 0;
                        _tempSerial.Tus_doc_no = string.Empty;
                        _tempSerial.Tus_seq_no = 0;
                        _tempSerial.Tus_itm_line = 0;
                        _tempSerial.Tus_batch_line = 0;
                        _tempSerial.Tus_ser_line = 0;
                        _tempSerial.Tus_doc_dt = DateTime.Now.Date;
                        _tempSerial.Tus_com = _receiveCompany;
                        _tempSerial.Tus_loc = _receiveLocation;
                        _tempSerial.Tus_bin = _defBin;
                        _tempSerial.Tus_itm_cd = _item;
                        _tempSerial.Tus_itm_stus = _returnStatus;
                        _tempSerial.Tus_unit_cost = 0;
                        _tempSerial.Tus_unit_price = Convert.ToDecimal(_invDetail.Rows[0].Field<decimal>("UNIT_RATE"));
                        _tempSerial.Tus_qty = _qty;
                        _tempSerial.Tus_ser_id = _serialID;
                        _tempSerial.Tus_ser_1 = _returnSerial;
                        _tempSerial.Tus_ser_2 = "N/A";
                        _tempSerial.Tus_ser_3 = "N/A";
                        _tempSerial.Tus_itm_desc = string.Empty;
                        _tempSerial.Tus_itm_model = string.Empty;
                        _tempSerial.Tus_itm_brand = string.Empty;
                        _tempSerial.Tus_itm_line = _counter;
                        _tempSerial.Tus_cre_by = _createBy;
                        _tempSerial.Tus_cre_dt = DateTime.Now;
                        _tempSerial.Tus_session_id = _sessionID;
                        _tempSerial.Tus_serial_id = string.Empty;
                        _pickSerial.Add(_tempSerial);
                    }
                    else if (_itmMst.Mi_is_ser1 != 1)
                    {
                        if (_qty == 1)
                        {
                            ReptPickSerials _tempSerial = new ReptPickSerials();
                            _serialID = _inventoryDAL.GetSerialID();
                            _tempSerial.Tus_usrseq_no = 0;
                            _tempSerial.Tus_doc_no = string.Empty;
                            _tempSerial.Tus_seq_no = 0;
                            _tempSerial.Tus_itm_line = 0;
                            _tempSerial.Tus_batch_line = 0;
                            _tempSerial.Tus_ser_line = 0;
                            _tempSerial.Tus_doc_dt = DateTime.Now.Date;
                            _tempSerial.Tus_com = _receiveCompany;
                            _tempSerial.Tus_loc = _receiveLocation;
                            _tempSerial.Tus_bin = _defBin;
                            _tempSerial.Tus_itm_cd = _item;
                            _tempSerial.Tus_itm_stus = _returnStatus;
                            _tempSerial.Tus_unit_cost = 0;
                            _tempSerial.Tus_unit_price = Convert.ToDecimal(_invDetail.Rows[0].Field<decimal>("UNIT_RATE"));
                            _tempSerial.Tus_qty = _qty;
                            _tempSerial.Tus_ser_id = _serialID;
                            _tempSerial.Tus_ser_1 = _returnSerial;
                            _tempSerial.Tus_ser_2 = "N/A";
                            _tempSerial.Tus_ser_3 = "N/A";
                            _tempSerial.Tus_itm_desc = string.Empty;
                            _tempSerial.Tus_itm_model = string.Empty;
                            _tempSerial.Tus_itm_brand = string.Empty;
                            _tempSerial.Tus_itm_line = _counter;
                            _tempSerial.Tus_cre_by = _createBy;
                            _tempSerial.Tus_cre_dt = DateTime.Now;
                            _tempSerial.Tus_session_id = _sessionID;
                            _tempSerial.Tus_serial_id = string.Empty;
                            _pickSerial.Add(_tempSerial);
                        }
                        else
                        {
                            for (int i = 0; i < _qty; i++)
                            {
                                ReptPickSerials _tempSerial = new ReptPickSerials();
                                _serialID = _inventoryDAL.GetSerialID();
                                _tempSerial.Tus_usrseq_no = 0;
                                _tempSerial.Tus_doc_no = string.Empty;
                                _tempSerial.Tus_seq_no = 0;
                                _tempSerial.Tus_itm_line = 0;
                                _tempSerial.Tus_batch_line = 0;
                                _tempSerial.Tus_ser_line = 0;
                                _tempSerial.Tus_doc_dt = DateTime.Now.Date;
                                _tempSerial.Tus_com = _receiveCompany;
                                _tempSerial.Tus_loc = _receiveLocation;
                                _tempSerial.Tus_bin = _defBin;
                                _tempSerial.Tus_itm_cd = _item;
                                _tempSerial.Tus_itm_stus = _returnStatus;
                                _tempSerial.Tus_unit_cost = 0;
                                _tempSerial.Tus_unit_price = Convert.ToDecimal(_invDetail.Rows[0].Field<decimal>("UNIT_RATE"));
                                _tempSerial.Tus_qty = 1;
                                _tempSerial.Tus_ser_id = _serialID;
                                _tempSerial.Tus_ser_1 = _returnSerial;
                                _tempSerial.Tus_ser_2 = "N/A";
                                _tempSerial.Tus_ser_3 = "N/A";
                                _tempSerial.Tus_itm_desc = string.Empty;
                                _tempSerial.Tus_itm_model = string.Empty;
                                _tempSerial.Tus_itm_brand = string.Empty;
                                _tempSerial.Tus_itm_line = _counter;
                                _tempSerial.Tus_cre_by = _createBy;
                                _tempSerial.Tus_cre_dt = DateTime.Now;
                                _tempSerial.Tus_session_id = _sessionID;
                                _tempSerial.Tus_serial_id = string.Empty;
                                _pickSerial.Add(_tempSerial);
                            }
                        }

                    }

                    #endregion
                    _counter += 1;
                }
                #endregion

                InventoryBLL _invDAL = new InventoryBLL();
                _invDAL._inventoryRepDAL = _inventoryRepDAL;
                _invDAL._inventoryDAL = _inventoryDAL;
                _invDAL._ScmCommonDAL = _ScmCommonDAL;


                //_invDAL.ADJPlus(inHeader, _pickSerial, null, masterAuto, out _adjPlusDoc);
                #region Raise Dummy ADJ
                _invDAL.SaveInwardScanSerial(inHeader, _pickSerial, null);
                _invDAL.UpdateInventoryAutoNumber(inHeader, masterAuto, "+", out _adjPlusDoc);
                _invDAL._inventoryDAL.UpdateMovementDocNo_Other(inHeader.Ith_seq_no, _adjPlusDoc);
                _invDAL._inventoryDAL.GetInventoryDocument(_adjPlusDoc);
                _invDAL._inventoryDAL.GetInventorySerial(_adjPlusDoc);

                #endregion

                if (_system == "SCM")
                {
                    _ScmCommonDAL._emsSalesDAL = _salesDAL;
                    //_emsDataSet = _ScmCommonDAL.FillDataSet(_adjPlusDoc);
                    _emsDataSet = _invDAL._inventoryDAL._scmDataset;
                }

                //_salesDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                //_ScmCommonDAL.ConnectionClose();
                //_inventoryRepDAL.ConnectionClose();

                //Tharindu comment by

                //if (_system == "SCM2")
                //{
                //    //_tr.Complete();
                //    _salesDAL.TransactionRollback();
                //    _inventoryRepDAL.TransactionRollback();
                //    _inventoryDAL.TransactionRollback();
                //    _ScmCommonDAL.TransactionRollback();
                //}
                //else
                //{
                //    _ScmCommonDAL.TransactionRollback();
                //    _salesDAL.TransactionRollback();
                //    _inventoryDAL.TransactionRollback();
                //    _inventoryRepDAL.TransactionRollback();

                //}
                ////}

                ////using (TransactionScope _trs = new TransactionScope())
                ////{
                //_salesDAL = new SalesDAL();
                //_inventoryDAL = new InventoryDAL();
                //_ScmCommonDAL = new SCMCommonDAL();
                //_inventoryRepDAL = new ReptCommonDAL();

                ////Original Process

                //_salesDAL.ConnectionOpen();
                //_salesDAL.BeginTransaction();
                //_inventoryDAL.ConnectionOpen();
                //_inventoryDAL.BeginTransaction();
                //_ScmCommonDAL.ConnectionOpen();
                //_ScmCommonDAL.BeginTransaction();
                //_inventoryRepDAL.ConnectionOpen();
                //_inventoryRepDAL.BeginTransaction();

                #region Invoice Header - Credit Note
                InvoiceHeader _hdr = new InvoiceHeader();
                _hdr.Sah_acc_no = string.Empty;
                _hdr.Sah_com = _receiveCompany;
                _hdr.Sah_cre_by = _createBy;
                _hdr.Sah_cre_when = DateTime.Now;
                _hdr.Sah_currency = "LKR";
                _hdr.Sah_cus_add1 = _masterBusinessCompany.Mbe_add1;
                _hdr.Sah_cus_add2 = _masterBusinessCompany.Mbe_add2;
                _hdr.Sah_cus_cd = _customer;
                _hdr.Sah_cus_name = _masterBusinessCompany.Mbe_name;
                _hdr.Sah_d_cust_add1 = _masterBusinessCompany.Mbe_add1;
                _hdr.Sah_d_cust_add2 = _masterBusinessCompany.Mbe_add2;
                _hdr.Sah_d_cust_cd = _customer;
                _hdr.Sah_d_cust_name = _masterBusinessCompany.Mbe_name;
                _hdr.Sah_del_loc = _receiveLocation;
                _hdr.Sah_direct = false;
                _hdr.Sah_dt = _date.Date;
                _hdr.Sah_epf_rt = 0;
                _hdr.Sah_esd_rt = 0;
                _hdr.Sah_ex_rt = 1;
                _hdr.Sah_inv_no = string.Empty;
                _hdr.Sah_inv_sub_tp = "REV";
                _hdr.Sah_inv_tp = _invType;
                _hdr.Sah_mod_by = _createBy;
                _hdr.Sah_mod_when = DateTime.Now;
                _hdr.Sah_pc = _receiveProfitCenter;
                _hdr.Sah_remarks = _remarks;
                _hdr.Sah_stus = "A";
                _hdr.Sah_tp = "INV";
                _hdr.Sah_wht_rt = 0;
                _hdr.Sah_sales_ex_cd = "N/A";
                _hdr.Sah_session_id = _sessionID;

                //add by akila 2017/09/02 - save SAP and claim number
                _hdr.Sah_man_ref = _claimNo;
                _hdr.Sah_anal_2 = _sapNo;

                _hdr.Sah_anal_7 = _invoiceItem.Sum(x => x.Sad_tot_amt); //Tharindu 2018-03-12
                #endregion

                #region Invoice Auto Number - Credit Note
                MasterAutoNumber _auto = new MasterAutoNumber();
                string _prefix = _salesDAL.GetInvoicePrefix(_receiveCompany, _receiveProfitCenter, _invType);
                _auto.Aut_cate_cd = _receiveProfitCenter;
                _auto.Aut_cate_tp = "PC";
                _auto.Aut_direction = null;
                _auto.Aut_moduleid = "REV";
                _auto.Aut_start_char = "INREV";
                _auto.Aut_year = null;
                #endregion

                _invoiceItem.Where(X => X.Sad_itm_stus == "GOOD").ToList().ForEach(X => X.Sad_itm_stus = "GOD");
                CommonSaveReversal(_hdr, _invoiceItem, _auto, false, out _crnote);
                decimal _totalAmt = _invoiceItem.Sum(x => x.Sad_tot_amt);
                if (_system == "SCM")
                {
                    _ScmCommonDAL._emsSalesDAL = _salesDAL;
                    _ScmCommonDAL.upload_Sales(_crnote, _totalAmt);
                    _ScmCommonDAL.upload_MovementsPlus(_emsDataSet, _receiveLocation, _date, out _adjPlusDoc, _remarks);
                }

                foreach (RequestApprovalDetail _det in _itemLst.Where(x => x.Grad_anal8 == "CLAIM").ToList())
                {
                    // Tharindu TODO 
                    _salesDAL.UpdateWarrantyRequestClaimItem(_requestno, _det.Grad_req_param, _det.Grad_line, _crnote, _adjPlusDoc, _receiveProfitCenter, _receiveLocation);
                    // _ScmCommonDAL.UpdateWarrantyClaimInvoice(_det.Grad_req_param, Convert.ToInt32(_det.Grad_anal9), _det.Grad_anal1, Convert.ToDecimal(_det.Grad_anal2));
                }

                _salesDAL.UpdateWarrantyClaimRequest(_requestno);

                //_salesDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                //_ScmCommonDAL.ConnectionClose();
                //_inventoryRepDAL.ConnectionClose();
                //_trs.Complete();

                //}

                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _ScmCommonDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();

                _creditNote = _crnote;
                _adjPlusDocument = _adjPlusDoc;
                _msg = _message;
                _effects = 1;
                _effect = 1;
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();

                _creditNote = string.Empty;
                _adjPlusDocument = string.Empty;
                _msg = ex.Message;
                _effects = -1;
                _effect = -1;
            }
            return _effect;
        }

        //kapila
        public Boolean IsCheckServiceAgent(string _com, string _cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.IsCheckServiceAgent(_com, _cd);
        }

        #region receipt refund -Insurance / Registration

        public DataTable Get_vehinsubyRef(string refNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_vehinsubyRef(refNo);
        }

        public DataTable Get_vehRegbyref(string refNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_vehRegbyref(refNo);
        }

        #endregion

        public int CashConvertionApproval(RequestApprovalHeader _regReqHdr, List<RequestApprovalDetail> _regReqDet, List<RequestApprovalSerials> _regReqSer, RequestApprovalHeaderLog _regReqLogHdr, List<RequestApprovalDetailLog> _regReqLogDet, List<RequestApprovalSerialsLog> _regReqLogSer, MasterAutoNumber _regReqAuto, bool _regNeed, RequestApprovalHeader _insReqHdr, List<RequestApprovalDetail> _insReqDet, List<RequestApprovalSerials> _insReqSer, RequestApprovalHeaderLog _insReqLogHdr, List<RequestApprovalDetailLog> _insReqLogDet, List<RequestApprovalSerialsLog> _insReqLogSer, MasterAutoNumber _insReqAuto, bool _insNeed, List<RecieptHeader> _regReciept, List<RecieptItem> _regRecieptItem, MasterAutoNumber _regRecieptAuto, bool _regRecNeed, List<RecieptHeader> _insReciept, List<RecieptItem> _insRecieptItem, MasterAutoNumber _insRecieptAuto, bool _insRecNeed, bool _completeReg, bool _completeIns)
        {
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            _generalDAL = new GeneralDAL();
            ReptCommonDAL _reptDAL = new ReptCommonDAL();
            _salesDAL.ConnectionOpen();
            _inventoryDAL.ConnectionOpen();
            _generalDAL.ConnectionOpen();
            _reptDAL.ConnectionOpen();
            // using (TransactionScope tr = new TransactionScope())
            //{

            string _doc;
            string _reg;
            string _ins;
            //if (_regNeed)
            //{
            //    SaveSaleRevReqApp(null, null, null, null, _regReqHdr, _regReqDet, _regReqSer, _regReqAuto, null, null, null, _regReqLogHdr, _regReqLogDet, _regReqLogSer, true, null, null, null, null, null, null, null, false, out _doc, out _reg, out _ins);
            //}
            //if (_insNeed) { 

            //}



            //APPROVE REQUESTS
            if (_completeIns || _completeReg)
            {
                //complete request
                if (_completeIns && _completeReg)
                {
                    _generalDAL.UpdateApprovalStatus(_regReqHdr);
                    _generalDAL.UpdateApprovalStatus(_insReqHdr);
                }
                else if (_completeIns)
                {
                    _generalDAL.UpdateApprovalStatus(_insReqHdr);
                }
                else
                {
                    _generalDAL.UpdateApprovalStatus(_regReqHdr);
                }

            }
            //USER PLACE REQUEST
            else if (_regNeed || _insNeed)
            {
                //send request
                if (_regNeed && _insNeed)
                {
                    SaveCashConvertionAppReq(_regReqHdr, _regReqDet, _regReqSer, _regReqAuto, _regReqLogHdr, _regReqLogDet, _regReqLogSer);
                    SaveCashConvertionAppReq(_insReqHdr, _insReqDet, _insReqSer, _insReqAuto, _insReqLogHdr, _insReqLogDet, _insReqLogSer);

                }
                else if (_regNeed)
                {
                    SaveCashConvertionAppReq(_regReqHdr, _regReqDet, _regReqSer, _regReqAuto, _regReqLogHdr, _regReqLogDet, _regReqLogSer);
                }
                else
                {
                    SaveCashConvertionAppReq(_insReqHdr, _insReqDet, _insReqSer, _insReqAuto, _insReqLogHdr, _insReqLogDet, _insReqLogSer);
                }
            }


            //01. USER SELECT PLACE REQUES AND DO CASH CONVERTION
            //02. IF APPROVED REQEST FOUND
            if (_regRecNeed)
            {

                foreach (RecieptHeader rec in _regReciept)
                {
                    //get auto number
                    _inventoryDAL = new InventoryDAL();
                    _inventoryDAL.ConnectionOpen();
                    string recNo;
                    string invNo = "";
                    recNo = rec.Sar_receipt_no;
                    MasterAutoNumber _regAuto = _inventoryDAL.GetAutoNumber(_regRecieptAuto.Aut_moduleid, _regRecieptAuto.Aut_direction, _regRecieptAuto.Aut_start_char, _regRecieptAuto.Aut_cate_tp, _regRecieptAuto.Aut_cate_cd, _regRecieptAuto.Aut_modify_dt, _regRecieptAuto.Aut_year);
                    // _regAuto.Aut_modify_dt = null;
                    //_regAuto.Aut_year = null;
                    string _ReciptNo = _regAuto.Aut_cate_cd + "-" + _regAuto.Aut_start_char + "-" + _regAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_regAuto);

                    rec.Sar_receipt_no = _ReciptNo;
                    int seqNo = _inventoryDAL.GetSerialID();
                    rec.Sar_seq_no = seqNo;
                    _salesDAL.SaveReceiptHeader(rec);

                    //get receipt items for that receipt
                    List<RecieptItem> tem = (from _res in _regRecieptItem
                                             where _res.Sard_inv_no == rec.Sar_ref_doc
                                             select _res).ToList<RecieptItem>();
                    if (tem != null && tem.Count > 0)
                    {
                        foreach (RecieptItem recItm in tem)
                        {
                            recItm.Sard_receipt_no = _ReciptNo;
                            recItm.Sard_seq_no = seqNo;
                            recItm.Sard_line_no = 1;
                            invNo = recItm.Sard_inv_no;
                            _salesDAL.SaveReceiptItem(recItm);
                        }
                    }
                    VehicalRegistration reg = _generalDAL.GetVehicalRegistrations(recNo)[0];
                    reg.P_svrt_prnt_stus = 2;
                    _generalDAL.SaveVehicalRegistration(reg);


                    //REMOVE RESERVATION
                    //01 Delete from report db
                    _reptDAL.DeleteResSerial(invNo, rec.Sar_com_cd, reg.P_srvt_itm_cd, reg.P_svrt_engine, reg.P_svrt_chassis);
                    _salesDAL.UpdateRegResAvailability(rec.Sar_com_cd, reg.P_srvt_itm_cd, reg.P_svrt_engine, reg.P_svrt_chassis, 1);
                    //end
                }
            }

            if (_insRecNeed)
            {
                foreach (RecieptHeader rec in _insReciept)
                {
                    //get auto number
                    string recNo;
                    recNo = rec.Sar_receipt_no;
                    MasterAutoNumber _insAuto = _inventoryDAL.GetAutoNumber(_insRecieptAuto.Aut_moduleid, _insRecieptAuto.Aut_direction, _insRecieptAuto.Aut_start_char, _insRecieptAuto.Aut_cate_tp, _insRecieptAuto.Aut_cate_cd, _insRecieptAuto.Aut_modify_dt, _insRecieptAuto.Aut_year);
                    // _regAuto.Aut_modify_dt = null;
                    //_regAuto.Aut_year = null;

                    string _ReciptNo = _insAuto.Aut_cate_cd + "-" + _insAuto.Aut_start_char + "-" + _insAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_insAuto);

                    rec.Sar_receipt_no = _ReciptNo;
                    int seqNo = _inventoryDAL.GetSerialID();
                    rec.Sar_seq_no = seqNo;
                    _salesDAL.SaveReceiptHeader(rec);

                    //get receipt items for that receipt
                    List<RecieptItem> tem = (from _res in _insRecieptItem
                                             where _res.Sard_inv_no == rec.Sar_ref_doc
                                             select _res).ToList<RecieptItem>();
                    if (tem != null && tem.Count > 0)
                    {
                        foreach (RecieptItem recItm in tem)
                        {
                            recItm.Sard_seq_no = seqNo;
                            recItm.Sard_receipt_no = _ReciptNo;
                            recItm.Sard_line_no = 1;
                            _salesDAL.SaveReceiptItem(recItm);
                        }
                    }
                    VehicleInsuarance ins = _generalDAL.GetVehicalInsurance(recNo, "")[0];
                    ins.Svit_cvnt_issue = 2;
                    _generalDAL.SaveVehicalInsurance(ins);
                }
            }

            // tr.Complete();
            // }
            _generalDAL.ConnectionClose();
            _inventoryDAL.ConnectionClose();
            _salesDAL.ConnectionClose();
            return 1;
        }
        //written by darshana on 05-03-2013
        public List<VehicalRegistration> GetVehicalRegByRefNo(string _recNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehicalRegByRefNo(_recNo);
        }

        //written by darshana on 05-03-2013
        public List<VehicleInsuarance> GetVehicalInsByRefNo(string _recNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehicalInsByRefNo(_recNo);
        }

        //Modify by Rukshan 22/sep/2015 add parameter _IsTemp
        public Int32 SaveReversalNew(InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, MasterAutoNumber _invoiceAuto, Boolean _isHP, out  string _invoiceNo, InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, MasterAutoNumber _regRevAuto, List<RecieptHeader> _regRecHdr, List<VehicalRegistration> _revRegDet, Boolean _isregRefund, MasterAutoNumber _insRevAuto, List<RecieptHeader> _insRecHdr, List<VehicleInsuarance> _revInsDet, Boolean _isinsRefund, Boolean _isOthSaleRev, string _RevPC, RequestApprovalHeader _refAppHdr, List<RequestApprovalDetail> _refAppDet, MasterAutoNumber _refAppAuto, RequestApprovalHeaderLog _refAppHdrLog, List<RequestApprovalDetailLog> _refAppDetLog, Boolean _isCashRef, out string _docNo, bool _IsTemp = false)
        {

            //string _invNo = "";
            //string _SRNNo = "";
            Int32 _effect = 0;
            decimal _totalRevAmt = 0;
            string _othLoc = "";

            // using (TransactionScope _tr = new TransactionScope())
            try
            {


                _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen(); _salesDAL.BeginTransaction();
                _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen(); _inventoryDAL.BeginTransaction();
                _inventoryRepDAL = new ReptCommonDAL(); _inventoryRepDAL.ConnectionOpen(); _inventoryRepDAL.BeginTransaction();
                _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen(); _generalDAL.BeginTransaction();

                _CustServiceDAL = new CustServiceDAL(); _CustServiceDAL.ConnectionOpen(); _CustServiceDAL.BeginTransaction();

                Dictionary<int, string> _revReceiptSeqNo = new Dictionary<int, string>();
                Dictionary<int, string> _revInsReceiptSeqNo = new Dictionary<int, string>();
                InventoryHeader _inventoryMovementAOD = new InventoryHeader();

                _inventoryMovementAOD = _inventoryMovementHeader;
                _othLoc = _inventoryMovementAOD.Ith_oth_loc;

                if (_IsTemp == true)
                {
                    InventoryBLL _inventoryBLL = new InventoryBLL();

                    foreach (InvoiceItem Item in _invoiceItem)
                    {
                        ReptPickSerials Serial = new ReptPickSerials();
                        Serial.Tus_itm_cd = Item.Sad_itm_cd;
                        Serial.Tus_itm_stus = Item.Sad_itm_stus;
                        Serial.Tus_qty = Item.Sad_qty;
                        Serial.Tus_itm_line = Item.Sad_itm_line;
                        Serial.Tus_doc_no = Item.Sad_inv_no;

                        //Serial.Tus_bin = Item.;
                        _reptPickSerials.Add(Serial);
                    }
                    _effect = _inventoryBLL.SaveMovementTemp(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, out _docNo);

                    _inventoryDAL.TransactionCommit();
                    _salesDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();
                    _inventoryRepDAL.TransactionCommit();
                    _generalDAL.TransactionCommit();
                    _CustServiceDAL.TransactionCommit();
                    _effect = 1;
                    _invoiceNo = _docNo;
                }
                else
                {
                    foreach (var itm in _reptPickSerials)
                    {
                        DataTable _dtl = _inventoryDAL.GetJobForSerial(_inventoryMovementHeader.Ith_com, itm.Tus_itm_cd, itm.Tus_ser_1, itm.Tus_ser_id);
                        if (_dtl != null)
                        {
                            if (_dtl.Rows.Count > 0)
                            {
                                _effect = -1;
                                _invoiceNo = "Unable to reverce, Job Raised for serial   - " + itm.Tus_ser_1;
                                _docNo = _invoiceNo;
                                _salesDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                _inventoryRepDAL.TransactionRollback();
                                _generalDAL.TransactionRollback();

                                _CustServiceDAL.TransactionRollback();
                                return _effect;
                            }
                        }

                        if (itm.Tus_ser_1 != "" && itm.Tus_ser_1 != "NA" && itm.Tus_ser_1 != "N/A")
                        {
                            Boolean _IsSerialFound = _inventoryDAL.IsRccSerialFoundJob(itm.Tus_itm_cd, itm.Tus_ser_1, _inventoryMovementHeader.Ith_job_no);
                            if (_IsSerialFound == true)
                            {
                                _effect = -1;
                                _invoiceNo = "Unable to to reverce, RCC Raised for serial - " + itm.Tus_ser_1;
                                _docNo = _invoiceNo;
                                _salesDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                _inventoryRepDAL.TransactionRollback();
                                _generalDAL.TransactionRollback();
                                _CustServiceDAL.TransactionRollback();
                                return _effect;
                            }
                        }



                    }


                    SaveReversalForCommon(_invoiceHeader, _invoiceItem, _invoiceAuto, _isHP, out   _invoiceNo, _inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub, _masterAutoNumber, out  _docNo);
                    #region Reverse Loyalty Points
                    InvoiceLoyalty _loyaltypluspt = _salesDAL.GetInvoiceLoyalty(_invoiceHeader.Sah_ref_doc);
                    if (_loyaltypluspt != null && !string.IsNullOrEmpty(_loyaltypluspt.Stlt_inv_no))
                    {
                        MasterBusinessEntity _entity = _salesDAL.GetBusinessCompanyDetail(_invoiceHeader.Sah_com, _invoiceHeader.Sah_cus_cd, null, null, "C");

                        _salesDAL.RedeemLoyaltyPointCancel(_invoiceHeader.Sah_anal_6, _invoiceHeader.Sah_cus_cd, _loyaltypluspt.Stlt_pt);
                    }
                    #endregion

                    if (!string.IsNullOrEmpty(_othLoc))
                    {
                        InventoryBLL _invAOD = new InventoryBLL();
                        MasterAutoNumber _newAODOut = new MasterAutoNumber();
                        string _AODNo = "";


                        _inventoryMovementAOD.Ith_doc_tp = "AOD";
                        _inventoryMovementAOD.Ith_direct = false;
                        _inventoryMovementAOD.Ith_cate_tp = "";
                        _inventoryMovementAOD.Ith_oth_docno = "";
                        _inventoryMovementAOD.Ith_oth_loc = _othLoc;
                        _inventoryMovementAOD.Ith_pc = "";
                        _inventoryMovementAOD.Ith_seq_no = 0;

                        _newAODOut.Aut_cate_cd = _inventoryMovementAOD.Ith_loc;
                        _newAODOut.Aut_moduleid = "AOD";
                        _newAODOut.Aut_start_char = "AOD";
                        _newAODOut.Aut_direction = 0;
                        _newAODOut.Aut_cate_tp = "LOC";
                        _newAODOut.Aut_modify_dt = null;
                        _newAODOut.Aut_year = Convert.ToDateTime(_inventoryMovementAOD.Ith_doc_date).Year;


                        _effect = _invAOD.AODWithCreditNote(_inventoryMovementAOD, _reptPickSerials, _reptPickSerialsSub, _newAODOut, out _AODNo, _inventoryRepDAL, _inventoryDAL, _ScmCommonDAL);

                    }

                    _salesDAL.UpdateRequestCloseStatus(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_anal_4, _invoiceHeader.Sah_anal_3, "F", _invoiceHeader.Sah_cre_by);

                    foreach (InvoiceItem _tmprev in _invoiceItem)
                    {
                        _totalRevAmt = _totalRevAmt + _tmprev.Sad_tot_amt;
                    }

                    //registration receipt refund________________
                    if (_isregRefund == true)
                    {
                        //reverse applicable registration receipts.
                        List<RecieptHeader> _hpReversReceiptHeaderActual = new List<RecieptHeader>();
                        decimal _regAmt = 0;
                        if (_regRecHdr != null)
                        {
                            foreach (var _itm in _regRecHdr)
                            {
                                RecieptHeader _hdr = new RecieptHeader();
                                _hdr.Sar_ref_doc = _itm.Sar_receipt_no;
                                _hdr.Sar_seq_no = _inventoryDAL.GetSerialID();
                                _hdr.Sar_receipt_no = _hdr.Sar_seq_no.ToString();
                                _hdr.Sar_manual_ref_no = _itm.Sar_manual_ref_no;
                                _hdr.Sar_prefix = _itm.Sar_prefix;
                                _revReceiptSeqNo.Add(_hdr.Sar_seq_no, _hdr.Sar_prefix);
                                _hdr.Sar_tot_settle_amt = _itm.Sar_tot_settle_amt;
                                _hdr.Sar_direct = false;
                                _hdr.Sar_receipt_date = _invoiceHeader.Sah_dt;
                                _hdr.Sar_acc_no = _itm.Sar_acc_no;
                                _hdr.Sar_act = true;
                                _hdr.Sar_com_cd = _itm.Sar_com_cd;
                                _hdr.Sar_comm_amt = _itm.Sar_comm_amt;
                                _hdr.Sar_anal_5 = _itm.Sar_anal_5;
                                _hdr.Sar_create_by = _invoiceHeader.Sah_cre_by;
                                _hdr.Sar_create_when = DateTime.Now;
                                _hdr.Sar_currency_cd = _itm.Sar_currency_cd;
                                _hdr.Sar_debtor_add_1 = _itm.Sar_debtor_add_1;
                                _hdr.Sar_debtor_add_2 = _itm.Sar_debtor_add_2;
                                _hdr.Sar_debtor_cd = _itm.Sar_debtor_cd;
                                _hdr.Sar_debtor_name = _itm.Sar_debtor_name;
                                _hdr.Sar_direct_deposit_bank_cd = _itm.Sar_direct_deposit_bank_cd;
                                _hdr.Sar_direct_deposit_branch = _itm.Sar_direct_deposit_branch;
                                _hdr.Sar_epf_rate = _itm.Sar_epf_rate;
                                _hdr.Sar_esd_rate = _itm.Sar_esd_rate;
                                _hdr.Sar_is_mgr_iss = _itm.Sar_is_mgr_iss;
                                _hdr.Sar_is_oth_shop = _itm.Sar_is_oth_shop;
                                _hdr.Sar_is_used = _itm.Sar_is_used;
                                _hdr.Sar_mob_no = _itm.Sar_mob_no;
                                _hdr.Sar_mod_by = _invoiceHeader.Sah_mod_by;
                                _hdr.Sar_mod_when = DateTime.Now;
                                _hdr.Sar_nic_no = _itm.Sar_nic_no;
                                _hdr.Sar_oth_sr = _itm.Sar_oth_sr;
                                _hdr.Sar_profit_center_cd = _itm.Sar_profit_center_cd;
                                if (_itm.Sar_receipt_type == "VHREG")
                                { _hdr.Sar_receipt_type = "VHREGRF"; }
                                else if (_itm.Sar_receipt_type == "VHINS")
                                { _hdr.Sar_receipt_type = "VHINSRF"; }
                                _hdr.Sar_remarks = string.Empty;
                                _hdr.Sar_ser_job_no = string.Empty;
                                _hdr.Sar_session_id = _invoiceHeader.Sah_session_id;
                                _hdr.Sar_tel_no = _itm.Sar_tel_no;
                                _hdr.Sar_uploaded_to_finance = false;
                                _hdr.Sar_used_amt = 0;
                                _hdr.Sar_wht_rate = 0;
                                _hdr.Sar_anal_3 = _itm.Sar_anal_3;
                                _hpReversReceiptHeaderActual.Add(_hdr);
                                _regAmt = _regAmt + _hdr.Sar_tot_settle_amt;
                            }

                            #region Save Revers receipt

                            if (_hpReversReceiptHeaderActual != null)
                                if (_hpReversReceiptHeaderActual.Count > 0)
                                {
                                    foreach (RecieptHeader _hdr in _hpReversReceiptHeaderActual)
                                    {

                                        _salesDAL.SaveReceiptHeader(_hdr);

                                        //List<RecieptItem> _recDet = new List<RecieptItem>();
                                        // _recDet = _salesDAL.GetReceiptDetails(_hdr.Sar_ref_doc);
                                        RecieptItem _itm = new RecieptItem();

                                        _itm.Sard_seq_no = _hdr.Sar_seq_no;
                                        _itm.Sard_line_no = 1;
                                        _itm.Sard_receipt_no = Convert.ToString(_hdr.Sar_seq_no);
                                        _itm.Sard_inv_no = _invoiceHeader.Sah_ref_doc;
                                        _itm.Sard_pay_tp = "CASH";
                                        _itm.Sard_ref_no = null;
                                        _itm.Sard_chq_bank_cd = null;
                                        _itm.Sard_chq_branch = null;
                                        _itm.Sard_deposit_bank_cd = null;
                                        _itm.Sard_deposit_branch = null;
                                        _itm.Sard_credit_card_bank = null;
                                        _itm.Sard_cc_tp = null;
                                        //_itm.Sard_cc_expiry_dt = null;
                                        _itm.Sard_cc_is_promo = false;
                                        //_itm.Sard_cc_period = _det.Sard_cc_period;
                                        _itm.Sard_gv_issue_loc = null;
                                        //_itm.Sard_gv_issue_dt = _det.Sard_gv_issue_dt;
                                        _itm.Sard_settle_amt = _hdr.Sar_tot_settle_amt;
                                        //_itm.Sard_sim_ser = _det.Sard_sim_ser;
                                        //_itm.Sard_anal_1 = _det.Sard_anal_1;
                                        //_itm.Sard_anal_2 = _det.Sard_anal_2;
                                        //_itm.Sard_anal_3 = _det.Sard_anal_3;
                                        //_itm.Sard_anal_4 = _det.Sard_anal_4;
                                        //_itm.Sard_anal_5 = _det.Sard_anal_5;
                                        _salesDAL.SaveReceiptItem(_itm);

                                    }
                                }

                            #endregion

                            foreach (KeyValuePair<int, string> _lst in _revReceiptSeqNo)
                            {
                                _regRevAuto.Aut_modify_dt = null;
                                _regRevAuto.Aut_year = null;
                                _regRevAuto.Aut_start_char = _lst.Value;

                                Int32 _autoNo = _inventoryDAL.GetAutoNumber(_regRevAuto.Aut_moduleid, _regRevAuto.Aut_direction, _regRevAuto.Aut_start_char, _regRevAuto.Aut_cate_tp, _regRevAuto.Aut_cate_cd, _regRevAuto.Aut_modify_dt, _regRevAuto.Aut_year).Aut_number;
                                string _revReciptNo = _regRevAuto.Aut_cate_cd + _regRevAuto.Aut_start_char + string.Format("{0:0000}", _autoNo);

                                //MasterAutoNumber _reversRecipt = _inventoryDAL.GetAutoNumber(_regRevAuto.Aut_moduleid, _regRevAuto.Aut_direction, _regRevAuto.Aut_start_char, _regRevAuto.Aut_cate_tp, _regRevAuto.Aut_cate_cd, _regRevAuto.Aut_modify_dt, _regRevAuto.Aut_year);
                                //_reversRecipt.Aut_modify_dt = null;
                                //_reversRecipt.Aut_year = null;
                                //_reversRecipt.Aut_start_char = _lst.Value;
                                //_reversRecipt.Aut_direction = null;
                                //string _revReciptNo = _reversRecipt.Aut_cate_cd + _reversRecipt.Aut_start_char + _reversRecipt.Aut_number.ToString("0000", CultureInfo.InvariantCulture);
                                _inventoryDAL.UpdateAutoNumber(_regRevAuto);
                                _salesDAL.UpdateInvoiceReceipts("-1", _revReciptNo, -1, _lst.Key);
                            }

                            if (_isOthSaleRev == true)
                            {
                                //03 016 VEH. Reg. Refund by Other PC
                                RemitanceSummaryDetail _othRegRev = new RemitanceSummaryDetail();
                                decimal _revRegwkNo = 0;
                                int _weekNo = 0;

                                _othRegRev = new RemitanceSummaryDetail();
                                _othRegRev.Rem_com = _invoiceHeader.Sah_com;
                                _othRegRev.Rem_pc = _invoiceHeader.Sah_pc;
                                _othRegRev.Rem_dt = _invoiceHeader.Sah_dt;
                                _othRegRev.Rem_sec = "03";
                                _othRegRev.Rem_cd = "016";
                                _othRegRev.Rem_sh_desc = "VEH. Reg. Refund by Other PC";
                                _othRegRev.Rem_lg_desc = "VEH. REG. REFUND BY OTHER PC";
                                _othRegRev.Rem_val = _regAmt;
                                _othRegRev.Rem_val_final = _regAmt;
                                _weekNo = _generalDAL.GetWeek(Convert.ToDateTime(_invoiceHeader.Sah_dt).Date, out _revRegwkNo, _invoiceHeader.Sah_com);
                                _othRegRev.Rem_week = _revRegwkNo + "S";
                                _othRegRev.Rem_ref_no = _invoiceNo;
                                _othRegRev.Rem_rmk = _invoiceHeader.Sah_ref_doc;
                                _othRegRev.Rem_cr_acc = null;
                                _othRegRev.Rem_db_acc = null;
                                _othRegRev.Rem_del_alw = false;
                                _othRegRev.Rem_cre_by = _invoiceHeader.Sah_cre_by;
                                _othRegRev.Rem_cre_dt = _invoiceHeader.Sah_dt;
                                _othRegRev.Rem_is_sos = true;
                                _othRegRev.Rem_is_dayend = true;
                                _othRegRev.Rem_is_sun = true;
                                _othRegRev.Rem_cat = 17;
                                _othRegRev.Rem_add = 0;
                                _othRegRev.Rem_ded = 0;
                                _othRegRev.Rem_net = _regAmt;
                                _othRegRev.Rem_epf = 0;
                                _othRegRev.Rem_esd = 0;
                                _othRegRev.Rem_wht = 0;
                                _othRegRev.Rem_add_fin = 0;
                                _othRegRev.Rem_ded_fin = 0;
                                _othRegRev.Rem_net_fin = _regAmt;
                                _othRegRev.Rem_rmk_fin = _invoiceHeader.Sah_ref_doc;
                                _othRegRev.Rem_bnk_cd = null;
                                _othRegRev.Rem_is_rem_sum = true;
                                _salesDAL.SaveRemSummaryForFinalCreditComm(_othRegRev);

                                //04 006 Other PC VEH. Reg. Refunds
                                _othRegRev = new RemitanceSummaryDetail();
                                _othRegRev.Rem_com = _invoiceHeader.Sah_com;
                                _othRegRev.Rem_pc = _RevPC;
                                _othRegRev.Rem_dt = _invoiceHeader.Sah_dt;
                                _othRegRev.Rem_sec = "04";
                                _othRegRev.Rem_cd = "006";
                                _othRegRev.Rem_sh_desc = "Other PC VEH. Reg. Refunds";
                                _othRegRev.Rem_lg_desc = "OTHER PC VEH. REG. REFUNDS";
                                _othRegRev.Rem_val = _regAmt;
                                _othRegRev.Rem_val_final = _regAmt;
                                _weekNo = _generalDAL.GetWeek(Convert.ToDateTime(_invoiceHeader.Sah_dt).Date, out _revRegwkNo, _invoiceHeader.Sah_com);
                                _othRegRev.Rem_week = _revRegwkNo + "S";
                                _othRegRev.Rem_ref_no = _invoiceNo;
                                _othRegRev.Rem_rmk = _invoiceHeader.Sah_ref_doc;
                                _othRegRev.Rem_cr_acc = null;
                                _othRegRev.Rem_db_acc = null;
                                _othRegRev.Rem_del_alw = false;
                                _othRegRev.Rem_cre_by = _invoiceHeader.Sah_cre_by;
                                _othRegRev.Rem_cre_dt = _invoiceHeader.Sah_dt;
                                _othRegRev.Rem_is_sos = true;
                                _othRegRev.Rem_is_dayend = true;
                                _othRegRev.Rem_is_sun = true;
                                _othRegRev.Rem_cat = 17;
                                _othRegRev.Rem_add = 0;
                                _othRegRev.Rem_ded = 0;
                                _othRegRev.Rem_net = _regAmt;
                                _othRegRev.Rem_epf = 0;
                                _othRegRev.Rem_esd = 0;
                                _othRegRev.Rem_wht = 0;
                                _othRegRev.Rem_add_fin = 0;
                                _othRegRev.Rem_ded_fin = 0;
                                _othRegRev.Rem_net_fin = _regAmt;
                                _othRegRev.Rem_rmk_fin = _invoiceHeader.Sah_ref_doc;
                                _othRegRev.Rem_bnk_cd = null;
                                _othRegRev.Rem_is_rem_sum = true;
                                _salesDAL.SaveRemSummaryForFinalCreditComm(_othRegRev);
                            }
                        }

                        //update registration details and release reservation if reserve item
                        if (_revRegDet != null)
                        {
                            foreach (VehicalRegistration reg in _revRegDet)
                            {
                                _salesDAL.UpdateRegTxn(reg.P_svrt_com, reg.P_svrt_pc, reg.P_svrt_inv_no, reg.P_srvt_ref_no, reg.P_srvt_itm_cd, reg.P_svrt_engine, reg.P_svrt_chassis, 2);
                                _inventoryRepDAL.DeleteResSerial(reg.P_svrt_inv_no, reg.P_svrt_com, reg.P_srvt_itm_cd, reg.P_svrt_engine, reg.P_svrt_chassis);
                                _salesDAL.UpdateRegResAvailability(reg.P_svrt_com, reg.P_srvt_itm_cd, reg.P_svrt_engine, reg.P_svrt_chassis, 1);
                            }

                        }

                        if (_revRegDet != null)
                        {
                            List<ReptPickSerials> tempSer = new List<ReptPickSerials>();
                            tempSer = _inventoryRepDAL.Get_TEMP_PICK_SER_BY_BASEDOC(_invoiceHeader.Sah_com, _invoiceHeader.Sah_ref_doc);

                            if (tempSer == null)
                            {
                                _inventoryRepDAL.DeleteResHdr(_invoiceHeader.Sah_com, _invoiceHeader.Sah_ref_doc);
                            }
                        }
                    }


                    //insuarance receipt refund_________________
                    if (_isinsRefund == true)
                    {
                        //reverse applicable registration receipts.
                        List<RecieptHeader> _hpReversInsReceiptHeaderActual = new List<RecieptHeader>();
                        decimal _insRevVal = 0;
                        if (_insRecHdr != null)
                        {
                            foreach (var _itm in _insRecHdr)
                            {
                                RecieptHeader _hdr = new RecieptHeader();
                                _hdr.Sar_ref_doc = _itm.Sar_receipt_no;
                                _hdr.Sar_seq_no = _inventoryDAL.GetSerialID();
                                _hdr.Sar_receipt_no = _hdr.Sar_seq_no.ToString();
                                _hdr.Sar_manual_ref_no = _itm.Sar_manual_ref_no;
                                _hdr.Sar_prefix = _itm.Sar_prefix;
                                _revInsReceiptSeqNo.Add(_hdr.Sar_seq_no, _hdr.Sar_prefix);
                                _hdr.Sar_tot_settle_amt = _itm.Sar_tot_settle_amt;
                                _hdr.Sar_direct = false;
                                _hdr.Sar_receipt_date = _invoiceHeader.Sah_dt;
                                _hdr.Sar_acc_no = _itm.Sar_acc_no;
                                _hdr.Sar_act = true;
                                _hdr.Sar_com_cd = _itm.Sar_com_cd;
                                _hdr.Sar_comm_amt = _itm.Sar_comm_amt;
                                _hdr.Sar_anal_5 = _itm.Sar_anal_5;
                                _hdr.Sar_create_by = _invoiceHeader.Sah_cre_by;
                                _hdr.Sar_create_when = DateTime.Now;
                                _hdr.Sar_currency_cd = _itm.Sar_currency_cd;
                                _hdr.Sar_debtor_add_1 = _itm.Sar_debtor_add_1;
                                _hdr.Sar_debtor_add_2 = _itm.Sar_debtor_add_2;
                                _hdr.Sar_debtor_cd = _itm.Sar_debtor_cd;
                                _hdr.Sar_debtor_name = _itm.Sar_debtor_name;
                                _hdr.Sar_direct_deposit_bank_cd = _itm.Sar_direct_deposit_bank_cd;
                                _hdr.Sar_direct_deposit_branch = _itm.Sar_direct_deposit_branch;
                                _hdr.Sar_epf_rate = _itm.Sar_epf_rate;
                                _hdr.Sar_esd_rate = _itm.Sar_esd_rate;
                                _hdr.Sar_is_mgr_iss = _itm.Sar_is_mgr_iss;
                                _hdr.Sar_is_oth_shop = _itm.Sar_is_oth_shop;
                                _hdr.Sar_is_used = _itm.Sar_is_used;
                                _hdr.Sar_mob_no = _itm.Sar_mob_no;
                                _hdr.Sar_mod_by = _invoiceHeader.Sah_mod_by;
                                _hdr.Sar_mod_when = DateTime.Now;
                                _hdr.Sar_nic_no = _itm.Sar_nic_no;
                                _hdr.Sar_oth_sr = _itm.Sar_oth_sr;
                                _hdr.Sar_profit_center_cd = _itm.Sar_profit_center_cd;
                                if (_itm.Sar_receipt_type == "VHREG")
                                { _hdr.Sar_receipt_type = "VHREGRF"; }
                                else if (_itm.Sar_receipt_type == "VHINS")
                                { _hdr.Sar_receipt_type = "VHINSRF"; }
                                _hdr.Sar_remarks = string.Empty;
                                _hdr.Sar_ser_job_no = string.Empty;
                                _hdr.Sar_session_id = _invoiceHeader.Sah_session_id;
                                _hdr.Sar_tel_no = _itm.Sar_tel_no;
                                _hdr.Sar_uploaded_to_finance = false;
                                _hdr.Sar_used_amt = 0;
                                _hdr.Sar_wht_rate = 0;
                                _hdr.Sar_anal_3 = _itm.Sar_anal_3;
                                _hpReversInsReceiptHeaderActual.Add(_hdr);
                                _insRevVal = _insRevVal + _hdr.Sar_tot_settle_amt;
                            }

                            #region Save Revers receipt

                            if (_hpReversInsReceiptHeaderActual != null)
                                if (_hpReversInsReceiptHeaderActual.Count > 0)
                                {
                                    foreach (RecieptHeader _hdr in _hpReversInsReceiptHeaderActual)
                                    {

                                        _salesDAL.SaveReceiptHeader(_hdr);

                                        //List<RecieptItem> _recDet = new List<RecieptItem>();
                                        // _recDet = _salesDAL.GetReceiptDetails(_hdr.Sar_ref_doc);
                                        RecieptItem _itm = new RecieptItem();

                                        _itm.Sard_seq_no = _hdr.Sar_seq_no;
                                        _itm.Sard_line_no = 1;
                                        _itm.Sard_receipt_no = Convert.ToString(_hdr.Sar_seq_no);
                                        _itm.Sard_inv_no = _invoiceHeader.Sah_ref_doc;
                                        _itm.Sard_pay_tp = "CASH";
                                        _itm.Sard_ref_no = null;
                                        _itm.Sard_chq_bank_cd = null;
                                        _itm.Sard_chq_branch = null;
                                        _itm.Sard_deposit_bank_cd = null;
                                        _itm.Sard_deposit_branch = null;
                                        _itm.Sard_credit_card_bank = null;
                                        _itm.Sard_cc_tp = null;
                                        //_itm.Sard_cc_expiry_dt = null;
                                        _itm.Sard_cc_is_promo = false;
                                        //_itm.Sard_cc_period = _det.Sard_cc_period;
                                        _itm.Sard_gv_issue_loc = null;
                                        //_itm.Sard_gv_issue_dt = _det.Sard_gv_issue_dt;
                                        _itm.Sard_settle_amt = _hdr.Sar_tot_settle_amt;
                                        //_itm.Sard_sim_ser = _det.Sard_sim_ser;
                                        //_itm.Sard_anal_1 = _det.Sard_anal_1;
                                        //_itm.Sard_anal_2 = _det.Sard_anal_2;
                                        //_itm.Sard_anal_3 = _det.Sard_anal_3;
                                        //_itm.Sard_anal_4 = _det.Sard_anal_4;
                                        //_itm.Sard_anal_5 = _det.Sard_anal_5;
                                        _salesDAL.SaveReceiptItem(_itm);

                                    }
                                }

                            #endregion


                            foreach (KeyValuePair<int, string> _lst in _revInsReceiptSeqNo)
                            {
                                _insRevAuto.Aut_modify_dt = null;
                                _insRevAuto.Aut_year = null;
                                _insRevAuto.Aut_start_char = _lst.Value;
                                Int32 _autoNo = _inventoryDAL.GetAutoNumber(_insRevAuto.Aut_moduleid, _insRevAuto.Aut_direction, _insRevAuto.Aut_start_char, _insRevAuto.Aut_cate_tp, _insRevAuto.Aut_cate_cd, _insRevAuto.Aut_modify_dt, _insRevAuto.Aut_year).Aut_number;
                                string _revInsReciptNo = _insRevAuto.Aut_cate_cd + _insRevAuto.Aut_start_char + string.Format("{0:0000}", _autoNo);

                                //MasterAutoNumber _reversInsRecipt = _inventoryDAL.GetAutoNumber(_insRevAuto.Aut_moduleid, _insRevAuto.Aut_direction, _insRevAuto.Aut_start_char, _insRevAuto.Aut_cate_tp, _insRevAuto.Aut_cate_cd, _insRevAuto.Aut_modify_dt, _insRevAuto.Aut_year);
                                //_reversInsRecipt.Aut_modify_dt = null;
                                //_reversInsRecipt.Aut_year = null;
                                //_reversInsRecipt.Aut_start_char = _lst.Value;
                                //_reversInsRecipt.Aut_direction = null;
                                // string _revInsReciptNo = _reversInsRecipt.Aut_cate_cd + _reversInsRecipt.Aut_start_char + _reversInsRecipt.Aut_number.ToString("0000", CultureInfo.InvariantCulture);
                                _inventoryDAL.UpdateAutoNumber(_insRevAuto);
                                _salesDAL.UpdateInvoiceReceipts("-1", _revInsReciptNo, -1, _lst.Key);
                            }


                            if (_isOthSaleRev == true)
                            {
                                //03 017 VEH. Insu. Refund by Other PC
                                RemitanceSummaryDetail _othRegRev = new RemitanceSummaryDetail();
                                decimal _revRegwkNo = 0;
                                int _weekNo = 0;

                                _othRegRev = new RemitanceSummaryDetail();
                                _othRegRev.Rem_com = _invoiceHeader.Sah_com;
                                _othRegRev.Rem_pc = _invoiceHeader.Sah_pc;
                                _othRegRev.Rem_dt = _invoiceHeader.Sah_dt;
                                _othRegRev.Rem_sec = "03";
                                _othRegRev.Rem_cd = "017";
                                _othRegRev.Rem_sh_desc = "VEH. Insu. Refund by Other PC";
                                _othRegRev.Rem_lg_desc = "VEH. INSU. REFUND BY OTHER PC";
                                _othRegRev.Rem_val = _insRevVal;
                                _othRegRev.Rem_val_final = _insRevVal;
                                _weekNo = _generalDAL.GetWeek(Convert.ToDateTime(_invoiceHeader.Sah_dt).Date, out _revRegwkNo, _invoiceHeader.Sah_com);
                                _othRegRev.Rem_week = _revRegwkNo + "S";
                                _othRegRev.Rem_ref_no = _invoiceNo;
                                _othRegRev.Rem_rmk = _invoiceHeader.Sah_ref_doc;
                                _othRegRev.Rem_cr_acc = null;
                                _othRegRev.Rem_db_acc = null;
                                _othRegRev.Rem_del_alw = false;
                                _othRegRev.Rem_cre_by = _invoiceHeader.Sah_cre_by;
                                _othRegRev.Rem_cre_dt = _invoiceHeader.Sah_dt;
                                _othRegRev.Rem_is_sos = true;
                                _othRegRev.Rem_is_dayend = true;
                                _othRegRev.Rem_is_sun = true;
                                _othRegRev.Rem_cat = 17;
                                _othRegRev.Rem_add = 0;
                                _othRegRev.Rem_ded = 0;
                                _othRegRev.Rem_net = _insRevVal;
                                _othRegRev.Rem_epf = 0;
                                _othRegRev.Rem_esd = 0;
                                _othRegRev.Rem_wht = 0;
                                _othRegRev.Rem_add_fin = 0;
                                _othRegRev.Rem_ded_fin = 0;
                                _othRegRev.Rem_net_fin = _insRevVal;
                                _othRegRev.Rem_rmk_fin = _invoiceHeader.Sah_ref_doc;
                                _othRegRev.Rem_bnk_cd = null;
                                _othRegRev.Rem_is_rem_sum = true;
                                _salesDAL.SaveRemSummaryForFinalCreditComm(_othRegRev);

                                //04 007 Other PC VEH. Insu. Refunds
                                _othRegRev = new RemitanceSummaryDetail();
                                _othRegRev.Rem_com = _invoiceHeader.Sah_com;
                                _othRegRev.Rem_pc = _RevPC;
                                _othRegRev.Rem_dt = _invoiceHeader.Sah_dt;
                                _othRegRev.Rem_sec = "04";
                                _othRegRev.Rem_cd = "007";
                                _othRegRev.Rem_sh_desc = "Other PC VEH. Insu. Refunds";
                                _othRegRev.Rem_lg_desc = "OTHER PC VEH.INSU. REFUNDS";
                                _othRegRev.Rem_val = _insRevVal;
                                _othRegRev.Rem_val_final = _insRevVal;
                                _weekNo = _generalDAL.GetWeek(Convert.ToDateTime(_invoiceHeader.Sah_dt).Date, out _revRegwkNo, _invoiceHeader.Sah_com);
                                _othRegRev.Rem_week = _revRegwkNo + "S";
                                _othRegRev.Rem_ref_no = _invoiceNo;
                                _othRegRev.Rem_rmk = _invoiceHeader.Sah_ref_doc;
                                _othRegRev.Rem_cr_acc = null;
                                _othRegRev.Rem_db_acc = null;
                                _othRegRev.Rem_del_alw = false;
                                _othRegRev.Rem_cre_by = _invoiceHeader.Sah_cre_by;
                                _othRegRev.Rem_cre_dt = _invoiceHeader.Sah_dt;
                                _othRegRev.Rem_is_sos = true;
                                _othRegRev.Rem_is_dayend = true;
                                _othRegRev.Rem_is_sun = true;
                                _othRegRev.Rem_cat = 17;
                                _othRegRev.Rem_add = 0;
                                _othRegRev.Rem_ded = 0;
                                _othRegRev.Rem_net = _insRevVal;
                                _othRegRev.Rem_epf = 0;
                                _othRegRev.Rem_esd = 0;
                                _othRegRev.Rem_wht = 0;
                                _othRegRev.Rem_add_fin = 0;
                                _othRegRev.Rem_ded_fin = 0;
                                _othRegRev.Rem_net_fin = _insRevVal;
                                _othRegRev.Rem_rmk_fin = _invoiceHeader.Sah_ref_doc;
                                _othRegRev.Rem_bnk_cd = null;
                                _othRegRev.Rem_is_rem_sum = true;
                                _salesDAL.SaveRemSummaryForFinalCreditComm(_othRegRev);
                            }
                        }

                        //update insuarance details and release reservation if reserve item
                        if (_revInsDet != null)
                        {
                            foreach (VehicleInsuarance ins in _revInsDet)
                            {
                                _salesDAL.UpdateInsTxnCan(ins.Svit_com, ins.Svit_pc, ins.Svit_inv_no, ins.Svit_ref_no, ins.Svit_itm_cd, ins.Svit_engine, ins.Svit_chassis, 2);
                                _inventoryRepDAL.DeleteResSerial(ins.Svit_inv_no, ins.Svit_com, ins.Svit_itm_cd, ins.Svit_engine, ins.Svit_chassis);
                                _salesDAL.UpdateRegResAvailability(ins.Svit_com, ins.Svit_itm_cd, ins.Svit_engine, ins.Svit_chassis, 1);
                            }

                        }

                        if (_revInsDet != null)
                        {
                            List<ReptPickSerials> tempSer = new List<ReptPickSerials>();
                            tempSer = _inventoryRepDAL.Get_TEMP_PICK_SER_BY_BASEDOC(_invoiceHeader.Sah_com, _invoiceHeader.Sah_ref_doc);

                            if (tempSer == null)
                            {
                                _inventoryRepDAL.DeleteResHdr(_invoiceHeader.Sah_com, _invoiceHeader.Sah_ref_doc);
                            }
                        }
                    }

                    //reverse credit sale commission
                    if (_invoiceHeader.Sah_inv_tp == "CRED")
                    {
                        decimal _Balance = 0;
                        decimal _commAmt = 0;
                        decimal _wkNo = 0;
                        decimal _minCommAllow = 0;

                        _Balance = _salesDAL.GetOutInvAmt(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_cus_cd, _invoiceHeader.Sah_ref_doc);

                        HpSystemParameters _getSystemParameter = _salesDAL.GetSystemParameter("COM", _invoiceHeader.Sah_com, "CRCOMMINAW", _invoiceHeader.Sah_dt);

                        if (_getSystemParameter.Hsy_cd != null)
                        {
                            _minCommAllow = _getSystemParameter.Hsy_val;
                        }
                        else
                        {
                            _minCommAllow = 0;
                        }


                        if (_Balance <= _minCommAllow)
                        {
                            //  _invNoList.Add(s.Sard_inv_no);
                            //get commission amount
                            //_commAmt = _salesDAL.GetFinalCreditCommission(_invoiceHeader.Sah_ref_doc);
                            _commAmt = 0;
                            foreach (InvoiceItem _itm in _invoiceItem)
                            {
                                List<SaleCommission> _tmpComm = new List<SaleCommission>();
                                _tmpComm = _salesDAL.GetCommForRev(_itm.Sad_inv_no, _itm.Sad_itm_cd, _itm.Sad_itm_line);

                                foreach (SaleCommission _comm in _tmpComm)
                                {
                                    _commAmt = _commAmt + Convert.ToInt32(_comm.Sac_comm_amt_final / _itm.Sad_qty * _itm.Sad_srn_qty);
                                }
                            }

                            //save GNT_REM_SUM 
                            RemitanceSummaryDetail _remDet = new RemitanceSummaryDetail();
                            _remDet.Rem_com = _invoiceHeader.Sah_com;
                            _remDet.Rem_pc = _invoiceHeader.Sah_pc;
                            _remDet.Rem_dt = _invoiceHeader.Sah_dt;
                            _remDet.Rem_sec = "02";
                            _remDet.Rem_cd = "005";
                            _remDet.Rem_sh_desc = "Group sale comm";
                            _remDet.Rem_lg_desc = "GROUP SALE COMM";
                            _remDet.Rem_val = _commAmt * -1;
                            _remDet.Rem_val_final = _commAmt * -1;
                            int _weekNo = _generalDAL.GetWeek(Convert.ToDateTime(_invoiceHeader.Sah_dt).Date, out _wkNo, _invoiceHeader.Sah_com);
                            _remDet.Rem_week = _wkNo + "S";
                            _remDet.Rem_ref_no = _invoiceHeader.Sah_ref_doc;
                            _remDet.Rem_rmk = _invoiceNo;
                            _remDet.Rem_cr_acc = null;
                            _remDet.Rem_db_acc = null;
                            _remDet.Rem_del_alw = false;
                            _remDet.Rem_cre_by = _invoiceHeader.Sah_cre_by;
                            _remDet.Rem_cre_dt = _invoiceHeader.Sah_dt;
                            _remDet.Rem_is_sos = true;
                            _remDet.Rem_is_dayend = true;
                            _remDet.Rem_is_sun = true;
                            _remDet.Rem_cat = 17;
                            _remDet.Rem_add = 0;
                            _remDet.Rem_ded = 0;
                            _remDet.Rem_net = _commAmt * -1;
                            _remDet.Rem_epf = 0;
                            _remDet.Rem_esd = 0;
                            _remDet.Rem_wht = 0;
                            _remDet.Rem_add_fin = 0;
                            _remDet.Rem_ded_fin = 0;
                            _remDet.Rem_net_fin = _commAmt * -1;
                            _remDet.Rem_rmk_fin = _invoiceHeader.Sah_ref_doc;
                            _remDet.Rem_bnk_cd = null;
                            _remDet.Rem_is_rem_sum = true;
                            _salesDAL.SaveRemSummaryForFinalCreditComm(_remDet);
                        }


                    }


                    if (_isOthSaleRev == true)
                    {
                        //Comment 28-07-2014
                        #region MyRegion
                        //decimal _revwkNo = 0;
                        //int _weekNo = 0;
                        ////03 015 Sale reverse by other PC

                        //RemitanceSummaryDetail _othRev = new RemitanceSummaryDetail();
                        //_othRev = new RemitanceSummaryDetail();
                        //_othRev.Rem_com = _invoiceHeader.Sah_com;
                        //_othRev.Rem_pc = _invoiceHeader.Sah_pc;
                        //_othRev.Rem_dt = _invoiceHeader.Sah_dt;
                        //_othRev.Rem_sec = "03";
                        //_othRev.Rem_cd = "015";
                        //_othRev.Rem_sh_desc = "Sale reverse by other PC";
                        //_othRev.Rem_lg_desc = "SALE REVERSE BY OTHER PC";
                        //_othRev.Rem_val = _totalRevAmt;
                        //_othRev.Rem_val_final = _totalRevAmt;
                        //_weekNo = _generalDAL.GetWeek(Convert.ToDateTime(_invoiceHeader.Sah_dt).Date, out _revwkNo, _invoiceHeader.Sah_com);
                        //_othRev.Rem_week = _revwkNo + "S";
                        //_othRev.Rem_ref_no = _invoiceNo;
                        //_othRev.Rem_rmk = _invoiceHeader.Sah_ref_doc;
                        //_othRev.Rem_cr_acc = null;
                        //_othRev.Rem_db_acc = null;
                        //_othRev.Rem_del_alw = false;
                        //_othRev.Rem_cre_by = _invoiceHeader.Sah_cre_by;
                        //_othRev.Rem_cre_dt = _invoiceHeader.Sah_dt;
                        //_othRev.Rem_is_sos = true;
                        //_othRev.Rem_is_dayend = true;
                        //_othRev.Rem_is_sun = true;
                        //_othRev.Rem_cat = 17;
                        //_othRev.Rem_add = 0;
                        //_othRev.Rem_ded = 0;
                        //_othRev.Rem_net = _totalRevAmt;
                        //_othRev.Rem_epf = 0;
                        //_othRev.Rem_esd = 0;
                        //_othRev.Rem_wht = 0;
                        //_othRev.Rem_add_fin = 0;
                        //_othRev.Rem_ded_fin = 0;
                        //_othRev.Rem_net_fin = _totalRevAmt;
                        //_othRev.Rem_rmk_fin = _invoiceHeader.Sah_ref_doc;
                        //_othRev.Rem_bnk_cd = null;
                        //_othRev.Rem_is_rem_sum = true;
                        //_salesDAL.SaveRemSummaryForFinalCreditComm(_othRev);


                        ////04 005 Other PC Sale Reversal
                        //_othRev = new RemitanceSummaryDetail();
                        //_othRev.Rem_com = _invoiceHeader.Sah_com;
                        //_othRev.Rem_pc = _RevPC;
                        //_othRev.Rem_dt = _invoiceHeader.Sah_dt;
                        //_othRev.Rem_sec = "04";
                        //_othRev.Rem_cd = "005";
                        //_othRev.Rem_sh_desc = "Other PC Sale Reversal";
                        //_othRev.Rem_lg_desc = "OTHER PC SALE REVERSAL";
                        //_othRev.Rem_val = _totalRevAmt;
                        //_othRev.Rem_val_final = _totalRevAmt;
                        //_weekNo = _generalDAL.GetWeek(Convert.ToDateTime(_invoiceHeader.Sah_dt).Date, out _revwkNo, _invoiceHeader.Sah_com);
                        //_othRev.Rem_week = _revwkNo + "S";
                        //_othRev.Rem_ref_no = _invoiceNo;
                        //_othRev.Rem_rmk = _invoiceHeader.Sah_ref_doc;
                        //_othRev.Rem_cr_acc = null;
                        //_othRev.Rem_db_acc = null;
                        //_othRev.Rem_del_alw = false;
                        //_othRev.Rem_cre_by = _invoiceHeader.Sah_cre_by;
                        //_othRev.Rem_cre_dt = _invoiceHeader.Sah_dt;
                        //_othRev.Rem_is_sos = true;
                        //_othRev.Rem_is_dayend = true;
                        //_othRev.Rem_is_sun = true;
                        //_othRev.Rem_cat = 17;
                        //_othRev.Rem_add = 0;
                        //_othRev.Rem_ded = 0;
                        //_othRev.Rem_net = _totalRevAmt;
                        //_othRev.Rem_epf = 0;
                        //_othRev.Rem_esd = 0;
                        //_othRev.Rem_wht = 0;
                        //_othRev.Rem_add_fin = 0;
                        //_othRev.Rem_ded_fin = 0;
                        //_othRev.Rem_net_fin = _totalRevAmt;
                        //_othRev.Rem_rmk_fin = _invoiceHeader.Sah_ref_doc;
                        //_othRev.Rem_bnk_cd = null;
                        //_othRev.Rem_is_rem_sum = true;
                        //_salesDAL.SaveRemSummaryForFinalCreditComm(_othRev);

                        #endregion

                    }

                    //  _salesDAL.UpdateReversalOutAmt(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_cus_cd, _invoiceHeader.Sah_ref_doc, _invoiceHeader.Sah_anal_7, 0);
                    _salesDAL.UpdateReverseInvoiceAmt(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_cus_cd, _invoiceHeader.Sah_ref_doc, _totalRevAmt);

                    if (!string.IsNullOrEmpty(_docNo))
                    {
                        _salesDAL.UpdateInvoiceRevNo(_invoiceNo, _docNo);
                    }

                    string _ReqAppNo = string.Empty;
                    //generate cash refund request
                    if (_isCashRef == true)
                    {

                        MasterAutoNumber ReqNoAuto = _inventoryDAL.GetAutoNumber(_refAppAuto.Aut_moduleid, _refAppAuto.Aut_direction, _refAppAuto.Aut_start_char, _refAppAuto.Aut_cate_tp, _refAppAuto.Aut_cate_cd, _refAppAuto.Aut_modify_dt, _refAppAuto.Aut_year);
                        _ReqAppNo = ReqNoAuto.Aut_cate_cd + "-" + ReqNoAuto.Aut_start_char + "-" + ReqNoAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_refAppAuto);


                        _refAppHdr.Grah_ref = _ReqAppNo;
                        _refAppHdr.Grah_fuc_cd = _invoiceNo;
                        if (_refAppHdrLog != null)
                        {
                            _refAppHdrLog.Grah_ref = _ReqAppNo;
                            _refAppHdrLog.Grah_fuc_cd = _invoiceNo;
                        }
                        // _AppDet.Grad_ref = _ReqAppNo;

                        _generalDAL.SaveRequestApproveHear(_refAppHdr);
                        if (_refAppHdrLog != null) _generalDAL.SaveRequestApproveHear_Log(_refAppHdrLog);

                        Int16 _line = 0;
                        if (_refAppDet != null)
                        {
                            foreach (RequestApprovalDetail _itm in _refAppDet)
                            {
                                _line++;
                                _itm.Grad_ref = _ReqAppNo;
                                _itm.Grad_anal2 = _invoiceNo;
                                _itm.Grad_line = _line;
                                _generalDAL.Save_RequestApprove_Det(_itm);

                            }
                        }

                        _line = 0;
                        if (_refAppDetLog != null)
                        {
                            foreach (RequestApprovalDetailLog _itm in _refAppDetLog)
                            {
                                _line++;
                                _itm.Grad_ref = _ReqAppNo;
                                _itm.Grad_line = _line;
                                _itm.Grad_anal2 = _invoiceNo;
                                _generalDAL.Save_RequestApprove_Det_Log(_itm);
                            }
                        }
                    }

                    //Tharaka 2015-07-16 Cancel Confirmations 
                    #region Cancel Confirmations
                    InvoiceHeader _header = _salesDAL.GetInvoiceHeaderDetails(_invoiceHeader.Sah_ref_doc);
                    if (_header != null)
                    {
                        if (_header.Sah_anal_2 == "SCV")
                        {
                            List<InvoiceItem> _list = _salesDAL.GetInvoiceDetailByInvoice(_invoiceHeader.Sah_ref_doc);
                            var Job_n_Lines = _list.Select(e => new { e.Sad_job_no, e.Sad_job_line }).Distinct();
                            foreach (var Job_n_Line in Job_n_Lines)
                            {
                                Service_Job_StageLog oLog2 = new Service_Job_StageLog();
                                oLog2.SJL_REQNO = "";
                                oLog2.SJL_JOBNO = Job_n_Line.Sad_job_no;
                                oLog2.SJL_JOBLINE = Job_n_Line.Sad_job_line;
                                oLog2.SJL_COM = _invoiceHeader.Sah_com;
                                oLog2.SJL_LOC = _invoiceHeader.Sah_del_loc;
                                oLog2.SJL_JOBSTAGE = 17;
                                oLog2.SJL_CRE_BY = _invoiceHeader.Sah_cre_by;
                                oLog2.SJL_CRE_DT = DateTime.Now;
                                oLog2.SJL_SESSION_ID = _invoiceHeader.Sah_session_id;
                                oLog2.SJL_INFSUP = 0;
                                _effect = _CustServiceDAL.Save_ServiceJobStageLog(oLog2);

                                List<Service_confirm_Header> oConfHdrs = _CustServiceDAL.GetConfDetByJobNo(_invoiceHeader.Sah_com, Job_n_Line.Sad_job_no, Job_n_Line.Sad_job_line);
                                foreach (Service_confirm_Header oConfHdr in oConfHdrs)
                                {
                                    _effect = _CustServiceDAL.Update_Conf_Cancel("C", oConfHdr.Jch_seq, oConfHdr.Jch_com, oConfHdr.Jch_no, _invoiceHeader.Sah_cre_by);
                                    int Effect2 = _CustServiceDAL.Update_JobDetailStage(Job_n_Line.Sad_job_no, Job_n_Line.Sad_job_line, 6);//add by tharanga 2017/11/16 when revers job inv job no not update
                                    Warr_Replacement_Det _warrRepDet = new Warr_Replacement_Det();
                                    _warrRepDet.Swr_ref = oConfHdr.Jch_no;
                                    _warrRepDet.Swr_act = 0;
                                    _warrRepDet.Swr_cnl_by = _invoiceHeader.Sah_cre_by;
                                    _CustServiceDAL.Update_warr_rep_stus(_warrRepDet);

                                    List<Service_Confirm_detail> _confDet = new List<Service_Confirm_detail>();
                                    _confDet = _CustServiceDAL.GetServiceConfirmDetials(oConfHdr.Jch_seq, oConfHdr.Jch_no);

                                    if (_confDet != null)
                                    {
                                        foreach (Service_Confirm_detail oconfDet in _confDet)
                                        {
                                            _effect = _CustServiceDAL.Update_Warr_rep_ReqCan(oconfDet.Jcd_jobno, oconfDet.Jcd_joblineno, _invoiceHeader.Sah_cre_by);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    #endregion

                    //Added By Udaya 25.09.2017
                    //#region Send Reversal SMS and E-mails
                    //if (_effect > 0)
                    //{
                    //    //send SMS 
                    //    List<MsgInformation> _msg = _generalDAL.GetMsgInformation(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, "REVERSAL");
                    //    if (_msg != null)
                    //        if (_msg.Count > 0)
                    //        {
                    //            foreach (MsgInformation _info in _msg)
                    //            {
                    //                if (_info.Mmi_mobi_no.Length > 9)
                    //                {
                    //                    string _mg = "Invoice No " + _invoiceHeader.Sah_inv_no + "Revered" + " - SCM2 -";
                    //                    OutSMS _out = new OutSMS();
                    //                    _out.Msg = _mg;
                    //                    _out.Msgstatus = 0;
                    //                    _out.Msgtype = _info.Mmi_msg_tp;
                    //                    _out.Receivedtime = DateTime.Now;
                    //                    _out.Receiver = _info.Mmi_receiver;
                    //                    //_out.Receiverphno = _info.Mmi_mobi_no;//Edit by Chamal 31-03-2015
                    //                    _out.Senderphno = _info.Mmi_mobi_no;
                    //                    _out.Refdocno = _invoiceHeader.Sah_inv_no;
                    //                    _out.Sender = _invoiceHeader.Sah_cre_by;
                    //                    _out.Createtime = DateTime.Now;
                    //                    _generalDAL.SaveSMSOut(_out);
                    //                }
                    //            }
                    //        }

                    //    //send mail
                    //    List<MsgInformation> _mail = _generalDAL.GetMsgInformation(_invoiceHeader.Sah_com, null, "REVERSAL");
                    //    if (_mail != null)
                    //        if (_mail.Count > 0)
                    //        {
                    //            foreach (MsgInformation _info in _mail)
                    //            {
                    //                SmtpClient smtpClient = new SmtpClient();
                    //                MailMessage message = new MailMessage();

                    //                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                    //                smtpClient.Host = _generalDAL.GetMailHost();
                    //                smtpClient.Port = 25;
                    //                message.From = fromAddress;

                    //                string _email = "";

                    //                _email = "Dear Sir/Madam, \n\n" + _email;
                    //                _email += "Invoice Reversal for the profit center :" + _invoiceHeader.Sah_pc + " \n";
                    //                _email += "\n  Invoice No # : " + _invoiceHeader.Sah_inv_no + "\n";
                    //                _email += "\n " + _invoiceHeader.Sah_inv_no + "\n";
                    //                if (_invoiceHeader.Sah_cus_cd == "")
                    //                {
                    //                    _email += "\n  Customer : " + _invoiceHeader.Sah_cus_name + "\n";
                    //                    _email += "\n  Address : " + _invoiceHeader.Sah_cus_add1 + ", " + _invoiceHeader.Sah_cus_add2 + "\n";
                    //                }
                    //                else
                    //                {
                    //                    _email += "\n  Customer : " + _invoiceHeader.Sah_cus_name + "";
                    //                    _email += "\n             (" + _invoiceHeader.Sah_cus_name + ")\n";
                    //                    _email += "\n  Address : " + _invoiceHeader.Sah_cus_add1 + ", " + _invoiceHeader.Sah_cus_add2 + "\n";
                    //                }

                    //                _email += _generalDAL.GetMailFooterMsg();
                    //                message.To.Add(_info.Mmi_email);
                    //                message.Subject = "Invoice Reversal";
                    //                //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                    //                //message.Bcc.Add(new MailAddress(""));
                    //                message.IsBodyHtml = false;
                    //                message.Body = _email;
                    //                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                    //                // Send SMTP mail
                    //                smtpClient.Send(message);
                    //            }
                    //        }
                    //}
                    //#endregion

                    //_invBLL.SRN()

                    //_salesDAL.ConnectionClose();
                    //_inventoryDAL.ConnectionClose();
                    //_inventoryRepDAL.ConnectionClose();
                    //_generalDAL.ConnectionClose();
                    _salesDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();
                    _inventoryRepDAL.TransactionCommit();
                    _generalDAL.TransactionCommit();

                    _CustServiceDAL.TransactionCommit();

                    _effect = 1;
                    //_tr.Complete();
                }

            }
            catch (Exception err)
            {
                _effect = -1;
                _invoiceNo = "ERROR : " + err.Message.ToString();
                _docNo = _invoiceNo;
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _generalDAL.TransactionRollback();

                _CustServiceDAL.TransactionRollback();
            }
            //_invoiceNo = _invNo;
            // _docNo = _SRNNo;
            return _effect;

        }

        //written by darshana on 12-03-2013
        public List<VehicalRegistration> GetRefundReqVehReg(string _com, string _pc, string _ref, string _appTp)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRefundReqVehReg(_com, _pc, _ref, _appTp);
        }

        //written by darshana on 14-03-2013
        public List<VehicleInsuarance> GetVehInsForRev(string _com, string _pc, string _inv, string _itm, Int32 _status)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehInsForRev(_com, _pc, _inv, _itm, _status);
        }

        //written by darshana on 12-03-2013
        public List<VehicleInsuarance> GetRefundReqVehIns(string _com, string _pc, string _ref, string _appTp)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRefundReqVehIns(_com, _pc, _ref, _appTp);
        }

        //Shani 14-03-2013
        public Int32 Refund_Insurance(RecieptHeader _ReceiptHeader, RecieptItem recieptItem, MasterAutoNumber _recNo, string reciptNo, string itemCd, string chassis, string engine, string modby, DateTime modDt, out string _ReciptNo)
        {
            int effect = 0;
            _ReciptNo = "";
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            _generalDAL = new GeneralDAL();
            _inventoryRepDAL = new ReptCommonDAL();
            using (TransactionScope tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();
                _generalDAL.ConnectionOpen();
                _inventoryRepDAL.ConnectionOpen();

                MasterAutoNumber _reversRecipt = _inventoryDAL.GetAutoNumber(_recNo.Aut_moduleid, _recNo.Aut_direction, _recNo.Aut_start_char, _recNo.Aut_cate_tp, _recNo.Aut_cate_cd, _recNo.Aut_modify_dt, _recNo.Aut_year);
                _reversRecipt.Aut_modify_dt = null;
                _reversRecipt.Aut_year = null;
                _ReciptNo = _reversRecipt.Aut_cate_cd + "-" + _reversRecipt.Aut_start_char + "-" + _reversRecipt.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_reversRecipt);

                _ReceiptHeader.Sar_receipt_no = _ReciptNo;
                _ReceiptHeader.Sar_seq_no = _inventoryDAL.GetSerialID();

                recieptItem.Sard_seq_no = _ReceiptHeader.Sar_seq_no;
                recieptItem.Sard_receipt_no = _ReceiptHeader.Sar_receipt_no;

                effect = _salesDAL.SaveReceiptHeader(_ReceiptHeader);
                effect = _salesDAL.SaveReceiptItem(recieptItem);
                effect = _salesDAL.Update_Refund_sat_veh_ins_txn(reciptNo, itemCd, chassis, engine, modby, modDt);
                string requestNo = _ReceiptHeader.Sar_manual_ref_no;
                RequestApprovalHeader reqhdr = _generalDAL.GetRequest_HeaderByRef(_ReceiptHeader.Sar_com_cd, _ReceiptHeader.Sar_profit_center_cd, _ReceiptHeader.Sar_manual_ref_no);
                if (reqhdr != null)
                {
                    reqhdr.Grah_mod_by = _ReceiptHeader.Sar_create_by;
                    reqhdr.Grah_mod_dt = _ReceiptHeader.Sar_receipt_date;
                    reqhdr.Grah_app_stus = "F";
                    effect = _generalDAL.UpdateApprovalStatus(reqhdr);
                }

                ////Added by Prabhath on 14/12/2013 **** start *****
                //List<ReptPickSerials> _ser = _inventoryRepDAL.GetInvoiceAdvanceReceiptSerial(_ReceiptHeader.Sar_com_cd, _ReceiptHeader.Sar_receipt_no);
                //if (_ser != null && _ser.Count > 0)
                //    foreach (ReptPickSerials _s in _ser)
                //        _inventoryDAL.UpdateLocationResRevers(_s.Tus_com, _s.Tus_loc, _s.Tus_itm_cd, _s.Tus_itm_stus, _s.Tus_cre_by, _s.Tus_qty);

                ////Added by Prabhath on 14/12/2013 **** end *****



                effect = 1;
                _salesDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _generalDAL.ConnectionClose();
                _inventoryRepDAL.ConnectionClose();
                tr.Complete();

            }
            return effect;
        }

        private int SaveCashConvertionAppReq(RequestApprovalHeader _AppHdr, List<RequestApprovalDetail> _AppDet, List<RequestApprovalSerials> _AppSer, MasterAutoNumber _AppReqAuto, RequestApprovalHeaderLog _AppHdrLog, List<RequestApprovalDetailLog> _AppDetLog, List<RequestApprovalSerialsLog> _AppSerLog)
        {
            //_inventoryDAL = new InventoryDAL();
            //_generalDAL = new GeneralDAL();
            int result;
            string _ReqNo = "";
            string _ReqAppNo = "";

            MasterAutoNumber _reversInv = _inventoryDAL.GetAutoNumber(_AppReqAuto.Aut_moduleid, _AppReqAuto.Aut_direction, _AppReqAuto.Aut_start_char, _AppReqAuto.Aut_cate_tp, _AppReqAuto.Aut_cate_cd, _AppReqAuto.Aut_modify_dt, _AppReqAuto.Aut_year);
            _reversInv.Aut_modify_dt = null;
            _reversInv.Aut_year = null;
            _ReqAppNo = _reversInv.Aut_cate_cd + "-" + _reversInv.Aut_start_char + "-" + _reversInv.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
            _inventoryDAL.UpdateAutoNumber(_reversInv);

            _ReqNo = _ReqAppNo;
            _AppHdr.Grah_ref = _ReqAppNo;
            if (_AppHdrLog != null) _AppHdrLog.Grah_ref = _ReqAppNo;
            // _AppDet.Grad_ref = _ReqAppNo;

            result = _generalDAL.SaveRequestApproveHear(_AppHdr);
            if (_AppHdrLog != null) _generalDAL.SaveRequestApproveHear_Log(_AppHdrLog);

            int _line = 0;
            if (_AppDet != null)
            {
                foreach (RequestApprovalDetail _itm in _AppDet)
                {
                    _line++;
                    _itm.Grad_ref = _ReqAppNo;
                    _itm.Grad_line = _line;
                    _generalDAL.Save_RequestApprove_Det(_itm);

                }
            }

            _line = 0;
            if (_AppDetLog != null)
            {
                foreach (RequestApprovalDetailLog _itm in _AppDetLog)
                {
                    _line++;
                    _itm.Grad_ref = _ReqAppNo;
                    _itm.Grad_line = _line;
                    _generalDAL.Save_RequestApprove_Det_Log(_itm);
                }
            }

            if (_AppSer != null)
            {
                foreach (RequestApprovalSerials _ser in _AppSer)
                {
                    _ser.Gras_ref = _ReqAppNo;
                    _generalDAL.Save_RequestApprove_Ser(_ser);
                }
                foreach (RequestApprovalSerialsLog _ser in _AppSerLog)
                {
                    _ser.Gras_ref = _ReqAppNo;
                    _generalDAL.Save_RequestApprove_Serial_Log(_ser);
                }
            }

            return result;
        }

        public Int32 Refund_Registration(RecieptHeader _ReceiptHeader, RecieptItem recieptItem, MasterAutoNumber _recNo, string reciptNo, string itemCd, string chassis, string engine, string modby, DateTime modDt, out string _ReciptNo)
        {
            int effect = 0;
            _ReciptNo = "";
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            _generalDAL = new GeneralDAL();
            _inventoryRepDAL = new ReptCommonDAL();
            using (TransactionScope tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();
                _generalDAL.ConnectionOpen();
                _inventoryRepDAL.ConnectionOpen();
                MasterAutoNumber _reversRecipt = _inventoryDAL.GetAutoNumber(_recNo.Aut_moduleid, _recNo.Aut_direction, _recNo.Aut_start_char, _recNo.Aut_cate_tp, _recNo.Aut_cate_cd, _recNo.Aut_modify_dt, _recNo.Aut_year);
                _reversRecipt.Aut_modify_dt = null;
                _reversRecipt.Aut_year = null;
                _ReciptNo = _reversRecipt.Aut_cate_cd + "-" + _reversRecipt.Aut_start_char + "-" + _reversRecipt.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_reversRecipt);

                _ReceiptHeader.Sar_receipt_no = _ReciptNo;
                _ReceiptHeader.Sar_seq_no = _inventoryDAL.GetSerialID();

                recieptItem.Sard_seq_no = _ReceiptHeader.Sar_seq_no;
                recieptItem.Sard_receipt_no = _ReceiptHeader.Sar_receipt_no;

                effect = _salesDAL.SaveReceiptHeader(_ReceiptHeader);
                effect = _salesDAL.SaveReceiptItem(recieptItem);
                effect = _salesDAL.Update_Refund_Registration_sat_veh_ins_txn(reciptNo, itemCd, chassis, engine, modby, modDt);

                string requestNo = _ReceiptHeader.Sar_manual_ref_no;
                RequestApprovalHeader reqhdr = _generalDAL.GetRequest_HeaderByRef(_ReceiptHeader.Sar_com_cd, _ReceiptHeader.Sar_profit_center_cd, _ReceiptHeader.Sar_manual_ref_no);
                if (reqhdr != null)
                {
                    reqhdr.Grah_mod_by = _ReceiptHeader.Sar_create_by;
                    reqhdr.Grah_mod_dt = _ReceiptHeader.Sar_receipt_date;
                    reqhdr.Grah_app_stus = "F";
                    effect = _generalDAL.UpdateApprovalStatus(reqhdr);
                }


                ////Added by Prabhath on 14/12/2013 **** start *****
                //string _invoice = recieptItem.Sard_inv_no;
                //List<ReptPickSerials> _ser = _inventoryRepDAL.GetInvoiceAdvanceReceiptSerial(_ReceiptHeader.Sar_com_cd, _invoice);
                //if (_ser != null && _ser.Count > 0)
                //    foreach (ReptPickSerials _s in _ser)
                //        _inventoryDAL.UpdateLocationResRevers(_s.Tus_com, _s.Tus_loc, _s.Tus_itm_cd, _s.Tus_itm_stus, _s.Tus_cre_by, _s.Tus_qty);

                ////Added by Prabhath on 14/12/2013 **** end *****



                effect = 1;
                _salesDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _generalDAL.ConnectionClose();
                _inventoryRepDAL.ConnectionClose();
                tr.Complete();

            }
            return effect;
        }

        public DataTable GetPriorityHierarchyWithDescription(string _category)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriorityHierarchyWithDescription(_category);
        }

        public HPAccountLog GetAccountLog_LatestRecord(string _account)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAccountLog(_account);

        }

        public List<MasterBusinessEntityInfo> GetCustomerSegmentation(string _cus)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCustomerSegmentation(_cus);
        }

        public MasterBusinessEntity Get_HpAccCustomer_NEW(string custTp, string custID, Int32 addrTp, string accountNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_HpAccCustomer_NEW(custTp, custID, addrTp, accountNo);
        }

        public int SaveAccountRescheduleRequestApproval(MasterAutoNumber _auto, RequestApprovalHeader _hdr, List<RequestApprovalDetail> _det, RequestApprovalHeaderLog _hdrlog, List<RequestApprovalDetailLog> _delLog, int UserPermissionLevel, bool _isApprovalUser, bool _isRequestGenerateUser, out string Reference)
        {
            Int32 _effect = 0;

            _generalDAL = new GeneralDAL();
            GeneralBLL _generalBAL = new GeneralBLL();
            string _reqNo;
            string _reqStatus;
            _effect = _generalBAL.SaveHirePurchasRequest_NEW(_auto, _hdr, _det, _hdrlog, _delLog, UserPermissionLevel, _isApprovalUser, _isRequestGenerateUser, out _reqNo, out _reqStatus);
            Reference = _reqNo;
            return _effect;
        }

        public List<PriceDetailRef> GetPriceEnquiryDetail(string _profitcenter, int _startFrom, int _endFrom, string _user, string _company, string _priceBook, string _priceLevel, string _customer, string _item, string _category1,
        string _category2, string _category3, string _status, string _pricetype, string _circular, DateTime _fromDate, DateTime _toDate, bool _isHistory, bool _isAsAtHistory,
        bool _isAllStatus, bool _isSuperUser, string _promocd)
        {
            _salesDAL = new SalesDAL();

            List<PriceDetailRef> _priceDetailRef = new List<PriceDetailRef>();
            List<PriceDetailRef> _temppriceDetailRef = new List<PriceDetailRef>();
            List<PriceDetailRef> _returnlist = new List<PriceDetailRef>();
            DataTable _dtChnl = new DataTable();

            _temppriceDetailRef = _salesDAL.GetEnquiryDetail(_startFrom, _endFrom, _user, _company, _priceBook, _priceLevel, _item, _fromDate, _toDate, _customer, _category1, _category2, _category3, _pricetype, _circular, _isHistory ? 1 : 0, _isAsAtHistory ? 1 : 0, _isSuperUser ? 1 : 0, _profitcenter, _promocd, _isAllStatus ? string.Empty : _status);
            //if (_isAllStatus == false)
            //    _priceDetailRef.AddRange(_temppriceDetailRef.Where(x => x.Sapl_itm_stuts == _status).ToList());
            //else
            //    _priceDetailRef.AddRange(_temppriceDetailRef);
            _priceDetailRef = _temppriceDetailRef;

            List<PriceDetailRef> _lists = new List<PriceDetailRef>();

            if (_priceDetailRef != null)
                if (_priceDetailRef.Count > 0)
                    //If request not a history
                    if (_isHistory == false && _isAsAtHistory == false)
                    {
                        var _temp1 = (from _l in _priceDetailRef
                                      group _l by new { _l.Sapd_pb_tp_cd, _l.Sapd_pbk_lvl_cd, _l.Sapd_itm_cd, _l.Sapd_price_type, _l.Sadd_pc, _l.Sapl_itm_stuts, _l.Sapd_qty_from, _l.Sapd_qty_to, _l.Sapd_customer_cd } into itm
                                      select new { Sapd_pb_tp_cd = itm.Key.Sapd_pb_tp_cd, Sapd_pbk_lvl_cd = itm.Key.Sapd_pbk_lvl_cd, Sapd_itm_cd = itm.Key.Sapd_itm_cd, Sapd_price_type = itm.Key.Sapd_price_type, Sadd_pc = itm.Key.Sadd_pc, Sapl_itm_stuts = itm.Key.Sapl_itm_stuts, Sapd_qty_from = itm.Key.Sapd_qty_from, Sapd_qty_to = itm.Key.Sapd_qty_to, Sapd_customer_cd = itm.Key.Sapd_customer_cd }).ToList();

                        if (_temp1 != null)
                            if (_temp1.Count > 0)
                            {
                                foreach (var _ls in _temp1)
                                {

                                    string _book = _ls.Sapd_pb_tp_cd;
                                    string _level = _ls.Sapd_pbk_lvl_cd;
                                    string _itm = _ls.Sapd_itm_cd;
                                    int _type = _ls.Sapd_price_type;
                                    string _pc = _ls.Sadd_pc;
                                    string _itmstatus = _ls.Sapl_itm_stuts;
                                    decimal _qtyfrom = _ls.Sapd_qty_from;
                                    decimal _qtyto = _ls.Sapd_qty_to;
                                    string _cuscd = _ls.Sapd_customer_cd;

                                    var _lst = _priceDetailRef.Where(x => x.Sapd_price_type == _type && x.Sapd_pb_tp_cd == _book && x.Sapd_pbk_lvl_cd == _level && x.Sapd_itm_cd == _itm && x.Sadd_pc == _pc && x.Sapl_itm_stuts == _itmstatus && x.Sapd_qty_from == _qtyfrom && x.Sapd_qty_to == _qtyto && x.Sapd_customer_cd == _cuscd).ToList();

                                    if (_type != 0)
                                    {
                                        if (_lst != null)
                                            if (_lst.Count > 0)
                                                _lists.AddRange(_lst);
                                    }
                                    else
                                    {
                                        if (_lst != null)
                                            if (_lst.Count > 0)
                                                _lists.Add(_lst[0]);
                                    }
                                }


                                //if (_isSuperUser == false)
                                //{
                                var _promo = _lists.Where(x => x.Sapd_price_type != 0).ToList();
                                var _normal = _lists.Where(x => x.Sapd_price_type == 0).ToList();

                                if (_promo != null)
                                    if (_promo.Count > 0)
                                        foreach (PriceDetailRef i in _promo)
                                        {
                                            List<PriceProfitCenterPromotion> _lst = new List<PriceProfitCenterPromotion>();
                                            _lst = _salesDAL.CheckPromotion(_company, _profitcenter, i.Sapd_promo_cd, i.Sapd_pb_seq, "PC");
                                            if (_lst != null)
                                            {
                                                if (_lst.Count > 0)
                                                    _returnlist.Add(i);
                                            }
                                            else
                                            {
                                                _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitcenter, "SCHNL");
                                                _lst = _salesDAL.CheckPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), i.Sapd_promo_cd, i.Sapd_pb_seq, "SCHNL");
                                                if (_lst != null)
                                                {
                                                    if (_lst.Count > 0)
                                                        _returnlist.Add(i);
                                                }
                                                else
                                                {
                                                    _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitcenter, "CHNL");
                                                    _lst = _salesDAL.CheckPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), i.Sapd_promo_cd, i.Sapd_pb_seq, "CHNL");
                                                    if (_lst != null)
                                                    {
                                                        if (_lst.Count > 0)
                                                            _returnlist.Add(i);
                                                    }
                                                }
                                            }
                                        }
                                if (_normal != null)
                                    if (_normal.Count > 0) _returnlist.AddRange(_normal);
                                //}
                                //else
                                //{
                                //    _returnlist.AddRange(_lists);
                                //}
                            }
                    }
                    //If request a history
                    else
                    {

                        var _promo = _priceDetailRef.Where(x => x.Sapd_price_type != 0).ToList();
                        var _normal = _priceDetailRef.Where(x => x.Sapd_price_type == 0).ToList();


                        if (_promo != null)
                            if (_promo.Count > 0)
                                foreach (PriceDetailRef i in _promo)
                                {
                                    List<PriceProfitCenterPromotion> _lst = new List<PriceProfitCenterPromotion>();
                                    _lst = _salesDAL.CheckPromotion(_company, _profitcenter, i.Sapd_promo_cd, i.Sapd_pb_seq, "PC");
                                    if (_lst != null)
                                    {
                                        if (_lst.Count > 0)
                                            _returnlist.Add(i);
                                    }
                                    else
                                    {
                                        _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitcenter, "SCHNL");
                                        _lst = _salesDAL.CheckPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), i.Sapd_promo_cd, i.Sapd_pb_seq, "SCHNL");
                                        if (_lst != null)
                                        {
                                            if (_lst.Count > 0)
                                                _returnlist.Add(i);
                                        }
                                        else
                                        {
                                            _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitcenter, "CHNL");
                                            _lst = _salesDAL.CheckPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), i.Sapd_promo_cd, i.Sapd_pb_seq, "CHNL");
                                            if (_lst != null)
                                            {
                                                if (_lst.Count > 0)
                                                    _returnlist.Add(i);
                                            }
                                        }
                                    }
                                }
                        if (_normal != null)
                            if (_normal.Count > 0) _returnlist.AddRange(_normal);

                        // _returnlist.AddRange(_priceDetailRef);
                    }

            return _returnlist;

        }

        //add _Taxstructure parameter by rukshan 19/Apr/2016
        public List<PriceDetailRef> GetPriceEnquiryDetailNew(string _profitcenter, int _startFrom, int _endFrom, string _user, string _company, string _priceBook, string _priceLevel, string _customer, string _item, string _category1,
string _category2, string _category3, string _status, string _pricetype, string _circular, DateTime _fromDate, DateTime _toDate, bool _isHistory, bool _isAsAtHistory,
bool _isAllStatus, bool _isSuperUser, string _promocd, string _Taxstructure)
        {
            _salesDAL = new SalesDAL();

            List<PriceDetailRef> _priceDetailRef = new List<PriceDetailRef>();
            List<PriceDetailRef> _temppriceDetailRef = new List<PriceDetailRef>();
            List<PriceDetailRef> _returnlist = new List<PriceDetailRef>();
            DataTable _dtChnl = new DataTable();

            _temppriceDetailRef = _salesDAL.GetEnquiryDetailNew(_startFrom, _endFrom, _user, _company, _priceBook, _priceLevel, _item, _fromDate, _toDate, _customer, _category1, _category2, _category3, _pricetype, _circular, _isHistory ? 1 : 0, _isAsAtHistory ? 1 : 0, _isSuperUser ? 1 : 0, _profitcenter, _promocd, _isAllStatus ? string.Empty : _status, _Taxstructure);
            //if (_isAllStatus == false)
            //    _priceDetailRef.AddRange(_temppriceDetailRef.Where(x => x.Sapl_itm_stuts == _status).ToList());
            //else
            //    _priceDetailRef.AddRange(_temppriceDetailRef);
            _priceDetailRef = _temppriceDetailRef;

            List<PriceDetailRef> _lists = new List<PriceDetailRef>();

            if (_priceDetailRef != null)
                if (_priceDetailRef.Count > 0)
                    //If request not a history
                    if (_isHistory == false && _isAsAtHistory == false)
                    {
                        var _temp1 = (from _l in _priceDetailRef
                                      group _l by new { _l.Sapd_pb_tp_cd, _l.Sapd_pbk_lvl_cd, _l.Sapd_itm_cd, _l.Sapd_price_type, _l.Sadd_pc, _l.Sapl_itm_stuts, _l.Sapd_qty_from, _l.Sapd_qty_to, _l.Sapd_customer_cd } into itm
                                      select new { Sapd_pb_tp_cd = itm.Key.Sapd_pb_tp_cd, Sapd_pbk_lvl_cd = itm.Key.Sapd_pbk_lvl_cd, Sapd_itm_cd = itm.Key.Sapd_itm_cd, Sapd_price_type = itm.Key.Sapd_price_type, Sadd_pc = itm.Key.Sadd_pc, Sapl_itm_stuts = itm.Key.Sapl_itm_stuts, Sapd_qty_from = itm.Key.Sapd_qty_from, Sapd_qty_to = itm.Key.Sapd_qty_to, Sapd_customer_cd = itm.Key.Sapd_customer_cd }).ToList();

                        if (_temp1 != null)
                            if (_temp1.Count > 0)
                            {
                                foreach (var _ls in _temp1)
                                {

                                    string _book = _ls.Sapd_pb_tp_cd;
                                    string _level = _ls.Sapd_pbk_lvl_cd;
                                    string _itm = _ls.Sapd_itm_cd;
                                    int _type = _ls.Sapd_price_type;
                                    string _pc = _ls.Sadd_pc;
                                    string _itmstatus = _ls.Sapl_itm_stuts;
                                    decimal _qtyfrom = _ls.Sapd_qty_from;
                                    decimal _qtyto = _ls.Sapd_qty_to;
                                    string _cuscd = _ls.Sapd_customer_cd;


                                    var _lst = _priceDetailRef.Where(x => x.Sapd_price_type == _type && x.Sapd_pb_tp_cd == _book && x.Sapd_pbk_lvl_cd == _level && x.Sapd_itm_cd == _itm && x.Sadd_pc == _pc && x.Sapl_itm_stuts == _itmstatus && x.Sapd_qty_from == _qtyfrom && x.Sapd_qty_to == _qtyto && x.Sapd_customer_cd == _cuscd).ToList();

                                    if (_type != 0)
                                    {
                                        if (_lst != null)
                                            if (_lst.Count > 0)
                                                _lists.AddRange(_lst);
                                    }
                                    else
                                    {
                                        if (_lst != null)
                                            if (_lst.Count > 0)
                                                _lists.Add(_lst[0]);
                                    }
                                }


                                if (_isSuperUser == false)
                                {
                                    var _promo = _lists.Where(x => x.Sapd_price_type != 0).ToList();
                                    var _normal = _lists.Where(x => x.Sapd_price_type == 0).ToList();

                                    if (_promo != null)
                                        if (_promo.Count > 0)
                                            foreach (PriceDetailRef i in _promo)
                                            {
                                                List<PriceProfitCenterPromotion> _lst = new List<PriceProfitCenterPromotion>();
                                                _lst = _salesDAL.CheckPromotion(_company, _profitcenter, i.Sapd_promo_cd, i.Sapd_pb_seq, "PC");
                                                if (_lst != null)
                                                {
                                                    if (_lst.Count > 0)
                                                        _returnlist.Add(i);
                                                }
                                                else
                                                {
                                                    _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitcenter, "SCHNL");
                                                    _lst = _salesDAL.CheckPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), i.Sapd_promo_cd, i.Sapd_pb_seq, "SCHNL");
                                                    if (_lst != null)
                                                    {
                                                        if (_lst.Count > 0)
                                                            _returnlist.Add(i);
                                                    }
                                                    else
                                                    {
                                                        _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitcenter, "CHNL");
                                                        _lst = _salesDAL.CheckPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), i.Sapd_promo_cd, i.Sapd_pb_seq, "CHNL");
                                                        if (_lst != null)
                                                        {
                                                            if (_lst.Count > 0)
                                                                _returnlist.Add(i);
                                                        }
                                                    }
                                                }
                                            }
                                    if (_normal != null)
                                        if (_normal.Count > 0) _returnlist.AddRange(_normal);
                                }
                                else
                                {
                                    _returnlist.AddRange(_lists);
                                }
                            }
                    }
                    //If request a history
                    else
                    {

                        var _promo = _priceDetailRef.Where(x => x.Sapd_price_type != 0).ToList();
                        var _normal = _priceDetailRef.Where(x => x.Sapd_price_type == 0).ToList();

                        if (_isSuperUser == false)
                        {
                            if (_promo != null)
                                if (_promo.Count > 0)
                                    foreach (PriceDetailRef i in _promo)
                                    {
                                        List<PriceProfitCenterPromotion> _lst = new List<PriceProfitCenterPromotion>();
                                        _lst = _salesDAL.CheckPromotion(_company, _profitcenter, i.Sapd_promo_cd, i.Sapd_pb_seq, "PC");
                                        if (_lst != null)
                                        {
                                            if (_lst.Count > 0)
                                                _returnlist.Add(i);
                                        }
                                        else
                                        {
                                            _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitcenter, "SCHNL");
                                            _lst = _salesDAL.CheckPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), i.Sapd_promo_cd, i.Sapd_pb_seq, "SCHNL");
                                            if (_lst != null)
                                            {
                                                if (_lst.Count > 0)
                                                    _returnlist.Add(i);
                                            }
                                            else
                                            {
                                                _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitcenter, "CHNL");
                                                _lst = _salesDAL.CheckPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), i.Sapd_promo_cd, i.Sapd_pb_seq, "CHNL");
                                                if (_lst != null)
                                                {
                                                    if (_lst.Count > 0)
                                                        _returnlist.Add(i);
                                                }
                                            }
                                        }
                                    }
                        }
                        else _returnlist.AddRange(_promo);

                        if (_normal != null)
                            if (_normal.Count > 0) _returnlist.AddRange(_normal);

                        // _returnlist.AddRange(_priceDetailRef);
                    }

            return _returnlist;

        }

        public List<PriceSerialRef> GetPriceEnquirySerialDetail(string _profitcenter, int _startFrom, int _endFrom, string _user, string _company, string _priceBook, string _priceLevel, string _customer, string _item, string _category1,

        string _category2, string _category3, string _status, string _pricetype, string _circular, DateTime _fromDate, DateTime _toDate, bool _isHistory, bool _isAsAtHistory,

        bool _isAllStatus, bool _isSuperUser)
        {
            _salesDAL = new SalesDAL();

            List<PriceSerialRef> _priceDetailRef = new List<PriceSerialRef>();
            List<PriceSerialRef> _temppriceDetailRef = new List<PriceSerialRef>();
            List<PriceSerialRef> _returnlist = new List<PriceSerialRef>();
            DataTable _dtChnl = new DataTable();

            _temppriceDetailRef = _salesDAL.GetEnquirySerialDetail(_profitcenter, _startFrom, _endFrom, _user, _company, _priceBook, _priceLevel, _item, _fromDate, _toDate, _customer, _category1, _category2, _category3, _pricetype, _circular, _isHistory ? 1 : 0, _isAsAtHistory ? 1 : 0, _isSuperUser ? 1 : 0);
            if (_isAllStatus == false)
                _priceDetailRef.AddRange(_temppriceDetailRef.Where(x => x.Sapl_itm_stuts == _status).ToList());
            else
                _priceDetailRef.AddRange(_temppriceDetailRef);

            List<PriceSerialRef> _lists = new List<PriceSerialRef>();

            if (_priceDetailRef != null)
                if (_priceDetailRef.Count > 0)
                    //If request not a history
                    if (_isHistory == false && _isAsAtHistory == false)
                    {
                        var _temp1 = (from _l in _priceDetailRef
                                      group _l by new { _l.Sars_pbook, _l.Sars_price_lvl, _l.Sars_itm_cd, _l.Sars_price_type, _l.Sadd_pc, _l.Sapl_itm_stuts, _l.Sars_val_frm, _l.Sars_val_to } into itm
                                      select new { Sars_pbook = itm.Key.Sars_pbook, Sars_price_lvl = itm.Key.Sars_price_lvl, Sars_itm_cd = itm.Key.Sars_itm_cd, Sars_price_type = itm.Key.Sars_price_type, Sadd_pc = itm.Key.Sadd_pc, Sapl_itm_stuts = itm.Key.Sapl_itm_stuts, Sars_val_frm = itm.Key.Sars_val_frm, Sars_val_to = itm.Key.Sars_val_to, Sapd_ser_upload = itm.Sum(p => p.Sarpt_indi) }).ToList();

                        if (_temp1 != null)
                            if (_temp1.Count > 0)
                            {
                                foreach (var _ls in _temp1)
                                {

                                    string _book = _ls.Sars_pbook;
                                    string _level = _ls.Sars_price_lvl;
                                    string _itm = _ls.Sars_itm_cd;
                                    int _type = _ls.Sars_price_type;
                                    string _pc = _ls.Sadd_pc;

                                    var _lst = _priceDetailRef.Where(x => x.Sars_price_type == _type && x.Sars_pbook == _book && x.Sars_price_lvl == _level && x.Sars_itm_cd == _itm && x.Sadd_pc == _pc).ToList();
                                    _lists.AddRange(_lst);
                                    //if (_type != 0)
                                    //{
                                    //    if (_lst != null)
                                    //        if (_lst.Count > 0)
                                    //            _lists.AddRange(_lst);
                                    //}
                                    //else
                                    //{
                                    //    if (_lst != null)
                                    //        if (_lst.Count > 0)
                                    //            _lists.Add(_lst[0]);
                                    //}
                                }


                                //if (_isSuperUser == false)
                                //{
                                var _promo = _lists.Where(x => x.Sars_price_type != 0).ToList();
                                var _normal = _lists.Where(x => x.Sars_price_type == 0).ToList();

                                if (_promo != null)
                                    if (_promo.Count > 0)
                                        foreach (PriceSerialRef i in _promo)
                                        {
                                            List<PriceProfitCenterPromotion> _lst = new List<PriceProfitCenterPromotion>();
                                            _lst = _salesDAL.CheckPromotion(_company, _profitcenter, i.Sars_promo_cd, i.Sars_pb_seq, "PC");
                                            if (_lst != null)
                                            {
                                                if (_lst.Count > 0)
                                                    _returnlist.Add(i);
                                            }
                                            else
                                            {
                                                _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitcenter, "SCHNL");
                                                _lst = _salesDAL.CheckPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), i.Sars_promo_cd, i.Sars_pb_seq, "SCHNL");
                                                if (_lst != null)
                                                {
                                                    if (_lst.Count > 0)
                                                        _returnlist.Add(i);
                                                }
                                                else
                                                {
                                                    _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitcenter, "CHNL");
                                                    _lst = _salesDAL.CheckPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), i.Sars_promo_cd, i.Sars_pb_seq, "CHNL");
                                                    if (_lst != null)
                                                    {
                                                        if (_lst.Count > 0)
                                                            _returnlist.Add(i);
                                                    }
                                                }
                                            }
                                        }
                                if (_normal != null)
                                    if (_normal.Count > 0) _returnlist.AddRange(_normal);
                                //}
                                //else
                                //{
                                //    _returnlist.AddRange(_lists);
                                //}
                            }
                    }
                    //If request a history
                    else
                    {
                        _returnlist.AddRange(_priceDetailRef);
                    }

            return _returnlist;

        }

        public int UpdateInvoiceSimilarItemCode(string _invoiceNo, int _lineNo, string _itemCode, string _similarItemCode)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.UpdateInvoiceSimilarItemCode(_invoiceNo, _lineNo, _itemCode, _similarItemCode);
        }

        public List<MasterSalesPriorityHierarchy> GetSalesPriorityHierarchyWithDescription(string _company, string _profitcenter)
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("LocHeirarchySearch") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetSalesPriorityHierarchyWithDescription("PC_PRIT_HIERARCHY", _company, _profitcenter);
        }

        public List<MasterSalesPriorityHierarchyLog> GetSalesPriorityHierarchyWithDescription_log(string _company, string _profitcenter, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("LocHeirarchySearch") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetSalesPriorityHierarchyWithDescription_log("PC_PRIT_HIERARCHY", _company, _profitcenter, _date);
        }

        public DataTable get_priceDet_ForAC_sevChgItG(string _company, string chgItemCode, DateTime today)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.get_priceDet_ForAC_sevChgItG(_company, chgItemCode, today);
        }

        public HpSchemeType getSchemeTypeByTypeAndCate(string _cate, string _type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getSchemeTypeByTypeAndCate(_cate, _type);
        }

        public Int16 UpdateSchemeType(HpSchemeType _schemeType, string _user, Int32 _defTerm)
        {
            Int16 _effects = 0;
            _salesDAL = new SalesDAL();
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.UpdateSchemeType(_schemeType);
                _salesDAL.UpdateSchemeDetIntRate(_schemeType.Hst_cd, _user, _schemeType.Hst_def_intr, _defTerm);
                _salesDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }

        public Int16 SaveNewSchemeType(HpSchemeType _schemeType)
        {
            Int16 _effects = 0;
            _salesDAL = new SalesDAL();
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.SaveNewSchemeType(_schemeType);
                _salesDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }

        public Int16 CreateNewSchemeDetails(HpSchemeDetails _newSchDet, List<HPAddSchemePara> _VouDet, List<HPAddSchemePara> _SchAddPara)
        {
            Int16 _effects = 0;
            _salesDAL = new SalesDAL();
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.SaveSchemeDetailLog(_newSchDet.Hsd_cd);
                _salesDAL.SaveNewSchemeDetails(_newSchDet);

                if (_VouDet != null)
                {
                    _salesDAL.SaveSchemeAddDetailLog(_newSchDet.Hsd_cd);

                    foreach (HPAddSchemePara _savePara in _VouDet)
                    {
                        _salesDAL.SaveSchemeAddDetails(_savePara);
                    }
                }

                if (_SchAddPara != null)
                {
                    _salesDAL.SaveSchemeAddDetailLog(_newSchDet.Hsd_cd);

                    foreach (HPAddSchemePara _saveAddPara in _SchAddPara)
                    {
                        _salesDAL.SaveSchemeAddDetails(_saveAddPara);
                    }
                }

                _salesDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }

        public Int16 UpdateExsistSchemeDetails(HpSchemeDetails _UpdateSchDet, List<HPAddSchemePara> _VouDet, List<HPAddSchemePara> _SchAddPara)
        {
            Int16 _effects = 0;
            _salesDAL = new SalesDAL();
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.SaveSchemeDetailLog(_UpdateSchDet.Hsd_cd);
                _salesDAL.UpdateExsistSchemeDetails(_UpdateSchDet);

                if (_VouDet != null)
                {
                    _salesDAL.SaveSchemeAddDetailLog(_UpdateSchDet.Hsd_cd);

                    foreach (HPAddSchemePara _savePara in _VouDet)
                    {
                        _salesDAL.SaveSchemeAddDetails(_savePara);
                    }
                }

                if (_SchAddPara != null)
                {
                    _salesDAL.SaveSchemeAddDetailLog(_UpdateSchDet.Hsd_cd);

                    foreach (HPAddSchemePara _saveAddPara in _SchAddPara)
                    {
                        _salesDAL.SaveSchemeAddDetails(_saveAddPara);
                    }
                }

                _salesDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }

        public List<MasterLocationPriorityHierarchy> GetLocationPriorityHierarchyWithDescription(string _company, string _location)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetLocationPriorityHierarchyWithDescription("LOC_PRIT_HIERARCHY", _company, _location);
        }

        public List<PaymentTypeRef> Get_enqiry_paytypes(bool isAll)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_enqiry_paytypes(isAll);
        }

        public List<HpSchemeSheduleDefinition> Get_Define_Scheme_Shedule(string _schCode)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_Define_Scheme_Shedule(_schCode);
        }

        //darshana on 10-04-2013
        public Int16 CreateNewSchemeSheduleDefinition(List<HpSchemeSheduleDefinition> _SheduleList, string _schCode, List<HPResheScheme> _reShe)
        {
            Int16 _effects = 0;
            Int32 _seqNo = 0;
            string _usr = "SHEDEF";
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();

                if (_SheduleList != null)
                {
                    _salesDAL.Delete_Shedule_Definition(_schCode);

                    _seqNo = _inventoryDAL.GetSerialID();

                    foreach (HpSchemeSheduleDefinition _tmpList in _SheduleList)
                    {
                        _tmpList.Hss_seq = _seqNo;
                        _salesDAL.SaveNewSchemeShedule(_tmpList);
                        _usr = _tmpList.Hss_cre_by;
                    }
                }

                if (_reShe != null)
                {
                    foreach (HPResheScheme _tmpReshe in _reShe)
                    {
                        _salesDAL.SaveHpResheduleSchemes(_tmpReshe);

                    }
                }

                _salesDAL.UpdateSchemeActStatus(_schCode, _usr, false);

                _inventoryDAL.ConnectionClose();
                _salesDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }

        //darshana on 12-04-2013

        //public Int16 SaveNewSchemeCommDefinition(List<HpSchemeDefinition> __schSchemeCommDef, string _cir)
        public Int16 SaveNewSchemeCommDefinition(string _user, string _cir)
        {
            _salesDAL = new SalesDAL();
            Int16 _effects = 0;
            try
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                List<HpSchemeDefinitionProcess> _ProcessList = new List<HpSchemeDefinitionProcess>();
                Int32 _seqNo = 0;

                _salesDAL.RemoveTmpCirScheme(_cir);
                _ProcessList = _salesDAL.GetSchemeProByUser(_user);

                if (_ProcessList != null && _ProcessList.Count > 0)
                {
                    foreach (HpSchemeDefinitionProcess _tmpList in _ProcessList)
                    {
                        HpSchemeDefinition _saveList = new HpSchemeDefinition();
                        _seqNo = _salesDAL.GetSerialID();
                        _saveList.Hpc_seq = _seqNo;
                        _saveList.Hpc_brd = _tmpList.Hpc_brd;
                        _saveList.Hpc_cat = _tmpList.Hpc_cat;
                        _saveList.Hpc_cir_no = _tmpList.Hpc_cir_no;
                        _saveList.Hpc_comm_cat = _tmpList.Hpc_comm_cat;
                        _saveList.Hpc_cre_by = _tmpList.Hpc_cre_by;
                        _saveList.Hpc_cust_cd = _tmpList.Hpc_cust_cd;
                        _saveList.Hpc_disc = _tmpList.Hpc_disc;
                        _saveList.Hpc_disc_isrt = _tmpList.Hpc_disc_isrt;
                        _saveList.Hpc_dp_comm = _tmpList.Hpc_dp_comm;
                        _saveList.Hpc_from_dt = _tmpList.Hpc_from_dt;
                        _saveList.Hpc_inst_comm = _tmpList.Hpc_inst_comm;
                        _saveList.Hpc_is_alw = _tmpList.Hpc_is_alw;
                        _saveList.Hpc_itm = _tmpList.Hpc_itm;
                        _saveList.Hpc_main_cat = _tmpList.Hpc_main_cat;
                        _saveList.Hpc_mod_by = _tmpList.Hpc_cre_by;
                        _saveList.Hpc_pb = _tmpList.Hpc_pb;
                        _saveList.Hpc_pb_lvl = _tmpList.Hpc_pb_lvl;
                        _saveList.Hpc_pro = _tmpList.Hpc_pro;
                        _saveList.Hpc_pty_cd = _tmpList.Hpc_pty_cd;
                        _saveList.Hpc_pty_tp = _tmpList.Hpc_pty_tp;
                        _saveList.Hpc_sch_cd = _tmpList.Hpc_sch_cd;
                        _saveList.Hpc_ser = _tmpList.Hpc_ser;
                        _saveList.Hpc_stus = "S";
                        _saveList.Hpc_to_dt = _tmpList.Hpc_to_dt;
                        _saveList.Hpc_price_cir_no = _tmpList.Hpc_price_cir_no;

                        _saveList.Hpc_fpay = _tmpList.Hpc_fpay; //Tharindu 2018-07-01
                        _saveList.Hpc_is_rt = _tmpList.Hpc_is_rt;
                        _saveList.Hpc_fpay_withvat = _tmpList.Hsd_add_calwithvat;
                        _salesDAL.SaveNewSchemeCommDefinition(_saveList);
                    }
                }

                _salesDAL.DeleteHPSchProcess(_user);

                _salesDAL.TransactionCommit();
                _salesDAL.ConnectionClose();
                _effects = 1;

            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _effects = -1;
                string _error = ex.Message + Environment.NewLine + ex.StackTrace;
                throw new Exception(_error);
            }

            return _effects;

            #region old Code
            //try
            //{
            //    List<HpSchemeDefinitionProcess> _ProcessList = new List<HpSchemeDefinitionProcess>();
            //    Int16 _effects = 0;
            //    Int32 _seqNo = 0;


            //    _salesDAL = new SalesDAL();
            //    _inventoryDAL = new InventoryDAL();
            //    using (TransactionScope _tr = new TransactionScope(TransactionScopeOption.RequiresNew, TimeSpan.FromMinutes(60)))
            //    {

            //        _salesDAL.ConnectionOpen();
            //        _inventoryDAL.ConnectionOpen();


            //        _salesDAL.RemoveTmpCirScheme(_cir);

            //        _ProcessList = _salesDAL.GetSchemeProByUser(_user);



            //        foreach (HpSchemeDefinitionProcess _tmpList in _ProcessList)
            //        {
            //            HpSchemeDefinition _saveList = new HpSchemeDefinition();
            //            _seqNo = _inventoryDAL.GetSerialID();
            //            _saveList.Hpc_seq = _seqNo;
            //            _saveList.Hpc_brd = _tmpList.Hpc_brd;
            //            _saveList.Hpc_cat = _tmpList.Hpc_cat;
            //            _saveList.Hpc_cir_no = _tmpList.Hpc_cir_no;
            //            _saveList.Hpc_comm_cat = _tmpList.Hpc_comm_cat;
            //            _saveList.Hpc_cre_by = _tmpList.Hpc_cre_by;
            //            //_saveList.Hpc_cre_dt = Convert.ToDateTime(DateTime.Now).Date;
            //            _saveList.Hpc_cust_cd = _tmpList.Hpc_cust_cd;
            //            _saveList.Hpc_disc = _tmpList.Hpc_disc;
            //            _saveList.Hpc_disc_isrt = _tmpList.Hpc_disc_isrt;
            //            _saveList.Hpc_dp_comm = _tmpList.Hpc_dp_comm;
            //            _saveList.Hpc_from_dt = _tmpList.Hpc_from_dt;
            //            _saveList.Hpc_inst_comm = _tmpList.Hpc_inst_comm;
            //            _saveList.Hpc_is_alw = _tmpList.Hpc_is_alw;
            //            _saveList.Hpc_itm = _tmpList.Hpc_itm;
            //            _saveList.Hpc_main_cat = _tmpList.Hpc_main_cat;
            //            _saveList.Hpc_mod_by = _tmpList.Hpc_cre_by;
            //            _saveList.Hpc_pb = _tmpList.Hpc_pb;
            //            _saveList.Hpc_pb_lvl = _tmpList.Hpc_pb_lvl;
            //            _saveList.Hpc_pro = _tmpList.Hpc_pro;
            //            _saveList.Hpc_pty_cd = _tmpList.Hpc_pty_cd;
            //            _saveList.Hpc_pty_tp = _tmpList.Hpc_pty_tp;
            //            _saveList.Hpc_sch_cd = _tmpList.Hpc_sch_cd;
            //            _saveList.Hpc_ser = _tmpList.Hpc_ser;
            //            _saveList.Hpc_stus = "S";
            //            _saveList.Hpc_to_dt = _tmpList.Hpc_to_dt;
            //            _saveList.Hpc_price_cir_no = _tmpList.Hpc_price_cir_no;     //kapila 10/3/2017
            //            _salesDAL.SaveNewSchemeCommDefinition(_saveList);
            //        }


            //        _salesDAL.DeleteHPSchProcess(_user);
            //        _inventoryDAL.ConnectionClose();
            //        _salesDAL.ConnectionClose();
            //        _effects = 1;
            //        _tr.Complete();


            //    }
            //    return _effects;
            //}
            //catch (Exception err)
            //{
            //    throw new Exception(err.Message);
            //}
            #endregion
        }

        public Int32 SaveAdditionalProductBonus(List<MasterAdditionalProductBonus> _productBonus, List<string> pc_List)
        {
            int effect = 0;
            _salesDAL = new SalesDAL();
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();

                try
                {
                    foreach (MasterAdditionalProductBonus _pb in _productBonus)
                    {
                        foreach (string pc_ in pc_List)
                        {
                            _pb.Itc_pc = pc_;
                            effect = _salesDAL.SaveAdditionalProductBonus(_pb);
                        }

                    }
                    _salesDAL.ConnectionClose();
                    effect = 1;
                    _tr.Complete();
                }
                catch
                {
                    effect = -1;
                }

            }

            return effect;
        }

        public List<MasterAdditionalProductBonus> GetAllProductBonusSetup(string _company)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAllProductBonusSetup(_company);
        }

        //darshana 16-04-2013
        public MasterItemSubCate GetItemSubCate(string _cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetItemSubCate(_cd);
        }

        //darshana 16-04-2013
        public List<MasterItem> GetItemsByCateAndBrand(string _mainCate, string _subCate, string _itmRange, string _brand, string _com)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetItemsByCateAndBrand(_mainCate, _subCate, _itmRange, _brand, _com);
        }

        //darshana 16-04-2013
        public List<PriceDetailRef> GetPriceDetailsByCir(string _book, string _level, string _promo, string _cir)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceDetailsByCir(_book, _level, _promo, _cir);
        }

        public List<MasterExchangeRate> GetValid_ExchangeRates(string _com, string fromCur, string toCur, DateTime fromDt)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetValid_ExchangeRates(_com, fromCur, toCur, fromDt);

        }

        //darshana on 12-04-2013
        public Int16 SaveHpGurantorsParam(List<HPGurantorParam> _hpGurParam)
        {
            Int16 _effects = 0;
            Int32 _seqNo = 0;
            string _usr = "";
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();

                foreach (HPGurantorParam _tmpList in _hpGurParam)
                {
                    _seqNo = _inventoryDAL.GetSerialID();
                    _tmpList.Hpg_seq = _seqNo;
                    _salesDAL.SaveHpGurantorsParam(_tmpList);
                    _usr = _tmpList.Hpg_cre_by;
                }

                var _final = (from _lst in _hpGurParam
                              select _lst.Hpg_sch_cd).ToList().Distinct();


                foreach (var j in _final)
                {
                    _salesDAL.UpdateSchemeActStatus(j, _usr, false);
                }


                _inventoryDAL.ConnectionClose();
                _salesDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }

        //darshana on 12-04-2013
        public Int16 SaveHpOtherChargeDef(List<HpOtherCharges> _hoOthCha)
        {
            Int16 _effects = 0;
            Int32 _seqNo = 0;
            string _usr = "";
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();

                foreach (HpOtherCharges _tmpList in _hoOthCha)
                {
                    _seqNo = _inventoryDAL.GetSerialID();
                    _tmpList.Hoc_seq = _seqNo;
                    _salesDAL.SaveHpOtherChargeDef(_tmpList);
                    _usr = _tmpList.Hoc_cre_by;
                }


                var _final = (from _lst in _hoOthCha
                              select _lst.Hoc_sch_cd).ToList().Distinct();


                foreach (var j in _final)
                {
                    _salesDAL.UpdateSchemeActStatus(j, _usr, false);
                }

                _inventoryDAL.ConnectionClose();
                _salesDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }

        //darshana on 18-04-2013
        public List<HpSchemeDetails> getAllActiveSchemes(string _cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getAllActiveSchemes(_cd);
        }

        //darshana on 19-04-2013
        public List<PriceSerialRef> getSerialpriceDetailsForCir(string _itm, string _cir)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getSerialpriceDetailsForCir(_itm, _cir);
        }

        //darshana on 19-04-2013
        public Int16 SaveServiceChgDef(List<HpServiceCharges> _serChg)
        {
            Int16 _effects = 0;
            Int32 _seqNo = 0;
            string _usr = "";
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();

                foreach (HpServiceCharges _tmpList in _serChg)
                {
                    _seqNo = _inventoryDAL.GetSerialID();
                    _tmpList.Hps_seq = _seqNo;
                    _salesDAL.SaveServiceChgDef(_tmpList);
                    _usr = _tmpList.Hps_cre_by;
                }

                var _final = (from _lst in _serChg
                              select _lst.Hps_sch_cd).ToList().Distinct();


                foreach (var j in _final)
                {
                    _salesDAL.UpdateSchemeActStatus(j, _usr, false);
                }

                _inventoryDAL.ConnectionClose();
                _salesDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }

        public Int16 SaveProofDoc(List<HpProofDoc> _tmpProofDoc)
        {
            Int16 _effects = 0;
            string _usr = "";
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();

                foreach (HpProofDoc _tmpList in _tmpProofDoc)
                {
                    _salesDAL.SaveProofDoc(_tmpList);
                    _usr = _tmpList.Hsp_cre_by;
                }

                var _final = (from _lst in _tmpProofDoc
                              select _lst.Hsp_sch_cd).ToList().Distinct();


                foreach (var j in _final)
                {
                    _salesDAL.UpdateSchemeActStatus(j, _usr, false);
                }

                _inventoryDAL.ConnectionClose();
                _salesDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }

        public MasterProofDocs GetMasterProofDoc(string _cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetMasterProofDoc(_cd);
        }

        public Decimal AvailableForRefund(string manualno)
        {
            // _salesDAL = new SalesDAL();
            // return _salesDAL.AvailableForRefund(manualno);

            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Decimal bal = _salesDAL.AvailableForRefund(manualno);
            _salesDAL.ConnectionClose();
            return bal;
        }

        public DataTable GetTotalRevAmtByInv(string _invNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetTotalRevAmtByInv(_invNo);
        }

        //public List<HpSchemeDefinition> getSchemeByPC(string _pc, DateTime _dt)
        public DataTable getSchemeByPC(string _pc, DateTime _dt)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getSchemeByPC(_pc, _dt);
        }

        //darshana on 19-04-2013
        //update sachith 2013/09/06
        public Int16 SavePriceDetails(List<PriceDetailRef> _priceDet, List<PriceCombinedItemRef> _priceDetCom, MasterAutoNumber _priceAuto, List<PriceProfitCenterPromotion> _appPCList, List<PriceSerialRef> _serialPrice, PriceDetailRestriction _restriction, out string _err, string session, string user, string _com, List<Circular_Schemes> _circSchList, Int32 _isInfCrd, string _remark, SAR_PB_CIREFFECT _SAR_PB_CIREFFECT = null)
        {
            Int16 _effects = 0;
            Int32 _seqNo = 0;
            Int32 _tmppbSeq = 0;
            Int32 _seqNoSub = 0;
            Int32 _seqLine = 0;
            string _documentNo = string.Empty;
            string _documentNosub = string.Empty;
            string _circ = "";
            try
            {
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.BeginTransaction();
                if (_priceDet != null && _priceDet.Count > 0)
                {
                    //kapila 8/3/2017
                    if (_isInfCrd == 1)
                    {
                        foreach (Circular_Schemes _tmpcircSchList in _circSchList)
                        {
                            _circ = _tmpcircSchList.Circ;   //kapila 8/3/2017
                            _salesDAL.SavePriceDetailsSch(_tmpcircSchList);
                        }
                        _salesDAL.SavePriceDetailsSchRem(_circ, _remark);
                    }
                    foreach (PriceDetailRef _tmpList in _priceDet)
                    {

                        #region Normal Price


                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_priceAuto.Aut_moduleid, _priceAuto.Aut_direction, _priceAuto.Aut_start_char, _priceAuto.Aut_cate_tp, _priceAuto.Aut_cate_cd, _priceAuto.Aut_modify_dt, _priceAuto.Aut_year).Aut_number;
                        _documentNo = _priceAuto.Aut_cate_cd + _priceAuto.Aut_start_char + string.Format("{0:0000}", _autoNo);
                        _seqNo = _inventoryDAL.GetSerialID();
                        _tmppbSeq = _tmpList.Sapd_pb_seq;
                        _tmpList.Sapd_pb_seq = _seqNo;
                        _tmpList.Sapd_promo_cd = _documentNo;
                        _salesDAL.SavePriceDetails(_tmpList);




                        LogPriceDef _log = new LogPriceDef();
                        _log.Log_dt = _tmpList.Sapd_from_date;
                        _log.Log_rmk = "Save new price definition";
                        _log.Log_session = session;
                        _log.Log_usr = user;
                        _log.Promo_cd = _documentNo;
                        _log.Pb = _tmpList.Sapd_pb_tp_cd;
                        _log.To_dt = _tmpList.Sapd_to_date;
                        _log.Cir_no = _tmpList.Sapd_circular_no;
                        _salesDAL.SavePriceingLog(_log);





                        //save restriction
                        if (_restriction != null)
                        {
                            _restriction.Spr_promo = _documentNo;
                            _salesDAL.SavePriceDetailRestriction(_restriction);
                        }

                        if (_priceDetCom != null)
                        {
                            foreach (PriceCombinedItemRef _tmpcomList in _priceDetCom)
                            {
                                if (_tmpcomList.Sapc_pb_seq == _tmppbSeq)
                                {
                                    _tmpcomList.Sapc_pb_seq = _seqNo;
                                    _salesDAL.SavePriceDetailsCom(_tmpcomList);
                                }
                            }
                        }


                        if (_appPCList != null)
                        {
                            foreach (PriceProfitCenterPromotion _tmpAppList in _appPCList)
                            {
                                _tmpAppList.Srpr_pbseq = _seqNo;
                                _tmpAppList.Srpr_promo_cd = _documentNo;
                                _salesDAL.SaveAppPromoPc(_tmpAppList);
                            }
                        }

                        _inventoryDAL.UpdateAutoNumber(_priceAuto);



                        #endregion
                        // Nadeeka 12-09-2015
                        #region Base Price
                        Decimal _margin = 0;
                        String _charge = string.Empty;
                        decimal _price = _tmpList.Sapd_itm_price;
                        List<sar_pb_def> _lstpbdef = _salesDAL.GetPriceDefHeaderforPB(_com, _tmpList.Sapd_pb_tp_cd, _tmpList.Sapd_pbk_lvl_cd, Convert.ToDateTime(_tmpList.Sapd_from_date).Date, _tmpList.Sapd_itm_cd);
                        #region new code n Base Price creted by tharanga 2018/05/15
                        List<sar_pb_def> _lstpbdef_new = _salesDAL.GetPriceDefHeaderforPB_all(_com, _tmpList.Sapd_pb_tp_cd, _tmpList.Sapd_pbk_lvl_cd, Convert.ToDateTime(_tmpList.Sapd_from_date).Date, _tmpList.Sapd_price_type);
                        if (_lstpbdef_new != null)
                        {
                            if (_lstpbdef_new.Count > 0)
                            {
                                foreach (sar_pb_def _sar_pb_def in _lstpbdef_new)
                                {
                                    for (int i = 1; i < 7; i++)
                                    {
                                        List<sar_pb_def_det> GetPriceDef_details_new = _salesDAL.GetPriceDef_details_new(_com, _sar_pb_def.Spd_pb, _sar_pb_def.Spd_pblvl, Convert.ToDateTime(_tmpList.Sapd_from_date).Date, _tmpList.Sapd_itm_cd, i, _sar_pb_def.Spd_base_pb, _sar_pb_def.Spd_base_pblvl, _sar_pb_def.SPD_PRICE_TYPE);
                                        if (GetPriceDef_details_new != null)
                                        {
                                            if (GetPriceDef_details_new.Count > 0)
                                            {
                                                foreach (sar_pb_def_det pb_def_det in GetPriceDef_details_new)
                                                {

                                                    Int32 _autoNosub = _inventoryDAL.GetAutoNumber(_priceAuto.Aut_moduleid, _priceAuto.Aut_direction, _priceAuto.Aut_start_char, _priceAuto.Aut_cate_tp, _priceAuto.Aut_cate_cd, _priceAuto.Aut_modify_dt, _priceAuto.Aut_year).Aut_number;
                                                    _documentNosub = _priceAuto.Aut_cate_cd + _priceAuto.Aut_start_char + string.Format("{0:0000}", _autoNosub);
                                                    DataTable _tblpb = _salesDAL.GetPriceDefDetBasedPB(pb_def_det.Spdd_seq, _tmpList.Sapd_itm_cd);

                                                    foreach (DataRow dr in _tblpb.Rows)
                                                    {
                                                        _margin = Convert.ToDecimal(dr["GSP_MARGIN"].ToString());
                                                        _charge = dr["GSP_CHAR_CODE"].ToString();
                                                    }

                                                    if (_sar_pb_def.Spd_cate == "I")
                                                    {
                                                        if (_margin > 0)
                                                        {
                                                            _seqLine = _seqLine + 1;
                                                            _seqNoSub = _inventoryDAL.GetSerialID();
                                                            _tmppbSeq = _tmpList.Sapd_pb_seq;
                                                            _tmpList.Sapd_pb_seq = _seqNoSub;
                                                            _tmpList.Sapd_promo_cd = _documentNosub;
                                                            _tmpList.Sapd_pb_seq_base = _seqNo;
                                                            _tmpList.Sapd_seq_no_base = _tmpList.Sapd_seq_no;
                                                            _tmpList.Sapd_seq_no = _seqLine;
                                                            _tmpList.Sapd_itm_price = (_price * _margin / 100);
                                                            _tmpList.Sapd_pb_tp_cd = _sar_pb_def.Spd_pb;
                                                            _tmpList.Sapd_pbk_lvl_cd = _sar_pb_def.Spd_pblvl;
                                                            _salesDAL.SavePriceDetails(_tmpList);
                                                        }

                                                    }
                                                    else
                                                    {
                                                        if (_margin > 0)
                                                        {
                                                            _seqLine = _seqLine + 1;
                                                            _seqNoSub = _inventoryDAL.GetSerialID();
                                                            _tmppbSeq = _tmpList.Sapd_pb_seq;
                                                            _tmpList.Sapd_pb_seq = _seqNoSub;
                                                            _tmpList.Sapd_promo_cd = _documentNosub;
                                                            _tmpList.Sapd_pb_seq_base = _seqNo;
                                                            _tmpList.Sapd_seq_no_base = _tmpList.Sapd_seq_no;
                                                            _tmpList.Sapd_seq_no = _seqLine;
                                                            _tmpList.Sapd_itm_cd = _charge;
                                                            _tmpList.Sapd_itm_price = (_price * _margin / 100);
                                                            _tmpList.Sapd_pb_tp_cd = _sar_pb_def.Spd_pb;
                                                            _tmpList.Sapd_pbk_lvl_cd = _sar_pb_def.Spd_pblvl;
                                                            _salesDAL.SavePriceDetails(_tmpList);
                                                        }
                                                    }

                                                    //save restriction
                                                    if (_restriction != null)
                                                    {
                                                        _restriction.Spr_promo = _documentNosub;
                                                        _salesDAL.SavePriceDetailRestriction(_restriction);
                                                    }

                                                    if (_priceDetCom != null)
                                                    {
                                                        foreach (PriceCombinedItemRef _tmpcomList in _priceDetCom)
                                                        {
                                                            if (_tmpcomList.Sapc_pb_seq == _tmppbSeq)
                                                            {
                                                                _tmpcomList.Sapc_main_line = _seqLine;
                                                                _tmpcomList.Sapc_pb_seq = _seqNoSub;
                                                                _salesDAL.SavePriceDetailsCom(_tmpcomList);
                                                            }
                                                        }
                                                    }


                                                    if (_appPCList != null)
                                                    {
                                                        foreach (PriceProfitCenterPromotion _tmpAppList in _appPCList)
                                                        {
                                                            _tmpAppList.Srpr_pbseq = _seqNoSub;
                                                            _tmpAppList.Srpr_promo_cd = _documentNosub;
                                                            _salesDAL.SaveAppPromoPc(_tmpAppList);
                                                        }
                                                    }

                                                    _inventoryDAL.UpdateAutoNumber(_priceAuto);
                                                }
                                            }
                                        }

                                    }


                                }

                            }
                        }
                        #endregion
                        #region old code
                        //if (_lstpbdef != null)
                        //{
                        //    if (_lstpbdef.Count > 0)
                        //    {
                        //        foreach (sar_pb_def pbdef in _lstpbdef)
                        //        {


                        //            Int32 _autoNosub = _inventoryDAL.GetAutoNumber(_priceAuto.Aut_moduleid, _priceAuto.Aut_direction, _priceAuto.Aut_start_char, _priceAuto.Aut_cate_tp, _priceAuto.Aut_cate_cd, _priceAuto.Aut_modify_dt, _priceAuto.Aut_year).Aut_number;
                        //            _documentNosub = _priceAuto.Aut_cate_cd + _priceAuto.Aut_start_char + string.Format("{0:0000}", _autoNosub);
                        //            DataTable _tblpb = _salesDAL.GetPriceDefDetBasedPB(pbdef.Spd_seq, _tmpList.Sapd_itm_cd);

                        //            _margin = 0;
                        //            foreach (DataRow dr in _tblpb.Rows)
                        //            {
                        //                _margin = Convert.ToDecimal(dr["GSP_MARGIN"].ToString());
                        //                _charge = dr["GSP_CHAR_CODE"].ToString();
                        //            }

                        //            if (pbdef.Spd_cate == "I")
                        //            {
                        //                if (_margin > 0)
                        //                {
                        //                    _seqLine = _seqLine + 1;
                        //                    _seqNoSub = _inventoryDAL.GetSerialID();
                        //                    _tmppbSeq = _tmpList.Sapd_pb_seq;
                        //                    _tmpList.Sapd_pb_seq = _seqNoSub;
                        //                    _tmpList.Sapd_promo_cd = _documentNosub;
                        //                    _tmpList.Sapd_pb_seq_base = _seqNo;
                        //                    _tmpList.Sapd_seq_no_base = _tmpList.Sapd_seq_no;
                        //                    _tmpList.Sapd_seq_no = _seqLine;
                        //                    _tmpList.Sapd_itm_price = (_price * _margin / 100);
                        //                    _tmpList.Sapd_pb_tp_cd = pbdef.Spd_pb;
                        //                    _tmpList.Sapd_pbk_lvl_cd = pbdef.Spd_pblvl;
                        //                    _salesDAL.SavePriceDetails(_tmpList);
                        //                }

                        //            }
                        //            else
                        //            {
                        //                if (_margin > 0)
                        //                {
                        //                    _seqLine = _seqLine + 1;
                        //                    _seqNoSub = _inventoryDAL.GetSerialID();
                        //                    _tmppbSeq = _tmpList.Sapd_pb_seq;
                        //                    _tmpList.Sapd_pb_seq = _seqNoSub;
                        //                    _tmpList.Sapd_promo_cd = _documentNosub;
                        //                    _tmpList.Sapd_pb_seq_base = _seqNo;
                        //                    _tmpList.Sapd_seq_no_base = _tmpList.Sapd_seq_no;
                        //                    _tmpList.Sapd_seq_no = _seqLine;
                        //                    _tmpList.Sapd_itm_cd = _charge;
                        //                    _tmpList.Sapd_itm_price = (_price * _margin / 100);
                        //                    _tmpList.Sapd_pb_tp_cd = pbdef.Spd_pb;
                        //                    _tmpList.Sapd_pbk_lvl_cd = pbdef.Spd_pblvl;
                        //                    _salesDAL.SavePriceDetails(_tmpList);
                        //                }
                        //            }






                        //            //save restriction
                        //            if (_restriction != null)
                        //            {
                        //                _restriction.Spr_promo = _documentNosub;
                        //                _salesDAL.SavePriceDetailRestriction(_restriction);
                        //            }

                        //            if (_priceDetCom != null)
                        //            {
                        //                foreach (PriceCombinedItemRef _tmpcomList in _priceDetCom)
                        //                {
                        //                    if (_tmpcomList.Sapc_pb_seq == _tmppbSeq)
                        //                    {
                        //                        _tmpcomList.Sapc_pb_seq = _seqNoSub;
                        //                        _salesDAL.SavePriceDetailsCom(_tmpcomList);
                        //                    }
                        //                }
                        //            }


                        //            if (_appPCList != null)
                        //            {
                        //                foreach (PriceProfitCenterPromotion _tmpAppList in _appPCList)
                        //                {
                        //                    _tmpAppList.Srpr_pbseq = _seqNoSub;
                        //                    _tmpAppList.Srpr_promo_cd = _documentNosub;
                        //                    _salesDAL.SaveAppPromoPc(_tmpAppList);
                        //                }
                        //            }

                        //            _inventoryDAL.UpdateAutoNumber(_priceAuto);

                        //        }
                        #endregion
                        #endregion

                    }
                }

                else if (_serialPrice != null && _serialPrice.Count > 0)
                {
                    foreach (PriceSerialRef _tmpSerial in _serialPrice)
                    {
                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_priceAuto.Aut_moduleid, _priceAuto.Aut_direction, _priceAuto.Aut_start_char, _priceAuto.Aut_cate_tp, _priceAuto.Aut_cate_cd, _priceAuto.Aut_modify_dt, _priceAuto.Aut_year).Aut_number;
                        _documentNo = _priceAuto.Aut_cate_cd + _priceAuto.Aut_start_char + string.Format("{0:0000}", _autoNo);
                        _seqNo = _inventoryDAL.GetSerialID();
                        _tmppbSeq = _tmpSerial.Sars_pb_seq;
                        _tmpSerial.Sars_pb_seq = _seqNo;
                        _tmpSerial.Sars_promo_cd = _documentNo;
                        _salesDAL.Save_Serial_Price(_tmpSerial);

                        //save restriction
                        if (_restriction != null)
                        {
                            _restriction.Spr_promo = _documentNo;
                            _salesDAL.SavePriceDetailRestriction(_restriction);
                        }

                        if (_priceDetCom != null)
                        {
                            foreach (PriceCombinedItemRef _tmpcomList in _priceDetCom)
                            {
                                if (_tmpcomList.Sapc_pb_seq == _tmppbSeq)
                                {
                                    _tmpcomList.Sapc_pb_seq = _seqNo;
                                    _salesDAL.SavePriceDetailsCom(_tmpcomList);
                                }
                            }
                        }


                        if (_appPCList != null)
                        {
                            foreach (PriceProfitCenterPromotion _tmpAppList in _appPCList)
                            {
                                _tmpAppList.Srpr_pbseq = _seqNo;
                                _tmpAppList.Srpr_promo_cd = _documentNo;
                                _salesDAL.SaveAppPromoPc(_tmpAppList);
                            }
                        }


                        _inventoryDAL.UpdateAutoNumber(_priceAuto);

                        #region Base Price

                        Decimal _margin = 0;
                        String _charge = string.Empty;
                        decimal _price = _tmpSerial.Sars_itm_price;
                        List<sar_pb_def> _lstpbdef = _salesDAL.GetPriceDefHeaderforPB(_com, _tmpSerial.Sars_pbook, _tmpSerial.Sars_price_lvl, Convert.ToDateTime(_tmpSerial.Sars_val_frm).Date, _tmpSerial.Sars_itm_cd);
                        if (_lstpbdef != null)
                        {
                            if (_lstpbdef.Count > 0)
                            {
                                foreach (sar_pb_def pbdef in _lstpbdef)
                                {

                                    _margin = 0;
                                    Int32 _autoNosub = _inventoryDAL.GetAutoNumber(_priceAuto.Aut_moduleid, _priceAuto.Aut_direction, _priceAuto.Aut_start_char, _priceAuto.Aut_cate_tp, _priceAuto.Aut_cate_cd, _priceAuto.Aut_modify_dt, _priceAuto.Aut_year).Aut_number;
                                    _documentNosub = _priceAuto.Aut_cate_cd + _priceAuto.Aut_start_char + string.Format("{0:0000}", _autoNosub);
                                    DataTable _tblpb = _salesDAL.GetPriceDefDetBasedPB(pbdef.Spd_seq, _tmpSerial.Sars_itm_cd);
                                    _seqNoSub = _inventoryDAL.GetSerialID();
                                    foreach (DataRow dr in _tblpb.Rows)
                                    {
                                        _margin = Convert.ToDecimal(dr["GSP_MARGIN"].ToString());
                                        _charge = dr["GSP_CHAR_CODE"].ToString();
                                    }

                                    if (pbdef.Spd_cate == "I")
                                    {
                                        if (_margin > 0)
                                        {

                                            _tmppbSeq = _tmpSerial.Sars_pb_seq;
                                            _tmpSerial.Sars_pb_seq = _seqNoSub;
                                            _tmpSerial.Sars_pbook = pbdef.Spd_pb;
                                            _tmpSerial.Sars_price_lvl = pbdef.Spd_pblvl;
                                            _tmpSerial.Sars_pb_seq_base = _seqNo;

                                            _tmpSerial.Sars_promo_cd = _documentNosub;
                                            _tmpSerial.Sars_itm_price = (_price * _margin / 100);
                                            _salesDAL.Save_Serial_Price(_tmpSerial);
                                        }
                                    }


                                    //save restriction
                                    if (_restriction != null)
                                    {
                                        _restriction.Spr_promo = _documentNosub;
                                        _salesDAL.SavePriceDetailRestriction(_restriction);
                                    }

                                    if (_priceDetCom != null)
                                    {
                                        foreach (PriceCombinedItemRef _tmpcomList in _priceDetCom)
                                        {
                                            if (_tmpcomList.Sapc_pb_seq == _tmppbSeq)
                                            {
                                                _tmpcomList.Sapc_pb_seq = _seqNoSub;
                                                _salesDAL.SavePriceDetailsCom(_tmpcomList);
                                            }
                                        }
                                    }


                                    if (_appPCList != null)
                                    {
                                        foreach (PriceProfitCenterPromotion _tmpAppList in _appPCList)
                                        {
                                            _tmpAppList.Srpr_pbseq = _seqNoSub;
                                            _tmpAppList.Srpr_promo_cd = _documentNosub;
                                            _salesDAL.SaveAppPromoPc(_tmpAppList);
                                        }
                                    }


                                    _inventoryDAL.UpdateAutoNumber(_priceAuto);
                                }
                        #endregion
                            }
                        }
                    }


                }
                //add by tharanga 2017/11/21
                if (_SAR_PB_CIREFFECT != null && !(string.IsNullOrEmpty(_SAR_PB_CIREFFECT.spc_circular)))
                {
                    _salesDAL.SAVE_SAR_PB_CIREFFECT(_SAR_PB_CIREFFECT);
                }

                //save restriction
                //if (_restriction != null)
                //{
                //    _restriction.Spr_promo = _documentNo;
                //    _salesDAL.SavePriceDetailRestriction(_restriction);
                //}

                _inventoryDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                _effects = 1;
                _err = "";
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _effects = -1;
                _err = ex.Message;
            }
            return _effects;
        }

        //darshana on 05-05-2013
        public DataTable GetPromoCodesByCir(string _cir, string _promo, string _pb, string pbl)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPromoCodesByCir(_cir, _promo, _pb, pbl);
        }

        //darshana on 06/05/2013
        public List<PriceDetailRef> GetPricebyCirandPromo(string _cir, string _promo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPricebyCirandPromo(_cir, _promo);
        }

        //darshana on 06/05/2013
        public List<PriceProfitCenterPromotion> GetAllocPromoPc(string _com, string _promo, Int32 _pbSeq)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAllocPromoPc(_com, _promo, _pbSeq);
        }

        public int SaveAppPromoPc(List<PriceProfitCenterPromotion> _appPromoPc)
        {
            Int16 _effects = 0;

            _salesDAL = new SalesDAL();
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();

                foreach (PriceProfitCenterPromotion _tmpList in _appPromoPc)
                {
                    _salesDAL.SaveAppPromoPc(_tmpList);
                }

                _salesDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }

            return _effects;
        }

        public List<PriceDetailRef> GetPriceByPromoCD(string _promo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceByPromoCD(_promo);
        }


        public InvoiceHeader GetInvoiceHdrByCom(string _com, string _inv)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceHdrByCom(_com, _inv);
        }

        //darshana on 09-05-2013
        public List<MasterItemSimilar> GetSimilarSetupDet(string _com, string _itm, string _tp)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSimilarSetupDet(_com, _itm, _tp);
        }

        //darshana on 07-05-2013
        public Int16 SaveSimilarItems(List<MasterItemSimilar> _SaveList)
        {
            Int16 _effects = 0;
            Int32 _seqNo = 0;

            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();

                foreach (MasterItemSimilar _tmpList in _SaveList)
                {

                    _seqNo = _inventoryDAL.GetSerialID();
                    _tmpList.Misi_seq_no = _seqNo;
                    _salesDAL.SaveSimilarItems(_tmpList);

                }

                _inventoryDAL.ConnectionClose();
                _salesDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }

        //darshana on 09-05-2013
        public Int16 UpdateSimilarItems(List<MasterItemSimilar> _UpdateList)
        {
            Int16 _effects = 0;

            _salesDAL = new SalesDAL();
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();

                foreach (MasterItemSimilar _tmpList in _UpdateList)
                {
                    _salesDAL.UpdateSimilarItems(_tmpList);
                }

                _salesDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }

        public Int32 Save_ECD_definition(List<string> _hierchyList, List<string> _schList, List<string> _pbookList, List<string> _pblList, EarlyClosingDiscount _ecdDefinition)
        {
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            Int32 result = 0;

            _salesDAL.ConnectionOpen();
            _inventoryDAL.ConnectionOpen();
            foreach (string st in _hierchyList)
            {
                foreach (string st1 in _schList)
                {
                    //foreach (string pbl in _pblList) //PB LEVELS
                    for (int i = 0; i < _pblList.Count; i++)
                    {
                        //_scheme.Hpi_seq = 0;//_inventoryDAL.GetSerialID();
                        _ecdDefinition.Hed_pty_cd = st;
                        _ecdDefinition.Hed_sch_cd = st1;
                        _ecdDefinition.Hed_pb_lvl = _pblList[i];//pbl; 
                        _ecdDefinition.Hed_pb = _pbookList[i];//pbl; 
                        result = _salesDAL.SaveECDDefinitionVoucher(_ecdDefinition);
                    }
                }
            }
            _inventoryDAL.ConnectionClose();
            _salesDAL.ConnectionClose();
            return result;
        }

        //darshana on 09-05-2013
        public Int32 SavePcPriceDefinition(List<PriceDefinitionRef> _priceDef)
        {
            Int32 _effect = 0;
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                foreach (PriceDefinitionRef _list in _priceDef)
                {
                    _salesDAL.SavePcPriceDefinition(_list);
                }


                _salesDAL.ConnectionClose();
                _effect = 1;
                _tr.Complete();
            }
            return _effect;
        }


        // Nadeeka 20-05-2015
        public Int32 SavePcPriceDefinitionsChannel(List<SAR_DOC_CHANNEL_PRICE_DEFN> _priceDef)
        {
            Int32 _effect = 0;
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                foreach (SAR_DOC_CHANNEL_PRICE_DEFN _list in _priceDef)
                {
                    _salesDAL.SavePcPriceDefinitionsChannel(_list);
                }


                _salesDAL.ConnectionClose();
                _effect = 1;
                _tr.Complete();
            }
            return _effect;
        }


        //darshana on 10-05-2013
        public Int32 RemovePriceAccess(string p_pc, string p_invTp, string p_lvl, string p_com, string p_pb, string p_usr)
        {
            Int32 _effect = 0;
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();

                _salesDAL.RemovePriceAccess(p_pc, p_invTp, p_lvl, p_com, p_pb, p_usr);

                _salesDAL.ConnectionClose();
                _effect = 1;
                _tr.Complete();
            }
            return _effect;
        }
        // Nadeeka 21-05-2015
        public Int32 RemovePriceAccessSubChannel(string p_schannel, string p_invTp, string p_lvl, string p_com, string p_pb, string p_usr)
        {
            Int32 _effect = 0;
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();

                _salesDAL.RemovePriceAccessSubChannel(p_schannel, p_invTp, p_lvl, p_com, p_pb, p_usr);

                _salesDAL.ConnectionClose();
                _effect = 1;
                _tr.Complete();
            }
            return _effect;
        }

        // Nadeeka 21-05-2015
        public Int32 CheckAssignChannel(string p_schannel, string p_com)
        {
            Int32 _effect = 0;

            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            _effect = _salesDAL.CheckAssignChannel(p_schannel, p_com);

            _salesDAL.ConnectionClose();

            return _effect;
        }
        // Nadeeka 21-05-2015
        public Int32 CheckAssignChannelDef(string p_schannel, string p_com)
        {
            Int32 _effect = 0;

            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            _effect = _salesDAL.CheckAssignChannelDef(p_schannel, p_com);

            _salesDAL.ConnectionClose();

            return _effect;
        }


        public List<HpSchemeDetails> GetSchemeByType_orCode(string _schtp, string _schcode)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchemeByType_orCode(_schtp, _schcode);
        }

        public List<HpSchemeDetails> GetSchmeDet_on_term_tp(string _schtp, string _schcode, string term)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchmeDet_on_term_tp(_schtp, _schcode, term);
        }

        public Int32 Save_hpr_ecd_vou_defn(List<string> schemeList, List<string> pc_list, ECDVoucher evdVouDef)
        {
            Int32 _effect = 0;
            try
            {
                using (TransactionScope _tr = new TransactionScope())
                {
                    _salesDAL = new SalesDAL();
                    _salesDAL.ConnectionOpen();
                    foreach (string schm in schemeList)
                    {
                        foreach (string pc in pc_list)
                        {
                            evdVouDef.Hvd_sch_cd = schm;
                            evdVouDef.Hvd_pc = pc;
                            _effect = _salesDAL.Save_hpr_ecd_vou_defn(evdVouDef);
                        }
                    }
                    _salesDAL.ConnectionClose();
                    _effect = 1;
                    _tr.Complete();
                }
            }
            catch (Exception ex)
            {
                _effect = -1;
            }

            return _effect;

        }

        public DataTable Get_ecd_vou_defn_PClist(DateTime fromDt, DateTime toDt)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_ecd_vou_defn_PClist(fromDt, toDt);
        }

        public DataTable Get_ecd_vou_defn_SchmList(List<string> pc_list, DateTime fromDt, DateTime toDt)
        {
            DataTable dt = new DataTable();
            dt.TableName = "tbl";
            //_salesDAL = new SalesDAL();
            //_salesDAL.ConnectionOpen();

            //_salesDAL.ConnectionClose();                

            //return dt;
            _salesDAL = new SalesDAL();
            foreach (string pc_ in pc_list)
            {
                DataTable dt_pc = _salesDAL.Get_ecd_vou_defn_SchmList(pc_, fromDt, toDt);
                dt.Merge(dt_pc);
            }

            return dt;
        }

        public DataTable GetInvoiceVoucher(string _invoice, string _item)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceVoucher(_invoice, _item);
        }

        public Int32 Process_hpr_ecd_vouchers(MasterAutoNumber masterAuto, List<Int32> schemeSeqList, EarlyClosingDiscount evdVouDef, DateTime current_date, DateTime fromDt, DateTime toDt, out List<string> voucherNoList, out string _error)
        {
            Int32 _effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                _generalDAL = new GeneralDAL();

                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();

                voucherNoList = new List<string>();

                List<ECDVoucher> vouDefList = new List<ECDVoucher>();
                foreach (Int32 schmSeq in schemeSeqList)
                {
                    ECDVoucher vou = _salesDAL.Get_ecd_vou_defn_onSeq(schmSeq);
                    vouDefList.Add(vou);
                }
                //getAccFor_ecd_schems  NEW SP
                foreach (ECDVoucher vou in vouDefList)
                {
                    List<HpAccount> Acc_List = _salesDAL.get_acc_forVouchers(vou.Hvd_pc, vou.Hvd_sch_cd, vou.Hvd_acc_cr_from.Date, vou.Hvd_acc_cr_to.Date, vou.Hvd_from_bal, vou.Hvd_to_bal);
                    foreach (HpAccount acc in Acc_List)
                    {
                        Decimal AccBalance = _salesDAL.Get_AccountBalance(current_date, acc.Hpa_acc_no);
                        if (AccBalance >= vou.Hvd_from_bal && AccBalance <= vou.Hvd_to_bal && vou.Hvd_is_prc != true)
                        {
                            masterAuto.Aut_cate_cd = acc.Hpa_pc;
                            MasterAutoNumber _reversRecipt = _inventoryDAL.GetAutoNumber(masterAuto.Aut_moduleid, masterAuto.Aut_direction, masterAuto.Aut_start_char, masterAuto.Aut_cate_tp, masterAuto.Aut_cate_cd, masterAuto.Aut_modify_dt, masterAuto.Aut_year);
                            _reversRecipt.Aut_modify_dt = null;
                            _reversRecipt.Aut_year = null;

                            string voucherNo = _reversRecipt.Aut_cate_cd + "-" + _reversRecipt.Aut_start_char + "-" + _reversRecipt.Aut_number.ToString("0000000", CultureInfo.InvariantCulture);
                            _inventoryDAL.UpdateAutoNumber(_reversRecipt);

                            evdVouDef.Hed_acc_no = acc.Hpa_acc_no;
                            evdVouDef.Hed_ecd_is_rt = vou.Hvd_is_rt;
                            //evdVouDef.Hed_ecd_val=vou.Hvd_ecd_val;
                            evdVouDef.Hed_sch_cd = vou.Hvd_sch_cd;
                            evdVouDef.Hed_val = vou.Hvd_ecd_val;
                            evdVouDef.Hed_vou_no = voucherNo;
                            //evdVouDef.Hed_pty_tp;
                            evdVouDef.Hed_pty_cd = vou.Hvd_pc;
                            evdVouDef.Hed_from_dt = vou.Hvd_from_dt;
                            evdVouDef.Hed_to_dt = vou.Hvd_to_dt;

                            voucherNoList.Add(voucherNo);
                            //save
                            Int32 eff = _salesDAL.SaveECDDefinitionVoucher(evdVouDef);
                        }
                    }
                }

                foreach (Int32 schmSeq in schemeSeqList)
                {
                    //Update_voucher_Process_status   
                    Int32 efff = _salesDAL.Update_voucher_Process_status(schmSeq, current_date.Date);
                }
                //TODO:
                // Get accounts, check balance

                //ACC BALANCE
                // _salesDAL.Get_AccountBalance(current_date,"ACC.NUMBER");

                //TODO:
                //Insert to <hpr_ecd_defn>                
                //-------------------------------------------------------------------------------
                //TODO:  FILL THE EarlyClosingDiscount REST FEILDS
                //evdVouDef.Hed_acc_no=;
                //evdVouDef.Hed_ecd_is_rt;
                //evdVouDef.Hed_ecd_val;
                //evdVouDef.Hed_sch_cd;
                //evdVouDef.Hed_val;
                //evdVouDef.Hed_vou_no;
                //evdVouDef.Hed_pty_tp;
                //evdVouDef.Hed_pty_cd;               
                //-------------------------------------------------------------------------------

                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _generalDAL.TransactionCommit();
                _effect = 1;
                _error = "";
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _error = ex.Message;
                voucherNoList = null;
                return -1;
            }

            return _effect;

        }

        public Int32 send_SMS_ecd_vouchers(string _com, string _cust, string _acc, string _vou, string _msg, string _user, out string _error)
        {
            Int32 _effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _generalDAL = new GeneralDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();

                _effect = 1;
                _error = "";

                string _mobNo = "";
                string _cusNe = "";

                List<MasterBusinessEntity> _cusdet1 = new List<MasterBusinessEntity>();
                _cusdet1 = _salesDAL.GetActiveCustomerDetailList(_com, _cust, null, null, "C");
                foreach (MasterBusinessEntity newcus in _cusdet1)
                {
                    _mobNo = newcus.Mbe_mob;
                    _cusNe = newcus.Mbe_name;
                }

                if (!string.IsNullOrEmpty(_mobNo))
                {
                    if (_mobNo.Length >= 9)
                    {
                        string _mg = _msg;
                        OutSMS _out = new OutSMS();
                        _out.Msg = _mg;
                        _out.Msgstatus = 0;
                        _out.Msgtype = "S";
                        _out.Receivedtime = DateTime.Now;
                        _out.Receiver = "CUSTOMER";
                        //_out.Receiverphno = _info.Mmi_mobi_no;

                        if (_mobNo.Length == 10)
                        {
                            _out.Receiverphno = "+94" + _mobNo.Substring(1, 9);
                            _out.Senderphno = "+94" + _mobNo.Substring(1, 9);
                        }
                        if (_mobNo.Length == 9)
                        {
                            _out.Receiverphno = "+94" + _mobNo;
                            _out.Senderphno = "+94" + _mobNo;
                        }

                        _out.Refdocno = _acc;
                        _out.Sender = _user;
                        _out.Createtime = DateTime.Now;
                        _generalDAL.SaveSMSOut(_out);

                        _salesDAL.Update_ECD_as_Sent_SMS(_acc, _user);
                    }
                }
                _salesDAL.TransactionCommit();
                _generalDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _error = ex.Message;
                return -1;
            }

            return _effect;

        }


        public DataTable Get_voucher_details(List<string> voucherNoList)
        {
            _salesDAL = new SalesDAL();
            DataTable final_dt = new DataTable("finaltbl");
            foreach (string vouNo in voucherNoList)
            {
                DataTable _dt = _salesDAL.Get_voucher_details(vouNo);
                final_dt.Merge(_dt);
            }
            return final_dt;
        }

        public DataTable Get_vouchers_to_Print(List<string> pc_List)
        {
            _salesDAL = new SalesDAL();
            DataTable final_dt = new DataTable("finaltbl");
            foreach (string pc_ in pc_List)
            {
                DataTable _dt = _salesDAL.Get_vouchers_to_Print(pc_);
                final_dt.Merge(_dt);
            }
            return final_dt;
        }

        public DataTable Get_ecdDefnVoucher_PClist(DateTime fromDt, DateTime toDt)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_ecdDefnVoucher_PClist(fromDt, toDt);
        }

        public DataTable Get_ecd_vou_defn_For_Print_SchmList(List<string> pc_list, DateTime fromDt, DateTime toDt)
        {
            DataTable dt = new DataTable();
            dt.TableName = "tbl";
            _salesDAL = new SalesDAL();
            foreach (string pc_ in pc_list)
            {
                DataTable dt_pc = _salesDAL.Get_ecd_vou_defn_For_Print_SchmList(pc_, fromDt, toDt);
                dt.Merge(dt_pc);
            }
            return dt;
        }

        public DataTable Get_VoucherOnSchemeRate(List<string> pc_list, List<string> scheme_list, DateTime fromDt, DateTime toDt, List<Decimal> rateOrAmtList)
        {
            DataTable dt = new DataTable();
            dt.TableName = "tbl";
            _salesDAL = new SalesDAL();
            foreach (string pc_ in pc_list)
            {
                foreach (string scheme_ in scheme_list)
                {
                    foreach (Decimal rtAmt in rateOrAmtList)
                    {
                        DataTable dt_pc = _salesDAL.Get_VoucherOnSchemeRate(pc_, scheme_, fromDt, toDt, rtAmt);
                        dt.Merge(dt_pc);
                    }

                }

            }

            return dt;
        }

        public Int32 UpdateGiftVoucherValidDate(DateTime p_validto, string p_modby, string p_book, string p_page, string p_pc, string p_item, string p_com, string p_status, Int32 p_amendNoofItems)
        {
            Int32 _effects = 0;

            using (TransactionScope _tr = new TransactionScope())
            {
                _fmsInventoryDal = new FMS_InventoryDAL(); _fmsInventoryDal.ConnectionOpen();

                _effects = _fmsInventoryDal.UpdateGiftVoucherValidDate(p_validto, p_modby, p_book, p_page, p_pc, p_item, p_com, p_status, p_amendNoofItems);

                _fmsInventoryDal.ConnectionClose();

                if (_effects == 1)
                {
                    _effects = 1;
                    _fmsInventoryDal.TransactionCommit();
                    _tr.Complete();
                }
                else
                {
                    _effects = 0;
                }
            }
            return _effects;

        }

        public Int32 UpdateGiftVoucherStatus(string p_com, string p_pc, string p_book, string p_page, string p_item, Int16 p_status)
        {
            Int32 _effects = 0;
            using (TransactionScope _tr = new TransactionScope())
            {
                _fmsInventoryDal = new FMS_InventoryDAL(); _fmsInventoryDal.ConnectionOpen();

                _effects = _fmsInventoryDal.UpdateGiftVoucherStatus(p_com, p_pc, p_book, p_page, p_item, p_status);

                _fmsInventoryDal.ConnectionClose();

                if (_effects == 1)
                {
                    _effects = 1;
                    _tr.Complete();
                }
                else
                {
                    _effects = 0;
                }
            }
            return _effects;
        }

        public Int32 Update_ECD_Voucher_printStatus(string voucherNo, string printBy, DateTime printDate)
        {
            Int32 _effects = 0;
            _salesDAL = new SalesDAL();
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();

                _salesDAL.Update_ECD_Voucher_printStatus(voucherNo, printBy, printDate);


                _salesDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }

        public int UpdateCreditNoteBalance(string com, string pc, string invoice, decimal amo)
        {
            Int32 _effects = 0;
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            _effects = _salesDAL.UpdateCreditNoteBalance(com, pc, invoice, amo);
            _salesDAL.ConnectionClose();
            return _effects;

        }

        public InvoiceHeader get_CrNote(string _inv, string _com, string _pc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.get_CrNote(_inv, _com, _pc);
        }

        //written by darshana - 16/05/2013 - save cash refund request
        public Int32 SaveCashRefundReqApp(RequestApprovalHeader _AppHdr, List<RequestApprovalDetail> _AppDet, MasterAutoNumber _AppReqAuto, RequestApprovalHeaderLog _AppHdrLog, List<RequestApprovalDetailLog> _AppDetLog, out string _docNo)
        {
            Int32 _effect = 0;
            string _ReqNo = "";
            Int32 _line = 0;


            using (TransactionScope _tr = new TransactionScope())
            {
                _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen();
                _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen();

                //EDITED BY PRABHATH ON 13/03/2013
                string _ReqAppNo = _AppHdr.Grah_ref;
                if (string.IsNullOrEmpty(_AppHdr.Grah_ref))
                {
                    MasterAutoNumber ReqNoAuto = _inventoryDAL.GetAutoNumber(_AppReqAuto.Aut_moduleid, _AppReqAuto.Aut_direction, _AppReqAuto.Aut_start_char, _AppReqAuto.Aut_cate_tp, _AppReqAuto.Aut_cate_cd, _AppReqAuto.Aut_modify_dt, _AppReqAuto.Aut_year);
                    _ReqAppNo = ReqNoAuto.Aut_cate_cd + "-" + ReqNoAuto.Aut_start_char + "-" + ReqNoAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_AppReqAuto);
                }
                else
                    _inventoryDAL.DeleteAppReqTable(_ReqAppNo);


                _ReqNo = _ReqAppNo;
                _AppHdr.Grah_ref = _ReqAppNo;
                if (_AppHdrLog != null) _AppHdrLog.Grah_ref = _ReqAppNo;
                // _AppDet.Grad_ref = _ReqAppNo;

                _generalDAL.SaveRequestApproveHear(_AppHdr);
                if (_AppHdrLog != null) _generalDAL.SaveRequestApproveHear_Log(_AppHdrLog);

                _line = 0;
                if (_AppDet != null)
                {
                    foreach (RequestApprovalDetail _itm in _AppDet)
                    {
                        _line++;
                        _itm.Grad_ref = _ReqAppNo;
                        _itm.Grad_line = _line;
                        _generalDAL.Save_RequestApprove_Det(_itm);

                    }
                }

                _line = 0;
                if (_AppDetLog != null)
                {
                    foreach (RequestApprovalDetailLog _itm in _AppDetLog)
                    {
                        _line++;
                        _itm.Grad_ref = _ReqAppNo;
                        _itm.Grad_line = _line;
                        _generalDAL.Save_RequestApprove_Det_Log(_itm);
                    }
                }

                _generalDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _effect = 1;
                _tr.Complete();


            }

            _docNo = _ReqNo;
            return _effect;
        }

        //darshana 16-05-2013
        public Int16 SaveCashRefund(RecieptHeader _NewReceipt, RecieptItem _NewReceiptDetails, MasterAutoNumber _masterAutoNumber, MasterAutoNumber _masterAutoNumberType, out string docno)
        {
            Int16 _effects = 0;
            string _autoNumberRecType = "";
            string _documentNo = "";

            using (TransactionScope _tr = new TransactionScope())
            {

                _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen();
                _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen();

                _NewReceipt.Sar_receipt_no = _NewReceipt.Sar_seq_no.ToString();

                _salesDAL.SaveReceiptHeader(_NewReceipt);
                _salesDAL.SaveReceiptItem(_NewReceiptDetails);

                Int32 _autoNo = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                _documentNo = _masterAutoNumber.Aut_cate_cd + _masterAutoNumber.Aut_start_char + string.Format("{0:0000}", _autoNo);

                // Int32 _autoNoRecTp = _inventoryDAL.GetAutoNumber(_masterAutoNumberType.Aut_moduleid, _masterAutoNumberType.Aut_direction, _masterAutoNumberType.Aut_start_char, _masterAutoNumberType.Aut_cate_tp, _masterAutoNumberType.Aut_cate_cd, _masterAutoNumberType.Aut_modify_dt, _masterAutoNumberType.Aut_year).Aut_number;
                _autoNumberRecType = _masterAutoNumber.Aut_cate_cd + "-" + _masterAutoNumber.Aut_start_char + "-" + string.Format("{0:000000}", _autoNo);


                _salesDAL.UpdateRequestCloseStatus(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd, "ARQT022", _NewReceipt.Sar_ref_doc, "F", _NewReceipt.Sar_create_by);
                _salesDAL.UpdateInvoiceSettleAmt(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd, _NewReceipt.Sar_debtor_cd, _NewReceiptDetails.Sard_inv_no, _NewReceiptDetails.Sard_settle_amt);

                _salesDAL.UpdateRecAutoNumber(_documentNo, _NewReceipt.Sar_seq_no, _autoNumberRecType);


                _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);

                //_inventoryDAL.UpdateAutoNumber(_masterAutoNumberType);


                docno = _documentNo;

                _inventoryDAL.ConnectionClose();
                _salesDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }

        public int UpdatePromotionlDiscountStatus(string _cir, string user, string session)
        {
            Int32 _effects = 0;
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            _salesDAL.BeginTransaction();

            //CashPromotionDiscountHeader _header = _generalDAL.GetPromotionalDiscountBySeq(_seq);

            List<CashPromotionDiscountHeader> _headers = _salesDAL.GetPromotionalHeader(_cir);


            LogPriceDef _log = new LogPriceDef();
            _log.From_dt = _headers[0].Spdd_from_dt;
            _log.Log_rmk = "Cancel";
            _log.Log_session = session;
            _log.Log_usr = user;
            _log.Promo_cd = _headers[0].Spdh_seq.ToString();
            _log.To_dt = _headers[0].Spdd_to_dt;
            _log.Cir_no = _headers[0].Spdh_circular;
            _salesDAL.SaveDiscountDefinitionLog(_log);

            _salesDAL.TransactionCommit();

            _salesDAL.ConnectionOpen();
            _effects = _salesDAL.UpdatePromotionlDiscountStatus(_cir);
            _salesDAL.ConnectionClose();
            return _effects;
        }

        public DataTable GetPriceTypeByIndent(int _indentseq)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceTypeByIndent(_indentseq);

        }

        public int SaveDiscountDefinition(CashPromotionDiscountHeader _hdr, CashPromotionDiscountDetail _detail, List<string> _locList, DataTable _itemList, List<string> _salesTypeList, List<PriceBookLevelRef> _pbList, List<PaymentTypeRef> _payType, int _itemtp, out int _hdrCount, out int _detCount, out int _itemCount, out int _locCount, string _com, string _pc, out string err, string user, string session)
        {
            try
            {
                _inventoryDAL = new InventoryDAL();
                _salesDAL = new SalesDAL();
                _generalDAL = new GeneralDAL();
                //using (TransactionScope tr = new TransactionScope())
                //{
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();
                /*
            Serial=1
            Promotion=2
            Item=3
            Brand & Sub cat=4
            Brand & Cat=5
            Brand & main cat=6
            Brand=7
            Sub cat=8
            Cat=9
            Main cat=10
                */

                _hdrCount = 0;
                _detCount = 0;
                _itemCount = 0;
                _locCount = 0;
                //IF HAVE SALES TYPES
                if (_salesTypeList != null && _salesTypeList.Count > 0)
                {
                    foreach (String type in _salesTypeList)
                    {

                        if (_itemtp == 3)
                        {

                            CashPromotionDiscountHeader _header = new CashPromotionDiscountHeader();
                            _header = _hdr;
                            _header.Spdh_sale_tp = type;
                            //add by tharanga pass pc cd to the hdr 2017/09/23
                            foreach (String Spdh_pty_cd in _locList)
                            {
                                _header.Spdh_pty_cd = Spdh_pty_cd;
                            }

                            _hdrCount++;
                            //save header
                            int seqlId = _inventoryDAL.GetSerialID();
                            _header.Spdh_seq = seqlId;
                            _salesDAL.SavePromotionalDiscountHeader(_header);

                            LogPriceDef _log = new LogPriceDef();
                            _log.From_dt = _header.Spdd_from_dt;
                            _log.Log_rmk = "Saved";
                            _log.Log_session = session;
                            _log.Log_usr = user;
                            _log.Promo_cd = _header.Spdh_seq.ToString();
                            _log.To_dt = _header.Spdd_to_dt;
                            _log.Cir_no = _header.Spdh_circular;
                            _salesDAL.SaveDiscountDefinitionLog(_log);


                            //location loop
                            //kapila 4/1/2017
                            if (_header.Spdh_pty_tp == "CHNL" || _header.Spdh_pty_tp == "SCHNL")
                            {
                                foreach (string party in _locList)
                                {
                                    CashPromotionDiscountLocation _location = new CashPromotionDiscountLocation();
                                    _location.Spdl_com = _com;
                                    _location.Spdl_pc = party;
                                    _location.Spdl_seq = seqlId;
                                    _location.Spdl_cre_by = _hdr.Spdh_cre_by;
                                    _location.Spdl_cre_dt = _hdr.Spdh_cre_dt;
                                    _location.Spdl_pty_tp = _header.Spdh_pty_tp;   // == "Channel" ? "CHNL" : "SCHNL";

                                    _salesDAL.SavePromotionalDiscountLocation(_location);
                                }
                            }
                            else
                            {
                                foreach (string party in _locList)
                                {
                                    DataTable _loc = _salesDAL.GetPcFromHirarchey(party, _header.Spdh_pty_tp);
                                    foreach (DataRow dr in _loc.Rows)
                                    {
                                        CashPromotionDiscountLocation _location = new CashPromotionDiscountLocation();
                                        _location.Spdl_com = _com;
                                        _location.Spdl_pc = dr["MPI_PC_CD"].ToString();
                                        _location.Spdl_seq = seqlId;
                                        _location.Spdl_cre_by = _hdr.Spdh_cre_by;
                                        _location.Spdl_cre_dt = _hdr.Spdh_cre_dt;
                                        _location.Spdl_pty_tp = "PC";

                                        _salesDAL.SavePromotionalDiscountLocation(_location);
                                        _locCount++;
                                    }
                                }
                            }
                            //DETAIL SECTION
                            int detLine = 1;
                            foreach (PriceBookLevelRef _pb in _pbList)
                            {

                                foreach (PaymentTypeRef _pay in _payType)
                                {
                                    //save detail
                                    CashPromotionDiscountDetail _tDetail = new CashPromotionDiscountDetail();
                                    _tDetail = _detail;
                                    _tDetail.Spdd_pb = _pb.Sapl_pb;
                                    _tDetail.Spdd_pb_lvl = _pb.Sapl_pb_lvl_cd;
                                    _tDetail.Spdd_pay_tp = _pay.Sapt_cd;
                                    _tDetail.Spdd_bank = _pay.Sapt_cre_by;
                                    _tDetail.Spdd_cc_tp = _pay.Sapt_mod_by;
                                    _tDetail.Spdd_seq = seqlId;
                                    _tDetail.Spdd_line = detLine;
                                    _tDetail.Spdd_sale_tp = type;
                                    if (!string.IsNullOrEmpty(_pay.Sapt_act))
                                    {
                                        _tDetail.Spdd_alw_cc_pro = true;
                                        _tDetail.Spdd_cc_pd = Convert.ToInt32(_pay.Sapt_act);
                                    }
                                    else
                                    {
                                        _tDetail.Spdd_alw_cc_pro = false;
                                        _tDetail.Spdd_cc_pd = 0;
                                    }
                                    _salesDAL.SavePromotionalDiscountDetails(_tDetail);

                                    try
                                    {
                                        foreach (DataRow _ref in _itemList.Rows)
                                        {
                                            CashPromotionDiscountItem _item = new CashPromotionDiscountItem();
                                            _item.Spdi_cre_by = _hdr.Spdh_cre_by;
                                            _item.Spdi_cre_dt = _hdr.Spdh_cre_dt;
                                            _item.Spdi_itm = _ref["Sccd_itm"].ToString();
                                            _item.Spdi_line = detLine;
                                            _item.Spdi_seq = seqlId;
                                            _salesDAL.SavePromotionalDiscountItem(_item);

                                        }
                                    }
                                    catch (Exception e)
                                    {

                                        throw;
                                    }
                                    //save items to item table

                                    detLine++;
                                }
                            }
                        }
                        if (_itemtp != 3)
                        {
                            //item type loop
                            foreach (DataRow _itm in _itemList.Rows)
                            {
                                CashPromotionDiscountHeader _header = new CashPromotionDiscountHeader();
                                _header = _hdr;
                                _header.Spdh_sale_tp = type;
                                // _header.Spdh_pty_cd = party;


                                List<string> _itmList = new List<string>();
                                if (_itemtp == 3)
                                    _itmList.Add(_itm["Sccd_itm"].ToString());
                                if (_itemtp == 4 || _itemtp == 5 || _itemtp == 6)
                                {
                                    _header.Spdh_brd = _itm["Sccd_brd"].ToString();

                                    if (_itemtp == 4)
                                    {
                                        DataTable _dt = _inventoryDAL.GetItemByAll(_itm["Sccd_brd"].ToString(), _itm["Sccd_itm"].ToString(), "%", "%");
                                        foreach (DataRow dr in _dt.Rows)
                                        {
                                            _itmList.Add(dr["MI_CD"].ToString());
                                        }
                                    }
                                    if (_itemtp == 5)
                                    {
                                        DataTable _dt = _inventoryDAL.GetItemByAll(_itm["Sccd_brd"].ToString(), "%", _itm["Sccd_itm"].ToString(), "%");
                                        foreach (DataRow dr in _dt.Rows)
                                        {
                                            _itmList.Add(dr["MI_CD"].ToString());
                                        }
                                    }
                                    if (_itemtp == 6)
                                    {
                                        DataTable _dt = _inventoryDAL.GetItemByAll(_itm["Sccd_brd"].ToString(), "%", "%", _itm["Sccd_itm"].ToString());
                                        foreach (DataRow dr in _dt.Rows)
                                        {
                                            _itmList.Add(dr["MI_CD"].ToString());
                                        }
                                    }
                                }
                                else if (_itemtp == 1)
                                {
                                    _header.Spdh_ser = _itm["Sccd_itm"].ToString();
                                    _header.Spdh_itm = _itm["Sccd_ser"].ToString();

                                    //updated by akila 2018/02/19
                                    _itmList.Add(_itm["Sccd_itm"].ToString());
                                }
                                else if (_itemtp == 2)
                                {
                                    _header.Spdh_pro = _itm["Sccd_itm"].ToString();
                                }
                                else if (_itemtp == 7)
                                {
                                    _header.Spdh_brd = _itm["Sccd_itm"].ToString();
                                    DataTable _dt = _inventoryDAL.GetItemByAll(_itm["Sccd_brd"].ToString(), "%", "%", "%");
                                    foreach (DataRow dr in _dt.Rows)
                                    {
                                        _itmList.Add(dr["MI_CD"].ToString());
                                    }
                                }
                                else if (_itemtp == 8)
                                {
                                    _header.Spdh_cat3 = _itm["Sccd_itm"].ToString();
                                    DataTable _dt = _inventoryDAL.GetItemByAll("%", "%", "%", _itm["Sccd_itm"].ToString());
                                    foreach (DataRow dr in _dt.Rows)
                                    {
                                        _itmList.Add(dr["MI_CD"].ToString());
                                    }
                                }
                                else if (_itemtp == 9)
                                {
                                    _hdr.Spdh_cat2 = _itm["Sccd_itm"].ToString();
                                    DataTable _dt = _inventoryDAL.GetItemByAll("%", "%", _itm["Sccd_itm"].ToString(), "%");
                                    foreach (DataRow dr in _dt.Rows)
                                    {
                                        _itmList.Add(dr["MI_CD"].ToString());
                                    }
                                }
                                else if (_itemtp == 10)
                                {
                                    _header.Spdh_cat1 = _itm["Sccd_itm"].ToString();
                                    DataTable _dt = _inventoryDAL.GetItemByAll("%", _itm["Sccd_itm"].ToString(), "%", "%");
                                    foreach (DataRow dr in _dt.Rows)
                                    {
                                        _itmList.Add(dr["MI_CD"].ToString());
                                    }
                                }
                                _hdrCount++;
                                //save header
                                int seqlId = _inventoryDAL.GetSerialID();
                                _header.Spdh_seq = seqlId;
                                _salesDAL.SavePromotionalDiscountHeader(_header);


                                //save location in party to loc table

                                if (_header.Spdh_pty_tp == "CHNL" || _header.Spdh_pty_tp == "SCHNL")    //kapila 17/3/2017
                                {
                                    foreach (string party in _locList)
                                    {
                                        CashPromotionDiscountLocation _location = new CashPromotionDiscountLocation();
                                        _location.Spdl_com = _com;
                                        _location.Spdl_pc = party;
                                        _location.Spdl_seq = seqlId;
                                        _location.Spdl_cre_by = _hdr.Spdh_cre_by;
                                        _location.Spdl_cre_dt = _hdr.Spdh_cre_dt;
                                        _location.Spdl_pty_tp = _header.Spdh_pty_tp;   // == "Channel" ? "CHNL" : "SCHNL";

                                        _salesDAL.SavePromotionalDiscountLocation(_location);
                                    }
                                }
                                else
                                {
                                    //location loop
                                    foreach (string party in _locList)
                                    {

                                        DataTable _loc = _salesDAL.GetPcFromHirarchey(party, _header.Spdh_pty_tp);
                                        foreach (DataRow dr in _loc.Rows)
                                        {
                                            CashPromotionDiscountLocation _location = new CashPromotionDiscountLocation();
                                            _location.Spdl_com = _com;
                                            _location.Spdl_pc = dr["MPI_PC_CD"].ToString();
                                            _location.Spdl_seq = seqlId;
                                            _location.Spdl_cre_by = _hdr.Spdh_cre_by;
                                            _location.Spdl_cre_dt = _hdr.Spdh_cre_dt;
                                            _location.Spdl_pty_tp = "PC";

                                            _salesDAL.SavePromotionalDiscountLocation(_location);
                                            _locCount++;
                                        }

                                    }
                                }
                                //DETAIL SECTION
                                int detLine = 1;
                                foreach (PriceBookLevelRef _pb in _pbList)
                                {

                                    foreach (PaymentTypeRef _pay in _payType)
                                    {
                                        //save detail
                                        CashPromotionDiscountDetail _tDetail = new CashPromotionDiscountDetail();
                                        _tDetail = _detail;
                                        _tDetail.Spdd_pb = _pb.Sapl_pb;
                                        _tDetail.Spdd_pb_lvl = _pb.Sapl_pb_lvl_cd;
                                        _tDetail.Spdd_pay_tp = _pay.Sapt_cd;
                                        _tDetail.Spdd_bank = _pay.Sapt_cre_by;
                                        _tDetail.Spdd_cc_tp = _pay.Sapt_mod_by;
                                        _tDetail.Spdd_seq = seqlId;
                                        _tDetail.Spdd_line = detLine;
                                        _tDetail.Spdd_sale_tp = type;
                                        if (!string.IsNullOrEmpty(_pay.Sapt_act))
                                        {
                                            _tDetail.Spdd_alw_cc_pro = true;
                                            _tDetail.Spdd_cc_pd = Convert.ToInt32(_pay.Sapt_act);
                                        }
                                        else
                                        {
                                            _tDetail.Spdd_alw_cc_pro = false;
                                            _tDetail.Spdd_cc_pd = 0;
                                        }
                                        _salesDAL.SavePromotionalDiscountDetails(_tDetail);


                                        //save items to item table
                                        foreach (string _tItm in _itmList)
                                        {
                                            CashPromotionDiscountItem _item = new CashPromotionDiscountItem();
                                            _item.Spdi_cre_by = _hdr.Spdh_cre_by;
                                            _item.Spdi_cre_dt = _hdr.Spdh_cre_dt;
                                            _item.Spdi_itm = _tItm;
                                            _item.Spdi_line = detLine;
                                            _item.Spdi_seq = seqlId;
                                            _salesDAL.SavePromotionalDiscountItem(_item);

                                        }
                                        detLine++;
                                    }

                                }
                            }
                        }
                    }

                }
                //IF DO NOT HAVE SALES TYPES
                else
                {

                    //location loop
                    foreach (string party in _locList)
                    {
                        if (_itemtp == 3)
                        {

                            CashPromotionDiscountHeader _header = new CashPromotionDiscountHeader();
                            _header = _hdr;

                            _header.Spdh_pty_cd = party;


                            _hdrCount++;
                            //save header
                            int seqlId = _inventoryDAL.GetSerialID();
                            _header.Spdh_seq = seqlId;
                            _salesDAL.SavePromotionalDiscountHeader(_header);

                            if (_header.Spdh_pty_tp == "CHNL" || _header.Spdh_pty_tp == "SCHNL")    //kapila 17/3/2017
                            {
                                foreach (string party1 in _locList)
                                {
                                    CashPromotionDiscountLocation _location = new CashPromotionDiscountLocation();
                                    _location.Spdl_com = _com;
                                    _location.Spdl_pc = party1;
                                    _location.Spdl_seq = seqlId;
                                    _location.Spdl_cre_by = _hdr.Spdh_cre_by;
                                    _location.Spdl_cre_dt = _hdr.Spdh_cre_dt;
                                    _location.Spdl_pty_tp = _header.Spdh_pty_tp;   // == "Channel" ? "CHNL" : "SCHNL";

                                    _salesDAL.SavePromotionalDiscountLocation(_location);
                                }
                            }
                            else
                            {

                                DataTable _loc = _salesDAL.GetPcFromHirarchey(party, _header.Spdh_pty_tp);
                                foreach (DataRow dr in _loc.Rows)
                                {
                                    CashPromotionDiscountLocation _location = new CashPromotionDiscountLocation();
                                    _location.Spdl_com = _com;
                                    _location.Spdl_pc = dr["MPI_PC_CD"].ToString();
                                    _location.Spdl_seq = seqlId;
                                    _location.Spdl_cre_by = _hdr.Spdh_cre_by;
                                    _location.Spdl_cre_dt = _hdr.Spdh_cre_dt;
                                    _location.Spdl_pty_tp = "PC";

                                    _salesDAL.SavePromotionalDiscountLocation(_location);
                                    err = "Duplicate Record founf in Excle Sheet!";
                                    _locCount++;
                                }
                            }
                            //DETAIL SECTION
                            int detLine = 1;
                            foreach (PriceBookLevelRef _pb in _pbList)
                            {

                                foreach (PaymentTypeRef _pay in _payType)
                                {
                                    //save detail
                                    CashPromotionDiscountDetail _tDetail = new CashPromotionDiscountDetail();
                                    _tDetail = _detail;
                                    _tDetail.Spdd_pb = _pb.Sapl_pb;
                                    _tDetail.Spdd_pb_lvl = _pb.Sapl_pb_lvl_cd;
                                    _tDetail.Spdd_pay_tp = _pay.Sapt_cd;
                                    _tDetail.Spdd_bank = _pay.Sapt_cre_by;
                                    _tDetail.Spdd_cc_tp = _pay.Sapt_mod_by;
                                    _tDetail.Spdd_seq = seqlId;
                                    _tDetail.Spdd_line = detLine;
                                    if (!string.IsNullOrEmpty(_pay.Sapt_act))
                                    {
                                        _tDetail.Spdd_alw_cc_pro = true;
                                        _tDetail.Spdd_cc_pd = Convert.ToInt32(_pay.Sapt_act);
                                    }
                                    else
                                    {
                                        _tDetail.Spdd_alw_cc_pro = false;
                                        _tDetail.Spdd_cc_pd = 0;
                                    }
                                    _salesDAL.SavePromotionalDiscountDetails(_tDetail);


                                    //save items to item table
                                    foreach (DataRow _ref in _itemList.Rows)
                                    {
                                        CashPromotionDiscountItem _item = new CashPromotionDiscountItem();
                                        _item.Spdi_cre_by = _hdr.Spdh_cre_by;
                                        _item.Spdi_cre_dt = _hdr.Spdh_cre_dt;
                                        _item.Spdi_itm = _ref["Sccd_itm"].ToString();
                                        _item.Spdi_line = detLine;
                                        _item.Spdi_seq = seqlId;
                                        _salesDAL.SavePromotionalDiscountItem(_item);

                                    }
                                    detLine++;
                                }
                            }
                        }
                        if (_itemtp != 3)
                        {
                            //item type loop
                            foreach (DataRow _itm in _itemList.Rows)
                            {
                                CashPromotionDiscountHeader _header = new CashPromotionDiscountHeader();
                                _header = _hdr;


                                _header.Spdh_pty_cd = party;
                                List<string> _itmList = new List<string>();

                                if (_itemtp == 3)
                                    _itmList.Add(_itm["Sccd_itm"].ToString());

                                if (_itemtp == 4 || _itemtp == 5 || _itemtp == 6)
                                {
                                    _header.Spdh_brd = _itm["Sccd_brd"].ToString();

                                    if (_itemtp == 4)
                                    {
                                        DataTable _dt = _inventoryDAL.GetItemByAll(_itm["Sccd_brd"].ToString(), _itm["Sccd_itm"].ToString(), "%", "%");
                                        foreach (DataRow dr in _dt.Rows)
                                        {
                                            _itmList.Add(dr["MI_CD"].ToString());
                                        }
                                    }
                                    if (_itemtp == 5)
                                    {
                                        DataTable _dt = _inventoryDAL.GetItemByAll(_itm["Sccd_brd"].ToString(), "%", _itm["Sccd_itm"].ToString(), "%");
                                        foreach (DataRow dr in _dt.Rows)
                                        {
                                            _itmList.Add(dr["MI_CD"].ToString());
                                        }
                                    }
                                    if (_itemtp == 6)
                                    {
                                        DataTable _dt = _inventoryDAL.GetItemByAll(_itm["Sccd_brd"].ToString(), "%", "%", _itm["Sccd_itm"].ToString());
                                        foreach (DataRow dr in _dt.Rows)
                                        {
                                            _itmList.Add(dr["MI_CD"].ToString());
                                        }
                                    }
                                }
                                else if (_itemtp == 1)
                                {
                                    _header.Spdh_ser = _itm["Sccd_ser"].ToString();
                                    _header.Spdh_itm = _itm["Sccd_itm"].ToString();
                                }
                                else if (_itemtp == 2)
                                {
                                    _header.Spdh_pro = _itm["Sccd_itm"].ToString();
                                }
                                else if (_itemtp == 7)
                                {
                                    _header.Spdh_brd = _itm["Sccd_itm"].ToString();
                                    DataTable _dt = _inventoryDAL.GetItemByAll(_itm["Sccd_brd"].ToString(), "%", "%", "%");
                                    foreach (DataRow dr in _dt.Rows)
                                    {
                                        _itmList.Add(dr["MI_CD"].ToString());
                                    }
                                }
                                else if (_itemtp == 8)
                                {
                                    _header.Spdh_cat3 = _itm["Sccd_itm"].ToString();
                                    DataTable _dt = _inventoryDAL.GetItemByAll("%", "%", "%", _itm["Sccd_itm"].ToString());
                                    foreach (DataRow dr in _dt.Rows)
                                    {
                                        _itmList.Add(dr["MI_CD"].ToString());
                                    }
                                }
                                else if (_itemtp == 9)
                                {
                                    _hdr.Spdh_cat2 = _itm["Sccd_itm"].ToString();
                                    DataTable _dt = _inventoryDAL.GetItemByAll("%", "%", _itm["Sccd_itm"].ToString(), "%");
                                    foreach (DataRow dr in _dt.Rows)
                                    {
                                        _itmList.Add(dr["MI_CD"].ToString());
                                    }
                                }
                                else if (_itemtp == 10)
                                {
                                    _header.Spdh_cat1 = _itm["Sccd_itm"].ToString();
                                    DataTable _dt = _inventoryDAL.GetItemByAll("%", _itm["Sccd_itm"].ToString(), "%", "%");
                                    foreach (DataRow dr in _dt.Rows)
                                    {
                                        _itmList.Add(dr["MI_CD"].ToString());
                                    }
                                }
                                _hdrCount++;
                                //save header
                                int seqlId = _inventoryDAL.GetSerialID();
                                _header.Spdh_seq = seqlId;
                                _salesDAL.SavePromotionalDiscountHeader(_header);


                                //save location in party to loc table

                                if (_header.Spdh_pty_tp == "CHNL" || _header.Spdh_pty_tp == "SCHNL")    //kapila 17/3/2017
                                {
                                    foreach (string party2 in _locList)
                                    {
                                        CashPromotionDiscountLocation _location = new CashPromotionDiscountLocation();
                                        _location.Spdl_com = _com;
                                        _location.Spdl_pc = party2;
                                        _location.Spdl_seq = seqlId;
                                        _location.Spdl_cre_by = _hdr.Spdh_cre_by;
                                        _location.Spdl_cre_dt = _hdr.Spdh_cre_dt;
                                        _location.Spdl_pty_tp = _header.Spdh_pty_tp;   // == "Channel" ? "CHNL" : "SCHNL";

                                        _salesDAL.SavePromotionalDiscountLocation(_location);
                                    }
                                }
                                else
                                {
                                    DataTable _loc = _generalDAL.Get_Partycodes(_hdr.Spdh_pty_tp, party);
                                    foreach (DataRow dr in _loc.Rows)
                                    {
                                        CashPromotionDiscountLocation _location = new CashPromotionDiscountLocation();
                                        _location.Spdl_com = _com;
                                        _location.Spdl_pc = dr["Code"].ToString();
                                        _location.Spdl_seq = seqlId;
                                        _location.Spdl_cre_by = _hdr.Spdh_cre_by;
                                        _location.Spdl_cre_dt = _hdr.Spdh_cre_dt;

                                        _salesDAL.SavePromotionalDiscountLocation(_location);
                                        _locCount++;
                                    }
                                }
                                //DETAIL SECTION
                                int detLine = 1;
                                foreach (PriceBookLevelRef _pb in _pbList)
                                {

                                    foreach (PaymentTypeRef _pay in _payType)
                                    {
                                        //save detail
                                        CashPromotionDiscountDetail _tDetail = new CashPromotionDiscountDetail();
                                        _tDetail = _detail;
                                        _tDetail.Spdd_pb = _pb.Sapl_pb;
                                        _tDetail.Spdd_pb_lvl = _pb.Sapl_pb_lvl_cd;
                                        _tDetail.Spdd_pay_tp = _pay.Sapt_cd;
                                        _tDetail.Spdd_bank = _pay.Sapt_cre_by;
                                        _tDetail.Spdd_cc_tp = _pay.Sapt_mod_by;
                                        _tDetail.Spdd_seq = seqlId;
                                        _tDetail.Spdd_line = detLine;
                                        if (!string.IsNullOrEmpty(_pay.Sapt_act))
                                        {
                                            _tDetail.Spdd_alw_cc_pro = true;
                                            _tDetail.Spdd_cc_pd = Convert.ToInt32(_pay.Sapt_act);
                                        }
                                        else
                                        {
                                            _tDetail.Spdd_alw_cc_pro = false;
                                            _tDetail.Spdd_cc_pd = 0;
                                        }
                                        _salesDAL.SavePromotionalDiscountDetails(_tDetail);


                                        //save items to item table
                                        foreach (string _tItm in _itmList)
                                        {
                                            CashPromotionDiscountItem _item = new CashPromotionDiscountItem();
                                            _item.Spdi_cre_by = _hdr.Spdh_cre_by;
                                            _item.Spdi_cre_dt = _hdr.Spdh_cre_dt;
                                            _item.Spdi_itm = _tItm;
                                            _item.Spdi_line = detLine;
                                            _item.Spdi_seq = seqlId;
                                            _salesDAL.SavePromotionalDiscountItem(_item);

                                        }
                                        _detCount++;
                                    }

                                }
                            }
                        }

                    }

                }

                err = "";


                //_inventoryDAL.ConnectionClose();
                //_salesDAL.ConnectionClose();
                //_generalDAL.ConnectionClose();
                //tr.Complete();
                _inventoryDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                _generalDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                err = ex.Message;
                _hdrCount = 0;
                _detCount = 0;
                _itemCount = 0;
                _locCount = 0;
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _generalDAL.TransactionRollback();

            }
            return 1;
        }

        public DataTable GetVehicalRegistrationReciept(string _acc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehicalRegistrationReciept(_acc);

        }

        public List<HpSchemeDefinition> GetSchemeDetailsByCir(string _cir)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchemeDetailsByCir(_cir);
        }

        public Int32 UpdateSchemeStatus(string _cir, string _stus, string _usr, List<HpSchemeDefinitionLog> _DefLog)
        {
            Int32 _effects = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _effects = _salesDAL.UpdateSchemeStatus(_cir, _stus, _usr);

                foreach (HpSchemeDefinitionLog _list in _DefLog)
                {
                    _salesDAL.CreateSchCommLog(_list);
                }

                //_salesDAL.ConnectionClose();
                _salesDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _effects = -1;
            }

            return _effects;
        }

        public List<HpSchemeDefinition> GetAllSchemeCirculars()
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAllSchemeCirculars();
        }

        //darshana on 09-05-2013
        public Int32 SaveGeneralSchemeUpdation(List<HpSchemeDefinitionLog> _DefLog, DateTime _dt, decimal _rate, Int16 _isRate, string _usr, string _type, string _stus)
        {
            Int32 _effect = 0;
            try
            {

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                //using (TransactionScope _tr = new TransactionScope())
                //{
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                foreach (HpSchemeDefinitionLog _list in _DefLog)
                {
                    _salesDAL.CreateSchCommLog(_list);
                    _salesDAL.UpdateGeneralSchemDef(_dt, _rate, _isRate, _list.Hscl_cir, _usr, _type, _stus);
                }

                //_salesDAL.ConnectionClose();
                _salesDAL.TransactionCommit();
                _effect = 1;
                //_tr.Complete();
                //}
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _effect = -1;
            }

            return _effect;
        }

        public Int32 UpdateAddPricingParam(string _user, Boolean _age, string _msg, Boolean _cus, string _lvl, string _book, string _com)
        {
            Int32 _effect = 0;
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();

                _salesDAL.UpdateAddPricingParam(_user, _age, _msg, _cus, _lvl, _book, _com);

                _salesDAL.ConnectionClose();
                _effect = 1;
                _tr.Complete();
            }

            return _effect;
        }

        //Written by Prabhath on 03/06/2013
        #region Loyalty Point Calculation
        public List<LoyaltyPointDefinition> GetFesibleLoyaltyPayMode(List<LoyaltyPointDefinition> _foundlist, List<RecieptItem> _receiptdetail)
        {
            List<LoyaltyPointDefinition> _returnlist = null;
            if (_receiptdetail == null || _receiptdetail.Count <= 0)
            {
                var _wopmode = _foundlist.Where(x => string.IsNullOrEmpty(x.Saldf_pmod)).ToList();
                if (_wopmode != null)
                {
                    if (_wopmode.Count > 0)
                    {
                        _returnlist = _wopmode; return _returnlist;
                    }
                    else return _returnlist;
                }
                else return _returnlist;
            }

            foreach (RecieptItem _one in _receiptdetail)
            {
                var _pmode = _foundlist.Where(x => x.Saldf_pmod == _one.Sard_pay_tp).ToList();

                if (_one.Sard_pay_tp.ToUpper() == "CRCD")
                {
                    var _bankNtype0 = _pmode.Where(x => x.Saldf_bank == _one.Sard_credit_card_bank && x.Saldf_cd_tp == _one.Sard_cc_tp).ToList();
                    if (_bankNtype0 != null) if (_bankNtype0.Count > 0) { _returnlist = _bankNtype0; return _returnlist; }

                    var _bankNtype1 = _pmode.Where(x => x.Saldf_bank == _one.Sard_credit_card_bank && string.IsNullOrEmpty(x.Saldf_cd_tp)).ToList();
                    if (_bankNtype1 != null) if (_bankNtype1.Count > 0) { _returnlist = _bankNtype1; return _returnlist; }

                    var _bankNtype2 = _pmode.Where(x => string.IsNullOrEmpty(x.Saldf_bank) && x.Saldf_cd_tp == _one.Sard_cc_tp).ToList();
                    if (_bankNtype2 != null) if (_bankNtype2.Count > 0) { _returnlist = _bankNtype2; return _returnlist; }

                    var _bankNtype3 = _pmode.Where(x => string.IsNullOrEmpty(x.Saldf_bank) && string.IsNullOrEmpty(x.Saldf_cd_tp)).ToList();
                    if (_bankNtype3 != null) if (_bankNtype3.Count > 0) { _returnlist = _bankNtype3; return _returnlist; }
                }
                else if (_one.Sard_pay_tp.ToUpper() == "CHEQUE")
                {
                    var _bank0 = _pmode.Where(x => x.Saldf_bank == _one.Sard_chq_bank_cd).ToList();
                    if (_bank0 != null) if (_bank0.Count > 0) { _returnlist = _bank0; return _returnlist; }

                    var _banknull1 = _pmode.Where(x => string.IsNullOrEmpty(x.Saldf_bank)).ToList();
                    if (_banknull1 != null) if (_banknull1.Count > 0) { _returnlist = _banknull1; return _returnlist; }
                }
                else if (_one.Sard_pay_tp.ToUpper() == "DEBIT")
                {
                    var _bank0 = _pmode.Where(x => x.Saldf_bank == _one.Sard_chq_bank_cd).ToList();
                    if (_bank0 != null) if (_bank0.Count > 0) { _returnlist = _bank0; return _returnlist; }

                    var _banknull1 = _pmode.Where(x => string.IsNullOrEmpty(x.Saldf_bank)).ToList();
                    if (_banknull1 != null) if (_banknull1.Count > 0) { _returnlist = _banknull1; return _returnlist; }
                }
                else if (_one.Sard_pay_tp.ToUpper() == "CASH")
                {
                    var _paymode0 = _pmode.Where(x => x.Saldf_pmod == _one.Sard_pay_tp).ToList();
                    if (_paymode0 != null) if (_paymode0.Count > 0) { _returnlist = _paymode0; return _returnlist; }
                }
                else if (_one.Sard_pay_tp.ToUpper() == "ADVAN")
                {
                    var _paymode0 = _pmode.Where(x => x.Saldf_pmod == _one.Sard_pay_tp).ToList();
                    if (_paymode0 != null) if (_paymode0.Count > 0) { _returnlist = _paymode0; return _returnlist; }
                }
                else if (_one.Sard_pay_tp.ToUpper() == "CRNOTE")
                {
                    var _paymode0 = _pmode.Where(x => x.Saldf_pmod == _one.Sard_pay_tp).ToList();
                    if (_paymode0 != null) if (_paymode0.Count > 0) { _returnlist = _paymode0; return _returnlist; }
                }
                else if (_one.Sard_pay_tp.ToUpper() == "GVO")
                {
                    var _paymode0 = _pmode.Where(x => x.Saldf_pmod == _one.Sard_pay_tp).ToList();
                    if (_paymode0 != null) if (_paymode0.Count > 0) { _returnlist = _paymode0; return _returnlist; }
                }
                else if (_one.Sard_pay_tp.ToUpper() == "GVS")
                {
                    var _paymode0 = _pmode.Where(x => x.Saldf_pmod == _one.Sard_pay_tp).ToList();
                    if (_paymode0 != null) if (_paymode0.Count > 0) { _returnlist = _paymode0; return _returnlist; }
                }
                else if (_one.Sard_pay_tp.ToUpper() == "LORE")
                {
                    var _paymode0 = _pmode.Where(x => x.Saldf_pmod == _one.Sard_pay_tp).ToList();
                    if (_paymode0 != null) if (_paymode0.Count > 0) { _returnlist = _paymode0; return _returnlist; }
                }

                var _allnull0 = _pmode.Where(x => string.IsNullOrEmpty(x.Saldf_cat_1) && string.IsNullOrEmpty(x.Saldf_cat_2) && string.IsNullOrEmpty(x.Saldf_itm) && string.IsNullOrEmpty(x.Saldf_promo) && string.IsNullOrEmpty(x.Saldf_ser)).ToList();
                if (_allnull0 != null) if (_allnull0.Count > 0) { _returnlist = _allnull0; return _returnlist; }

                var _wopmode = _foundlist.Where(x => string.IsNullOrEmpty(x.Saldf_pmod)).ToList();
                if (_wopmode != null) if (_wopmode.Count > 0) { _returnlist = _wopmode; return _returnlist; }
            }

            return _returnlist;
        }
        public List<LoyaltyPointDefinition> GetFesibleLoyaltyDefinition(string _company, string _loyaltytype, string _membership, string _partytype, string _partycode, DateTime _date, InvoiceItem _invoiceitem, List<InvoiceSerial> _seriallist, List<RecieptItem> _receiptdetail, SalesDAL _salDll, InventoryDAL _invDll, string inv_tp=null)
        {
            List<LoyaltyPointDefinition> _returnlist = null;
            Int32 _isDis = 0;
            Int32 _isIns = 0;
            Int32 _pTP = 1000;
            if (_invoiceitem.Sad_disc_amt > 0)
            {
                _isDis = 1;
            }

            //Get price type
            DataTable _pbType = _salDll.GetPTypeByInvSeq(_invoiceitem.Sad_pbook, _invoiceitem.Sad_pb_lvl, _invoiceitem.Sad_itm_seq, _invoiceitem.Sad_seq);

            if (_pbType != null)
            {
                if (_pbType.Rows.Count > 0)
                {
                    foreach (DataRow drow in _pbType.Rows)
                    {
                        _pTP = Convert.ToInt32(drow["sapd_price_type"]);
                    }
                }
            }

            //Check Installment basis 
            foreach (RecieptItem _rec in _receiptdetail)
            {
                if (_rec.Sard_cc_period > 0)
                {
                    _isIns = 1;
                }
            }

            List<LoyaltyPointDefinition> _initial = _salDll.GetLoyaltyDefinition(_loyaltytype, _membership, _partytype, _partycode, _invoiceitem.Sad_pbook, _invoiceitem.Sad_pb_lvl, _date.Date, _isDis, _pTP, _isIns, inv_tp);
            if (_initial == null || _initial.Count <= 0)
                return _returnlist;

            if (_receiptdetail == null || _receiptdetail.Count <= 0)
            {
                List<LoyaltyPointDefinition> _intermediate = new List<LoyaltyPointDefinition>();
                _intermediate = GetFesibleLoyaltyPayMode(_initial, null);
                return _intermediate;
            }

            if (_initial != null) if (_initial.Count > 0)
                {
                    List<LoyaltyPointDefinition> _serialitem0 = null;
                    List<LoyaltyPointDefinition> _intermediate = new List<LoyaltyPointDefinition>();
                    MasterItem _itmdet = _invDll.GetItem(_company, _invoiceitem.Sad_itm_cd);
                    Int16 _isSerialized = Convert.ToInt16(_salesDAL.GetPriceLevel(_company, _invoiceitem.Sad_pbook, _invoiceitem.Sad_pb_lvl).Sapl_is_serialized);

                    //Check for serial/item only
                    if (_isSerialized == 1)
                        if (_seriallist != null) if (_seriallist.Count > 0)
                            {
                                foreach (InvoiceSerial _serial in _seriallist)
                                { _serialitem0 = _initial.Where(x => x.Saldf_ser == _serial.Sap_ser_1 && x.Saldf_itm == _invoiceitem.Sad_itm_cd && string.IsNullOrEmpty(x.Saldf_brand) && string.IsNullOrEmpty(x.Saldf_cat_1) && string.IsNullOrEmpty(x.Saldf_cat_2)).ToList(); if (_serialitem0 != null) if (_serialitem0.Count > 0) { _intermediate = GetFesibleLoyaltyPayMode(_serialitem0, _receiptdetail); if (_intermediate != null) if (_intermediate.Count > 0) return _intermediate; } }
                            }

                    //Check for promotion only
                    if (!string.IsNullOrEmpty(_invoiceitem.Sad_promo_cd))
                    {
                        var _promo1 = _initial.Where(x => x.Saldf_promo == _invoiceitem.Sad_promo_cd && string.IsNullOrEmpty(x.Saldf_brand) && string.IsNullOrEmpty(x.Saldf_cat_1) && string.IsNullOrEmpty(x.Saldf_cat_2) && string.IsNullOrEmpty(x.Saldf_itm) && x.Saldf_qt_frm <= _invoiceitem.Sad_qty && x.Saldf_qt_to >= _invoiceitem.Sad_qty).ToList();
                        if (_promo1 != null) if (_promo1.Count > 0) { _intermediate = GetFesibleLoyaltyPayMode(_promo1, _receiptdetail); if (_intermediate != null) if (_intermediate.Count > 0) return _intermediate; }
                    }

                    //Check for Item
                    var _item2 = _initial.Where(x => x.Saldf_itm == _invoiceitem.Sad_itm_cd && string.IsNullOrEmpty(x.Saldf_brand) && string.IsNullOrEmpty(x.Saldf_cat_1) && string.IsNullOrEmpty(x.Saldf_cat_2) && x.Saldf_qt_frm <= _invoiceitem.Sad_qty && x.Saldf_qt_to >= _invoiceitem.Sad_qty).ToList();
                    if (_item2 != null) if (_item2.Count > 0) { _intermediate = GetFesibleLoyaltyPayMode(_item2, _receiptdetail); if (_intermediate != null) if (_intermediate.Count > 0) return _intermediate; }

                    //Check for Brand/Category 1
                    var _brandcate13 = _initial.Where(x => string.IsNullOrEmpty(x.Saldf_promo) && x.Saldf_brand == _itmdet.Mi_brand && x.Saldf_cat_1 == _itmdet.Mi_cate_1 && string.IsNullOrEmpty(x.Saldf_cat_2) && string.IsNullOrEmpty(x.Saldf_itm) && x.Saldf_qt_frm <= _invoiceitem.Sad_qty && x.Saldf_qt_to >= _invoiceitem.Sad_qty).ToList();
                    if (_brandcate13 != null) if (_brandcate13.Count > 0) { _intermediate = GetFesibleLoyaltyPayMode(_brandcate13, _receiptdetail); if (_intermediate != null) if (_intermediate.Count > 0) return _intermediate; }

                    //Check for Brand/Category 2
                    var _brandcate24 = _initial.Where(x => string.IsNullOrEmpty(x.Saldf_promo) && x.Saldf_brand == _itmdet.Mi_brand && string.IsNullOrEmpty(x.Saldf_cat_1) && x.Saldf_cat_2 == _itmdet.Mi_cate_2 && string.IsNullOrEmpty(x.Saldf_itm) && x.Saldf_qt_frm <= _invoiceitem.Sad_qty && x.Saldf_qt_to >= _invoiceitem.Sad_qty).ToList();
                    if (_brandcate24 != null) if (_brandcate24.Count > 0) { _intermediate = GetFesibleLoyaltyPayMode(_brandcate24, _receiptdetail); if (_intermediate != null) if (_intermediate.Count > 0) return _intermediate; }

                    //Check for Brand
                    var _brand5 = _initial.Where(x => string.IsNullOrEmpty(x.Saldf_promo) && x.Saldf_brand == _itmdet.Mi_brand && string.IsNullOrEmpty(x.Saldf_cat_1) && string.IsNullOrEmpty(x.Saldf_cat_2) && string.IsNullOrEmpty(x.Saldf_itm) && x.Saldf_qt_frm <= _invoiceitem.Sad_qty && x.Saldf_qt_to >= _invoiceitem.Sad_qty).ToList();
                    if (_brand5 != null) if (_brand5.Count > 0) { _intermediate = GetFesibleLoyaltyPayMode(_brand5, _receiptdetail); if (_intermediate != null) if (_intermediate.Count > 0) return _intermediate; }

                    //Check pay mode only
                    var _payMode = _initial.Where(x => string.IsNullOrEmpty(x.Saldf_promo) && string.IsNullOrEmpty(x.Saldf_brand) && string.IsNullOrEmpty(x.Saldf_cat_1) && string.IsNullOrEmpty(x.Saldf_itm) && string.IsNullOrEmpty(x.Saldf_cat_2) && x.Saldf_qt_frm <= _invoiceitem.Sad_qty && x.Saldf_qt_to >= _invoiceitem.Sad_qty).ToList();
                    if (_payMode != null) if (_payMode.Count > 0) { _intermediate = GetFesibleLoyaltyPayMode(_payMode, _receiptdetail); if (_intermediate != null) if (_intermediate.Count > 0) return _intermediate; }

                    //If there is no filter one
                    var _allnull6 = _initial.Where(x => string.IsNullOrEmpty(x.Saldf_brand) && string.IsNullOrEmpty(x.Saldf_cat_1) && string.IsNullOrEmpty(x.Saldf_cat_2) && string.IsNullOrEmpty(x.Saldf_itm) && string.IsNullOrEmpty(x.Saldf_promo) && string.IsNullOrEmpty(x.Saldf_ser) && string.IsNullOrEmpty(x.Saldf_pmod) && x.Saldf_qt_frm <= _invoiceitem.Sad_qty && x.Saldf_qt_to >= _invoiceitem.Sad_qty).ToList();
                    if (_allnull6 != null) if (_allnull6.Count > 0) { _returnlist = _allnull6; return _returnlist; }



                }
            return _returnlist;
        }
        public decimal GetLoyaltyPoint(string _loyaltytype, string _membership, string _company, string _profitcenter, DateTime _date, List<InvoiceItem> _invoiceitem, List<InvoiceSerial> _seriallist, List<RecieptItem> _receiptdetail, SalesDAL _salDll, InventoryDAL _invDll, string inv_tp)
        {
            decimal _lolpt = 0;
            bool _isfound = false;
            List<MasterSalesPriorityHierarchy> _hierarchy = _salesDAL.GetSalesPriorityHierarchy(_company, _profitcenter, "PC_PRIT_HIERARCHY", "PC");
            if (_hierarchy == null || _hierarchy.Count <= 0) return 0;
            foreach (MasterSalesPriorityHierarchy _zero in _hierarchy)
            {
                foreach (InvoiceItem _one in _invoiceitem)
                {
                    decimal _itemvalue = _one.Sad_tot_amt - _one.Sad_itm_tax_amt;
                    //Filter serial as per item
                    MasterItem _mitm = _inventoryDAL.GetItem(_company, _one.Sad_itm_cd);    //kapila 19/2/2016
                    var seriallist = new List<InvoiceSerial>();

                    if (_mitm.Mi_is_ser1 == -1)
                        seriallist = _seriallist.Where(x => x.Sap_itm_cd == _one.Sad_itm_cd && x.Sap_ser_1 != "N/A").ToList();
                    else
                        seriallist = _seriallist.Where(x => x.Sap_itm_cd == _one.Sad_itm_cd && x.Sap_ser_1 != "N/A" && !string.IsNullOrEmpty(x.Sap_ser_1)).ToList();

                    List<LoyaltyPointDefinition> _init = GetFesibleLoyaltyDefinition(_company, _loyaltytype, _membership, _zero.Mpi_cd, _zero.Mpi_val, _date, _one, seriallist, _receiptdetail, _salDll, _invDll, inv_tp);
                    if (_init != null) if (_init.Count > 0)
                        {
                          

                            _init.OrderByDescending(X => X.Saldf_seq).OrderBy(X => X.Saldf_line);
                            //_init=_init.OrderBy(X => X.Saldf_pt).ToList();//.OrderBy(X => X.Saldf_pt); // get min pt value ny tharanga 
                            if (_init[0].Saldf_is_multi == true)
                            {
                                decimal _tovalue = _init[0].Saldf_value_to;
                                if (_tovalue == 0) _lolpt += 0; else _lolpt += (_itemvalue / _tovalue) * _init[0].Saldf_pt;
                                _isfound = true;
                            }
                            else if (_init[0].Saldf_is_multi == false)
                            {
                                int _seqance = _init[0].Saldf_seq;
                                var _slabs = _init.Where(x => x.Saldf_seq == _seqance).OrderBy(x => x.Saldf_line).ToList();
                                var _result = _slabs.Where(x => x.Saldf_value_frm <= _itemvalue && x.Saldf_value_to >= _itemvalue).ToList();
                                if (_result != null) if (_result.Count > 0)
                                        _lolpt += _result[0].Saldf_pt;
                                _isfound = true;
                            }
                        }
                }
                if (_isfound) return _lolpt;
            }
            return _lolpt;
        }
        #endregion

        private decimal GetLoyaltyPoint_HPRec(decimal _recAmt, string _loyaltytype, string _membership, string _company, string _profitcenter, DateTime _date, List<InvoiceItem> _invoiceitem, List<InvoiceSerial> _seriallist, List<RecieptItem> _receiptdetail, SalesDAL _salDll, InventoryDAL _invDll)
        {
            decimal _lolpt = 0;
            bool _isfound = false;
            List<MasterSalesPriorityHierarchy> _hierarchy = _salesDAL.GetSalesPriorityHierarchy(_company, _profitcenter, "PC_PRIT_HIERARCHY", "PC");
            if (_hierarchy == null || _hierarchy.Count <= 0) return 0;
            foreach (MasterSalesPriorityHierarchy _zero in _hierarchy)
            {
                foreach (InvoiceItem _one in _invoiceitem)
                {
                    decimal _itemvalue = _recAmt;
                    //Filter serial as per item
                    MasterItem _mitm = _inventoryDAL.GetItem(_company, _one.Sad_itm_cd);    //kapila 19/2/2016
                    var seriallist = new List<InvoiceSerial>();
                    if (_seriallist != null)
                    {
                        if (_mitm.Mi_is_ser1 == -1)
                            seriallist = _seriallist.Where(x => x.Sap_itm_cd == _one.Sad_itm_cd && x.Sap_ser_1 != "N/A").ToList();
                        else
                            seriallist = _seriallist.Where(x => x.Sap_itm_cd == _one.Sad_itm_cd && x.Sap_ser_1 != "N/A" && !string.IsNullOrEmpty(x.Sap_ser_1)).ToList();
                    }
                    List<LoyaltyPointDefinition> _init = GetFesibleLoyaltyDefinition(_company, _loyaltytype, _membership, _zero.Mpi_cd, _zero.Mpi_val, _date, _one, seriallist, _receiptdetail, _salDll, _invDll);
                    if (_init != null) if (_init.Count > 0)
                        {
                            _init.OrderByDescending(X => X.Saldf_seq).OrderBy(X => X.Saldf_line);

                            if (_init[0].Saldf_is_multi == true)
                            {
                                decimal _tovalue = _init[0].Saldf_value_to;
                                if (_tovalue == 0) _lolpt += 0; else _lolpt += (_itemvalue / _tovalue) * _init[0].Saldf_pt;
                                _isfound = true;
                            }
                            else if (_init[0].Saldf_is_multi == false)
                            {
                                int _seqance = _init[0].Saldf_seq;
                                var _slabs = _init.Where(x => x.Saldf_seq == _seqance).OrderBy(x => x.Saldf_line).ToList();
                                var _result = _slabs.Where(x => x.Saldf_value_frm <= _itemvalue && x.Saldf_value_to >= _itemvalue).ToList();
                                if (_result != null) if (_result.Count > 0)
                                        _lolpt += _result[0].Saldf_pt;
                                _isfound = true;
                            }
                        }
                }
                if (_isfound) return _lolpt;
            }
            return _lolpt;
        }

        public Int16 SaveNewSchemeCommProcess(DataTable _schSchemeCommDefdt)
        {
            Int16 _effects = 0;
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            List<HpSchemeDefinitionProcess> _schSchemeCommDef = DataTableExtensions.ToGenericList<HpSchemeDefinitionProcess>(_schSchemeCommDefdt, HpSchemeDefinitionProcess.Converter);
            using (TransactionScope _tr = new TransactionScope(TransactionScopeOption.RequiresNew, TimeSpan.FromMinutes(45)))
            {
                foreach (HpSchemeDefinitionProcess _tmp in _schSchemeCommDef)
                {
                    _salesDAL.DeleteHPSchProcessnew(_tmp.Hpc_cir_no, _tmp.Hpc_pty_tp, _tmp.Hpc_pty_cd);
                    break;
                }
                _tr.Complete();
            }
            using (TransactionScope _tr = new TransactionScope(TransactionScopeOption.RequiresNew, TimeSpan.FromMinutes(45)))
            {


                foreach (HpSchemeDefinitionProcess _tmp in _schSchemeCommDef)
                {
                    _salesDAL.SaveNewSchemeCommProcess(_tmp);
                }
                // _salesDAL.ConnectionClose();
                _tr.Complete();
                //_tr.Complete();
            }
            // _effects = 1;
            // _tr.Complete();
            _salesDAL.ConnectionClose();
            return _effects;
        }

        public int DeleteHPSchProcess(string _user)
        {
            int _effects = 0;

            _salesDAL = new SalesDAL();

            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();

                _salesDAL.DeleteHPSchProcess(_user);

                _salesDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }

        public DataTable GetSchItembyCir(string _cir)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchItembyCir(_cir);
        }

        public DataTable GetSchPCbyCir(string _cir)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchPCbyCir(_cir);
        }

        public DataTable GetSchShedulebyCir(string _cir)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchShedulebyCir(_cir);
        }

        public DataTable GetItemsByCateAndBrandNew(string _mainCate, string _subCate, string _itmRange, string _brand, string _com)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetItemsByCateAndBrandNew(_mainCate, _subCate, _itmRange, _brand, _com);
        }

        public DataTable GetSchPromobyCir(string _cir)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchPromobyCir(_cir);
        }

        public DataTable GetSchCusbyCir(string _cir)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchCusbyCir(_cir);
        }

        public LoyaltyType GetLoyaltyType(string _type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetLoyaltyType(_type);
        }

        public LoyaltyPointRedeemDefinition GetLoyaltyRedeemDefinition(string prtTp, string prt, DateTime date, string loyalty)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetLoyaltyRedeemDefinition(prtTp, prt, date, loyalty);
        }

        public GroupSaleCustomer GetGroupSaleDetByCus(string _grpCd, string _grpCus)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetGroupSaleDetByCus(_grpCd, _grpCus);
        }

        public DataTable GetHPAccountFromDate(DateTime _from, DateTime _to, string _com, string _pc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHPAccountFromDate(_from, _to, _com, _pc);

        }

        public DataTable GetCircularNo(string _circular)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCircularNo(_circular);
        }

        public DataTable GetGrpNoOfAccByCus(string _com, string _tp, string _cus, string _pc, string _grpCd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetGrpNoOfAccByCus(_com, _tp, _cus, _pc, _grpCd);
        }

        public DataTable GetGrpCusCashVal(string _com, string _tp, string _cus, string _pc, string _grpCd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetGrpCusCashVal(_com, _tp, _cus, _pc, _grpCd);
        }

        public DataTable GetGrpCusNoofItms(string _com, string _tp, string _cus, string _pc, string _grpCd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetGrpCusNoofItms(_com, _tp, _cus, _pc, _grpCd);
        }

        public DataTable Get_Processed_ecd_vou_defn_PClist(DateTime fromDt, DateTime toDt)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_Processed_ecd_vou_defn_PClist(fromDt, toDt);
        }

        public LoyaltyMemeber GetLoyaltyMemberByCard(string _cardNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetLoyaltyMemberByCard(_cardNo);
        }

        public int SaveLoyaltyRenewal(LoyaltyMemeber _loyal, MasterAutoNumber _recieptAuto, RecieptHeader _reciept, List<RecieptItem> _recieptItem, out string _recieptNo)
        {
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            int result = 0;
            using (TransactionScope tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();
                string _trecieptNo = "";
                result = result + _salesDAL.UpdateLoyaltyMember(_loyal.Salcm_dis_rt, _loyal.Salcm_bal_pt, _loyal.Salcm_val_to, _loyal.Salcm_cus_cd, _loyal.Salcm_no, _loyal.Salcm_cus_spec, _loyal.Salcm_cd_ser, _loyal.Salcm_red_pt);

                if (_recieptItem != null && _recieptItem.Count > 0)
                {
                    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_recieptAuto.Aut_moduleid, _recieptAuto.Aut_direction, _recieptAuto.Aut_start_char, _recieptAuto.Aut_cate_tp, _recieptAuto.Aut_cate_cd, _recieptAuto.Aut_modify_dt, _recieptAuto.Aut_year);
                    _trecieptNo = _recieptAuto.Aut_cate_cd + "-" + _recieptAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_recieptAuto);
                    int serialId = _inventoryDAL.GetSerialID();

                    _reciept.Sar_receipt_no = _trecieptNo;
                    _reciept.Sar_seq_no = serialId;
                    //save receipt
                    result = result + _salesDAL.SaveReceiptHeader(_reciept);

                    foreach (RecieptItem _rec in _recieptItem)
                    {
                        _rec.Sard_seq_no = serialId;
                        _rec.Sard_receipt_no = _trecieptNo;
                        result = result + _salesDAL.SaveReceiptItem(_rec);
                    }
                }
                _recieptNo = _trecieptNo;
                _salesDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                tr.Complete();
            }

            return result;

        }

        public DataTable checkAppStatus(string _com, string _loc, string _tp, string _mod)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.checkAppStatus(_com, _loc, _tp, _mod);
        }

        public DataTable GetRecievedDocFor_VehReg(string userID)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRecievedDocFor_VehReg(userID);
        }

        public DataTable Get_DocDet_For_VehReg(string receiptNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_DocDet_For_VehReg(receiptNo);
        }

        public Int32 Update_Veh_Doc_receive(Int32 seq, Dictionary<int, string> line_list, DateTime recDate, string remark, string recBy)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            int result = 0;

            using (TransactionScope _tr = new TransactionScope())
            {
                foreach (KeyValuePair<int, string> pair in line_list)
                {
                    //Console.WriteLine("{0}, {1}", pair.Key, pair.Value);
                    result = _salesDAL.Update_veh_DocReg(seq, pair.Key, recDate, pair.Value, recBy);
                }

                _salesDAL.Update_veh_DocReg_Final(seq, recDate, remark, recBy);
                _tr.Complete();
            }

            _salesDAL.ConnectionClose();
            return result;
        }

        //kapila
        public int Update_veh_DocReg_stus(Int32 seq, DateTime recDate, string FinRemark, string recBy, Int32 _stus)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            int result = 0;

            _salesDAL.Update_veh_DocReg_stus(seq, recDate, FinRemark, recBy, _stus);

            _salesDAL.ConnectionClose();
            return 1;
        }
        public Int32 IssueGvItems(GiftVoucherPages _gv, List<GiftVoucherItems> _gvItems)
        {
            int result = 0;
            using (TransactionScope _tr = new TransactionScope())
            {
                _fmsInventoryDal = new FMS_InventoryDAL(); _fmsInventoryDal.ConnectionOpen();

                _fmsInventoryDal.UpdateGiftVoucherByReceipt(_gv);

                foreach (GiftVoucherItems _temp in _gvItems)
                {
                    _fmsInventoryDal.CreateIssueGvItems(_temp);
                }

                _fmsInventoryDal.ConnectionClose();
                _tr.Complete();
                result = 1;

            }

            return result;
        }

        public DataTable GetVehicalDocumentProcess(string _com, string _loc, string _invoice, string _engine, string _chassis, string _reciept, string _vehNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehicalDocumentProcess(_com, _loc, _invoice, _engine, _chassis, _reciept, _vehNo);
        }

        public DataTable GetVehicalDocummentDetail(int seq)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehicalDocummentDetail(seq);
        }

        public DataTable GetVehicalRMVNotSendDetails(string _com, string _loc, string _invoice, string _engine, string _chassis, string _reciept, string _vehNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehicalRMVNotSendDetails(_com, _loc, _invoice, _engine, _chassis, _reciept, _vehNo);
        }

        public Int32 Update_veh_DocPay(Int32 seq, DateTime payDate, string payRemark, string payBy)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            int result = 0;

            using (TransactionScope _tr = new TransactionScope())
            {
                result = _salesDAL.Update_veh_DocPay(seq, payDate, payRemark, payBy);
                _tr.Complete();
            }

            _salesDAL.ConnectionClose();
            return result;
        }
        public Int32 Update_veh_AccRec(Int32 seq, DateTime recDate, string recBy)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            int result = 0;

            using (TransactionScope _tr = new TransactionScope())
            {
                result = _salesDAL.Update_veh_AccRec(seq, recDate, recBy);
                _tr.Complete();
            }

            _salesDAL.ConnectionClose();
            return result;
        }

        public Int32 Update_veh_Collect_Cheque(Int32 seq, DateTime collDate, string collRemark, string collBy, string chequeNo, Int32 isCollect)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            int result = 0;

            using (TransactionScope _tr = new TransactionScope())
            {
                result = _salesDAL.Update_veh_Collect_Cheque(seq, collDate, collRemark, collBy, chequeNo, isCollect);
                _tr.Complete();
            }
            _salesDAL.ConnectionClose();
            return result;
        }

        public DataTable Get_IssuedDocFor_VehReg(string userID, string receiptNo, string invoiceNo, string engineNo, string chassisNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_IssuedDocFor_VehReg(userID, receiptNo, invoiceNo, engineNo, chassisNo);
        }

        public int Update_Veh_RMVSend(string _inv, string _rec, string _eng, string _cha, DateTime _dt, string _rmk)
        {
            _salesDAL = new SalesDAL();
            int result = 0;
            _salesDAL.ConnectionOpen();
            result = _salesDAL.Update_Veh_RMVSend(_inv, _rec, _eng, _cha, _dt, _rmk);
            _salesDAL.ConnectionClose();
            return result;
        }


        public int Update_Veh_submit_Date(DataTable _submitDoc)
        {
            _salesDAL = new SalesDAL();
            int result = 0;
            _salesDAL.ConnectionOpen();
            foreach (DataRow dr in _submitDoc.Rows)
            {
                result = _salesDAL.Update_Veh_submit_Date(dr["SVRT_VEH_REG_NO"].ToString(), Convert.ToDateTime(dr["SRVT_SUBMIT_DATE"].ToString()), dr["refdoc"].ToString());
            }

            _salesDAL.ConnectionClose();
            return result;
        }

        public int Update_CR_Recieve(string _inv, string _rec, string _eng, string _cha, DateTime _dt, string _rmk, string _no)
        {
            _salesDAL = new SalesDAL();
            int result = 0;
            _salesDAL.ConnectionOpen();
            result = _salesDAL.Update_CR_Recieve(_inv, _rec, _eng, _cha, _dt, _rmk, _no);
            _salesDAL.ConnectionClose();
            return result;
        }

        public Int16 SaveNewSchemeCloneRevamp(string _pc, DateTime _dt, List<string> _pcList, string _user, string _cir)
        {
            Int16 _effects = 0;
            Int32 _seqNo = 0;
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();

            // List<HpSchemeDefinition> _schSchemeClone = DataTableExtensions.ToGenericList<HpSchemeDefinition>(_schSchemeClonedt, HpSchemeDefinition.Converter);
            //using (TransactionScope _tr = new TransactionScope(TransactionScopeOption.RequiresNew, TimeSpan.FromMinutes(120)))
            //using (TransactionScope _tr = new TransactionScope())
            //{
            _salesDAL.ConnectionOpen();
            _inventoryDAL.ConnectionOpen();



            DataTable _exsitList = _salesDAL.getSchemeByPC(_pc, _dt);

            List<HpSchemeDefinition> _schSchemeClone = DataTableExtensions.ToGenericList<HpSchemeDefinition>(_exsitList, HpSchemeDefinition.Converter);

            foreach (string _tmpList in _pcList)
            {
                _salesDAL.UpdatePreSchDueClone(_user, _dt, _tmpList);

                foreach (HpSchemeDefinition _tmp in _schSchemeClone)
                {
                    _seqNo = _inventoryDAL.GetSerialID();
                    _tmp.Hpc_seq = _seqNo;
                    _tmp.Hpc_stus = "A";
                    _tmp.Hpc_pty_cd = _tmpList;
                    _tmp.Hpc_cre_by = _user;
                    _tmp.Hpc_mod_by = _user;
                    //_tmp.Hpc_cir_no = _cir;
                    _salesDAL.SaveNewSchemeCommDefinition(_tmp);
                }
            }
            _inventoryDAL.ConnectionClose();
            _salesDAL.ConnectionClose();
            _effects = 1;
            //    _tr.Complete();
            //}
            return _effects;
        }

        //darshana 15-06-2013
        public Int16 SaveNewSchemeClone(DataTable _schSchemeClonedt)
        {
            Int16 _effects = 0;
            Int32 _seqNo = 0;
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();

            List<HpSchemeDefinition> _schSchemeClone = DataTableExtensions.ToGenericList<HpSchemeDefinition>(_schSchemeClonedt, HpSchemeDefinition.Converter);

            using (TransactionScope _tr = new TransactionScope(TransactionScopeOption.RequiresNew, TimeSpan.FromMinutes(45)))
            {
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();

                foreach (HpSchemeDefinition _tmp in _schSchemeClone)
                {
                    _seqNo = _inventoryDAL.GetSerialID();
                    _tmp.Hpc_seq = _seqNo;
                    _tmp.Hpc_stus = "A";
                    _salesDAL.SaveNewSchemeCommDefinition(_tmp);
                }
                _inventoryDAL.ConnectionClose();
                _salesDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }

        public List<PriceDetailRef> GetPriceForQuo(string _company, string _profitCenter, string _invType, string _priceBook, string _priceLevel, string _customer, string _item, decimal _qty, DateTime _currentDate, DateTime _validDate)
        {

            _salesDAL = new SalesDAL();
            //Check the price for the specific customer availabillity (even for special promotions)
            //Check the price for special promotion without Customer
            //Check the price for normal price
            //If no price =>message

            List<PriceDetailRef> _priceDetailRef = new List<PriceDetailRef>();
            List<PriceDetailRef> _returnlist = new List<PriceDetailRef>();
            DataTable _dtChnl = new DataTable();

            //1.With customer
            _priceDetailRef = _salesDAL.GetPriceDetailForQuo(_priceBook, _priceLevel, _item, _qty, _currentDate, _customer, _validDate);

            //2.Without Customer
            if (_priceDetailRef.Count <= 0)
            {
                _priceDetailRef = _salesDAL.GetPriceDetailForQuo(_priceBook, _priceLevel, _item, _qty, _currentDate, string.Empty, _validDate);
            }

            List<PriceDetailRef> _lists = new List<PriceDetailRef>();
            var _types = _priceDetailRef.Select(x => x.Sapd_price_type).Distinct();
            foreach (var _type in _types)
            {
                if (_type != 0)
                {
                    var _lst = _priceDetailRef.Where(x => x.Sapd_price_type == _type).ToList();
                    if (_lst != null)
                        if (_lst.Count > 0)
                            _lists.AddRange(_lst);
                }
                else
                {
                    var _lst = _priceDetailRef.Where(x => x.Sapd_price_type == _type).ToList();
                    if (_lst != null)
                        if (_lst.Count > 0)
                            _lists.Add(_lst[0]);
                }
            }

            var _promo = _lists.Where(x => x.Sapd_price_type != 0).ToList();
            var _normal = _lists.Where(x => x.Sapd_price_type == 0).ToList();

            if (_promo != null)
                if (_promo.Count > 0)
                    foreach (PriceDetailRef i in _promo)
                    {
                        List<PriceProfitCenterPromotion> _lst = new List<PriceProfitCenterPromotion>();
                        _lst = _salesDAL.CheckPromotion(_company, _profitCenter, i.Sapd_promo_cd, i.Sapd_pb_seq, "PC");
                        if (_lst != null)
                        {
                            if (_lst.Count > 0)
                                _returnlist.Add(i);
                        }
                        else
                        {
                            _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitCenter, "SCHNL");
                            _lst = _salesDAL.CheckPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), i.Sapd_promo_cd, i.Sapd_pb_seq, "SCHNL");
                            if (_lst != null)
                            {
                                if (_lst.Count > 0)
                                    _returnlist.Add(i);
                            }
                            else
                            {
                                _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitCenter, "CHNL");
                                _lst = _salesDAL.CheckPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), i.Sapd_promo_cd, i.Sapd_pb_seq, "CHNL");
                                if (_lst != null)
                                {
                                    if (_lst.Count > 0)
                                        _returnlist.Add(i);
                                }
                            }
                        }
                    }
            if (_normal != null)
                if (_normal.Count > 0) _returnlist.AddRange(_normal);





            return _returnlist;

        }

        public DataTable GetPriceLevelMessage(string _company, string _book, string _level)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceLevelMessage(_company, _book, _level);
        }

        //Add by Chamal 29/05/2013
        #region HP Account Summary Values
        public HPAccountSummaryValues GetHPAccSummValues(HpAccount _hpAcc, DateTime _receiptDate, string _com)
        {
            HPAccountSummaryValues _accSumm = new HPAccountSummaryValues();

            //System.Diagnostics.Debug.Print("ST : " + DateTime.Now.TimeOfDay.ToString());

            _salesDAL = new SalesDAL();
            _generalDAL = new GeneralDAL();

            _salesDAL.ConnectionOpen();

            string _accNo = _hpAcc.Hpa_acc_no;
            string _pc = _hpAcc.Hpa_pc;

            DateTime _fDtOfNxtMon = GetFirstDayOfNextMonth(_receiptDate);
            DateTime _lDtOfCurntMon = GetLastDayOfPreviousMonth(_receiptDate.AddMonths(1));
            DateTime _lDtOfPreMon = GetLastDayOfPreviousMonth(_receiptDate.Date);

            _accSumm.Uc_Scheme = _hpAcc.Hpa_sch_cd;
            _accSumm.Uc_Interest = _hpAcc.Hpa_tot_intr;
            _accSumm.Uc_CashPrice = _hpAcc.Hpa_cash_val;
            _accSumm.Uc_Inst_CommRate = _hpAcc.Hpa_inst_comm;
            _accSumm.Uc_HireValue = _hpAcc.Hpa_hp_val;
            //Uc_AccEndDate = Acc.Hpa_cls_dt;
            _accSumm.Uc_InterestRate = _hpAcc.Hpa_intr_rt;
            // Uc_Installment=
            //CHANGE SACHITH
            //2013/05/16
            //FPAY=DP_VAL+INIT_VAT
            _accSumm.Uc_FirstPay = _hpAcc.Hpa_dp_val + _hpAcc.Hpa_init_vat;
            _accSumm.Uc_ServiceCharge = _hpAcc.Hpa_ser_chg;
            _accSumm.Uc_TotCash = _hpAcc.Hpa_tc_val;
            _accSumm.Uc_AmtFinance = _hpAcc.Hpa_af_val;


            _accSumm.Uc_ProtectionPRefund = _salesDAL.Get_ProtectionPayment_RefundValue(_accNo);
            _accSumm.Uc_AccBalance = _salesDAL.Get_AccountBalance(_receiptDate, _accNo);
            _accSumm.Uc_MonthlyRental = _salesDAL.Get_MonthlyRental(_receiptDate, _accNo);
            _accSumm.Uc_FutureRental = _salesDAL.Get_FutureRentals(_receiptDate, _accNo);
            _accSumm.Uc_TotFurtureRentalVAL = _salesDAL.Get_TotFutureRentalValue(_fDtOfNxtMon.Date, _accNo);
            _accSumm.Uc_VehInsDue = _salesDAL.Get_hp_TotalDue_onType(_accNo, _lDtOfCurntMon.Date, "VHINSR", null, _lDtOfCurntMon.Date);
            _accSumm.Uc_InsDue = _salesDAL.Get_hp_TotalDue_onType(_accNo, _lDtOfCurntMon.Date, "INSUR", null, _lDtOfCurntMon.Date);
            if (_accSumm.Uc_VehInsDue < 0) _accSumm.Uc_VehInsDue = 0;
            if (_accSumm.Uc_InsDue < 0) _accSumm.Uc_InsDue = 0;

            DateTime arr_date = new DateTime();
            DateTime sup_date = new DateTime();

            get_ArearsDate_SupDate(_pc, _receiptDate, _lDtOfCurntMon, out arr_date, out sup_date);
            Decimal MIN_ARREARS = Get_Minimum_Arrears(_accNo, arr_date, sup_date, _pc);
            //Decimal Arrears = _salesDAL.Get_hp_AllDue(_accNo, arr_date, sup_date);
            Decimal Arrears = _salesDAL.Get_Acc_Arrears(_accNo, _lDtOfPreMon.Date, "N");

            _accSumm.Uc_Arrears = 0;
            if (Arrears >= MIN_ARREARS)
            {
                _accSumm.Uc_Arrears = Arrears;
                // ----------- NEED CHAMAL -----      uc_lblArr_Ovp.Text = "Arrears";
                // ----------- NEED CHAMAL-----      uc_lblArr_Ovp.ForeColor = Color.Red;
                //uc_lblArr_Ovp = "Arrears";
                _accSumm.ArrearsColor = "RED";
            }
            else if (Arrears < 0)
            {
                _accSumm.Uc_Arrears = Arrears;
                // ----------- NEED CHAMAL-----     uc_lblArr_Ovp.ForeColor = Color.Blue;
                _accSumm.ArrearsColor = "BLUE";
            }

            _accSumm.Uc_ArrVehIns = _salesDAL.Get_hp_TotalDue_onType(_accNo, arr_date.Date, "VHINSR", string.Empty, _receiptDate.Date);
            _accSumm.Uc_ArrHpInsu = _salesDAL.Get_hp_TotalDue_onType(_accNo, arr_date.Date, "INSUR", string.Empty, _receiptDate.Date);
            if (_accSumm.Uc_ArrVehIns < 0) _accSumm.Uc_ArrVehIns = 0;
            if (_accSumm.Uc_ArrHpInsu < 0) _accSumm.Uc_ArrHpInsu = 0;

            #region Calculate ECD Normal
            DataTable hierchy_tbl = new DataTable();
            hierchy_tbl = _salesDAL.Get_hpHierachy(_pc);
            MasterCompany _mstCompany = _generalDAL.GetCompByCode(_hpAcc.Hpa_com);
            if (hierchy_tbl.Rows.Count > 0)
            {
                foreach (DataRow da in hierchy_tbl.Rows)
                {
                    DataTable ECD_tbl = new DataTable();
                    ECD_tbl = _salesDAL.Get_ECD("N", _receiptDate.Date, _accSumm.Uc_Scheme, Convert.ToString(da["MPI_CD"]), Convert.ToString(da["MPI_VAL"]), _accSumm.Uc_FutureRental, _accNo, _hpAcc.Hpa_val_02);
                    if (ECD_tbl.Rows.Count > 0)
                    {
                        DataRow DrECD = ECD_tbl.Rows[0];
                        if (Convert.ToInt32(DrECD["HED_ECD_IS_RT"]) == 1)
                        {
                            Decimal ecd_rate = Convert.ToDecimal(DrECD["HED_VAL"]);
                            Decimal ecdNormal = 0;
                            Int32 _rentalTerm = 1;
                            decimal _totInt = 0;

                            //if (_mstCompany.Mc_anal23 == "RED")
                            if (_hpAcc.Hpa_val_02 == 1)
                            {
                                DataTable _redCal = _salesDAL.GetDeduceBalEcd(_receiptDate.Date, _accNo);

                                foreach (DataRow drow in _redCal.Rows)
                                {
                                    if (_rentalTerm <= _accSumm.Uc_FutureRental)
                                    {
                                        _totInt = _totInt + Convert.ToDecimal(drow["INT_CHARGE"]);
                                        _rentalTerm = _rentalTerm + 1;
                                    }
                                    else
                                    {
                                        goto L100;
                                    }
                                }
                            L100:
                                ecdNormal = _totInt * ecd_rate / 100;
                            }
                            else
                            {
                                ecdNormal = (((_accSumm.Uc_Interest / _hpAcc.Hpa_term) * ecd_rate) / 100) * _accSumm.Uc_FutureRental;
                            }
                            _accSumm.Uc_ECDnormal = ecdNormal;
                            _accSumm.Uc_ECDnormalBal = _accSumm.Uc_AccBalance - _accSumm.Uc_ECDnormal;
                            break;
                        }
                        else
                        {
                            Decimal ecdNormal = Convert.ToDecimal(DrECD["HED_VAL"]);
                            _accSumm.Uc_ECDnormal = ecdNormal;
                            _accSumm.Uc_ECDnormalBal = _accSumm.Uc_AccBalance - _accSumm.Uc_ECDnormal;
                            break;
                        }
                    }
                    else
                    {
                        _accSumm.Uc_ECDnormal = 0;
                    }
                }
            }
            else
            {
                _accSumm.Uc_ECDnormal = 0;
            }
            _accSumm.Uc_ECDnormalBal = _accSumm.Uc_AccBalance - _accSumm.Uc_ECDnormal;
            #endregion

            #region Calculate ECD Special
            //private Decimal calculateECD_Special(HpAccount Acc, string Loc, DateTime recipt_date, HpAccountSummary SUMMARY, string selectedPC)
            //{
            Decimal ecd_n;
            Decimal ecd_cal_on = 0;
            Boolean ecd_ava_ac;
            Boolean ecd_effect_date;
            Boolean ecd_commit;

            //hierchy_tbl = new DataTable();
            //hierchy_tbl = _salesDAL.Get_hpHierachy(_pc);

            if (hierchy_tbl.Rows.Count > 0)
            {
                foreach (DataRow da in hierchy_tbl.Rows)
                {
                    DataTable ECD_tbl = new DataTable();
                    ECD_tbl = _salesDAL.Get_ECD("S", _receiptDate.Date, _accSumm.Uc_Scheme, Convert.ToString(da["MPI_CD"]), Convert.ToString(da["MPI_VAL"]), _accSumm.Uc_FutureRental, _accNo, _hpAcc.Hpa_val_02);
                    if (ECD_tbl.Rows.Count > 0)
                    {
                        DataRow DrECD = ECD_tbl.Rows[0];
                        String HED_ECD_BASE = Convert.ToString(DrECD["HED_ECD_BASE"]);// TI - Total Interest, FI - future interest, CI interest in closing balance, FR future rental balance, CB - Closing balance
                        //  'Calculation based on
                        if (HED_ECD_BASE == "TI") ecd_cal_on = (_accSumm.Uc_Interest); //TI - Total Interest
                        else if (HED_ECD_BASE == "FI")
                        {
                            //if (_mstCompany.Mc_anal23 == "RED")
                            if (_hpAcc.Hpa_val_02 == 1)
                            {
                                Int32 _rentalTerm = 1;
                                decimal _totInt = 0;
                                DataTable _redCal = _salesDAL.GetDeduceBalEcd(_receiptDate.Date, _accNo);

                                foreach (DataRow drow in _redCal.Rows)
                                {
                                    if (_rentalTerm <= _accSumm.Uc_FutureRental)
                                    {
                                        _totInt = _totInt + Convert.ToDecimal(drow["INT_CHARGE"]);
                                        _rentalTerm = _rentalTerm + 1;
                                    }
                                    else
                                    {
                                        goto L101;
                                    }
                                }
                            L101:
                                ecd_cal_on = _totInt;
                            }
                            else
                            {
                                ecd_cal_on = (_accSumm.Uc_Interest / _hpAcc.Hpa_term) * _accSumm.Uc_FutureRental;//FI - future interest
                            }
                        }

                        else if (HED_ECD_BASE == "CI")
                        {
                            //if (_mstCompany.Mc_anal23 == "RED")
                            if (_hpAcc.Hpa_val_02 == 1)
                            {
                                DateTime monthStartDate = new DateTime(_receiptDate.Year, _receiptDate.Month, 1);
                                DataTable _redBal = _salesDAL.GetDeduceBal(monthStartDate, _receiptDate.Date, _hpAcc.Hpa_com, _hpAcc.Hpa_pc, 0, _accNo);

                                if (_redBal != null)
                                {
                                    if (_redBal.Rows.Count > 0)
                                    {
                                        foreach (DataRow r in _redBal.Rows)
                                        {
                                            ecd_cal_on = Convert.ToDecimal(r["REC_INT"]);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                ecd_cal_on = (_accSumm.Uc_AccBalance * _accSumm.Uc_InterestRate) / (100 + _accSumm.Uc_InterestRate); //CI interest in closing balance
                            }
                        }
                        else if (HED_ECD_BASE == "FR") ecd_cal_on = _accSumm.Uc_TotFurtureRentalVAL;//FR future rental balance
                        else if (HED_ECD_BASE == "CB") ecd_cal_on = _accSumm.Uc_AccBalance; // CB - Closing balance
                        else ecd_cal_on = 0;

                        //---------------------------------------------------------------------------------
                        String HED_EFF_ACC_TP = Convert.ToString(DrECD["HED_EFF_ACC_TP"]);// Affective Account types (AR - Arrears accounts, GD - good accounts, AL - any)
                        if (HED_EFF_ACC_TP == "AR")//AR - Arrears accounts
                        {
                            //if (uc_lblArr_Ovp.Text == "Arrears")
                            if (_accSumm.Uc_Arrears > 0) ecd_ava_ac = true;
                            else ecd_ava_ac = false;
                        }
                        else if (HED_EFF_ACC_TP == "GD")//GD - good accounts
                        {
                            //if (uc_lblArr_Ovp.Text != "Arrears")
                            if (_accSumm.Uc_Arrears <= 0) ecd_ava_ac = true;
                            else ecd_ava_ac = false;
                        }
                        else
                        {
                            ecd_ava_ac = true;
                        }
                        //------------------------- //'Effective Creation Date--------------------------------
                        String HED_EFF_CRE_DT = Convert.ToString(DrECD["HED_EFF_CRE_DT"]);//Affective creation date type (BC - Before given date,AC - after given date, AL - any)

                        if (HED_EFF_CRE_DT == "BC")//BC - Before given date
                        {
                            DateTime HED_EFF_DT = Convert.ToDateTime(DrECD["HED_EFF_DT"]); ;
                            if (_hpAcc.Hpa_acc_cre_dt <= HED_EFF_DT) ecd_effect_date = true;
                            else ecd_effect_date = false;
                        }
                        else if (HED_EFF_CRE_DT == "AC")//AC - after given date
                        {
                            DateTime HED_EFF_DT = Convert.ToDateTime(DrECD["HED_EFF_DT"]); ;
                            if (_hpAcc.Hpa_acc_cre_dt >= HED_EFF_DT) ecd_effect_date = true;
                            else ecd_effect_date = false;
                        }
                        else//AL - any
                        {
                            ecd_effect_date = true;
                        }
                        //------------------------calculate SP ECD----------------
                        Decimal HED_VAL = Convert.ToDecimal(DrECD["HED_VAL"]);
                        Int32 HED_ECD_IS_RT = Convert.ToInt32(DrECD["HED_ECD_IS_RT"]);
                        if (ecd_cal_on > 0 && ecd_ava_ac == true && ecd_effect_date == true)
                        {
                            if (HED_ECD_IS_RT == 1) ecd_n = ecd_cal_on * HED_VAL / 100;
                            else ecd_n = HED_VAL;
                        }
                        else
                        {
                            ecd_n = 0;
                        }
                        //-----------------------ECD Restriction----------------
                        String HED_COMIT = Convert.ToString(DrECD["HED_COMIT"]); //Commitment (CP - Covered cash price, CS - covered cash price and service charge, AL - any)

                        if (HED_COMIT == "CP")//CP - Covered cash price
                        {
                            if ((_hpAcc.Hpa_hp_val - ecd_n) >= _hpAcc.Hpa_cash_val) ecd_commit = true;
                            else ecd_commit = false;
                        }
                        else if (HED_COMIT == "CS")//CS - covered cash price and service charge
                        {
                            if ((_hpAcc.Hpa_hp_val - ecd_n) >= (_hpAcc.Hpa_cash_val + _hpAcc.Hpa_ser_chg)) ecd_commit = true;
                            else ecd_commit = false;
                        }
                        else// AL - any 
                        {
                            ecd_commit = true;
                        }

                        //-------------------------------returning-------------------------------------------
                        if (ecd_commit == true)
                        {
                            _accSumm.Uc_ECDspecial = ecd_n;
                            _accSumm.Uc_ECDspecialBal = _accSumm.Uc_AccBalance - _accSumm.Uc_ECDspecial;
                            //return ecd_n;
                        }
                        else
                        {
                            _accSumm.Uc_ECDspecial = 0; _accSumm.Uc_ECDspecialBal = _accSumm.Uc_AccBalance - _accSumm.Uc_ECDspecial;
                        }
                    }
                    else //if (ECD_tbl.Rows.Count == 0)
                    {
                        _accSumm.Uc_ECDspecial = 0;
                    }

                }// end of foreach

            }
            else
            {
                _accSumm.Uc_ECDspecial = 0; _accSumm.Uc_ECDspecialBal = _accSumm.Uc_AccBalance - _accSumm.Uc_ECDspecial;
            }

            _accSumm.Uc_ECDspecialBal = _accSumm.Uc_AccBalance - _accSumm.Uc_ECDspecial;

            #endregion

            #region Calculate ECD Voucher

            DataTable ECD_tbl1 = _salesDAL.Get_ECD("V", _receiptDate.Date, null, null, null, 0, _accNo, _hpAcc.Hpa_val_02);

            if (ECD_tbl1.Rows.Count > 0)
            {
                DataRow DrECD = ECD_tbl1.Rows[0];
                Decimal HED_VAL = Convert.ToDecimal(DrECD["HED_VAL"]);
                Int32 HED_ECD_IS_RT = Convert.ToInt32(DrECD["HED_ECD_IS_RT"]);
                if (HED_ECD_IS_RT == 1) _accSumm.Uc_ECDvoucher = (_accSumm.Uc_AccBalance * HED_VAL / 100);
                else _accSumm.Uc_ECDvoucher = HED_VAL;
            }
            else
            {
                _accSumm.Uc_ECDvoucher = 0;
                //return 0;
            }
            #endregion

            _accSumm.Uc_AdditonalCommisionRate = _salesDAL.Get_hp_additionalCommision(_receiptDate.Date, _hpAcc.Hpa_sch_cd, _accSumm.Uc_Inst_CommRate);

            _accSumm.Uc_Adjustment = _salesDAL.Get_hp_Adjustment(_accNo);
            _accSumm.Uc_TotReceipts = _salesDAL.Get_hp_Tot_Receipts(_accNo, _receiptDate.Date);
            //_accSumm.Uc_Customer = _salesDAL.GetHpCustomerName(_accNo);
            _accSumm.Uc_Customer = _salesDAL.GetHpCustomerNameForMon(_com, _accNo);
            _accSumm.Uc_AccEndDate = _salesDAL.Get_EndingDate(_accNo);

            //private void AllDuc_Calc(string AccNo, DateTime hadd_ars_dt, DateTime hadd_sup_dt, HpAccountSummary SUMMARY, string selectedPC, DateTime receiptDt)

            #region AllDuc_Calc
            _accSumm.Uc_AllDue = 0;
            if (_lDtOfCurntMon == _receiptDate && _receiptDate == _receiptDate.Date) //A=B=C
            {
                //DateTime dt1 = GetLastDayOfPreviousMonth(receiptDt.AddMonths(1));
                _accSumm.Uc_AllDue = _salesDAL.Get_hp_AllDue(_accNo, _lDtOfCurntMon, _lDtOfCurntMon);//88
            }
            else
            {
                //DateTime dt1 = GetLastDayOfPreviousMonth(receiptDt.AddMonths(1));
                _accSumm.Uc_AllDue = _salesDAL.Get_hp_AllDue(_accNo, _lDtOfCurntMon, _lDtOfCurntMon);//88 
            }
            #endregion

            _generalDAL.ConnectionOpen();
            MasterCompany _mstCom = _generalDAL.GetCompByCode(_com);
            _accSumm.InsText = _mstCom.Mc_anal3;
            _accSumm.InsArrText = _mstCom.Mc_anal3;

            _generalDAL.ConnectionClose();
            _salesDAL.ConnectionClose();

            //System.Diagnostics.Debug.Print("ED : " + DateTime.Now.TimeOfDay.ToString());
            return _accSumm;
        }

        void get_ArearsDate_SupDate(string _pc, DateTime _reciptDT, DateTime _lDtOfPreMon, out DateTime arr_date, out DateTime sup_date)
        {
            DataTable hierchy_tbl = new DataTable();
            hierchy_tbl = _salesDAL.Get_hpHierachy(_pc);
            if (hierchy_tbl.Rows.Count > 0)
            {
                foreach (DataRow da in hierchy_tbl.Rows)
                {
                    DataTable info_tbl = new DataTable();
                    info_tbl = _salesDAL.Get_ArrearsInfo(_lDtOfPreMon, Convert.ToString(da["MPI_CD"]), Convert.ToString(da["MPI_VAL"]));
                    if (info_tbl.Rows.Count > 0)
                    {
                        DataRow DrECD = info_tbl.Rows[0];
                        arr_date = Convert.ToDateTime(info_tbl.Rows[0]["HADD_ARS_DT"]).Date;//hadd_ars_dt
                        sup_date = Convert.ToDateTime(info_tbl.Rows[0]["HADD_SUP_DT"]).Date;//hadd_sup_dt
                        return;
                    }
                }
                arr_date = _reciptDT;
                sup_date = _reciptDT;
            }
            arr_date = _reciptDT;
            sup_date = _reciptDT;
        }

        Decimal Get_Minimum_Arrears(string _accNo, DateTime hadd_ars_dt, DateTime hadd_sup_dt, string _pc)
        {
            DataTable hierchy_tbl = new DataTable();
            hierchy_tbl = _salesDAL.Get_hpHierachy(_pc);
            Decimal min_arrVal = 0;
            if (hierchy_tbl.Rows.Count > 0)
            {
                foreach (DataRow da in hierchy_tbl.Rows)
                {
                    min_arrVal = _salesDAL.Get_hp_MinArrears(Convert.ToString(da["MPI_CD"]), Convert.ToString(da["MPI_VAL"]));
                    if (min_arrVal == -99)
                    {
                        break;
                    }
                    return min_arrVal;
                }
            }
            return min_arrVal;

        }

        private static DateTime GetFirstDayOfNextMonth(DateTime startDate)
        {
            if (startDate.Month == 12) // its end of year , we need to add another year to new date:
            {
                startDate = new DateTime((startDate.Year + 1), 1, 1);
            }
            else
            {
                startDate = new DateTime(startDate.Year, (startDate.Month + 1), 1);
            }
            return startDate;
        }
        private static DateTime GetLastDayOfPreviousMonth(DateTime startDate)
        {
            DateTime lastDayLastMonth = new DateTime(startDate.Year, startDate.Month, 1);
            lastDayLastMonth = lastDayLastMonth.AddDays(-1);
            return lastDayLastMonth;
        }
        #endregion

        public CashGeneralEntiryDiscountDef GetGeneralDiscountDefinition(string _company, string _profitcenter, DateTime _date, string _book, string _level, string _customer, string _item, bool _isAllowSerial, bool _isAllowPromotion)
        {
            _salesDAL = new SalesDAL();
            string _msg = string.Empty;
            List<CashGeneralEntiryDiscountDef> _list = _salesDAL.GetGeneralEntityDiscountDefinition(_company, _profitcenter, _date, _book, _level);
            CashGeneralEntiryDiscountDef _returnList = null;
            List<CashGeneralEntiryDiscountDef> _iniLists = null;

            //check for customer
            if (_list != null)
                if (_list.Count > 0)
                {
                    var _checkCustomer = (from _l in _list where _l.Sgdd_cust_cd == _customer select _l).ToList();
                    if (_checkCustomer != null && _checkCustomer.Count > 0)
                        _iniLists = _checkCustomer;
                    else if (_returnList == null)
                        _iniLists = _list.Where(X => string.IsNullOrEmpty(X.Sgdd_cust_cd)).ToList();

                    List<CashGeneralEntiryDiscountDef> _tem = (from _res in _iniLists
                                                               where !string.IsNullOrEmpty(_res.Sgdd_itm)
                                                               select _res).ToList<CashGeneralEntiryDiscountDef>();
                    bool _itemNull = true;
                    if (_tem != null && _tem.Count > 0)
                    {
                        _itemNull = false;
                    }

                    List<CashGeneralEntiryDiscountDef> _rList = CheckItemforEntityDiscount(_iniLists, _item, _isAllowSerial, _isAllowPromotion);
                    if (_rList != null && _rList.Count > 0)
                        _returnList = _rList[0];
                    if ((_returnList == null || string.IsNullOrEmpty(_returnList.Sgdd_com)) && (_iniLists != null && _iniLists.Count() > 0) && _itemNull)
                        _returnList = _iniLists[0];
                }
            return _returnList;

        }

        public LoyaltyMemeber ValidateLoyaltyMember(string _card, string _cus, string _loty)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.ValidateLoyaltyMember(_card, _cus, _loty);

        }

        public DataTable GetUpdatableInvoiceforDiscounted(string _company)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetUpdatableInvoiceforDiscounted(_company);
        }

        public int UpdateDiscountRef(string _invoice, int _line, int _disseq, int _disline, string _distp)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            int _effect = -1;
            _effect = _salesDAL.UpdateDiscountRef(_invoice, _line, _disseq, _disline, _distp);
            _salesDAL.ConnectionClose();
            return _effect;
        }

        public string GetNxtAccNo(MasterAutoNumber _AccAutoNo)
        {
            _inventoryDAL = new InventoryDAL();

            _inventoryDAL.ConnectionOpen();
            MasterAutoNumber AccountAuto = _inventoryDAL.GetAutoNumber(_AccAutoNo.Aut_moduleid, _AccAutoNo.Aut_direction, _AccAutoNo.Aut_start_char, _AccAutoNo.Aut_cate_tp, _AccAutoNo.Aut_cate_cd, _AccAutoNo.Aut_modify_dt, _AccAutoNo.Aut_year);
            string AccountNo = _AccAutoNo.Aut_cate_cd + "-" + AccountAuto.Aut_number.ToString("000000", CultureInfo.InvariantCulture);

            return AccountNo;
        }

        public DataTable GetCustomerAllowInvoiceType(string _company, string _customer)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCustomerAllowInvoiceType(_company, _customer);

        }

        //public List<PriceDetailRef> GetCombinePriceForHp(string _company, string _profitCenter, string _invType, string _priceBook, string _priceLevel, string _customer, string _item, decimal _qty, DateTime _currentDate)
        public List<PriceDetailRef> GetCombinePriceForHp(string _company, string _profitCenter, string _invType, List<PriceDefinitionRef> _paramPBForPC, string _customer, string _item, decimal _qty, DateTime _currentDate)
        {

            _salesDAL = new SalesDAL();
            //Check the price for the specific customer availabillity (even for special promotions)
            //Check the price for special promotion without Customer
            //Check the price for normal price
            //If no price =>message

            List<PriceDetailRef> _priceDetailRef = new List<PriceDetailRef>();

            foreach (PriceDefinitionRef x in _paramPBForPC)
            {

                List<PriceDetailRef> _priceDetailRefTmp = new List<PriceDetailRef>();
                _priceDetailRefTmp = _salesDAL.GetCombinePrice(x.Sadd_pb, x.Sadd_p_lvl, _item, _qty, _currentDate, _customer, _company, _profitCenter);
                _priceDetailRef.AddRange(_priceDetailRefTmp);
            }


            //2.Without Customer
            //if (_priceDetailRef.Count <= 0)
            //{
            //    foreach (PriceDefinitionRef y in _paramPBForPC)
            //    {
            //        _priceDetailRef = _salesDAL.GetCombinePrice(y.Sadd_pb, y.Sadd_p_lvl, _item, _qty, _currentDate, string.Empty, _company, _profitCenter);
            //    }
            //}



            return _priceDetailRef;

        }

        //public List<PriceDetailRef> GetPriceForHp(string _company, string _profitCenter, string _invType, string _priceBook, string _priceLevel, string _customer, string _item, decimal _qty, DateTime _currentDate)
        public List<PriceDetailRef> GetPriceForHp(string _company, string _profitCenter, string _invType, List<PriceDefinitionRef> _priceList, string _customer, string _item, decimal _qty, DateTime _currentDate)
        {

            _salesDAL = new SalesDAL();
            //Check the price for the specific customer availabillity (even for special promotions)
            //Check the price for special promotion without Customer
            //Check the price for normal price
            //If no price =>message

            List<PriceDetailRef> _priceDetailRefNew = new List<PriceDetailRef>();
            List<PriceDetailRef> _priceDetailRef = new List<PriceDetailRef>();
            List<PriceDetailRef> _returnlist = new List<PriceDetailRef>();
            DataTable _dtChnl = new DataTable();

            foreach (PriceDefinitionRef z in _priceList)
            {
                //1.With customer
                //                _priceDetailRef = _salesDAL.GetPriceDetailForHp(z.Sadd_pb, z.Sadd_p_lvl, _item, _qty, _currentDate, _customer);
                _priceDetailRefNew = _salesDAL.GetPriceDetailForHp(z.Sadd_pb, z.Sadd_p_lvl, _item, _qty, _currentDate, _customer);


                _priceDetailRef = (from _res in _priceDetailRefNew
                                   orderby _res.Sapd_from_date descending, _res.Sapd_pb_seq descending, _res.Sapd_qty_from
                                   select _res).ToList<PriceDetailRef>();

                ////2.Without Customer
                //if (_priceDetailRef.Count <= 0)
                //{
                //    _priceDetailRef = _salesDAL.GetPriceDetailForHp(_priceBook, _priceLevel, _item, _qty, _currentDate, string.Empty);
                //}

                if (_priceDetailRef.Count > 0)
                {
                    List<PriceDetailRef> _lists = new List<PriceDetailRef>();
                    var _types = _priceDetailRef.Select(x => x.Sapd_price_type).Distinct();
                    foreach (var _type in _types)
                    {
                        if (_type != 0)
                        {
                            var _lst = _priceDetailRef.Where(x => x.Sapd_price_type == _type).ToList();
                            if (_lst != null)
                                if (_lst.Count > 0)
                                    _lists.AddRange(_lst);
                        }
                        else
                        {
                            var _lst = _priceDetailRef.Where(x => x.Sapd_price_type == _type).ToList();
                            if (_lst != null)
                                if (_lst.Count > 0)
                                    _lists.Add(_lst[0]);
                        }
                    }

                    var _promo = _lists.Where(x => x.Sapd_price_type != 0).ToList();
                    var _normal = _lists.Where(x => x.Sapd_price_type == 0).ToList();

                    if (_promo != null)
                        if (_promo.Count > 0)
                            foreach (PriceDetailRef i in _promo)
                            {
                                List<PriceProfitCenterPromotion> _lst = new List<PriceProfitCenterPromotion>();
                                _lst = _salesDAL.CheckPromotion(_company, _profitCenter, i.Sapd_promo_cd, i.Sapd_pb_seq, "PC");
                                if (_lst != null)
                                {
                                    if (_lst.Count > 0)
                                        _returnlist.Add(i);
                                }

                                _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitCenter, "SCHNL");
                                _lst = _salesDAL.CheckPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), i.Sapd_promo_cd, i.Sapd_pb_seq, "SCHNL");
                                if (_lst != null)
                                {
                                    if (_lst.Count > 0)
                                        _returnlist.Add(i);
                                }

                                _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitCenter, "CHNL");
                                _lst = _salesDAL.CheckPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), i.Sapd_promo_cd, i.Sapd_pb_seq, "CHNL");
                                if (_lst != null)
                                {
                                    if (_lst.Count > 0)
                                        _returnlist.Add(i);
                                }



                            }
                    if (_normal != null)
                        if (_normal.Count > 0) _returnlist.AddRange(_normal);
                }
            }



            return _returnlist;

        }

        public Int32 Save_AC_ServiceChargesDefinitions(MasterItem mstItm, MasterItemTax itmTax, PriceDetailRef pbDet)
        {
            Int32 _effect = 0;
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();

                _salesDAL.Update_item(mstItm, false);//insert item
                _salesDAL.Save_mst_itm_comtax(itmTax);//insert tax/vat
                //step 3
                _salesDAL.SavePriceDetails(pbDet);//insert price

                _salesDAL.ConnectionClose();
                _effect = 1;
                _tr.Complete();
            }
            return _effect;
        }

        public Int32 Save_mst_itm_sev(MasterItemService _itmSev, List<string> ItemCodeList)
        {
            Int32 _effect = 0;
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();

                foreach (string itmCd in ItemCodeList)
                {
                    _itmSev.Misv_itm_cd = itmCd;
                    _salesDAL.Save_mst_itm_sev(_itmSev);
                }

                //_salesDAL.Save_mst_itm_sev(_itmSev);
                _salesDAL.ConnectionClose();
                _effect = 1;
                _tr.Complete();
            }
            return _effect;
        }

        public int SaveEliteCommissionDefinition(EliteCommissionDefinition _definition, List<EliteCommissionDetail> _detail, List<EliteCommissionPrty> _prty, List<EliteCommissionAdditional> _additional, List<EliteCommissionIgnore> _ignore, List<CashCommissionDetailRef> _item, string _itemType, MasterAutoNumber _auto, List<EliteCommissionSalesTypes> _salesType, out string err, bool _type)
        {

            //using (TransactionScope tr = new TransactionScope())
            //{
            int result = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();

                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();


                MasterAutoNumber _circulrAuto = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                string circular = _auto.Aut_cate_cd + "-" + _circulrAuto.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_auto);
                int seq = _inventoryDAL.GetSerialID();
                _definition.Saec_seq = seq;
                _definition.Saec_circ = circular;
                result = result + _salesDAL.SaveEliteCommissionDefinition(_definition);

                foreach (EliteCommissionDetail _det in _detail)
                {
                    _det.Saec_seq = seq;
                    _det.Saec_circuler = circular;
                    result = result + _salesDAL.SaveEliteCommissionDetail(_det);
                }

                foreach (EliteCommissionPrty _pr in _prty)
                {
                    _pr.Saec_seq = seq;
                    _pr.Saec_circular = circular;
                    result = result + _salesDAL.SaveEliteCommissionLocation(_pr);
                }

                foreach (EliteCommissionAdditional _add in _additional)
                {
                    _add.Saec_seq = seq;
                    _add.Saec_circular = circular;
                    result = result + _salesDAL.SaveEliteCommissionAdditional(_add);
                }

                foreach (EliteCommissionIgnore _ign in _ignore)
                {

                    _ign.Saec_seq = seq;
                    _ign.Saec_circular = circular;
                    result = result + _salesDAL.SaveEliteCommissionIgnore(_ign);
                }
                foreach (EliteCommissionSalesTypes _sal in _salesType)
                {
                    _sal.Saec_seq = seq;
                    _sal.Saec_circular = circular;
                    result = result + _salesDAL.SaveEliteCommissionSalesType(_sal);
                }
                if (_item != null && _item.Count > 0)
                {
                    foreach (CashCommissionDetailRef _ref in _item)
                    {
                        EliteCommissionItem _itm = new EliteCommissionItem();
                        if (_itemType == "10")
                        {
                            _itm.Saec_cat1 = _ref.Sccd_itm;
                        }
                        if (_itemType == "9")
                        {
                            _itm.Saec_cat2 = _ref.Sccd_itm;
                        }
                        if (_itemType == "7")
                        {
                            _itm.Saec_brand = _ref.Sccd_itm;
                        }
                        if (_itemType == "6")
                        {

                            _itm.Saec_brand = _ref.Sccd_brd;
                            _itm.Saec_cat1 = _ref.Sccd_itm;
                        }
                        if (_itemType == "5")
                        {
                            _itm.Saec_brand = _ref.Sccd_brd;
                            _itm.Saec_cat2 = _ref.Sccd_itm;
                        }
                        if (_itemType == "3")
                        {
                            _itm.Saec_itm = _ref.Sccd_itm;
                        }
                        if (_itemType == "1")
                        {
                            _itm.Saec_cat1 = _ref.Sccd_main_cat;
                            _itm.Saec_cat2 = _ref.Sccd_itm;
                        }

                        _itm.Saec_seq = seq;
                        _itm.Saec_direct = _type;
                        _itm.Saec_circular = circular;
                        _salesDAL.SaveEliteCommissionItem(_itm);
                    }
                }
                _inventoryDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                err = "";
                //_inventoryDAL.ConnectionClose();
                //_salesDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                err = ex.Message;
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
            }
            //    tr.Complete();
            //}

            return result;
        }

        public List<EliteCommissionDefinition> GetEliteCommissionDefinition(string _circular)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetEliteCommissionDefinition(_circular);
        }

        public List<EliteCommissionDetail> GetEliteCommissionDetailsByCircular(string circular)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetEliteCommissionDetails(circular);
        }

        public List<EliteCommissionPrty> GetEliteCommissionLocation(string circular)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetEliteCommissionLocation(circular);
        }

        public List<EliteCommissionAdditional> GetEliteCommissionAdditional(string circular)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetEliteCommissionAdditional(circular);
        }
        public List<EliteCommissionIgnore> GetEliteCommissionIgnore(string circular)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetEliteCommissionIgnore(circular);
        }
        public List<EliteCommissionItem> GetEliteCommissionItem(string circular)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetEliteCommissionItem(circular);
        }

        public DataTable Get_gurantors(string accountNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_gurantors(accountNo);
        }

        public DataTable GetHpCustomer_Details(string accNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHpCustomer_Details(accNo);
        }

        public DataTable GetProfitCenterAllocatedExecutive(string _company, string _profitcenter)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetProfitCenterAllocatedExecutive(_company, _profitcenter);
        }

        public DataTable GetGenDiscByCirc(string _circ)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetGenDiscByCirc(_circ);
        }
        public DataTable Get_Manager_Issue_rec(string AccountNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_Manager_Issue_rec(AccountNo);
        }
        public DataTable GetReceiptDetByChqNo(string _chqno, Int32 _isAll)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReceiptDetByChqNo(_chqno, _isAll);
        }
        public DataTable Get_Manager_receive_rec(string AccountNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_Manager_receive_rec(AccountNo);
        }
        public DataTable GetManagerEPF(string _company, string _profitcenter)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetManagerEPF(_company, _profitcenter);
        }
        public DataTable GetESDManagerEPF(string _company, string _profitcenter, DateTime _fromDate, DateTime _toDate)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetESDManagerEPF(_company, _profitcenter, _fromDate, _toDate);
        }
        public int CancelEliteCommission(string _circular)
        {
            _salesDAL = new SalesDAL();
            int result = 0;
            _salesDAL.ConnectionOpen();
            result = _salesDAL.CancelEliteCommission(_circular);
            _salesDAL.ConnectionClose();
            return result;
        }

        public Int32 Add_Remove_Guranter_Of_Account(string accountNo, List<string> RemoveGuranterCodeList, List<HpCustomer> newGuranterList)
        {
            Int32 _effect = 0;
            using (TransactionScope _tr = new TransactionScope())
            {
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();

                //------------------------------------------------------
                foreach (string g_code in RemoveGuranterCodeList)
                {
                    _salesDAL.Remove_GuranterOfAccount(accountNo, g_code);
                }
                //-------------------------------------------------------------------------
                for (int i = 1; i <= 2; i++)//to write address line 1 and 2
                {
                    foreach (HpCustomer newGur in newGuranterList)
                    {
                        Int32 CustSeqNo = 0;
                        CustSeqNo = _inventoryDAL.GetSerialID();
                        newGur.Htc_seq = CustSeqNo;
                        newGur.Htc_acc_no = accountNo;

                        //DataTable dt = _salesDAL.GetHpCustomer_Details(accountNo);
                        MasterBusinessEntity BUS = _salesDAL.GetCustomerProfile(newGur.Htc_cust_cd, null, null, null, null);

                        newGur.Htc_adr_tp = i;

                        if (newGur.Htc_adr_tp == 1)
                        {
                            newGur.Htc_adr_01 = BUS.Mbe_add1;//dt.Rows[0]["MBE_ADD1"].ToString();
                            newGur.Htc_adr_02 = BUS.Mbe_add2;//dt.Rows[0]["MBE_ADD2"].ToString();
                            newGur.Htc_adr_03 = "";
                        }
                        if (newGur.Htc_adr_tp == 2)
                        {
                            newGur.Htc_adr_01 = BUS.Mbe_cr_add1; //dt.Rows[0]["MBE_CR_ADD1"].ToString();
                            newGur.Htc_adr_02 = BUS.Mbe_cr_add2;//dt.Rows[0]["MBE_CR_ADD2"].ToString();
                            newGur.Htc_adr_03 = "";
                        }
                        _effect = _salesDAL.SaveAccCustomer(newGur);
                    }
                }

                //--------------------------------------------------------
                _salesDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _effect = 1;
                _tr.Complete();
            }
            return _effect;
        }
        public DataTable GetEliteCommissionEliteCommission(string _pc, DateTime _from, DateTime _to, decimal _discount, string _com, int _type, string _salesType, string _item)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetEliteCommissionEliteCommission(_pc, _from, _to, _discount, _com, _type, _salesType, _item);
        }

        public int EliteCommissionProcess(string _circular, List<string> _pcList, DateTime _from, DateTime _to, string _com, int year, int month, string creby, DateTime credt, out List<EliteCommission> _errlist, bool isErrorProcess, out string err)
        {



            /*
             01get all filtered invoices
                 -get do invoice items and invoice no for period-Done
                 -check discount-Done
                 -check promation-Done
                 insert into temp list-Done

             get all filtered REVERSE
                 -get srn invoice items and invoice no for period
                 -check discount-Done
                 -check promation-Done
                 insert into temp list-Done

             02. get all employees
             03.run process1 to mgr,EXE
             run process1 for other

             process1:
             get defintion for emp type
             call commission
                insert to temp LISTS

             04.run additionl calculations
                -get definition
                -update temp LISTS

             05.save to DB

             commission
             get sum amount for employee 
             check definition is in BT(before target)-comm=amount*BT or value(Get latest)
             if amount>target
             comm=amount*tar or value
             check for slab 
             comm=comm+amount*tar or value (get latest)
             */

            try
            {
                //using (TransactionScope tr = new TransactionScope())
                //{
                _salesDAL = new SalesDAL();
                //   _inventoryDAL = new InventoryDAL();
                _generalDAL = new GeneralDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                //    _inventoryDAL.ConnectionOpen();
                //   _inventoryDAL.BeginTransaction();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();

                //kapila 4/4/2016
                _securityDAL = new SecurityDAL();
                if (_securityDAL.Is_Report_DR("EliteCommissionProcess") == true) _salesDAL.ConnectionOpen_DR();
                //01. Start
                List<EliteCommissionDefinition> _def = _salesDAL.GetEliteCommissionDefinition(_circular);
                EliteCommissionDefinition _definition = _def[0];

                //get sales type list
                List<EliteCommissionSalesTypes> _salesType = _salesDAL.GetEliteCommissionSalesType(_definition.Saec_circ);
                List<EliteCommissionAdditional> _additional = _salesDAL.GetEliteCommissionAdditional(_definition.Saec_circ);
                List<EliteCommissionIgnore> _removeList = _salesDAL.GetEliteCommissionIgnore(_definition.Saec_circ);
                //get item list
                List<EliteCommissionItem> _itemList = _salesDAL.GetEliteCommissionItem(_definition.Saec_circ);
                string _items = "";
                bool inNotIn = false;
                if (_itemList != null && _itemList.Count > 0)
                {
                    foreach (EliteCommissionItem _itm in _itemList)
                    {
                        if (_itm.Saec_brand != "" && _itm.Saec_cat1 != "")
                        {
                            List<MasterItem> _item = _salesDAL.GetItemsByCateAndBrand(_itm.Saec_cat1, null, null, _itm.Saec_brand, _com);
                            foreach (MasterItem itm in _item)
                            {
                                _items = _items + itm.Mi_cd + ",";
                            }
                        }

                        if (_itm.Saec_brand != "" && _itm.Saec_cat2 != "")
                        {
                            List<MasterItem> _item = _salesDAL.GetItemsByCateAndBrand(null, _itm.Saec_cat2, null, _itm.Saec_brand, _com);
                            foreach (MasterItem itm in _item)
                            {
                                _items = _items + itm.Mi_cd + ",";
                            }
                        }

                        if (_itm.Saec_cat1 != "" && _itm.Saec_cat2 != "")
                        {
                            List<MasterItem> _item = _salesDAL.GetItemsByCateAndBrand(_itm.Saec_cat1, _itm.Saec_cat2, null, null, _com);
                            foreach (MasterItem itm in _item)
                            {
                                _items = _items + itm.Mi_cd + ",";
                            }
                        }

                        else if (_itm.Saec_brand != "")
                        {
                            List<MasterItem> _item = _salesDAL.GetItemsByCateAndBrand(null, null, null, _itm.Saec_brand, _com);
                            foreach (MasterItem itm in _item)
                            {
                                _items = _items + itm.Mi_cd + ",";
                            }
                        }
                        else if (_itm.Saec_cat1 != "")
                        {
                            List<MasterItem> _item = _salesDAL.GetItemsByCateAndBrand(_itm.Saec_cat1, null, null, null, _com);
                            foreach (MasterItem itm in _item)
                            {
                                _items = _items + itm.Mi_cd + ",";
                            }
                        }
                        else if (_itm.Saec_cat2 != "")
                        {
                            List<MasterItem> _item = _salesDAL.GetItemsByCateAndBrand(null, _itm.Saec_cat2, null, null, _com);
                            foreach (MasterItem itm in _item)
                            {
                                _items = _items + itm.Mi_cd + ",";
                            }
                        }
                        else if (_itm.Saec_itm != "")
                        {
                            DataTable _item = _salesDAL.GetItemCode(_com, _itm.Saec_itm);
                            _items = _items + _item.Rows[0]["Mi_cd"].ToString() + ",";

                        }
                        //include or not include
                        inNotIn = _itm.Saec_direct;
                    }

                    //remove last comma
                    if (_items != "")
                        _items = _items.Substring(0, _items.Length - 1);

                }

                foreach (string _pc in _pcList)
                {
                    List<EliteCommissionInvoice> _doList = new List<EliteCommissionInvoice>();
                    List<EliteCommissionInvoice> _srnList = new List<EliteCommissionInvoice>();
                    MasterProfitCenter _pro = _generalDAL.GetPCByPCCode(_com, _pc);
                    List<FF.BusinessObjects.EliteCommissionInvoice> _invoiceList = new List<BusinessObjects.EliteCommissionInvoice>();
                    foreach (EliteCommissionSalesTypes _sal in _salesType)
                    {
                        DataTable _temDo;

                        if (_items == "")
                        {

                            _temDo = _salesDAL.GetEliteCommissionEliteCommission(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 1, _sal.Saec_sales_type, _items);
                            if (_definition.Saec_alw_discount > 0)
                            {
                                DataTable _t = _salesDAL.GetEliteCommissionEliteCommissionPromotion(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 1, _sal.Saec_sales_type, _items);
                                _temDo.Merge(_t);

                                //cr note
                                DataTable _tt = _salesDAL.GetEliteCommissionEliteCommissionPromotionCreditNote(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 1, _sal.Saec_sales_type, _items);
                                _temDo.Merge(_tt);
                            }

                        }
                        else
                        {
                            if (inNotIn)
                            {
                                _temDo = _salesDAL.GetEliteCommissionEliteCommission(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 2, _sal.Saec_sales_type, _items);
                                if (_definition.Saec_alw_discount > 0)
                                {
                                    DataTable _t = _salesDAL.GetEliteCommissionEliteCommissionPromotion(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 2, _sal.Saec_sales_type, _items);
                                    _temDo.Merge(_t);

                                    //cr note
                                    DataTable _tt = _salesDAL.GetEliteCommissionEliteCommissionPromotionCreditNote(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 2, _sal.Saec_sales_type, _items);
                                    _temDo.Merge(_tt);
                                }
                            }
                            else
                            {
                                _temDo = _salesDAL.GetEliteCommissionEliteCommission(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 5, _sal.Saec_sales_type, _items);
                                if (_definition.Saec_alw_discount > 0)
                                {
                                    DataTable _t = _salesDAL.GetEliteCommissionEliteCommissionPromotion(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 5, _sal.Saec_sales_type, _items);
                                    _temDo.Merge(_t);

                                    //cr note
                                    DataTable _tt = _salesDAL.GetEliteCommissionEliteCommissionPromotionCreditNote(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 5, _sal.Saec_sales_type, _items);
                                    _temDo.Merge(_tt);
                                }
                            }
                        }
                        //add data table values to list
                        foreach (DataRow dr in _temDo.Rows)
                        {
                            EliteCommissionInvoice _inv = new EliteCommissionInvoice();
                            _inv.Cashier_code = dr["sah_cre_by"].ToString();
                            _inv.Discount = Convert.ToDecimal(dr["sad_disc_amt"]);
                            _inv.Exe_code = dr["sah_sales_ex_cd"].ToString();
                            _inv.Invoice_no = dr["sah_inv_no"].ToString();
                            _inv.Invoice_type = true;
                            _inv.Item_code = dr["sad_itm_cd"].ToString();
                            _inv.Mge_code = dr["sah_man_cd"].ToString();
                            _inv.Value = Convert.ToDecimal(dr["sad_tot_amt"]);
                            _inv.Vat = Convert.ToDecimal(dr["sad_itm_tax_amt"]);
                            _doList.Add(_inv);
                            if (dr["sah_inv_no"].ToString() == "MSR08-CAINV-00044151")
                            {
                                _doList.Add(_inv);
                            }
                        }

                        //before 2013/07/01
                        //get credit note without srn(Kapila)
                        DateTime cutoff = new DateTime(2013, 07, 01);
                        if (_from < cutoff)
                        {
                            DataTable _crnote = _salesDAL.GetCrnoteWithoutSRN(_pro.Mpc_def_loc, _from, _to, _com, _sal.Saec_sales_type, _pc);
                            foreach (DataRow dr in _crnote.Rows)
                            {
                                EliteCommissionInvoice _inv = new EliteCommissionInvoice();
                                _inv.Cashier_code = dr["sah_cre_by"].ToString();
                                _inv.Discount = Convert.ToDecimal(dr["sad_disc_amt"]);
                                _inv.Exe_code = dr["sah_sales_ex_cd"].ToString();
                                _inv.Invoice_no = dr["sah_inv_no"].ToString();
                                _inv.Invoice_type = true;
                                _inv.Item_code = dr["sad_itm_cd"].ToString();
                                _inv.Mge_code = dr["sah_man_cd"].ToString();
                                _inv.Value = Convert.ToDecimal(dr["sad_tot_amt"]);
                                _inv.Vat = Convert.ToDecimal(dr["sad_itm_tax_amt"]);
                                _doList.Add(_inv);
                            }
                        }

                        DataTable _temSrn = new DataTable();
                        if (_items == "")
                        {
                            _temSrn = _salesDAL.GetEliteCommissionEliteCommission(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 3, _sal.Saec_sales_type, _items);
                            if (_definition.Saec_alw_discount > 0)
                            {
                                DataTable _t = _salesDAL.GetEliteCommissionEliteCommissionPromotion(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 3, _sal.Saec_sales_type, _items);
                                _temSrn.Merge(_t);
                            }
                        }
                        else
                        {
                            if (inNotIn)
                            {
                                _temSrn = _salesDAL.GetEliteCommissionEliteCommission(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 4, _sal.Saec_sales_type, _items);
                                if (_definition.Saec_alw_discount > 0)
                                {
                                    DataTable _t = _salesDAL.GetEliteCommissionEliteCommissionPromotion(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 4, _sal.Saec_sales_type, _items);
                                    _temSrn.Merge(_t);
                                }
                            }
                            else
                            {
                                _temDo = _salesDAL.GetEliteCommissionEliteCommission(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 6, _sal.Saec_sales_type, _items);
                                if (_definition.Saec_alw_discount > 0)
                                {
                                    DataTable _t = _salesDAL.GetEliteCommissionEliteCommissionPromotion(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 6, _sal.Saec_sales_type, _items);
                                    _temDo.Merge(_t);
                                }
                            }

                        }
                        //add data table values to list
                        foreach (DataRow dr in _temSrn.Rows)
                        {
                            EliteCommissionInvoice _inv = new EliteCommissionInvoice();
                            _inv.Cashier_code = dr["sah_cre_by"].ToString();
                            _inv.Discount = Convert.ToDecimal(dr["sad_disc_amt"]);
                            _inv.Exe_code = dr["sah_sales_ex_cd"].ToString();
                            _inv.Invoice_no = dr["sah_inv_no"].ToString();
                            _inv.Invoice_type = false;
                            _inv.Item_code = dr["sad_itm_cd"].ToString();
                            _inv.Mge_code = dr["sah_man_cd"].ToString();
                            _inv.Value = Convert.ToDecimal(dr["sad_tot_amt"]);
                            _inv.Vat = Convert.ToDecimal(dr["sad_itm_tax_amt"]);
                            _srnList.Add(_inv);
                        }

                    }
                    //01 end

                    //02 start
                    #region GET EMPLOYEE
                    DataTable _mgrTbl = _salesDAL.GetPcEmployee(_com, _pc, "SRMGR");
                    //insert into list
                    List<PostCommissionEmployee> _mgrList = new List<PostCommissionEmployee>();

                    foreach (DataRow dr in _mgrTbl.Rows)
                    {
                        if (_removeList != null && _removeList.Count > 0)
                        {
                            foreach (EliteCommissionIgnore ign in _removeList)
                            {
                                if (dr["ESEP_CAT_CD"].ToString() == ign.Saec_emp_cate && dr["ESEP_CAT_SUBCD"].ToString() == ign.Saec_emp_sub_cate)
                                    continue;
                            }
                        }
                        if (Convert.ToInt32(dr["mpce_act"].ToString()) == 1)
                        {
                            PostCommissionEmployee _emp = new PostCommissionEmployee();
                            _emp.Emp_code = dr["esep_cd"].ToString();
                            _emp.Emp_epf = dr["esep_epf"].ToString();
                            _mgrList.Add(_emp);
                        }
                    }

                    //get executives
                    DataTable _exeTbl = _salesDAL.GetPcEmployee(_com, _pc, "SALEX");
                    //insert into list
                    List<PostCommissionEmployee> _exeList = new List<PostCommissionEmployee>();
                    foreach (DataRow dr in _exeTbl.Rows)
                    {
                        if (_removeList != null && _removeList.Count > 0)
                        {
                            foreach (EliteCommissionIgnore ign in _removeList)
                            {

                                if (dr["ESEP_CAT_CD"].ToString() == ign.Saec_emp_cate && dr["ESEP_CAT_SUBCD"].ToString() == ign.Saec_emp_sub_cate)
                                    continue;
                            }
                        }
                        PostCommissionEmployee _emp = new PostCommissionEmployee();
                        _emp.Emp_code = dr["esep_cd"].ToString();
                        _emp.Emp_epf = dr["esep_epf"].ToString();
                        _exeList.Add(_emp);
                    }

                    //get cashier
                    DataTable _casTbl = _salesDAL.GetPcEmployee(_com, _pc, "CASHIER");
                    //insert into list
                    List<PostCommissionEmployee> _casList = new List<PostCommissionEmployee>();
                    foreach (DataRow dr in _casTbl.Rows)
                    {
                        if (_removeList != null && _removeList.Count > 0)
                        {
                            foreach (EliteCommissionIgnore ign in _removeList)
                            {
                                if (dr["ESEP_CAT_CD"].ToString() == ign.Saec_emp_cate && dr["ESEP_CAT_SUBCD"].ToString() == ign.Saec_emp_sub_cate)
                                    continue;
                            }
                        }
                        PostCommissionEmployee _emp = new PostCommissionEmployee();
                        _emp.Emp_code = dr["esep_cd"].ToString();
                        _emp.Emp_epf = dr["esep_epf"].ToString();
                        _casList.Add(_emp);
                    }

                    //get helper
                    DataTable _helTbl = _salesDAL.GetPcEmployee(_com, _pc, "HELPER");
                    //insert into list
                    List<PostCommissionEmployee> _helList = new List<PostCommissionEmployee>();
                    foreach (DataRow dr in _helTbl.Rows)
                    {
                        if (_removeList != null && _removeList.Count > 0)
                        {
                            foreach (EliteCommissionIgnore ign in _removeList)
                            {
                                if (dr["ESEP_CAT_CD"].ToString() == ign.Saec_emp_cate && dr["ESEP_CAT_SUBCD"].ToString() == ign.Saec_emp_sub_cate)
                                    continue;
                            }
                        }
                        PostCommissionEmployee _emp = new PostCommissionEmployee();
                        _emp.Emp_code = dr["esep_cd"].ToString();
                        _emp.Emp_epf = dr["esep_epf"].ToString();
                        _helList.Add(_emp);
                    }

                    //get cH-head
                    DataTable _CHTbl = _salesDAL.GetPcEmployee(_com, _pc, "CH_HEAD");
                    //insert into list
                    List<PostCommissionEmployee> _chHeadList = new List<PostCommissionEmployee>();
                    foreach (DataRow dr in _CHTbl.Rows)
                    {
                        if (_removeList != null && _removeList.Count > 0)
                        {
                            foreach (EliteCommissionIgnore ign in _removeList)
                            {
                                if (dr["ESEP_CAT_CD"].ToString() == ign.Saec_emp_cate && dr["ESEP_CAT_SUBCD"].ToString() == ign.Saec_emp_sub_cate)
                                    continue;
                            }
                        }
                        PostCommissionEmployee _emp = new PostCommissionEmployee();
                        _emp.Emp_code = dr["esep_cd"].ToString();
                        _emp.Emp_epf = dr["esep_epf"].ToString();
                        _chHeadList.Add(_emp);
                    }
                    #endregion

                    List<EliteCommission> _commissionList = new List<EliteCommission>();
                    List<EliteCommissionSlab> _commissionDetList = new List<EliteCommissionSlab>();

                    //03. start
                    #region MANAGER

                    //get comm definition for mgr
                    List<EliteCommissionDetail> _tem = _salesDAL.GetEliteCommissionDetails(_definition.Saec_circ);
                    List<EliteCommissionDetail> _mgrComm = (from _res in _tem
                                                            where _res.Saec_emp_type == "SRMGR" && _res.Saec_type != "OT"
                                                            select _res).ToList<EliteCommissionDetail>();

                    if (_mgrComm != null && _mgrComm.Count > 0)
                    {
                        //get sum value for manager
                        foreach (PostCommissionEmployee _mgr in _mgrList)
                        {
                            EliteCommission _commission = new EliteCommission();

                            List<PostCommissionEmployee> _aoaList = new List<PostCommissionEmployee>();
                            if (_removeList != null && _removeList.Count > 0)
                            {
                                foreach (EliteCommissionIgnore ign in _removeList)
                                {
                                    DataTable _dt = _salesDAL.GetPcEmployeeByCatSub(_com, _pc, ign.Saec_emp_cate, ign.Saec_emp_sub_cate);
                                    foreach (DataRow _dr in _dt.Rows)
                                    {
                                        PostCommissionEmployee _emp = new PostCommissionEmployee();
                                        _emp.Emp_code = _dr["esep_cd"].ToString();
                                        _emp.Emp_epf = _dr["esep_epf"].ToString();
                                        _aoaList.Add(_emp);
                                    }

                                }
                            }

                            List<EliteCommissionInvoice> _mgrDO = (from _res in _doList
                                                                   //where _res.Mge_code == _mgr.Emp_epf
                                                                   orderby _res.Invoice_no
                                                                   select _res
                                                                   ).ToList<EliteCommissionInvoice>();
                            List<EliteCommissionInvoice> tt = new List<EliteCommissionInvoice>();
                            //remove aoa invoices
                            for (int i = 0; i < _mgrDO.Count; i++)
                            {
                                List<PostCommissionEmployee> _temp = (from _res in _aoaList
                                                                      where _res.Emp_epf == _mgrDO[i].Exe_code
                                                                      select _res).ToList<PostCommissionEmployee>();
                                if (_temp != null && _temp.Count > 0)
                                {
                                    tt.Add(_mgrDO[i]);
                                }

                            }

                            //save do list
                            foreach (EliteCommissionInvoice inv in _mgrDO)
                            {
                                FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                _inv.Saec_pc = _pc;
                                _inv.Saec_discount = inv.Discount;
                                _inv.Saec_vat = inv.Vat;
                                _inv.Saec_price = inv.Value;
                                _inv.Saec_is_rev = false;
                                _inv.Saec_inv_no = inv.Invoice_no;
                                _inv.Saec_emp_type = "SRMGR";
                                _inv.Saec_emp_epf = _mgr.Emp_epf;
                                _inv.Saec_emp_code = _mgr.Emp_code;
                                _inv.Saec_itm = inv.Item_code;
                                _inv.Saec_from = _from;
                                _inv.Saec_to = _to;
                                _invoiceList.Add(_inv);
                            }


                            List<EliteCommissionInvoice> _mgrSRN = (from _res in _srnList
                                                                    //where _res.Mge_code == _mgr.Emp_epf
                                                                    select _res).ToList<EliteCommissionInvoice>();
                            List<EliteCommissionInvoice> bb = new List<EliteCommissionInvoice>();
                            for (int i = 0; i < _mgrSRN.Count; i++)
                            {
                                List<PostCommissionEmployee> _temp = (from _res in _aoaList
                                                                      where _res.Emp_epf == _mgrSRN[i].Exe_code
                                                                      select _res).ToList<PostCommissionEmployee>();
                                if (_temp != null && _temp.Count > 0)
                                {
                                    bb.Add(_mgrSRN[i]);
                                }
                            }

                            foreach (EliteCommissionInvoice inv in _mgrSRN)
                            {
                                FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                _inv.Saec_pc = _pc;
                                _inv.Saec_discount = inv.Discount;
                                _inv.Saec_vat = inv.Vat;
                                _inv.Saec_price = inv.Value;
                                _inv.Saec_is_rev = true;
                                _inv.Saec_emp_type = "SRMGR";
                                _inv.Saec_inv_no = inv.Invoice_no;
                                _inv.Saec_emp_epf = _mgr.Emp_epf;
                                _inv.Saec_emp_code = _mgr.Emp_code;
                                _inv.Saec_itm = inv.Item_code;
                                _inv.Saec_from = _from;
                                _inv.Saec_to = _to;
                                _invoiceList.Add(_inv);

                            }
                            //holds total - value
                            //holds total + value for mgr
                            decimal totalPrice = _mgrDO.Sum(x => x.Value) - tt.Sum(x => x.Value);
                            decimal totalVat = _mgrDO.Sum(x => x.Vat) - tt.Sum(x => x.Vat);
                            decimal totalDisc = _mgrDO.Sum(x => x.Discount) - tt.Sum(x => x.Discount);
                            decimal totalPlus = totalPrice - totalDisc;


                            decimal totalMPrice = _mgrSRN.Sum(x => x.Value) - bb.Sum(x => x.Value);
                            decimal totalMVat = _mgrSRN.Sum(x => x.Vat) - bb.Sum(x => x.Vat);
                            decimal totalMDisc = _mgrSRN.Sum(x => x.Discount) - bb.Sum(x => x.Discount);
                            decimal totalMinus = totalMPrice - totalMDisc;

                            //hold total value
                            decimal totalvalue = totalPlus - totalMinus;
                            _commission.Saec_com = _com;
                            _commission.Saec_pc = _pc;
                            _commission.Saec_emp_code = _mgr.Emp_code;
                            _commission.Saec_emp_epf = _mgr.Emp_epf;
                            _commission.Saec_emp_type = "SRMGR";
                            _commission.Saec_cre_by = creby;
                            _commission.Saec_cre_dt = credt;
                            _commission.Saec_price = totalPrice;
                            _commission.Saec_rtn = totalMinus;
                            _commission.Saec_vat = totalVat;
                            _commission.Saec_dis = totalDisc;
                            _commission.Saec_net = totalPlus - totalMinus;
                            _commission.Saec_gross = totalPlus;
                            _commission.Saec_year = year;
                            _commission.Saec_month = month;
                            _commission.Saec_from = _from;
                            _commission.Saec_to = _to;

                            //hold commission value
                            decimal commission = 0;

                            //check Target cover or not(get target value range)
                            List<EliteCommissionDetail> _target = (from _res in _mgrComm
                                                                   where _res.Saec_type == "TA"
                                                                   orderby _res.Saec_line_no descending
                                                                   select _res).ToList<EliteCommissionDetail>();

                            bool targetCover = false;
                            foreach (EliteCommissionDetail _det in _target)
                            {

                                if (_det.Saec_from <= totalvalue)
                                {
                                    if (_det.Saec_to <= totalvalue)
                                    {
                                        if (_det.Saec_value > 0)
                                        {
                                            commission = _det.Saec_value;
                                            targetCover = true;
                                            break;
                                        }
                                        else
                                        {
                                            commission = (_det.Saec_to * _det.Saec_rate) / 100;
                                            targetCover = true;
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        if (_det.Saec_value > 0)
                                        {
                                            commission = _det.Saec_value;
                                            targetCover = true;
                                            break;
                                        }
                                        else
                                        {
                                            commission = (totalvalue * _det.Saec_rate) / 100;
                                            targetCover = true;
                                            break;
                                        }
                                    }
                                }




                            }

                            if (!targetCover)
                            {
                                //no slab
                                //check for below target definition
                                List<EliteCommissionDetail> _belowList = (from _res in _mgrComm
                                                                          where _res.Saec_type == "BE"
                                                                          orderby _res.Saec_line_no descending
                                                                          select _res).ToList<EliteCommissionDetail>();
                                if (_belowList != null && _belowList.Count > 0)
                                {

                                    foreach (EliteCommissionDetail _below in _belowList)
                                    {
                                        //check for from value
                                        if (_below.Saec_from <= totalvalue)
                                        {
                                            if (_below.Saec_to >= totalvalue)
                                            {
                                                if (_below.Saec_value > 0)
                                                {
                                                    commission = _below.Saec_value;
                                                }
                                                else
                                                {
                                                    commission = (totalvalue * _below.Saec_rate) / 100;
                                                }
                                            }
                                        }

                                    }

                                }

                            }
                            else if (targetCover)
                            {
                                //go for slab
                                //order by descending to get maximum slab
                                List<EliteCommissionDetail> _slabList = (from _res in _mgrComm
                                                                         where _res.Saec_type == "AF"
                                                                         orderby _res.Saec_line_no
                                                                         select _res).ToList<EliteCommissionDetail>();

                                if (_slabList != null && _slabList.Count > 0)
                                {
                                    EliteCommissionSlab _tslab = new EliteCommissionSlab();
                                    _tslab.Saec_com = _com;
                                    _tslab.Saec_cre_by = creby;
                                    _tslab.Saec_cre_dt = credt;
                                    _tslab.Saec_emp_code = _mgr.Emp_code;
                                    _tslab.Saec_emp_type = "SRMGR";
                                    _tslab.Saec_pc = _pc;
                                    _tslab.Saec_from = _from;
                                    _tslab.Saec_to = _to;

                                    _tslab.Saec_comm = commission;
                                    _tslab.Saec_slab = 0;
                                    _commissionDetList.Add(_tslab);

                                    foreach (EliteCommissionDetail _slabDet in _slabList)
                                    {

                                        EliteCommissionSlab _slab = new EliteCommissionSlab();
                                        _slab.Saec_com = _com;
                                        _slab.Saec_cre_by = creby;
                                        _slab.Saec_cre_dt = credt;
                                        _slab.Saec_emp_code = _mgr.Emp_code;
                                        _slab.Saec_emp_type = "SRMGR";
                                        _slab.Saec_pc = _pc;
                                        _slab.Saec_from = _from;
                                        _slab.Saec_to = _to;
                                        //check for from value
                                        if (_slabDet.Saec_from <= totalvalue)
                                        {

                                            _slab.Saec_slab = _slabDet.Saec_line_no;
                                            if (_slabDet.Saec_to <= totalvalue)
                                            {
                                                if (_slabDet.Saec_value > 0)
                                                {
                                                    //totalvalue = totalvalue - (_slabDet.Saec_to - _slabDet.Saec_from);
                                                    _slab.Saec_comm = _slabDet.Saec_value;
                                                    commission = commission + _slabDet.Saec_value;
                                                    _commissionDetList.Add(_slab);
                                                }
                                                else
                                                {
                                                    // totalvalue = totalvalue - (_slabDet.Saec_to - _slabDet.Saec_from);
                                                    _slab.Saec_comm = ((_slabDet.Saec_to - _slabDet.Saec_from) * _slabDet.Saec_rate) / 100;
                                                    commission = commission + ((_slabDet.Saec_to - _slabDet.Saec_from) * _slabDet.Saec_rate) / 100;
                                                    _commissionDetList.Add(_slab);
                                                }

                                            }
                                        }
                                        //else
                                        //{
                                        //    if (_slabDet.Saec_value > 0)
                                        //    {
                                        //        //totalvalue = totalvalue - (_slabDet.Saec_to - _slabDet.Saec_from);
                                        //        _slab.Saec_comm = _slabDet.Saec_value;
                                        //        commission = commission + _slabDet.Saec_value;
                                        //        _commissionDetList.Add(_slab);
                                        //    }
                                        //    else
                                        //    {
                                        //        // totalvalue = totalvalue - (_slabDet.Saec_to - _slabDet.Saec_from);
                                        //        _slab.Saec_comm = ((_slabDet.Saec_to - _slabDet.Saec_from) * _slabDet.Saec_rate) / 100;
                                        //        commission = commission + ((_slabDet.Saec_to - _slabDet.Saec_from) * _slabDet.Saec_rate) / 100;
                                        //        _commissionDetList.Add(_slab);
                                        //    }
                                        //}

                                    }
                                    goto End;
                                }
                            End:
                                ;
                            }



                            //check additional
                            if (_additional != null && _additional.Count > 0)
                            {
                                List<EliteCommissionAdditional> _exeAdd = (from _res in _additional
                                                                           where _res.Saec_emp_type == "MGR"
                                                                           select _res).ToList<EliteCommissionAdditional>();


                                if (_exeAdd != null && _exeAdd.Count > 0)
                                {
                                    foreach (EliteCommissionAdditional _add in _exeAdd)
                                    {
                                        if (_add.Saec_tp == "Aditional")
                                            commission = commission + _exeAdd[0].Saec_val;
                                        else
                                            commission = commission - _exeAdd[0].Saec_val;
                                    }
                                }

                            }
                            _commission.Saec_comm = commission;

                            _commissionList.Add(_commission);
                        }
                    }
                    #endregion

                    #region EXECUTIVE
                    //exe
                    List<EliteCommissionDetail> _ExeComm = (from _res in _tem
                                                            where _res.Saec_emp_type == "SALEX" && _res.Saec_type != "OT"
                                                            select _res).ToList<EliteCommissionDetail>();

                    if (_ExeComm != null && _ExeComm.Count > 0)
                    {
                        //get sum value for manager
                        foreach (PostCommissionEmployee _exe in _exeList)
                        {
                            EliteCommission _commission = new EliteCommission();
                            List<EliteCommissionInvoice> _exeDO = (from _res in _doList
                                                                   where _res.Exe_code == _exe.Emp_epf
                                                                   select _res).ToList<EliteCommissionInvoice>();

                            foreach (EliteCommissionInvoice inv in _exeDO)
                            {
                                FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                _inv.Saec_pc = _pc;
                                _inv.Saec_discount = inv.Discount;
                                _inv.Saec_vat = inv.Vat;
                                _inv.Saec_price = inv.Value;
                                _inv.Saec_is_rev = false;
                                _inv.Saec_emp_type = "SALEX";
                                _inv.Saec_emp_epf = _exe.Emp_epf;
                                _inv.Saec_emp_code = _exe.Emp_code;
                                _inv.Saec_itm = inv.Item_code;
                                _inv.Saec_inv_no = inv.Invoice_no;
                                _inv.Saec_from = _from;
                                _inv.Saec_to = _to;
                                _invoiceList.Add(_inv);
                            }
                            //holds total + value for mgr
                            //decimal totalPlus = _exeDO.Sum(x => x.Value);
                            List<EliteCommissionInvoice> _exeSRN = (from _res in _srnList
                                                                    where _res.Exe_code == _exe.Emp_epf
                                                                    select _res).ToList<EliteCommissionInvoice>();
                            foreach (EliteCommissionInvoice inv in _exeSRN)
                            {
                                FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                _inv.Saec_pc = _pc;
                                _inv.Saec_discount = inv.Discount;
                                _inv.Saec_vat = inv.Vat;
                                _inv.Saec_price = inv.Value;
                                _inv.Saec_is_rev = true;
                                _inv.Saec_emp_type = "SALEX";
                                _inv.Saec_emp_epf = _exe.Emp_epf;
                                _inv.Saec_inv_no = inv.Invoice_no;
                                _inv.Saec_itm = inv.Item_code;
                                _inv.Saec_emp_code = _exe.Emp_code;
                                _inv.Saec_from = _from;
                                _inv.Saec_to = _to;
                                _invoiceList.Add(_inv);
                            }
                            //holds total - value
                            //decimal totalMinus = _exeSRN.Sum(x => x.Value);

                            decimal totalPrice = _exeDO.Sum(x => x.Value);
                            decimal totalVat = _exeDO.Sum(x => x.Vat);
                            decimal totalDisc = _exeDO.Sum(x => x.Discount);
                            decimal totalPlus = totalPrice - totalDisc;


                            decimal totalMPrice = _exeSRN.Sum(x => x.Value);
                            decimal totalMVat = _exeSRN.Sum(x => x.Vat);
                            decimal totalMDisc = _exeSRN.Sum(x => x.Discount);
                            decimal totalMinus = totalMPrice - totalMDisc;


                            //hold total value
                            decimal totalvalue = totalPlus - totalMinus;
                            _commission.Saec_com = _com;
                            _commission.Saec_pc = _pc;
                            _commission.Saec_emp_code = _exe.Emp_code;
                            _commission.Saec_emp_epf = _exe.Emp_epf;
                            _commission.Saec_emp_type = "SALEX";
                            _commission.Saec_cre_by = creby;
                            _commission.Saec_cre_dt = credt;
                            _commission.Saec_price = totalPrice;
                            _commission.Saec_rtn = totalMinus;
                            _commission.Saec_vat = totalVat;
                            _commission.Saec_dis = totalDisc;
                            _commission.Saec_gross = totalPlus;
                            _commission.Saec_net = totalPlus - totalMinus;
                            _commission.Saec_year = year;
                            _commission.Saec_month = month;
                            _commission.Saec_from = _from;
                            _commission.Saec_to = _to;

                            //hold commission value
                            decimal commission = 0;
                            //check Target cover or not(get target value range)
                            List<EliteCommissionDetail> _target = (from _res in _ExeComm
                                                                   where _res.Saec_type == "TA"
                                                                   orderby _res.Saec_line_no descending
                                                                   select _res).ToList<EliteCommissionDetail>();

                            bool targetCover = false;
                            foreach (EliteCommissionDetail _det in _target)
                            {

                                if (_det.Saec_from <= totalvalue)
                                {
                                    if (_det.Saec_to <= totalvalue)
                                    {
                                        if (_det.Saec_value > 0)
                                        {
                                            commission = _det.Saec_value;
                                            targetCover = true;
                                            break;
                                        }
                                        else
                                        {
                                            commission = (_det.Saec_to * _det.Saec_rate) / 100;
                                            targetCover = true;
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        if (_det.Saec_value > 0)
                                        {
                                            commission = _det.Saec_value;
                                            targetCover = true;
                                            break;
                                        }
                                        else
                                        {
                                            commission = (totalvalue * _det.Saec_rate) / 100;
                                            targetCover = true;
                                            break;
                                        }
                                    }
                                }




                            }


                            if (!targetCover)
                            {
                                //no slab
                                //check for below target definition
                                List<EliteCommissionDetail> _belowList = (from _res in _ExeComm
                                                                          where _res.Saec_type == "BE"
                                                                          orderby _res.Saec_line_no descending
                                                                          select _res).ToList<EliteCommissionDetail>();
                                if (_belowList != null && _belowList.Count > 0)
                                {

                                    foreach (EliteCommissionDetail _below in _belowList)
                                    {
                                        //check for from value
                                        if (_below.Saec_from <= totalvalue)
                                        {
                                            if (_below.Saec_to >= totalvalue)
                                            {
                                                if (_below.Saec_value > 0)
                                                {
                                                    commission = _below.Saec_value;
                                                }
                                                else
                                                {
                                                    commission = (totalvalue * _below.Saec_rate) / 100;
                                                }
                                            }
                                        }

                                    }

                                }

                            }

                            else if (targetCover)
                            {

                                //go for slab
                                //order by descending to get maximum slab
                                List<EliteCommissionDetail> _slabList = (from _res in _ExeComm
                                                                         where _res.Saec_type == "AF"
                                                                         orderby _res.Saec_line_no
                                                                         select _res).ToList<EliteCommissionDetail>();

                                if (_slabList != null && _slabList.Count > 0)
                                {
                                    EliteCommissionSlab _tslab = new EliteCommissionSlab();
                                    _tslab.Saec_com = _com;
                                    _tslab.Saec_cre_by = creby;
                                    _tslab.Saec_cre_dt = credt;
                                    _tslab.Saec_emp_code = _exe.Emp_code;
                                    _tslab.Saec_emp_type = "SALEX";
                                    _tslab.Saec_pc = _pc;
                                    _tslab.Saec_comm = commission;
                                    _tslab.Saec_slab = 0;
                                    _tslab.Saec_from = _from;
                                    _tslab.Saec_to = _to;
                                    _commissionDetList.Add(_tslab);

                                    foreach (EliteCommissionDetail _slabDet in _slabList)
                                    {
                                        EliteCommissionSlab _slab = new EliteCommissionSlab();
                                        _slab.Saec_com = _com;
                                        _slab.Saec_cre_by = creby;
                                        _slab.Saec_cre_dt = credt;
                                        _slab.Saec_emp_code = _exe.Emp_code;
                                        _slab.Saec_emp_type = "SALEX";
                                        _slab.Saec_pc = _pc;
                                        _slab.Saec_from = _from;
                                        _slab.Saec_to = _to;

                                        //check for from value
                                        if (_slabDet.Saec_from <= totalvalue)
                                        {

                                            _slab.Saec_slab = _slabDet.Saec_line_no;
                                            if (_slabDet.Saec_to <= totalvalue)
                                            {
                                                if (_slabDet.Saec_value > 0)
                                                {
                                                    //totalvalue = totalvalue - (_slabDet.Saec_to - _slabDet.Saec_from);
                                                    _slab.Saec_comm = _slabDet.Saec_value;
                                                    commission = commission + _slabDet.Saec_value;
                                                    _commissionDetList.Add(_slab);
                                                }
                                                else
                                                {
                                                    // totalvalue = totalvalue - (_slabDet.Saec_to - _slabDet.Saec_from);
                                                    _slab.Saec_comm = ((_slabDet.Saec_to - _slabDet.Saec_from) * _slabDet.Saec_rate) / 100;
                                                    commission = commission + ((_slabDet.Saec_to - _slabDet.Saec_from) * _slabDet.Saec_rate) / 100;
                                                    _commissionDetList.Add(_slab);
                                                }

                                            }
                                        }
                                        //else
                                        //{
                                        //    if (_slabDet.Saec_value > 0)
                                        //    {
                                        //        //totalvalue = totalvalue - (_slabDet.Saec_to - _slabDet.Saec_from);
                                        //        _slab.Saec_comm = _slabDet.Saec_value;
                                        //        commission = commission + _slabDet.Saec_value;
                                        //        _commissionDetList.Add(_slab);
                                        //    }
                                        //    else
                                        //    {
                                        //        // totalvalue = totalvalue - (_slabDet.Saec_to - _slabDet.Saec_from);
                                        //        _slab.Saec_comm = ((_slabDet.Saec_to - _slabDet.Saec_from) * _slabDet.Saec_rate) / 100;
                                        //        commission = commission + ((_slabDet.Saec_to - _slabDet.Saec_from) * _slabDet.Saec_rate) / 100;
                                        //        _commissionDetList.Add(_slab);
                                        //    }
                                        //}

                                    }
                                    goto End;
                                }

                            End:
                                ;
                            }

                            //check additional
                            if (_additional != null && _additional.Count > 0)
                            {
                                List<EliteCommissionAdditional> _exeAdd = (from _res in _additional
                                                                           where _res.Saec_emp_type == "EXE"
                                                                           select _res).ToList<EliteCommissionAdditional>();


                                if (_exeAdd != null && _exeAdd.Count > 0)
                                {
                                    foreach (EliteCommissionAdditional _add in _exeAdd)
                                    {
                                        if (_add.Saec_tp == "Aditional")
                                            commission = commission + _exeAdd[0].Saec_val;
                                        else
                                            commission = commission - _exeAdd[0].Saec_val;
                                    }
                                }

                            }
                            _commission.Saec_comm = commission;

                            _commissionList.Add(_commission);
                        }

                    }
                    #endregion

                    #region CH-HEAD
                    //calculate for cashier/helper/ch head
                    //CH_HEAD
                    List<EliteCommissionDetail> _coComm = (from _res in _tem
                                                           where _res.Saec_emp_type == "CH_HEAD" && _res.Saec_type != "OT"
                                                           select _res).ToList<EliteCommissionDetail>();


                    if (_coComm != null && _coComm.Count > 0)
                    {
                        foreach (PostCommissionEmployee _head in _chHeadList)
                        {
                            EliteCommission _commission = new EliteCommission();
                            EliteCommissionSlab _salb = new EliteCommissionSlab();
                            _commission.Saec_com = _com;
                            _commission.Saec_pc = _pc;
                            _commission.Saec_emp_code = _head.Emp_code;
                            _commission.Saec_emp_epf = _head.Emp_epf;
                            _commission.Saec_emp_type = "CH_HEAD";
                            _commission.Saec_cre_by = creby;
                            _commission.Saec_cre_dt = credt;
                            _commission.Saec_price = 0;
                            _commission.Saec_rtn = 0;
                            _commission.Saec_vat = 0;
                            _commission.Saec_dis = 0;
                            _commission.Saec_net = 0;
                            _commission.Saec_year = year;
                            _commission.Saec_month = month;
                            _commission.Saec_from = _from;
                            _commission.Saec_to = _to;


                            //Net Sale Basis

                            decimal chheadComm = 0;
                            decimal totalPlus = _doList.Sum(x => x.Value);
                            decimal totalMinus = _srnList.Sum(x => x.Value);

                            foreach (EliteCommissionDetail _det in _coComm)
                            {
                                if (_det.Saec_extract_from == "Net Sale Basis")
                                {
                                    if (_det.Saec_rate > 0)
                                    {
                                        chheadComm = ((totalPlus - totalMinus) * _det.Saec_rate) / 100;
                                    }
                                    else
                                    {
                                        chheadComm = _det.Saec_value;
                                    }
                                }

                            }
                            _commission.Saec_comm = chheadComm;
                            _commissionList.Add(_commission);
                        }
                    }
                    #endregion

                    #region CASHIER

                    //CASHIER
                    List<EliteCommissionDetail> _cashierComm = (from _res in _tem
                                                                where _res.Saec_emp_type == "CASHIER" && _res.Saec_type != "OT"
                                                                select _res).ToList<EliteCommissionDetail>();



                    if (_cashierComm != null && _cashierComm.Count > 0)
                    {

                        List<Tuple<string, decimal>> _mgrRed = new List<Tuple<string, decimal>>();
                        List<Tuple<string, decimal>> _exeRed = new List<Tuple<string, decimal>>();
                        List<Tuple<string, decimal>> _chRed = new List<Tuple<string, decimal>>();
                        foreach (PostCommissionEmployee _cashire in _casList)
                        {
                            EliteCommission _commission = new EliteCommission();
                            EliteCommissionSlab _salb = new EliteCommissionSlab();
                            _commission.Saec_com = _com;
                            _commission.Saec_pc = _pc;
                            _commission.Saec_emp_code = _cashire.Emp_code;
                            _commission.Saec_emp_epf = _cashire.Emp_epf;
                            _commission.Saec_emp_type = "CASHIER";
                            _commission.Saec_cre_by = creby;
                            _commission.Saec_cre_dt = credt;
                            _commission.Saec_price = 0;
                            _commission.Saec_rtn = 0;
                            _commission.Saec_vat = 0;
                            _commission.Saec_dis = 0;
                            _commission.Saec_net = 0;
                            _commission.Saec_year = year;
                            _commission.Saec_month = month;

                            _commission.Saec_from = _from;
                            _commission.Saec_to = _to;


                            //Manager Basis
                            //Executive Basis
                            //Ch-Head Basis 

                            decimal cashireComm = 0;

                            foreach (EliteCommissionDetail _det in _cashierComm)
                            {
                                if (_det.Saec_extract_from == "Manager Basis")
                                {
                                    foreach (PostCommissionEmployee _emp in _mgrList)
                                    {
                                        List<EliteCommission> comm = (from _res in _commissionList
                                                                      where _res.Saec_emp_code == _emp.Emp_code
                                                                      select _res).ToList<EliteCommission>();
                                        decimal _comm = 0;
                                        decimal temcomm = 0;
                                        try
                                        {
                                            _comm = comm[0].Saec_comm;
                                        }
                                        catch { _comm = 0; }

                                        if (_det.Saec_rate > 0)
                                        {
                                            temcomm = (_det.Saec_rate * _comm) / 100;
                                            cashireComm = cashireComm + (_det.Saec_rate * _comm) / 100;
                                        }
                                        else
                                        {
                                            temcomm = _det.Saec_value;
                                            cashireComm = cashireComm + _det.Saec_value;
                                        }
                                        //add cashier comm
                                        (from _res in _commissionList
                                         where _res.Saec_emp_code == _emp.Emp_code
                                         select _res).ToList().ForEach(x => x.Saec_cashier = (temcomm));

                                        _mgrRed.Add(new Tuple<string, decimal>(_emp.Emp_code, temcomm));

                                    }
                                }
                                if (_det.Saec_extract_from == "Executive Basis")
                                {
                                    foreach (PostCommissionEmployee _emp in _exeList)
                                    {
                                        List<EliteCommission> comm = (from _res in _commissionList
                                                                      where _res.Saec_emp_code == _emp.Emp_code
                                                                      select _res).ToList<EliteCommission>();
                                        decimal _comm = 0;
                                        decimal temcomm = 0;
                                        try
                                        {
                                            _comm = comm[0].Saec_comm;
                                        }
                                        catch { _comm = 0; }
                                        if (_det.Saec_rate > 0)
                                        {
                                            temcomm = (_det.Saec_rate * _comm) / 100;
                                            cashireComm = cashireComm + (_det.Saec_rate * _comm) / 100;
                                        }
                                        else
                                        {
                                            temcomm = _det.Saec_value;
                                            cashireComm = cashireComm + _det.Saec_value;
                                        }
                                        //add cashier comm
                                        (from _res in _commissionList
                                         where _res.Saec_emp_code == _emp.Emp_code
                                         select _res).ToList().ForEach(x => x.Saec_cashier = (temcomm));
                                        //reduce from exe
                                        _exeRed.Add(new Tuple<string, decimal>(_emp.Emp_code, temcomm));
                                    }
                                }
                                if (_det.Saec_extract_from == "Ch-Head Basis")
                                {
                                    foreach (PostCommissionEmployee _emp in _chHeadList)
                                    {
                                        List<EliteCommission> comm = (from _res in _commissionList
                                                                      where _res.Saec_emp_code == _emp.Emp_code
                                                                      select _res).ToList<EliteCommission>();
                                        decimal _comm = 0;
                                        decimal temcomm = 0;
                                        try
                                        {
                                            _comm = comm[0].Saec_comm;
                                        }
                                        catch { _comm = 0; }
                                        if (_det.Saec_rate > 0)
                                        {
                                            temcomm = (_det.Saec_rate * _comm) / 100;
                                            cashireComm = cashireComm + (_det.Saec_rate * _comm) / 100;
                                        }
                                        else
                                        {
                                            temcomm = _det.Saec_value;
                                            cashireComm = cashireComm + _det.Saec_value;
                                        }
                                        //add cashier comm
                                        (from _res in _commissionList
                                         where _res.Saec_emp_code == _emp.Emp_code
                                         select _res).ToList().ForEach(x => x.Saec_cashier = (temcomm));
                                        //reduce from chhead
                                        _chRed.Add(new Tuple<string, decimal>(_emp.Emp_code, temcomm));
                                    }
                                }
                            }
                            _commission.Saec_comm = cashireComm / _casList.Count;
                            _commissionList.Add(_commission);
                        }
                        /*
                        foreach (Tuple<string ,decimal> tu in _mgrRed)
                        {

                            (from _res in _commissionList
                             where _res.Saec_emp_code == tu.Item1
                             select _res).ToList().ForEach(x => x.Saec_comm = (x.Saec_comm - tu.Item2));
                        }
                         * foreach (Tuple<string, decimal> tu in _exeRed)
                        {

                            (from _res in _commissionList
                             where _res.Saec_emp_code == tu.Item1
                             select _res).ToList().ForEach(x => x.Saec_comm = (x.Saec_comm - tu.Item2));
                        }
                        foreach (Tuple<string, decimal> tu in _chRed)
                        {

                            (from _res in _commissionList
                             where _res.Saec_emp_code == tu.Item1
                             select _res).ToList().ForEach(x => x.Saec_comm = (x.Saec_comm - tu.Item2));
                        }
                         */
                    }
                    #endregion

                    #region HELPER
                    //HELPER
                    List<EliteCommissionDetail> _helperComm = (from _res in _tem
                                                               where _res.Saec_emp_type == "HELPER" && _res.Saec_type != "OT"
                                                               select _res).ToList<EliteCommissionDetail>();
                    decimal totalHelper = 0;
                    if (_helperComm != null && _helperComm.Count > 0)
                    {
                        List<Tuple<string, decimal>> _mgrRed = new List<Tuple<string, decimal>>();
                        List<Tuple<string, decimal>> _exeRed = new List<Tuple<string, decimal>>();
                        List<Tuple<string, decimal>> _chRed = new List<Tuple<string, decimal>>();
                        foreach (PostCommissionEmployee _helper in _helList)
                        {
                            EliteCommission _commission = new EliteCommission();
                            EliteCommissionSlab _salb = new EliteCommissionSlab();
                            _commission.Saec_com = _com;
                            _commission.Saec_pc = _pc;
                            _commission.Saec_emp_code = _helper.Emp_code;
                            _commission.Saec_emp_epf = _helper.Emp_epf;
                            _commission.Saec_emp_type = "HELPER";
                            _commission.Saec_cre_by = creby;
                            _commission.Saec_cre_dt = credt;
                            _commission.Saec_price = 0;
                            _commission.Saec_rtn = 0;
                            _commission.Saec_vat = 0;
                            _commission.Saec_dis = 0;
                            _commission.Saec_net = 0;
                            _commission.Saec_year = year;
                            _commission.Saec_month = month;

                            _commission.Saec_from = _from;
                            _commission.Saec_to = _to;

                            //Manager Basis
                            //Executive Basis
                            //Ch-Head Basis 


                            decimal helperComm = 0;
                            foreach (EliteCommissionDetail _det in _helperComm)
                            {
                                if (_det.Saec_extract_from == "Manager Basis")
                                {
                                    foreach (PostCommissionEmployee _emp in _mgrList)
                                    {
                                        List<EliteCommission> comm = (from _res in _commissionList
                                                                      where _res.Saec_emp_code == _emp.Emp_code
                                                                      select _res).ToList<EliteCommission>();
                                        decimal _comm = 0;
                                        decimal temcomm = 0;
                                        try
                                        {
                                            _comm = comm[0].Saec_comm;
                                        }
                                        catch { _comm = 0; }
                                        if (_det.Saec_rate > 0)
                                        {
                                            temcomm = (_det.Saec_rate * _comm) / 100;
                                            helperComm = helperComm + (_det.Saec_rate * _comm) / 100;
                                        }
                                        else
                                        {
                                            temcomm = _det.Saec_value;
                                            helperComm = helperComm + _det.Saec_value;
                                        }
                                        //add cashier comm
                                        (from _res in _commissionList
                                         where _res.Saec_emp_code == _emp.Emp_code
                                         select _res).ToList().ForEach(x => x.Saec_helper = (temcomm));
                                        _mgrRed.Add(new Tuple<string, decimal>(_emp.Emp_code, temcomm));
                                    }
                                }
                                if (_det.Saec_extract_from == "Executive Basis")
                                {
                                    foreach (PostCommissionEmployee _emp in _exeList)
                                    {
                                        List<EliteCommission> comm = (from _res in _commissionList
                                                                      where _res.Saec_emp_code == _emp.Emp_code
                                                                      select _res).ToList<EliteCommission>();
                                        decimal _comm = 0;
                                        decimal temcomm = 0;
                                        try
                                        {
                                            _comm = comm[0].Saec_comm;
                                        }
                                        catch { _comm = 0; }
                                        if (_det.Saec_rate > 0)
                                        {
                                            temcomm = (_det.Saec_rate * _comm) / 100;
                                            helperComm = helperComm + (_det.Saec_rate * _comm) / 100;
                                        }
                                        else
                                        {
                                            temcomm = _det.Saec_value;
                                            helperComm = helperComm + _det.Saec_value;
                                        }
                                        //add cashier comm
                                        (from _res in _commissionList
                                         where _res.Saec_emp_code == _emp.Emp_code
                                         select _res).ToList().ForEach(x => x.Saec_helper = (temcomm));
                                        //reduce from exe
                                        _exeRed.Add(new Tuple<string, decimal>(_emp.Emp_code, temcomm));
                                    }
                                }
                                if (_det.Saec_extract_from == "Ch-Head Basis")
                                {
                                    foreach (PostCommissionEmployee _emp in _chHeadList)
                                    {
                                        List<EliteCommission> comm = (from _res in _commissionList
                                                                      where _res.Saec_emp_code == _emp.Emp_code
                                                                      select _res).ToList<EliteCommission>();
                                        decimal _comm = 0;
                                        decimal temcomm = 0;
                                        try
                                        {
                                            _comm = comm[0].Saec_comm;
                                        }
                                        catch { _comm = 0; }
                                        if (_det.Saec_rate > 0)
                                        {
                                            temcomm = (_det.Saec_rate * _comm) / 100;
                                            helperComm = helperComm + (_det.Saec_rate * _comm) / 100;
                                        }
                                        else
                                        {
                                            temcomm = _det.Saec_value;
                                            helperComm = helperComm + _det.Saec_value;
                                        }
                                        //add cashier comm
                                        (from _res in _commissionList
                                         where _res.Saec_emp_code == _emp.Emp_code
                                         select _res).ToList().ForEach(x => x.Saec_helper = (temcomm));
                                        //reduce from chhead
                                        _chRed.Add(new Tuple<string, decimal>(_emp.Emp_code, temcomm));
                                    }
                                }
                            }

                            //add helper record
                            _commission.Saec_comm = helperComm / _helList.Count;
                            _commissionList.Add(_commission);
                        }

                        /*
                        foreach (Tuple<string, decimal> tu in _mgrRed)
                        {

                            (from _res in _commissionList
                             where _res.Saec_emp_code == tu.Item1
                             select _res).ToList().ForEach(x => x.Saec_comm = (x.Saec_comm - tu.Item2));
                        }
                        foreach (Tuple<string, decimal> tu in _exeRed)
                        {

                            (from _res in _commissionList
                             where _res.Saec_emp_code == tu.Item1
                             select _res).ToList().ForEach(x => x.Saec_comm = (x.Saec_comm - tu.Item2));
                        }
                        foreach (Tuple<string, decimal> tu in _chRed)
                        {

                            (from _res in _commissionList
                             where _res.Saec_emp_code == tu.Item1
                             select _res).ToList().ForEach(x => x.Saec_comm = (x.Saec_comm - tu.Item2));
                        }
                         */
                    }
                    #endregion

                    #region OTHER
                    //other Employee categories
                    List<EliteCommissionDetail> _otherComm = (from _res in _tem
                                                              where _res.Saec_type == "OT"
                                                              select _res).ToList<EliteCommissionDetail>();
                    if (_otherComm != null && _otherComm.Count > 0)
                    {
                        //get distinct emp types
                        List<EliteCommissionDetail> _distinctEmpTypes = _otherComm.GroupBy(x => x.Saec_emp_type).Select(x => x.First()).ToList<EliteCommissionDetail>();
                        foreach (EliteCommissionDetail _emp in _distinctEmpTypes)
                        {

                            List<EliteCommissionDetail> _empComList = (from _res in _tem
                                                                       where _res.Saec_type == "OT" && _res.Saec_emp_type == _emp.Saec_emp_type
                                                                       select _res).ToList<EliteCommissionDetail>();

                            //value based
                            if (_empComList.Count > 1)
                            {
                                _empComList = (from _res in _empComList
                                               orderby _res.Saec_line_no descending
                                               select _res).ToList<EliteCommissionDetail>();
                                //get total amount
                                List<EliteCommissionInvoice> _DO = new List<EliteCommissionInvoice>();
                                List<EliteCommissionInvoice> _SRN = new List<EliteCommissionInvoice>();
                                if (_emp.Saec_emp_type == "SRMGR")
                                {
                                    #region MGR
                                    foreach (PostCommissionEmployee _mgr in _mgrList)
                                    {
                                        decimal commission = 0;
                                        _DO = (from _res in _doList
                                               //where _res.Mge_code == _mgr.Emp_epf
                                               orderby _res.Invoice_no
                                               select _res).ToList<EliteCommissionInvoice>();
                                        _SRN = (from _res in _srnList
                                                //where _res.Mge_code == _mgr.Emp_epf
                                                select _res).ToList<EliteCommissionInvoice>();


                                        foreach (EliteCommissionInvoice inv in _DO)
                                        {
                                            FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                            _inv.Saec_pc = _pc;
                                            _inv.Saec_discount = inv.Discount;
                                            _inv.Saec_vat = inv.Vat;
                                            _inv.Saec_price = inv.Value;
                                            _inv.Saec_is_rev = false;
                                            _inv.Saec_inv_no = inv.Invoice_no;
                                            _inv.Saec_emp_type = "SRMGR";
                                            _inv.Saec_emp_epf = _mgr.Emp_epf;
                                            _inv.Saec_emp_code = _mgr.Emp_code;
                                            _invoiceList.Add(_inv);
                                        }

                                        foreach (EliteCommissionInvoice inv in _SRN)
                                        {
                                            FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                            _inv.Saec_pc = _pc;
                                            _inv.Saec_discount = inv.Discount;
                                            _inv.Saec_vat = inv.Vat;
                                            _inv.Saec_price = inv.Value;
                                            _inv.Saec_is_rev = true;
                                            _inv.Saec_emp_type = _empComList[0].Saec_emp_type;
                                            _inv.Saec_inv_no = inv.Invoice_no;
                                            _inv.Saec_emp_epf = _mgr.Emp_epf;
                                            _inv.Saec_emp_code = _mgr.Emp_code;
                                            _invoiceList.Add(_inv);
                                        }
                                        decimal totalPrice = _DO.Sum(x => x.Value);
                                        decimal totalVat = _DO.Sum(x => x.Vat);
                                        decimal totalDisc = _DO.Sum(x => x.Discount);
                                        decimal totalPlus = totalPrice - totalDisc;


                                        decimal totalMPrice = _SRN.Sum(x => x.Value);
                                        decimal totalMVat = _SRN.Sum(x => x.Vat);
                                        decimal totalMDisc = _SRN.Sum(x => x.Discount);
                                        decimal totalMinus = totalMPrice - totalMDisc;

                                        decimal total = totalPlus - totalMinus;

                                        foreach (EliteCommissionDetail _det in _empComList)
                                        {
                                            if (_det.Saec_value == 0)
                                            {
                                                if (_det.Saec_from <= total)
                                                {
                                                    commission = total * _det.Saec_rate / 100;
                                                    goto END;
                                                }
                                            }
                                            else
                                            {
                                                if (_det.Saec_from <= total)
                                                {
                                                    commission = _det.Saec_value;
                                                    goto END;
                                                }
                                            }
                                        }

                                    END:
                                        EliteCommission _commission = new EliteCommission();
                                        _commission.Saec_com = _com;
                                        _commission.Saec_pc = _pc;
                                        _commission.Saec_emp_code = _mgr.Emp_code;
                                        _commission.Saec_emp_type = "SRMGR";
                                        _commission.Saec_cre_by = creby;
                                        _commission.Saec_cre_dt = credt;
                                        _commission.Saec_price = totalPrice;
                                        _commission.Saec_rtn = totalMinus;
                                        _commission.Saec_vat = totalVat;
                                        _commission.Saec_dis = totalDisc;
                                        _commission.Saec_net = totalPlus - totalMinus;
                                        _commission.Saec_gross = totalPlus;
                                        _commission.Saec_year = year;
                                        _commission.Saec_month = month;
                                        _commission.Saec_comm = commission;
                                        _commissionList.Add(_commission);

                                    }
                                    #endregion
                                }
                                else
                                {
                                    #region OTHER
                                    DataTable _empTbl = _salesDAL.GetPcEmployee(_com, _pc, _empComList[0].Saec_emp_type);
                                    //insert into list
                                    List<PostCommissionEmployee> _othEmpList = new List<PostCommissionEmployee>();

                                    foreach (DataRow dr in _mgrTbl.Rows)
                                    {
                                        if (Convert.ToInt32(dr["mpce_act"].ToString()) == 1)
                                        {
                                            PostCommissionEmployee _othEmp = new PostCommissionEmployee();
                                            _othEmp.Emp_code = dr["esep_cd"].ToString();
                                            _othEmp.Emp_epf = dr["esep_epf"].ToString();
                                            _othEmpList.Add(_othEmp);
                                        }
                                    }

                                    foreach (PostCommissionEmployee _othEmp in _othEmpList)
                                    {
                                        decimal commission = 0;
                                        _DO = (from _res in _doList
                                               where _res.Exe_code == _othEmp.Emp_epf
                                               orderby _res.Invoice_no
                                               select _res).ToList<EliteCommissionInvoice>();
                                        _SRN = (from _res in _srnList
                                                where _res.Exe_code == _othEmp.Emp_epf
                                                select _res).ToList<EliteCommissionInvoice>();


                                        decimal totalPrice = _DO.Sum(x => x.Value);
                                        decimal totalVat = _DO.Sum(x => x.Vat);
                                        decimal totalDisc = _DO.Sum(x => x.Discount);
                                        decimal totalPlus = totalPrice - totalDisc;


                                        decimal totalMPrice = _SRN.Sum(x => x.Value);
                                        decimal totalMVat = _SRN.Sum(x => x.Vat);
                                        decimal totalMDisc = _SRN.Sum(x => x.Discount);
                                        decimal totalMinus = totalMPrice - totalMDisc;

                                        decimal total = totalPlus - totalMinus;

                                        foreach (EliteCommissionDetail _det in _empComList)
                                        {
                                            if (_det.Saec_value == 0)
                                            {
                                                if (_det.Saec_from <= total)
                                                {
                                                    commission = total * _det.Saec_rate / 100;
                                                    goto END;
                                                }
                                            }
                                            else
                                            {
                                                if (_det.Saec_from <= total)
                                                {
                                                    commission = _det.Saec_value;
                                                    goto END;
                                                }
                                            }
                                        }

                                    END:
                                        EliteCommission _commission = new EliteCommission();
                                        _commission.Saec_com = _com;
                                        _commission.Saec_pc = _pc;
                                        _commission.Saec_emp_code = _othEmp.Emp_epf;
                                        _commission.Saec_emp_type = _empComList[0].Saec_emp_type;
                                        _commission.Saec_cre_by = creby;
                                        _commission.Saec_cre_dt = credt;
                                        _commission.Saec_price = totalPrice;
                                        _commission.Saec_rtn = totalMinus;
                                        _commission.Saec_vat = totalVat;
                                        _commission.Saec_dis = totalDisc;
                                        _commission.Saec_net = totalPlus - totalMinus;
                                        _commission.Saec_gross = totalPlus;
                                        _commission.Saec_year = year;
                                        _commission.Saec_month = month;
                                        _commission.Saec_comm = commission;
                                        _commissionList.Add(_commission);
                                    }
                                    #endregion
                                }
                            }
                            //invoice based
                            else
                            {
                                if (_empComList[0].Saec_rate != 0)
                                {
                                    #region RATE
                                    //add commission value for each invoice based on invoice amount
                                    if (_emp.Saec_emp_type == "SRMGR")
                                    {
                                        decimal commission = 0;
                                        foreach (PostCommissionEmployee _mgr in _mgrList)
                                        {

                                            List<EliteCommissionInvoice> _mgrDO = (from _res in _doList
                                                                                   //where _res.Mge_code == _mgr.Emp_epf
                                                                                   orderby _res.Invoice_no
                                                                                   select _res
                                                                                   ).ToList<EliteCommissionInvoice>();
                                            //save do list
                                            foreach (EliteCommissionInvoice inv in _mgrDO)
                                            {
                                                FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                                _inv.Saec_pc = _pc;
                                                _inv.Saec_discount = inv.Discount;
                                                _inv.Saec_vat = inv.Vat;
                                                _inv.Saec_price = inv.Value;
                                                _inv.Saec_is_rev = false;
                                                _inv.Saec_inv_no = inv.Invoice_no;
                                                _inv.Saec_emp_type = "SRMGR";
                                                _inv.Saec_emp_epf = _mgr.Emp_epf;
                                                _inv.Saec_emp_code = _mgr.Emp_code;
                                                _invoiceList.Add(_inv);
                                            }

                                            List<EliteCommissionInvoice> _mgrSRN = (from _res in _srnList
                                                                                    //where _res.Mge_code == _mgr.Emp_epf
                                                                                    select _res).ToList<EliteCommissionInvoice>();
                                            foreach (EliteCommissionInvoice inv in _mgrSRN)
                                            {
                                                FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                                _inv.Saec_pc = _pc;
                                                _inv.Saec_discount = inv.Discount;
                                                _inv.Saec_vat = inv.Vat;
                                                _inv.Saec_price = inv.Value;
                                                _inv.Saec_is_rev = true;
                                                _inv.Saec_emp_type = "SRMGR";
                                                _inv.Saec_inv_no = inv.Invoice_no;
                                                _inv.Saec_emp_epf = _mgr.Emp_epf;
                                                _inv.Saec_emp_code = _mgr.Emp_code;
                                                _invoiceList.Add(_inv);
                                            }
                                            decimal totalPrice = _mgrDO.Sum(x => x.Value);
                                            decimal totalVat = _mgrDO.Sum(x => x.Vat);
                                            decimal totalDisc = _mgrDO.Sum(x => x.Discount);
                                            decimal totalPlus = totalPrice - totalDisc;


                                            decimal totalMPrice = _mgrSRN.Sum(x => x.Value);
                                            decimal totalMVat = _mgrSRN.Sum(x => x.Vat);
                                            decimal totalMDisc = _mgrSRN.Sum(x => x.Discount);
                                            decimal totalMinus = totalMPrice - totalMDisc;
                                            commission = (totalPlus - totalMinus) * _empComList[0].Saec_rate;
                                            EliteCommission _commission = new EliteCommission();
                                            _commission.Saec_com = _com;
                                            _commission.Saec_pc = _pc;
                                            _commission.Saec_emp_code = _mgr.Emp_code;
                                            _commission.Saec_emp_type = "SRMGR";
                                            _commission.Saec_cre_by = creby;
                                            _commission.Saec_cre_dt = credt;
                                            _commission.Saec_price = totalPrice;
                                            _commission.Saec_rtn = totalMinus;
                                            _commission.Saec_vat = totalVat;
                                            _commission.Saec_dis = totalDisc;
                                            _commission.Saec_net = totalPlus - totalMinus;
                                            _commission.Saec_gross = totalPlus;
                                            _commission.Saec_year = year;
                                            _commission.Saec_month = month;
                                            _commission.Saec_comm = commission;
                                            _commissionList.Add(_commission);
                                        }

                                    }
                                    //other type 
                                    else
                                    {
                                        //get employees
                                        //get employees
                                        DataTable _empTbl = _salesDAL.GetPcEmployee(_com, _pc, _empComList[0].Saec_emp_type);
                                        //insert into list
                                        List<PostCommissionEmployee> _othEmpList = new List<PostCommissionEmployee>();

                                        foreach (DataRow dr in _mgrTbl.Rows)
                                        {
                                            if (Convert.ToInt32(dr["mpce_act"].ToString()) == 1)
                                            {
                                                PostCommissionEmployee _othEmp = new PostCommissionEmployee();
                                                _othEmp.Emp_code = dr["esep_cd"].ToString();
                                                _othEmp.Emp_epf = dr["esep_epf"].ToString();
                                                _othEmpList.Add(_othEmp);
                                            }
                                        }

                                        foreach (PostCommissionEmployee _othEmp in _othEmpList)
                                        {
                                            decimal commission;
                                            List<EliteCommissionInvoice> _DO = (from _res in _doList
                                                                                where _res.Exe_code == _othEmp.Emp_epf
                                                                                orderby _res.Invoice_no
                                                                                select _res
                                                                                       ).ToList<EliteCommissionInvoice>();
                                            //save do list
                                            foreach (EliteCommissionInvoice inv in _DO)
                                            {
                                                FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                                _inv.Saec_pc = _pc;
                                                _inv.Saec_discount = inv.Discount;
                                                _inv.Saec_vat = inv.Vat;
                                                _inv.Saec_price = inv.Value;
                                                _inv.Saec_is_rev = false;
                                                _inv.Saec_inv_no = inv.Invoice_no;
                                                _inv.Saec_emp_type = _empComList[0].Saec_emp_type;
                                                _inv.Saec_emp_epf = _othEmp.Emp_epf;
                                                _inv.Saec_emp_code = _othEmp.Emp_code;
                                                _invoiceList.Add(_inv);
                                            }

                                            List<EliteCommissionInvoice> _SRN = (from _res in _srnList
                                                                                 where _res.Exe_code == _othEmp.Emp_epf
                                                                                 select _res).ToList<EliteCommissionInvoice>();
                                            foreach (EliteCommissionInvoice inv in _SRN)
                                            {
                                                FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                                _inv.Saec_pc = _pc;
                                                _inv.Saec_discount = inv.Discount;
                                                _inv.Saec_vat = inv.Vat;
                                                _inv.Saec_price = inv.Value;
                                                _inv.Saec_is_rev = true;
                                                _inv.Saec_emp_type = _empComList[0].Saec_emp_type;
                                                _inv.Saec_inv_no = inv.Invoice_no;
                                                _inv.Saec_emp_epf = _othEmp.Emp_epf;
                                                _inv.Saec_emp_code = _othEmp.Emp_code;
                                                _invoiceList.Add(_inv);
                                            }
                                            decimal totalPrice = _DO.Sum(x => x.Value);
                                            decimal totalVat = _DO.Sum(x => x.Vat);
                                            decimal totalDisc = _DO.Sum(x => x.Discount);
                                            decimal totalPlus = totalPrice - totalDisc;


                                            decimal totalMPrice = _SRN.Sum(x => x.Value);
                                            decimal totalMVat = _SRN.Sum(x => x.Vat);
                                            decimal totalMDisc = _SRN.Sum(x => x.Discount);
                                            decimal totalMinus = totalMPrice - totalMDisc;
                                            commission = (totalPlus - totalMinus) * _empComList[0].Saec_value;
                                            EliteCommission _commission = new EliteCommission();
                                            _commission.Saec_com = _com;
                                            _commission.Saec_pc = _pc;
                                            _commission.Saec_emp_code = _othEmp.Emp_code;
                                            _commission.Saec_emp_type = _empComList[0].Saec_emp_type;
                                            _commission.Saec_cre_by = creby;
                                            _commission.Saec_cre_dt = credt;
                                            _commission.Saec_price = totalPrice;
                                            _commission.Saec_rtn = totalMinus;
                                            _commission.Saec_vat = totalVat;
                                            _commission.Saec_dis = totalDisc;
                                            _commission.Saec_net = totalPlus - totalMinus;
                                            _commission.Saec_gross = totalPlus;
                                            _commission.Saec_year = year;
                                            _commission.Saec_month = month;
                                            _commission.Saec_comm = commission;
                                            _commissionList.Add(_commission);

                                        }

                                    }
                                    #endregion
                                }
                                else
                                {
                                    #region VALUE
                                    //add commission amount for each invoice
                                    //if mgr
                                    if (_emp.Saec_emp_type == "SRMGR")
                                    {
                                        decimal commission = 0;
                                        foreach (PostCommissionEmployee _mgr in _mgrList)
                                        {

                                            List<EliteCommissionInvoice> _mgrDO = (from _res in _doList
                                                                                   //where _res.Mge_code == _mgr.Emp_epf
                                                                                   orderby _res.Invoice_no
                                                                                   select _res
                                                                                   ).ToList<EliteCommissionInvoice>();
                                            //save do list
                                            foreach (EliteCommissionInvoice inv in _mgrDO)
                                            {
                                                FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                                _inv.Saec_pc = _pc;
                                                _inv.Saec_discount = inv.Discount;
                                                _inv.Saec_vat = inv.Vat;
                                                _inv.Saec_price = inv.Value;
                                                _inv.Saec_is_rev = false;
                                                _inv.Saec_inv_no = inv.Invoice_no;
                                                _inv.Saec_emp_type = "SRMGR";
                                                _inv.Saec_emp_epf = _mgr.Emp_epf;
                                                _inv.Saec_emp_code = _mgr.Emp_code;
                                                _invoiceList.Add(_inv);
                                            }

                                            List<EliteCommissionInvoice> _mgrSRN = (from _res in _srnList
                                                                                    //where _res.Mge_code == _mgr.Emp_epf
                                                                                    select _res).ToList<EliteCommissionInvoice>();
                                            foreach (EliteCommissionInvoice inv in _mgrSRN)
                                            {
                                                FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                                _inv.Saec_pc = _pc;
                                                _inv.Saec_discount = inv.Discount;
                                                _inv.Saec_vat = inv.Vat;
                                                _inv.Saec_price = inv.Value;
                                                _inv.Saec_is_rev = true;
                                                _inv.Saec_emp_type = "SRMGR";
                                                _inv.Saec_inv_no = inv.Invoice_no;
                                                _inv.Saec_emp_epf = _mgr.Emp_epf;
                                                _inv.Saec_emp_code = _mgr.Emp_code;
                                                _invoiceList.Add(_inv);
                                            }
                                            commission = (_doList.Count - _srnList.Count) * _empComList[0].Saec_value;
                                            EliteCommission _commission = new EliteCommission();
                                            _commission.Saec_com = _com;
                                            _commission.Saec_pc = _pc;
                                            _commission.Saec_emp_code = _mgr.Emp_code;
                                            _commission.Saec_emp_type = "SRMGR";
                                            _commission.Saec_cre_by = creby;
                                            _commission.Saec_cre_dt = credt;
                                            _commission.Saec_price = 0;
                                            _commission.Saec_rtn = 0;
                                            _commission.Saec_vat = 0;
                                            _commission.Saec_dis = 0;
                                            _commission.Saec_net = 0;
                                            _commission.Saec_gross = 0;
                                            _commission.Saec_year = year;
                                            _commission.Saec_month = month;
                                            _commission.Saec_comm = commission;
                                            _commissionList.Add(_commission);
                                        }

                                    }
                                    //other type 
                                    else
                                    {
                                        //get employees
                                        DataTable _empTbl = _salesDAL.GetPcEmployee(_com, _pc, _empComList[0].Saec_emp_type);
                                        //insert into list
                                        List<PostCommissionEmployee> _othEmpList = new List<PostCommissionEmployee>();

                                        foreach (DataRow dr in _mgrTbl.Rows)
                                        {
                                            if (Convert.ToInt32(dr["mpce_act"].ToString()) == 1)
                                            {
                                                PostCommissionEmployee _othEmp = new PostCommissionEmployee();
                                                _othEmp.Emp_code = dr["esep_cd"].ToString();
                                                _othEmp.Emp_epf = dr["esep_epf"].ToString();
                                                _othEmpList.Add(_othEmp);
                                            }
                                        }

                                        foreach (PostCommissionEmployee _othEmp in _othEmpList)
                                        {
                                            decimal commission;
                                            List<EliteCommissionInvoice> _DO = (from _res in _doList
                                                                                where _res.Exe_code == _othEmp.Emp_epf
                                                                                orderby _res.Invoice_no
                                                                                select _res
                                                                                       ).ToList<EliteCommissionInvoice>();
                                            //save do list
                                            foreach (EliteCommissionInvoice inv in _DO)
                                            {
                                                FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                                _inv.Saec_pc = _pc;
                                                _inv.Saec_discount = inv.Discount;
                                                _inv.Saec_vat = inv.Vat;
                                                _inv.Saec_price = inv.Value;
                                                _inv.Saec_is_rev = false;
                                                _inv.Saec_inv_no = inv.Invoice_no;
                                                _inv.Saec_emp_type = _empComList[0].Saec_emp_type;
                                                _inv.Saec_emp_epf = _othEmp.Emp_epf;
                                                _inv.Saec_emp_code = _othEmp.Emp_code;
                                                _invoiceList.Add(_inv);
                                            }

                                            List<EliteCommissionInvoice> _SRN = (from _res in _srnList
                                                                                 where _res.Exe_code == _othEmp.Emp_epf
                                                                                 select _res).ToList<EliteCommissionInvoice>();
                                            foreach (EliteCommissionInvoice inv in _SRN)
                                            {
                                                FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                                _inv.Saec_pc = _pc;
                                                _inv.Saec_discount = inv.Discount;
                                                _inv.Saec_vat = inv.Vat;
                                                _inv.Saec_price = inv.Value;
                                                _inv.Saec_is_rev = true;
                                                _inv.Saec_emp_type = _empComList[0].Saec_emp_type;
                                                _inv.Saec_inv_no = inv.Invoice_no;
                                                _inv.Saec_emp_epf = _othEmp.Emp_epf;
                                                _inv.Saec_emp_code = _othEmp.Emp_code;
                                                _invoiceList.Add(_inv);
                                            }
                                            commission = (_DO.Count - _SRN.Count) * _empComList[0].Saec_value;
                                            EliteCommission _commission = new EliteCommission();
                                            _commission.Saec_com = _com;
                                            _commission.Saec_pc = _pc;
                                            _commission.Saec_emp_code = _othEmp.Emp_code;
                                            _commission.Saec_emp_type = _empComList[0].Saec_emp_type;
                                            _commission.Saec_cre_by = creby;
                                            _commission.Saec_cre_dt = credt;
                                            _commission.Saec_price = 0;
                                            _commission.Saec_rtn = 0;
                                            _commission.Saec_vat = 0;
                                            _commission.Saec_dis = 0;
                                            _commission.Saec_net = 0;
                                            _commission.Saec_gross = 0;
                                            _commission.Saec_year = year;
                                            _commission.Saec_month = month;
                                            _commission.Saec_comm = commission;
                                            _commissionList.Add(_commission);

                                        }

                                    }
                                    #endregion
                                }
                            }

                        }

                    }
                    #endregion

                    if (!isErrorProcess)
                    {
                        List<EliteCommission> _err = new List<EliteCommission>();

                        //check for error
                        foreach (EliteCommission _comm in _commissionList)
                        {
                            if (_comm.Saec_comm < 0)
                            {
                                _err.Add(_comm);
                            }
                        }
                        if (_err.Count > 0)
                        {
                            _errlist = _err;
                            _generalDAL.TransactionCommit();
                            _salesDAL.TransactionCommit();
                            //     _inventoryDAL.TransactionCommit();
                            err = "";
                            return 1;
                        }
                        else
                        {
                            _salesDAL.DeleteEliteCommission(_pc, year, month);
                            foreach (EliteCommission _comm in _commissionList)
                            {
                                _comm.Saec_circular = _definition.Saec_circ;
                                _salesDAL.SaveEliteCommission(_comm);
                            }
                            foreach (EliteCommissionSlab _slab in _commissionDetList)
                            {
                                _slab.Saec_circular = _definition.Saec_circ;
                                _salesDAL.SaveEliteCommissionSlab(_slab);
                            }
                            _salesDAL.DeleteEliteInvoice(_pc, year, month);
                            foreach (FF.BusinessObjects.EliteCommissionInvoice _inv in _invoiceList)
                            {
                                _inv.Saec_circular = _definition.Saec_circ;
                                _inv.Saec_month = month;
                                _inv.Saec_year = year;
                                _salesDAL.SaveEliteCommissionInvoices(_inv);
                            }
                        }
                    }

                    else
                    {
                        _salesDAL.DeleteEliteCommission(_definition.Saec_circ, year, month);
                        foreach (EliteCommission _comm in _commissionList)
                        {
                            _comm.Saec_circular = _definition.Saec_circ;
                            _salesDAL.SaveEliteCommission(_comm);
                        }
                        foreach (EliteCommissionSlab _slab in _commissionDetList)
                        {
                            _slab.Saec_circular = _definition.Saec_circ;
                            _salesDAL.SaveEliteCommissionSlab(_slab);
                        }
                        _salesDAL.DeleteEliteInvoice(_definition.Saec_circ, year, month);
                        foreach (FF.BusinessObjects.EliteCommissionInvoice _inv in _invoiceList)
                        {
                            _inv.Saec_circular = _definition.Saec_circ;
                            _inv.Saec_month = month;
                            _inv.Saec_year = year;
                            _salesDAL.SaveEliteCommissionInvoices(_inv);
                        }
                    }
                }
                _errlist = null;
                _generalDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                //    _inventoryDAL.TransactionCommit();
                err = "";
                //_generalDAL.ConnectionClose();
                //_salesDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                //tr.Complete();
            }
            catch (Exception ex)
            {
                _errlist = null;
                err = ex.Message;
                _generalDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                //  _inventoryDAL.TransactionRollback();
            }
            return 1;
        }

        public List<CashPromotionDiscountDetail> GetPromotionalDiscount(DateTime _date, int _time, string _day, string _book, string _level, string _item, string _company, string _profitcenter, int _isPromotion, int _isSuperUser)
        {
            // public DataTable GetPromotionalDiscount(DateTime _date,int _time,string _day,string _book,string _level,string _item,string _company,string _partycd,string _partytp,int _isSerialized,int _isPromotion)
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            List<MasterSalesPriorityHierarchy> _hierarchy = _salesDAL.GetSalesPriorityHierarchy(_company, _profitcenter, "PC_PRIT_HIERARCHY", "PC");
            if (_hierarchy != null && _hierarchy.Count > 0) _hierarchy = _hierarchy.Where(x => x.Mpi_cd == "PC" || x.Mpi_cd == "CHNL" || x.Mpi_cd == "SCHNL").ToList();


            Int32 _isserialized = Convert.ToInt16(_salesDAL.GetPriceLevel(_company, _book, _level).Sapl_is_serialized);
            Int32 _ispromotion = _isPromotion;
            List<CashPromotionDiscountDetail> _List = new List<CashPromotionDiscountDetail>();

            if (_hierarchy != null && _hierarchy.Count > 0)
            {
                foreach (MasterSalesPriorityHierarchy _one in _hierarchy)
                {
                    string _type = _one.Mpi_cd;
                    string _value = _one.Mpi_val;
                    List<CashPromotionDiscountDetail> _List0 = _salesDAL.GetPromotionalDiscount(_date, _time, _day, _book, _level, _item, _company, _value, _type, _isserialized, _isPromotion, _isSuperUser);
                    if (_List0 != null && _List0.Count > 0)
                        _List.AddRange(_List0);


                }
            }

            return _List;

        }

        public RecieptHeader GetAcJobReciept(string _jobno, string _com, string _pc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAcJobReciept(_jobno, _com, _pc);

        }

        public List<HpAccount> GetHPAccount(string _company, string _profitcenter, int _seqno, string _status)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHPAccount(_company, _profitcenter, _seqno, _status);
        }
        public Int32 AmendPromotion(string _promoCd, string _usr, DateTime _newDt, string _session, List<PriceDetailRef> _priceList, List<PriceCombinedItemRef> _priceComList, MasterAutoNumber _auto, out string _err, string _pb, string _plevel, string _circular, List<string> lstPromoI)
        {
            Int32 _effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();

                List<PriceDetailRef> _tmpList = new List<PriceDetailRef>();
                //_tmpList = _salesDAL.GetPriceDetailsFromPromo(_promoCd);

                //foreach (PriceDetailRef _rec in _tmpList)
                //{
                //    LogPriceDef _log = new LogPriceDef();
                //    _log.Log_dt = _rec.Sapd_from_date;
                //    _log.Log_rmk = "Change valid date";
                //    _log.Log_session = _session;
                //    _log.Log_usr = _usr;
                //    _log.Promo_cd = _rec.Sapd_promo_cd;
                //    _log.Pb = _rec.Sapd_pb_tp_cd;
                //    _log.To_dt = _rec.Sapd_to_date;
                //    _log.Cir_no = _rec.Sapd_circular_no;
                //    _salesDAL.SavePriceingLog(_log);
                //}

                //if PriceDetailRef.Sapd_ser_upload=5 new MAIN ITEM
                // PriceCombinedItemRef.Sapc_increse=true new SUB ITEM
                List<int> _inserPbSeq = new List<int>();
                foreach (PriceDetailRef _price in _priceList)
                {
                    if (_price.Sapd_ser_upload == 6)
                    {

                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year).Aut_number;
                        string _documentNo = _auto.Aut_cate_cd + _auto.Aut_start_char + string.Format("{0:0000}", _autoNo);
                        int _seqNo = _inventoryDAL.GetSerialID();
                        int _tmppbSeq = _price.Sapd_pb_seq;
                        _price.Sapd_ser_upload = 0;
                        _price.Sapd_pb_seq = _seqNo;
                        _price.Sapd_promo_cd = _documentNo;
                        _salesDAL.SavePriceDetails(_price);

                        if (_priceComList != null)
                        {
                            foreach (PriceCombinedItemRef _tmpcomList in _priceComList)
                            {
                                if (_tmpcomList.Sapc_pb_seq == _tmppbSeq)
                                {
                                    if (_tmpcomList.Sapc_sub_ser == "6")
                                    {
                                        _tmpcomList.Sapc_sub_ser = null;
                                        _salesDAL.SavePriceDetailsCom(_tmpcomList);
                                    }
                                    else if (_tmpcomList.Sapc_sub_ser == "5")
                                    {
                                        _tmpcomList.Sapc_sub_ser = null;
                                        _salesDAL.UpdatePriceDefComItem(_tmpcomList);
                                    }
                                    _inserPbSeq.Add(_tmpcomList.Sapc_pb_seq);
                                }
                            }
                        }
                    }
                    else if (_price.Sapd_ser_upload == 5)
                    {
                        _price.Sapd_ser_upload = 0;
                        _salesDAL.UpdatePriceDefMainItem(_price);
                    }
                }


                foreach (PriceCombinedItemRef _com in _priceComList)
                {
                    List<int> tem = (from _re in _inserPbSeq
                                     where Convert.ToInt32(_re) == _com.Sapc_pb_seq
                                     select _re).ToList<int>();
                    if (tem != null && tem.Count > 0)
                    {

                    }
                    else
                    {
                        if (_com.Sapc_sub_ser == "6")
                        {
                            _com.Sapc_sub_ser = null;
                            _salesDAL.SavePriceDetailsCom(_com);
                        }
                        else if (_com.Sapc_sub_ser == "5")
                        {
                            _com.Sapc_sub_ser = null;
                            _salesDAL.UpdatePriceDefComItem(_com);
                        }
                    }
                }

                for (int i = 0; i < lstPromoI.Count; i++)
                {
                    _salesDAL.UpdateExtendPromo(lstPromoI[i], _newDt, _usr, _session, _pb, _plevel, _circular);
                    // Nadeeka
                    _salesDAL.UpdateExtendPromo_subpb(lstPromoI[i], _newDt, _usr, _session, _pb, _plevel, _circular);
                }

                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                //_salesDAL.ConnectionClose();

                _effect = 1;
                _err = "";
            }
            catch (Exception ex)
            {
                _err = ex.Message;
                _effect = 0;
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
            }
            return _effect;
        }

        public InventoryHeader GetWarrDoDate(string _invoice, string _item, string _serial)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetWarrDoDate(_invoice, _item, _serial);
        }

        public List<RecieptHeader> GetAccRecDet(string _company, string _account)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAccRecDet(_company, _account);
        }
        public bool IsForwardSaleExceed(string _company, string _profitcenter)
        {
            _salesDAL = new SalesDAL();
            DataTable _out = _salesDAL.IsForwardSaleExceed(_company, _profitcenter);
            if (_out != null && _out.Rows.Count > 0)
            {
                bool _result = Convert.ToBoolean(_out.Rows[0]["sp_IsMaxFwdSaleExceed"]);
                return _result;
            }
            else return false;
        }
        public List<CashPromotionDiscountHeader> GetPromotionalHeader(string _circular)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPromotionalHeader(_circular);
        }

        public List<sar_pb_def> GetPriceDefHeader(string _circular)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceDefHeader(_circular);
        }

        public List<sar_pb_def_det> GetPriceDefDet(int seq)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceDefDet(seq);
        }

        public List<CashPromotionDiscountDetail> GetPromotinalDiscountDetail(int seq)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPromotinalDiscountDetail(seq);
        }

        public DataTable GetRegInvDet(string _company, string _pc, string _inv)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRegInvDet(_company, _pc, _inv);
        }

        public DataTable GetRegInvItmDet(string _company, string _pc, string _inv, Int32 _invLine, string _itm)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRegInvItmDet(_company, _pc, _inv, _invLine, _itm);
        }
        public DataTable GetRegDCNItmDet(string _company, string _pc, string _qno, string _itm)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRegDCNItmDet(_company, _pc, _qno, _itm);
        }
        public VehicalRegistrationDefnition GetVehRegAmtDirectNew(string _com, string _pc, string _type, string _itm, DateTime _date, string _sch, decimal _qty, decimal _val, string _pb, string _plvl, string _ser)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehRegAmtDirectNew(_com, _pc, _type, _itm, _date, _sch, _qty, _val, _pb, _plvl, _ser);
        }
        public List<CashPromotionDiscountItem> GetPromotinalDiscountItem(int seq)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPromotinalDiscountItem(seq);
        }

        public List<CashPromotionDiscountLocation> GetPromotinalDiscountLoc(int seq)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPromotinalDiscountLoc(seq);
        }

        public int UpdatePromotionalDiscountDefinition(DataTable _itmList, List<string> _locList, int _seq, string _modBy, DateTime _date, string _com)
        {
            try
            {

                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                int effect = 0;

                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                //START ITEM
                //get existing item list
                List<CashPromotionDiscountItem> _existingItem = _salesDAL.GetPromotinalDiscountItem(_seq);
                //add new
                foreach (DataRow _itm in _itmList.Rows)
                {
                    List<CashPromotionDiscountItem> tem = (from _res in _existingItem
                                                           where _res.Spdi_itm == _itm["item"].ToString()
                                                           select _res).ToList<CashPromotionDiscountItem>();



                    if (tem == null || tem.Count <= 0)
                    {
                        //insert
                        List<CashPromotionDiscountDetail> _det = _salesDAL.GetPromotinalDiscountDetail(_seq);
                        if (_det != null && _det.Count > 0)
                        {
                            foreach (CashPromotionDiscountDetail det in _det)
                            {
                                CashPromotionDiscountItem _item = new CashPromotionDiscountItem();
                                _item.Spdi_seq = det.Spdd_seq;
                                _item.Spdi_line = det.Spdd_line;
                                _item.Spdi_itm = _itm["item"].ToString();
                                _item.Spdi_cre_by = _modBy;
                                _item.Spdi_cre_dt = _date;
                                _item.Spdi_act = true;
                                _salesDAL.SavePromotionalDiscountItem(_item);
                            }
                        }
                    }
                    else
                    {
                        if (!tem[0].Spdi_act)
                        {
                            _salesDAL.UpdateCashPromotionalDiscountItem(tem[0].Spdi_seq, _modBy, _date, tem[0].Spdi_itm, 1);
                        }
                    }
                }
                foreach (CashPromotionDiscountItem _itm in _existingItem)
                {
                    List<string> tem = (from _res in _itmList.AsEnumerable()
                                        where _res.Field<string>("item") == _itm.Spdi_itm
                                        select _res.Field<string>("item")).ToList<string>();
                    if (tem == null || tem.Count <= 0)
                    {
                        //remove
                        _salesDAL.UpdateCashPromotionalDiscountItem(_itm.Spdi_seq, _modBy, _date, _itm.Spdi_itm, 0);
                    }
                }
                //END ITEM

                //START LOC
                List<CashPromotionDiscountLocation> _existingLoc = _salesDAL.GetPromotinalDiscountLoc(_seq);
                //add new
                foreach (String _itm in _locList)
                {
                    List<CashPromotionDiscountLocation> tem = (from _res in _existingLoc
                                                               where _res.Spdl_pc == _itm
                                                               select _res).ToList<CashPromotionDiscountLocation>();
                    if (tem == null || tem.Count <= 0)
                    {
                        List<CashPromotionDiscountDetail> _det = _salesDAL.GetPromotinalDiscountDetail(_seq);
                        if (_det != null && _det.Count > 0)
                        {

                            CashPromotionDiscountLocation _loc = new CashPromotionDiscountLocation();
                            _loc.Spdl_seq = _det[0].Spdd_seq;
                            _loc.Spdl_com = _com;
                            _loc.Spdl_pc = _itm;
                            _loc.Spdl_cre_by = _modBy;
                            _loc.Spdl_cre_dt = _date;
                            _loc.Spdl_act = true;
                            _loc.Spdl_pty_tp = _existingLoc[0].Spdl_pty_tp;      //kapila 7/4/2017
                            _salesDAL.SavePromotionalDiscountLocation(_loc);

                        }

                    }
                    else
                    {
                        if (!tem[0].Spdl_act)
                        {
                            _salesDAL.UpdateCashPromotionalDiscountLocation(tem[0].Spdl_seq, _modBy, _date, tem[0].Spdl_pc, 1);
                        }
                    }
                }
                foreach (CashPromotionDiscountLocation _itm in _existingLoc)
                {
                    List<string> tem = (from _res in _locList
                                        where _res == _itm.Spdl_pc
                                        select _res).ToList<string>();
                    if (tem == null || tem.Count <= 0)
                    {
                        //remove
                        _salesDAL.UpdateCashPromotionalDiscountLocation(_itm.Spdl_seq, _modBy, _date, _itm.Spdl_pc, 0);
                    }
                }
                //END LOC

                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                return effect;
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                return -1;
            }
        }

        public DataTable GetPcFromHirarchey(string _val, string _type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPcFromHirarchey(_val, _type);
        }



        public List<EliteCommissionSalesTypes> GetEliteCommissionSalesType(string circular)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetEliteCommissionSalesType(circular);
        }

        public void GetPromotion(string _company, string _profitcenter, string _item, DateTime _date, string _customer, out List<PriceDetailRef> _priceDetailRefPromo, out List<PriceSerialRef> _priceSerialRefPromo, out List<PriceSerialRef> _priceSerialRefNormal)
        {
            List<PriceDetailRef> _PriceDetailRefPromo = null;
            List<PriceSerialRef> _PriceSerialRef = null;
            List<PriceSerialRef> _PriceSerialRefPromo = null;
            List<PriceSerialRef> _PriceSerialRefNormal = null;

            _salesDAL = new SalesDAL();
            DataTable _dtChnl = null;
            //profit center
            _PriceDetailRefPromo = _salesDAL.GetPromotion(_company, _profitcenter, _item, _date, _customer, "PC", _profitcenter);

            var _PricePromoPC = _salesDAL.GetPromotion(_company, _profitcenter, _item, _date, string.Empty, "PC", _profitcenter);
            if (_PricePromoPC.Count > 0)
                _PriceDetailRefPromo.AddRange(_PricePromoPC);

            //sub channel
            _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitcenter, "SCHNL");
            var _PricePromoCusschnl = _salesDAL.GetPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), _item, _date, _customer, "SCHNL", _profitcenter);
            if (_PricePromoCusschnl.Count > 0)
                _PriceDetailRefPromo.AddRange(_PricePromoCusschnl);

            var _PricePromoschnl = _salesDAL.GetPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), _item, _date, string.Empty, "SCHNL", _profitcenter);
            if (_PricePromoschnl.Count > 0)
                _PriceDetailRefPromo.AddRange(_PricePromoschnl);

            //channel
            _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitcenter, "CHNL");
            var _PricePromoCuschnl = _salesDAL.GetPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), _item, _date, _customer, "CHNL", _profitcenter);
            if (_PricePromoCuschnl.Count > 0)
                _PriceDetailRefPromo.AddRange(_PricePromoCuschnl);

            var _PricePromochnl = _salesDAL.GetPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), _item, _date, string.Empty, "CHNL", _profitcenter);
            if (_PricePromochnl.Count > 0)
                _PriceDetailRefPromo.AddRange(_PricePromochnl);



            //////_PriceDetailRefPromo = _salesDAL.GetPromotion(_company, _profitcenter, _item, _date, _customer);
            //////if (_PriceDetailRefPromo == null || _PriceDetailRefPromo.Count <= 0)
            //////    _PriceDetailRefPromo = _salesDAL.GetPromotion(_company, _profitcenter, _item, _date, string.Empty);

            _PriceSerialRef = _salesDAL.GetPromotionSerial(_company, _profitcenter, _item, _date, _customer);
            if (_PriceSerialRef == null || _PriceSerialRef.Count <= 0)
                _PriceSerialRef = _salesDAL.GetPromotionSerial(_company, _profitcenter, _item, _date, string.Empty);

            if (_PriceSerialRef != null && _PriceSerialRef.Count > 0)
            {
                _PriceSerialRefPromo = _PriceSerialRef.Where(x => x.Sars_price_type != 0).ToList();
                _PriceSerialRefNormal = _PriceSerialRef.Where(x => x.Sars_price_type == 0).ToList();
            }

            _priceDetailRefPromo = _PriceDetailRefPromo;
            _priceSerialRefPromo = _PriceSerialRefPromo;
            _priceSerialRefNormal = _PriceSerialRefNormal;
        }

        //Written by Chamal  - 26/07/2013
        public Int32 UploadSCMInvoice(string _scmInvoiceNo, string _user, out string _msg)
        {
            Int32 _effect = 0;
            Int32 _invSeq = 0;
            try
            {
                InvoiceHeader _InvHeader = new InvoiceHeader();

                List<InvoiceItem> _InvItems = new List<InvoiceItem>();

                _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen(); _salesDAL.BeginTransaction();
                _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen(); _inventoryDAL.BeginTransaction();
                _ScmCommonDAL = new SCMCommonDAL(); _ScmCommonDAL.ConnectionOpen(); _ScmCommonDAL.BeginTransaction();

                _invSeq = _inventoryDAL.GetSerialID();
                _InvHeader.Sah_seq_no = _invSeq;
                _InvHeader.Sah_inv_no = _scmInvoiceNo;

                DataTable _dt = _ScmCommonDAL.GetInvoiceHeader(_scmInvoiceNo);
                if (_dt != null && _dt.Rows.Count > 0)
                {
                    foreach (DataRow _dr in _dt.Rows)
                    {
                        #region Fill Invoice Header
                        _InvHeader.Sah_com = _dr["COMPANY_CODE"].ToString();
                        _InvHeader.Sah_pc = _dr["PROFIT_CENTER_CODE"].ToString();
                        _InvHeader.Sah_tp = "INV";
                        _InvHeader.Sah_inv_tp = "CS";
                        _InvHeader.Sah_inv_sub_tp = "SA";
                        _InvHeader.Sah_dt = Convert.ToDateTime(_dr["INVOICE_DATE"].ToString()).Date;
                        _InvHeader.Sah_manual = false;
                        _InvHeader.Sah_man_ref = _dr["INVOICE_REF_NO"].ToString();
                        _InvHeader.Sah_ref_doc = _dr["OTHER_DOC_NO"].ToString();
                        _InvHeader.Sah_cus_cd = _dr["CUSTOMER_CODE"].ToString();
                        DataTable _dt1 = _ScmCommonDAL.GetCustomerDetails(_InvHeader.Sah_com, _InvHeader.Sah_cus_cd);
                        if (_dt1 != null && _dt1.Rows.Count > 0)
                        {
                            foreach (DataRow _dr1 in _dt1.Rows)
                            {
                                _InvHeader.Sah_cus_name = _dr1["COMPANY_NAME"].ToString();
                                break;
                            }
                        }
                        _InvHeader.Sah_cus_add1 = _dr["D_ADD1"].ToString();
                        _InvHeader.Sah_cus_add2 = _dr["D_ADD2"].ToString();
                        _InvHeader.Sah_currency = _dr["CURRENCY_CODE"].ToString();
                        _InvHeader.Sah_ex_rt = Convert.ToDecimal(_dr["EXCHANGE_RATE"].ToString());
                        _InvHeader.Sah_town_cd = "";
                        _InvHeader.Sah_d_cust_cd = _dr["D_CUS_CODE"].ToString();
                        _InvHeader.Sah_d_cust_add1 = _dr["D_ADD1"].ToString();
                        _InvHeader.Sah_d_cust_add2 = _dr["D_ADD2"].ToString();
                        _InvHeader.Sah_man_cd = "N/A";
                        _InvHeader.Sah_sales_ex_cd = _dr["SALE_EX_CODE"].ToString();
                        _InvHeader.Sah_sales_str_cd = "-";
                        _InvHeader.Sah_sales_sbu_cd = "-";
                        _InvHeader.Sah_sales_sbu_man = "-";
                        _InvHeader.Sah_sales_chn_cd = "-";
                        _InvHeader.Sah_sales_chn_man = "-";
                        _InvHeader.Sah_sales_region_cd = "-";
                        _InvHeader.Sah_sales_region_man = "-";
                        _InvHeader.Sah_sales_zone_cd = "-";
                        _InvHeader.Sah_sales_zone_man = "-";
                        _InvHeader.Sah_structure_seq = "-";
                        _InvHeader.Sah_esd_rt = 0;
                        _InvHeader.Sah_wht_rt = 0;
                        _InvHeader.Sah_epf_rt = 0;
                        _InvHeader.Sah_pdi_req = 0;
                        _InvHeader.Sah_remarks = _dr["REMARKS"].ToString();
                        _InvHeader.Sah_is_acc_upload = true;
                        _InvHeader.Sah_stus = "A";
                        _InvHeader.Sah_cre_by = _dr["CREATE_BY"].ToString();
                        _InvHeader.Sah_cre_when = Convert.ToDateTime(_dr["CREATE_WHEN"].ToString());
                        _InvHeader.Sah_mod_by = _user;
                        _InvHeader.Sah_mod_when = DateTime.Now;
                        _InvHeader.Sah_session_id = "SCM_UPLOAD";
                        _InvHeader.Sah_anal_1 = "";
                        _InvHeader.Sah_anal_2 = "";
                        _InvHeader.Sah_anal_3 = "";
                        _InvHeader.Sah_anal_4 = "";
                        _InvHeader.Sah_anal_5 = "";
                        _InvHeader.Sah_anal_6 = "";
                        _InvHeader.Sah_anal_7 = 0;
                        _InvHeader.Sah_anal_8 = 0;
                        _InvHeader.Sah_anal_9 = 2;
                        _InvHeader.Sah_anal_10 = 2;
                        _InvHeader.Sah_anal_11 = 2;
                        _InvHeader.Sah_anal_12 = DateTime.Now;
                        _InvHeader.Sah_direct = true;
                        _InvHeader.Sah_tax_inv = false;
                        _InvHeader.Sah_grup_cd = "";
                        _InvHeader.Sah_acc_no = "";
                        _InvHeader.Sah_tax_exempted = false;
                        _InvHeader.Sah_is_svat = false;
                        _InvHeader.Sah_fin_chrg = 0;
                        _InvHeader.Sah_del_loc = "";
                        _InvHeader.Sah_grn_com = "";
                        _InvHeader.Sah_grn_loc = "";
                        _InvHeader.Sah_is_grn = false;
                        _InvHeader.Sah_d_cust_name = _dr["D_CUS_CODE"].ToString();
                        _InvHeader.Sah_is_dayend = 1;
                        #endregion
                        break;
                    }
                }
                _salesDAL.SaveSalesHeader(_InvHeader);

                _dt = _ScmCommonDAL.GetInvoiceItems(_scmInvoiceNo);
                if (_dt != null && _dt.Rows.Count > 0)
                {
                    foreach (DataRow _dr in _dt.Rows)
                    {
                        #region Fill Invoice Item
                        InvoiceItem _InvItem = new InvoiceItem();
                        _InvItem.Sad_seq_no = _invSeq;
                        _InvItem.Sad_itm_line = Convert.ToInt32(_dr["ITEM_LINE_NO"].ToString());
                        _InvItem.Sad_inv_no = _scmInvoiceNo;
                        _InvItem.Sad_itm_cd = _dr["ITEM_CODE"].ToString();
                        DataTable _dt1 = _inventoryDAL.GetItemStatusMaster(null, _dr["STATUS"].ToString());
                        if (_dt1 != null && _dt1.Rows.Count > 0)
                        {
                            foreach (DataRow _dr1 in _dt1.Rows)
                            {
                                _InvItem.Sad_itm_stus = _dr1["MIS_CD"].ToString();
                                break;
                            }
                        }
                        _InvItem.Sad_itm_tp = _dr["ITEM_TYPE"].ToString();
                        _InvItem.Sad_uom = _dr["UOM"].ToString();
                        _InvItem.Sad_qty = Convert.ToDecimal(_dr["QTY"].ToString());
                        _InvItem.Sad_do_qty = Convert.ToDecimal(_dr["QTY"].ToString()) - Convert.ToDecimal(_dr["DO_BALANCE"].ToString());
                        _InvItem.Sad_srn_qty = 0;
                        _InvItem.Sad_unit_rt = Convert.ToDecimal(_dr["UNIT_RATE"].ToString());
                        _InvItem.Sad_unit_amt = Convert.ToDecimal(_dr["AMOUNT"].ToString());
                        _InvItem.Sad_disc_rt = Convert.ToDecimal(_dr["DIS_RATE"].ToString());
                        _InvItem.Sad_disc_amt = Convert.ToDecimal(_dr["DIS_AMOUNT"].ToString());
                        _InvItem.Sad_itm_tax_amt = Convert.ToDecimal(_dr["ITEM_TAX_AMOUNT"].ToString());
                        _InvItem.Sad_tot_amt = Convert.ToDecimal(_dr["TOT_AMOUNT"].ToString());
                        _InvItem.Sad_pbook = _dr["PRICE_BOOK"].ToString();
                        _InvItem.Sad_pb_lvl = _dr["PRICE_LEVEL"].ToString();
                        _InvItem.Sad_pb_price = Convert.ToDecimal(_dr["PRICE_BOOK_PRICE"].ToString());
                        _InvItem.Sad_seq = Convert.ToInt32(_dr["PB_SEQ"].ToString());
                        _InvItem.Sad_itm_seq = Convert.ToInt32(_dr["PB_ITEM_SEQ_NO"].ToString());
                        _InvItem.Sad_warr_period = Convert.ToInt32(_dr["WARA_PERIOD"].ToString());
                        _InvItem.Sad_warr_remarks = _dr["WARA_REMARKS"].ToString();
                        _InvItem.Sad_is_promo = false;
                        _InvItem.Sad_promo_cd = "";
                        _InvItem.Sad_comm_amt = 0;
                        _InvItem.Sad_alt_itm_cd = "N/A";
                        _InvItem.Sad_alt_itm_desc = "";
                        _InvItem.Sad_print_stus = false;
                        _InvItem.Sad_res_no = "";
                        _InvItem.Sad_res_line_no = 0;
                        _InvItem.Sad_job_no = "";
                        _InvItem.Sad_fws_ignore_qty = 0;
                        _InvItem.Sad_warr_based = false;
                        _InvItem.Sad_merge_itm = "";
                        _InvItem.Sad_job_line = 0;
                        _InvItem.Sad_outlet_dept = "";
                        _InvItem.Sad_trd_svc_chrg = 0;
                        _InvItem.Sad_isapp = true;
                        _InvItem.Sad_iscovernote = true;
                        _InvItem.Sad_sim_itm_cd = "";
                        _InvItem.Sad_dis_seq = 0;
                        _InvItem.Sad_dis_line = 0;
                        _InvItem.Sad_dis_type = "";

                        #endregion
                        _InvItems.Add(_InvItem);
                    }
                }
                #region Save Items
                foreach (InvoiceItem _itm in _InvItems)
                {
                    _salesDAL.SaveSalesItem(_itm);
                    List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                    _itmTax = _salesDAL.GetItemTax(_InvHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);
                    foreach (MasterItemTax _one in _itmTax)
                    {
                        InvoiceItemTax _tax = new InvoiceItemTax();
                        _tax.Satx_inv_no = _itm.Sad_inv_no;
                        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                        _tax.Satx_itm_line = _itm.Sad_itm_line;
                        _tax.Satx_itm_tax_amt = (_itm.Sad_unit_rt * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                        _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                        _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                        _tax.Satx_job_line = 0;
                        _tax.Satx_job_no = "";
                        _tax.Satx_seq_no = _invSeq;
                        _salesDAL.SaveSalesItemTax(_tax);
                    }
                }
                #endregion
                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _ScmCommonDAL.TransactionCommit();
                _effect = 1;
                _msg = string.Empty;
            }
            catch (Exception err)
            {
                _effect = -1;
                _msg = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
            }
            return _effect;
        }

        public DataTable GetSCMInvc(string _invcNo)
        {
            DataTable _dt;
            _ScmCommonDAL = new SCMCommonDAL(); _ScmCommonDAL.ConnectionOpen();
            _dt = _ScmCommonDAL.GetInvoiceHeader(_invcNo);
            _ScmCommonDAL.ConnectionClose();
            return _dt;
        }

        public DataTable GetCustomerDetails(string _com, string _custCode)
        {
            DataTable _dt;
            _ScmCommonDAL = new SCMCommonDAL(); _ScmCommonDAL.ConnectionOpen();
            _dt = _ScmCommonDAL.GetCustomerDetails(_com, _custCode);
            _ScmCommonDAL.ConnectionClose();
            return _dt;
        }

        public List<ReceiptItemDetails> GetAdvanReceiptItems(string _recNo)
        {
            _salesDAL = new SalesDAL();

            return _salesDAL.GetAdvanReceiptItems(_recNo);
        }

        public DataTable GetItemSubCate2(string _cat1, string _cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetItemSubCate2(_cat1, _cd);
        }

        public DataTable GetItemSubCate3(string _cat1, string _cat2, string _cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetItemSubCate3(_cat1, _cat2, _cd);
        }

        public DataTable GetReprintSevericeJob(string _type, string _no)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReprintSevericeJob(_type, _no);
        }

        public DataTable GetItemStatusWiseWarrantyPeriods(string itemCd, string status)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetItemStatusWiseWarrantyPeriods(itemCd, status);
        }

        public int ProcessMonthEnd(DateTime _asAtDate, string _com, string _pc, string _user, string _scheme, int seq)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            int effect = 0;
            effect = _salesDAL.ProcessMonthEnd(_asAtDate, _com, _pc, _user, _scheme, seq);
            _salesDAL.ConnectionClose();
            return effect;
        }

        public Boolean IsvalidPC(string _com, string _pc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.IsvalidPC(_com, _pc);
        }

        public int ProcessMontEnd(List<MonthEndHeadder> _hdrList, out string _err)
        {

            try
            {
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                foreach (MonthEndHeadder _hdr in _hdrList)
                {
                    //save header
                    int seq = _inventoryDAL.GetSerialID();
                    _hdr.Hmeh_seq = seq;
                    _salesDAL.SaveMonthEndHeader(_hdr);
                    //process account
                    _salesDAL.ProcessMonthEnd(_hdr.Hmeh_mon_end_dt.Date, _hdr.Hmeh_com, _hdr.Hmeh_pc, _hdr.Hmeh_cre_by, "ALL", seq);
                }
                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _err = "";
            }
            catch (Exception ex)
            {
                _err = ex.Message;
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
            }
            return 0;

        }

        public MonthEndHeadder GetMonthEndHeader(string _com, string _pc, DateTime _monDt)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetMonthEndHeader(_com, _pc, _monDt);
        }

        public int ProcessPromotionCancel(List<string> _promoCodes, out string _err, out List<string> _errList, string user, string session)
        {
            int result = 0;
            List<string> _errPromo = new List<string>();
            List<PriceDetailRef> _details = new List<PriceDetailRef>();
            bool canCancel = true;
            try
            {

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                foreach (string st in _promoCodes)
                {
                    _details.AddRange(_salesDAL.GetPriceByPromoCD(st));
                }
                foreach (PriceDetailRef _det in _details)
                {
                    if (_det.Sapd_no_of_use_times > 0)
                    {
                        _errPromo.Add(_det.Sapd_promo_cd);
                        canCancel = false;
                    }
                }

                if (canCancel)
                {
                    foreach (PriceDetailRef _det in _details)
                    {
                        result = result + _salesDAL.CancelPromotion(_det.Sapd_seq_no, _det.Sapd_pb_seq, _det.Sapd_promo_cd);

                        LogPriceDef _log = new LogPriceDef();
                        _log.Log_dt = _det.Sapd_from_date;
                        _log.Log_rmk = "Cencel the price definition";
                        _log.Log_session = session;
                        _log.Log_usr = user;
                        _log.Promo_cd = _det.Sapd_promo_cd;
                        _log.Pb = _det.Sapd_pb_tp_cd;
                        _log.To_dt = _det.Sapd_to_date;
                        _log.Cir_no = _det.Sapd_circular_no;
                        _salesDAL.SavePriceingLog(_log);
                    }
                }

                _salesDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _errList = null;
                _err = ex.Message;
                result = 0;
                _salesDAL.TransactionRollback();
                result = 0;
                return result;
            }
            _err = "";
            _errList = _errPromo;
            return result;

        }

        public int ProcessPromotionCancelSubPb(List<string> _promoCodes, out string _err, out List<string> _errList, string user, string session)
        {
            int result = 0;
            List<string> _errPromo = new List<string>();
            List<PriceDetailRef> _details = new List<PriceDetailRef>();
            bool canCancel = true;
            try
            {

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                foreach (string st in _promoCodes)
                {
                    _details.AddRange(_salesDAL.GetPriceByPromoCD_Sub(st));
                }
                foreach (PriceDetailRef _det in _details)
                {
                    if (_det.Sapd_no_of_use_times > 0)
                    {
                        _errPromo.Add(_det.Sapd_promo_cd);
                        canCancel = false;
                    }
                }

                if (canCancel)
                {
                    foreach (PriceDetailRef _det in _details)
                    {
                        result = result + _salesDAL.CancelPromotion(_det.Sapd_seq_no, _det.Sapd_pb_seq, _det.Sapd_promo_cd);

                        LogPriceDef _log = new LogPriceDef();
                        _log.Log_dt = _det.Sapd_from_date;
                        _log.Log_rmk = "Cencel the price definition";
                        _log.Log_session = session;
                        _log.Log_usr = user;
                        _log.Promo_cd = _det.Sapd_promo_cd;
                        _log.Pb = _det.Sapd_pb_tp_cd;
                        _log.To_dt = _det.Sapd_to_date;
                        _log.Cir_no = _det.Sapd_circular_no;
                        _salesDAL.SavePriceingLog(_log);
                    }
                }

                _salesDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _errList = null;
                _err = ex.Message;
                result = 0;
                _salesDAL.TransactionRollback();
                result = 0;
                return result;
            }
            _err = "";
            _errList = _errPromo;
            return result;

        }


        public DataTable CheckValidAppPage(string _com, string _pc, string _appTp, string _stus, string _preFix, string _page, Int32 _used)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.CheckValidAppPage(_com, _pc, _appTp, _stus, _preFix, _page, _used);
        }

        public RequestApprovalHeader GetRequestApprovalHdr(string _com, string _pc, string _appTp, string _funcCD)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRequestApprovalHdr(_com, _pc, _appTp, _funcCD);
        }

        public List<MasterBusinessEntity> GetCustomerByKeys(string _com, string _nic, string _mob, string _br, string _pp, string _dl, int _type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCustomerByKeys(_com, _nic, _mob, _br, _pp, _dl, _type);

        }

        public List<MasterBusinessEntity> GetCustomerDetailList(string _company, string _businessCompanyCode, string _nic, string _mobile, string _businessType)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCustomerDetailList(_company, _businessCompanyCode, _nic, _mobile, _businessType);
        }

        public List<MasterBusinessEntity> GetActiveCustomerDetailList(string _company, string _businessCompanyCode, string _nic, string _mobile, string _businessType)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetActiveCustomerDetailList(_company, _businessCompanyCode, _nic, _mobile, _businessType);
        }

        public DataTable CheckTheDocument(string _company, string _document)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.CheckTheDocument(_company, _document);
        }

        public DataTable PrintExtendedWarranty(string _com, DateTime _from, DateTime _to, string _user, string _cat1, string _cat2, string _cat3, string _brand, string _model, string _item, Int32 _stus)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.PrintExtendedWarranty(_com, _from, _to, _user, _cat1, _cat2, _cat3, _brand, _model, _item, _stus);
        }
        public DataTable GetCreditCustomerRequest(string _company, string _location, int _status)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCreditCustomerRequest(_company, _location, _status);
        }

        public Int32 SaveCreditCustomerRequest(MasterBusinessEntity _businessEntity, string _location, int _status, out string customerCD, RequestApprovalHeader _reqhdr)
        {
            Int32 effect = 0;
            try
            {
                //using (TransactionScope _tr = new TransactionScope())
                {
                    _salesDAL = new SalesDAL();
                    _salesDAL.ConnectionOpen();
                    _salesDAL.BeginTransaction();

                    _inventoryDAL = new InventoryDAL();
                    _inventoryDAL.ConnectionOpen();
                    _inventoryDAL.BeginTransaction();

                    _generalDAL = new GeneralDAL();
                    _generalDAL.ConnectionOpen();
                    _generalDAL.BeginTransaction();
                    string _cusNo = string.Empty;

                    if (_businessEntity.Mbe_cd == null || _businessEntity.Mbe_cd == null)
                    {
                        if (string.IsNullOrEmpty(_reqhdr.Grah_ref))
                        {
                            //new customer
                            MasterAutoNumber _auto = new MasterAutoNumber();
                            _auto.Aut_cate_cd = _location;//_invoiceHeader.Sah_pc;
                            _auto.Aut_cate_tp = "PC";
                            _auto.Aut_moduleid = "CUSR";
                            _auto.Aut_number = 0;
                            _auto.Aut_start_char = "RCRCUS";

                            MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                            _cusNo = _location + "-" + _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                            _inventoryDAL.UpdateAutoNumber(_auto);
                            _reqhdr.Grah_ref = _cusNo;
                            _reqhdr.Grah_fuc_cd = _cusNo;
                            _generalDAL.SaveRequestApproveHear(_reqhdr);
                        }
                        else _cusNo = _reqhdr.Grah_ref;
                        _businessEntity.Mbe_cd = null;
                        customerCD = _cusNo;
                        effect = _salesDAL.SaveCreditCustomerRequest(_businessEntity, _cusNo, _location, _status);
                    }
                    else
                    {
                        customerCD = string.Empty;
                    }
                    //_salesDAL.ConnectionClose();
                    //_inventoryDAL.ConnectionClose();
                    _salesDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();
                    _generalDAL.TransactionCommit();
                    //  _tr.Complete();
                }
            }
            catch (Exception ex)
            {
                customerCD = string.Empty;
                //  return -1;
                effect = -1;

                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
            }
            return effect;
        }

        public List<InvoiceItem> GetInvoiceItems(string _invoice)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceItems(_invoice);
        }



        public Int32 UpdateCreditCustomerRequest(string _company, string _reqno, string _customer)
        {
            int _eff = -1;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _eff = _salesDAL.UpdateCreditCustomerRequest(_company, _reqno, _customer);
                _salesDAL.TransactionCommit();
            }
            catch
            {
                _salesDAL.TransactionRollback();
                _eff = -1;
            }

            return _eff;
        }

        public PriceDetailRestriction GetPromotionRestriction(string _com, string _promo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPromotionRestriction(_com, _promo);
        }

        //darshana on 11-09-2013
        public List<LoyaltyMemeber> GetCurrentLoyalByCus(string _customer, string _type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCurrentLoyalByCus(_customer, _type);
        }

        //darshana on 11-09-2013
        public DataTable GetCustomerLoyalEarnHis(string _company, string _customer, string _card)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCustomerLoyalEarnHis(_company, _customer, _card);
        }

        //darshana on 11-09-2013
        public DataTable GetCustomerLoyalRedeemHis(string _company, string _customer, string _ref, string _payTp)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCustomerLoyalRedeemHis(_company, _customer, _ref, _payTp);
        }

        public DataTable GetInvoiceSerialByInvoice(string _company, string _invoice)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceSerial(_company, _invoice);
        }
        //darshana on 14-09-2013
        public List<MasterBusinessEntity> GetBusinessCompanyDetailList(string _company, string _businessCompanyCode, string _nic, string _mobile, string _businessType)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetBusinessCompanyDetailList(_company, _businessCompanyCode, _nic, _mobile, _businessType);
        }

        //darshana on 16-09-2013
        public DataTable GetHpTxnDetailsForCancel(string _com, string _pc, string _accNo, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHpTxnDetailsForCancel(_com, _pc, _accNo, _date);
        }
        //darshana on 16-09-2013
        public DataTable GetHpLogDetailsForCancel(string _com, string _pc, string _accNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHpLogDetailsForCancel(_com, _pc, _accNo);
        }

        //Darshana on 16-09-2013
        public Int32 HPInvoiceCancelation(InvoiceHeader _header, out string _message, List<InventoryHeader> InventoryList)
        {
            Int16 _effect = 0;
            string _Msg = "";
            string _deliveryNo = string.Empty;

            //using (TransactionScope _tr = new TransactionScope())     //kapila comented and add try catch
            try
            {
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                _fmsInventoryDal = new FMS_InventoryDAL();
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();
                _fmsInventoryDal.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.BeginTransaction();
                _fmsInventoryDal.BeginTransaction();


                #region Update Invoice Header
                if (_header.Sah_stus == "H") _header.Sah_stus = "U"; else _header.Sah_stus = "C";
                _header.Sah_is_dayend = 0;

                _salesDAL.SaveSalesHeader(_header);
                #endregion
                #region Reverse Loyalty Points
                InvoiceLoyalty _loyaltypluspt = _salesDAL.GetInvoiceLoyalty(_header.Sah_inv_no);
                if (_loyaltypluspt != null && !string.IsNullOrEmpty(_loyaltypluspt.Stlt_inv_no))
                {
                    _salesDAL.RedeemLoyaltyPoint(_header.Sah_anal_6, _header.Sah_cus_cd, -_loyaltypluspt.Stlt_pt);
                }
                #endregion
                #region Reverse Gift Vouchers
                DataTable _invoiceitem = _salesDAL.GetInvoiceVoucher(_header.Sah_inv_no, string.Empty);
                if (_invoiceitem != null)
                    if (_invoiceitem.Rows.Count > 0)
                    {
                        foreach (DataRow _row in _invoiceitem.Rows)
                        {
                            string _book = Convert.ToString(_row["stvo_bookno"]);
                            string _page = Convert.ToString(_row["stvo_pageno"]);
                            string _item = Convert.ToString(_row["stvo_gv_itm"]);
                            //  _fmsInventoryDal.ReversVoucher(_header.Sah_com, _header.Sah_pc, _item, _book, _page, _header.Sah_cre_by);


                            //discount voucher cancelation
                            _salesDAL.Update_GV_Pages(2, _header.Sah_com, _header.Sah_pc, _header.Sah_dt, _header.Sah_inv_no, "C", 0, "P_GV", _header.Sah_mod_by, "");
                            //Paymod voucher cancelation
                            _salesDAL.Update_GV_Pages(2, _header.Sah_com, _header.Sah_pc, _header.Sah_dt, _header.Sah_inv_no, "C", 0, "GV", _header.Sah_mod_by, "");


                        }
                    }
                #endregion
                #region Cancel Buy-Back Adjustment
                DataTable _buybackdoc = _inventoryDAL.GetBuyBackInventoryDocument(_header.Sah_com, _header.Sah_del_loc, _header.Sah_inv_no);
                if (_buybackdoc != null)
                    if (_buybackdoc.Rows.Count > 0)
                    {
                        string _adjno = Convert.ToString(_buybackdoc.Rows[0].Field<string>("ith_doc_no"));
                        _inventoryDAL.CancelInwardInventoryDocument(_header.Sah_com, _header.Sah_del_loc, _adjno, _header.Sah_cre_by);
                    }
                #endregion
                #region Reverse Receipt Details and its referance

                //RecieptHeader _receiptHdr = _salesDAL.GetReceiptHeaderByInvoice(_header.Sah_inv_no);
                List<RecieptHeader> _receiptHdr = _salesDAL.GetReceiptByAccountNo(_header.Sah_com, _header.Sah_pc, _header.Sah_acc_no);

                //List<RecieptItem> _recItem = _salesDAL.GetReceiptItemList(_header.Sah_inv_no); GetAllReceiptItems

                if (_receiptHdr != null)
                    //if (_receiptHdr.Sar_com_cd != null)
                    if (_receiptHdr.Count > 0)
                    {
                        foreach (RecieptHeader _tmpHdr in _receiptHdr)
                        {
                            _tmpHdr.Sar_act = false;
                            _tmpHdr.Sar_is_dayend = 0;
                            _salesDAL.SaveReceiptHeader(_tmpHdr);
                            //if (_recItem != null)
                            //    if (_recItem.Count > 0)
                            //        foreach (RecieptItem _i in _recItem)
                            //            _salesDAL.SaveReceiptItem(_i);

                            List<RecieptItem> _recItem = _salesDAL.GetAllReceiptItems(_tmpHdr.Sar_receipt_no);

                            if (_recItem != null)
                                if (_recItem.Count > 0)
                                    foreach (RecieptItem _i in _recItem)
                                    {
                                        //Advance receipt refund
                                        if (_i.Sard_pay_tp == "ADVAN")
                                        {
                                            RecieptHeader _rHdr = new RecieptHeader();
                                            _rHdr.Sar_receipt_no = _i.Sard_ref_no;
                                            _rHdr.Sar_used_amt = -_i.Sard_settle_amt;
                                            _rHdr.Sar_act = true;
                                            _rHdr.Sar_direct = true;
                                            _rHdr.Sar_mod_by = _tmpHdr.Sar_mod_by;
                                            _salesDAL.SaveReceiptHeader(_rHdr);
                                        }
                                        //Credit note refund
                                        if (_i.Sard_pay_tp == "CRNOTE")
                                        {
                                            // _salesDAL.UpdateCreditNoteBalance(_tmpHdr.Sar_com_cd, _tmpHdr.Sar_profit_center_cd, _i.Sard_ref_no, -_i.Sard_settle_amt);
                                        }
                                        //Gift voucher refund
                                        if (_i.Sard_pay_tp == "GVO")
                                        {
                                            Int32 _page = Convert.ToInt32(_i.Sard_ref_no);
                                            Int32 _book = string.IsNullOrEmpty(_i.Sard_sim_ser) ? 0 : Convert.ToInt32(_i.Sard_sim_ser);
                                            string _item = _i.Sard_anal_2;
                                            decimal _amount = _i.Sard_settle_amt;
                                            // _fmsInventoryDal.ReversVoucherBalance(Convert.ToString(_amount), _book, _item, _page, _header.Sah_com, _header.Sah_cre_by, _header.Sah_cre_when);
                                        }
                                        if (_i.Sard_pay_tp == "LORE")
                                        {
                                            _salesDAL.RedeemLoyaltyPoint(_i.Sard_ref_no, _header.Sah_cus_cd, -_i.Sard_anal_4);
                                        }

                                    }

                        }
                    }
                #endregion

                if (InventoryList == null || InventoryList.Count <= 0)
                {
                    #region Reverse Delivery Order
                    List<string> _do = _salesDAL.DeliveryOrderNoByInvoice(_header.Sah_inv_no);
                    if (_do != null)
                        if (_do.Count > 0)
                            foreach (string _d in _do)
                                _inventoryDAL.CancelInventoryDocument(_d, _header.Sah_mod_by);
                    #endregion
                }
                else
                {
                    #region Reverse Consginment Document

                    if (InventoryList != null)
                        if (InventoryList.Count > 0)
                        {
                            var _do = InventoryList.Where(x => x.Ith_doc_tp == "DO").ToList();
                            var _grn = InventoryList.Where(x => x.Ith_doc_tp == "GRN").ToList();
                            var _adj = InventoryList.Where(x => x.Ith_doc_tp == "ADJ").ToList();

                            if (_do != null) if (_do.Count > 0)
                                    foreach (InventoryHeader _d in _do)
                                        if (_d.Ith_direct == false)
                                            _inventoryDAL.CancelInventoryDocument(_d.Ith_doc_no, _header.Sah_mod_by);
                                        else
                                            _inventoryDAL.CancelInwardInventoryDocument(_header.Sah_com, _header.Sah_del_loc, _d.Ith_doc_no, _header.Sah_cre_by);

                            if (_grn != null) if (_grn.Count > 0)
                                    foreach (InventoryHeader _d in _grn)
                                        if (_d.Ith_direct == false)
                                            _inventoryDAL.CancelInventoryDocument(_d.Ith_doc_no, _header.Sah_mod_by);
                                        else
                                            _inventoryDAL.CancelInwardInventoryDocument(_header.Sah_com, _header.Sah_del_loc, _d.Ith_doc_no, _header.Sah_cre_by);

                            if (_adj != null) if (_adj.Count > 0)
                                    foreach (InventoryHeader _d in _adj)
                                        if (_d.Ith_direct == false)
                                            _inventoryDAL.CancelInventoryDocument(_d.Ith_doc_no, _header.Sah_mod_by);
                                        else
                                            _inventoryDAL.CancelInwardInventoryDocument(_header.Sah_com, _header.Sah_del_loc, _d.Ith_doc_no, _header.Sah_cre_by);
                        }
                    #endregion
                }

                //Update account details
                //hpt_acc
                _salesDAL.Update_hp_accountStatus(_header.Sah_com, _header.Sah_pc, _header.Sah_acc_no, "I", 2, null, _header.Sah_dt);
                //hpt_acc_loc
                _salesDAL.UpdateAccountforCashConversion(_header.Sah_acc_no, "I", _header.Sah_dt);

                List<HpInsurance> _insuDet = new List<HpInsurance>();
                _insuDet = _salesDAL.GetAccountInsuranceDetails(_header.Sah_com, _header.Sah_pc, _header.Sah_acc_no);

                if (_insuDet != null)
                {
                    foreach (HpInsurance _tmp in _insuDet)
                    {
                        Int32 _insSeq = _inventoryDAL.GetSerialID();
                        _tmp.Hit_is_rvs = true;
                        _tmp.Hti_seq = _insSeq;
                        _salesDAL.Save_HpInsu(_tmp);

                    }
                }

                //Cancel credit notes - Akila
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                if (!string.IsNullOrEmpty(_header.Sah_inv_no))
                {
                    DataTable _creditNotes = new DataTable();
                    _creditNotes = _financialDAL.GetCreditNotesbyInvoice(_header.Sah_inv_no);
                    if (_creditNotes.Rows.Count > 0)
                    {
                        foreach (DataRow _creditNote in _creditNotes.Rows)
                        {
                            _financialDAL.ActivateCreditNote(_creditNote["SARD_REF_NO"].ToString(), "CANCEL", _header.Sah_mod_by);
                        }
                    }
                }
                InventoryHeader dt = _inventoryDAL.GetINTHDRByOthDoc(_header.Sah_com, "DO", _header.Sah_inv_no);// add by tharanga 2017/10/24
                if (dt.Ith_doc_no != null)
                {
                    if (dt.Ith_stus != "C")
                    {
                        _message = "Invoice DO not updated as Cancel";
                        _effect = -1;
                        throw new System.ArgumentException("Invoice DO not updated as Cancel", "error");
                    }

                }

                _financialDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();
                _message = "";
                _effect = 1;
                //  _tr.Complete();
            }
            catch (Exception ex)
            {
                _message = ex.Message;
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                _financialDAL.TransactionRollback();


                _effect = -1;
            }

            return _effect;

        }

        public DataTable GetDeliveryOrader(string _invoice)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDeliveryOrader(_invoice);
        }

        public DataTable PrintExcessShort(string _com, string _user, string _doc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.PrintExcessShort(_com, _user, _doc);
        }

        public Int32 UpdateRequestCloseStatus(string _com, string _pc, string _type, string _refNo, string _stus, string _user)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            int _RET = _salesDAL.UpdateRequestCloseStatus(_com, _pc, _type, _refNo, _stus, _user);
            _salesDAL.ConnectionClose();
            return _RET;
        }

        public Int32 UpdateRequestCloseStatusSer(string _com, string _pc, string _type, string _refNo, string _stus, string _user)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            int _RET = _salesDAL.UpdateRequestCloseStatusSer(_com, _pc, _type, _refNo, _stus, _user);
            _salesDAL.ConnectionClose();
            return _RET;
        }


        public Int32 SendWarrantyRepMail(string _com, string _pc, string _acc)
        {
            Int32 _effects = 0;
            //  _err = string.Empty 
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();

                _salesDAL.BeginTransaction();

                _generalDAL = new GeneralDAL();
                _generalDAL.ConnectionOpen();

                _generalDAL.BeginTransaction();
                DataTable mst_profit_center = new DataTable();
                string _pcDes = string.Empty;
                string _pcMail = string.Empty;
                string _PCMgr = string.Empty;
                string _mgrMobno = string.Empty;
                mst_profit_center = _salesDAL.GetProfitCenterTable(_com, _pc);
                foreach (DataRow row in mst_profit_center.Rows)
                {
                    _pcDes = row["MPC_DESC"].ToString();
                    _pcMail = row["mpc_email"].ToString();
                    _PCMgr = row["mpc_man"].ToString();
                }


                #region Mail

                if (!string.IsNullOrEmpty(_pcMail))
                {
                    SmtpClient smtpClient = new SmtpClient();
                    MailMessage message = new MailMessage();

                    MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                    smtpClient.Host = _generalDAL.GetMailHost();
                    smtpClient.Port = 25;
                    message.From = fromAddress;

                    string _email = "";

                    _email = "Dear Sir/Madam, \n\n" + _email;
                    _email += "\n Below Account has been reversed  by the location   : " + _pc + "-" + _pcDes + " for warranty replacement. \n\n";
                    _email += "Account #  :" + _acc + " \n\n\n";



                    _email += _generalDAL.GetMailFooterMsg();

                    message.To.Add(_pcMail);
                    message.Subject = "Warranty Replacement";
                    //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                    //message.Bcc.Add(new MailAddress(""));
                    message.IsBodyHtml = false;
                    message.Body = _email;
                    message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                    // Send SMTP mail
                    smtpClient.Send(message);
                }
                #endregion



                #region Manager



                #region sms

                Service_Message oMessage = new Service_Message();


                string emailBody = string.Empty;
                string _realPhNo = string.Empty;



                String SmsBody = "Dear Sir/Madam, \n\n";
                SmsBody += "\n Below Account has been reversed  by the location   : " + _pc + "-" + _pcDes + " for warranty replacement. \n\n";
                SmsBody += "Account #  :" + _acc + " \n\n\n";

                Master_Employee _mgrMob = _generalDAL.GetMasterEmployee(_com, _PCMgr);

                if (_mgrMob.Esep_epf != null)
                {
                    _mgrMobno = _mgrMob.Esep_mobi_no;
                }
                if (!string.IsNullOrEmpty(_mgrMobno))
                {
                    if (_mgrMobno.Length >= 9)
                    {

                        OutSMS _outmgr = new OutSMS();
                        if (_mgrMobno.Length == 10)
                        {
                            _outmgr.Receiverphno = "+94" + _mgrMobno.Substring(1, 9);
                            _outmgr.Senderphno = "+94" + _mgrMobno.Substring(1, 9);
                        }
                        if (_mgrMobno.Length == 9)
                        {
                            _outmgr.Receiverphno = "+94" + _mgrMobno;
                            _outmgr.Senderphno = "+94" + _mgrMobno;
                        }



                        _realPhNo = GetRealPhoneNumber(_mgrMobno);

                        _outmgr.Createtime = DateTime.Now;
                        _outmgr.Msg = SmsBody;
                        _outmgr.Msgstatus = 0;
                        _outmgr.Msgtype = "S";
                        _outmgr.Receivedtime = DateTime.Now;
                        _outmgr.Receiver = _pcDes;
                        _outmgr.Senderphno = _mgrMobno;
                        _outmgr.Refdocno = _acc;
                        _outmgr.Sender = "SCM2";
                        _outmgr.Createtime = DateTime.Now;
                        _inventoryDAL.SaveSMSOut(_outmgr);
                    }
                }
                #endregion
                #endregion

                _generalDAL.TransactionCommit();
                _generalDAL.ConnectionClose();



                _salesDAL.TransactionCommit();
                _salesDAL.ConnectionClose();


                //  _err = " ";
                _effects = 1;

            }
            catch (Exception ex)
            {

                _generalDAL.TransactionRollback();
                _salesDAL.TransactionRollback();


                _effects = -1;
                //  _err = ex.Message.ToString();
            }

            return _effects;
        }


        public DataTable PrintExcessShortBal(string _com, string _pc, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.PrintExcessShortBal(_com, _pc, _date);
        }

        public int SaveSalesTarget(SalesTargetHeadder _hdr, List<SalesTargetDetail> _details, List<String> _pcList, int noMonths, out string _error)
        {
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                int seq = _inventoryDAL.GetSerialID();

                List<SalesTargetDetail> _temp = (from _res in _details
                                                 where !string.IsNullOrEmpty(_res.Sast_main_cat) || _res.Sast_main_cat != "N/A"
                                                 select _res).ToList<SalesTargetDetail>();
                //dilanda
                bool haveCategory = false;
                if (_temp != null && _temp.Count < 0)
                {
                    haveCategory = true;
                }
                //if type monthly
                //add record for month
                if (_hdr.Sast_type == 1)
                {
                    DateTime _from;
                    if (haveCategory)
                    {
                        _from = _hdr.Sast_val_from.Date;
                    }
                    else
                    {
                        _from = new DateTime(_hdr.Sast_val_from.Year, _hdr.Sast_val_from.Month, 1).Date;
                    }
                    for (int i = 1; i <= noMonths; i++)
                    {
                        //save hdr list
                        MasterAutoNumber _Auto = new MasterAutoNumber();
                        _Auto.Aut_cate_cd = "TRGT";
                        _Auto.Aut_cate_tp = "PC";
                        _Auto.Aut_direction = 1;
                        _Auto.Aut_modify_dt = null;
                        _Auto.Aut_moduleid = "TRGT";
                        _Auto.Aut_number = 0;
                        _Auto.Aut_start_char = "SA";
                        _Auto.Aut_year = null;


                        MasterAutoNumber _Insnumber = _inventoryDAL.GetAutoNumber(_Auto.Aut_moduleid, 1, _Auto.Aut_start_char, _Auto.Aut_cate_tp, _Auto.Aut_cate_cd, _Auto.Aut_modify_dt, _Auto.Aut_year);
                        string _num = _Auto.Aut_cate_cd + "-" + _Auto.Aut_start_char + _Auto.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_Auto);

                        SalesTargetHeadder _header = new SalesTargetHeadder();
                        _header.Sast_seq = seq;
                        _hdr.Sast_circular = _num;
                        //_header.Sast_line = i;
                        _header.Sast_type = _hdr.Sast_type;
                        _header.Sast_val_from = _from;
                        _header.Sast_val_to = _from.AddDays(DateTime.DaysInMonth(_from.Year, _from.Month) - 1).Date;
                        _header.Sast_cre_by = _hdr.Sast_cre_by;
                        _header.Sast_cre_dt = _hdr.Sast_cre_dt;
                        _from = new DateTime(_from.Year, _from.AddMonths(1).Month, 1).Date;
                        _salesDAL.SaveSaletTargetHeader(_header);

                        //save details
                        foreach (SalesTargetDetail _det in _details)
                        {
                            _det.Sast_seq = seq;
                            _det.Sast_cre_by = _hdr.Sast_cre_by;
                            _det.Sats_cre_dt = _hdr.Sast_cre_dt;
                            _salesDAL.SaveSaletTargetDetail(_det);
                        }

                        //save pc
                        foreach (string _pc in _pcList)
                        {
                            SalesTargetProfitCenter pc = new SalesTargetProfitCenter();
                            pc.Sast_cre_by = _hdr.Sast_cre_by;
                            pc.Sast_cre_dt = _hdr.Sast_cre_dt;
                            pc.Sast_pc = _pc;
                            pc.Sast_seq = seq;
                            _salesDAL.SaveSaletTargetPC(pc);
                        }
                        seq = _inventoryDAL.GetSerialID();
                    }
                }
                else
                {
                    MasterAutoNumber _Auto = new MasterAutoNumber();
                    _Auto.Aut_cate_cd = "TRGT";
                    _Auto.Aut_cate_tp = "PC";
                    _Auto.Aut_direction = 1;
                    _Auto.Aut_modify_dt = null;
                    _Auto.Aut_moduleid = "TRGT";
                    _Auto.Aut_number = 0;
                    _Auto.Aut_start_char = "SA";
                    _Auto.Aut_year = null;


                    MasterAutoNumber _Insnumber = _inventoryDAL.GetAutoNumber(_Auto.Aut_moduleid, 1, _Auto.Aut_start_char, _Auto.Aut_cate_tp, _Auto.Aut_cate_cd, _Auto.Aut_modify_dt, _Auto.Aut_year);
                    string _num = _Auto.Aut_cate_cd + "-" + _Auto.Aut_start_char + _Auto.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_Auto);

                    SalesTargetHeadder _header = new SalesTargetHeadder();
                    _header.Sast_seq = seq;
                    _header.Sast_circular = _num;
                    // _header.Sast_line = 1;
                    _header.Sast_type = _hdr.Sast_type;
                    _header.Sast_val_from = _hdr.Sast_val_from;
                    _header.Sast_val_to = _hdr.Sast_val_from.AddMonths(12);
                    _header.Sast_cre_by = _hdr.Sast_cre_by;
                    _header.Sast_cre_dt = _hdr.Sast_cre_dt;
                    _salesDAL.SaveSaletTargetHeader(_header);

                    //save details
                    foreach (SalesTargetDetail _det in _details)
                    {
                        _det.Sast_seq = seq;
                        _det.Sast_cre_by = _hdr.Sast_cre_by;
                        _det.Sats_cre_dt = _hdr.Sast_cre_dt;
                        _salesDAL.SaveSaletTargetDetail(_det);
                    }

                    //save pc
                    foreach (string _pc in _pcList)
                    {

                        SalesTargetProfitCenter pc = new SalesTargetProfitCenter();
                        pc.Sast_cre_by = _hdr.Sast_cre_by;
                        pc.Sast_cre_dt = _hdr.Sast_cre_dt;
                        pc.Sast_pc = _pc;
                        pc.Sast_seq = seq;
                        _salesDAL.SaveSaletTargetPC(pc);
                    }
                }


                _error = "";
                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();

            }
            catch (Exception ex)
            {
                _error = ex.Message;
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                return -1;
            }

            return 1;

        }

        public DataTable GetProfitCenterDetail(string _company, int _type, string _book, string _level, string _promotion)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetProfitCenterDetail(_company, _type, _book, _level, _promotion);
        }

        public DataTable GetPriceStatus(string _item, decimal _price, string _company, string _book, string _level)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceStatus(_item, _price, _company, _book, _level);
        }

        public DataTable GetDPExchange(string _company, string _pc, string _loc, string _type, string _doc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDPExchange(_company, _pc, _loc, _type, _doc);
        }
        public DataTable GetDPExchange_new(string _company, string _pc, string _loc, string _type, string _doc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDPExchange_new(_company, _pc, _loc, _type, _doc);
        }

        //kapila 1/8/2014
        public DataTable PrintNotRecManIssues(string _com, string _pc, DateTime _from, DateTime _to)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.PrintNotRecManIssues(_com, _pc, _from, _to);
        }

        public int ProcessReversalCancel(InvoiceHeader _hdr, string _modBy, DateTime _modDt, out string _error)
        {
            int result = 0;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _generalDAL = new GeneralDAL();
                _salesDAL = new SalesDAL();
                _inventoryDAL.ConnectionOpen();
                _salesDAL.ConnectionOpen();
                _generalDAL.ConnectionOpen();

                _salesDAL.BeginTransaction();
                _inventoryDAL.BeginTransaction();
                _generalDAL.BeginTransaction();

                MasterProfitCenter _prof = _generalDAL.GetPCByPCCode(_hdr.Sah_com, _hdr.Sah_pc);
                _inventoryDAL.CancelInwardInventoryDocument(_hdr.Sah_com, _prof.Mpc_def_loc, _hdr.Sah_man_ref, _modBy);
                //update reverse qty
                _salesDAL.UpdateReversalCancel(_hdr.Sah_inv_no, _hdr.Sah_com, _modBy, _modDt, _hdr.Sah_ref_doc);


                _error = "";

                // get Item list by Reversal Invoice num
                List<InvoiceItem> oInvoiceItems = new List<InvoiceItem>();
                oInvoiceItems = _salesDAL.GetInvoiceDetailByInvoice(_hdr.Sah_inv_no);  //kapila  GetInvoiceDetailByInvoice --> _salesDAL.GetInvoiceDetailByInvoice  20/4/2017



                foreach (InvoiceItem item in oInvoiceItems)
                {
                    // update the sad_srn_qty by referensing original invoice num
                    int effect = _salesDAL.UpdateReversalCancelQty(item.Sad_qty, _hdr.Sah_ref_doc, item.Sad_itm_cd, item.Sad_itm_line);
                }

                // Nadeeka 15-05-2015
                List<ReptPickSerials> _updateSerials = new List<ReptPickSerials>();

                _updateSerials = _inventoryDAL.GetSerialsByDocument(0, _hdr.Sah_man_ref);
                foreach (ReptPickSerials _tmp in _updateSerials)
                {
                    _inventoryDAL.UpdateSerialRevStatusCancel(_tmp.Tus_doc_no, _tmp.Tus_itm_cd, _hdr.Sah_com, _tmp.Tus_ser_id, _tmp.Tus_ser_1);
                    InventoryLocation invLocation = new InventoryLocation();
                    invLocation.Inl_com = _hdr.Sah_com;
                    invLocation.Inl_loc = _tmp.Tus_loc;
                    invLocation.Inl_itm_cd = _tmp.Tus_itm_cd;
                    invLocation.Inl_itm_stus = _tmp.Tus_itm_stus;
                    invLocation.Inl_qty = _tmp.Tus_qty;
                    invLocation.Inl_free_qty = _tmp.Tus_qty;
                    invLocation.Inl_res_qty = 0;
                    invLocation.Inl_isu_qty = _tmp.Tus_qty;
                    invLocation.Inl_bl_qty = 0;
                    invLocation.Inl_eo_qty = 0;
                    invLocation.Inl_ro_qty = 0;
                    invLocation.Inl_cre_by = null;
                    //_inventoryDAL.UpdateInventoryLocation(invLocation, 0); cmnt by tharanga inrLoc update twice
                }

                if (_inventoryDAL.IsPendingInvoice(_hdr.Sah_ref_doc) == true)
                {
                    _inventoryDAL.UpdateRevStatusActive(_hdr.Sah_ref_doc, _hdr.Sah_com, "A");
                }
                else
                {
                    _inventoryDAL.UpdateRevStatusActive(_hdr.Sah_ref_doc, _hdr.Sah_com, "D");
                }

                _inventoryDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                _generalDAL.TransactionCommit();
                result = 1;
            }
            catch (Exception ex)
            {
                result = -1;
                _error = ex.Message;
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                return result;
            }
            return result;

        }

        public MasterOutsideParty GetOutSidePartyDetailsById(string _code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetOutSidePartyDetailsById(_code);
        }

        public int UpdateFromExchange(List<ReptPickSerials> _reversSerial, List<InvoiceItem> _invoiceItem)
        {
            int _effect = 0;

            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                foreach (ReptPickSerials _tmp in _reversSerial)
                {
                    _inventoryDAL.UpdateSerialRevStatus(_tmp.Tus_doc_no, _tmp.Tus_itm_cd, _tmp.Tus_com, _tmp.Tus_ser_id, _tmp.Tus_ser_1);
                }
                foreach (InvoiceItem _itm in _invoiceItem)
                {
                    decimal _fwsQty = _itm.Sad_srn_qty - _itm.Sad_fws_ignore_qty;
                    _salesDAL.UpdateInvRevQty(_itm.Sad_inv_no, _itm.Sad_itm_cd, _itm.Sad_srn_qty, _itm.Sad_itm_line, _fwsQty);
                }
                _effect = 1;
                _salesDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
            }
            catch
            {
                _effect = -1;
            }
            return _effect;
        }

        public List<RequestApprovalHeader> getExchangeRequest(string _com, string _loc, string _type, string _status, Int32 _level, string _invLoc, Int32 _isservice)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getExchangeRequest(_com, _loc, _type, _status, _level, _invLoc, _isservice);
        }
        public List<RequestApprovalHeader> getExchangeRequestJob(string _com, string _loc, string _type, string _status, string _job, Int32 _isser)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getExchangeRequestJob(_com, _loc, _type, _status, _job, _isser);
        }

        public int SavePhysicalCashVerification(List<AuditAccountableCash> _accountableCash, AuditCashVeriDenomination _denomination, List<AuditCashVeriDetail> _detail, List<AuditCashVeriDocument> _documnts, AuditCashVeriMain _main, string _jobNo, out string _error)
        {
            int _result = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();

                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                //save main table
                int _seq = _inventoryDAL.GetSerialID();
                //generate auto number
                //MasterAutoNumber _cvAuto = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                //_cvAuto.Aut_modify_dt = null;
                //_cvAuto.Aut_year = null;
                //string _jobNo = _cvAuto.Aut_cate_cd + "-" + _cvAuto.Aut_start_char + "-" + _cvAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                //_inventoryDAL.UpdateAutoNumber(_cvAuto);

                //save data to main table


                _salesDAL.UpdateCashVeriMain(_main, 3);

                //save document
                //foreach (AuditCashVeriDocument _doc in _documnts) {
                //    _doc.Aucd_seq = _seq;
                //    _doc.Aucd_job = _jobNo;

                //    _salesDAL.SaveAuditCashVerificationDocument(_doc);
                //}

                //save accountable cash
                if (_accountableCash != null && _accountableCash.Count > 0)
                {
                    foreach (AuditAccountableCash _cash in _accountableCash)
                    {
                        _cash.Aucc_seq = _seq;
                        _cash.Aucc_job = _jobNo;

                        _salesDAL.SaveAuditCashVerificationAccountableCash(_cash);
                    }
                }
                //save denomination
                _denomination.Aucd_seq = _seq;
                _denomination.Aucd_job = _jobNo;
                _salesDAL.SaveAuditCashVerificationDenomination(_denomination);

                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _error = "";
            }
            catch (Exception ex)
            {
                _error = ex.Message;
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                return -1;
            }
            return _result;
        }

        public AuditCashVeriMain GetJobFromDate(DateTime _from, DateTime _to, string _com, string _pc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetJobFromDate(_from, _to, _com, _pc);

        }

        public List<RecieptHeader> GetRecieptByTypeByDate(string _pc, string _com, DateTime _from, DateTime _to, string _type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, _type);
        }

        public int ProcessPhysicalCashVerification(DateTime _from, DateTime _to, string _com, string _pc, MasterAutoNumber _auto, out List<AuditCashVeriDetail> _details, string _user, out string _jobNo, out string _error)
        {

            try
            {
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                _generalDAL = new GeneralDAL();
                _fmsInventoryDal = new FMS_InventoryDAL();

                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();
                _fmsInventoryDal.ConnectionOpen();
                _fmsInventoryDal.BeginTransaction();
                //generate job number
                MasterAutoNumber _cvAuto = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                _cvAuto.Aut_modify_dt = null;
                _cvAuto.Aut_year = null;
                string _job = _cvAuto.Aut_cate_cd + "-" + _cvAuto.Aut_start_char + "-" + _cvAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_cvAuto);

                List<AuditCashVeriDetail> _detailList = new List<AuditCashVeriDetail>();
                List<RecieptHeader> _recieptList = new List<RecieptHeader>();
                //get receipts
                //01.Cash Sale   reciept Receipts
                List<RecieptHeader> _inv = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "DIR");
                if (_inv != null && _inv.Count > 0)
                {
                    _recieptList.AddRange(_inv);
                }
                //01.Cash Sale   reciept Receipts
                List<RecieptHeader> _invRef = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "CSREF");
                if (_inv != null && _inv.Count > 0)
                {
                    _recieptList.AddRange(_inv);
                }
                //02.Hire sale  reciept (DOWN PAYMENT)
                List<RecieptHeader> _hpdpm = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "HPDPM");
                if (_hpdpm != null && _hpdpm.Count > 0)
                {
                    _recieptList.AddRange(_hpdpm);
                }
                //03.Hire sale  reciept (COLLECTION-MANNUAL)
                List<RecieptHeader> _hprm = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "HPRM");
                if (_hprm != null && _hprm.Count > 0)
                {
                    _recieptList.AddRange(_hprm);
                }
                //04.Hire sale  reciept (COLLECTION-SYSTEM)
                List<RecieptHeader> _hprs = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "HPRS");
                if (_hprs != null && _hprs.Count > 0)
                {
                    _recieptList.AddRange(_hprs);
                }
                //Added darshana 11-09-2014
                List<RecieptHeader> _hpdps = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "HPDPS");
                if (_hpdps != null && _hpdps.Count > 0)
                {
                    _recieptList.AddRange(_hpdps);
                }
                List<RecieptHeader> _hparm = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "HPARM");
                if (_hparm != null && _hparm.Count > 0)
                {
                    _recieptList.AddRange(_hparm);
                }
                //04.Hire sale  reciept (COLLECTION-SYSTEM)
                List<RecieptHeader> _hpars = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "HPARS");
                if (_hpars != null && _hpars.Count > 0)
                {
                    _recieptList.AddRange(_hpars);
                }

                List<RecieptHeader> _dpinsu = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "DPINSU");
                if (_dpinsu != null && _dpinsu.Count > 0)
                {
                    _recieptList.AddRange(_dpinsu);
                }
                List<RecieptHeader> _gvisu = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "GVISU");
                if (_gvisu != null && _gvisu.Count > 0)
                {
                    _recieptList.AddRange(_gvisu);
                }
                //05.warranty extend 
                List<RecieptHeader> _warex = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "WAREX");
                if (_warex != null && _warex.Count > 0)
                {
                    _recieptList.AddRange(_warex);
                }
                //06.down payment reverse 
                List<RecieptHeader> _hpdrv = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "HPDRV");
                if (_hpdrv != null && _hpdrv.Count > 0)
                {
                    _recieptList.AddRange(_hpdrv);
                }
                //07. collection reverse
                List<RecieptHeader> _hprev = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "HPREV");
                if (_hprev != null && _hprev.Count > 0)
                {
                    _recieptList.AddRange(_hprev);
                }
                //08. advanced reciept reverse
                List<RecieptHeader> _advan = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "ADVAN");
                if (_advan != null && _advan.Count > 0)
                {
                    _recieptList.AddRange(_advan);

                }
                //vehical regisistration
                List<RecieptHeader> _vhreg = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "VHREG");
                if (_vhreg != null && _vhreg.Count > 0)
                {
                    _recieptList.AddRange(_vhreg);

                }
                //vehical insurance
                List<RecieptHeader> _vhins = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "VHINS");
                if (_vhins != null && _vhins.Count > 0)
                {
                    _recieptList.AddRange(_vhins);

                }
                //diriya insurance rentle
                List<RecieptHeader> _rntlDiriya = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "INSUR");
                if (_rntlDiriya != null && _rntlDiriya.Count > 0)
                {
                    _recieptList.AddRange(_rntlDiriya);

                }
                //insurance rentle refund
                List<RecieptHeader> _rntlDiriyaRef = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "INSURR");
                if (_rntlDiriyaRef != null && _rntlDiriyaRef.Count > 0)
                {
                    _recieptList.AddRange(_rntlDiriyaRef);

                }
                //vehical insurance refund
                List<RecieptHeader> _vhinsRf = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "VHINSRF");
                if (_vhinsRf != null && _vhinsRf.Count > 0)
                {
                    _recieptList.AddRange(_vhinsRf);

                }
                //vehical registration refund
                List<RecieptHeader> _vhregRf = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "VHREGRF");
                if (_vhregRf != null && _vhregRf.Count > 0)
                {
                    _recieptList.AddRange(_vhregRf);

                }
                // vehical insurance rentle
                List<RecieptHeader> _vhinsRnt = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "VHINSR");
                if (_vhinsRnt != null && _vhinsRnt.Count > 0)
                {
                    _recieptList.AddRange(_vhinsRnt);

                }
                _recieptList = _recieptList.GroupBy(x => x.Sar_receipt_no).Select(x => x.First()).ToList<RecieptHeader>();

                //get collection invoices
                List<RecieptHeader> _systemInvoice = (from _rec in _recieptList
                                                      where _rec.Sar_receipt_type == "DIR" && _rec.Sar_anal_8 != 1
                                                      orderby _rec.Sar_receipt_no
                                                      select _rec).ToList<RecieptHeader>();
                List<RecieptHeader> _mannualInvoice = (from _rec in _recieptList
                                                       where _rec.Sar_receipt_type == "DIR" && _rec.Sar_anal_8 == 1
                                                       orderby _rec.Sar_receipt_no
                                                       select _rec).ToList<RecieptHeader>();

                //_systemInvoice = _systemInvoice.GroupBy(x => x.Sar_receipt_no).Select(x => x.First()).ToList<RecieptHeader>();
                // _mannualInvoice = _mannualInvoice.GroupBy(x => x.Sar_receipt_no).Select(x => x.First()).ToList<RecieptHeader>();
                //organize
                if (_systemInvoice != null && _systemInvoice.Count > 0)
                {
                    AuditCashVeriDetail _cashDet = new AuditCashVeriDetail();
                    _cashDet.Aucd_from_no = _systemInvoice[0].Sar_receipt_no;
                    _cashDet.Aucd_to_no = _systemInvoice[0].Sar_receipt_no;
                    _cashDet.Aucd_total = _systemInvoice[0].Sar_tot_settle_amt;
                    if (!_systemInvoice[0].Sar_act)
                    {
                        AuditCashVeriDetail _cashDet11 = new AuditCashVeriDetail();
                        _cashDet11.Aucd_doc_type = "Cash Sale Cancel";
                        _cashDet11.Aucd_from_no = _systemInvoice[0].Sar_receipt_no;
                        _cashDet11.Aucd_to_no = _systemInvoice[0].Sar_receipt_no;
                        _cashDet11.Aucd_total = (-1) * (_cashDet11.Aucd_total + _systemInvoice[0].Sar_tot_settle_amt);
                        _detailList.Add(_cashDet11);
                    }
                    for (int i = 1; i < _systemInvoice.Count; i++)
                    {
                        string tem = Regex.Match(_systemInvoice[i - 1].Sar_receipt_no.Substring(_systemInvoice[i - 1].Sar_receipt_no.Length - 5), @"\d+").Value;
                        int pre = Convert.ToInt32(tem);

                        string tem1 = Regex.Match(_systemInvoice[i].Sar_receipt_no.Substring(_systemInvoice[i].Sar_receipt_no.Length - 5), @"\d+").Value;
                        int current = Convert.ToInt32(tem1);
                        List<RecieptItem> _list = _salesDAL.GetReceiptDetails(_systemInvoice[i].Sar_receipt_no);
                        InvoiceHeader _invoice = _salesDAL.GetInvoiceHeader(_list[0].Sard_inv_no);
                        if (!_systemInvoice[i].Sar_act)
                        {
                            if (_cashDet.Aucd_from_no != "")
                            {
                                _cashDet.Aucd_doc_type = "Cash Memo";
                                _cashDet.Aucd_to_no = _systemInvoice[i].Sar_receipt_no;
                                _cashDet.Aucd_total = _cashDet.Aucd_total + _systemInvoice[i].Sar_tot_settle_amt;
                                _detailList.Add(_cashDet);
                                _cashDet = new AuditCashVeriDetail();
                                if ((i) < _systemInvoice.Count)
                                    _cashDet.Aucd_from_no = _systemInvoice[i].Sar_receipt_no;
                            }

                            AuditCashVeriDetail _cashDet1 = new AuditCashVeriDetail();
                            _cashDet1.Aucd_doc_type = "Cash Sale Cancel";
                            _cashDet1.Aucd_from_no = _systemInvoice[i].Sar_receipt_no;
                            _cashDet1.Aucd_to_no = _systemInvoice[i].Sar_receipt_no;
                            _cashDet1.Aucd_total = (-1) * (_cashDet1.Aucd_total + _systemInvoice[i].Sar_tot_settle_amt);
                            _detailList.Add(_cashDet1);
                        }
                        else
                        {
                            if (current - pre != 1)
                            {
                                _cashDet.Aucd_doc_type = "Cash Memo";
                                _cashDet.Aucd_to_no = _systemInvoice[i - 1].Sar_receipt_no;
                                _cashDet.Aucd_total = _cashDet.Aucd_total;
                                _detailList.Add(_cashDet);
                                _cashDet = new AuditCashVeriDetail();
                                if ((i) < _systemInvoice.Count)
                                {
                                    _cashDet.Aucd_from_no = _systemInvoice[i].Sar_receipt_no;
                                    _cashDet.Aucd_total = _cashDet.Aucd_total + _systemInvoice[i].Sar_tot_settle_amt;
                                }
                            }
                            else if (current - pre == 1)
                            {
                                _cashDet.Aucd_doc_type = "Cash Memo";
                                _cashDet.Aucd_to_no = _systemInvoice[i].Sar_receipt_no;
                                _cashDet.Aucd_total = _cashDet.Aucd_total + _systemInvoice[i].Sar_tot_settle_amt;
                            }
                            if (i == _systemInvoice.Count - 1)
                            {
                                _cashDet.Aucd_doc_type = "Cash Memo";
                                _cashDet.Aucd_to_no = _systemInvoice[i].Sar_receipt_no;
                                _cashDet.Aucd_total = _cashDet.Aucd_total;
                                _detailList.Add(_cashDet);

                            }
                            //if ((i + 1) == _systemInvoice.Count)
                            //{
                            //    if ( string.IsNullOrEmpty(_cashDet.Aucd_from_no))
                            //    {

                            //        _cashDet.Aucd_doc_type = "Cash Memo";
                            //        _cashDet.Aucd_from_no = _systemInvoice[i].Sar_receipt_no;
                            //        _cashDet.Aucd_to_no = _systemInvoice[i].Sar_receipt_no;
                            //        _cashDet.Aucd_total = _cashDet.Aucd_total + _systemInvoice[i].Sar_tot_settle_amt;
                            //        _detailList.Add(_cashDet);
                            //    }
                            //    else
                            //    {
                            //        _detailList.Add(_cashDet);
                            //    }
                            //}
                        }

                        /*
                        if (!string.IsNullOrEmpty(_invoice[i].Sar_manual_ref_no) && i!=_invoice.Count-1)
                        {
                            if (string.IsNullOrEmpty(_invoice[i - 1].Sar_manual_ref_no))
                            {
                                _cashDet.Aucd_doc_type = "Cash Memo";
                                _cashDet.Aucd_to_no = _invoice[i-i].Sar_receipt_no;
                                _cashDet.Aucd_total = _cashDet.Aucd_total+_invoice[i-i].Sar_tot_settle_amt;
                                _detailList.Add(_cashDet);
                            }
                            _cashDet = new AuditCashVeriDetail();
                            _cashDet.Aucd_doc_type = "Cash Memo";
                            _cashDet.Aucd_from_no = _invoice[i].Sar_manual_ref_no;
                            _cashDet.Aucd_total = _invoice[i].Sar_tot_settle_amt;
                            _detailList.Add(_cashDet);

                            _cashDet = new AuditCashVeriDetail();
                        }
                        else
                        {
                            _cashDet.Aucd_doc_type = "Cash Memo";
                            _cashDet.Aucd_to_no = _invoice[i].Sar_receipt_no;
                            _cashDet.Aucd_total = _cashDet.Aucd_total + _invoice[i].Sar_tot_settle_amt;
                        }

                        if (i == _invoice.Count - 1) {
                            if (!string.IsNullOrEmpty(_invoice[0].Sar_manual_ref_no))
                            {
                                _cashDet.Aucd_doc_type = "Cash Memo";
                                _cashDet.Aucd_from_no = _invoice[0].Sar_manual_ref_no;
                                _cashDet.Aucd_total = _invoice[0].Sar_tot_settle_amt;
                                _detailList.Add(_cashDet);
                            }
                            else
                            {
                                _cashDet.Aucd_doc_type = "Cash Memo";
                                _cashDet.Aucd_to_no = _invoice[i].Sar_receipt_no;
                                _cashDet.Aucd_total = _cashDet.Aucd_total + _invoice[i].Sar_tot_settle_amt;
                                _detailList.Add(_cashDet);
                            }
                        }
                        
                         */

                    }
                    if (_systemInvoice.Count == 1)
                    {
                        _cashDet.Aucd_doc_type = "Cash Memo";
                        _cashDet.Aucd_to_no = _systemInvoice[0].Sar_receipt_no;
                        _cashDet.Aucd_total = _cashDet.Aucd_total;
                        _detailList.Add(_cashDet);
                    }
                }

                if (_mannualInvoice != null && _mannualInvoice.Count > 0)
                {
                    AuditCashVeriDetail _cashDet = new AuditCashVeriDetail();
                    _cashDet.Aucd_from_no = _mannualInvoice[0].Sar_receipt_no;
                    _cashDet.Aucd_to_no = _mannualInvoice[0].Sar_manual_ref_no;
                    _cashDet.Aucd_total = _mannualInvoice[0].Sar_tot_settle_amt;

                    if (!_mannualInvoice[0].Sar_act)
                    {
                        AuditCashVeriDetail _cashDet11 = new AuditCashVeriDetail();
                        _cashDet11.Aucd_doc_type = "Cash Sale Cancel";
                        _cashDet11.Aucd_from_no = _mannualInvoice[0].Sar_receipt_no;
                        _cashDet11.Aucd_to_no = _mannualInvoice[0].Sar_receipt_no;
                        _cashDet11.Aucd_total = (-1) * (_cashDet11.Aucd_total + _mannualInvoice[0].Sar_tot_settle_amt);
                        _detailList.Add(_cashDet11);
                    }

                    for (int i = 1; i < _mannualInvoice.Count; i++)
                    {
                        string tem = Regex.Match(_mannualInvoice[i - 1].Sar_receipt_no.Substring(_mannualInvoice[i - 1].Sar_receipt_no.Length - 5), @"\d+").Value;
                        int pre = Convert.ToInt32(tem);

                        string tem1 = Regex.Match(_mannualInvoice[i].Sar_receipt_no.Substring(_mannualInvoice[i].Sar_receipt_no.Length - 5), @"\d+").Value;
                        int current = Convert.ToInt32(tem1);


                        if (!_mannualInvoice[i].Sar_act)
                        {
                            if (_cashDet.Aucd_from_no != "")
                            {
                                _cashDet.Aucd_doc_type = "Cash Memo";
                                _cashDet.Aucd_to_no = _mannualInvoice[i].Sar_manual_ref_no;
                                _cashDet.Aucd_total = _cashDet.Aucd_total + _mannualInvoice[i].Sar_tot_settle_amt;
                                _detailList.Add(_cashDet);
                                _cashDet = new AuditCashVeriDetail();
                                if ((i) < _mannualInvoice.Count)
                                    _cashDet.Aucd_from_no = _mannualInvoice[i].Sar_manual_ref_no;
                            }

                            AuditCashVeriDetail _cashDet1 = new AuditCashVeriDetail();
                            _cashDet1.Aucd_doc_type = "Cash Sale Cancel";
                            _cashDet1.Aucd_from_no = _mannualInvoice[i].Sar_manual_ref_no;
                            _cashDet1.Aucd_to_no = _mannualInvoice[i].Sar_manual_ref_no;
                            _cashDet1.Aucd_total = (-1) * (_cashDet1.Aucd_total + _mannualInvoice[i].Sar_tot_settle_amt);
                            _detailList.Add(_cashDet1);
                        }
                        else
                        {
                            if (current - pre != 1)
                            {
                                _cashDet.Aucd_doc_type = "Cash Memo Manual";
                                _cashDet.Aucd_to_no = _mannualInvoice[i - 1].Sar_manual_ref_no;
                                _cashDet.Aucd_total = _cashDet.Aucd_total;
                                _detailList.Add(_cashDet);
                                _cashDet = new AuditCashVeriDetail();
                                if ((i) < _mannualInvoice.Count)
                                    if ((i) < _mannualInvoice.Count)
                                    {
                                        _cashDet.Aucd_from_no = _mannualInvoice[i].Sar_manual_ref_no;
                                        _cashDet.Aucd_total = _cashDet.Aucd_total + _mannualInvoice[i].Sar_tot_settle_amt;
                                    }
                            }
                            else if (current - pre == 1)
                            {
                                _cashDet.Aucd_doc_type = "Cash Memo Manual";
                                _cashDet.Aucd_to_no = _mannualInvoice[i].Sar_manual_ref_no;
                                _cashDet.Aucd_total = _cashDet.Aucd_total + _mannualInvoice[i].Sar_tot_settle_amt;
                            }
                            if (i == _mannualInvoice.Count - 1)
                            {
                                _cashDet.Aucd_doc_type = "Cash Memo Manual";
                                _cashDet.Aucd_to_no = _mannualInvoice[i].Sar_manual_ref_no;
                                _cashDet.Aucd_total = _cashDet.Aucd_total;
                                _detailList.Add(_cashDet);
                            }
                            //if ((i + 1) == _mannualInvoice.Count)
                            //{
                            //    if (_cashDet.Aucd_from_no == "")
                            //    {

                            //        _cashDet.Aucd_doc_type = "Cash Memo";
                            //        _cashDet.Aucd_from_no = _systemInvoice[i].Sar_receipt_no;
                            //        _cashDet.Aucd_to_no = _systemInvoice[i].Sar_receipt_no;
                            //        _cashDet.Aucd_total = _cashDet.Aucd_total + _systemInvoice[i].Sar_tot_settle_amt;
                            //        _detailList.Add(_cashDet);
                            //    }
                            //    else
                            //    {
                            //        _detailList.Add(_cashDet);
                            //    }
                            //}
                        }

                    }
                    if (_mannualInvoice.Count == 1)
                    {
                        _cashDet.Aucd_doc_type = "Cash Memo";
                        _cashDet.Aucd_to_no = _mannualInvoice[0].Sar_manual_ref_no;
                        _cashDet.Aucd_total = _cashDet.Aucd_total;
                        _detailList.Add(_cashDet);
                    }
                }
                AuditCashVeriDetail _salRef = new AuditCashVeriDetail();
                _salRef.Aucd_doc_type = "Cash Sale Refund";
                _salRef.Aucd_from_no = _recieptList.Where(x => x.Sar_receipt_type == "CSREF").Min(x => x.Sar_receipt_no);
                _salRef.Aucd_to_no = _recieptList.Where(x => x.Sar_receipt_type == "CSREF").Max(x => x.Sar_receipt_no);
                _salRef.Aucd_total = _recieptList.Where(x => x.Sar_receipt_type == "CSREF").Sum(x => x.Sar_tot_settle_amt);
                if (_salRef.Aucd_total > 0)
                {
                    _detailList.Add(_salRef);
                }
                //HPDPM,HPDPS,-=HPDRV
                //HPARM,HPARS,HPRM,HPRS,-=HPREV
                //get collection reciepts
                //order by book number
                List<RecieptHeader> _collection = (from _rec in _recieptList
                                                   where _rec.Sar_receipt_type == "HPDPM" || _rec.Sar_receipt_type == "HPDPS" || _rec.Sar_receipt_type == "HPARM" || _rec.Sar_receipt_type == "HPARS"
                                                   || _rec.Sar_receipt_type == "HPRM" || _rec.Sar_receipt_type == "HPRS" || _rec.Sar_receipt_type == "HPDRV" || _rec.Sar_receipt_type == "HPREV"
                                                   orderby _rec.Sar_receipt_no
                                                   select _rec).ToList<RecieptHeader>();
                string _oldBook = "";
                if (_collection != null && _collection.Count > 0)
                {
                    //book change
                    AuditCashVeriDetail _det = new AuditCashVeriDetail();
                    string _oldType = "";
                    string _book = "";
                    foreach (RecieptHeader _hdr in _collection)
                    {
                        DataTable _dtBook = _fmsInventoryDal.GetBookFromMannualRef(_pc, _hdr.Sar_manual_ref_no);
                        if (_dtBook != null && _dtBook.Rows.Count > 0)
                            _book = _dtBook.Rows[0]["mdd_bk_no"].ToString();

                        if (!_hdr.Sar_act)
                        {

                            //AuditCashVeriDetail _det1 = new AuditCashVeriDetail();
                            //_oldBook = _book;
                            //_det1.Aucd_book = _book;
                            //_det1.Aucd_doc_type = "HP Receipt Cancel";
                            //_det1.Aucd_from_no = _hdr.Sar_receipt_no;
                            //_det1.Aucd_to_no = _hdr.Sar_receipt_no;
                            //_det1.Aucd_total = (-1) * (_det1.Aucd_total + _hdr.Sar_tot_settle_amt);
                            //_detailList.Add(_det1);
                            continue;
                        }

                        if (_hdr.Sar_receipt_type == "HPDPM" || _hdr.Sar_receipt_type == "HPDPS" || _hdr.Sar_receipt_type == "HPARM" || _hdr.Sar_receipt_type == "HPARS"
                                                       || _hdr.Sar_receipt_type == "HPRM" || _hdr.Sar_receipt_type == "HPRS")
                        {
                            if (_oldBook != "")
                            {
                                if (_oldBook != _book)
                                {
                                    _detailList.Add(_det);
                                    _det = new AuditCashVeriDetail();
                                    if (string.IsNullOrEmpty(_hdr.Sar_manual_ref_no))
                                    {
                                        _det.Aucd_from_no = _hdr.Sar_receipt_no;
                                    }
                                    else
                                    {
                                        _det.Aucd_from_no = _hdr.Sar_manual_ref_no;
                                    }
                                }
                            }


                            if (_oldType == "")
                            {

                                _det.Aucd_doc_type = "HP Collection";
                                _oldBook = _book;
                                _det.Aucd_book = _book;
                                if (string.IsNullOrEmpty(_hdr.Sar_manual_ref_no))
                                {
                                    _det.Aucd_from_no = _hdr.Sar_receipt_no;
                                    _det.Aucd_to_no = _hdr.Sar_receipt_no;
                                }
                                else
                                {
                                    _det.Aucd_from_no = _hdr.Sar_manual_ref_no;
                                    _det.Aucd_to_no = _hdr.Sar_manual_ref_no;
                                }

                                _det.Aucd_total = _det.Aucd_total + _hdr.Sar_tot_settle_amt;
                            }
                            if (_oldType == "Collection")
                            {
                                _det.Aucd_doc_type = "HP Collection";
                                _oldBook = _book;
                                _det.Aucd_book = _book;
                                if (string.IsNullOrEmpty(_hdr.Sar_manual_ref_no))
                                {
                                    _det.Aucd_to_no = _hdr.Sar_receipt_no;
                                }
                                else
                                {
                                    _det.Aucd_to_no = _hdr.Sar_manual_ref_no;
                                }
                                _det.Aucd_total = _det.Aucd_total + _hdr.Sar_tot_settle_amt;
                            }
                            if (_oldType == "Cancel")
                            {
                                _det.Aucd_total = _det.Aucd_total * -1;
                                _detailList.Add(_det);
                                _det = new AuditCashVeriDetail();
                                _det.Aucd_doc_type = "HP Collection";
                                _oldBook = _book;
                                _det.Aucd_book = _book;
                                if (string.IsNullOrEmpty(_hdr.Sar_manual_ref_no))
                                {
                                    _det.Aucd_from_no = _hdr.Sar_receipt_no;
                                    _det.Aucd_to_no = _hdr.Sar_receipt_no;
                                }
                                else
                                {
                                    _det.Aucd_from_no = _hdr.Sar_manual_ref_no;
                                    _det.Aucd_to_no = _hdr.Sar_manual_ref_no;
                                }
                                _det.Aucd_total = _det.Aucd_total + _hdr.Sar_tot_settle_amt;
                            }
                            _oldType = "Collection";
                        }
                        else
                        {
                            if (_oldType == "")
                            {

                                _det.Aucd_doc_type = "HP Receipt Reversal";
                                _oldBook = _book;
                                _det.Aucd_book = _book;
                                if (string.IsNullOrEmpty(_hdr.Sar_manual_ref_no))
                                {
                                    _det.Aucd_from_no = _hdr.Sar_receipt_no;
                                }
                                else
                                {
                                    _det.Aucd_from_no = _hdr.Sar_manual_ref_no;
                                }
                                _det.Aucd_total = (_det.Aucd_total + _hdr.Sar_tot_settle_amt);
                            }
                            if (_oldType == "Cancel")
                            {
                                _det.Aucd_doc_type = "HP Receipt Reversal";
                                _oldBook = _book;
                                _det.Aucd_book = _book;
                                if (string.IsNullOrEmpty(_hdr.Sar_manual_ref_no))
                                {
                                    _det.Aucd_to_no = _hdr.Sar_receipt_no;
                                }
                                else
                                {
                                    _det.Aucd_to_no = _hdr.Sar_manual_ref_no;
                                }
                                _det.Aucd_total = (_det.Aucd_total + _hdr.Sar_tot_settle_amt);
                            }
                            if (_oldType == "Collection")
                            {
                                _detailList.Add(_det);
                                _det = new AuditCashVeriDetail();
                                _det.Aucd_doc_type = "HP Receipt Reversal";
                                _oldBook = _book;
                                _det.Aucd_book = _book;
                                if (string.IsNullOrEmpty(_hdr.Sar_manual_ref_no))
                                {
                                    _det.Aucd_from_no = _hdr.Sar_receipt_no;
                                    _det.Aucd_to_no = _hdr.Sar_receipt_no;
                                }
                                else
                                {
                                    _det.Aucd_from_no = _hdr.Sar_manual_ref_no;
                                    _det.Aucd_to_no = _hdr.Sar_manual_ref_no;
                                }
                                _det.Aucd_total = (_det.Aucd_total + _hdr.Sar_tot_settle_amt);
                            }
                            _oldType = "Cancel";
                        }
                    }
                    if (_oldType == "Cancel")
                    {
                        _det.Aucd_total = _det.Aucd_total * -1;
                        _detailList.Add(_det);
                    }
                    else
                    {
                        _detailList.Add(_det);
                    }


                    /*
                    foreach (RecieptHeader _hdr in _collection)
                    {
                        //get book
                        DataTable _book = _fmsInventoryDal.GetBookFromMannualRef(_pc, _hdr.Sar_manual_ref_no);
                        _hdr.Sar_mod_by = _book.Rows[0]["mdd_bk_no"].ToString();
                    }
                    List<string> _distinctBooks = _collection.Select(x => x.Sar_mod_by).Distinct().ToList<string>();
                    foreach (string st in _distinctBooks)
                    {
                        AuditCashVeriDetail _det = new AuditCashVeriDetail();
                        _det.Aucd_doc_type = "Collection";
                        _det.Aucd_book = st;
                        _det.Aucd_from_no = _collection.Where(x => x.Sar_mod_by == st).Min(x => x.Sar_manual_ref_no);
                        _det.Aucd_to_no = _collection.Where(x => x.Sar_mod_by == st).Max(x => x.Sar_manual_ref_no);
                        _det.Aucd_total = _collection.Where(x => x.Sar_mod_by == st).Sum(x => x.Sar_tot_settle_amt);
                        _detailList.Add(_det);
                    }
                     * */
                }
                /*
                //reciept reverse
                List<RecieptHeader> _revrese = (from _rec in _recieptList
                                                where _rec.Sar_receipt_type == "HPDRV" || _rec.Sar_receipt_type == "HPREV"
                                                 orderby _rec.Sar_manual_ref_no
                                                 select _rec).ToList<RecieptHeader>();
                if (_revrese != null && _revrese.Count > 0)
                {

                    foreach (RecieptHeader _hdr in _revrese)
                    {
                        //get book
                        DataTable _book = _fmsInventoryDal.GetBookFromMannualRef(_pc, _hdr.Sar_manual_ref_no);
                        _hdr.Sar_mod_by = _book.Rows[0]["mdd_bk_no"].ToString();
                    }

                    List<string> _distinctBooks1 = _collection.Select(x => x.Sar_mod_by).Distinct().ToList<string>();
                    foreach (string st in _distinctBooks1)
                    {
                        AuditCashVeriDetail _det = new AuditCashVeriDetail();
                        _det.Aucd_doc_type = "Collection Cancel";
                        _det.Aucd_book = st;
                        _det.Aucd_from_no = _revrese.Where(x => x.Sar_mod_by == st).Min(x => x.Sar_manual_ref_no);
                        _det.Aucd_to_no = _revrese.Where(x => x.Sar_mod_by == st).Max(x => x.Sar_manual_ref_no);
                        _det.Aucd_total = (-1) * _revrese.Where(x => x.Sar_mod_by == st).Sum(x => x.Sar_tot_settle_amt);
                        _detailList.Add(_det);
                    }
                }
                 */
                //advanced receipt
                AuditCashVeriDetail _advanDet = new AuditCashVeriDetail();
                _advanDet.Aucd_doc_type = "Advanced Reciept";
                _advanDet.Aucd_from_no = _recieptList.Where(x => x.Sar_receipt_type == "ADVAN" && x.Sar_anal_8 == 0).Min(x => x.Sar_receipt_no);
                _advanDet.Aucd_to_no = _recieptList.Where(x => x.Sar_receipt_type == "ADVAN" && x.Sar_anal_8 == 0).Max(x => x.Sar_receipt_no);
                _advanDet.Aucd_total = _recieptList.Where(x => x.Sar_receipt_type == "ADVAN" && x.Sar_anal_8 == 0).Sum(x => x.Sar_tot_settle_amt);
                if (_advanDet.Aucd_total > 0)
                {
                    _detailList.Add(_advanDet);
                }
                AuditCashVeriDetail _advanDetMAnnual = new AuditCashVeriDetail();
                _advanDetMAnnual.Aucd_doc_type = "Advanced Reciept";
                _advanDetMAnnual.Aucd_from_no = _recieptList.Where(x => x.Sar_receipt_type == "ADVAN" && x.Sar_anal_8 == 1).Min(x => x.Sar_manual_ref_no);
                _advanDetMAnnual.Aucd_to_no = _recieptList.Where(x => x.Sar_receipt_type == "ADVAN" && x.Sar_anal_8 == 1).Max(x => x.Sar_manual_ref_no);
                _advanDetMAnnual.Aucd_total = _recieptList.Where(x => x.Sar_receipt_type == "ADVAN" && x.Sar_anal_8 == 1).Sum(x => x.Sar_tot_settle_amt);
                if (_advanDetMAnnual.Aucd_total > 0)
                {
                    _detailList.Add(_advanDetMAnnual);
                }


                //warranty extend
                AuditCashVeriDetail _warrEx = new AuditCashVeriDetail();
                _warrEx.Aucd_doc_type = "Warranty Extend";
                _warrEx.Aucd_from_no = _recieptList.Where(x => x.Sar_receipt_type == "WAREX").Min(x => x.Sar_receipt_no);
                _warrEx.Aucd_to_no = _recieptList.Where(x => x.Sar_receipt_type == "WAREX").Max(x => x.Sar_receipt_no);
                _warrEx.Aucd_total = _recieptList.Where(x => x.Sar_receipt_type == "WAREX").Sum(x => x.Sar_tot_settle_amt);
                if (_warrEx.Aucd_total > 0)
                {
                    _detailList.Add(_warrEx);
                }
                //warranty extend cancel
                AuditCashVeriDetail _warrExC = new AuditCashVeriDetail();
                _warrExC.Aucd_doc_type = "Warranty Extend CAncel";
                _warrExC.Aucd_from_no = _recieptList.Where(x => x.Sar_receipt_type == "WAREX" && !x.Sar_act).Min(x => x.Sar_receipt_no);
                _warrExC.Aucd_to_no = _recieptList.Where(x => x.Sar_receipt_type == "WAREX" && !x.Sar_act).Max(x => x.Sar_receipt_no);
                _warrExC.Aucd_total = _recieptList.Where(x => x.Sar_receipt_type == "WAREX" && !x.Sar_act).Sum(x => x.Sar_tot_settle_amt);
                _warrExC.Aucd_total = -1 * _warrExC.Aucd_total;
                if (_warrExC.Aucd_total < 0)
                {
                    _detailList.Add(_warrExC);
                }


                //vhreg
                AuditCashVeriDetail _vhr = new AuditCashVeriDetail();
                _vhr.Aucd_doc_type = "Vehical Registration";
                _vhr.Aucd_from_no = _recieptList.Where(x => x.Sar_receipt_type == "VHREG").Min(x => x.Sar_receipt_no);
                _vhr.Aucd_to_no = _recieptList.Where(x => x.Sar_receipt_type == "VHREG").Max(x => x.Sar_receipt_no);
                _vhr.Aucd_total = _recieptList.Where(x => x.Sar_receipt_type == "VHREG").Sum(x => x.Sar_tot_settle_amt);
                if (_vhr.Aucd_total > 0)
                {
                    _detailList.Add(_vhr);
                }
                //vhins
                AuditCashVeriDetail _vhi = new AuditCashVeriDetail();
                _vhi.Aucd_doc_type = "Vehical Insurance";
                _vhi.Aucd_from_no = _recieptList.Where(x => x.Sar_receipt_type == "VHINS").Min(x => x.Sar_receipt_no);
                _vhi.Aucd_to_no = _recieptList.Where(x => x.Sar_receipt_type == "VHINS").Max(x => x.Sar_receipt_no);
                _vhi.Aucd_total = _recieptList.Where(x => x.Sar_receipt_type == "VHINS").Sum(x => x.Sar_tot_settle_amt);
                if (_vhi.Aucd_total > 0)
                {
                    _detailList.Add(_vhi);
                }
                //rntl basic diriya
                AuditCashVeriDetail _rntlDiri = new AuditCashVeriDetail();
                _rntlDiri.Aucd_doc_type = "Rentel Diriya";
                _rntlDiri.Aucd_from_no = _recieptList.Where(x => x.Sar_receipt_type == "INSUR").Min(x => x.Sar_receipt_no);
                _rntlDiri.Aucd_to_no = _recieptList.Where(x => x.Sar_receipt_type == "INSUR").Max(x => x.Sar_receipt_no);
                _rntlDiri.Aucd_total = _recieptList.Where(x => x.Sar_receipt_type == "INSUR").Sum(x => x.Sar_tot_settle_amt);
                if (_rntlDiri.Aucd_total > 0)
                {
                    _detailList.Add(_rntlDiri);
                }
                //rntl basic diriya refund
                AuditCashVeriDetail _rntlDiriRef = new AuditCashVeriDetail();
                _rntlDiriRef.Aucd_doc_type = "Rentel Diriya Refund";
                _rntlDiriRef.Aucd_from_no = _recieptList.Where(x => x.Sar_receipt_type == "INSURR").Min(x => x.Sar_receipt_no);
                _rntlDiriRef.Aucd_to_no = _recieptList.Where(x => x.Sar_receipt_type == "INSURR").Max(x => x.Sar_receipt_no);
                _rntlDiriRef.Aucd_total = _recieptList.Where(x => x.Sar_receipt_type == "INSURR").Sum(x => x.Sar_tot_settle_amt);
                _rntlDiriRef.Aucd_total = _rntlDiriRef.Aucd_total * -1;
                if (_rntlDiriRef.Aucd_total < 0)
                {
                    _detailList.Add(_rntlDiriRef);
                }
                //vehical insurance refund
                AuditCashVeriDetail _vhiRf = new AuditCashVeriDetail();
                _vhiRf.Aucd_doc_type = "Vehical Insurance Refund";
                _vhiRf.Aucd_from_no = _recieptList.Where(x => x.Sar_receipt_type == "VHINSRF").Min(x => x.Sar_receipt_no);
                _vhiRf.Aucd_to_no = _recieptList.Where(x => x.Sar_receipt_type == "VHINSRF").Max(x => x.Sar_receipt_no);
                _vhiRf.Aucd_total = _recieptList.Where(x => x.Sar_receipt_type == "VHINSRF").Sum(x => x.Sar_tot_settle_amt);
                _vhiRf.Aucd_total = _rntlDiriRef.Aucd_total * -1;
                if (_vhiRf.Aucd_total < 0)
                {
                    _detailList.Add(_vhiRf);
                }
                //vehical registration refund
                AuditCashVeriDetail _vhrRf = new AuditCashVeriDetail();
                _vhrRf.Aucd_doc_type = "Vehical Registration Refund";
                _vhrRf.Aucd_from_no = _recieptList.Where(x => x.Sar_receipt_type == "VHREGRF").Min(x => x.Sar_receipt_no);
                _vhrRf.Aucd_to_no = _recieptList.Where(x => x.Sar_receipt_type == "VHREGRF").Max(x => x.Sar_receipt_no);
                _vhrRf.Aucd_total = _recieptList.Where(x => x.Sar_receipt_type == "VHREGRF").Sum(x => x.Sar_tot_settle_amt);
                _vhrRf.Aucd_total = _rntlDiriRef.Aucd_total * -1;
                if (_vhrRf.Aucd_total < 0)
                {
                    _detailList.Add(_vhrRf);
                }
                //vehical insurance rentle
                AuditCashVeriDetail _vhiRen = new AuditCashVeriDetail();
                _vhiRen.Aucd_doc_type = "Vehical Insurance Rentle";
                _vhiRen.Aucd_from_no = _recieptList.Where(x => x.Sar_receipt_type == "VHINSR").Min(x => x.Sar_receipt_no);
                _vhiRen.Aucd_to_no = _recieptList.Where(x => x.Sar_receipt_type == "VHINSR").Max(x => x.Sar_receipt_no);
                _vhiRen.Aucd_total = _recieptList.Where(x => x.Sar_receipt_type == "VHINSR").Sum(x => x.Sar_tot_settle_amt);
                if (_vhiRen.Aucd_total > 0)
                {
                    _detailList.Add(_vhiRen);
                }
                //vehical insurance rentle refund
                AuditCashVeriDetail _vhiRenRf = new AuditCashVeriDetail();
                _vhiRenRf.Aucd_doc_type = "Vehical Insurance Rentle Refund";
                _vhiRenRf.Aucd_from_no = _recieptList.Where(x => x.Sar_receipt_type == "VHINSRR").Min(x => x.Sar_receipt_no);
                _vhiRenRf.Aucd_to_no = _recieptList.Where(x => x.Sar_receipt_type == "VHINSRR").Max(x => x.Sar_receipt_no);
                _vhiRenRf.Aucd_total = _recieptList.Where(x => x.Sar_receipt_type == "VHINSRR").Sum(x => x.Sar_tot_settle_amt);
                _vhiRenRf.Aucd_total = _vhiRenRf.Aucd_total * -1;
                if (_vhiRenRf.Aucd_total < 0)
                {
                    _detailList.Add(_vhiRenRf);
                }
                //todo diriya
                List<HpInsurance> _diriya = _salesDAL.GetDiriyaByDateRange(_pc, _com, _from, _to);
                if (_diriya != null && _diriya.Count > 0)
                {
                    List<HpInsurance> _diriyaPl = (from _res in _diriya
                                                   where !_res.Hit_is_rvs
                                                   select _res).ToList<HpInsurance>();

                    if (_diriyaPl != null && _diriyaPl.Count > 0)
                    {
                        AuditCashVeriDetail _diriya1 = new AuditCashVeriDetail();
                        _diriya1.Aucd_doc_type = "Diriya";
                        _diriya1.Aucd_from_no = _diriyaPl.Min(x => x.Hti_ref);
                        _diriya1.Aucd_to_no = _diriyaPl.Max(x => x.Hti_ref);
                        _diriya1.Aucd_total = _diriyaPl.Sum(x => x.Hti_ins_val);
                        _detailList.Add(_diriya1);

                    }
                    List<HpInsurance> _diriyaMI = (from _res in _diriya
                                                   where _res.Hit_is_rvs
                                                   select _res).ToList<HpInsurance>();
                    if (_diriyaMI != null && _diriyaMI.Count > 0)
                    {
                        AuditCashVeriDetail _diriya1 = new AuditCashVeriDetail();
                        _diriya1.Aucd_doc_type = "Diriya Refund";
                        _diriya1.Aucd_from_no = _diriyaMI.Min(x => x.Hti_ref);
                        _diriya1.Aucd_to_no = _diriyaMI.Max(x => x.Hti_ref);
                        _diriya1.Aucd_total = _diriyaMI.Sum(x => x.Hti_ins_val);
                        _diriya1.Aucd_total = _diriya1.Aucd_total * -1;
                        _detailList.Add(_diriya1);
                    }
                }
                //save hdr and details
                int _seq = _inventoryDAL.GetSerialID();
                AuditCashVeriMain _main = new AuditCashVeriMain();
                _main.Aucm_seq = _seq;
                _main.Aucm_job = _job;
                _main.Aucm_from = _from.Date;
                _main.Aucm_to = _to.Date;
                _main.Aucm_com = _com;
                _main.Aucm_pc = _pc;
                _main.Aucm_status = 1;
                _main.Aucm_cre_by = _user;
                _main.Aucm_cre_dt = DateTime.Now;

                //save main
                _salesDAL.SaveAuditCashVerificationMain(_main);

                //details
                foreach (AuditCashVeriDetail _det in _detailList)
                {
                    _det.Aucd_seq = _seq;
                    _det.Aucd_job = _job;
                    _det.Aucd_cre_by = _user;
                    _det.Aucd_cre_dt = DateTime.Now;

                    _salesDAL.SaveAuditCashVerificationDetail(_det);
                }

                //save docs
                foreach (RecieptHeader _hdr in _recieptList)
                {
                    AuditCashVeriDocument _document = new AuditCashVeriDocument();
                    _document.Aucd_seq = _seq;
                    _document.Aucd_job = _job;
                    _document.Aucd_doc_type = _hdr.Sar_receipt_type;
                    _document.Aucd_direct = _hdr.Sar_direct;
                    _document.Aucd_doc = _hdr.Sar_receipt_no;
                    _document.Aucd_value = _hdr.Sar_tot_settle_amt;
                    _document.Aucd_cre_by = _user;
                    _document.Aucd_cre_ct = DateTime.Now;
                    _salesDAL.SaveAuditCashVerificationDocument(_document);
                }

                _jobNo = _job;
                _details = _detailList;
                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _generalDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();
                _error = "";
                return 1;
            }
            catch (Exception ex)
            {
                _jobNo = "";
                _details = null;
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _fmsInventoryDal.TransactionCommit();
                _error = ex.Message;
                return -1;

            }
        }


        public int ReProcessPhysicalCashVerification(DateTime _from, DateTime _to, string _com, string _pc, out List<AuditCashVeriDetail> _details, string _user, AuditCashVeriMain _auditMain, out string _error)
        {

            try
            {
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                _generalDAL = new GeneralDAL();
                _fmsInventoryDal = new FMS_InventoryDAL();

                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();
                _fmsInventoryDal.ConnectionOpen();
                _fmsInventoryDal.BeginTransaction();


                List<AuditCashVeriDetail> _detailList = new List<AuditCashVeriDetail>();
                List<RecieptHeader> _recieptList = new List<RecieptHeader>();

                //02.Hire sale  reciept
                List<RecieptHeader> _hpdpm = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "HPDPM");
                if (_hpdpm != null && _hpdpm.Count > 0)
                {
                    _recieptList.AddRange(_hpdpm);
                }
                List<RecieptHeader> _hprm = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "HPRM");
                if (_hprm != null && _hprm.Count > 0)
                {
                    _recieptList.AddRange(_hprm);
                }
                List<RecieptHeader> _hprs = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "HPRS");
                if (_hprs != null && _hprs.Count > 0)
                {
                    _recieptList.AddRange(_hprs);
                }
                List<RecieptHeader> _hpdrv = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "HPDRV");
                if (_hpdrv != null && _hpdrv.Count > 0)
                {
                    _recieptList.AddRange(_hpdrv);
                }
                List<RecieptHeader> _hprev = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "HPREV");
                if (_hprev != null && _hprev.Count > 0)
                {
                    _recieptList.AddRange(_hprev);
                }
                List<RecieptHeader> _advan = _salesDAL.GetRecieptByTypeByDate(_pc, _com, _from, _to, "ADVAN");
                if (_advan != null && _advan.Count > 0)
                {
                    _recieptList.AddRange(_advan);
                }

                //get process docs and remove from _recieptList
                List<AuditCashVeriDocument> _docs = _salesDAL.GetAuditDocuments(_auditMain.Aucm_job, _auditMain.Aucm_seq);
                List<RecieptHeader> _removeList = new List<RecieptHeader>();
                if (_docs != null && _docs.Count > 0)
                {
                    for (int i = 0; i < _recieptList.Count; i++)
                    {

                        List<AuditCashVeriDocument> _doc = (from _res in _docs
                                                            where _res.Aucd_doc == _recieptList[i].Sar_receipt_no
                                                            select _res).ToList<AuditCashVeriDocument>();
                        if (_doc != null && _doc.Count > 0)
                        {
                            _removeList.Add(_recieptList[i]);
                        }
                    }
                    foreach (RecieptHeader _rec in _removeList)
                    {
                        _recieptList.Remove(_rec);
                    }
                }
                //HPDPM,HPDPS,-=HPDRV
                //HPARM,HPARS,HPRM,HPRS,-=HPREV
                //get collection reciepts
                //order by book number
                if (_recieptList != null && _recieptList.Count > 0)
                {
                    List<RecieptHeader> _collection = (from _rec in _recieptList
                                                       where _rec.Sar_receipt_type == "HPDPM" || _rec.Sar_receipt_type == "HPDPS" || _rec.Sar_receipt_type == "HPARM" || _rec.Sar_receipt_type == "HPARS"
                                                       || _rec.Sar_receipt_type == "HPRM" || _rec.Sar_receipt_type == "HPRS" || _rec.Sar_receipt_type == "HPDRV" || _rec.Sar_receipt_type == "HPREV"
                                                       orderby _rec.Sar_manual_ref_no
                                                       select _rec).ToList<RecieptHeader>();
                    if (_collection != null && _collection.Count > 0)
                    {
                        AuditCashVeriDetail _det = new AuditCashVeriDetail();
                        string _oldType = "";
                        string _book = "";
                        foreach (RecieptHeader _hdr in _collection)
                        {
                            DataTable _dtBook = _fmsInventoryDal.GetBookFromMannualRef(_pc, _hdr.Sar_manual_ref_no);
                            if (_dtBook != null && _dtBook.Rows.Count > 0)
                                _book = _dtBook.Rows[0]["mdd_bk_no"].ToString();

                            if (!_hdr.Sar_direct)
                            {
                                //AuditCashVeriDetail _det1 = new AuditCashVeriDetail();
                                //_det1.Aucd_doc_type = "HP Receipt Cancel";
                                //_det1.Aucd_from_no = _hdr.Sar_receipt_no;
                                //_det1.Aucd_to_no = _hdr.Sar_receipt_no;
                                //_det1.Aucd_total = (-1) * (_det.Aucd_total + _hdr.Sar_tot_settle_amt);
                                //_detailList.Add(_det1);
                            }

                            if (_hdr.Sar_receipt_type == "HPDPM" || _hdr.Sar_receipt_type == "HPDPS" || _hdr.Sar_receipt_type == "HPARM" || _hdr.Sar_receipt_type == "HPARS"
                                                           || _hdr.Sar_receipt_type == "HPRM" || _hdr.Sar_receipt_type == "HPRS")
                            {
                                if (_oldType == "")
                                {

                                    _det.Aucd_doc_type = "HP Collection";

                                    _det.Aucd_book = _book;
                                    if (string.IsNullOrEmpty(_hdr.Sar_manual_ref_no))
                                    {
                                        _det.Aucd_from_no = _hdr.Sar_receipt_no;
                                    }
                                    else
                                    {
                                        _det.Aucd_from_no = _hdr.Sar_manual_ref_no;
                                    }
                                    _det.Aucd_total = _det.Aucd_total + _hdr.Sar_tot_settle_amt;
                                }
                                if (_oldType == "Collection")
                                {
                                    _det.Aucd_doc_type = "HP Collection";

                                    _det.Aucd_book = _book;
                                    if (string.IsNullOrEmpty(_hdr.Sar_manual_ref_no))
                                    {
                                        _det.Aucd_to_no = _hdr.Sar_receipt_no;
                                    }
                                    else
                                    {
                                        _det.Aucd_to_no = _hdr.Sar_manual_ref_no;
                                    }
                                    _det.Aucd_total = _det.Aucd_total + _hdr.Sar_tot_settle_amt;
                                }
                                if (_oldType == "Cancel")
                                {
                                    _det.Aucd_total = _det.Aucd_total * (-1);
                                    _detailList.Add(_det);
                                    _det = new AuditCashVeriDetail();
                                    _det.Aucd_doc_type = "HP Collection";

                                    _det.Aucd_book = _book;
                                    if (string.IsNullOrEmpty(_hdr.Sar_manual_ref_no))
                                    {
                                        _det.Aucd_from_no = _hdr.Sar_receipt_no;
                                        _det.Aucd_to_no = _hdr.Sar_receipt_no;
                                    }
                                    else
                                    {
                                        _det.Aucd_from_no = _hdr.Sar_manual_ref_no;
                                        _det.Aucd_to_no = _hdr.Sar_manual_ref_no;
                                    }
                                    _det.Aucd_total = _det.Aucd_total + _hdr.Sar_tot_settle_amt;
                                }
                                _oldType = "Collection";
                            }
                            else
                            {
                                if (_oldType == "")
                                {

                                    _det.Aucd_doc_type = "HP Receipt Reversal";

                                    _det.Aucd_book = _book;
                                    if (string.IsNullOrEmpty(_hdr.Sar_manual_ref_no))
                                    {
                                        _det.Aucd_from_no = _hdr.Sar_receipt_no;
                                    }
                                    else
                                    {
                                        _det.Aucd_from_no = _hdr.Sar_manual_ref_no;
                                    }
                                    _det.Aucd_total = (_det.Aucd_total + _hdr.Sar_tot_settle_amt);
                                }
                                if (_oldType == "Cancel")
                                {
                                    _det.Aucd_doc_type = "HP Receipt Reversal";

                                    _det.Aucd_book = _book;
                                    if (string.IsNullOrEmpty(_hdr.Sar_manual_ref_no))
                                    {
                                        _det.Aucd_to_no = _hdr.Sar_receipt_no;
                                    }
                                    else
                                    {
                                        _det.Aucd_from_no = _hdr.Sar_manual_ref_no;
                                    }
                                    _det.Aucd_total = (_det.Aucd_total + _hdr.Sar_tot_settle_amt);
                                }
                                if (_oldType == "Collection")
                                {
                                    _detailList.Add(_det);
                                    _det = new AuditCashVeriDetail();
                                    _det.Aucd_doc_type = "HP Receipt Reversal";

                                    _det.Aucd_book = _book;
                                    if (string.IsNullOrEmpty(_hdr.Sar_manual_ref_no))
                                    {
                                        _det.Aucd_from_no = _hdr.Sar_receipt_no;
                                        _det.Aucd_to_no = _hdr.Sar_receipt_no;
                                    }
                                    else
                                    {
                                        _det.Aucd_from_no = _hdr.Sar_manual_ref_no;
                                        _det.Aucd_to_no = _hdr.Sar_manual_ref_no;
                                    }
                                    _det.Aucd_total = (_det.Aucd_total + _hdr.Sar_tot_settle_amt);
                                }
                                _oldType = "Cancel";
                            }
                        }
                        if (_oldType == "Cancel")
                        {
                            _det.Aucd_total = _det.Aucd_total * -1;
                            _detailList.Add(_det);
                        }
                        else
                        {
                            _detailList.Add(_det);
                        }
                        /*
                        foreach (RecieptHeader _hdr in _collection)
                        {
                            //get book
                            DataTable _book = _fmsInventoryDal.GetBookFromMannualRef(_pc, _hdr.Sar_manual_ref_no);
                            _hdr.Sar_mod_by = _book.Rows[0]["mdd_bk_no"].ToString();
                        }
                        List<string> _distinctBooks = _collection.Select(x => x.Sar_mod_by).Distinct().ToList<string>();
                        foreach (string st in _distinctBooks)
                        {
                            AuditCashVeriDetail _det = new AuditCashVeriDetail();
                            _det.Aucd_doc_type = "Collection";
                            _det.Aucd_book = st;
                            _det.Aucd_from_no = _recieptList.Where(x => x.Sar_mod_by == st).Min(x => x.Sar_manual_ref_no);
                            _det.Aucd_to_no = _recieptList.Where(x => x.Sar_mod_by == st).Max(x => x.Sar_manual_ref_no);
                            _det.Aucd_total = _recieptList.Where(x => x.Sar_mod_by == st).Sum(x => x.Sar_tot_settle_amt);
                            _detailList.Add(_det);
                        }
                         */
                    }
                    /*
                    //reciept reverse
                    List<RecieptHeader> _revrese = (from _rec in _recieptList
                                                    where _rec.Sar_receipt_type == "HPDRV" || _rec.Sar_receipt_type == "HPREV"
                                                    orderby _rec.Sar_manual_ref_no
                                                    select _rec).ToList<RecieptHeader>();
                    if (_revrese != null && _revrese.Count > 0)
                    {

                        foreach (RecieptHeader _hdr in _collection)
                        {
                            //get book
                            DataTable _book = _fmsInventoryDal.GetBookFromMannualRef(_pc, _hdr.Sar_manual_ref_no);
                            _hdr.Sar_mod_by = _book.Rows[0]["mdd_bk_no"].ToString();
                        }

                        List<string> _distinctBooks1 = _collection.Select(x => x.Sar_mod_by).Distinct().ToList<string>();
                        foreach (string st in _distinctBooks1)
                        {
                            AuditCashVeriDetail _det = new AuditCashVeriDetail();
                            _det.Aucd_doc_type = "Collection Cancel";
                            _det.Aucd_book = st;
                            _det.Aucd_from_no = _recieptList.Where(x => x.Sar_mod_by == st).Min(x => x.Sar_manual_ref_no);
                            _det.Aucd_to_no = _recieptList.Where(x => x.Sar_mod_by == st).Max(x => x.Sar_manual_ref_no);
                            _det.Aucd_total = (-1) * _recieptList.Where(x => x.Sar_mod_by == st).Sum(x => x.Sar_tot_settle_amt);
                            _detailList.Add(_det);
                        }
                    }
                     */
                    //advanced receipt
                    AuditCashVeriDetail _advanDet = new AuditCashVeriDetail();
                    _advanDet.Aucd_doc_type = "Advanced Reciept";
                    _advanDet.Aucd_from_no = _recieptList.Where(x => x.Sar_receipt_type == "ADVAN" && x.Sar_anal_8 == 0).Min(x => x.Sar_receipt_no);
                    _advanDet.Aucd_to_no = _recieptList.Where(x => x.Sar_receipt_type == "ADVAN" && x.Sar_anal_8 == 0).Max(x => x.Sar_receipt_no);
                    _advanDet.Aucd_total = _recieptList.Where(x => x.Sar_receipt_type == "ADVAN" && x.Sar_anal_8 == 0).Sum(x => x.Sar_tot_settle_amt);
                    if (_advanDet.Aucd_total > 0)
                    {
                        _detailList.Add(_advanDet);
                    }
                    AuditCashVeriDetail _advanDetMAnnual = new AuditCashVeriDetail();
                    _advanDetMAnnual.Aucd_doc_type = "Advanced Reciept";
                    _advanDetMAnnual.Aucd_from_no = _recieptList.Where(x => x.Sar_receipt_type == "ADVAN" && x.Sar_anal_8 == 1).Min(x => x.Sar_manual_ref_no);
                    _advanDetMAnnual.Aucd_to_no = _recieptList.Where(x => x.Sar_receipt_type == "ADVAN" && x.Sar_anal_8 == 1).Max(x => x.Sar_manual_ref_no);
                    _advanDetMAnnual.Aucd_total = _recieptList.Where(x => x.Sar_receipt_type == "ADVAN" && x.Sar_anal_8 == 1).Sum(x => x.Sar_tot_settle_amt);
                    if (_advanDetMAnnual.Aucd_total > 0)
                    {
                        _detailList.Add(_advanDetMAnnual);
                    }
                }

                //update hdr and details
                //save main
                _salesDAL.UpdateCashVeriMain(_auditMain, 2);

                //details
                if (_detailList != null && _detailList.Count > 0)
                {
                    foreach (AuditCashVeriDetail _det in _detailList)
                    {
                        _det.Aucd_seq = _auditMain.Aucm_seq;
                        _det.Aucd_job = _auditMain.Aucm_job;
                        _det.Aucd_cre_by = _user;
                        _det.Aucd_cre_dt = DateTime.Now;

                        _salesDAL.SaveAuditCashVerificationDetail(_det);
                    }
                }
                _details = _detailList;
                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _generalDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();
                _error = "";
                return 1;
            }
            catch (Exception ex)
            {

                _details = null;
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _fmsInventoryDal.TransactionCommit();
                _error = ex.Message;
                return -1;

            }
        }

        public List<AuditCashVeriDetail> GetAuditDetailsByJob(string _job, int _seq)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAuditDetailsByJob(_job, _seq);
        }

        public DataTable GetTempUserPc(string _com, string _user)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            DataTable clsBal = _salesDAL.GetTempUserPc(_com, _user);
            _salesDAL.ConnectionClose();
            return clsBal;
        }

        public DataTable GetTempUserPcRptDB(string _com, string _user)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            DataTable clsBal = _inventoryRepDAL.GetTempUserPcRptDB(_com, _user);
            _inventoryRepDAL.ConnectionClose();
            return clsBal;
        }

        public DataTable GetTempUserPcRptDB_AllCom(string _user)
        {
            _reportDAL = new ReptCommonDAL();
            _reportDAL.ConnectionOpen();
            DataTable clsBal = _reportDAL.GetTempUserPcRptDB_AllCom(_user);
            _reportDAL.ConnectionClose();
            return clsBal;
        }

        public DataTable Process_Hp_Closing_Bal_New(string _com, string _user, string _schTp, string _schCD, DateTime _asAT, string _pc, string _cat1, string _cat2, string _cat3, string _item, string _brand, string _model)
        {
            _salesDAL = new SalesDAL();
            //    _salesDAL.ConnectionOpen();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("HPClosingBalance") == true) _salesDAL.ConnectionOpen_DR();
            DataTable clsBal = _salesDAL.Process_Hp_Closing_Bal_New(_com, _user, _schTp, _schCD, _asAT, _pc, _cat1, _cat2, _cat3, _item, _brand, _model);
            //  _salesDAL.ConnectionClose();
            return clsBal;
        }
        //written by darshana - 22/10/2013 - Hp manual receipt request
        public Int32 SaveManualHpRecReq(RequestApprovalHeader _AppHdr, List<RequestApprovalSerials> _AppSer, MasterAutoNumber _AppReqAuto, RequestApprovalHeaderLog _AppHdrLog, List<RequestApprovalSerialsLog> _AppSerLog, out string _docNo)
        {
            Int32 _effect = 0;
            string _ReqNo = "";
            Int32 _line = 0;


            using (TransactionScope _tr = new TransactionScope())
            {
                _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen();
                _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen();

                //EDITED BY PRABHATH ON 13/03/2013
                string _ReqAppNo = _AppHdr.Grah_ref;
                if (string.IsNullOrEmpty(_AppHdr.Grah_ref))
                {
                    MasterAutoNumber ReqNoAuto = _inventoryDAL.GetAutoNumber(_AppReqAuto.Aut_moduleid, _AppReqAuto.Aut_direction, _AppReqAuto.Aut_start_char, _AppReqAuto.Aut_cate_tp, _AppReqAuto.Aut_cate_cd, _AppReqAuto.Aut_modify_dt, _AppReqAuto.Aut_year);
                    _ReqAppNo = ReqNoAuto.Aut_cate_cd + "-" + ReqNoAuto.Aut_start_char + "-" + ReqNoAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_AppReqAuto);
                }
                else
                    _inventoryDAL.DeleteAppReqTable(_ReqAppNo);


                _ReqNo = _ReqAppNo;
                _AppHdr.Grah_ref = _ReqAppNo;
                _AppHdr.Grah_fuc_cd = _ReqAppNo;
                if (_AppHdrLog != null) _AppHdrLog.Grah_ref = _ReqAppNo;
                _AppHdrLog.Grah_fuc_cd = _ReqAppNo;

                _generalDAL.SaveRequestApproveHear(_AppHdr);
                if (_AppHdrLog != null) _generalDAL.SaveRequestApproveHear_Log(_AppHdrLog);


                if (_AppSer != null)
                {
                    foreach (RequestApprovalSerials _itm in _AppSer)
                    {
                        _itm.Gras_ref = _ReqAppNo;
                        _generalDAL.Save_RequestApprove_Ser(_itm);
                        _generalDAL.Save_RequestApprove_Ser_Log(_itm, 0);
                    }
                }


                _generalDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _effect = 1;
                _tr.Complete();


            }

            _docNo = _ReqNo;
            return _effect;
        }

        public List<AuditCashVeriDetail> GetCashVerificationDetails(string _com, string _pc, string _jobNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCashVerificationDetails(_com, _pc, _jobNo);
        }

        public AuditCashVeriMain GetCashVerificationMain(string _com, string _pc, string _jobNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCashVerificationMain(_com, _pc, _jobNo);
        }

        public Int32 SaveSaleRevReqAppDF(RequestApprovalHeader _AppHdr, List<RequestApprovalDetail> _AppDet, List<RequestApprovalSerials> _AppSer, MasterAutoNumber _AppReqAuto, RequestApprovalHeader _RegHdr, List<RequestApprovalDetail> _RegDet, List<RequestApprovalSerials> _RegSer, MasterAutoNumber _AppRegAuto, RequestApprovalHeaderLog _AppHdrLog, List<RequestApprovalDetailLog> _AppDetLog, List<RequestApprovalSerialsLog> _AppSerLog, RequestApprovalHeaderLog _RegHdrLog, List<RequestApprovalDetailLog> _RegDetLog, List<RequestApprovalSerialsLog> _RegSerLog, Boolean _isRegReq, RequestApprovalHeader _insHdr, List<RequestApprovalDetail> _insDet, List<RequestApprovalSerials> _insSer, MasterAutoNumber _AppinsAuto, RequestApprovalHeaderLog _insHdrLog, List<RequestApprovalDetailLog> _insDetLog, List<RequestApprovalSerialsLog> _insSerLog, Boolean _isinsReq, out string _docNo, out string _regReq, out string _insReq)
        {
            Int32 _effect = 0;
            string _ReqNo = "";
            string _RegReqNo = "";
            string _insReqNo = "";
            Int32 _line = 0;


            //using (TransactionScope _tr = new TransactionScope())
            //{
            try
            {
                _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen(); _generalDAL.BeginTransaction();
                _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen(); _inventoryDAL.BeginTransaction();
                string _ReqAppNo = string.Empty;
                //EDITED BY PRABHATH ON 13/03/2013
                if (_AppHdr != null)
                {
                    _ReqAppNo = _AppHdr.Grah_ref;
                    if (string.IsNullOrEmpty(_AppHdr.Grah_ref))
                    {
                        MasterAutoNumber ReqNoAuto = _inventoryDAL.GetAutoNumber(_AppReqAuto.Aut_moduleid, _AppReqAuto.Aut_direction, _AppReqAuto.Aut_start_char, _AppReqAuto.Aut_cate_tp, _AppReqAuto.Aut_cate_cd, _AppReqAuto.Aut_modify_dt, _AppReqAuto.Aut_year);
                        _ReqAppNo = ReqNoAuto.Aut_cate_cd + "-" + ReqNoAuto.Aut_start_char + "-" + ReqNoAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_AppReqAuto);
                    }
                    else
                        _generalDAL.DeleteAppReq(_ReqAppNo);


                    _ReqNo = _ReqAppNo;
                    _AppHdr.Grah_ref = _ReqAppNo;
                    if (_AppHdrLog != null) _AppHdrLog.Grah_ref = _ReqAppNo;
                    // _AppDet.Grad_ref = _ReqAppNo;

                    _generalDAL.SaveRequestApproveHear(_AppHdr);
                }
                else
                {
                    if (_AppHdrLog != null)
                    {
                        RequestApprovalHeader _ReqAppHdr = new RequestApprovalHeader();
                        _ReqAppNo = _AppHdrLog.Grah_ref;
                        _ReqAppHdr.Grah_com = _AppHdrLog.Grah_com;
                        _ReqAppHdr.Grah_loc = _AppHdrLog.Grah_loc;
                        _ReqAppHdr.Grah_fuc_cd = _AppHdrLog.Grah_fuc_cd;
                        _ReqAppHdr.Grah_ref = _AppHdrLog.Grah_ref;
                        _ReqAppHdr.Grah_app_stus = "P";
                        _ReqAppHdr.Grah_app_lvl = _AppHdrLog.Grah_app_lvl;
                        _ReqAppHdr.Grah_app_by = _AppHdrLog.Grah_app_by;
                        _generalDAL.UpdateMidApprovalStatus(_ReqAppHdr);

                    }
                }


                if (_AppHdrLog != null) _generalDAL.SaveRequestApproveHear_Log(_AppHdrLog);

                _line = 0;
                if (_AppDet != null)
                {
                    foreach (RequestApprovalDetail _itm in _AppDet)
                    {
                        _itm.Grad_ref = _ReqAppNo;
                        _generalDAL.Save_RequestApprove_Det(_itm);
                    }
                }

                _line = 0;
                if (_AppDetLog != null)
                {
                    foreach (RequestApprovalDetailLog _itm in _AppDetLog)
                    {
                        _line++;
                        _itm.Grad_ref = _ReqAppNo;
                        _itm.Grad_line = _line;
                        _generalDAL.Save_RequestApprove_Det_Log(_itm);
                    }
                }

                if (_AppSer != null)
                {
                    foreach (RequestApprovalSerials _ser in _AppSer)
                    {
                        _ser.Gras_ref = _ReqAppNo;
                        _generalDAL.Save_RequestApprove_Ser(_ser);
                    }
                }
                if (_AppSerLog != null)
                {
                    foreach (RequestApprovalSerialsLog _ser in _AppSerLog)
                    {
                        _ser.Gras_ref = _ReqAppNo;
                        _generalDAL.Save_RequestApprove_Serial_Log(_ser);
                    }
                }

                if (_isRegReq == true)
                {
                    MasterAutoNumber RegReqAuto = _inventoryDAL.GetAutoNumber(_AppRegAuto.Aut_moduleid, _AppRegAuto.Aut_direction, _AppRegAuto.Aut_start_char, _AppRegAuto.Aut_cate_tp, _AppRegAuto.Aut_cate_cd, _AppRegAuto.Aut_modify_dt, _AppRegAuto.Aut_year);
                    string _RegAppNo = RegReqAuto.Aut_cate_cd + "-" + RegReqAuto.Aut_start_char + "-" + RegReqAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                    _RegReqNo = _RegAppNo;
                    _inventoryDAL.UpdateAutoNumber(_AppRegAuto);

                    _RegHdr.Grah_ref = _RegAppNo;
                    _RegHdr.Grah_fuc_cd = _ReqAppNo;

                    _RegHdrLog.Grah_ref = _RegAppNo;
                    _RegHdrLog.Grah_fuc_cd = _ReqAppNo;

                    _generalDAL.SaveRequestApproveHear(_RegHdr);
                    _generalDAL.SaveRequestApproveHear_Log(_RegHdrLog);

                    _line = 0;
                    if (_RegDet != null)
                    {
                        foreach (RequestApprovalDetail _itm in _RegDet)
                        {
                            _line++;
                            _itm.Grad_ref = _RegAppNo;
                            _itm.Grad_line = _line;
                            _generalDAL.Save_RequestApprove_Det(_itm);
                        }
                    }

                    _line = 0;
                    if (_RegDetLog != null)
                    {
                        foreach (RequestApprovalDetailLog _itm in _RegDetLog)
                        {
                            _line++;
                            _itm.Grad_ref = _RegAppNo;
                            _itm.Grad_line = _line;
                            _generalDAL.Save_RequestApprove_Det_Log(_itm);
                        }
                    }

                    if (_RegSer != null)
                    {
                        foreach (RequestApprovalSerials _ser in _RegSer)
                        {
                            _ser.Gras_ref = _RegAppNo;
                            _generalDAL.Save_RequestApprove_Ser(_ser);
                        }
                    }
                    if (_RegSerLog != null)
                    {
                        foreach (RequestApprovalSerialsLog _ser in _RegSerLog)
                        {
                            _ser.Gras_ref = _RegAppNo;
                            _generalDAL.Save_RequestApprove_Serial_Log(_ser);
                        }
                    }


                }

                if (_isinsReq == true)
                {
                    MasterAutoNumber InsReqAuto = _inventoryDAL.GetAutoNumber(_AppinsAuto.Aut_moduleid, _AppinsAuto.Aut_direction, _AppinsAuto.Aut_start_char, _AppinsAuto.Aut_cate_tp, _AppinsAuto.Aut_cate_cd, _AppinsAuto.Aut_modify_dt, _AppinsAuto.Aut_year);
                    string _InsAppNo = InsReqAuto.Aut_cate_cd + "-" + InsReqAuto.Aut_start_char + "-" + InsReqAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                    _insReqNo = _InsAppNo;
                    _inventoryDAL.UpdateAutoNumber(_AppinsAuto);

                    _insHdr.Grah_ref = _InsAppNo;
                    _insHdr.Grah_fuc_cd = _ReqAppNo;

                    _insHdrLog.Grah_ref = _InsAppNo;
                    _insHdrLog.Grah_fuc_cd = _ReqAppNo;

                    _generalDAL.SaveRequestApproveHear(_insHdr);
                    _generalDAL.SaveRequestApproveHear_Log(_insHdrLog);

                    _line = 0;
                    if (_insDet != null)
                    {
                        foreach (RequestApprovalDetail _itm in _insDet)
                        {
                            _line++;
                            _itm.Grad_ref = _InsAppNo;
                            _itm.Grad_line = _line;
                            _generalDAL.Save_RequestApprove_Det(_itm);
                        }
                    }

                    _line = 0;
                    if (_insDetLog != null)
                    {
                        foreach (RequestApprovalDetailLog _itm in _insDetLog)
                        {
                            _line++;
                            _itm.Grad_ref = _InsAppNo;
                            _itm.Grad_line = _line;
                            _generalDAL.Save_RequestApprove_Det_Log(_itm);
                        }
                    }

                    if (_insSer != null)
                    {
                        foreach (RequestApprovalSerials _ser in _insSer)
                        {
                            _ser.Gras_ref = _InsAppNo;
                            _generalDAL.Save_RequestApprove_Ser(_ser);
                        }

                        foreach (RequestApprovalSerialsLog _ser in _insSerLog)
                        {
                            _ser.Gras_ref = _InsAppNo;
                            _generalDAL.Save_RequestApprove_Serial_Log(_ser);
                        }
                    }


                }

                //_generalDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();

                _docNo = _ReqNo;
                _regReq = _RegReqNo;
                _insReq = _insReqNo;

                _generalDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _effect = 1;

            }
            catch (Exception err)
            {
                _effect = -1;
                _docNo = "ERROR : " + err.Message.ToString();
                _regReq = "";
                _insReq = "";
                //documentNoGRN = documentNo;
                _generalDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();

            }


            return _effect;
        }

        public DataTable GetHPCustomerDet(string _com, string _accNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHPCustomerDet(_com, _accNo);
        }

        public DataTable GetPCWara(string _com, string _pc, string _itm, string _itmStatus, DateTime _frmDt)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPCWara(_com, _pc, _itm, _itmStatus, _frmDt);
        }

        public DataTable GetDPExchangeSerial(string _company, string _pc, string _loc, string _type, string _doc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDPExchangeSerial(_company, _pc, _loc, _type, _doc);
        }
        //darshana on 11-11-2013
        public DataTable GetServiceJobDet(string _comCode, string _job)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetServiceJobDet(_comCode, _job);

        }

        //darshana on 18-11-2013
        public Int32 UpdateCommissionBulk(string invoiceNo, string itemCode, Int32 itmLine, Int32 commLine, Decimal finCommRt, Decimal finCommAmt, Int32 seqNo, string payMode, Decimal calcOn, Decimal commRate, Decimal commAmt)
        {
            Int32 _effects = 0;
            _salesDAL = new SalesDAL();
            // using (TransactionScope _tr = new TransactionScope())
            try
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _salesDAL.UpdateCommissionBulk(invoiceNo, itemCode, itmLine, commLine, finCommRt, finCommAmt, seqNo, payMode, calcOn, commRate, commAmt);
                //_salesDAL.ConnectionClose();
                _effects = 1;
                _salesDAL.TransactionCommit();
                // _tr.Complete();
            }
            catch (Exception ex)
            {
                _effects = -1;
                _salesDAL.TransactionRollback();
            }
            return _effects;
        }

        public Decimal Get_Diriya_CommissionVatRt(string accNo, DateTime ars_date)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Decimal rate = _salesDAL.Get_Diriya_CommissionVatRt(accNo, ars_date);
            _salesDAL.ConnectionClose();
            return rate;
        }

        public List<QuotationSerial> GetQuoSerials(string _No)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetQuoSerials(_No);
        }

        public Int32 SaveAuditCashVerificationAccountableCash(AuditAccountableCash _cash)
        {
            _salesDAL = new SalesDAL();
            int result = 0;
            _salesDAL.ConnectionOpen();
            result = _salesDAL.SaveAuditCashVerificationAccountableCash(_cash);
            _salesDAL.ConnectionClose();
            return result;
        }

        public int UpdateAuditAccountableCash(string _job, string _type)
        {
            _salesDAL = new SalesDAL();
            int result = 0;
            _salesDAL.ConnectionOpen();
            result = _salesDAL.UpdateAuditAccountableCash(_job, _type);
            _salesDAL.ConnectionClose();
            return result;

        }

        public List<AuditAccountableCash> GetAccounableCash(int seq, string _job)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAccounableCash(seq, _job);
        }

        public DataTable GetRevertItemDetails(DateTime _fromDate, DateTime _toDate, string _com, string _PCenter, string _User)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRevertItemDetails(_fromDate, _toDate, _com, _PCenter, _User);
        }
        public DataTable GetRevertItemDetailsAudit(DateTime _fromDate, DateTime _toDate, string _com, string _PCenter, string _User, string _jobno)
        {// Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRevertItemDetailsAudit(_fromDate, _toDate, _com, _PCenter, _User, _jobno);
        }

        public DataTable GetPromotionalDiscountSequences01(string _company, string _profitcenter, string _invoicetype, Int32 _time, string _day, DateTime _date, List<InvoiceItem> _InInvDet, List<RecieptItem> _InReceiptDet, InvoiceHeader _invoiceheader, out bool isMulty, out int _seq)
        {

            try
            {
                _salesDAL = new SalesDAL();
                string _loltype = string.Empty;
                string _membership = string.Empty;
                DataTable _loldet = null;
                List<CashPromotionDiscountDetail> _details = new List<CashPromotionDiscountDetail>();
                List<CashPromotionDiscountDetail> _finalDetails = new List<CashPromotionDiscountDetail>();
                List<MasterSalesPriorityHierarchy> _hierarchy = _salesDAL.GetSalesPriorityHierarchy(_company, _profitcenter, "PC_PRIT_HIERARCHY", "PC");
                if (_hierarchy != null && _hierarchy.Count > 0) _hierarchy = _hierarchy.Where(x => x.Mpi_cd == "PC" || x.Mpi_cd == "CHNL").ToList();
                if (!string.IsNullOrEmpty(_invoiceheader.Sah_anal_6))
                {
                    _loldet = _salesDAL.GetLoyaltyCardDetail(_invoiceheader.Sah_cus_cd, _invoiceheader.Sah_anal_6);
                    if (_loldet != null) if (_loldet.Rows.Count > 0)
                        {
                            _loltype = _loldet.Rows[0].Field<string>("salcm_loty_tp");
                            _membership = _loldet.Rows[0].Field<string>("salcm_cus_spec");
                        }
                }
                //get definition for items
                foreach (InvoiceItem _itm in _InInvDet)
                {
                    if (_itm.Sad_res_line_no != 1)
                    {
                        Int16 _isSerialized = Convert.ToInt16(_salesDAL.GetPriceLevel(_company, _itm.Sad_pbook, _itm.Sad_pb_lvl).Sapl_is_serialized);
                        Int16 _isPromotion = Convert.ToInt16(string.IsNullOrEmpty(_itm.Sad_promo_cd) || _itm.Sad_promo_cd == "0" ? 0 : 1);
                        if (_itm.Sad_conf_no == "0" || _itm.Sad_conf_no == "4")     //kapila 31/12/2016
                            _isPromotion = 0;
                        if (_hierarchy != null && _hierarchy.Count > 0)
                        {
                            foreach (MasterSalesPriorityHierarchy _one in _hierarchy)
                            {
                                string _type = _one.Mpi_cd;
                                string _value = _one.Mpi_val;
                                List<CashPromotionDiscountDetail> _List = _salesDAL.GetGeneralPromotionDiscount(_company, _type, _value, _invoicetype, _time, _day, _date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _itm.Sad_itm_cd, _isSerialized, _isPromotion);
                                if (_List != null && _List.Count > 0)
                                {
                                    _details.AddRange(_List);
                                }
                            }
                        }
                    }
                }
                //filter for pay modes
                //get distinct discount sequences
                List<int> _distinctSeqs = _details.Select(x => x.Spdd_seq).Distinct().ToList<int>();
                foreach (int seq in _distinctSeqs)
                {
                    List<CashPromotionDiscountDetail> _temDiscounts = (from _res in _details
                                                                       where _res.Spdd_seq == seq
                                                                       select _res).ToList<CashPromotionDiscountDetail>();

                    bool isAllMatch = false;
                    //has on pay mode
                    if (_InReceiptDet.Count == 1)
                    {
                        foreach (RecieptItem _recItm in _InReceiptDet)
                        {
                            List<CashPromotionDiscountDetail> _payModeList = (from _res in _temDiscounts
                                                                              where _res.Spdd_pay_tp == _recItm.Sard_pay_tp && _res.Spdd_alw_mult == 0
                                                                              select _res).ToList<CashPromotionDiscountDetail>();
                            if (_payModeList == null || _payModeList.Count <= 0)
                            {
                                isAllMatch = false;
                                break;
                            }

                            //check receipt pay mode with discount pay modes
                            //foreach (CashPromotionDiscountDetail _payTp in _temDiscounts)
                            // {
                            if (_recItm.Sard_pay_tp.ToUpper() == "CRCD")
                            {

                                //pay mode detail match
                                //filter by pd(if have)
                                if (_recItm.Sard_cc_is_promo)
                                {

                                    //01.check c_pd
                                    _temDiscounts = (from _res in _temDiscounts
                                                     where _res.Spdd_cc_pd == _recItm.Sard_cc_period && _res.Spdd_alw_cc_pro == true
                                                     select _res).ToList<CashPromotionDiscountDetail>();

                                    //02.check cc type,bank
                                    if (_temDiscounts != null && _temDiscounts.Count > 0)
                                    {
                                        _temDiscounts = (from _res in _temDiscounts
                                                         where _res.Spdd_bank == _recItm.Sard_credit_card_bank && _res.Spdd_cc_tp == _recItm.Sard_cc_tp
                                                         select _res).ToList<CashPromotionDiscountDetail>();

                                        //03.chk null bank cc type
                                        if (_temDiscounts == null || _temDiscounts.Count <= 0)
                                        {
                                            _temDiscounts = (from _res in _details
                                                             where _res.Spdd_seq == seq
                                                             select _res).ToList<CashPromotionDiscountDetail>();

                                            _temDiscounts = (from _res in _temDiscounts
                                                             where _res.Spdd_pay_tp == _recItm.Sard_pay_tp && string.IsNullOrEmpty(_res.Spdd_bank) && _res.Spdd_cc_tp == _recItm.Sard_cc_tp
                                                             select _res).ToList<CashPromotionDiscountDetail>();
                                        }

                                        //04.chk bnk  null cc type
                                        if (_temDiscounts == null || _temDiscounts.Count <= 0)
                                        {
                                            _temDiscounts = (from _res in _details
                                                             where _res.Spdd_seq == seq
                                                             select _res).ToList<CashPromotionDiscountDetail>();

                                            _temDiscounts = (from _res in _temDiscounts
                                                             where _res.Spdd_pay_tp == _recItm.Sard_pay_tp && _res.Spdd_bank == _recItm.Sard_credit_card_bank && string.IsNullOrEmpty(_res.Spdd_cc_tp)
                                                             select _res).ToList<CashPromotionDiscountDetail>();
                                        }

                                        //05. chk null bank null cc type
                                        if (_temDiscounts == null || _temDiscounts.Count <= 0)
                                        {
                                            _temDiscounts = (from _res in _details
                                                             where _res.Spdd_seq == seq
                                                             select _res).ToList<CashPromotionDiscountDetail>();

                                            _temDiscounts = (from _res in _temDiscounts
                                                             where _res.Spdd_pay_tp == _recItm.Sard_pay_tp && string.IsNullOrEmpty(_res.Spdd_bank) && string.IsNullOrEmpty(_res.Spdd_cc_tp)
                                                             select _res).ToList<CashPromotionDiscountDetail>();
                                        }
                                    }
                                }
                                else
                                {
                                    _temDiscounts = (from _res in _temDiscounts
                                                     where _res.Spdd_alw_cc_pro == false
                                                     select _res).ToList<CashPromotionDiscountDetail>();
                                    if (_temDiscounts != null && _temDiscounts.Count >= 0)
                                    {
                                        //01.check c_pd
                                        _temDiscounts = (from _res in _temDiscounts
                                                         where _res.Spdd_cc_pd == _recItm.Sard_cc_period && _res.Spdd_alw_cc_pro == true
                                                         select _res).ToList<CashPromotionDiscountDetail>();

                                        //02.check cc type,bank
                                        if (_temDiscounts != null && _temDiscounts.Count > 0)
                                        {
                                            _temDiscounts = (from _res in _temDiscounts
                                                             where _res.Spdd_bank == _recItm.Sard_credit_card_bank && _res.Spdd_cc_tp == _recItm.Sard_cc_tp
                                                             select _res).ToList<CashPromotionDiscountDetail>();

                                            //03.chk null bank cc type
                                            if (_temDiscounts == null || _temDiscounts.Count <= 0)
                                            {
                                                _temDiscounts = (from _res in _details
                                                                 where _res.Spdd_seq == seq
                                                                 select _res).ToList<CashPromotionDiscountDetail>();

                                                _temDiscounts = (from _res in _temDiscounts
                                                                 where _res.Spdd_pay_tp == _recItm.Sard_pay_tp && string.IsNullOrEmpty(_res.Spdd_bank) && _res.Spdd_cc_tp == _recItm.Sard_cc_tp
                                                                 select _res).ToList<CashPromotionDiscountDetail>();
                                            }

                                            //04.chk bnk  null cc type
                                            if (_temDiscounts == null || _temDiscounts.Count <= 0)
                                            {
                                                _temDiscounts = (from _res in _details
                                                                 where _res.Spdd_seq == seq
                                                                 select _res).ToList<CashPromotionDiscountDetail>();

                                                _temDiscounts = (from _res in _temDiscounts
                                                                 where _res.Spdd_pay_tp == _recItm.Sard_pay_tp && _res.Spdd_bank == _recItm.Sard_credit_card_bank && string.IsNullOrEmpty(_res.Spdd_cc_tp)
                                                                 select _res).ToList<CashPromotionDiscountDetail>();
                                            }

                                            //05. chk null bank null cc type
                                            if (_temDiscounts == null || _temDiscounts.Count <= 0)
                                            {
                                                _temDiscounts = (from _res in _details
                                                                 where _res.Spdd_seq == seq
                                                                 select _res).ToList<CashPromotionDiscountDetail>();

                                                _temDiscounts = (from _res in _temDiscounts
                                                                 where _res.Spdd_pay_tp == _recItm.Sard_pay_tp && string.IsNullOrEmpty(_res.Spdd_bank) && string.IsNullOrEmpty(_res.Spdd_cc_tp)
                                                                 select _res).ToList<CashPromotionDiscountDetail>();
                                            }

                                        }
                                    }
                                }
                            }

                            else if (_recItm.Sard_pay_tp.ToUpper() == "CASH")
                            {
                                _temDiscounts = (from _res in _temDiscounts
                                                 where _res.Spdd_pay_tp == _recItm.Sard_pay_tp
                                                 select _res).ToList<CashPromotionDiscountDetail>();
                            }
                            else if (_recItm.Sard_pay_tp.ToUpper() == "LORE")
                            {
                                //chk cd type and membership
                                _temDiscounts = (from _res in _temDiscounts
                                                 where _res.Spdd_bank == _loltype && _res.Spdd_cc_tp == _membership && _res.Spdd_pay_tp == _recItm.Sard_pay_tp
                                                 select _res).ToList<CashPromotionDiscountDetail>();
                                if (_temDiscounts == null || _temDiscounts.Count <= 0)
                                {
                                    _temDiscounts = (from _res in _details
                                                     where _res.Spdd_seq == seq
                                                     select _res).ToList<CashPromotionDiscountDetail>();

                                    _temDiscounts = (from _res in _temDiscounts
                                                     where _res.Spdd_pay_tp == _recItm.Sard_pay_tp && _res.Spdd_pay_tp == _recItm.Sard_pay_tp && _res.Spdd_pay_tp == _recItm.Sard_pay_tp && string.IsNullOrEmpty(_res.Spdd_bank) && string.IsNullOrEmpty(_res.Spdd_cc_tp)
                                                     select _res).ToList<CashPromotionDiscountDetail>();
                                }
                            }
                            else if (_recItm.Sard_pay_tp.ToUpper() == "CHEQUE" || _recItm.Sard_pay_tp.ToUpper() == "DEBIT")
                            {
                                //chk cd type and membership
                                _temDiscounts = (from _res in _temDiscounts
                                                 where _res.Spdd_pay_tp == _recItm.Sard_pay_tp
                                                 select _res).ToList<CashPromotionDiscountDetail>();
                                if (_temDiscounts == null || _temDiscounts.Count <= 0)
                                {
                                    _temDiscounts = (from _res in _details
                                                     where _res.Spdd_seq == seq
                                                     select _res).ToList<CashPromotionDiscountDetail>();

                                    _temDiscounts = (from _res in _temDiscounts
                                                     where _res.Spdd_pay_tp == _recItm.Sard_pay_tp && _res.Spdd_bank == _recItm.Sard_chq_bank_cd
                                                     select _res).ToList<CashPromotionDiscountDetail>();
                                }
                                if (_temDiscounts == null || _temDiscounts.Count <= 0)
                                {
                                    _temDiscounts = (from _res in _details
                                                     where _res.Spdd_seq == seq
                                                     select _res).ToList<CashPromotionDiscountDetail>();

                                    _temDiscounts = (from _res in _temDiscounts
                                                     where _res.Spdd_pay_tp == _recItm.Sard_pay_tp && string.IsNullOrEmpty(_recItm.Sard_chq_bank_cd)
                                                     select _res).ToList<CashPromotionDiscountDetail>();
                                }
                            }


                        }
                    }
                    //has multiple pay modes
                    else
                    {
                        isAllMatch = false;
                        List<CashPromotionDiscountDetail> _temDiscountsMulti = (from _res in _details
                                                                                where _res.Spdd_seq == seq && _res.Spdd_alw_mult == 1
                                                                                select _res).ToList<CashPromotionDiscountDetail>();
                        if (_temDiscountsMulti == null || _temDiscountsMulti.Count <= 0)
                        {
                            continue;
                        }

                        foreach (RecieptItem _recItm in _InReceiptDet)
                        {
                            if (_recItm.Sard_pay_tp.ToUpper() == "CRCD")
                            {

                                //pay mode detail match
                                //filter by pd(if have)
                                if (_recItm.Sard_cc_is_promo)
                                {

                                    //01.check c_pd
                                    _temDiscountsMulti = (from _res in _temDiscountsMulti
                                                          where _res.Spdd_cc_pd == _recItm.Sard_cc_period && _res.Spdd_alw_cc_pro == true
                                                          select _res).ToList<CashPromotionDiscountDetail>();

                                    //02.check cc type,bank
                                    if (_temDiscountsMulti != null && _temDiscountsMulti.Count > 0)
                                    {
                                        _temDiscountsMulti = (from _res in _temDiscountsMulti
                                                              where _res.Spdd_bank == _recItm.Sard_credit_card_bank && _res.Spdd_cc_tp == _recItm.Sard_cc_tp
                                                              select _res).ToList<CashPromotionDiscountDetail>();

                                        //03.chk null bank cc type
                                        if (_temDiscountsMulti == null || _temDiscountsMulti.Count <= 0)
                                        {
                                            _temDiscountsMulti = (from _res in _details
                                                                  where _res.Spdd_seq == seq && _res.Spdd_alw_mult == 1
                                                                  select _res).ToList<CashPromotionDiscountDetail>();
                                            _temDiscountsMulti = (from _res in _temDiscountsMulti
                                                                  where _res.Spdd_pay_tp == _recItm.Sard_pay_tp && string.IsNullOrEmpty(_res.Spdd_bank) && _res.Spdd_cc_tp == _recItm.Sard_cc_tp
                                                                  select _res).ToList<CashPromotionDiscountDetail>();
                                        }

                                        //04.chk bnk  null cc type
                                        if (_temDiscountsMulti == null || _temDiscountsMulti.Count <= 0)
                                        {
                                            _temDiscountsMulti = (from _res in _details
                                                                  where _res.Spdd_seq == seq && _res.Spdd_alw_mult == 1
                                                                  select _res).ToList<CashPromotionDiscountDetail>();
                                            _temDiscountsMulti = (from _res in _temDiscountsMulti
                                                                  where _res.Spdd_pay_tp == _recItm.Sard_pay_tp && _res.Spdd_bank == _recItm.Sard_credit_card_bank && string.IsNullOrEmpty(_res.Spdd_cc_tp)
                                                                  select _res).ToList<CashPromotionDiscountDetail>();
                                        }

                                        //05. chk null bank null cc type
                                        if (_temDiscountsMulti == null || _temDiscountsMulti.Count <= 0)
                                        {
                                            _temDiscountsMulti = (from _res in _details
                                                                  where _res.Spdd_seq == seq && _res.Spdd_alw_mult == 1
                                                                  select _res).ToList<CashPromotionDiscountDetail>();
                                            _temDiscountsMulti = (from _res in _temDiscountsMulti
                                                                  where _res.Spdd_pay_tp == _recItm.Sard_pay_tp && string.IsNullOrEmpty(_res.Spdd_bank) && string.IsNullOrEmpty(_res.Spdd_cc_tp)
                                                                  select _res).ToList<CashPromotionDiscountDetail>();
                                        }
                                    }
                                }
                                else
                                {
                                    _temDiscountsMulti = (from _res in _temDiscountsMulti
                                                          where _res.Spdd_alw_cc_pro == false
                                                          select _res).ToList<CashPromotionDiscountDetail>();
                                    if (_temDiscountsMulti != null && _temDiscountsMulti.Count >= 0)
                                    {

                                        //02.check cc type,bank
                                        if (_temDiscountsMulti != null && _temDiscountsMulti.Count > 0)
                                        {
                                            _temDiscountsMulti = (from _res in _temDiscountsMulti
                                                                  where _res.Spdd_bank == _recItm.Sard_credit_card_bank && _res.Spdd_cc_tp == _recItm.Sard_cc_tp
                                                                  select _res).ToList<CashPromotionDiscountDetail>();

                                            //03.chk null bank cc type
                                            if (_temDiscountsMulti == null || _temDiscountsMulti.Count <= 0)
                                            {
                                                _temDiscountsMulti = (from _res in _details
                                                                      where _res.Spdd_seq == seq && _res.Spdd_alw_mult == 1
                                                                      select _res).ToList<CashPromotionDiscountDetail>();
                                                _temDiscountsMulti = (from _res in _temDiscountsMulti
                                                                      where _res.Spdd_pay_tp == _recItm.Sard_pay_tp && string.IsNullOrEmpty(_res.Spdd_bank) && _res.Spdd_cc_tp == _recItm.Sard_cc_tp
                                                                      select _res).ToList<CashPromotionDiscountDetail>();
                                            }

                                            //04.chk bnk  null cc type
                                            if (_temDiscountsMulti == null || _temDiscountsMulti.Count <= 0)
                                            {
                                                _temDiscountsMulti = (from _res in _details
                                                                      where _res.Spdd_seq == seq && _res.Spdd_alw_mult == 1
                                                                      select _res).ToList<CashPromotionDiscountDetail>();
                                                _temDiscountsMulti = (from _res in _temDiscountsMulti
                                                                      where _res.Spdd_pay_tp == _recItm.Sard_pay_tp && _res.Spdd_bank == _recItm.Sard_credit_card_bank && string.IsNullOrEmpty(_res.Spdd_cc_tp)
                                                                      select _res).ToList<CashPromotionDiscountDetail>();
                                            }

                                            //05. chk null bank null cc type
                                            if (_temDiscountsMulti == null || _temDiscountsMulti.Count <= 0)
                                            {
                                                _temDiscountsMulti = (from _res in _details
                                                                      where _res.Spdd_seq == seq && _res.Spdd_alw_mult == 1
                                                                      select _res).ToList<CashPromotionDiscountDetail>();
                                                _temDiscountsMulti = (from _res in _temDiscountsMulti
                                                                      where _res.Spdd_pay_tp == _recItm.Sard_pay_tp && string.IsNullOrEmpty(_res.Spdd_bank) && string.IsNullOrEmpty(_res.Spdd_cc_tp)
                                                                      select _res).ToList<CashPromotionDiscountDetail>();
                                            }

                                        }
                                    }
                                }
                            }

                            else if (_recItm.Sard_pay_tp.ToUpper() == "CASH")
                            {
                                _temDiscountsMulti = (from _res in _temDiscountsMulti
                                                      where _res.Spdd_pay_tp == _recItm.Sard_pay_tp
                                                      select _res).ToList<CashPromotionDiscountDetail>();
                            }
                            else if (_recItm.Sard_pay_tp.ToUpper() == "LORE")
                            {
                                //chk cd type and membership
                                _temDiscountsMulti = (from _res in _temDiscountsMulti
                                                      where _res.Spdd_bank == _loltype && _res.Spdd_cc_tp == _membership && _res.Spdd_pay_tp == _recItm.Sard_pay_tp
                                                      select _res).ToList<CashPromotionDiscountDetail>();
                                if (_temDiscountsMulti != null || _temDiscountsMulti.Count > 0)
                                {
                                    _temDiscountsMulti = (from _res in _temDiscountsMulti
                                                          where _res.Spdd_pay_tp == _recItm.Sard_pay_tp && string.IsNullOrEmpty(_res.Spdd_bank) && string.IsNullOrEmpty(_res.Spdd_cc_tp)
                                                          select _res).ToList<CashPromotionDiscountDetail>();
                                }
                            }
                            else if (_recItm.Sard_pay_tp.ToUpper() == "CHEQUE" || _recItm.Sard_pay_tp.ToUpper() == "DEBIT")
                            {
                                //chk cd type and membership
                                _temDiscountsMulti = (from _res in _temDiscountsMulti
                                                      where _res.Spdd_pay_tp == _recItm.Sard_pay_tp
                                                      select _res).ToList<CashPromotionDiscountDetail>();
                                if (_temDiscountsMulti != null && _temDiscountsMulti.Count > 0)
                                {

                                    _temDiscountsMulti = (from _res in _temDiscountsMulti
                                                          where _res.Spdd_pay_tp == _recItm.Sard_pay_tp && _res.Spdd_bank == _recItm.Sard_chq_bank_cd
                                                          select _res).ToList<CashPromotionDiscountDetail>();
                                }
                                if (_temDiscountsMulti == null || _temDiscountsMulti.Count <= 0)
                                {
                                    _temDiscountsMulti = (from _res in _details
                                                          where _res.Spdd_seq == seq && _res.Spdd_alw_mult == 1
                                                          select _res).ToList<CashPromotionDiscountDetail>();
                                    _temDiscountsMulti = (from _res in _temDiscountsMulti
                                                          where _res.Spdd_pay_tp == _recItm.Sard_pay_tp && string.IsNullOrEmpty(_recItm.Sard_chq_bank_cd)
                                                          select _res).ToList<CashPromotionDiscountDetail>();
                                }
                            }

                            if (_temDiscountsMulti == null || _temDiscountsMulti.Count <= 0)
                            {
                                isAllMatch = false;
                            }
                            else
                            {
                                isAllMatch = true;
                            }


                            if (!isAllMatch)
                            {
                                goto END;
                            }

                            _temDiscountsMulti = (from _res in _details
                                                  where _res.Spdd_seq == seq && _res.Spdd_alw_mult == 1
                                                  select _res).ToList<CashPromotionDiscountDetail>();
                        }
                    }
                END:
                    //if match add to final list
                    if (isAllMatch)
                    {
                        _finalDetails.AddRange(_temDiscounts);
                    }
                }
                _finalDetails = _finalDetails.OrderByDescending(x => x.Spdd_seq).ToList<CashPromotionDiscountDetail>();

                isMulty = false;
                _seq = _finalDetails[0].Spdd_seq;
                return null;

                //********************************************************************

                /*
                DataTable _result = new DataTable();
                _result.TableName = "_result";
                _result.Columns.Add("sequence");
                _result.Columns.Add("circular");
                _result.Columns.Add("disProduct");
                _result.Columns.Add("disRate");
                _result.Columns.Add("finalValue");
                //format list
                List<CashPromotionDiscountDetail> _distinctDetail = _finalDetails.GroupBy(x => x.Spdd_seq).Select(x => x.First()).ToList<CashPromotionDiscountDetail>();

                if (_distinctDetail == null || _distinctDetail.Count <= 0)
                {
                    return null;
                }
                foreach (CashPromotionDiscountDetail _det in _distinctDetail)
                {
                    List<InvoiceItem> copy = new List<InvoiceItem>(_InInvDet);
                    copy.ForEach(x => x.Sad_dis_type = "");
                    copy.ForEach(x => x.Sad_disc_amt = 0);
                    copy.ForEach(x => x.Sad_disc_rt = 0);
                    copy.ForEach(x => x.Sad_dis_line = 0);
                    copy.ForEach(x => x.Sad_dis_seq = 0);
                    DataRow _dr = _result.NewRow();
                    _dr[0] = _det.Spdd_seq;
                    _dr[1] = "aa";//_salesDAL.GetPromotionalHeaderBySeq(_det.Spdd_seq).Spdh_circular;
                    //get header
                    //CashPromotionDiscountHeader _hdr=_salesDAL.getpr
                    List<InvoiceItem> _discountedItems;
                    decimal tobepay;
                    bool isDiff;
                    GetGeneralPromotionProcess(_det.Spdd_seq, _company, copy, out  _discountedItems, out  isDiff, out  tobepay, _invoiceheader);
                    string _disItems = "";
                    foreach (InvoiceItem _itm in _discountedItems)
                    {
                        if (_itm.Sad_dis_type == "P")
                        {
                            _disItems = _disItems + _itm.Sad_itm_cd + " , ";
                        }
                    }
                    if (_disItems.Length > 0)
                    {
                        _disItems = _disItems.Substring(0, _disItems.Length - 2);
                    }
                    _dr[2] = _disItems;
                    _dr[3] = _det.Spdd_disc_rt;
                    _dr[4] = tobepay;
                    _result.Rows.Add(_dr);
                }

                //return final set for user selection
                return _result;
                 */
            }
            catch (Exception ex)
            {
                isMulty = false;
                _seq = -9999;
                return null;
            }
        }

        public int SaveSpeicalReschedule(List<HpSheduleDetails> _insertList, List<HpSheduleDetails> _update, out string _error)
        {
            try
            {
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                if (_update != null && _update.Count > 0)
                {
                    foreach (HpSheduleDetails _sche in _update)
                    {
                        _salesDAL.UpdateHPSheduleSpReshdule(_sche.Hts_acc_no, _sche.Hts_rnt_no, _sche.Hts_rnt_val, _sche.Hts_tot_val, _sche.Hts_mod_by);
                    }
                }
                foreach (HpSheduleDetails sche in _insertList)
                {
                    sche.Hts_seq = _inventoryDAL.GetSerialID();
                    _salesDAL.SaveHpShedule(sche);
                }
                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _error = "";
                return 1;
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _error = ex.Message;
                return -1;
            }
        }


        public List<PriceDetailRef> GetPrice_01(string _company, string _profitCenter, string _invType, string _priceBook, string _priceLevel, string _customer, string _item, decimal _qty, DateTime _currentDate)
        {

            _salesDAL = new SalesDAL();
            //Check the price for the specific customer availabillity (even for special promotions)
            //Check the price for special promotion without Customer
            //Check the price for normal price
            //If no price =>message

            List<PriceDetailRef> _priceDetailRefNew = new List<PriceDetailRef>();
            List<PriceDetailRef> _priceDetailRef = new List<PriceDetailRef>();
            List<PriceDetailRef> _returnlist = new List<PriceDetailRef>();

            //1.With customer
            _priceDetailRefNew = _salesDAL.GetPriceDetail(_priceBook, _priceLevel, _item, _qty, _currentDate, _customer);

            //2.Without Customer
            if (_priceDetailRefNew.Count <= 0)
            {
                _priceDetailRefNew = _salesDAL.GetPriceDetail(_priceBook, _priceLevel, _item, _qty, _currentDate, string.Empty);
            }

            _priceDetailRef = (from _res in _priceDetailRefNew
                               orderby _res.Sapd_from_date descending, _res.Sapd_pb_seq descending, _res.Sapd_qty_from
                               select _res).ToList<PriceDetailRef>();

            List<PriceDetailRef> _lists = new List<PriceDetailRef>();
            var _types = _priceDetailRef.Select(x => x.Sapd_price_type).Distinct();
            //add only price type 0 prices
            foreach (var _type in _types)
            {
                if (_type != 0)
                {
                    var _lst = _priceDetailRef.Where(x => x.Sapd_price_type == _type).ToList();
                    if (_lst != null)
                        if (_lst.Count > 0) ;
                    // _lists.AddRange(_lst);
                }
                else
                {
                    var _lst = _priceDetailRef.Where(x => x.Sapd_price_type == _type).ToList();
                    if (_lst != null)
                        if (_lst.Count > 0)
                            _lists.Add(_lst[0]);
                }
            }
            return _lists;

        }

        public List<PriceDetailRef> GetPriceForExchange(string _company, string _profitCenter, string _invType, string _priceBook, string _priceLevel, string _customer, string _item, decimal _qty, DateTime _currentDate)
        {

            _salesDAL = new SalesDAL();
            //Check the price for the specific customer availabillity (even for special promotions)
            //Check the price for special promotion without Customer
            //Check the price for normal price
            //If no price =>message

            List<PriceDetailRef> _priceDetailRefNew = new List<PriceDetailRef>();
            List<PriceDetailRef> _priceDetailRef = new List<PriceDetailRef>();
            List<PriceDetailRef> _returnlist = new List<PriceDetailRef>();

            //1.With customer
            _priceDetailRefNew = _salesDAL.GetPriceDetail(_priceBook, _priceLevel, _item, _qty, _currentDate, _customer);

            //2.Without Customer
            if (_priceDetailRefNew.Count <= 0)
            {
                _priceDetailRefNew = _salesDAL.GetPriceDetail(_priceBook, _priceLevel, _item, _qty, _currentDate, string.Empty);
            }

            _priceDetailRef = (from _res in _priceDetailRefNew
                               orderby _res.Sapd_from_date descending, _res.Sapd_pb_seq descending, _res.Sapd_qty_from
                               select _res).ToList<PriceDetailRef>();

            List<PriceDetailRef> _lists = new List<PriceDetailRef>();
            var _types = _priceDetailRef.Select(x => x.Sapd_price_type).Distinct();
            //add only price type 0 prices
            foreach (var _type in _types)
            {
                if (_type != 0)
                {
                    var _lst = _priceDetailRef.Where(x => x.Sapd_price_type == _type).ToList();
                    if (_lst != null)
                        if (_lst.Count > 0)
                            _lists.AddRange(_lst);
                }
                else
                {
                    var _lst = _priceDetailRef.Where(x => x.Sapd_price_type == _type).ToList();
                    if (_lst != null)
                        if (_lst.Count > 0)
                            _lists.Add(_lst[0]);
                }
            }
            return _lists;

        }

        public bool GetLimit(string _company, string _partycd, string _partyval, string _code1, string _code2, string _code3, Int16 _valuetp, decimal _uvalue)
        {
            _salesDAL = new SalesDAL();
            bool _isok = false;
            DataTable _tbl = _salesDAL.GetLimit(_company, _partycd, _partyval, _code1, _code2, _code3, _valuetp);
            decimal _tblval = 0;
            if (_tbl != null && _tbl.Rows.Count > 0) _tblval = _tbl.Rows[0].Field<decimal>("rflm_val1");
            if (_valuetp == 1)
            { if (_tblval < _uvalue) _isok = false; else _isok = true; }
            else
            { if (_tblval > _uvalue) _isok = false; else _isok = true; }
            return _isok;
        }

        public List<HpTransaction> GetHpTransactionByRef(string _ref)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHpTransactionByRef(_ref);
        }

        public RecieptHeader Check_ManRef_Rec(string com, string pc, string recTp, string refNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Check_ManRef_Rec(com, pc, recTp, refNo);
        }

        public RecieptHeader Check_ManRef_Rec_prefix(string com, string pc, string recTp, string refNo, string _prefix)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Check_ManRef_Rec_prefix(com, pc, recTp, refNo, _prefix);
        }


        public RecieptHeaderTBS Check_ManRef_RecTBS(string com, string pc, string recTp, string refNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Check_ManRef_RecTBS(com, pc, recTp, refNo);
        }

        public DataTable GetSerialPriceForHp(string _company, string _Location, List<PriceDefinitionRef> _priceList, string _item, DateTime _currentDate)
        {

            _salesDAL = new SalesDAL();
            DataTable _tmpPriceList = new DataTable("dd");
            DataTable _serialPriceList = new DataTable();
            //_serialPriceList.TableName = "aa";
            //_serialPriceList.Columns.Add("Code");


            //DataTable _serialPriceList = new DataTable();
            // _serialPriceList = _tmpPriceList.Clone();

            foreach (PriceDefinitionRef z in _priceList)
            {
                PriceBookLevelRef _lvlDef = new PriceBookLevelRef();
                _lvlDef = _salesDAL.GetPriceLevelForHp(_company, z.Sadd_pb, z.Sadd_p_lvl, null);

                if (_lvlDef.Sapl_is_serialized == true)
                {
                    _tmpPriceList = new DataTable();
                    _tmpPriceList = _salesDAL.GetSerialPriceList(_item, _currentDate.Date, _company, _Location, z.Sadd_pb, z.Sadd_p_lvl);

                    if (_serialPriceList.Rows.Count == 0)
                    {
                        _serialPriceList = _tmpPriceList.Clone();
                    }

                    if (_tmpPriceList.Rows.Count > 0)
                    {
                        //DataRow _dtr = _tmpPriceList.Rows[0];
                        //_serialPriceList.Rows.Add(_dtr);  
                        foreach (DataRow dr in _tmpPriceList.Rows)
                        {
                            _serialPriceList.Rows.Add(dr.ItemArray);
                            //goto L1;
                        }

                    }
                }
            L1: int i = 0;
            }

            if (_serialPriceList.Rows.Count > 0)
            {
                return _serialPriceList;
            }
            else
            {
                return null;
            }

        }


        public Int32 SaveCashConversionEntry_BackUp(InvoiceHeader _hpReversInvoiceHeader, List<InvoiceItem> _hpReversInvoiceItem, List<RecieptHeader> _hpReversReceiptHeader, InvoiceHeader _ccInvoiceHeader, List<InvoiceItem> _ccInvoiceItem, RecieptHeader _ccReceiptHeader, List<RecieptItem> _ccReceiptItem, MasterAutoNumber _reversInvoiceAuto, MasterAutoNumber _reversReceiptAuto, MasterAutoNumber _convertInvoiceAuto, MasterAutoNumber _convertReceiptAuto, HpInsurance _reversInsurance, InventoryHeader _ccInv, MasterAutoNumber _invAuto, out string _convertInvoice,
                    RequestApprovalHeader _regReqHdr, List<RequestApprovalDetail> _regReqDet, List<RequestApprovalSerials> _regReqSer, RequestApprovalHeaderLog _regReqLogHdr, List<RequestApprovalDetailLog> _regReqLogDet, List<RequestApprovalSerialsLog> _regReqLogSer, MasterAutoNumber _regReqAuto, RequestApprovalHeader _insReqHdr, List<RequestApprovalDetail> _insReqDet, List<RequestApprovalSerials> _insReqSer, RequestApprovalHeaderLog _insReqLogHdr, List<RequestApprovalDetailLog> _insReqLogDet, List<RequestApprovalSerialsLog> _insReqLogSer, MasterAutoNumber _insReqAuto, List<RecieptHeader> _regReciept, List<RecieptItem> _regRecieptItem, MasterAutoNumber _regRecieptAuto, List<RecieptHeader> _insReciept, List<RecieptItem> _insRecieptItem, MasterAutoNumber _insRecieptAuto, int option, HpTransaction _transaction, out string _err)
        {
            _reversInvoiceAuto.Aut_modify_dt = null;
            _reversReceiptAuto.Aut_modify_dt = null;
            _convertInvoiceAuto.Aut_modify_dt = null;
            _convertReceiptAuto.Aut_modify_dt = null;

            _ccReceiptHeader.Sar_session_id = _hpReversInvoiceHeader.Sah_session_id;
            _ccReceiptHeader.Sar_create_by = _hpReversInvoiceHeader.Sah_cre_by;
            _ccReceiptHeader.Sar_create_when = _hpReversInvoiceHeader.Sah_cre_when;
            _ccReceiptHeader.Sar_mod_by = _hpReversInvoiceHeader.Sah_mod_by;
            _ccReceiptHeader.Sar_mod_when = _hpReversInvoiceHeader.Sah_mod_when;

            Int32 _effect = 0;


            string _ccInvoiceNo = string.Empty;
            string _ccReceiptNo = string.Empty;
            string _ccDeliveryOrder = string.Empty;
            string _error = string.Empty;
            List<int> _revReceiptSeqNo = new List<int>();

            string _invoiceNo = "";
            ReptCommonDAL _reptDAL = new ReptCommonDAL();
            try
            {
                //using (TransactionScope _tr = new TransactionScope())
                //{

                //ADDED 2013/04/04
                //REQUEST/APPROVAL/RECIEPT GENARATION

                if (option == 1)
                {
                    CashConvertionApproval(_regReqHdr, null, null, null, null, null, null, true, _insReqHdr, null, null, null, null, null, null, true, _regReciept, _regRecieptItem, _regRecieptAuto, true, _insReciept, _insRecieptItem, _insRecieptAuto, true, true, true);
                }
                else if (option == 2)
                {
                    CashConvertionApproval(_regReqHdr, null, null, null, null, null, null, true, null, null, null, null, null, null, null, false, _regReciept, _regRecieptItem, _regRecieptAuto, true, null, null, null, false, true, false);
                }
                else if (option == 3)
                {
                    CashConvertionApproval(null, null, null, null, null, null, null, false, _insReqHdr, null, null, null, null, null, null, true, null, null, null, false, _insReciept, _insRecieptItem, _insRecieptAuto, true, false, true);
                }
                else if (option == 4)
                {
                    CashConvertionApproval(_regReqHdr, _regReqDet, _regReqSer, _regReqLogHdr, _regReqLogDet, _regReqLogSer, _regReqAuto, true, _insReqHdr, _insReqDet, _insReqSer, _insReqLogHdr, _insReqLogDet, _insReqLogSer, _insReqAuto, true, null, null, null, false, null, null, null, false, false, false);
                }
                else if (option == 5)
                {
                    CashConvertionApproval(_regReqHdr, _regReqDet, _regReqSer, _regReqLogHdr, _regReqLogDet, _regReqLogSer, _regReqAuto, true, _insReqHdr, _insReqDet, _insReqSer, _insReqLogHdr, _insReqLogDet, _insReqLogSer, _insReqAuto, true, null, null, null, false, _insReciept, _insRecieptItem, _insRecieptAuto, true, false, false);
                }
                else if (option == 6)
                {
                    CashConvertionApproval(_regReqHdr, _regReqDet, _regReqSer, _regReqLogHdr, _regReqLogDet, _regReqLogSer, _regReqAuto, true, _insReqHdr, _insReqDet, _insReqSer, _insReqLogHdr, _insReqLogDet, _insReqLogSer, _insReqAuto, true, _regReciept, _regRecieptItem, _regRecieptAuto, true, null, null, null, false, false, false);
                }
                else if (option == 7)
                {
                    CashConvertionApproval(_regReqHdr, _regReqDet, _regReqSer, _regReqLogHdr, _regReqLogDet, _regReqLogSer, _regReqAuto, true, _insReqHdr, _insReqDet, _insReqSer, _insReqLogHdr, _insReqLogDet, _insReqLogSer, _insReqAuto, true, _regReciept, _regRecieptItem, _regRecieptAuto, true, _insReciept, _insRecieptItem, _insRecieptAuto, true, false, false);
                }
                else if (option == 8)
                {
                    CashConvertionApproval(_regReqHdr, _regReqDet, _regReqSer, _regReqLogHdr, _regReqLogDet, _regReqLogSer, _regReqAuto, true, null, null, null, null, null, null, null, false, _regReciept, _regRecieptItem, _regRecieptAuto, true, null, null, null, false, false, false);
                }
                else if (option == 9)
                {
                    CashConvertionApproval(null, null, null, null, null, null, null, false, _insReqHdr, _insReqDet, _insReqSer, _insReqLogHdr, _insReqLogDet, _insReqLogSer, _insReqAuto, true, null, null, null, false, _insReciept, _insRecieptItem, _insRecieptAuto, true, false, false);
                }
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                _inventoryRepDAL = new ReptCommonDAL();
                _generalDAL = new GeneralDAL();
                CommonSearchBLL _comm = new CommonSearchBLL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();
                _reptDAL.ConnectionOpen();
                _reptDAL.BeginTransaction();

                //END
                _reptDAL.StartTimeModule("CC", "SAVE_STAR", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);

                Int32 _invoiceLine = 1;
                //Preparing the variable for the save
                _reptDAL.StartTimeModule("CC", "SAVE_STAR_OBJ_FILL", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                #region  Revers Entry of the Hire Sale - Invoice and Receipt
                Int32 _reversInvoiceSeqNo = _inventoryDAL.GetSerialID();
                _invoiceNo = _ccInvoiceHeader.Sah_inv_no;
                _hpReversInvoiceHeader.Sah_seq_no = _reversInvoiceSeqNo;
                _hpReversInvoiceHeader.Sah_inv_no = _reversInvoiceSeqNo.ToString();


                var _list = from _one in _hpReversReceiptHeader
                            group _one by new { _one.Sar_manual_ref_no, _one.Sar_prefix, _one.Sar_receipt_type, _one.Sar_is_oth_shop, _one.Sar_receipt_no } into _itm
                            select new { Sar_prefix = _itm.Key.Sar_prefix, Sar_manual_ref_no = _itm.Key.Sar_manual_ref_no, Sar_receipt_type = _itm.Key.Sar_receipt_type, Sar_tot_settle_amt = _itm.Sum(p => p.Sar_tot_settle_amt), Sar_comm_amt = _itm.Sum(y => y.Sar_comm_amt), Sar_anal_5 = _itm.Sum(s => s.Sar_anal_5), Oth_col = _itm.Key.Sar_is_oth_shop, Rec_no = _itm.Key.Sar_receipt_no };

                List<RecieptHeader> _hpReversReceiptHeaderActual = new List<RecieptHeader>();
                foreach (var _itm in _list)
                {
                    if (_itm.Oth_col)
                    {
                        List<HpTransaction> _txnRef = _salesDAL.GetHpTransactionByRef(_itm.Rec_no);
                        if (_txnRef != null && _txnRef.Count > 0)
                        {

                        }
                        else
                        {
                            continue;
                        }
                    }

                    RecieptHeader _hdr = new RecieptHeader();
                    _hdr.Sar_seq_no = _inventoryDAL.GetSerialID();
                    _revReceiptSeqNo.Add(_hdr.Sar_seq_no);
                    _hdr.Sar_receipt_no = _hdr.Sar_seq_no.ToString();
                    _hdr.Sar_manual_ref_no = _itm.Sar_manual_ref_no;
                    _hdr.Sar_prefix = _itm.Sar_prefix;
                    _hdr.Sar_tot_settle_amt = _itm.Sar_tot_settle_amt;
                    _hdr.Sar_direct = false;
                    _hdr.Sar_receipt_date = _hpReversInvoiceHeader.Sah_dt;
                    _hdr.Sar_acc_no = _hpReversInvoiceHeader.Sah_anal_2;
                    _hdr.Sar_act = true;
                    _hdr.Sar_com_cd = _ccInvoiceHeader.Sah_com;
                    _hdr.Sar_comm_amt = _itm.Sar_comm_amt;
                    _hdr.Sar_anal_5 = _itm.Sar_anal_5;
                    _hdr.Sar_create_by = _ccInvoiceHeader.Sah_cre_by;
                    _hdr.Sar_create_when = DateTime.Now;
                    _hdr.Sar_currency_cd = _ccInvoiceHeader.Sah_currency;
                    _hdr.Sar_debtor_add_1 = _ccInvoiceHeader.Sah_cus_add1;
                    _hdr.Sar_debtor_add_2 = _ccInvoiceHeader.Sah_cus_add2;
                    _hdr.Sar_debtor_cd = _ccInvoiceHeader.Sah_cus_cd;
                    _hdr.Sar_debtor_name = _ccInvoiceHeader.Sah_cus_name;
                    _hdr.Sar_direct_deposit_bank_cd = string.Empty;
                    _hdr.Sar_direct_deposit_branch = string.Empty;
                    _hdr.Sar_epf_rate = 0;
                    _hdr.Sar_esd_rate = 0;
                    _hdr.Sar_is_mgr_iss = false;
                    _hdr.Sar_is_oth_shop = false;
                    _hdr.Sar_is_used = false;
                    _hdr.Sar_mob_no = string.Empty;
                    _hdr.Sar_mod_by = _ccInvoiceHeader.Sah_cre_by;
                    _hdr.Sar_mod_when = DateTime.Now;
                    _hdr.Sar_nic_no = string.Empty;
                    _hdr.Sar_oth_sr = string.Empty;
                    _hdr.Sar_profit_center_cd = _ccInvoiceHeader.Sah_pc;
                    _hdr.Sar_receipt_date = Convert.ToDateTime(_ccInvoiceHeader.Sah_dt);
                    if (_itm.Sar_receipt_type == "HPDPM" || _itm.Sar_receipt_type == "HPDPS")
                    { _hdr.Sar_receipt_type = "HPDRV"; }
                    else if (_itm.Sar_receipt_type == "VHINSR")
                    {
                        _hdr.Sar_receipt_type = "VHINSRR";
                    }
                    else if (_itm.Sar_receipt_type == "INSUR")
                    {
                        _hdr.Sar_receipt_type = "INSURR";
                    }

                    else if (_itm.Sar_receipt_type == "DPINSU")
                    {
                        _hdr.Sar_receipt_type = "DPINSR";
                    }
                    else { _hdr.Sar_receipt_type = "HPREV"; }
                    _hdr.Sar_ref_doc = string.Empty;
                    _hdr.Sar_remarks = string.Empty;
                    _hdr.Sar_ser_job_no = string.Empty;
                    _hdr.Sar_session_id = _ccInvoiceHeader.Sah_session_id;
                    _hdr.Sar_tel_no = string.Empty;
                    _hdr.Sar_uploaded_to_finance = false;
                    _hdr.Sar_used_amt = 0;
                    _hdr.Sar_wht_rate = 0;
                    _hdr.Sar_create_by = _hpReversInvoiceHeader.Sah_cre_by;
                    _hdr.Sar_create_when = _hpReversInvoiceHeader.Sah_cre_when;
                    _hdr.Sar_mod_by = _hpReversInvoiceHeader.Sah_mod_by;
                    _hdr.Sar_mod_when = _hpReversInvoiceHeader.Sah_mod_when;
                    _hdr.Sar_session_id = _hpReversInvoiceHeader.Sah_session_id;

                    _hpReversReceiptHeaderActual.Add(_hdr);
                }

                #endregion

                #region SRN
                _reptDAL.StartTimeModule("CC", "SAVE_END_OBJ_FILL", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                //_comm.StartTimeModule("DAY END - FINAL", "", DateTime.Now, BaseCls.GlbUserDefProf, BaseCls.GlbUserComCode, BaseCls.GlbUserID, txtDate.Value.Date);

                _reptDAL.StartTimeModule("CC", "SAVE_START_SRN", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                MasterAutoNumber _auto = new MasterAutoNumber();
                _auto.Aut_cate_cd = _hpReversInvoiceHeader.Sah_pc;
                _auto.Aut_cate_tp = "PC";
                _auto.Aut_direction = 0;
                _auto.Aut_moduleid = "REV";
                _auto.Aut_start_char = "SRN";
                _auto.Aut_year = 2013;
                string _srnNo = "";

                //ADDED BY SACHITH
                //2013/04/05
                //FOR SRN AND DO
                _reptDAL.StartTimeModule("CC", "GetDeliveredSerialDetail_ST", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                List<InventorySerialN> _diliverserials = _inventoryDAL.GetDeliveredSerialDetail(_hpReversInvoiceHeader.Sah_com, _invoiceNo);
                _reptDAL.StartTimeModule("CC", "GetDeliveredSerialDetail_ED", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                //List hold delivered invoice items
                List<InvoiceItem> _srnInvoiceItem = new List<InvoiceItem>();
                //list hold delivered inventory serials
                List<ReptPickSerials> _reptSer = new List<ReptPickSerials>();
                _reptDAL.StartTimeModule("CC", "GetInvoiceDetailByInvoice_START", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                List<InvoiceItem> _temp = _salesDAL.GetInvoiceDetailByInvoice(_invoiceNo);
                _reptDAL.StartTimeModule("CC", "GetInvoiceDetailByInvoice_END", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                if (_diliverserials != null && _diliverserials.Count > 0)
                {
                    foreach (InventorySerialN inv in _diliverserials)
                    {

                        List<InvoiceItem> invIte = _temp.Where(x => x.Sad_itm_cd == inv.Ins_itm_cd).ToList<InvoiceItem>();
                        if (invIte != null && invIte.Count > 0)
                        {
                            if (invIte[0].Sad_do_qty > 0)
                            {

                                invIte[0].Sad_srn_qty = invIte[0].Sad_do_qty;
                                invIte[0].Sad_fws_ignore_qty = invIte[0].Sad_do_qty;
                                invIte[0].Sad_do_qty = 0;
                            }
                            else
                            {
                                invIte[0].Sad_do_qty = 0;
                                invIte[0].Sad_fws_ignore_qty = invIte[0].Sad_qty;
                                invIte[0].Sad_srn_qty = invIte[0].Sad_qty;
                            }
                            _srnInvoiceItem.Add(invIte[0]);
                            _reptDAL.StartTimeModule("CC", "GetDefaultBinCode_START", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                            string bin = _inventoryDAL.GetDefaultBinCode(_hpReversInvoiceHeader.Sah_com, _hpReversInvoiceHeader.Sah_pc);
                            _reptDAL.StartTimeModule("CC", "GetDefaultBinCode_END", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                            _reptDAL.StartTimeModule("CC", "GetInvoiceSerialForReversal_START", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                            List<ReptPickSerials> serial = _inventoryDAL.GetInvoiceSerialForReversal(_hpReversInvoiceHeader.Sah_com, "", "", "", bin, _invoiceNo, invIte[0].Sad_itm_line);
                            _reptDAL.StartTimeModule("CC", "GetInvoiceSerialForReversal_END", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                            if (serial != null)
                                _reptSer.AddRange(serial);
                        }
                    }
                }

                InvoiceHeader _srnInv = new InvoiceHeader();
                _srnInv = _hpReversInvoiceHeader;

                //END
                //SRN save if have delivered item
                if (_srnInvoiceItem.Count > 0)
                {
                    InventoryHeader _inventoryHeader = new InventoryHeader();
                    _inventoryHeader.Ith_com = _hpReversInvoiceHeader.Sah_com;
                    _inventoryHeader.Ith_loc = _hpReversInvoiceHeader.Sah_pc;
                    _inventoryHeader.Ith_pc = _hpReversInvoiceHeader.Sah_pc;
                    DateTime _docDate = _hpReversInvoiceHeader.Sah_dt;
                    _inventoryHeader.Ith_doc_date = _docDate;
                    _inventoryHeader.Ith_doc_year = _docDate.Year;
                    _inventoryHeader.Ith_oth_docno = _diliverserials[0].Ins_doc_no;
                    _inventoryHeader.Ith_direct = true;
                    _inventoryHeader.Ith_doc_tp = "SRN";
                    _inventoryHeader.Ith_cate_tp = "CC";
                    _inventoryHeader.Ith_bus_entity = "";
                    _inventoryHeader.Ith_is_manual = false;
                    _inventoryHeader.Ith_manual_ref = "";
                    _inventoryHeader.Ith_sub_tp = "";
                    _inventoryHeader.Ith_remarks = "";
                    _inventoryHeader.Ith_stus = "A";
                    _inventoryHeader.Ith_cre_by = _hpReversInvoiceHeader.Sah_cre_by;
                    _inventoryHeader.Ith_cre_when = DateTime.Now;
                    _inventoryHeader.Ith_mod_by = _hpReversInvoiceHeader.Sah_cre_by;
                    _inventoryHeader.Ith_mod_when = DateTime.Now;
                    _inventoryHeader.Ith_acc_no = _hpReversInvoiceHeader.Sah_acc_no;



                    _hpReversInvoiceHeader.Sah_inv_tp = "HS";
                    _hpReversInvoiceHeader.Sah_inv_sub_tp = "CC";
                    _hpReversInvoiceHeader.Sah_direct = false;
                    _hpReversInvoiceHeader.Sah_ref_doc = _invoiceNo;
                    _hpReversInvoiceHeader.Sah_anal_10 = 0;
                    //  _inventoryHeader.Ith_session_id = BaseCls.GlbUserSessionID;
                    _reptDAL.StartTimeModule("CC", "SaveReversalForCommon_START", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                    SaveReversalForCommon(_hpReversInvoiceHeader, _srnInvoiceItem, _reversInvoiceAuto, true, out   _invoiceNo, _inventoryHeader, _reptSer, null, _auto, out  _srnNo);
                    _reptDAL.StartTimeModule("CC", "SaveReversalForCommon_END", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                    //CommonSaveReversal(_srnInv, _srnInvoiceItem, _auto, false, out _srnNo);
                    //Int32 _newSeq = _inventoryDAL.GetSerialID();
                    //_hpReversInvoiceHeader.Sah_seq_no = _newSeq;

                    //_hpReversInvoiceHeader.Sah_man_ref = _srnNo;
                    _hpReversInvoiceHeader.Sah_ref_doc = _diliverserials[0].Ins_doc_no;


                    //ADDED 2013/06/13
                    if (!string.IsNullOrEmpty(_srnNo))
                    {
                        _salesDAL.UpdateInvoiceRevNo(_invoiceNo, _srnNo);
                    }
                    //END


                    //UPDATE 2013/04/29
                    //SAVE NON DILIVERD ITEMS TO SAT_ITM TABLE
                    foreach (InvoiceItem _itm in _hpReversInvoiceItem)
                    {

                        List<ReptPickSerials> serial = (from _res in _reptSer
                                                        where _res.Tus_itm_cd == _itm.Sad_itm_cd
                                                        select _res).ToList<ReptPickSerials>();
                        if (serial == null || serial.Count <= 0)
                        {
                            _itm.Sad_seq_no = _hpReversInvoiceHeader.Sah_seq_no;
                            _itm.Sad_itm_line = _itm.Sad_itm_line;
                            _itm.Sad_inv_no = Convert.ToString(_invoiceNo);
                            _salesDAL.SaveSalesItem(_itm);


                            List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                            _itmTax = _salesDAL.GetItemTax(_hpReversInvoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                            foreach (MasterItemTax _one in _itmTax)
                            {
                                InvoiceItemTax _tax = new InvoiceItemTax();
                                _tax.Satx_inv_no = _itm.Sad_inv_no;
                                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                _tax.Satx_itm_line = _itm.Sad_itm_line;
                                _tax.Satx_itm_tax_amt = (_itm.Sad_unit_rt * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                _tax.Satx_job_line = 0;
                                _tax.Satx_job_no = "";
                                _tax.Satx_seq_no = _itm.Sad_seq;
                                _salesDAL.SaveSalesItemTax(_tax);
                            }
                            _invoiceLine += 1;
                        }
                    }
                    //END

                }
                else
                {
                    //Save Invoice Header
                    _hpReversInvoiceHeader.Sah_ref_doc = _invoiceNo;
                    _hpReversInvoiceHeader.Sah_inv_tp = "HS";
                    _hpReversInvoiceHeader.Sah_inv_sub_tp = "CC";
                    _hpReversInvoiceHeader.Sah_direct = false;
                    _hpReversInvoiceHeader.Sah_anal_10 = 0;
                    _salesDAL.SaveSalesHeader(_hpReversInvoiceHeader);

                #endregion

                    #region Save Revers invoice


                    //Save Invoice Items
                    foreach (InvoiceItem _itm in _hpReversInvoiceItem)
                    {

                        _itm.Sad_seq_no = _hpReversInvoiceHeader.Sah_seq_no;
                        _itm.Sad_itm_line = _invoiceLine;
                        _itm.Sad_inv_no = Convert.ToString(_hpReversInvoiceHeader.Sah_seq_no);
                        _salesDAL.SaveSalesItem(_itm);


                        List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                        _itmTax = _salesDAL.GetItemTax(_hpReversInvoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                        foreach (MasterItemTax _one in _itmTax)
                        {
                            InvoiceItemTax _tax = new InvoiceItemTax();
                            _tax.Satx_inv_no = _itm.Sad_inv_no;
                            _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                            _tax.Satx_itm_line = _itm.Sad_itm_line;
                            _tax.Satx_itm_tax_amt = (_itm.Sad_unit_rt * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                            _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                            _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                            _tax.Satx_job_line = 0;
                            _tax.Satx_job_no = "";
                            _tax.Satx_seq_no = _itm.Sad_seq;
                            _salesDAL.SaveSalesItemTax(_tax);
                        }
                        _invoiceLine += 1;

                    }
                }

                    #endregion
                _reptDAL.StartTimeModule("CC", "SAVE_END_SRN", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                _reptDAL.StartTimeModule("CC", "SAVE_START_DO", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);

                #region Save Revers receipt

                if (_hpReversReceiptHeaderActual != null)
                    if (_hpReversReceiptHeaderActual.Count > 0)
                    {
                        foreach (RecieptHeader _hdr in _hpReversReceiptHeaderActual)
                        {

                            _salesDAL.SaveReceiptHeader(_hdr);

                            RecieptItem _itm = new RecieptItem();

                            _itm.Sard_cc_tp = "HS";
                            _itm.Sard_inv_no = _hpReversInvoiceHeader.Sah_seq_no.ToString();
                            _itm.Sard_line_no = 1;
                            _itm.Sard_pay_tp = "CASH";
                            _itm.Sard_receipt_no = Convert.ToString(_hdr.Sar_seq_no);
                            _itm.Sard_ref_no = _hdr.Sar_manual_ref_no;
                            _itm.Sard_settle_amt = _hdr.Sar_tot_settle_amt;
                            _itm.Sard_seq_no = _hdr.Sar_seq_no;

                            _salesDAL.SaveReceiptItem(_itm);
                        }
                    }

                #endregion

                #region Save Conversion Invoice
                _ccInvoiceHeader.Sah_inv_tp = "CS";
                _ccInvoiceHeader.Sah_inv_sub_tp = "CC";
                _ccInvoiceHeader.Sah_session_id = _hpReversInvoiceHeader.Sah_session_id;
                _ccInvoiceHeader.Sah_cre_by = _hpReversInvoiceHeader.Sah_cre_by;
                _ccInvoiceHeader.Sah_cre_when = _hpReversInvoiceHeader.Sah_cre_when;
                _ccInvoiceHeader.Sah_mod_by = _hpReversInvoiceHeader.Sah_mod_by;
                _ccInvoiceHeader.Sah_mod_when = _hpReversInvoiceHeader.Sah_mod_when;
                _ccInvoiceHeader.Sah_anal_10 = 0;

                //INVENTORY DOCUMENT UPDATE BASE DOC
                //_ccInv.Ith_oth_docno = _srnNo;



                //SAVE WITH DO
                //if has delivered item
                if (_reptSer.Count > 0)
                {
                    //foreach (InvoiceItem _invItm in _ccInvoiceItem)
                    //{
                    //    decimal _doQty = _reptSer.Where(x => (x.Tus_itm_cd == _invItm.Sad_itm_cd && x.Tus_itm_stus == _invItm.Sad_itm_stus)).Sum(k => k.Tus_qty);
                    //    _invItm.Sad_do_qty = _doQty;
                    //}
                    _ccInvoiceItem.ForEach(x => x.Sad_do_qty = 0);


                    //CommonSaveInvoiceWithDeliveryOrder(_ccInvoiceHeader, _srnInvoiceItem, null, _ccReceiptHeader, _ccReceiptItem, _ccInv, _reptSer, null, _convertInvoiceAuto, _convertReceiptAuto, _invAuto, true, out _ccInvoiceNo, out _ccReceiptNo, out _ccDeliveryOrder, _inventoryDAL, _salesDAL, _inventoryRepDAL, false, false, out _error, false);
                    CommonSaveInvoiceWithDeliveryOrder(_ccInvoiceHeader, _ccInvoiceItem, null, _ccReceiptHeader, _ccReceiptItem, null, null, null, _convertInvoiceAuto, _convertReceiptAuto, null, false, out _ccInvoiceNo, out _ccReceiptNo, out _ccDeliveryOrder, _inventoryDAL, _salesDAL, _inventoryRepDAL, false, false, out _error, false);
                    _reptSer.ForEach(x => x.Tus_loc = _ccInv.Ith_loc);
                    List<ReptPickSerials> _srnSerials = new List<ReptPickSerials>();
                    foreach (ReptPickSerials _ser in _reptSer)
                    {

                        ReptPickSerials _serial = _inventoryDAL.GetAvailableSerIDInformation(_ser.Tus_com, _ser.Tus_loc, _ser.Tus_itm_cd, _ser.Tus_ser_1, _ser.Tus_ser_2, _ser.Tus_ser_id.ToString());
                        _serial.Tus_base_itm_line = _ser.Tus_base_itm_line;
                        _srnSerials.Add(_serial);
                    }
                    _srnSerials.ForEach(x => x.Tus_base_doc_no = _ccInvoiceNo);
                    int InventorySeqNo = _inventoryDAL.GetSerialID();
                    _reptSer.ForEach(x => x.Tus_base_doc_no = _ccInvoiceNo);
                    _reptSer.ForEach(x => x.Tus_usrseq_no = InventorySeqNo);
                    _ccInv.Ith_pc = _ccInvoiceHeader.Sah_pc;
                    _ccInv.Ith_oth_docno = _ccInvoiceNo;
                    _ccInv.Ith_seq_no = InventorySeqNo;
                    InventoryBLL _bll = new InventoryBLL();
                    string _doNo;
                    _bll.DeliveryOrderInterCompany(_ccInv, _srnSerials, null, _invAuto, out  _doNo, _inventoryRepDAL, _inventoryDAL);

                    //CommonSaveInvoiceWithDeliveryOrder(_ccInvoiceHeader, _srnInvoiceItem, null, _ccReceiptHeader, _ccReceiptItem, _ccInv, _reptSer, null, _convertInvoiceAuto, _convertReceiptAuto, _invAuto, true, out _ccInvoiceNo, out _ccReceiptNo, out _ccDeliveryOrder, _inventoryDAL, _salesDAL, _inventoryRepDAL, false, false, out _error, false);



                    /*
                    //UPDATE 2013/04/29
                    //SAVE NON DILIVERD ITEMS TO SAT_ITM TABLE
                        foreach (InvoiceItem _itm in _ccInvoiceItem)
                        {

                            List<ReptPickSerials> serial = (from _res in _reptSer
                                                            where _res.Tus_itm_cd == _itm.Sad_itm_cd
                                                            select _res).ToList<ReptPickSerials>();
                            if (serial == null || serial.Count <= 0)
                            {
                                _itm.Sad_seq_no = _ccInvoiceHeader.Sah_seq_no;
                                _itm.Sad_itm_line = _itm.Sad_itm_line;
                                _itm.Sad_inv_no = _ccInvoiceNo;
                                _salesDAL.SaveSalesItem(_itm);


                                List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                                _itmTax = _salesDAL.GetItemTax(_ccInvoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                                foreach (MasterItemTax _one in _itmTax)
                                {
                                    InvoiceItemTax _tax = new InvoiceItemTax();
                                    _tax.Satx_inv_no = _itm.Sad_inv_no;
                                    _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                    _tax.Satx_itm_line = _itm.Sad_itm_line;
                                    _tax.Satx_itm_tax_amt = (_itm.Sad_unit_rt * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                    _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                    _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                    _tax.Satx_job_line = 0;
                                    _tax.Satx_job_no = "";
                                    _tax.Satx_seq_no = _itm.Sad_seq;
                                    _salesDAL.SaveSalesItemTax(_tax);
                                }
                                _invoiceLine += 1;
                            }
                        }
                    //END
                     */

                }
                //SAVE WITHOUT DO
                //if has not delivered item
                else
                {
                    CommonSaveInvoiceWithDeliveryOrder(_ccInvoiceHeader, _ccInvoiceItem, null, _ccReceiptHeader, _ccReceiptItem, null, null, null, _convertInvoiceAuto, _convertReceiptAuto, null, false, out _ccInvoiceNo, out _ccReceiptNo, out _ccDeliveryOrder, _inventoryDAL, _salesDAL, _inventoryRepDAL, false, false, out _error, false);
                }

                //if error occure in CommonSaveInvoiceWithDeliveryOrder roll back and return
                if (!string.IsNullOrEmpty(_error))
                {
                    _err = _error;
                    _convertInvoice = "";
                    _salesDAL.TransactionRollback();
                    _inventoryRepDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                    _generalDAL.TransactionRollback();
                    _reptDAL.TransactionRollback();
                    return -1;
                }


                #endregion
                _reptDAL.StartTimeModule("CC", "SAVE_END_DO", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                _reptDAL.StartTimeModule("CC", "SAVE_START_UPDATES", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);

                #region Update Revers Invoice/Receipt Auto Number by sequance no
                _reversInvoiceAuto.Aut_year = null;
                _reversInvoiceAuto.Aut_modify_dt = null;
                MasterAutoNumber _reversInv = _inventoryDAL.GetAutoNumber(_reversInvoiceAuto.Aut_moduleid, _reversInvoiceAuto.Aut_direction, _reversInvoiceAuto.Aut_start_char, _reversInvoiceAuto.Aut_cate_tp, _reversInvoiceAuto.Aut_cate_cd, _reversInvoiceAuto.Aut_modify_dt, _reversInvoiceAuto.Aut_year);
                string _revInvNo = _reversInv.Aut_cate_cd + "-" + _reversInv.Aut_start_char + _reversInv.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                _reversInv.Aut_modify_dt = null;
                _reversInv.Aut_year = null;
                _inventoryDAL.UpdateAutoNumber(_reversInv);
                _invoiceNo = _revInvNo;
                foreach (Int32 _lst in _revReceiptSeqNo)
                {
                    _reversReceiptAuto.Aut_modify_dt = null;
                    _reversReceiptAuto.Aut_year = null;
                    MasterAutoNumber _reversRecipt = _inventoryDAL.GetAutoNumber(_reversReceiptAuto.Aut_moduleid, _reversReceiptAuto.Aut_direction, _reversReceiptAuto.Aut_start_char, _reversReceiptAuto.Aut_cate_tp, _reversReceiptAuto.Aut_cate_cd, _reversReceiptAuto.Aut_modify_dt, _reversReceiptAuto.Aut_year);
                    _reversRecipt.Aut_modify_dt = null;
                    _reversRecipt.Aut_year = null;
                    string _revReciptNo = _reversRecipt.Aut_cate_cd + "-" + _reversRecipt.Aut_start_char + "-" + _reversRecipt.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_reversRecipt);
                    _salesDAL.UpdateInvoiceReceipts(_revInvNo, _revReciptNo, _hpReversInvoiceHeader.Sah_seq_no, _lst);

                }
                #endregion

                #region hp_insurance
                Int32 _insSeq = _inventoryDAL.GetSerialID();
                MasterAutoNumber _receiptAuto = new MasterAutoNumber();
                _receiptAuto.Aut_cate_cd = _reversInsurance.Hti_pc;
                _receiptAuto.Aut_cate_tp = "PC";
                _receiptAuto.Aut_direction = 1;
                _receiptAuto.Aut_modify_dt = null;
                _receiptAuto.Aut_moduleid = "RECEIPT";
                _receiptAuto.Aut_number = 0;
                _receiptAuto.Aut_start_char = "INSU";
                _receiptAuto.Aut_year = null;
                _receiptAuto.Aut_number = 0;
                MasterAutoNumber _Insnumber = _inventoryDAL.GetAutoNumber(_receiptAuto.Aut_moduleid, 1, _receiptAuto.Aut_start_char, _receiptAuto.Aut_cate_tp, _receiptAuto.Aut_cate_cd, _receiptAuto.Aut_modify_dt, _receiptAuto.Aut_year);
                string _InsNo = _receiptAuto.Aut_cate_cd + "-" + _receiptAuto.Aut_start_char + _Insnumber.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_receiptAuto);
                _reversInsurance.Hti_seq = _insSeq;
                //_reversInsurance.Hti_seq = _ccInvoiceHeader.Sah_seq_no;
                _reversInsurance.Hti_mnl_num = _InsNo;
                _reversInsurance.Hti_ref = _InsNo;


                _salesDAL.Save_HpInsu(_reversInsurance);




                #endregion


                #region Update Account Status
                _salesDAL.UpdateAccountStatusforrevert(_ccInvoiceHeader.Sah_com, _ccInvoiceHeader.Sah_pc, _ccInvoiceHeader.Sah_anal_2, "C", _ccInvoiceHeader.Sah_dt);
                #endregion

                #region Update Account Log
                HPAccountLog _hpLog = _salesDAL.GetAccountLog(_ccInvoiceHeader.Sah_anal_2);
                if (!string.IsNullOrEmpty(_hpLog.Hal_acc_no))
                {
                    _salesDAL.UpdateAccountforCashConversion(_ccInvoiceHeader.Sah_anal_2, "C", _ccInvoiceHeader.Sah_dt);

                    _hpLog.Hal_seq_no = _reversInvoiceSeqNo;
                    _hpLog.Hal_sa_sub_tp = "CC";
                    _hpLog.Hal_log_dt = _ccInvoiceHeader.Sah_dt;
                    _hpLog.Hal_invc_no = _invoiceNo;
                    _hpLog.Hal_rev_stus = true;
                    _hpLog.Hal_cre_by = _hpReversInvoiceHeader.Sah_cre_by;
                    _hpLog.Hal_cre_dt = _hpReversInvoiceHeader.Sah_cre_when;
                    _hpLog.Hal_inst_stm = 0;
                    _hpLog.Hal_init_stm = 0;
                    _hpLog.Hal_cls_dt = _ccInvoiceHeader.Sah_dt;
                    _hpLog.Hal_stus = "C";
                    _hpLog.Hal_cls_dt = _ccInvoiceHeader.Sah_dt;
                    _salesDAL.SaveHPAccountLog(_hpLog);
                }
                #endregion

                //SAVE HP TXN TABLE
                _transaction.Hpt_seq = _inventoryDAL.GetSerialID();
                _salesDAL.Save_HpTransaction(_transaction);




                //UPDATE 2012/03/02
                //GET DELIVERD ITEMS FROM SAT_HDR AND SAVE SRN


                //List<InventorySerialN> _diliverserials1 = _inventoryDAL.GetDeliveredSerialDetail(_hpReversInvoiceHeader.Sah_com,_hpReversInvoiceHeader.Sah_inv_no);

                //List<ReptPickSerials> _reptSer1 = new List<ReptPickSerials>();
                //foreach (InventorySerialN inv in _diliverserials1)
                //{
                //    ReptPickSerials serial = _inventoryDAL.Get_all_details_on_serial(inv.Ins_com, inv.Ins_loc, string.Empty, inv.Ins_itm_cd, inv.Ins_ser_1);
                //    _reptSer1.Add(serial);
                //}

                //


                //ADDED BY SACHITH
                //2012/01/11
                _salesDAL.UpdateCoverNoteAndIsApp(_ccInvoiceHeader.Sah_acc_no);
                //END
                //2013/02/28

                //UpdateCashConvertionDocNo(_invoiceNo, _ccInvoiceHeader.Sah_inv_no);
                _inventoryRepDAL.UpdateDocNoAndTp(_invoiceNo, _ccInvoiceHeader.Sah_inv_no, "DO");
                _reptDAL.StartTimeModule("CC", "SAVE_END_UPDATES", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);
                _reptDAL.StartTimeModule("CC", "SAVE_END", DateTime.Now, "test", "test", _hpReversInvoiceHeader.Sah_acc_no, DateTime.Now.Date);

                //_salesDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                //_inventoryRepDAL.ConnectionClose();
                //_generalDAL.ConnectionClose();
                //_reptDAL.ConnectionClose();

                _salesDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _generalDAL.TransactionCommit();
                _reptDAL.TransactionCommit();


                //    _tr.Complete();
                //}
                _err = "";
                _convertInvoice = _ccInvoiceNo;
            }
            catch (Exception ex)
            {
                _err = ex.Message;
                _convertInvoice = "";
                _salesDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _reptDAL.TransactionRollback();

            }
            return _effect;

        }

        public List<RecieptItem> GetRecieptItemByRef(string _refNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRecieptItemByRef(_refNo);
        }

        public DataTable Check_SRN_Stock_Avilability(string _refNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Check_SRN_Stock_Avilability(_refNo);
        }
        public Int32 SaveHPExchangeWithDo(DateTime _date, string _accountno, string _company, string _location, string _profitcenter, string _createdBy, string _inSubType, string _outSubType, List<ReptPickSerials> _list, List<ReptPickSerials> _outList, List<InvoiceItem> _outPureInvoiceItem, List<RecieptHeader> receiptHeaderList, List<RecieptItem> receipItemList, MasterAutoNumber receipAuto, out string _creditnotelist, out string _inventorydoclist, HPAccountLog _accLog, HpAccount _newAccount, List<HpSheduleDetails> _currentSchedule, List<HpSheduleDetails> _newSchedule, HpInsurance _insurance, MasterAutoNumber _insuranceAuto, RequestApprovalHeader _request, out string _diriya, out string _invNo, out string _error, string _sessionId, InventoryHeader _invHdr, MasterAutoNumber _invAuto)
        {
            Int32 _effect = 0;

            /*
             * 01.GET ALL INVOICES TO AN ACCOUNT WITH STATUS (A OR D)
             * 02.SAVE CREDIT NOTE FOR ALL ITEMS
             * 03.SAVE SRN FOR DILIVERD ITEMS
             * 
             * 04.SAVE HS INVOICE FOR ALL ITEMS
             * 05.SAVE DO FOR DILIVERD ITSMS
             * 
             */


            //----------------IN items----------------

            //Check the serial list divide to status of the IN list as Delivered/Forward status + DO No + Invoice no
            //if the Tus_ser_id =0 + Invoice no then its a forward sales (Credit Note only (HS-EXI))
            //if the Tus_ser_id=1 and need to check with the DO, if the DO is same its goes to single SRN
            //If its differ then there are multiple SRN's as per the count of DO's (SRN with Credit Note)

            //----------------OUT items----------------

            //The total OUT items should save as Invoice with the reference of the account no. (HS-EXO)
            //and the as per the reply of the customer, should raise DO

            //----------------Account----------------

            //Save the Whole current account to LOG with Sales Type - EXI
            //New Trial Calculation will be update to the Hpt_Acc table and the Sales Type - EXO
            //In Hpt_Sch, save the current to the HPT_Sch_Log
            //write the new schdule to the Hpt_sch
            // Term         Current Value           New Value           Save Process        paid status
            // 1            1000                    1200                1000                1
            // 2            1000                    1200                1000                1
            // 3            1000                    1200                1200+400 x          0   <- term 1,2 remain as it is and the balance will add to the next term as total
            // 4            1000                    1200                1200 x              0   <- term will be as the new calcullated term
            // 5            1000                    1200                1200 x              0   <- term will be as the new calcullated term
            //--------------------------------------* New Value = Amount Finance + Interest Amount / Terms
            //Save Receipt Entry with the type HPDPS


            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            _inventoryRepDAL = new ReptCommonDAL();
            _fmsInventoryDal = new FMS_InventoryDAL();
            _generalDAL = new GeneralDAL();
            string _inventoryDocumentList = string.Empty;
            string _creditNoteNoList = string.Empty;

            string _outInvoiceForDuplicate = string.Empty;


            try
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                _fmsInventoryDal.ConnectionOpen();
                _fmsInventoryDal.BeginTransaction();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();


                //------------------------------------EXI---------------------------------------
                #region Revers Entries
                string _crnote = string.Empty;
                string _srnno = string.Empty;
                string _outInvoice = "";
                bool _isForwardSale = true;
                string _outDO = "";

                //get all items to  list
                string _inInvNo = string.Empty;
                List<InvoiceHeader> _invItmList = _salesDAL.GetInvoiceByAccountNo(_company, _profitcenter, _accountno);
                foreach (InvoiceHeader _hdr in _invItmList)
                {
                    if ((_hdr.Sah_stus == "D" || _hdr.Sah_stus == "A") && _hdr.Sah_direct)
                    {
                        _inInvNo = _hdr.Sah_inv_no;
                    }
                }
                if (_inInvNo == string.Empty)
                {
                    _creditnotelist = "";
                    _inventorydoclist = "";
                    _diriya = "";
                    _invNo = "";
                    _error = "In invoice no,with status A or D can not find";
                    return -1;
                }

                //get items in in items
                List<InvoiceItem> _inInvItmList = _salesDAL.GetInvoiceItems(_inInvNo);

                List<ReptPickSerials> _SRNList = null;
                //get serials
                _list = new List<ReptPickSerials>();
                string bin = _inventoryDAL.GetDefaultBinCode(_company, _profitcenter);
                foreach (InvoiceItem _invItem in _inInvItmList)
                {
                    //if do item
                    List<ReptPickSerials> serial = _inventoryDAL.GetInvoiceSerialForReversal(_company, "", "", "", bin, _inInvNo, _invItem.Sad_itm_line);
                    if (serial != null && serial.Count > 0)
                    { _list.AddRange(serial); }
                    //forward sale item
                    else
                    {
                        ReptPickSerials _l = new ReptPickSerials();
                        MasterItem _Mitm = _inventoryDAL.GetItem(_company, _invItem.Sad_itm_cd);
                        _l.Tus_base_itm_line = Convert.ToInt32(_invItem.Sad_itm_line);
                        _l.Tus_base_doc_no = _inInvNo;
                        _l.Tus_bin = bin;
                        _l.Tus_com = _company;

                        _l.Tus_cre_dt = _date.Date;
                        _l.Tus_itm_brand = _Mitm.Mi_brand;
                        _l.Tus_itm_cd = _invItem.Sad_itm_cd;
                        _l.Tus_itm_desc = _Mitm.Mi_longdesc;
                        _l.Tus_itm_model = _Mitm.Mi_model;
                        _l.Tus_itm_stus = _invItem.Mi_itm_stus;
                        _l.Tus_loc = _location;
                        _l.Tus_qty = _invItem.Sad_qty;
                        _l.Tus_session_id = _sessionId;
                        _l.Tus_unit_price = _invItem.Sad_unit_rt;
                        _l.Tus_ser_id = 0;//identify when save as not delivered
                        _list.Add(_l);
                    }
                }
                _list.ForEach(x => x.Tus_base_doc_no = _inInvNo);



                foreach (ReptPickSerials _doc in _list)
                {
                    _isForwardSale = Convert.ToInt32(_doc.Tus_ser_id) == 0 ? true : false;
                    _outInvoice = Convert.ToString(_doc.Tus_base_doc_no);
                    //_outDO = Convert.ToString(_doc.Tus_doc_no);
                    if (string.IsNullOrEmpty(_outInvoiceForDuplicate)) _outInvoiceForDuplicate = _outInvoice;
                    if (!_isForwardSale)
                        break;
                }
                if (_isForwardSale)//revers the invoice only (Credit Note)
                {

                    var _CreditNoteList = (from _one in _list where _one.Tus_base_doc_no == _outInvoice && _one.Tus_ser_id == 0 select _one).ToList();

                    //Invoice Header - Invoice Item - invoice Auto Number
                    InvoiceHeader _hdr = _salesDAL.GetInvoiceHeader(_outInvoice);
                    _hdr.Sah_dt = _date.Date;
                    _hdr.Sah_inv_no = string.Empty;
                    _hdr.Sah_tp = "REV";
                    _hdr.Sah_inv_sub_tp = _inSubType;
                    _hdr.Sah_direct = false;
                    _hdr.Sah_pc = _profitcenter;
                    _hdr.Sah_stus = "D";//updated 2013/01/29 
                    _hdr.Sah_cre_by = _createdBy;
                    _hdr.Sah_cre_when = DateTime.Now;
                    _hdr.Sah_mod_by = _createdBy;
                    _hdr.Sah_mod_when = DateTime.Now;

                    //added 2013/08/06
                    _hdr.Sah_ref_doc = _outInvoice;
                    _hdr.Sah_anal_10 = 0;

                    List<InvoiceItem> _itm = _salesDAL.GetInvoiceDetailByInvoice(_outInvoice);
                    MasterAutoNumber _auto = new MasterAutoNumber();
                    string _prefix = _salesDAL.GetInvoicePrefix(_company, _profitcenter, "HS");
                    _auto.Aut_cate_cd = _profitcenter;
                    _auto.Aut_cate_tp = "PC";
                    _auto.Aut_direction = 0;
                    _auto.Aut_moduleid = "REV";
                    _auto.Aut_start_char = "INREV";
                    _auto.Aut_year = null;

                    List<InvoiceItem> _invItemSaveList = new List<InvoiceItem>();
                    foreach (ReptPickSerials _Itm in _CreditNoteList)
                    {
                        var _outinvItem = (from _l in _itm where _l.Sad_itm_line == _Itm.Tus_base_itm_line select _l).ToList();
                        _outinvItem.ForEach(x => { x.Sad_do_qty = 1; x.Sad_srn_qty = 1; });
                        _invItemSaveList.AddRange(_outinvItem);
                    }



                    CommonSaveReversal(_hdr, _invItemSaveList, _auto, false, out _crnote);

                    if (string.IsNullOrEmpty(_creditNoteNoList))
                        _creditNoteNoList = _crnote;
                    else
                        _creditNoteNoList += "," + _crnote;


                    //UPDATE STATUS
                    _salesDAL.UpdateInvoiceStatus(_outInvoice, "E");
                    //END

                    //call CommonSaveReversal()
                }
                else//Raise revers invoice (Credit Note) with SRN 
                {

                    _SRNList = (from _one in _list where _one.Tus_base_doc_no == _outInvoice && _one.Tus_ser_id > 0 select _one).ToList<ReptPickSerials>();

                    //Invoice header/Invoice Item/invoice auto number/inventory header/pick serial/pick serial sub/inventoru auto
                    InvoiceHeader _hdr = _salesDAL.GetInvoiceHeader(_outInvoice);
                    _hdr.Sah_dt = _date.Date;
                    _hdr.Sah_inv_no = string.Empty;
                    _hdr.Sah_inv_sub_tp = _inSubType;
                    _hdr.Sah_direct = false;
                    _hdr.Sah_pc = _profitcenter;
                    _hdr.Sah_stus = "A";
                    _hdr.Sah_cre_by = _createdBy;
                    _hdr.Sah_cre_when = DateTime.Now;
                    _hdr.Sah_mod_by = _createdBy;
                    _hdr.Sah_mod_when = DateTime.Now;
                    _hdr.Sah_ref_doc = _outInvoice;
                    _hdr.Sah_anal_10 = 0;

                    List<InvoiceItem> _itm = _salesDAL.GetInvoiceDetailByInvoice(_outInvoice);
                    MasterAutoNumber _auto = new MasterAutoNumber();
                    string _prefix = _salesDAL.GetInvoicePrefix(_company, _profitcenter, "HS");
                    _auto.Aut_cate_cd = _profitcenter;
                    _auto.Aut_cate_tp = "PC";
                    _auto.Aut_direction = 0;
                    _auto.Aut_moduleid = "REV";
                    _auto.Aut_start_char = "INREV";
                    _auto.Aut_year = null;

                    List<InvoiceItem> _invItemSaveList = new List<InvoiceItem>();
                    foreach (ReptPickSerials _Itm in _SRNList)
                    {
                        var _outinvItem = (from _l in _itm where _l.Sad_itm_line == _Itm.Tus_base_itm_line select _l).ToList();
                        // _outinvItem.ForEach(x => { x.Sad_do_qty = 1; x.Sad_srn_qty = 1; });
                        _invItemSaveList.AddRange(_outinvItem);
                    }

                    InventoryHeader _inventoryHeader = new InventoryHeader();
                    _inventoryHeader.Ith_acc_no = _accountno;
                    _inventoryHeader.Ith_com = _company;
                    _inventoryHeader.Ith_cre_by = _createdBy;
                    _inventoryHeader.Ith_cre_when = DateTime.Now;
                    _inventoryHeader.Ith_direct = true;
                    _inventoryHeader.Ith_doc_date = _date.Date;
                    _inventoryHeader.Ith_doc_tp = "SRN";
                    _inventoryHeader.Ith_doc_year = _date.Year;
                    _inventoryHeader.Ith_loc = _location;
                    _inventoryHeader.Ith_mod_by = _createdBy;
                    _inventoryHeader.Ith_mod_when = DateTime.Now;
                    _inventoryHeader.Ith_pc = _profitcenter;
                    _inventoryHeader.Ith_stus = "A";
                    _inventoryHeader.Ith_cate_tp = "NOR";
                    _inventoryHeader.Ith_sub_tp = "NORMAL";
                    _inventoryHeader.Ith_entry_no = _outInvoice;
                    _inventoryHeader.Ith_manual_ref = _outDO;
                    _inventoryHeader.Ith_oth_docno = _outDO;

                    MasterAutoNumber _inventoryauto = new MasterAutoNumber();
                    _inventoryauto.Aut_cate_cd = _location;
                    _inventoryauto.Aut_cate_tp = "LOC";
                    _inventoryauto.Aut_direction = 1;
                    _inventoryauto.Aut_moduleid = "SRN";
                    _inventoryauto.Aut_start_char = "SRN";

                    foreach (InvoiceItem item in _invItemSaveList)
                    {
                        if (item.Sad_do_qty > 0)
                        {

                            item.Sad_srn_qty = item.Sad_do_qty;
                            item.Sad_fws_ignore_qty = item.Sad_do_qty;
                            item.Sad_do_qty = 0;

                        }
                        else
                        {
                            item.Sad_do_qty = 0;
                            item.Sad_fws_ignore_qty = item.Sad_qty;
                            item.Sad_srn_qty = item.Sad_qty;
                        }
                    }


                    SaveReversalForCommon(_hdr, _invItemSaveList, _auto, false, out _crnote, _inventoryHeader, _SRNList, null, _inventoryauto, out _srnno);


                    //ADDED 2013/06/20
                    if (!string.IsNullOrEmpty(_srnno))
                    {
                        _salesDAL.UpdateInvoiceRevNo(_crnote, _srnno);
                    }

                    //call SaveReversal()
                    if (string.IsNullOrEmpty(_creditNoteNoList))
                        _creditNoteNoList = _crnote;
                    else
                        _creditNoteNoList += "," + _crnote;

                    if (string.IsNullOrEmpty(_inventoryDocumentList))
                        _inventoryDocumentList = _srnno;

                    //UPDATE STATUS
                    _salesDAL.UpdateInvoiceStatus(_outInvoice, "E");
                    //END

                }




                #endregion

                //------------------------------------EXO---------------------------------------
                #region  Invoice Entry

                InvoiceHeader _pureInvoiceHdr = _salesDAL.GetInvoiceHeader(_outInvoiceForDuplicate);
                _pureInvoiceHdr.Sah_dt = _date.Date;
                _pureInvoiceHdr.Sah_inv_no = string.Empty;
                _pureInvoiceHdr.Sah_inv_sub_tp = _outSubType;
                _pureInvoiceHdr.Sah_direct = true;
                _pureInvoiceHdr.Sah_pc = _profitcenter;
                _pureInvoiceHdr.Sah_stus = "A";
                _pureInvoiceHdr.Sah_cre_by = _createdBy;
                _pureInvoiceHdr.Sah_cre_when = DateTime.Now;
                _pureInvoiceHdr.Sah_mod_by = _createdBy;
                _pureInvoiceHdr.Sah_mod_when = DateTime.Now;
                _pureInvoiceHdr.Sah_anal_10 = 0;

                MasterAutoNumber _pureAuto = new MasterAutoNumber();
                string _purePrefix = _salesDAL.GetInvoicePrefix(_company, _profitcenter, "HS");
                _pureAuto.Aut_cate_cd = _profitcenter;
                _pureAuto.Aut_cate_tp = "PC";
                _pureAuto.Aut_direction = 1;
                _pureAuto.Aut_moduleid = "HS";
                _pureAuto.Aut_start_char = _purePrefix;
                _pureAuto.Aut_year = _date.Year;

                string _pureInvoiceno = string.Empty;
                string _pureReceiptno = string.Empty;
                string _pureDOno = string.Empty;
                string _errorList = string.Empty;

                List<ReptPickSerials> _srnSerials = new List<ReptPickSerials>();
                List<InvoiceItem> _removeList = new List<InvoiceItem>();
                foreach (InvoiceItem _invItm in _inInvItmList)
                {
                    List<ReptPickSerials> _temOut = (from _res in _outList
                                                     where _res.Tus_itm_cd == _invItm.Sad_itm_cd && _res.Tus_itm_stus == _invItm.Sad_itm_stus
                                                     select _res).ToList<ReptPickSerials>();

                    if (_temOut != null && _temOut.Count > 0)
                    {

                    }
                    else
                    {
                        _removeList.Add(_invItm);
                    }
                }
                if (_removeList.Count > 0)
                {
                    foreach (InvoiceItem _tem in _removeList)
                    {
                        _inInvItmList.Remove(_tem);
                    }
                }
                _inInvItmList.AddRange(_outPureInvoiceItem);
                if (_SRNList != null)
                {
                    foreach (ReptPickSerials _ser in _SRNList)
                    {
                        List<ReptPickSerials> _temOut = (from _res in _outList
                                                         where _res.Tus_itm_cd == _ser.Tus_itm_cd && _res.Tus_itm_stus == _ser.Tus_itm_stus
                                                         select _res).ToList<ReptPickSerials>();
                        if (_temOut != null && _temOut.Count > 0)
                        {
                            //remove in item
                        }
                        else
                        {

                            ReptPickSerials _serial = _inventoryDAL.GetAvailableSerIDInformation(_ser.Tus_com, _ser.Tus_loc, _ser.Tus_itm_cd, _ser.Tus_ser_1, _ser.Tus_ser_2, _ser.Tus_ser_id.ToString());
                            _serial.Tus_base_itm_line = _ser.Tus_base_itm_line;
                            _srnSerials.Add(_serial);
                        }
                    }
                }

                //isDONow
                if (_srnSerials != null && _srnSerials.Count > 0)
                {

                    CommonSaveInvoiceWithDeliveryOrder(_pureInvoiceHdr, _inInvItmList, null, new RecieptHeader(), new List<RecieptItem>(), _invHdr, _srnSerials, null, _pureAuto, null, _invAuto, true, out _pureInvoiceno, out _pureReceiptno, out _pureDOno, _inventoryDAL, _salesDAL, _inventoryRepDAL, false, false, out _errorList, true);
                }
                else
                {
                    CommonSaveInvoiceWithDeliveryOrder(_pureInvoiceHdr, _inInvItmList, null, new RecieptHeader(), new List<RecieptItem>(), null, null, null, _pureAuto, null, null, false, out _pureInvoiceno, out _pureReceiptno, out _pureDOno, _inventoryDAL, _salesDAL, _inventoryRepDAL, false, false, out _errorList, true);
                }
                if (!string.IsNullOrEmpty(_errorList))
                {

                    _salesDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                    _inventoryRepDAL.TransactionRollback();
                    _fmsInventoryDal.TransactionRollback();
                    _generalDAL.TransactionRollback();
                    _creditnotelist = "";
                    _inventorydoclist = "";
                    _diriya = "";
                    _invNo = "";
                    _error = _errorList;
                    return -1;

                }

                //call public void CommonSaveInvoiceWithDeliveryOrder(InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, List<InvoiceSerial> _invoiceSerial, RecieptHeader _recieptHeader, List<RecieptItem> _recieptItem, InventoryHeader _inventoryHeader, List<ReptPickSerials> _pickSerial, List<ReptPickSerialsSub> _pickSubSerial, MasterAutoNumber _invoiceAuto, MasterAutoNumber _recieptAuto, MasterAutoNumber _inventoryAuto, bool _isDeliveryNow, out  string _invoiceNo, out string _receiptNo, out string _deliveryOrder, InventoryDAL _invDAL, SalesDAL _salDAL, ReptCommonDAL _invRepDAL, bool _isHold, bool _isHoldInvoiceProcess, out string _errorlist)

                if (string.IsNullOrEmpty(_creditNoteNoList))
                    _creditNoteNoList = "Issued Invoice : " + _pureInvoiceno;
                else
                    _creditNoteNoList += ",Issued Invoice : " + _pureInvoiceno;

                #endregion

                _creditNoteNoList += "Issue Receipts : -";

                //HP TRANSACTION AUTONUMBER
                MasterAutoNumber _transactionAuto = new MasterAutoNumber();
                _transactionAuto.Aut_cate_cd = _newAccount.Hpa_pc;
                _transactionAuto.Aut_cate_tp = "PC";
                _transactionAuto.Aut_direction = 1;
                _transactionAuto.Aut_modify_dt = null;
                _transactionAuto.Aut_moduleid = "HP";
                _transactionAuto.Aut_number = 0;
                _transactionAuto.Aut_start_char = "HPT";
                _transactionAuto.Aut_year = null;
                List<HpTransaction> _transactionList = new List<HpTransaction>();


                #region  Receipt Entry - for the new invoice
                if (receiptHeaderList != null)
                {
                    foreach (RecieptHeader _recieptHeader in receiptHeaderList)
                    {   //create MST_AUTO number for receipt table
                        string recType = _recieptHeader.Sar_receipt_type;
                        if (_recieptHeader.Sar_receipt_type == "HPRS")
                        {
                            _recieptHeader.Sar_receipt_type = "HPDPS";
                            receipAuto.Aut_start_char = "HPDPS";
                        }
                        else
                        {
                            _recieptHeader.Sar_receipt_type = "HPDPM";
                            receipAuto.Aut_start_char = "HPDPM";
                        }
                        _recieptHeader.Sar_receipt_date = _date;
                        _recieptHeader.Sar_anal_5 = _newAccount.Hpa_dp_comm;
                        _recieptHeader.Sar_is_oth_shop = false;
                        receipAuto.Aut_year = _date.Year;
                        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(receipAuto.Aut_moduleid, receipAuto.Aut_direction, receipAuto.Aut_start_char, receipAuto.Aut_cate_tp, receipAuto.Aut_cate_cd, receipAuto.Aut_modify_dt, receipAuto.Aut_year);
                        string _cusNo = receipAuto.Aut_cate_cd + "-" + receipAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(receipAuto);//update MST_AUTO table

                        _recieptHeader.Sar_receipt_no = _cusNo;

                        Int32 RecieptSeqNo = 0;
                        RecieptSeqNo = _inventoryDAL.GetSerialID(); //will be assign to header after looping transaction list.

                        Int32 line = 0;
                        foreach (RecieptItem _itm in receipItemList)
                        {
                            if (_recieptHeader.Sar_seq_no == _itm.Sard_seq_no)//have to check the prefix also?
                            {
                                line++;
                                _itm.Sard_seq_no = RecieptSeqNo;
                                _itm.Sard_line_no = line;
                                _itm.Sard_receipt_no = _recieptHeader.Sar_receipt_no;
                            }
                        }
                        _recieptHeader.Sar_seq_no = RecieptSeqNo;

                        _recieptHeader.Sar_esd_rate = 0;
                        _recieptHeader.Sar_epf_rate = 0;
                        _recieptHeader.Sar_wht_rate = 0;


                        HpTransaction _transaction = new HpTransaction();
                        _transaction.Hpt_acc_no = _newAccount.Hpa_acc_no;
                        _transaction.Hpt_ars = 0;
                        _transaction.Hpt_bal = 0;
                        _transaction.Hpt_txn_dt = _date;
                        _transaction.Hpt_com = _newAccount.Hpa_com;
                        _transaction.Hpt_crdt = _recieptHeader.Sar_tot_settle_amt;
                        _transaction.Hpt_cre_by = _newAccount.Hpa_cre_by;
                        _transaction.Hpt_cre_dt = _date;
                        _transaction.Hpt_dbt = 0;
                        _transaction.Hpt_txn_tp = _recieptHeader.Sar_receipt_type;
                        _transaction.Hpt_desc = "DOWN PAYMENT";
                        _transaction.Hpt_pc = _newAccount.Hpa_pc;
                        _transaction.Hpt_mnl_ref = _recieptHeader.Sar_prefix + "-" + _recieptHeader.Sar_manual_ref_no;
                        _transaction.Hpt_txn_ref = _recieptHeader.Sar_receipt_no;

                        _transactionList.Add(_transaction);

                        _salesDAL.SaveReceiptHeader(_recieptHeader);//save receipt header

                        MasterCompany _masterComp = _generalDAL.GetCompByCode(_recieptHeader.Sar_com_cd);  //kapila 27/4/2016
                        if (_masterComp.MC_IS_SCM2_FMS == 1)
                            _inventoryDAL.UpdateManualDocNo(_location, recType, Convert.ToInt32(_recieptHeader.Sar_manual_ref_no), _recieptHeader.Sar_receipt_no);//do the updation at the gnt_man_doc_dt
                        else
                            _fmsInventoryDal.UpdateManualDocNo(_location, recType, Convert.ToInt32(_recieptHeader.Sar_manual_ref_no), _recieptHeader.Sar_receipt_no);//do the updation at the gnt_man_doc_dt




                        if (string.IsNullOrEmpty(_creditNoteNoList))
                            _creditNoteNoList = " " + _cusNo;
                        else
                            _creditNoteNoList += ", " + _cusNo;
                    }
                }

                //save receipt detali list
                if (receipItemList != null)
                    if (receipItemList.Count > 0)
                        foreach (RecieptItem rec_itm in receipItemList)
                            _salesDAL.SaveReceiptItem(rec_itm);


                #endregion

                //Account Log EXI entry 
                //2013/01/29
                Int32 _otherSeqno = _inventoryDAL.GetSerialID();
                _accLog.Hal_invc_no = _crnote;
                _accLog.Hal_seq_no = _otherSeqno;
                _newAccount.Hpa_seq_no = _otherSeqno;

                #region  Re-schadule the hire sale history
                //ADDED 2013/01/29
                //HP Account Log EXO Entry
                _otherSeqno = _inventoryDAL.GetSerialID();


                HpAccount _acc = _salesDAL.GetHP_Account_onAccNo(_accLog.Hal_acc_no);

                //HP TRANSACTION OBEX RECORD

                if (_acc.Hpa_hp_val > _newAccount.Hpa_hp_val)
                {
                    HpTransaction _transaction = new HpTransaction();
                    _transaction.Hpt_acc_no = _newAccount.Hpa_acc_no;
                    _transaction.Hpt_ars = 0;
                    _transaction.Hpt_bal = 0;
                    _transaction.Hpt_com = _newAccount.Hpa_com;
                    _transaction.Hpt_crdt = _acc.Hpa_hp_val - _newAccount.Hpa_hp_val;
                    _transaction.Hpt_cre_by = _newAccount.Hpa_cre_by;
                    _transaction.Hpt_cre_dt = _date;
                    _transaction.Hpt_txn_tp = "OBEX";
                    _transaction.Hpt_desc = "Exchange Balance Adjustment";
                    _transaction.Hpt_pc = _newAccount.Hpa_pc;
                    _transaction.Hpt_txn_dt = _date;
                    _transactionList.Add(_transaction);

                }
                else
                {
                    HpTransaction _transaction = new HpTransaction();
                    _transaction.Hpt_acc_no = _newAccount.Hpa_acc_no;
                    _transaction.Hpt_ars = 0;
                    _transaction.Hpt_bal = 0;
                    _transaction.Hpt_com = _newAccount.Hpa_com;
                    _transaction.Hpt_dbt = _newAccount.Hpa_hp_val - _acc.Hpa_hp_val;
                    _transaction.Hpt_cre_by = _newAccount.Hpa_cre_by;
                    _transaction.Hpt_cre_dt = _date;
                    _transaction.Hpt_txn_dt = _date;
                    _transaction.Hpt_txn_tp = "OBEX";
                    _transaction.Hpt_desc = "Exchange Balance Adjustment";
                    _transaction.Hpt_pc = _newAccount.Hpa_pc;
                    _transactionList.Add(_transaction);
                }

                _salesDAL.UpdateResheduleAccLog(_pureInvoiceHdr.Sah_dt, _acc.Hpa_acc_no);

                HPAccountLog _accLogEXO = new HPAccountLog();
                _accLogEXO.Hal_seq_no = _inventoryDAL.GetSerialID();
                _accLogEXO.Hal_acc_no = _newAccount.Hpa_acc_no;
                _accLogEXO.Hal_af_val = _newAccount.Hpa_af_val;
                _accLogEXO.Hal_bank = _newAccount.Hpa_bank;
                _accLogEXO.Hal_buy_val = _newAccount.Hpa_buy_val;
                _accLogEXO.Hal_cash_val = _newAccount.Hpa_cash_val;
                _accLogEXO.Hal_cls_dt = _newAccount.Hpa_cls_dt;
                _accLogEXO.Hal_com = _newAccount.Hpa_com;
                _accLogEXO.Hal_cre_by = _newAccount.Hpa_cre_by;
                _accLogEXO.Hal_cre_dt = _newAccount.Hpa_cre_dt;
                _accLogEXO.Hal_dp_comm = _newAccount.Hpa_dp_comm;
                _accLogEXO.Hal_dp_val = _newAccount.Hpa_dp_val;
                _accLogEXO.Hal_ecd_stus = _newAccount.Hpa_ecd_stus;
                _accLogEXO.Hal_ecd_tp = _newAccount.Hpa_ecd_tp;
                _accLogEXO.Hal_flag = _newAccount.Hpa_flag;
                _accLogEXO.Hal_grup_cd = _newAccount.Hpa_grup_cd;
                _accLogEXO.Hal_hp_val = _newAccount.Hpa_hp_val;
                _accLogEXO.Hal_init_ins = _newAccount.Hpa_init_ins;
                _accLogEXO.Hal_init_ser_chg = _newAccount.Hpa_init_ser_chg;
                _accLogEXO.Hal_init_stm = _newAccount.Hpa_init_stm;
                _accLogEXO.Hal_init_vat = _newAccount.Hpa_init_vat;
                _accLogEXO.Hal_inst_comm = _newAccount.Hpa_inst_comm;
                _accLogEXO.Hal_inst_ins = _newAccount.Hpa_inst_ins;
                _accLogEXO.Hal_inst_ser_chg = _newAccount.Hpa_inst_ser_chg;
                _accLogEXO.Hal_inst_stm = _newAccount.Hpa_inst_stm;
                _accLogEXO.Hal_inst_vat = _newAccount.Hpa_inst_vat;
                _accLogEXO.Hal_intr_rt = _newAccount.Hpa_intr_rt;
                _accLogEXO.Hal_invc_no = _pureInvoiceno;
                _accLogEXO.Hal_is_rsch = _newAccount.Hpa_is_rsch;
                _accLogEXO.Hal_log_dt = _date;
                _accLogEXO.Hal_mgr_cd = _newAccount.Hpa_mgr_cd;
                _accLogEXO.Hal_net_val = _newAccount.Hpa_net_val;
                _accLogEXO.Hal_oth_chg = _newAccount.Hpa_oth_chg;
                _accLogEXO.Hal_pc = _newAccount.Hpa_pc;
                _accLogEXO.Hal_rev_stus = false;
                _accLogEXO.Hal_rls_dt = _newAccount.Hpa_rls_dt;
                _accLogEXO.Hal_rsch_dt = _newAccount.Hpa_rsch_dt;
                _accLogEXO.Hal_rv_dt = _newAccount.Hpa_rv_dt;
                _accLogEXO.Hal_sa_sub_tp = "EXO";
                _accLogEXO.Hal_sch_cd = _newAccount.Hpa_sch_cd;
                _accLogEXO.Hal_sch_tp = _newAccount.Hpa_sch_tp;
                _accLogEXO.Hal_seq = _newAccount.Hpa_seq;
                _accLogEXO.Hal_ser_chg = _newAccount.Hpa_ser_chg;
                _accLogEXO.Hal_stus = _newAccount.Hpa_stus;
                _accLogEXO.Hal_tc_val = _newAccount.Hpa_tc_val;
                _accLogEXO.Hal_term = _newAccount.Hpa_term;
                _accLogEXO.Hal_tot_intr = _newAccount.Hpa_tot_intr;
                _accLogEXO.Hal_tot_vat = _newAccount.Hpa_tot_vat;
                _accLogEXO.Hal_val_01 = _newAccount.Hpa_val_01;
                _accLogEXO.Hal_val_02 = _newAccount.Hpa_val_02;
                _accLogEXO.Hal_val_03 = _newAccount.Hpa_val_03;
                _accLogEXO.Hal_val_04 = _newAccount.Hpa_val_04;
                _accLogEXO.Hal_val_05 = _newAccount.Hpa_val_05;
                _accLogEXO.Hal_init_stm = _newAccount.Hpa_init_stm;
                _accLogEXO.Hal_inst_stm = _newAccount.Hpa_inst_stm;
                _accLogEXO.Hpa_acc_cre_dt = _newAccount.Hpa_acc_cre_dt.Date;


                _salesDAL.SaveHPAccountLog(_accLog);
                _salesDAL.UpdateResheduleAccLog(_date.Date, _accLog.Hal_acc_no);

                _accLog.Hal_seq_no = _otherSeqno;
                _newAccount.Hpa_seq_no = _otherSeqno;
                _salesDAL.SaveHPAccountLog(_accLogEXO);
                _salesDAL.UpdateHPAccountReschedule(_newAccount);
                // _salesDAL.SaveHPAccount(_newAccount);
                //END


                foreach (HpSheduleDetails sch in _currentSchedule)
                {
                    HpScheduleDetailLog _log = new HpScheduleDetailLog();
                    _log.Hsh_acc_no = sch.Hts_acc_no;
                    _log.Hsh_cre_by = sch.Hts_cre_by;
                    _log.Hsh_cre_dt = sch.Hts_cre_dt;
                    _log.Hsh_dt = DateTime.Now;
                    _log.Hsh_due_dt = sch.Hts_due_dt;
                    _log.Hsh_ins = sch.Hts_ins;
                    _log.Hsh_intr = sch.Hts_intr;
                    _log.Hsh_rnt_no = sch.Hts_rnt_no;
                    _log.Hsh_rnt_val = sch.Hts_rnt_val;
                    _log.Hsh_sdt = sch.Hts_sdt;
                    _log.Hsh_seq = _inventoryDAL.GetSerialID();
                    _log.Hsh_ser = sch.Hts_ser;
                    _log.Hsh_vat = sch.Hts_vat;

                    _salesDAL.SaveHPScheduleLog(_log);
                }


                //delete
                _salesDAL.DeleteHPSchedule(_acc.Hpa_acc_no);
                foreach (HpSheduleDetails sch in _newSchedule)
                {
                    sch.Hts_seq = _inventoryDAL.GetSerialID();
                    _salesDAL.SaveHpShedule(sch);
                }



                //insert hpinsurance
                if (_insurance != null)
                {
                    //add reverse
                    HpInsurance _insu = _salesDAL.GetLatestInsurance(_insurance.Hti_acc_num);
                    if (_insu != null)
                    {
                        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_insuranceAuto.Aut_moduleid, _insuranceAuto.Aut_direction, _insuranceAuto.Aut_start_char, _insuranceAuto.Aut_cate_tp, _insuranceAuto.Aut_cate_cd, _insuranceAuto.Aut_modify_dt, _insuranceAuto.Aut_year);
                        string _cusNo = _insuranceAuto.Aut_cate_cd + "-" + _insuranceAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_insuranceAuto);
                        _insu.Hti_seq = _inventoryDAL.GetSerialID();
                        _insu.Hti_ref = _cusNo;
                        _insu.Hit_is_rvs = true;
                        _insu.Hti_mnl_num = _cusNo;
                        _insu.Hti_dt = _date.Date;
                        _salesDAL.Save_HpInsu(_insu);
                    }


                    MasterAutoNumber _number1 = _inventoryDAL.GetAutoNumber(_insuranceAuto.Aut_moduleid, _insuranceAuto.Aut_direction, _insuranceAuto.Aut_start_char, _insuranceAuto.Aut_cate_tp, _insuranceAuto.Aut_cate_cd, _insuranceAuto.Aut_modify_dt, _insuranceAuto.Aut_year);
                    string _cusNo1 = _insuranceAuto.Aut_cate_cd + "-" + _insuranceAuto.Aut_start_char + "-" + _number1.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_insuranceAuto);

                    _insurance.Hti_seq = _inventoryDAL.GetSerialID();
                    _insurance.Hti_ref = _cusNo1;
                    _insurance.Hti_mnl_num = _cusNo1;
                    _salesDAL.Save_HpInsu(_insurance);
                    _diriya = _cusNo1;
                }
                else
                {
                    _diriya = "";
                }

                #endregion


                #region save hptransaction

                if (_transactionList != null && _transactionList.Count > 0)
                {
                    foreach (HpTransaction _transaction in _transactionList)
                    {
                        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_transactionAuto.Aut_moduleid, _transactionAuto.Aut_direction, _transactionAuto.Aut_start_char, _transactionAuto.Aut_cate_tp, _transactionAuto.Aut_cate_cd, _transactionAuto.Aut_modify_dt, _transactionAuto.Aut_year);
                        string _cusNo1 = _transactionAuto.Aut_cate_cd + "-" + _transactionAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_transactionAuto);//update MST_AUTO table
                        _transaction.Hpt_seq = _inventoryDAL.GetSerialID();
                        _transaction.Hpt_ref_no = _cusNo1;

                        _salesDAL.Save_HpTransaction(_transaction);
                    }
                }

                #endregion

                //ADDED 2013/05/31
                //REQUEST FINISH
                _generalDAL.UpdateApprovalStatus(_request);


                //_salesDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                //_inventoryRepDAL.ConnectionClose();
                //_fmsInventoryDal.ConnectionClose();
                //_generalDAL.ConnectionClose();

                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();
                _generalDAL.TransactionCommit();
                _effect = 1;
                _creditnotelist = _creditNoteNoList;
                _inventorydoclist = _inventoryDocumentList;
                _invNo = _pureInvoiceno;


            }
            catch (Exception ex)
            {
                _effect = -1;
                _creditnotelist = "";
                _inventorydoclist = "";
                _invNo = "";
                _diriya = "";
                _error = ex.Message;
            }
            _error = "";
            return _effect;
        }

        public List<HpSchemeDefinition> GetSerialSchemeNew(string _type, string _value, DateTime _date, string _item, string _serial, string _scheme, string _pbBook = null, string _pbLvl = null)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSerialSchemeNew(_type, _value, _date, _item, _serial, _scheme, _pbBook, _pbLvl);
        }

        public HpAccount GetLatestHPAccount(string _company, string _profitcenter)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetLatestHPAccount(_company, _profitcenter);
        }

        public List<InvoiceItem> GetRegAllowInvItem(string _company, string _profitcenter, string _invoice)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRegAllowInvItem(_company, _profitcenter, _invoice);
        }

        public List<InvoiceItem> GetVehRegAllowInv(string _company, string _profitcenter, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehRegAllowInv(_company, _profitcenter, _date);
        }

        public List<InvoiceItem> GetVehInsuAllowInv(string _company, string _profitcenter, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehInsuAllowInv(_company, _profitcenter, _date);
        }
        public List<InvoiceItem> GetVehInsuAllowCredInv(string _company, string _profitcenter, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehInsuAllowCredInv(_company, _profitcenter, _date);
        }
        public DataTable GetVehInsuAllowDCNItems(string _company, string _loc, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehInsuAllowDCNItems(_company, _loc, _date);
        }
        public DataTable GetESDSrDet(string _com, string _PC, string _epf)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetESDSrDet(_com, _PC, _epf);
        }

        public List<VehicalRegistration> CheckVehRegTxn(string _company, string _profitcenter, string _invoice, string _itm)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.CheckVehRegTxn(_company, _profitcenter, _invoice, _itm);
        }

        public DataTable getLocDesc(string _Com, string _Type, string _Code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getLocDesc(_Com, _Type, _Code);
        }

        //kapila
        public DataTable get_DCN_DP_Cust(string _company, string _loc, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.get_DCN_DP_Cust(_company, _loc, _date);
        }
        //kapila
        public DataTable get_DCN_receipt(string _company, string _loc, string _qno)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.get_DCN_receipt(_company, _loc, _qno);
        }
        public DataTable CheckAdvanForIntr(string _company, string _document)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.CheckAdvanForIntr(_company, _document);
        }

        public MasterItemTaxClaim GetTaxClaimDet(string _company, string _item, string _claimCd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetTaxClaimDet(_company, _item, _claimCd);
        }

        public List<CashSalesRev_History> Load_reversalsItems(string _fuc_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_reversalsItems(_fuc_cd);
        }
        public List<CashSalesRev_History> Load_Invoicedetails(string _fuc_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_Invoicedetails(_fuc_cd);
        }
        public List<CashSalesRev_History> Load_OutItemDetails(string _fuc_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_OutItemDetails(_fuc_cd);
        }
        public List<CashSalesRev_History> Load_DeptComments(string _fuc_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_DeptComments(_fuc_cd);
        }
        public List<CashSalesRev_History> Load_OutItemDetailsHS(string _fuc_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_OutItemDetailsHS(_fuc_cd);
        }

        public int EliteCommissionProcessWithExchangeRate(string _circular, List<string> _pcList, DateTime _from, DateTime _to, string _com, int year, int month, string creby, DateTime credt, out List<EliteCommission> _errlist, bool isErrorProcess, out string err, decimal __exgRate)
        {




            //01get all filtered invoices
            //    -get do invoice items and invoice no for period-Done
            //    -check discount-Done
            //    -check promation-Done
            //    insert into temp list-Done

            //get all filtered REVERSE
            //    -get srn invoice items and invoice no for period
            //    -check discount-Done
            //    -check promation-Done
            //    insert into temp list-Done

            //02. get all employees
            //03.run process1 to mgr,EXE
            //run process1 for other

            //process1:
            //get defintion for emp type
            //call commission
            //   insert to temp LISTS

            //04.run additionl calculations
            //   -get definition
            //   -update temp LISTS

            //05.save to DB

            //commission
            //get sum amount for employee 
            //check definition is in BT(before target)-comm=amount*BT or value(Get latest)
            //if amount>target
            //comm=amount*tar or value
            //check for slab 
            //comm=comm+amount*tar or value (get latest)


            try
            {
                //using (TransactionScope tr = new TransactionScope())
                //{
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                _generalDAL = new GeneralDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();
                //01. Start
                List<EliteCommissionDefinition> _def = _salesDAL.GetEliteCommissionDefinition(_circular);
                EliteCommissionDefinition _definition = _def[0];

                //get sales type list
                List<EliteCommissionSalesTypes> _salesType = _salesDAL.GetEliteCommissionSalesType(_definition.Saec_circ);
                List<EliteCommissionAdditional> _additional = _salesDAL.GetEliteCommissionAdditional(_definition.Saec_circ);
                List<EliteCommissionIgnore> _removeList = _salesDAL.GetEliteCommissionIgnore(_definition.Saec_circ);
                //get item list
                List<EliteCommissionItem> _itemList = _salesDAL.GetEliteCommissionItem(_definition.Saec_circ);
                string _items = "";
                bool inNotIn = false;
                if (_itemList != null && _itemList.Count > 0)
                {
                    foreach (EliteCommissionItem _itm in _itemList)
                    {
                        if (_itm.Saec_brand != "" && _itm.Saec_cat1 != "")
                        {
                            List<MasterItem> _item = _salesDAL.GetItemsByCateAndBrand(_itm.Saec_cat1, null, null, _itm.Saec_brand, _com);
                            foreach (MasterItem itm in _item)
                            {
                                _items = _items + itm.Mi_cd + ",";
                            }
                        }

                        if (_itm.Saec_brand != "" && _itm.Saec_cat2 != "")
                        {
                            List<MasterItem> _item = _salesDAL.GetItemsByCateAndBrand(null, _itm.Saec_cat2, null, _itm.Saec_brand, _com);
                            foreach (MasterItem itm in _item)
                            {
                                _items = _items + itm.Mi_cd + ",";
                            }
                        }

                        if (_itm.Saec_cat1 != "" && _itm.Saec_cat2 != "")
                        {
                            List<MasterItem> _item = _salesDAL.GetItemsByCateAndBrand(_itm.Saec_cat1, _itm.Saec_cat2, null, null, _com);
                            foreach (MasterItem itm in _item)
                            {
                                _items = _items + itm.Mi_cd + ",";
                            }
                        }

                        else if (_itm.Saec_brand != "")
                        {
                            List<MasterItem> _item = _salesDAL.GetItemsByCateAndBrand(null, null, null, _itm.Saec_brand, _com);
                            foreach (MasterItem itm in _item)
                            {
                                _items = _items + itm.Mi_cd + ",";
                            }
                        }
                        else if (_itm.Saec_cat1 != "")
                        {
                            List<MasterItem> _item = _salesDAL.GetItemsByCateAndBrand(_itm.Saec_cat1, null, null, null, _com);
                            foreach (MasterItem itm in _item)
                            {
                                _items = _items + itm.Mi_cd + ",";
                            }
                        }
                        else if (_itm.Saec_cat2 != "")
                        {
                            List<MasterItem> _item = _salesDAL.GetItemsByCateAndBrand(null, _itm.Saec_cat2, null, null, _com);
                            foreach (MasterItem itm in _item)
                            {
                                _items = _items + itm.Mi_cd + ",";
                            }
                        }
                        else if (_itm.Saec_itm != "")
                        {
                            DataTable _item = _salesDAL.GetItemCode(_com, _itm.Saec_itm);
                            _items = _items + _item.Rows[0]["Mi_cd"].ToString() + ",";

                        }
                        //include or not include
                        inNotIn = _itm.Saec_direct;
                    }

                    //remove last comma
                    if (_items != "")
                        _items = _items.Substring(0, _items.Length - 1);

                }

                foreach (string _pc in _pcList)
                {
                    List<EliteCommissionInvoice> _doList = new List<EliteCommissionInvoice>();
                    List<EliteCommissionInvoice> _srnList = new List<EliteCommissionInvoice>();
                    MasterProfitCenter _pro = _generalDAL.GetPCByPCCode(_com, _pc);
                    List<FF.BusinessObjects.EliteCommissionInvoice> _invoiceList = new List<BusinessObjects.EliteCommissionInvoice>();
                    foreach (EliteCommissionSalesTypes _sal in _salesType)
                    {
                        DataTable _temDo;

                        if (_items == "")
                        {

                            _temDo = _salesDAL.GetEliteCommissionEliteCommission(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 1, _sal.Saec_sales_type, _items);
                            if (_definition.Saec_alw_discount > 0)
                            {
                                DataTable _t = _salesDAL.GetEliteCommissionEliteCommissionPromotion(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 1, _sal.Saec_sales_type, _items);
                                _temDo.Merge(_t);

                                //cr note
                                DataTable _tt = _salesDAL.GetEliteCommissionEliteCommissionPromotionCreditNote(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 1, _sal.Saec_sales_type, _items);
                                _temDo.Merge(_tt);
                            }

                        }
                        else
                        {
                            if (inNotIn)
                            {
                                _temDo = _salesDAL.GetEliteCommissionEliteCommission(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 2, _sal.Saec_sales_type, _items);
                                if (_definition.Saec_alw_discount > 0)
                                {
                                    DataTable _t = _salesDAL.GetEliteCommissionEliteCommissionPromotion(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 2, _sal.Saec_sales_type, _items);
                                    _temDo.Merge(_t);

                                    //cr note
                                    DataTable _tt = _salesDAL.GetEliteCommissionEliteCommissionPromotionCreditNote(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 2, _sal.Saec_sales_type, _items);
                                    _temDo.Merge(_tt);
                                }
                            }
                            else
                            {
                                _temDo = _salesDAL.GetEliteCommissionEliteCommission(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 5, _sal.Saec_sales_type, _items);
                                if (_definition.Saec_alw_discount > 0)
                                {
                                    DataTable _t = _salesDAL.GetEliteCommissionEliteCommissionPromotion(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 5, _sal.Saec_sales_type, _items);
                                    _temDo.Merge(_t);

                                    //cr note
                                    DataTable _tt = _salesDAL.GetEliteCommissionEliteCommissionPromotionCreditNote(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 5, _sal.Saec_sales_type, _items);
                                    _temDo.Merge(_tt);
                                }
                            }
                        }
                        //add data table values to list
                        foreach (DataRow dr in _temDo.Rows)
                        {
                            EliteCommissionInvoice _inv = new EliteCommissionInvoice();
                            _inv.Cashier_code = dr["sah_cre_by"].ToString();
                            _inv.Discount = Convert.ToDecimal(dr["sad_disc_amt"]);
                            _inv.Exe_code = dr["sah_sales_ex_cd"].ToString();
                            _inv.Invoice_no = dr["sah_inv_no"].ToString();
                            _inv.Invoice_type = true;
                            _inv.Item_code = dr["sad_itm_cd"].ToString();
                            _inv.Mge_code = dr["sah_man_cd"].ToString();
                            _inv.Value = Convert.ToDecimal(dr["sad_tot_amt"]);
                            _inv.Vat = Convert.ToDecimal(dr["sad_itm_tax_amt"]);
                            _doList.Add(_inv);
                            if (dr["sah_inv_no"].ToString() == "MSR08-CAINV-00044151")
                            {
                                _doList.Add(_inv);
                            }
                        }

                        //before 2013/07/01
                        //get credit note without srn(Kapila)
                        DateTime cutoff = new DateTime(2013, 07, 01);
                        if (_from < cutoff)
                        {
                            DataTable _crnote = _salesDAL.GetCrnoteWithoutSRN(_pro.Mpc_def_loc, _from, _to, _com, _sal.Saec_sales_type, _pc);
                            foreach (DataRow dr in _crnote.Rows)
                            {
                                EliteCommissionInvoice _inv = new EliteCommissionInvoice();
                                _inv.Cashier_code = dr["sah_cre_by"].ToString();
                                _inv.Discount = Convert.ToDecimal(dr["sad_disc_amt"]);
                                _inv.Exe_code = dr["sah_sales_ex_cd"].ToString();
                                _inv.Invoice_no = dr["sah_inv_no"].ToString();
                                _inv.Invoice_type = true;
                                _inv.Item_code = dr["sad_itm_cd"].ToString();
                                _inv.Mge_code = dr["sah_man_cd"].ToString();
                                _inv.Value = Convert.ToDecimal(dr["sad_tot_amt"]);
                                _inv.Vat = Convert.ToDecimal(dr["sad_itm_tax_amt"]);
                                _doList.Add(_inv);
                            }
                        }

                        DataTable _temSrn = new DataTable();
                        if (_items == "")
                        {
                            _temSrn = _salesDAL.GetEliteCommissionEliteCommission(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 3, _sal.Saec_sales_type, _items);
                            if (_definition.Saec_alw_discount > 0)
                            {
                                DataTable _t = _salesDAL.GetEliteCommissionEliteCommissionPromotion(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 3, _sal.Saec_sales_type, _items);
                                _temSrn.Merge(_t);
                            }
                        }
                        else
                        {
                            if (inNotIn)
                            {
                                _temSrn = _salesDAL.GetEliteCommissionEliteCommission(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 4, _sal.Saec_sales_type, _items);
                                if (_definition.Saec_alw_discount > 0)
                                {
                                    DataTable _t = _salesDAL.GetEliteCommissionEliteCommissionPromotion(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 4, _sal.Saec_sales_type, _items);
                                    _temSrn.Merge(_t);
                                }
                            }
                            else
                            {
                                _temDo = _salesDAL.GetEliteCommissionEliteCommission(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 6, _sal.Saec_sales_type, _items);
                                if (_definition.Saec_alw_discount > 0)
                                {
                                    DataTable _t = _salesDAL.GetEliteCommissionEliteCommissionPromotion(_pro.Mpc_def_loc, _from, _to, _definition.Saec_alw_discount, _com, 6, _sal.Saec_sales_type, _items);
                                    _temDo.Merge(_t);
                                }
                            }

                        }
                        //add data table values to list
                        foreach (DataRow dr in _temSrn.Rows)
                        {
                            EliteCommissionInvoice _inv = new EliteCommissionInvoice();
                            _inv.Cashier_code = dr["sah_cre_by"].ToString();
                            _inv.Discount = Convert.ToDecimal(dr["sad_disc_amt"]);
                            _inv.Exe_code = dr["sah_sales_ex_cd"].ToString();
                            _inv.Invoice_no = dr["sah_inv_no"].ToString();
                            _inv.Invoice_type = false;
                            _inv.Item_code = dr["sad_itm_cd"].ToString();
                            _inv.Mge_code = dr["sah_man_cd"].ToString();
                            _inv.Value = Convert.ToDecimal(dr["sad_tot_amt"]);
                            _inv.Vat = Convert.ToDecimal(dr["sad_itm_tax_amt"]);
                            _srnList.Add(_inv);
                        }

                    }
                    //01 end

                    //02 start
                    #region GET EMPLOYEE
                    DataTable _mgrTbl = _salesDAL.GetPcEmployee(_com, _pc, "SRMGR");
                    //insert into list
                    List<PostCommissionEmployee> _mgrList = new List<PostCommissionEmployee>();

                    foreach (DataRow dr in _mgrTbl.Rows)
                    {
                        if (_removeList != null && _removeList.Count > 0)
                        {
                            foreach (EliteCommissionIgnore ign in _removeList)
                            {
                                if (dr["ESEP_CAT_CD"].ToString() == ign.Saec_emp_cate && dr["ESEP_CAT_SUBCD"].ToString() == ign.Saec_emp_sub_cate)
                                    continue;
                            }
                        }
                        if (Convert.ToInt32(dr["mpce_act"].ToString()) == 1)
                        {
                            PostCommissionEmployee _emp = new PostCommissionEmployee();
                            _emp.Emp_code = dr["esep_cd"].ToString();
                            _emp.Emp_epf = dr["esep_epf"].ToString();
                            _mgrList.Add(_emp);
                        }
                    }

                    //get executives
                    DataTable _exeTbl = _salesDAL.GetPcEmployee(_com, _pc, "SALEX");
                    //insert into list
                    List<PostCommissionEmployee> _exeList = new List<PostCommissionEmployee>();
                    foreach (DataRow dr in _exeTbl.Rows)
                    {
                        if (_removeList != null && _removeList.Count > 0)
                        {
                            foreach (EliteCommissionIgnore ign in _removeList)
                            {

                                if (dr["ESEP_CAT_CD"].ToString() == ign.Saec_emp_cate && dr["ESEP_CAT_SUBCD"].ToString() == ign.Saec_emp_sub_cate)
                                    continue;
                            }
                        }
                        PostCommissionEmployee _emp = new PostCommissionEmployee();
                        _emp.Emp_code = dr["esep_cd"].ToString();
                        _emp.Emp_epf = dr["esep_epf"].ToString();
                        _exeList.Add(_emp);
                    }

                    //get cashier
                    DataTable _casTbl = _salesDAL.GetPcEmployee(_com, _pc, "CASHIER");
                    //insert into list
                    List<PostCommissionEmployee> _casList = new List<PostCommissionEmployee>();
                    foreach (DataRow dr in _casTbl.Rows)
                    {
                        if (_removeList != null && _removeList.Count > 0)
                        {
                            foreach (EliteCommissionIgnore ign in _removeList)
                            {
                                if (dr["ESEP_CAT_CD"].ToString() == ign.Saec_emp_cate && dr["ESEP_CAT_SUBCD"].ToString() == ign.Saec_emp_sub_cate)
                                    continue;
                            }
                        }
                        PostCommissionEmployee _emp = new PostCommissionEmployee();
                        _emp.Emp_code = dr["esep_cd"].ToString();
                        _emp.Emp_epf = dr["esep_epf"].ToString();
                        _casList.Add(_emp);
                    }

                    //get helper
                    DataTable _helTbl = _salesDAL.GetPcEmployee(_com, _pc, "HELPER");
                    //insert into list
                    List<PostCommissionEmployee> _helList = new List<PostCommissionEmployee>();
                    foreach (DataRow dr in _helTbl.Rows)
                    {
                        if (_removeList != null && _removeList.Count > 0)
                        {
                            foreach (EliteCommissionIgnore ign in _removeList)
                            {
                                if (dr["ESEP_CAT_CD"].ToString() == ign.Saec_emp_cate && dr["ESEP_CAT_SUBCD"].ToString() == ign.Saec_emp_sub_cate)
                                    continue;
                            }
                        }
                        PostCommissionEmployee _emp = new PostCommissionEmployee();
                        _emp.Emp_code = dr["esep_cd"].ToString();
                        _emp.Emp_epf = dr["esep_epf"].ToString();
                        _helList.Add(_emp);
                    }

                    //get cH-head
                    DataTable _CHTbl = _salesDAL.GetPcEmployee(_com, _pc, "CH_HEAD");
                    //insert into list
                    List<PostCommissionEmployee> _chHeadList = new List<PostCommissionEmployee>();
                    foreach (DataRow dr in _CHTbl.Rows)
                    {
                        if (_removeList != null && _removeList.Count > 0)
                        {
                            foreach (EliteCommissionIgnore ign in _removeList)
                            {
                                if (dr["ESEP_CAT_CD"].ToString() == ign.Saec_emp_cate && dr["ESEP_CAT_SUBCD"].ToString() == ign.Saec_emp_sub_cate)
                                    continue;
                            }
                        }
                        PostCommissionEmployee _emp = new PostCommissionEmployee();
                        _emp.Emp_code = dr["esep_cd"].ToString();
                        _emp.Emp_epf = dr["esep_epf"].ToString();
                        _helList.Add(_emp);
                    }
                    #endregion

                    List<EliteCommission> _commissionList = new List<EliteCommission>();
                    List<EliteCommissionSlab> _commissionDetList = new List<EliteCommissionSlab>();

                    //03. start
                    #region MANAGER

                    //get comm definition for mgr
                    List<EliteCommissionDetail> _tem = _salesDAL.GetEliteCommissionDetails(_definition.Saec_circ);
                    List<EliteCommissionDetail> _mgrComm = (from _res in _tem
                                                            where _res.Saec_emp_type == "SRMGR" && _res.Saec_type != "OT"
                                                            select _res).ToList<EliteCommissionDetail>();

                    if (_mgrComm != null && _mgrComm.Count > 0)
                    {
                        //get sum value for manager
                        foreach (PostCommissionEmployee _mgr in _mgrList)
                        {
                            EliteCommission _commission = new EliteCommission();

                            List<PostCommissionEmployee> _aoaList = new List<PostCommissionEmployee>();
                            if (_removeList != null && _removeList.Count > 0)
                            {
                                foreach (EliteCommissionIgnore ign in _removeList)
                                {
                                    DataTable _dt = _salesDAL.GetPcEmployeeByCatSub(_com, _pc, ign.Saec_emp_cate, ign.Saec_emp_sub_cate);
                                    foreach (DataRow _dr in _dt.Rows)
                                    {
                                        PostCommissionEmployee _emp = new PostCommissionEmployee();
                                        _emp.Emp_code = _dr["esep_cd"].ToString();
                                        _emp.Emp_epf = _dr["esep_epf"].ToString();
                                        _aoaList.Add(_emp);
                                    }

                                }
                            }
                            List<EliteCommissionInvoice> _mgrDO = (from _res in _doList
                                                                   //where _res.Mge_code == _mgr.Emp_epf
                                                                   orderby _res.Invoice_no
                                                                   select _res
                                                                   ).ToList<EliteCommissionInvoice>();
                            List<EliteCommissionInvoice> tt = new List<EliteCommissionInvoice>();
                            //remove aoa invoices
                            for (int i = 0; i < _mgrDO.Count; i++)
                            {
                                List<PostCommissionEmployee> _temp = (from _res in _aoaList
                                                                      where _res.Emp_epf == _mgrDO[i].Exe_code
                                                                      select _res).ToList<PostCommissionEmployee>();
                                if (_temp != null && _temp.Count > 0)
                                {
                                    tt.Add(_mgrDO[i]);
                                }

                            }

                            //save do list
                            foreach (EliteCommissionInvoice inv in _mgrDO)
                            {
                                FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                _inv.Saec_pc = _pc;
                                _inv.Saec_discount = inv.Discount;
                                _inv.Saec_vat = inv.Vat;
                                _inv.Saec_price = inv.Value;
                                _inv.Saec_is_rev = false;
                                _inv.Saec_inv_no = inv.Invoice_no;
                                _inv.Saec_emp_type = "SRMGR";
                                _inv.Saec_emp_epf = _mgr.Emp_epf;
                                _inv.Saec_emp_code = _mgr.Emp_code;
                                _inv.Saec_itm = inv.Item_code;
                                _inv.Saec_from = _from;
                                _inv.Saec_to = _to;
                                _invoiceList.Add(_inv);
                            }


                            List<EliteCommissionInvoice> _mgrSRN = (from _res in _srnList
                                                                    //where _res.Mge_code == _mgr.Emp_epf
                                                                    select _res).ToList<EliteCommissionInvoice>();
                            List<EliteCommissionInvoice> bb = new List<EliteCommissionInvoice>();
                            for (int i = 0; i < _mgrSRN.Count; i++)
                            {
                                List<PostCommissionEmployee> _temp = (from _res in _aoaList
                                                                      where _res.Emp_epf == _mgrSRN[i].Exe_code
                                                                      select _res).ToList<PostCommissionEmployee>();
                                if (_temp != null && _temp.Count > 0)
                                {
                                    bb.Add(_mgrSRN[i]);
                                }
                            }

                            foreach (EliteCommissionInvoice inv in _mgrSRN)
                            {
                                FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                _inv.Saec_pc = _pc;
                                _inv.Saec_discount = inv.Discount;
                                _inv.Saec_vat = inv.Vat;
                                _inv.Saec_price = inv.Value;
                                _inv.Saec_is_rev = true;
                                _inv.Saec_emp_type = "SRMGR";
                                _inv.Saec_inv_no = inv.Invoice_no;
                                _inv.Saec_emp_epf = _mgr.Emp_epf;
                                _inv.Saec_emp_code = _mgr.Emp_code;
                                _inv.Saec_itm = inv.Item_code;
                                _inv.Saec_from = _from;
                                _inv.Saec_to = _to;
                                _invoiceList.Add(_inv);

                            }
                            //holds total - value
                            //holds total + value for mgr
                            decimal totalPrice = _mgrDO.Sum(x => x.Value) - tt.Sum(x => x.Value);
                            decimal totalVat = _mgrDO.Sum(x => x.Vat) - tt.Sum(x => x.Vat);
                            decimal totalDisc = _mgrDO.Sum(x => x.Discount) - tt.Sum(x => x.Discount);
                            decimal totalPlus = totalPrice - totalDisc;


                            decimal totalMPrice = _mgrSRN.Sum(x => x.Value) - bb.Sum(x => x.Value);
                            decimal totalMVat = _mgrSRN.Sum(x => x.Vat) - bb.Sum(x => x.Vat);
                            decimal totalMDisc = _mgrSRN.Sum(x => x.Discount) - bb.Sum(x => x.Discount);
                            decimal totalMinus = totalMPrice - totalMDisc;

                            //hold total value
                            decimal totalvalue = totalPlus - totalMinus;
                            _commission.Saec_com = _com;
                            _commission.Saec_pc = _pc;
                            _commission.Saec_emp_code = _mgr.Emp_code;
                            _commission.Saec_emp_epf = _mgr.Emp_epf;
                            _commission.Saec_emp_type = "SRMGR";
                            _commission.Saec_cre_by = creby;
                            _commission.Saec_cre_dt = credt;
                            _commission.Saec_price = totalPrice;
                            _commission.Saec_rtn = totalMinus;
                            _commission.Saec_vat = totalVat;
                            _commission.Saec_dis = totalDisc;
                            _commission.Saec_net = totalPlus - totalMinus;
                            _commission.Saec_gross = totalPlus;
                            _commission.Saec_year = year;
                            _commission.Saec_month = month;
                            _commission.Saec_from = _from;
                            _commission.Saec_to = _to;
                            _commission.Saec_exg_rt = __exgRate;

                            // totalvalue = totalvalue * __exgRate;

                            //hold commission value
                            decimal commission = 0;

                            //check Target cover or not(get target value range)
                            List<EliteCommissionDetail> _target = (from _res in _mgrComm
                                                                   where _res.Saec_type == "TA"
                                                                   orderby _res.Saec_line_no descending
                                                                   select _res).ToList<EliteCommissionDetail>();

                            bool targetCover = false;
                            foreach (EliteCommissionDetail _det in _target)
                            {

                                if ((_det.Saec_from) <= (totalvalue))
                                {
                                    if ((_det.Saec_to) <= (totalvalue))
                                    {
                                        if ((_det.Saec_value) > 0)
                                        {
                                            commission = (_det.Saec_value);
                                            targetCover = true;
                                            break;
                                        }
                                        else
                                        {
                                            commission = ((_det.Saec_to) * _det.Saec_rate) / 100;
                                            targetCover = true;
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        if ((_det.Saec_value) > 0)
                                        {
                                            commission = (_det.Saec_value);
                                            targetCover = true;
                                            break;
                                        }
                                        else
                                        {
                                            commission = (totalvalue * _det.Saec_rate) / 100;
                                            targetCover = true;
                                            break;
                                        }
                                    }
                                }




                            }

                            if (!targetCover)
                            {
                                //no slab
                                //check for below target definition
                                List<EliteCommissionDetail> _belowList = (from _res in _mgrComm
                                                                          where _res.Saec_type == "BE"
                                                                          orderby _res.Saec_line_no descending
                                                                          select _res).ToList<EliteCommissionDetail>();
                                if (_belowList != null && _belowList.Count > 0)
                                {

                                    foreach (EliteCommissionDetail _below in _belowList)
                                    {
                                        //check for from value
                                        if ((_below.Saec_from) <= totalvalue)
                                        {
                                            if ((_below.Saec_to) >= totalvalue)
                                            {
                                                if (_below.Saec_value > 0)
                                                {
                                                    commission = (_below.Saec_value);
                                                }
                                                else
                                                {
                                                    commission = (totalvalue * _below.Saec_rate) / 100;
                                                }
                                            }
                                        }

                                    }

                                }

                            }
                            else if (targetCover)
                            {
                                //go for slab
                                //order by descending to get maximum slab
                                List<EliteCommissionDetail> _slabList = (from _res in _mgrComm
                                                                         where _res.Saec_type == "AF"
                                                                         orderby _res.Saec_line_no
                                                                         select _res).ToList<EliteCommissionDetail>();

                                if (_slabList != null && _slabList.Count > 0)
                                {
                                    EliteCommissionSlab _tslab = new EliteCommissionSlab();
                                    _tslab.Saec_com = _com;
                                    _tslab.Saec_cre_by = creby;
                                    _tslab.Saec_cre_dt = credt;
                                    _tslab.Saec_emp_code = _mgr.Emp_code;
                                    _tslab.Saec_emp_type = "SRMGR";
                                    _tslab.Saec_pc = _pc;
                                    _tslab.Saec_from = _from;
                                    _tslab.Saec_to = _to;

                                    _tslab.Saec_comm = commission;
                                    _tslab.Saec_slab = 0;
                                    _commissionDetList.Add(_tslab);

                                    foreach (EliteCommissionDetail _slabDet in _slabList)
                                    {

                                        EliteCommissionSlab _slab = new EliteCommissionSlab();
                                        _slab.Saec_com = _com;
                                        _slab.Saec_cre_by = creby;
                                        _slab.Saec_cre_dt = credt;
                                        _slab.Saec_emp_code = _mgr.Emp_code;
                                        _slab.Saec_emp_type = "SRMGR";
                                        _slab.Saec_pc = _pc;
                                        _slab.Saec_from = _from;
                                        _slab.Saec_to = _to;
                                        //check for from value
                                        if ((_slabDet.Saec_from) <= totalvalue)
                                        {

                                            _slab.Saec_slab = _slabDet.Saec_line_no;
                                            if ((_slabDet.Saec_to) <= totalvalue)
                                            {
                                                if (_slabDet.Saec_value > 0)
                                                {
                                                    //totalvalue = totalvalue - (_slabDet.Saec_to - _slabDet.Saec_from);
                                                    _slab.Saec_comm = (_slabDet.Saec_value);
                                                    commission = commission + (_slabDet.Saec_value);
                                                    _commissionDetList.Add(_slab);
                                                }
                                                else
                                                {
                                                    // totalvalue = totalvalue - (_slabDet.Saec_to - _slabDet.Saec_from);
                                                    _slab.Saec_comm = (((_slabDet.Saec_to - _slabDet.Saec_from)) * _slabDet.Saec_rate) / 100;
                                                    commission = commission + (((_slabDet.Saec_to - _slabDet.Saec_from)) * _slabDet.Saec_rate) / 100;
                                                    _commissionDetList.Add(_slab);
                                                }

                                            }
                                        }
                                        //else
                                        //{
                                        //    if (_slabDet.Saec_value > 0)
                                        //    {
                                        //        //totalvalue = totalvalue - (_slabDet.Saec_to - _slabDet.Saec_from);
                                        //        _slab.Saec_comm = _slabDet.Saec_value;
                                        //        commission = commission + _slabDet.Saec_value;
                                        //        _commissionDetList.Add(_slab);
                                        //    }
                                        //    else
                                        //    {
                                        //        // totalvalue = totalvalue - (_slabDet.Saec_to - _slabDet.Saec_from);
                                        //        _slab.Saec_comm = ((_slabDet.Saec_to - _slabDet.Saec_from) * _slabDet.Saec_rate) / 100;
                                        //        commission = commission + ((_slabDet.Saec_to - _slabDet.Saec_from) * _slabDet.Saec_rate) / 100;
                                        //        _commissionDetList.Add(_slab);
                                        //    }
                                        //}

                                    }
                                    goto End;
                                }
                            End:
                                ;
                            }

                            //convert to rupee
                            commission = commission * __exgRate;

                            //check additional
                            if (_additional != null && _additional.Count > 0)
                            {
                                List<EliteCommissionAdditional> _exeAdd = (from _res in _additional
                                                                           where _res.Saec_emp_type == "Manager"
                                                                           select _res).ToList<EliteCommissionAdditional>();


                                if (_exeAdd != null && _exeAdd.Count > 0)
                                {
                                    foreach (EliteCommissionAdditional _add in _exeAdd)
                                    {
                                        if (_add.Saec_tp == "Aditional")
                                            commission = commission + (_exeAdd[0].Saec_val);
                                        else
                                            commission = commission - (_exeAdd[0].Saec_val);
                                    }
                                }

                            }
                            _commission.Saec_comm = commission;

                            _commissionList.Add(_commission);
                        }
                    }
                    #endregion

                    #region EXECUTIVE
                    //exe
                    List<EliteCommissionDetail> _ExeComm = (from _res in _tem
                                                            where _res.Saec_emp_type == "SALEX" && _res.Saec_type != "OT"
                                                            select _res).ToList<EliteCommissionDetail>();

                    if (_ExeComm != null && _ExeComm.Count > 0)
                    {
                        //get sum value for manager
                        foreach (PostCommissionEmployee _exe in _exeList)
                        {
                            EliteCommission _commission = new EliteCommission();
                            List<EliteCommissionInvoice> _exeDO = (from _res in _doList
                                                                   where _res.Exe_code == _exe.Emp_epf
                                                                   select _res).ToList<EliteCommissionInvoice>();

                            foreach (EliteCommissionInvoice inv in _exeDO)
                            {
                                FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                _inv.Saec_pc = _pc;
                                _inv.Saec_discount = inv.Discount;
                                _inv.Saec_vat = inv.Vat;
                                _inv.Saec_price = inv.Value;
                                _inv.Saec_is_rev = false;
                                _inv.Saec_emp_type = "SALEX";
                                _inv.Saec_emp_epf = _exe.Emp_epf;
                                _inv.Saec_emp_code = _exe.Emp_code;
                                _inv.Saec_itm = inv.Item_code;
                                _inv.Saec_inv_no = inv.Invoice_no;
                                _inv.Saec_from = _from;
                                _inv.Saec_to = _to;
                                _invoiceList.Add(_inv);
                            }
                            //holds total + value for mgr
                            //decimal totalPlus = _exeDO.Sum(x => x.Value);
                            List<EliteCommissionInvoice> _exeSRN = (from _res in _srnList
                                                                    where _res.Exe_code == _exe.Emp_epf
                                                                    select _res).ToList<EliteCommissionInvoice>();
                            foreach (EliteCommissionInvoice inv in _exeSRN)
                            {
                                FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                _inv.Saec_pc = _pc;
                                _inv.Saec_discount = inv.Discount;
                                _inv.Saec_vat = inv.Vat;
                                _inv.Saec_price = inv.Value;
                                _inv.Saec_is_rev = true;
                                _inv.Saec_emp_type = "SALEX";
                                _inv.Saec_emp_epf = _exe.Emp_epf;
                                _inv.Saec_inv_no = inv.Invoice_no;
                                _inv.Saec_itm = inv.Item_code;
                                _inv.Saec_emp_code = _exe.Emp_code;
                                _inv.Saec_from = _from;
                                _inv.Saec_to = _to;
                                _invoiceList.Add(_inv);
                            }
                            //holds total - value
                            //decimal totalMinus = _exeSRN.Sum(x => x.Value);

                            decimal totalPrice = _exeDO.Sum(x => x.Value);
                            decimal totalVat = _exeDO.Sum(x => x.Vat);
                            decimal totalDisc = _exeDO.Sum(x => x.Discount);
                            decimal totalPlus = totalPrice - totalDisc;


                            decimal totalMPrice = _exeSRN.Sum(x => x.Value);
                            decimal totalMVat = _exeSRN.Sum(x => x.Vat);
                            decimal totalMDisc = _exeSRN.Sum(x => x.Discount);
                            decimal totalMinus = totalMPrice - totalMDisc;


                            //hold total value
                            decimal totalvalue = totalPlus - totalMinus;
                            _commission.Saec_com = _com;
                            _commission.Saec_pc = _pc;
                            _commission.Saec_emp_code = _exe.Emp_code;
                            _commission.Saec_emp_epf = _exe.Emp_epf;
                            _commission.Saec_emp_type = "SALEX";
                            _commission.Saec_cre_by = creby;
                            _commission.Saec_cre_dt = credt;
                            _commission.Saec_price = totalPrice;
                            _commission.Saec_rtn = totalMinus;
                            _commission.Saec_vat = totalVat;
                            _commission.Saec_dis = totalDisc;
                            _commission.Saec_gross = totalPlus;
                            _commission.Saec_net = totalPlus - totalMinus;
                            _commission.Saec_year = year;
                            _commission.Saec_month = month;
                            _commission.Saec_from = _from;
                            _commission.Saec_to = _to;
                            _commission.Saec_exg_rt = __exgRate;
                            //totalvalue = totalvalue * __exgRate;

                            //hold commission value
                            decimal commission = 0;
                            //check Target cover or not(get target value range)
                            List<EliteCommissionDetail> _target = (from _res in _ExeComm
                                                                   where _res.Saec_type == "TA"
                                                                   orderby _res.Saec_line_no descending
                                                                   select _res).ToList<EliteCommissionDetail>();

                            bool targetCover = false;
                            foreach (EliteCommissionDetail _det in _target)
                            {

                                if ((_det.Saec_from) <= totalvalue)
                                {
                                    if ((_det.Saec_to) <= totalvalue)
                                    {
                                        if (_det.Saec_value > 0)
                                        {
                                            commission = (_det.Saec_value);
                                            targetCover = true;
                                            break;
                                        }
                                        else
                                        {
                                            commission = ((_det.Saec_to) * _det.Saec_rate) / 100;
                                            targetCover = true;
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        if (_det.Saec_value > 0)
                                        {
                                            commission = (_det.Saec_value);
                                            targetCover = true;
                                            break;
                                        }
                                        else
                                        {
                                            commission = (totalvalue * _det.Saec_rate) / 100;
                                            targetCover = true;
                                            break;
                                        }
                                    }
                                }




                            }


                            if (!targetCover)
                            {
                                //no slab
                                //check for below target definition
                                List<EliteCommissionDetail> _belowList = (from _res in _ExeComm
                                                                          where _res.Saec_type == "BE"
                                                                          orderby _res.Saec_line_no descending
                                                                          select _res).ToList<EliteCommissionDetail>();
                                if (_belowList != null && _belowList.Count > 0)
                                {

                                    foreach (EliteCommissionDetail _below in _belowList)
                                    {
                                        //check for from value
                                        if ((_below.Saec_from) <= totalvalue)
                                        {
                                            if ((_below.Saec_to) >= totalvalue)
                                            {
                                                if (_below.Saec_value > 0)
                                                {
                                                    commission = (_below.Saec_value);
                                                }
                                                else
                                                {
                                                    commission = (totalvalue * _below.Saec_rate) / 100;
                                                }
                                            }
                                        }

                                    }

                                }

                            }

                            else if (targetCover)
                            {

                                //go for slab
                                //order by descending to get maximum slab
                                List<EliteCommissionDetail> _slabList = (from _res in _ExeComm
                                                                         where _res.Saec_type == "AF"
                                                                         orderby _res.Saec_line_no
                                                                         select _res).ToList<EliteCommissionDetail>();

                                if (_slabList != null && _slabList.Count > 0)
                                {
                                    EliteCommissionSlab _tslab = new EliteCommissionSlab();
                                    _tslab.Saec_com = _com;
                                    _tslab.Saec_cre_by = creby;
                                    _tslab.Saec_cre_dt = credt;
                                    _tslab.Saec_emp_code = _exe.Emp_code;
                                    _tslab.Saec_emp_type = "SALEX";
                                    _tslab.Saec_pc = _pc;
                                    _tslab.Saec_comm = commission;
                                    _tslab.Saec_slab = 0;
                                    _tslab.Saec_from = _from;
                                    _tslab.Saec_to = _to;
                                    _commissionDetList.Add(_tslab);

                                    foreach (EliteCommissionDetail _slabDet in _slabList)
                                    {
                                        EliteCommissionSlab _slab = new EliteCommissionSlab();
                                        _slab.Saec_com = _com;
                                        _slab.Saec_cre_by = creby;
                                        _slab.Saec_cre_dt = credt;
                                        _slab.Saec_emp_code = _exe.Emp_code;
                                        _slab.Saec_emp_type = "SALEX";
                                        _slab.Saec_pc = _pc;
                                        _slab.Saec_from = _from;
                                        _slab.Saec_to = _to;

                                        //check for from value
                                        if (_slabDet.Saec_from <= totalvalue)
                                        {

                                            _slab.Saec_slab = _slabDet.Saec_line_no;
                                            if ((_slabDet.Saec_to) <= totalvalue)
                                            {
                                                if (_slabDet.Saec_value > 0)
                                                {
                                                    //totalvalue = totalvalue - (_slabDet.Saec_to - _slabDet.Saec_from);
                                                    _slab.Saec_comm = (_slabDet.Saec_value);
                                                    commission = commission + (_slabDet.Saec_value);
                                                    _commissionDetList.Add(_slab);
                                                }
                                                else
                                                {
                                                    // totalvalue = totalvalue - (_slabDet.Saec_to - _slabDet.Saec_from);
                                                    _slab.Saec_comm = (((_slabDet.Saec_to - _slabDet.Saec_from)) * _slabDet.Saec_rate) / 100;
                                                    commission = commission + (((_slabDet.Saec_to - _slabDet.Saec_from)) * _slabDet.Saec_rate) / 100;
                                                    _commissionDetList.Add(_slab);
                                                }

                                            }
                                        }
                                        //else
                                        //{
                                        //    if (_slabDet.Saec_value > 0)
                                        //    {
                                        //        //totalvalue = totalvalue - (_slabDet.Saec_to - _slabDet.Saec_from);
                                        //        _slab.Saec_comm = _slabDet.Saec_value;
                                        //        commission = commission + _slabDet.Saec_value;
                                        //        _commissionDetList.Add(_slab);
                                        //    }
                                        //    else
                                        //    {
                                        //        // totalvalue = totalvalue - (_slabDet.Saec_to - _slabDet.Saec_from);
                                        //        _slab.Saec_comm = ((_slabDet.Saec_to - _slabDet.Saec_from) * _slabDet.Saec_rate) / 100;
                                        //        commission = commission + ((_slabDet.Saec_to - _slabDet.Saec_from) * _slabDet.Saec_rate) / 100;
                                        //        _commissionDetList.Add(_slab);
                                        //    }
                                        //}

                                    }
                                    goto End;
                                }

                            End:
                                ;
                            }

                            //convert to rupee
                            commission = commission * __exgRate;

                            //check additional
                            if (_additional != null && _additional.Count > 0)
                            {
                                List<EliteCommissionAdditional> _exeAdd = (from _res in _additional
                                                                           where _res.Saec_emp_type == "Executive"
                                                                           select _res).ToList<EliteCommissionAdditional>();


                                if (_exeAdd != null && _exeAdd.Count > 0)
                                {
                                    foreach (EliteCommissionAdditional _add in _exeAdd)
                                    {
                                        if (_add.Saec_tp == "Aditional")
                                            commission = commission + (_exeAdd[0].Saec_val);
                                        else
                                            commission = commission - (_exeAdd[0].Saec_val);
                                    }
                                }

                            }
                            _commission.Saec_comm = commission;

                            _commissionList.Add(_commission);
                        }

                    }
                    #endregion

                    #region CH-HEAD
                    //calculate for cashier/helper/ch head
                    //CH_HEAD
                    List<EliteCommissionDetail> _coComm = (from _res in _tem
                                                           where _res.Saec_emp_type == "CH_HEAD" && _res.Saec_type != "OT"
                                                           select _res).ToList<EliteCommissionDetail>();


                    if (_coComm != null && _coComm.Count > 0)
                    {
                        foreach (PostCommissionEmployee _head in _chHeadList)
                        {
                            EliteCommission _commission = new EliteCommission();
                            EliteCommissionSlab _salb = new EliteCommissionSlab();
                            _commission.Saec_com = _com;
                            _commission.Saec_pc = _pc;
                            _commission.Saec_emp_code = _head.Emp_code;
                            _commission.Saec_emp_epf = _head.Emp_epf;
                            _commission.Saec_emp_type = "CH_HEAD";
                            _commission.Saec_cre_by = creby;
                            _commission.Saec_cre_dt = credt;
                            _commission.Saec_price = 0;
                            _commission.Saec_rtn = 0;
                            _commission.Saec_vat = 0;
                            _commission.Saec_dis = 0;
                            _commission.Saec_net = 0;
                            _commission.Saec_year = year;
                            _commission.Saec_month = month;
                            _commission.Saec_from = _from;
                            _commission.Saec_to = _to;
                            _commission.Saec_exg_rt = __exgRate;


                            //Net Sale Basis

                            decimal chheadComm = 0;
                            decimal totalPlus = _doList.Sum(x => x.Value);
                            decimal totalMinus = _srnList.Sum(x => x.Value);

                            foreach (EliteCommissionDetail _det in _coComm)
                            {
                                if (_det.Saec_extract_from == "Net Sale Basis")
                                {
                                    if (_det.Saec_rate > 0)
                                    {
                                        chheadComm = ((totalPlus - totalMinus) * _det.Saec_rate) / 100;
                                    }
                                    else
                                    {
                                        chheadComm = (_det.Saec_value);
                                    }
                                }

                            }
                            //convert to rupee
                            chheadComm = chheadComm * __exgRate;

                            //check additional
                            if (_additional != null && _additional.Count > 0)
                            {
                                List<EliteCommissionAdditional> _exeAdd = (from _res in _additional
                                                                           where _res.Saec_emp_type == "Co-Head"
                                                                           select _res).ToList<EliteCommissionAdditional>();


                                if (_exeAdd != null && _exeAdd.Count > 0)
                                {
                                    foreach (EliteCommissionAdditional _add in _exeAdd)
                                    {
                                        if (_add.Saec_tp == "Aditional")
                                            chheadComm = chheadComm + (_exeAdd[0].Saec_val);
                                        else
                                            chheadComm = chheadComm - (_exeAdd[0].Saec_val);
                                    }
                                }

                            }

                            _commission.Saec_comm = chheadComm;
                            _commissionList.Add(_commission);
                        }
                    }
                    #endregion

                    #region CASHIER

                    //CASHIER
                    List<EliteCommissionDetail> _cashierComm = (from _res in _tem
                                                                where _res.Saec_emp_type == "CASHIER" && _res.Saec_type != "OT"
                                                                select _res).ToList<EliteCommissionDetail>();



                    if (_cashierComm != null && _cashierComm.Count > 0)
                    {

                        List<Tuple<string, decimal>> _mgrRed = new List<Tuple<string, decimal>>();
                        List<Tuple<string, decimal>> _exeRed = new List<Tuple<string, decimal>>();
                        List<Tuple<string, decimal>> _chRed = new List<Tuple<string, decimal>>();
                        foreach (PostCommissionEmployee _cashire in _casList)
                        {
                            EliteCommission _commission = new EliteCommission();
                            EliteCommissionSlab _salb = new EliteCommissionSlab();
                            _commission.Saec_com = _com;
                            _commission.Saec_pc = _pc;
                            _commission.Saec_emp_code = _cashire.Emp_code;
                            _commission.Saec_emp_epf = _cashire.Emp_epf;
                            _commission.Saec_emp_type = "CASHIER";
                            _commission.Saec_cre_by = creby;
                            _commission.Saec_cre_dt = credt;
                            _commission.Saec_price = 0;
                            _commission.Saec_rtn = 0;
                            _commission.Saec_vat = 0;
                            _commission.Saec_dis = 0;
                            _commission.Saec_net = 0;
                            _commission.Saec_year = year;
                            _commission.Saec_month = month;

                            _commission.Saec_from = _from;
                            _commission.Saec_to = _to;
                            _commission.Saec_exg_rt = __exgRate;

                            //Manager Basis
                            //Executive Basis
                            //Ch-Head Basis 

                            decimal cashireComm = 0;

                            foreach (EliteCommissionDetail _det in _cashierComm)
                            {
                                if (_det.Saec_extract_from == "Manager Basis")
                                {
                                    foreach (PostCommissionEmployee _emp in _mgrList)
                                    {
                                        List<EliteCommission> comm = (from _res in _commissionList
                                                                      where _res.Saec_emp_code == _emp.Emp_code
                                                                      select _res).ToList<EliteCommission>();
                                        decimal _comm = 0;
                                        decimal temcomm = 0;
                                        try
                                        {
                                            _comm = comm[0].Saec_comm;
                                        }
                                        catch { _comm = 0; }

                                        if (_det.Saec_rate > 0)
                                        {
                                            temcomm = (_det.Saec_rate * _comm) / 100;
                                            cashireComm = cashireComm + (_det.Saec_rate * _comm) / 100;
                                        }
                                        else
                                        {
                                            temcomm = (_det.Saec_value);
                                            cashireComm = cashireComm + _det.Saec_value;
                                        }
                                        //add cashier comm
                                        (from _res in _commissionList
                                         where _res.Saec_emp_code == _emp.Emp_code
                                         select _res).ToList().ForEach(x => x.Saec_cashier = (temcomm));

                                        _mgrRed.Add(new Tuple<string, decimal>(_emp.Emp_code, temcomm));

                                    }
                                }
                                if (_det.Saec_extract_from == "Executive Basis")
                                {
                                    foreach (PostCommissionEmployee _emp in _exeList)
                                    {
                                        List<EliteCommission> comm = (from _res in _commissionList
                                                                      where _res.Saec_emp_code == _emp.Emp_code
                                                                      select _res).ToList<EliteCommission>();
                                        decimal _comm = 0;
                                        decimal temcomm = 0;
                                        try
                                        {
                                            _comm = comm[0].Saec_comm;
                                        }
                                        catch { _comm = 0; }
                                        if (_det.Saec_rate > 0)
                                        {
                                            temcomm = (_det.Saec_rate * _comm) / 100;
                                            cashireComm = cashireComm + (_det.Saec_rate * _comm) / 100;
                                        }
                                        else
                                        {
                                            temcomm = (_det.Saec_value);
                                            cashireComm = cashireComm + _det.Saec_value;
                                        }
                                        //add cashier comm
                                        (from _res in _commissionList
                                         where _res.Saec_emp_code == _emp.Emp_code
                                         select _res).ToList().ForEach(x => x.Saec_cashier = (temcomm));
                                        //reduce from exe
                                        _exeRed.Add(new Tuple<string, decimal>(_emp.Emp_code, temcomm));
                                    }
                                }
                                if (_det.Saec_extract_from == "Ch-Head Basis")
                                {
                                    foreach (PostCommissionEmployee _emp in _chHeadList)
                                    {
                                        List<EliteCommission> comm = (from _res in _commissionList
                                                                      where _res.Saec_emp_code == _emp.Emp_code
                                                                      select _res).ToList<EliteCommission>();
                                        decimal _comm = 0;
                                        decimal temcomm = 0;
                                        try
                                        {
                                            _comm = comm[0].Saec_comm;
                                        }
                                        catch { _comm = 0; }
                                        if (_det.Saec_rate > 0)
                                        {
                                            temcomm = (_det.Saec_rate * _comm) / 100;
                                            cashireComm = cashireComm + (_det.Saec_rate * _comm) / 100;
                                        }
                                        else
                                        {
                                            temcomm = (_det.Saec_value);
                                            cashireComm = cashireComm + _det.Saec_value;
                                        }
                                        //add cashier comm
                                        (from _res in _commissionList
                                         where _res.Saec_emp_code == _emp.Emp_code
                                         select _res).ToList().ForEach(x => x.Saec_cashier = (temcomm));
                                        //reduce from chhead
                                        _chRed.Add(new Tuple<string, decimal>(_emp.Emp_code, temcomm));
                                    }
                                }
                            }
                            //convert to rupee
                            cashireComm = cashireComm * __exgRate;

                            //check additional
                            if (_additional != null && _additional.Count > 0)
                            {
                                List<EliteCommissionAdditional> _exeAdd = (from _res in _additional
                                                                           where _res.Saec_emp_type == "Cashire"
                                                                           select _res).ToList<EliteCommissionAdditional>();


                                if (_exeAdd != null && _exeAdd.Count > 0)
                                {
                                    foreach (EliteCommissionAdditional _add in _exeAdd)
                                    {
                                        if (_add.Saec_tp == "Aditional")
                                            cashireComm = cashireComm + (_exeAdd[0].Saec_val);
                                        else
                                            cashireComm = cashireComm - (_exeAdd[0].Saec_val);
                                    }
                                }

                            }
                            _commission.Saec_comm = cashireComm / _casList.Count;
                            _commission.Saec_exg_rt = __exgRate;
                            _commissionList.Add(_commission);
                        }

                    }
                    #endregion

                    #region HELPER
                    //HELPER
                    List<EliteCommissionDetail> _helperComm = (from _res in _tem
                                                               where _res.Saec_emp_type == "HELPER" && _res.Saec_type != "OT"
                                                               select _res).ToList<EliteCommissionDetail>();
                    decimal totalHelper = 0;
                    if (_helperComm != null && _helperComm.Count > 0)
                    {
                        List<Tuple<string, decimal>> _mgrRed = new List<Tuple<string, decimal>>();
                        List<Tuple<string, decimal>> _exeRed = new List<Tuple<string, decimal>>();
                        List<Tuple<string, decimal>> _chRed = new List<Tuple<string, decimal>>();
                        foreach (PostCommissionEmployee _helper in _helList)
                        {
                            EliteCommission _commission = new EliteCommission();
                            EliteCommissionSlab _salb = new EliteCommissionSlab();
                            _commission.Saec_com = _com;
                            _commission.Saec_pc = _pc;
                            _commission.Saec_emp_code = _helper.Emp_code;
                            _commission.Saec_emp_epf = _helper.Emp_epf;
                            _commission.Saec_emp_type = "HELPER";
                            _commission.Saec_cre_by = creby;
                            _commission.Saec_cre_dt = credt;
                            _commission.Saec_price = 0;
                            _commission.Saec_rtn = 0;
                            _commission.Saec_vat = 0;
                            _commission.Saec_dis = 0;
                            _commission.Saec_net = 0;
                            _commission.Saec_year = year;
                            _commission.Saec_month = month;

                            _commission.Saec_from = _from;
                            _commission.Saec_to = _to;
                            _commission.Saec_exg_rt = __exgRate;
                            //Manager Basis
                            //Executive Basis
                            //Ch-Head Basis 


                            decimal helperComm = 0;
                            foreach (EliteCommissionDetail _det in _helperComm)
                            {
                                if (_det.Saec_extract_from == "Manager Basis")
                                {
                                    foreach (PostCommissionEmployee _emp in _mgrList)
                                    {
                                        List<EliteCommission> comm = (from _res in _commissionList
                                                                      where _res.Saec_emp_code == _emp.Emp_code
                                                                      select _res).ToList<EliteCommission>();
                                        decimal _comm = 0;
                                        decimal temcomm = 0;
                                        try
                                        {
                                            _comm = comm[0].Saec_comm;
                                        }
                                        catch { _comm = 0; }
                                        if (_det.Saec_rate > 0)
                                        {
                                            temcomm = (_det.Saec_rate * _comm) / 100;
                                            helperComm = helperComm + (_det.Saec_rate * _comm) / 100;
                                        }
                                        else
                                        {
                                            temcomm = (_det.Saec_value);
                                            helperComm = helperComm + _det.Saec_value;
                                        }
                                        //add cashier comm
                                        (from _res in _commissionList
                                         where _res.Saec_emp_code == _emp.Emp_code
                                         select _res).ToList().ForEach(x => x.Saec_helper = (temcomm));
                                        _mgrRed.Add(new Tuple<string, decimal>(_emp.Emp_code, temcomm));
                                    }
                                }
                                if (_det.Saec_extract_from == "Executive Basis")
                                {
                                    foreach (PostCommissionEmployee _emp in _exeList)
                                    {
                                        List<EliteCommission> comm = (from _res in _commissionList
                                                                      where _res.Saec_emp_code == _emp.Emp_code
                                                                      select _res).ToList<EliteCommission>();
                                        decimal _comm = 0;
                                        decimal temcomm = 0;
                                        try
                                        {
                                            _comm = comm[0].Saec_comm;
                                        }
                                        catch { _comm = 0; }
                                        if (_det.Saec_rate > 0)
                                        {
                                            temcomm = (_det.Saec_rate * _comm) / 100;
                                            helperComm = helperComm + (_det.Saec_rate * _comm) / 100;
                                        }
                                        else
                                        {
                                            temcomm = (_det.Saec_value);
                                            helperComm = helperComm + _det.Saec_value;
                                        }
                                        //add cashier comm
                                        (from _res in _commissionList
                                         where _res.Saec_emp_code == _emp.Emp_code
                                         select _res).ToList().ForEach(x => x.Saec_helper = (temcomm));
                                        //reduce from exe
                                        _exeRed.Add(new Tuple<string, decimal>(_emp.Emp_code, temcomm));
                                    }
                                }
                                if (_det.Saec_extract_from == "Ch-Head Basis")
                                {
                                    foreach (PostCommissionEmployee _emp in _chHeadList)
                                    {
                                        List<EliteCommission> comm = (from _res in _commissionList
                                                                      where _res.Saec_emp_code == _emp.Emp_code
                                                                      select _res).ToList<EliteCommission>();
                                        decimal _comm = 0;
                                        decimal temcomm = 0;
                                        try
                                        {
                                            _comm = comm[0].Saec_comm;
                                        }
                                        catch { _comm = 0; }
                                        if (_det.Saec_rate > 0)
                                        {
                                            temcomm = (_det.Saec_rate * _comm) / 100;
                                            helperComm = helperComm + (_det.Saec_rate * _comm) / 100;
                                        }
                                        else
                                        {
                                            temcomm = (_det.Saec_value);
                                            helperComm = helperComm + _det.Saec_value;
                                        }
                                        //add cashier comm
                                        (from _res in _commissionList
                                         where _res.Saec_emp_code == _emp.Emp_code
                                         select _res).ToList().ForEach(x => x.Saec_helper = (temcomm));
                                        //reduce from chhead
                                        _chRed.Add(new Tuple<string, decimal>(_emp.Emp_code, temcomm));
                                    }
                                }
                            }
                            //convert to rupee
                            helperComm = helperComm * __exgRate;

                            //check additional
                            if (_additional != null && _additional.Count > 0)
                            {
                                List<EliteCommissionAdditional> _exeAdd = (from _res in _additional
                                                                           where _res.Saec_emp_type == "Cashire"
                                                                           select _res).ToList<EliteCommissionAdditional>();


                                if (_exeAdd != null && _exeAdd.Count > 0)
                                {
                                    foreach (EliteCommissionAdditional _add in _exeAdd)
                                    {
                                        if (_add.Saec_tp == "Aditional")
                                            helperComm = helperComm + (_exeAdd[0].Saec_val);
                                        else
                                            helperComm = helperComm - (_exeAdd[0].Saec_val);
                                    }
                                }

                            }
                            //add helper record
                            _commission.Saec_comm = helperComm / _helList.Count;
                            _commission.Saec_exg_rt = __exgRate;
                            _commissionList.Add(_commission);
                        }


                    }
                    #endregion

                    #region OTHER
                    //other Employee categories
                    List<EliteCommissionDetail> _otherComm = (from _res in _tem
                                                              where _res.Saec_type == "OT"
                                                              select _res).ToList<EliteCommissionDetail>();
                    if (_otherComm != null && _otherComm.Count > 0)
                    {
                        //get distinct emp types
                        List<EliteCommissionDetail> _distinctEmpTypes = _otherComm.GroupBy(x => x.Saec_emp_type).Select(x => x.First()).ToList<EliteCommissionDetail>();
                        foreach (EliteCommissionDetail _emp in _distinctEmpTypes)
                        {

                            List<EliteCommissionDetail> _empComList = (from _res in _tem
                                                                       where _res.Saec_type == "OT" && _res.Saec_emp_type == _emp.Saec_emp_type
                                                                       select _res).ToList<EliteCommissionDetail>();

                            //value based
                            if (_empComList.Count > 1)
                            {
                                _empComList = (from _res in _empComList
                                               orderby _res.Saec_line_no descending
                                               select _res).ToList<EliteCommissionDetail>();
                                //get total amount
                                List<EliteCommissionInvoice> _DO = new List<EliteCommissionInvoice>();
                                List<EliteCommissionInvoice> _SRN = new List<EliteCommissionInvoice>();
                                if (_emp.Saec_emp_type == "SRMGR")
                                {
                                    #region MGR
                                    foreach (PostCommissionEmployee _mgr in _mgrList)
                                    {
                                        decimal commission = 0;
                                        _DO = (from _res in _doList
                                               //where _res.Mge_code == _mgr.Emp_epf
                                               orderby _res.Invoice_no
                                               select _res).ToList<EliteCommissionInvoice>();
                                        _SRN = (from _res in _srnList
                                                //where _res.Mge_code == _mgr.Emp_epf
                                                select _res).ToList<EliteCommissionInvoice>();


                                        foreach (EliteCommissionInvoice inv in _DO)
                                        {
                                            FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                            _inv.Saec_pc = _pc;
                                            _inv.Saec_discount = inv.Discount;
                                            _inv.Saec_vat = inv.Vat;
                                            _inv.Saec_price = inv.Value;
                                            _inv.Saec_is_rev = false;
                                            _inv.Saec_inv_no = inv.Invoice_no;
                                            _inv.Saec_emp_type = "SRMGR";
                                            _inv.Saec_emp_epf = _mgr.Emp_epf;
                                            _inv.Saec_emp_code = _mgr.Emp_code;
                                            _invoiceList.Add(_inv);
                                        }

                                        foreach (EliteCommissionInvoice inv in _SRN)
                                        {
                                            FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                            _inv.Saec_pc = _pc;
                                            _inv.Saec_discount = inv.Discount;
                                            _inv.Saec_vat = inv.Vat;
                                            _inv.Saec_price = inv.Value;
                                            _inv.Saec_is_rev = true;
                                            _inv.Saec_emp_type = _empComList[0].Saec_emp_type;
                                            _inv.Saec_inv_no = inv.Invoice_no;
                                            _inv.Saec_emp_epf = _mgr.Emp_epf;
                                            _inv.Saec_emp_code = _mgr.Emp_code;
                                            _invoiceList.Add(_inv);
                                        }
                                        decimal totalPrice = _DO.Sum(x => x.Value);
                                        decimal totalVat = _DO.Sum(x => x.Vat);
                                        decimal totalDisc = _DO.Sum(x => x.Discount);
                                        decimal totalPlus = totalPrice - totalDisc;


                                        decimal totalMPrice = _SRN.Sum(x => x.Value);
                                        decimal totalMVat = _SRN.Sum(x => x.Vat);
                                        decimal totalMDisc = _SRN.Sum(x => x.Discount);
                                        decimal totalMinus = totalMPrice - totalMDisc;

                                        decimal total = totalPlus - totalMinus;

                                        foreach (EliteCommissionDetail _det in _empComList)
                                        {
                                            if (_det.Saec_value == 0)
                                            {
                                                if (_det.Saec_from <= total)
                                                {
                                                    commission = total * _det.Saec_rate / 100;
                                                    goto END;
                                                }
                                            }
                                            else
                                            {
                                                if (_det.Saec_from <= total)
                                                {
                                                    commission = _det.Saec_value;
                                                    goto END;
                                                }
                                            }
                                        }

                                    END:
                                        EliteCommission _commission = new EliteCommission();
                                        _commission.Saec_com = _com;
                                        _commission.Saec_pc = _pc;
                                        _commission.Saec_emp_code = _mgr.Emp_code;
                                        _commission.Saec_emp_type = "SRMGR";
                                        _commission.Saec_cre_by = creby;
                                        _commission.Saec_cre_dt = credt;
                                        _commission.Saec_price = totalPrice;
                                        _commission.Saec_rtn = totalMinus;
                                        _commission.Saec_vat = totalVat;
                                        _commission.Saec_dis = totalDisc;
                                        _commission.Saec_net = totalPlus - totalMinus;
                                        _commission.Saec_gross = totalPlus;
                                        _commission.Saec_year = year;
                                        _commission.Saec_month = month;
                                        _commission.Saec_comm = commission;
                                        _commissionList.Add(_commission);

                                    }
                                    #endregion
                                }
                                else
                                {
                                    #region OTHER
                                    DataTable _empTbl = _salesDAL.GetPcEmployee(_com, _pc, _empComList[0].Saec_emp_type);
                                    //insert into list
                                    List<PostCommissionEmployee> _othEmpList = new List<PostCommissionEmployee>();

                                    foreach (DataRow dr in _mgrTbl.Rows)
                                    {
                                        if (Convert.ToInt32(dr["mpce_act"].ToString()) == 1)
                                        {
                                            PostCommissionEmployee _othEmp = new PostCommissionEmployee();
                                            _othEmp.Emp_code = dr["esep_cd"].ToString();
                                            _othEmp.Emp_epf = dr["esep_epf"].ToString();
                                            _othEmpList.Add(_othEmp);
                                        }
                                    }

                                    foreach (PostCommissionEmployee _othEmp in _othEmpList)
                                    {
                                        decimal commission = 0;
                                        _DO = (from _res in _doList
                                               where _res.Exe_code == _othEmp.Emp_epf
                                               orderby _res.Invoice_no
                                               select _res).ToList<EliteCommissionInvoice>();
                                        _SRN = (from _res in _srnList
                                                where _res.Exe_code == _othEmp.Emp_epf
                                                select _res).ToList<EliteCommissionInvoice>();


                                        decimal totalPrice = _DO.Sum(x => x.Value);
                                        decimal totalVat = _DO.Sum(x => x.Vat);
                                        decimal totalDisc = _DO.Sum(x => x.Discount);
                                        decimal totalPlus = totalPrice - totalDisc;


                                        decimal totalMPrice = _SRN.Sum(x => x.Value);
                                        decimal totalMVat = _SRN.Sum(x => x.Vat);
                                        decimal totalMDisc = _SRN.Sum(x => x.Discount);
                                        decimal totalMinus = totalMPrice - totalMDisc;

                                        decimal total = totalPlus - totalMinus;

                                        foreach (EliteCommissionDetail _det in _empComList)
                                        {
                                            if (_det.Saec_value == 0)
                                            {
                                                if (_det.Saec_from <= total)
                                                {
                                                    commission = total * _det.Saec_rate / 100;
                                                    goto END;
                                                }
                                            }
                                            else
                                            {
                                                if (_det.Saec_from <= total)
                                                {
                                                    commission = _det.Saec_value;
                                                    goto END;
                                                }
                                            }
                                        }

                                    END:
                                        EliteCommission _commission = new EliteCommission();
                                        _commission.Saec_com = _com;
                                        _commission.Saec_pc = _pc;
                                        _commission.Saec_emp_code = _othEmp.Emp_epf;
                                        _commission.Saec_emp_type = _empComList[0].Saec_emp_type;
                                        _commission.Saec_cre_by = creby;
                                        _commission.Saec_cre_dt = credt;
                                        _commission.Saec_price = totalPrice;
                                        _commission.Saec_rtn = totalMinus;
                                        _commission.Saec_vat = totalVat;
                                        _commission.Saec_dis = totalDisc;
                                        _commission.Saec_net = totalPlus - totalMinus;
                                        _commission.Saec_gross = totalPlus;
                                        _commission.Saec_year = year;
                                        _commission.Saec_month = month;
                                        _commission.Saec_comm = commission;
                                        _commissionList.Add(_commission);
                                    }
                                    #endregion
                                }
                            }
                            //invoice based
                            else
                            {
                                if (_empComList[0].Saec_rate != 0)
                                {
                                    #region RATE
                                    //add commission value for each invoice based on invoice amount
                                    if (_emp.Saec_emp_type == "SRMGR")
                                    {
                                        decimal commission = 0;
                                        foreach (PostCommissionEmployee _mgr in _mgrList)
                                        {

                                            List<EliteCommissionInvoice> _mgrDO = (from _res in _doList
                                                                                   //where _res.Mge_code == _mgr.Emp_epf
                                                                                   orderby _res.Invoice_no
                                                                                   select _res
                                                                                   ).ToList<EliteCommissionInvoice>();
                                            //save do list
                                            foreach (EliteCommissionInvoice inv in _mgrDO)
                                            {
                                                FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                                _inv.Saec_pc = _pc;
                                                _inv.Saec_discount = inv.Discount;
                                                _inv.Saec_vat = inv.Vat;
                                                _inv.Saec_price = inv.Value;
                                                _inv.Saec_is_rev = false;
                                                _inv.Saec_inv_no = inv.Invoice_no;
                                                _inv.Saec_emp_type = "SRMGR";
                                                _inv.Saec_emp_epf = _mgr.Emp_epf;
                                                _inv.Saec_emp_code = _mgr.Emp_code;
                                                _invoiceList.Add(_inv);
                                            }

                                            List<EliteCommissionInvoice> _mgrSRN = (from _res in _srnList
                                                                                    //where _res.Mge_code == _mgr.Emp_epf
                                                                                    select _res).ToList<EliteCommissionInvoice>();
                                            foreach (EliteCommissionInvoice inv in _mgrSRN)
                                            {
                                                FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                                _inv.Saec_pc = _pc;
                                                _inv.Saec_discount = inv.Discount;
                                                _inv.Saec_vat = inv.Vat;
                                                _inv.Saec_price = inv.Value;
                                                _inv.Saec_is_rev = true;
                                                _inv.Saec_emp_type = "SRMGR";
                                                _inv.Saec_inv_no = inv.Invoice_no;
                                                _inv.Saec_emp_epf = _mgr.Emp_epf;
                                                _inv.Saec_emp_code = _mgr.Emp_code;
                                                _invoiceList.Add(_inv);
                                            }
                                            decimal totalPrice = _mgrDO.Sum(x => x.Value);
                                            decimal totalVat = _mgrDO.Sum(x => x.Vat);
                                            decimal totalDisc = _mgrDO.Sum(x => x.Discount);
                                            decimal totalPlus = totalPrice - totalDisc;


                                            decimal totalMPrice = _mgrSRN.Sum(x => x.Value);
                                            decimal totalMVat = _mgrSRN.Sum(x => x.Vat);
                                            decimal totalMDisc = _mgrSRN.Sum(x => x.Discount);
                                            decimal totalMinus = totalMPrice - totalMDisc;
                                            commission = (totalPlus - totalMinus) * _empComList[0].Saec_rate;
                                            EliteCommission _commission = new EliteCommission();
                                            _commission.Saec_com = _com;
                                            _commission.Saec_pc = _pc;
                                            _commission.Saec_emp_code = _mgr.Emp_code;
                                            _commission.Saec_emp_type = "SRMGR";
                                            _commission.Saec_cre_by = creby;
                                            _commission.Saec_cre_dt = credt;
                                            _commission.Saec_price = totalPrice;
                                            _commission.Saec_rtn = totalMinus;
                                            _commission.Saec_vat = totalVat;
                                            _commission.Saec_dis = totalDisc;
                                            _commission.Saec_net = totalPlus - totalMinus;
                                            _commission.Saec_gross = totalPlus;
                                            _commission.Saec_year = year;
                                            _commission.Saec_month = month;
                                            _commission.Saec_comm = commission;
                                            _commissionList.Add(_commission);
                                        }

                                    }
                                    //other type 
                                    else
                                    {
                                        //get employees
                                        //get employees
                                        DataTable _empTbl = _salesDAL.GetPcEmployee(_com, _pc, _empComList[0].Saec_emp_type);
                                        //insert into list
                                        List<PostCommissionEmployee> _othEmpList = new List<PostCommissionEmployee>();

                                        foreach (DataRow dr in _mgrTbl.Rows)
                                        {
                                            if (Convert.ToInt32(dr["mpce_act"].ToString()) == 1)
                                            {
                                                PostCommissionEmployee _othEmp = new PostCommissionEmployee();
                                                _othEmp.Emp_code = dr["esep_cd"].ToString();
                                                _othEmp.Emp_epf = dr["esep_epf"].ToString();
                                                _othEmpList.Add(_othEmp);
                                            }
                                        }

                                        foreach (PostCommissionEmployee _othEmp in _othEmpList)
                                        {
                                            decimal commission;
                                            List<EliteCommissionInvoice> _DO = (from _res in _doList
                                                                                where _res.Exe_code == _othEmp.Emp_epf
                                                                                orderby _res.Invoice_no
                                                                                select _res
                                                                                       ).ToList<EliteCommissionInvoice>();
                                            //save do list
                                            foreach (EliteCommissionInvoice inv in _DO)
                                            {
                                                FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                                _inv.Saec_pc = _pc;
                                                _inv.Saec_discount = inv.Discount;
                                                _inv.Saec_vat = inv.Vat;
                                                _inv.Saec_price = inv.Value;
                                                _inv.Saec_is_rev = false;
                                                _inv.Saec_inv_no = inv.Invoice_no;
                                                _inv.Saec_emp_type = _empComList[0].Saec_emp_type;
                                                _inv.Saec_emp_epf = _othEmp.Emp_epf;
                                                _inv.Saec_emp_code = _othEmp.Emp_code;
                                                _invoiceList.Add(_inv);
                                            }

                                            List<EliteCommissionInvoice> _SRN = (from _res in _srnList
                                                                                 where _res.Exe_code == _othEmp.Emp_epf
                                                                                 select _res).ToList<EliteCommissionInvoice>();
                                            foreach (EliteCommissionInvoice inv in _SRN)
                                            {
                                                FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                                _inv.Saec_pc = _pc;
                                                _inv.Saec_discount = inv.Discount;
                                                _inv.Saec_vat = inv.Vat;
                                                _inv.Saec_price = inv.Value;
                                                _inv.Saec_is_rev = true;
                                                _inv.Saec_emp_type = _empComList[0].Saec_emp_type;
                                                _inv.Saec_inv_no = inv.Invoice_no;
                                                _inv.Saec_emp_epf = _othEmp.Emp_epf;
                                                _inv.Saec_emp_code = _othEmp.Emp_code;
                                                _invoiceList.Add(_inv);
                                            }
                                            decimal totalPrice = _DO.Sum(x => x.Value);
                                            decimal totalVat = _DO.Sum(x => x.Vat);
                                            decimal totalDisc = _DO.Sum(x => x.Discount);
                                            decimal totalPlus = totalPrice - totalDisc;


                                            decimal totalMPrice = _SRN.Sum(x => x.Value);
                                            decimal totalMVat = _SRN.Sum(x => x.Vat);
                                            decimal totalMDisc = _SRN.Sum(x => x.Discount);
                                            decimal totalMinus = totalMPrice - totalMDisc;
                                            commission = (totalPlus - totalMinus) * _empComList[0].Saec_value;
                                            EliteCommission _commission = new EliteCommission();
                                            _commission.Saec_com = _com;
                                            _commission.Saec_pc = _pc;
                                            _commission.Saec_emp_code = _othEmp.Emp_code;
                                            _commission.Saec_emp_type = _empComList[0].Saec_emp_type;
                                            _commission.Saec_cre_by = creby;
                                            _commission.Saec_cre_dt = credt;
                                            _commission.Saec_price = totalPrice;
                                            _commission.Saec_rtn = totalMinus;
                                            _commission.Saec_vat = totalVat;
                                            _commission.Saec_dis = totalDisc;
                                            _commission.Saec_net = totalPlus - totalMinus;
                                            _commission.Saec_gross = totalPlus;
                                            _commission.Saec_year = year;
                                            _commission.Saec_month = month;
                                            _commission.Saec_comm = commission;
                                            _commissionList.Add(_commission);

                                        }

                                    }
                                    #endregion
                                }
                                else
                                {
                                    #region VALUE
                                    //add commission amount for each invoice
                                    //if mgr
                                    if (_emp.Saec_emp_type == "SRMGR")
                                    {
                                        decimal commission = 0;
                                        foreach (PostCommissionEmployee _mgr in _mgrList)
                                        {

                                            List<EliteCommissionInvoice> _mgrDO = (from _res in _doList
                                                                                   //where _res.Mge_code == _mgr.Emp_epf
                                                                                   orderby _res.Invoice_no
                                                                                   select _res
                                                                                   ).ToList<EliteCommissionInvoice>();
                                            //save do list
                                            foreach (EliteCommissionInvoice inv in _mgrDO)
                                            {
                                                FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                                _inv.Saec_pc = _pc;
                                                _inv.Saec_discount = inv.Discount;
                                                _inv.Saec_vat = inv.Vat;
                                                _inv.Saec_price = inv.Value;
                                                _inv.Saec_is_rev = false;
                                                _inv.Saec_inv_no = inv.Invoice_no;
                                                _inv.Saec_emp_type = "SRMGR";
                                                _inv.Saec_emp_epf = _mgr.Emp_epf;
                                                _inv.Saec_emp_code = _mgr.Emp_code;
                                                _invoiceList.Add(_inv);
                                            }

                                            List<EliteCommissionInvoice> _mgrSRN = (from _res in _srnList
                                                                                    //where _res.Mge_code == _mgr.Emp_epf
                                                                                    select _res).ToList<EliteCommissionInvoice>();
                                            foreach (EliteCommissionInvoice inv in _mgrSRN)
                                            {
                                                FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                                _inv.Saec_pc = _pc;
                                                _inv.Saec_discount = inv.Discount;
                                                _inv.Saec_vat = inv.Vat;
                                                _inv.Saec_price = inv.Value;
                                                _inv.Saec_is_rev = true;
                                                _inv.Saec_emp_type = "SRMGR";
                                                _inv.Saec_inv_no = inv.Invoice_no;
                                                _inv.Saec_emp_epf = _mgr.Emp_epf;
                                                _inv.Saec_emp_code = _mgr.Emp_code;
                                                _invoiceList.Add(_inv);
                                            }
                                            commission = (_doList.Count - _srnList.Count) * _empComList[0].Saec_value;
                                            EliteCommission _commission = new EliteCommission();
                                            _commission.Saec_com = _com;
                                            _commission.Saec_pc = _pc;
                                            _commission.Saec_emp_code = _mgr.Emp_code;
                                            _commission.Saec_emp_type = "SRMGR";
                                            _commission.Saec_cre_by = creby;
                                            _commission.Saec_cre_dt = credt;
                                            _commission.Saec_price = 0;
                                            _commission.Saec_rtn = 0;
                                            _commission.Saec_vat = 0;
                                            _commission.Saec_dis = 0;
                                            _commission.Saec_net = 0;
                                            _commission.Saec_gross = 0;
                                            _commission.Saec_year = year;
                                            _commission.Saec_month = month;
                                            _commission.Saec_comm = commission;
                                            _commissionList.Add(_commission);
                                        }

                                    }
                                    //other type 
                                    else
                                    {
                                        //get employees
                                        DataTable _empTbl = _salesDAL.GetPcEmployee(_com, _pc, _empComList[0].Saec_emp_type);
                                        //insert into list
                                        List<PostCommissionEmployee> _othEmpList = new List<PostCommissionEmployee>();

                                        foreach (DataRow dr in _mgrTbl.Rows)
                                        {
                                            if (Convert.ToInt32(dr["mpce_act"].ToString()) == 1)
                                            {
                                                PostCommissionEmployee _othEmp = new PostCommissionEmployee();
                                                _othEmp.Emp_code = dr["esep_cd"].ToString();
                                                _othEmp.Emp_epf = dr["esep_epf"].ToString();
                                                _othEmpList.Add(_othEmp);
                                            }
                                        }

                                        foreach (PostCommissionEmployee _othEmp in _othEmpList)
                                        {
                                            decimal commission;
                                            List<EliteCommissionInvoice> _DO = (from _res in _doList
                                                                                where _res.Exe_code == _othEmp.Emp_epf
                                                                                orderby _res.Invoice_no
                                                                                select _res
                                                                                       ).ToList<EliteCommissionInvoice>();
                                            //save do list
                                            foreach (EliteCommissionInvoice inv in _DO)
                                            {
                                                FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                                _inv.Saec_pc = _pc;
                                                _inv.Saec_discount = inv.Discount;
                                                _inv.Saec_vat = inv.Vat;
                                                _inv.Saec_price = inv.Value;
                                                _inv.Saec_is_rev = false;
                                                _inv.Saec_inv_no = inv.Invoice_no;
                                                _inv.Saec_emp_type = _empComList[0].Saec_emp_type;
                                                _inv.Saec_emp_epf = _othEmp.Emp_epf;
                                                _inv.Saec_emp_code = _othEmp.Emp_code;
                                                _invoiceList.Add(_inv);
                                            }

                                            List<EliteCommissionInvoice> _SRN = (from _res in _srnList
                                                                                 where _res.Exe_code == _othEmp.Emp_epf
                                                                                 select _res).ToList<EliteCommissionInvoice>();
                                            foreach (EliteCommissionInvoice inv in _SRN)
                                            {
                                                FF.BusinessObjects.EliteCommissionInvoice _inv = new FF.BusinessObjects.EliteCommissionInvoice();
                                                _inv.Saec_pc = _pc;
                                                _inv.Saec_discount = inv.Discount;
                                                _inv.Saec_vat = inv.Vat;
                                                _inv.Saec_price = inv.Value;
                                                _inv.Saec_is_rev = true;
                                                _inv.Saec_emp_type = _empComList[0].Saec_emp_type;
                                                _inv.Saec_inv_no = inv.Invoice_no;
                                                _inv.Saec_emp_epf = _othEmp.Emp_epf;
                                                _inv.Saec_emp_code = _othEmp.Emp_code;
                                                _invoiceList.Add(_inv);
                                            }
                                            commission = (_DO.Count - _SRN.Count) * _empComList[0].Saec_value;
                                            EliteCommission _commission = new EliteCommission();
                                            _commission.Saec_com = _com;
                                            _commission.Saec_pc = _pc;
                                            _commission.Saec_emp_code = _othEmp.Emp_code;
                                            _commission.Saec_emp_type = _empComList[0].Saec_emp_type;
                                            _commission.Saec_cre_by = creby;
                                            _commission.Saec_cre_dt = credt;
                                            _commission.Saec_price = 0;
                                            _commission.Saec_rtn = 0;
                                            _commission.Saec_vat = 0;
                                            _commission.Saec_dis = 0;
                                            _commission.Saec_net = 0;
                                            _commission.Saec_gross = 0;
                                            _commission.Saec_year = year;
                                            _commission.Saec_month = month;
                                            _commission.Saec_comm = commission;
                                            _commissionList.Add(_commission);

                                        }

                                    }
                                    #endregion
                                }
                            }

                        }

                    }
                    #endregion

                    if (!isErrorProcess)
                    {
                        List<EliteCommission> _err = new List<EliteCommission>();

                        //check for error
                        foreach (EliteCommission _comm in _commissionList)
                        {
                            if (_comm.Saec_comm < 0)
                            {
                                _err.Add(_comm);
                            }
                        }
                        if (_err.Count > 0)
                        {
                            _errlist = _err;
                            _generalDAL.TransactionCommit();
                            _salesDAL.TransactionCommit();
                            _inventoryDAL.TransactionCommit();
                            err = "";
                            return 1;
                        }
                        else
                        {
                            _salesDAL.DeleteEliteCommission(_pc, year, month);
                            foreach (EliteCommission _comm in _commissionList)
                            {
                                _comm.Saec_circular = _definition.Saec_circ;
                                _salesDAL.SaveEliteCommission(_comm);
                            }
                            foreach (EliteCommissionSlab _slab in _commissionDetList)
                            {
                                _slab.Saec_circular = _definition.Saec_circ;
                                _salesDAL.SaveEliteCommissionSlab(_slab);
                            }
                            _salesDAL.DeleteEliteInvoice(_pc, year, month);
                            foreach (FF.BusinessObjects.EliteCommissionInvoice _inv in _invoiceList)
                            {
                                _inv.Saec_circular = _definition.Saec_circ;
                                _inv.Saec_month = month;
                                _inv.Saec_year = year;
                                _salesDAL.SaveEliteCommissionInvoices(_inv);
                            }
                        }
                    }

                    else
                    {
                        _salesDAL.DeleteEliteCommission(_definition.Saec_circ, year, month);
                        foreach (EliteCommission _comm in _commissionList)
                        {
                            _comm.Saec_circular = _definition.Saec_circ;
                            _salesDAL.SaveEliteCommission(_comm);
                        }
                        foreach (EliteCommissionSlab _slab in _commissionDetList)
                        {
                            _slab.Saec_circular = _definition.Saec_circ;
                            _salesDAL.SaveEliteCommissionSlab(_slab);
                        }
                        _salesDAL.DeleteEliteInvoice(_definition.Saec_circ, year, month);
                        foreach (FF.BusinessObjects.EliteCommissionInvoice _inv in _invoiceList)
                        {
                            _inv.Saec_circular = _definition.Saec_circ;
                            _inv.Saec_month = month;
                            _inv.Saec_year = year;
                            _salesDAL.SaveEliteCommissionInvoices(_inv);
                        }
                    }
                }
                _errlist = null;
                _generalDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                err = "";
                //_generalDAL.ConnectionClose();
                //_salesDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                //tr.Complete();
            }
            catch (Exception ex)
            {
                _errlist = null;
                err = ex.Message;
                _generalDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
            }
            return 1;
        }


        //sachith 2014/01/17
        public DataTable GetTrimmingAccounts(string _com, List<string> _pcList, DateTime _fromDate, decimal _margin, out string _error)
        {
            DataTable _dt = new DataTable();
            _dt.TableName = "aa";
            try
            {

                _dt.Columns.Add("acc_no");
                _dt.Columns.Add("invoice_no");
                _dt.Columns.Add("pc");
                _dt.Columns.Add("cre_dt");
                _dt.Columns.Add("sch_tp");
                _dt.Columns.Add("sch_cd");
                _dt.Columns.Add("cash_val");
                _dt.Columns.Add("cls_bal");
                _dt.Columns.Add("last_date");
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                List<HpAccount> _accNoList = new List<HpAccount>();

                //01.GET ACTIVE ACCOUNT TO FROM DATE
                foreach (string pc in _pcList)
                {
                    List<HpAccount> _temp = _salesDAL.GetPCAccounts(_com, pc, _fromDate);
                    if (_temp != null)
                    {
                        _accNoList.AddRange(_temp);
                    }
                }

                //02.GET CLOSING BALANCE FOR EACH ACCOUNT(FROM DATE)
                foreach (HpAccount _acc in _accNoList)
                {
                    Decimal _balance = _salesDAL.Get_AccountBalance(_fromDate, _acc.Hpa_acc_no);

                    if (_balance <= _margin && _balance >= (-1 * _margin))
                    {
                        //03 CHECK TRAANSACTIONS AFTER FROM DATE
                        HpTransaction _txn = _salesDAL.GetLastTxnDate(_acc.Hpa_acc_no);
                        //if null add to table
                        if (_txn == null)
                        {
                            DataRow _dr = _dt.NewRow();
                            _dr[0] = _acc.Hpa_acc_no;
                            _dr[1] = _acc.Hpa_invc_no;
                            _dr[2] = _acc.Hpa_pc;
                            _dr[3] = _acc.Hpa_cre_dt;
                            _dr[4] = _acc.Hpa_sch_tp;
                            _dr[5] = _acc.Hpa_sch_cd;
                            _dr[6] = _acc.Hpa_cash_val;
                            _dr[7] = _balance;
                            _dr[8] = "";
                            _dt.Rows.Add(_dr);
                        }
                        else
                        {
                            if (_txn.Hpt_txn_dt <= _fromDate)
                            {
                                //check last date less than from date
                                DataRow _dr1 = _dt.NewRow();
                                _dr1[0] = _acc.Hpa_acc_no;
                                _dr1[1] = _acc.Hpa_invc_no;
                                _dr1[2] = _acc.Hpa_pc;
                                _dr1[3] = _acc.Hpa_cre_dt;
                                _dr1[4] = _acc.Hpa_sch_tp;
                                _dr1[5] = _acc.Hpa_sch_cd;
                                _dr1[6] = _acc.Hpa_cash_val;
                                _dr1[7] = _balance;
                                _dr1[8] = _txn.Hpt_txn_dt;
                                _dt.Rows.Add(_dr1);
                            }
                        }

                    }
                }

                _salesDAL.TransactionCommit();
                _error = "";
                return _dt;
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _error = ex.Message;
                return null;
            }
        }

        public int SaveAccountTrim(out string _error, string _com, List<string> _pcList, DateTime _fromDate, decimal _margin, DateTime _date, string _userId)
        {
            try
            {
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                string _ee;
                DataTable _dt = new DataTable();
                _dt.TableName = "aa";
                _dt.Columns.Add("acc_no");
                _dt.Columns.Add("invoice_no");
                _dt.Columns.Add("pc");
                _dt.Columns.Add("cre_dt");
                _dt.Columns.Add("sch_tp");
                _dt.Columns.Add("sch_cd");
                _dt.Columns.Add("cash_val");
                _dt.Columns.Add("cls_bal");
                _dt.Columns.Add("last_date");
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                List<HpAccount> _accNoList = new List<HpAccount>();

                //01.GET ACTIVE ACCOUNT TO FROM DATE
                foreach (string pc in _pcList)
                {
                    List<HpAccount> _temp = _salesDAL.GetPCAccounts(_com, pc, _fromDate);
                    if (_temp != null)
                    {
                        _accNoList.AddRange(_temp);
                    }
                }

                //02.GET CLOSING BALANCE FOR EACH ACCOUNT(FROM DATE)
                foreach (HpAccount _acc in _accNoList)
                {
                    Decimal _balance = _salesDAL.Get_AccountBalance(_fromDate, _acc.Hpa_acc_no);

                    if (_balance <= _margin && _balance >= (-1 * _margin))
                    {
                        //03 CHECK TRAANSACTIONS AFTER FROM DATE
                        HpTransaction _txn = _salesDAL.GetLastTxnDate(_acc.Hpa_acc_no);
                        //if null add to table
                        if (_txn == null)
                        {
                            DataRow _dr = _dt.NewRow();
                            _dr[0] = _acc.Hpa_acc_no;
                            _dr[1] = _acc.Hpa_invc_no;
                            _dr[2] = _acc.Hpa_pc;
                            _dr[3] = _acc.Hpa_cre_dt;
                            _dr[4] = _acc.Hpa_sch_tp;
                            _dr[5] = _acc.Hpa_sch_cd;
                            _dr[6] = _acc.Hpa_cash_val;
                            _dr[7] = _balance;
                            _dr[8] = "";
                            _dt.Rows.Add(_dr);
                        }
                        else
                        {
                            if (_txn.Hpt_txn_dt <= _fromDate)
                            {
                                //check last date less than from date
                                DataRow _dr1 = _dt.NewRow();
                                _dr1[0] = _acc.Hpa_acc_no;
                                _dr1[1] = _acc.Hpa_invc_no;
                                _dr1[2] = _acc.Hpa_pc;
                                _dr1[3] = _acc.Hpa_cre_dt;
                                _dr1[4] = _acc.Hpa_sch_tp;
                                _dr1[5] = _acc.Hpa_sch_cd;
                                _dr1[6] = _acc.Hpa_cash_val;
                                _dr1[7] = _balance;
                                _dr1[8] = _txn.Hpt_txn_dt;
                                _dt.Rows.Add(_dr1);
                            }
                        }

                    }
                }

                List<HpAccount> _tempAcc = new List<HpAccount>();
                foreach (DataRow dr in _dt.Rows)
                {
                    string _accNo = dr["acc_no"].ToString();
                    HpAccount _account = _salesDAL.GetHP_Account_onAccNo(_accNo);
                    if (_account != null)
                    {
                        _tempAcc.Add(_account);
                    }
                }


                //save acc log
                //foreach (HpAccount _tlog in _tempAcc)
                //{
                //    HPAccountLog _log = new HPAccountLog();
                //    _log.Hal_acc_no = _tlog.Hpa_acc_no;
                //    _log.Hal_af_val = _tlog.Hpa_af_val;
                //    _log.Hal_bank = _tlog.Hpa_bank;
                //    _log.Hal_buy_val = _tlog.Hpa_buy_val;
                //    _log.Hal_cash_val = _tlog.Hpa_cash_val;
                //    _log.Hal_cls_dt =_date;
                //    _log.Hal_com = _tlog.Hpa_com;
                //    _log.Hal_cre_by = _userId;
                //    _log.Hal_cre_dt = DateTime.Now;
                //    _log.Hal_dp_comm = _tlog.Hpa_dp_comm;
                //    _log.Hal_dp_val = _tlog.Hpa_dp_val;
                //    _log.Hal_ecd_stus = _tlog.Hpa_ecd_stus;
                //    _log.Hal_ecd_tp = _tlog.Hpa_ecd_tp;
                //    _log.Hal_flag = _tlog.Hpa_flag;
                //    _log.Hal_grup_cd = _tlog.Hpa_grup_cd;
                //    _log.Hal_hp_val = _tlog.Hpa_hp_val;
                //    _log.Hal_init_ins = _tlog.Hpa_init_ins;
                //    _log.Hal_init_ser_chg = _tlog.Hpa_init_ser_chg;
                //    _log.Hal_init_stm = _tlog.Hpa_init_stm;
                //    _log.Hal_init_vat = _tlog.Hpa_init_vat;
                //    _log.Hal_inst_comm = _tlog.Hpa_inst_comm;
                //    _log.Hal_inst_ins = _tlog.Hpa_inst_ins;
                //    _log.Hal_inst_ser_chg = _tlog.Hpa_inst_ser_chg;
                //    _log.Hal_inst_stm = _tlog.Hpa_inst_stm;
                //    _log.Hal_inst_vat = _tlog.Hpa_inst_vat;
                //    _log.Hal_intr_rt = _tlog.Hpa_intr_rt;
                //    _log.Hal_invc_no = _tlog.Hpa_invc_no;
                //    _log.Hal_is_rsch = _tlog.Hpa_is_rsch;
                //    _log.Hal_mgr_cd = _tlog.Hpa_mgr_cd;
                //    _log.Hal_log_dt = DateTime.Now.Date;
                //    _log.Hal_net_val = _tlog.Hpa_net_val;
                //    _log.Hal_oth_chg = _tlog.Hpa_oth_chg;
                //    _log.Hal_pc = _tlog.Hpa_pc;
                //    _log.Hal_rls_dt = _tlog.Hpa_rls_dt;
                //    _log.Hal_rsch_dt = _tlog.Hpa_rsch_dt;
                //    _log.Hal_rv_dt = _tlog.Hpa_rv_dt;
                //    _log.Hal_sch_cd = _tlog.Hpa_sch_cd;
                //    _log.Hal_sch_tp = _tlog.Hpa_sch_tp;
                //    _log.Hal_seq = _tlog.Hpa_seq;
                //    _log.Hal_ser_chg = _tlog.Hpa_ser_chg;
                //    _log.Hal_stus = "T";
                //    _log.Hal_tc_val = _tlog.Hpa_tc_val;
                //    _log.Hal_term = _tlog.Hpa_term;
                //    _log.Hal_tot_intr = _tlog.Hpa_tot_intr;
                //    _log.Hal_tot_vat = _tlog.Hpa_tot_vat;
                //    _log.Hal_val_01 = _tlog.Hpa_val_01;
                //    _log.Hal_val_02 = _tlog.Hpa_val_02;
                //    _log.Hal_val_03 = _tlog.Hpa_val_03;
                //    _log.Hal_val_04 = _tlog.Hpa_val_04;
                //    _log.Hal_val_05 = _tlog.Hpa_val_05;
                //    _log.Hal_sa_sub_tp = "TRIM";

                //    _log.Hal_seq_no = _inventoryDAL.GetSerialID();
                //    _salesDAL.SaveHPAccountLog(_log);
                //}

                //update status
                foreach (HpAccount _tacc in _tempAcc)
                {
                    //update ststus as 'T'
                    //update cls date as date
                    _tacc.Hpa_cls_dt = _date;
                    _tacc.Hpa_stus = "T";
                    _salesDAL.UpdateAccountTrimStatus(_tacc.Hpa_acc_no, _tacc.Hpa_stus, _tacc.Hpa_cls_dt);
                }

                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _error = "";
                return 1;
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _error = ex.Message;
                return -1;
            }
        }

        public int SaveHPAcoountChecklist(HPAccountChecklistHdr _hdr, List<HpAccountChecklistDet> _detList, MasterAutoNumber _auto, out string _error)
        {
            try
            {
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();

                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                //get auto no
                MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                string _docNo = _auto.Aut_start_char + "-" + _auto.Aut_cate_cd + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_auto);//update MST_AUTO table


                //save hdr
                int seq_no = _inventoryDAL.GetSerialID();
                _hdr.Agrh_seq = seq_no;
                _hdr.Agrh_doc_no = _docNo;
                _salesDAL.SaveHPAccountChecklistHdr(_hdr);
                //save det
                foreach (HpAccountChecklistDet _det in _detList)
                {
                    _det.Agrd_doc_no = _docNo;
                    _det.Agrd_seq = seq_no;
                    _salesDAL.SaveHPAccountChecklistDet(_det);
                }

                _error = _docNo;
                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                return 1;
            }
            catch (Exception ex)
            {
                _error = ex.Message;
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                return -1;
            }
        }

        public int ConfirmHPAccountChecklist(List<HpAccountChecklistDet> _det, string _pc, DateTime _date, out string _error, string _com)
        {

            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                foreach (HpAccountChecklistDet _detail in _det)
                {
                    _salesDAL.UpdateAccountChecklistDetails(_detail);

                    _salesDAL.UpdateAccountChecklistHeader(_detail.Agrd_doc_no, _detail.Agrd_acc_no, _pc, Convert.ToDateTime(_date).Date, _com);
                }

                _salesDAL.TransactionCommit();
                _error = "";
                return 1;
            }
            catch (Exception ex)
            {
                _error = ex.Message;
                _salesDAL.TransactionRollback();
                return -1;
            }

        }

        public HPAccountChecklistHdr GetPODNo(string _podNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPODNo(_podNo);
        }

        public List<PriceDefinitionUserRestriction> GetUserRestriction(string _userId, string _com, DateTime _date, string _pb, string _plevel, int _type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetUserRestriction(_userId, _com, _date, _pb, _plevel, _type);
        }

        public Int32 UpdateRequestAppStatus(string _appStus, string _req, string _itm)
        {
            int _result = 0;
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            _result = _salesDAL.UpdateRequestAppStatus(_appStus, _req, _itm);
            _salesDAL.ConnectionClose();
            return _result;

        }

        public string ExportExcel2007(string _com, string _user, DataTable _dt1, out string _err)
        {
            try
            {
                DataTable _dt = _dt1;

                string _targetFilename = CreateExcelFile.ExportToExcelxlsx(_user, _com, _dt, 60000, out _err);

                _dt.Dispose();
                GC.Collect();

                if (string.IsNullOrEmpty(_err))
                { return _targetFilename; }
                else
                { return "Err"; }
            }
            catch (Exception err)
            {
                GC.Collect();
                _err = err.ToString();
                return "Err";
            }
        }

        public List<ExtendWaraParam> GetExWaraParam(string _type, string _value, DateTime _date, decimal _invVal, Int32 _invPd, string _searchTp, string _cusCd, string _itm, string _ser, string _brd, string _mCat, string _sCat, string _promo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetExWaraParam(_type, _value, _date, _invVal, _invPd, _searchTp, _cusCd, _itm, _ser, _brd, _mCat, _sCat, _promo);
        }

        public DataTable GetAccountCustomer(string _com, string _pc, string _acc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAccountCustomer(_com, _pc, _acc);
        }

        public int ProcessOnlinePayment(string _com, List<RecieptHeader> _hdr, List<RecieptItem> _item, out List<string> Receipts, string _msg)
        {
            int _int = -1;
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            _salesDAL.ConnectionOpen();
            _salesDAL.BeginTransaction();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            Receipts = new List<string>();
            foreach (RecieptHeader _h in _hdr)
            {
                _int = 1;
                MasterAutoNumber _auto = new MasterAutoNumber();
                _auto.Aut_cate_cd = _h.Sar_profit_center_cd;
                _auto.Aut_cate_tp = "PRO";
                _auto.Aut_direction = 1;
                _auto.Aut_modify_dt = null;
                _auto.Aut_moduleid = "RECEIPT";
                _auto.Aut_number = 0;
                _auto.Aut_start_char = _h.Sar_receipt_type;
                _auto.Aut_year = Convert.ToDateTime(_h.Sar_receipt_date).Year;
                HpAccount _acc = _salesDAL.GetHP_Account_onAccNo(_h.Sar_acc_no);
                decimal _hptacccomm = _acc.Hpa_inst_comm;
                _h.Sar_comm_amt = _h.Sar_tot_settle_amt * _hptacccomm / 100;
                _h.Sar_anal_5 = _hptacccomm;

                _h.Sar_seq_no = _inventoryDAL.GetSerialID();
                _salesDAL.SaveReceiptHeader(_h);
                var lstItm = _item.Where(x => x.Sard_receipt_no == _h.Sar_receipt_no).ToList();
                if (lstItm == null || lstItm.Count <= 0) { _int = 1; _salesDAL.TransactionRollback(); _salesDAL.ConnectionClose(); _inventoryDAL.ConnectionClose(); break; }
                foreach (RecieptItem _i in lstItm)
                {
                    _i.Sard_seq_no = _h.Sar_seq_no;
                    _salesDAL.SaveReceiptItem(_i);
                }

                string RecieptNo = string.Empty;
                if (_auto != null)
                {
                nxt2:
                    _auto.Aut_year = null;
                    MasterAutoNumber RecieptAuto = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                    RecieptNo = _auto.Aut_cate_cd + "-" + RecieptAuto.Aut_start_char + "-" + RecieptAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                    _auto.Aut_year = null;
                    _auto.Aut_modify_dt = null;

                    if (_salesDAL.CheckSalesNo("sp_getreceiptno", "p_rept_no", RecieptNo) == 1)
                    {
                        _inventoryDAL.UpdateInvoiceAutoNumber(_auto);
                        goto nxt2;
                    }
                    _inventoryDAL.UpdateInvoiceAutoNumber(_auto);
                }

                if (_h.Sar_receipt_type == "WEBHP")
                {
                    HpTransaction _tr = new HpTransaction();
                    _tr.Hpt_acc_no = _h.Sar_acc_no;
                    _tr.Hpt_ars = 0;
                    _tr.Hpt_bal = 0;
                    _tr.Hpt_com = _h.Sar_com_cd;
                    _tr.Hpt_crdt = 0;
                    _tr.Hpt_cre_by = _h.Sar_create_by;
                    _tr.Hpt_cre_dt = _h.Sar_create_when;
                    _tr.Hpt_crdt = _h.Sar_tot_settle_amt;
                    _tr.Hpt_desc = "WEB PAYMENT";
                    _tr.Hpt_mnl_ref = _h.Sar_manual_ref_no;
                    _tr.Hpt_pc = _h.Sar_profit_center_cd;
                    _tr.Hpt_ref_no = RecieptNo;
                    _tr.Hpt_seq = _inventoryDAL.GetSerialID();
                    _tr.Hpt_txn_dt = _h.Sar_receipt_date;
                    _tr.Hpt_txn_ref = RecieptNo;
                    _tr.Hpt_txn_tp = "WEBHP";
                    _salesDAL.Save_HpTransaction(_tr);
                }
                _salesDAL.UpdateReceipt(string.Empty, RecieptNo, 0, _h.Sar_seq_no);
                _inventoryDAL.UpdateOnlinePayment(_h.Sar_com_cd, _h.Sar_profit_center_cd, _h.Sar_ref_doc, "A", _h.Sar_create_by, RecieptNo);
                Receipts.Add(RecieptNo);
            }
            _salesDAL.TransactionCommit();
            _inventoryDAL.TransactionCommit();
            return _int;
        }

        public DataTable GetNBookNLevel(string _pc, string _com, string _item, decimal _qty, string _customer, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetNBookNLevel(_pc, _com, _item, _qty, _customer, _date);
        }

        public DataTable GetInvItemQty(string _invNo, string _itm)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvItemQty(_invNo, _itm);
        }

        public DataTable GetReqItemQty(string _tp, string _subTp, string _invNo, string _itm)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReqItemQty(_tp, _subTp, _invNo, _itm);
        }

        public DataTable GetPromotionalDiscountSequencesBackUp(string _company, string _profitcenter, string _invoicetype, Int32 _time, string _day, DateTime _date, List<InvoiceItem> _InInvDet, List<RecieptItem> _InReceiptDet, InvoiceHeader _invoiceheader, out bool isMulty, out int _seq)
        {

            try
            {

                /*
                 * 
                 * get item code
                 * get all active sequences according to paymode
                 * find best sequence according to discount amount(not rate)
                 * send discount sequence
                 * 
                 
                 *
                 * SINGLE PAYMODE
                 * get sequence according to paymode
                 * get latest sequence
                 * 
                 
                 * MULTIPLE PAYMODE
                 * 01  get sequences whicha allow muliple paymodes
                 *     get latest sequence
                 *     calculate discount full payment
                 *     add to list
                 * 
                 * 02   get sequences which allow partical payments
                 *      loop through paymodes and find matching sequences
                 *      calculate discount for paymode part
                 *      add to list
                 *      
                 * 03   calculate highest discount amount
                 *      select highest amount as sequence
                 * 
                 * 
                 */


                _salesDAL = new SalesDAL();
                string _loltype = string.Empty;
                string _membership = string.Empty;
                DataTable _loldet = null;
                List<CashPromotionDiscountDetail> _details = new List<CashPromotionDiscountDetail>();
                List<CashPromotionDiscountDetail> _finalDetails = new List<CashPromotionDiscountDetail>();
                List<MasterSalesPriorityHierarchy> _hierarchy = _salesDAL.GetSalesPriorityHierarchy(_company, _profitcenter, "PC_PRIT_HIERARCHY", "PC");
                if (_hierarchy != null && _hierarchy.Count > 0) _hierarchy = _hierarchy.Where(x => x.Mpi_cd == "PC" || x.Mpi_cd == "CHNL").ToList();
                if (!string.IsNullOrEmpty(_invoiceheader.Sah_anal_6))
                {
                    _loldet = _salesDAL.GetLoyaltyCardDetail(_invoiceheader.Sah_cus_cd, _invoiceheader.Sah_anal_6);
                    if (_loldet != null) if (_loldet.Rows.Count > 0)
                        {
                            _loltype = _loldet.Rows[0].Field<string>("salcm_loty_tp");
                            _membership = _loldet.Rows[0].Field<string>("salcm_cus_spec");
                        }
                }
                //get definition for items
                foreach (InvoiceItem _itm in _InInvDet)
                {
                    if (_itm.Sad_res_line_no != 1)
                    {
                        Int16 _isSerialized = Convert.ToInt16(_salesDAL.GetPriceLevel(_company, _itm.Sad_pbook, _itm.Sad_pb_lvl).Sapl_is_serialized);
                        Int16 _isPromotion = Convert.ToInt16(string.IsNullOrEmpty(_itm.Sad_promo_cd) || _itm.Sad_promo_cd == "0" ? 0 : 1);
                        if (_itm.Sad_conf_no == "0" || _itm.Sad_conf_no == "4")     //kapila 31/12/2016
                            _isPromotion = 0;
                        if (_hierarchy != null && _hierarchy.Count > 0)
                        {
                            foreach (MasterSalesPriorityHierarchy _one in _hierarchy)
                            {
                                string _type = _one.Mpi_cd;
                                string _value = _one.Mpi_val;
                                List<CashPromotionDiscountDetail> _List = _salesDAL.GetGeneralPromotionDiscount(_company, _type, _value, _invoicetype, _time, _day, _date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _itm.Sad_itm_cd, _isSerialized, _isPromotion);
                                if (_List != null && _List.Count > 0)
                                {
                                    _details.AddRange(_List);
                                }
                            }
                        }
                    }
                }
                //filter for pay modes
                //get distinct discount sequences
                List<int> _distinctSeqs = _details.Select(x => x.Spdd_seq).Distinct().ToList<int>();
                foreach (int seq in _distinctSeqs)
                {
                    List<CashPromotionDiscountDetail> _temDiscounts = (from _res in _details
                                                                       where _res.Spdd_seq == seq
                                                                       select _res).ToList<CashPromotionDiscountDetail>();

                    bool isAllMatch = false;
                    //has on pay mode
                    if (_InReceiptDet.Count == 1)
                    {
                        foreach (RecieptItem _recItm in _InReceiptDet)
                        {
                            List<CashPromotionDiscountDetail> _payModeList = (from _res in _temDiscounts
                                                                              where _res.Spdd_pay_tp == _recItm.Sard_pay_tp
                                                                              select _res).ToList<CashPromotionDiscountDetail>();
                            if (_payModeList == null || _payModeList.Count <= 0)
                            {
                                isAllMatch = false;
                                break;
                            }

                            //check receipt pay mode with discount pay modes
                            foreach (CashPromotionDiscountDetail _payTp in _temDiscounts)
                            {
                                if (_recItm.Sard_pay_tp.ToUpper() == "CRCD" && _payTp.Spdd_pay_tp == "CRCD")
                                {

                                    //pay mode detail match
                                    //filter by pd(if have)
                                    if (_recItm.Sard_cc_is_promo)
                                    {
                                        if (_recItm.Sard_cc_period == _payTp.Spdd_cc_pd)
                                        {

                                            //pay mode detail match
                                            //filter by pd(if have)
                                            if (_recItm.Sard_cc_is_promo)
                                            {
                                                if (_recItm.Sard_cc_period == _payTp.Spdd_cc_pd)
                                                {
                                                    //01.chk bank,cc type
                                                    //02.chk null bank cc type
                                                    //03.chk null bank null cc type
                                                    if (_recItm.Sard_credit_card_bank == _payTp.Spdd_bank && _recItm.Sard_cc_tp == _payTp.Spdd_cc_tp)
                                                    {
                                                        isAllMatch = true;
                                                        break;
                                                    }
                                                    if (string.IsNullOrEmpty(_payTp.Spdd_bank) && _recItm.Sard_cc_tp == _payTp.Spdd_cc_tp)
                                                    {
                                                        isAllMatch = true;
                                                        break;
                                                    }
                                                    if (string.IsNullOrEmpty(_payTp.Spdd_bank) && string.IsNullOrEmpty(_payTp.Spdd_cc_tp))
                                                    {
                                                        isAllMatch = true;
                                                        break;
                                                    }
                                                    if (_recItm.Sard_credit_card_bank == _payTp.Spdd_bank && string.IsNullOrEmpty(_payTp.Spdd_cc_tp))
                                                    {
                                                        isAllMatch = true;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (_payTp.Spdd_alw_cc_pro)
                                        {
                                            isAllMatch = false;
                                            continue;
                                        }
                                        //01.chk bank,cc type
                                        //02.chk null bank cc type
                                        //03.chk null bank null cc type

                                        if (_recItm.Sard_credit_card_bank == _payTp.Spdd_bank && _recItm.Sard_cc_tp == _payTp.Spdd_cc_tp)
                                        {
                                            isAllMatch = true;
                                            break;
                                        }
                                        if (string.IsNullOrEmpty(_payTp.Spdd_bank) && _recItm.Sard_cc_tp == _payTp.Spdd_cc_tp)
                                        {
                                            isAllMatch = true;
                                            break;
                                        }
                                        if (string.IsNullOrEmpty(_payTp.Spdd_bank) && string.IsNullOrEmpty(_payTp.Spdd_cc_tp))
                                        {
                                            isAllMatch = true;
                                            break;
                                        }
                                        if (_recItm.Sard_credit_card_bank == _payTp.Spdd_bank && string.IsNullOrEmpty(_payTp.Spdd_cc_tp))
                                        {
                                            isAllMatch = true;
                                            break;
                                        }
                                    }
                                }
                                else if (_recItm.Sard_pay_tp.ToUpper() == "CASH" && _payTp.Spdd_pay_tp == "CASH")
                                {
                                    isAllMatch = true;
                                    break;
                                }
                                else if (_recItm.Sard_pay_tp.ToUpper() == "LORE" && _payTp.Spdd_pay_tp == "LORE")
                                {
                                    //chk cd type and membership
                                    if (_payTp.Spdd_bank == _loltype && _payTp.Spdd_cc_tp == _membership)
                                    {
                                        isAllMatch = true;
                                        break;
                                    }
                                    else if (_payTp.Spdd_bank == _loltype && string.IsNullOrEmpty(_payTp.Spdd_cc_tp))
                                    {
                                        isAllMatch = true;
                                        break;
                                    }
                                }
                                else if ((_recItm.Sard_pay_tp.ToUpper() == "CHEQUE" && _payTp.Spdd_pay_tp.ToUpper() == "CHEQUE") || (_recItm.Sard_pay_tp.ToUpper() == "DEBT" && _payTp.Spdd_pay_tp.ToUpper() == "DEBT"))
                                {
                                    //chk cd type and membership
                                    if (_payTp.Spdd_bank == _recItm.Sard_chq_bank_cd)
                                    {
                                        isAllMatch = true;
                                        break;
                                    }
                                    else if (string.IsNullOrEmpty(_payTp.Spdd_bank))
                                    {
                                        isAllMatch = true;
                                        break;
                                    }
                                }
                                //check with pay mode only
                                else if (_recItm.Sard_pay_tp.ToUpper() == _payTp.Spdd_pay_tp)
                                {
                                    isAllMatch = true;
                                    break;
                                }
                                //chk all pay modes
                                else if (string.IsNullOrEmpty(_payTp.Spdd_pay_tp))
                                {
                                    isAllMatch = true;
                                    break;
                                }
                            }
                        }

                    }
                    //has multiple pay modes
                    else
                    {
                        isAllMatch = false;
                        List<CashPromotionDiscountDetail> _temDiscountsMulti = (from _res in _details
                                                                                where _res.Spdd_seq == seq && _res.Spdd_alw_mult == 1
                                                                                select _res).ToList<CashPromotionDiscountDetail>();
                        if (_temDiscountsMulti == null || _temDiscountsMulti.Count <= 0)
                        {
                            continue;
                        }

                        foreach (RecieptItem _recItm in _InReceiptDet)
                        {
                            isAllMatch = false;
                            //check receipt pay mode with discount pay modes
                            foreach (CashPromotionDiscountDetail _payTp in _temDiscounts)
                            {
                                if (_recItm.Sard_pay_tp.ToUpper() == "CRCD" && _payTp.Spdd_pay_tp == "CRCD")
                                {

                                    //pay mode detail match
                                    //filter by pd(if have)
                                    if (_recItm.Sard_cc_is_promo)
                                    {
                                        if (_recItm.Sard_cc_period == _payTp.Spdd_cc_pd)
                                        {
                                            //01.chk bank,cc type
                                            //02.chk null bank cc type
                                            //03.chk null bank null cc type
                                            if (_recItm.Sard_credit_card_bank == _payTp.Spdd_bank && _recItm.Sard_cc_tp == _payTp.Spdd_cc_tp)
                                            {
                                                isAllMatch = true;
                                                break;
                                            }
                                            else if (string.IsNullOrEmpty(_payTp.Spdd_bank) && _recItm.Sard_cc_tp == _payTp.Spdd_cc_tp)
                                            {
                                                isAllMatch = true;
                                                break;
                                            }
                                            else if (string.IsNullOrEmpty(_payTp.Spdd_bank) && string.IsNullOrEmpty(_payTp.Spdd_cc_tp))
                                            {
                                                isAllMatch = true;
                                                break;
                                            }
                                            else
                                            {
                                                isAllMatch = false;
                                                break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (_payTp.Spdd_alw_cc_pro)
                                        {
                                            isAllMatch = false;
                                            continue;
                                        }
                                        //01.chk bank,cc type
                                        //02.chk null bank cc type
                                        //03.chk null bank null cc type
                                        if (_recItm.Sard_credit_card_bank == _payTp.Spdd_bank && _recItm.Sard_cc_tp == _payTp.Spdd_cc_tp)
                                        {
                                            isAllMatch = true;
                                            break;
                                        }
                                        else if (string.IsNullOrEmpty(_payTp.Spdd_bank) && _recItm.Sard_cc_tp == _payTp.Spdd_cc_tp)
                                        {
                                            isAllMatch = true;
                                            break;
                                        }
                                        else if (string.IsNullOrEmpty(_payTp.Spdd_bank) && string.IsNullOrEmpty(_payTp.Spdd_cc_tp))
                                        {
                                            isAllMatch = true;
                                            break;
                                        }
                                        else
                                        {
                                            isAllMatch = false;
                                            break;
                                        }
                                    }


                                }
                                else if (_recItm.Sard_pay_tp.ToUpper() == "CASH" && _payTp.Spdd_pay_tp == "CASH")
                                {
                                    isAllMatch = true;
                                    break;
                                }
                                else if (_recItm.Sard_pay_tp.ToUpper() == "LORE" && _payTp.Spdd_pay_tp == "LORE")
                                {
                                    //chk cd type and membership
                                    if (_payTp.Spdd_bank == _loltype && _payTp.Spdd_cc_tp == _membership)
                                    {
                                        isAllMatch = true;
                                        break;
                                    }
                                    else if (_payTp.Spdd_bank == _loltype && string.IsNullOrEmpty(_payTp.Spdd_cc_tp))
                                    {
                                        isAllMatch = true;
                                        break;
                                    }
                                    else
                                    {
                                        isAllMatch = false;
                                        break;
                                    }
                                }
                                else if ((_recItm.Sard_pay_tp.ToUpper() == "CHEQUE" && _payTp.Spdd_pay_tp.ToUpper() == "CHEQUE") || (_recItm.Sard_pay_tp.ToUpper() == "DEBT" && _payTp.Spdd_pay_tp.ToUpper() == "DEBT"))
                                {
                                    //chk cd type and membership
                                    if (_payTp.Spdd_bank == _recItm.Sard_chq_bank_cd)
                                    {
                                        isAllMatch = true;
                                        break;
                                    }
                                    else if (string.IsNullOrEmpty(_payTp.Spdd_bank))
                                    {
                                        isAllMatch = true;
                                        break;
                                    }
                                    else
                                    {
                                        isAllMatch = false;
                                        break;
                                    }
                                }
                                //check with pay mode only
                                else if (_recItm.Sard_pay_tp.ToUpper() == _payTp.Spdd_pay_tp)
                                {
                                    isAllMatch = true;
                                    break;
                                }
                                //chk all pay modes
                                else if (string.IsNullOrEmpty(_payTp.Spdd_pay_tp))
                                {
                                    isAllMatch = true;
                                    break;
                                }
                            }
                            if (!isAllMatch)
                            {
                                goto END;
                            }
                        }
                    }
                END:
                    //if match add to final list
                    if (isAllMatch)
                    {
                        _finalDetails.AddRange(_temDiscounts);
                    }
                }
                _finalDetails = _finalDetails.OrderByDescending(x => x.Spdd_seq).ToList<CashPromotionDiscountDetail>();

                isMulty = false;
                _seq = _finalDetails[0].Spdd_seq;
                return null;

                //********************************************************************

                /*
                DataTable _result = new DataTable();
                _result.TableName = "_result";
                _result.Columns.Add("sequence");
                _result.Columns.Add("circular");
                _result.Columns.Add("disProduct");
                _result.Columns.Add("disRate");
                _result.Columns.Add("finalValue");
                //format list
                List<CashPromotionDiscountDetail> _distinctDetail = _finalDetails.GroupBy(x => x.Spdd_seq).Select(x => x.First()).ToList<CashPromotionDiscountDetail>();

                if (_distinctDetail == null || _distinctDetail.Count <= 0)
                {
                    return null;
                }
                foreach (CashPromotionDiscountDetail _det in _distinctDetail)
                {
                    List<InvoiceItem> copy = new List<InvoiceItem>(_InInvDet);
                    copy.ForEach(x => x.Sad_dis_type = "");
                    copy.ForEach(x => x.Sad_disc_amt = 0);
                    copy.ForEach(x => x.Sad_disc_rt = 0);
                    copy.ForEach(x => x.Sad_dis_line = 0);
                    copy.ForEach(x => x.Sad_dis_seq = 0);
                    DataRow _dr = _result.NewRow();
                    _dr[0] = _det.Spdd_seq;
                    _dr[1] = "aa";//_salesDAL.GetPromotionalHeaderBySeq(_det.Spdd_seq).Spdh_circular;
                    //get header
                    //CashPromotionDiscountHeader _hdr=_salesDAL.getpr
                    List<InvoiceItem> _discountedItems;
                    decimal tobepay;
                    bool isDiff;
                    GetGeneralPromotionProcess(_det.Spdd_seq, _company, copy, out  _discountedItems, out  isDiff, out  tobepay, _invoiceheader);
                    string _disItems = "";
                    foreach (InvoiceItem _itm in _discountedItems)
                    {
                        if (_itm.Sad_dis_type == "P")
                        {
                            _disItems = _disItems + _itm.Sad_itm_cd + " , ";
                        }
                    }
                    if (_disItems.Length > 0)
                    {
                        _disItems = _disItems.Substring(0, _disItems.Length - 2);
                    }
                    _dr[2] = _disItems;
                    _dr[3] = _det.Spdd_disc_rt;
                    _dr[4] = tobepay;
                    _result.Rows.Add(_dr);
                }

                //return final set for user selection
                return _result;
                 */
            }
            catch (Exception ex)
            {
                isMulty = false;
                _seq = -9999;
                return null;
            }
        }

        public DataTable GetAccountAcknoledge(string _com, string _pc, DateTime _fromDate, DateTime _toDate, string _scheme, decimal _margin, out string _error)
        {
            DataTable _dt = new DataTable();
            _dt.TableName = "aa";
            try
            {

                _dt.Columns.Add("acc_no");
                _dt.Columns.Add("invoice_no");
                _dt.Columns.Add("pc");
                _dt.Columns.Add("cre_dt");
                _dt.Columns.Add("sch_tp");
                _dt.Columns.Add("sch_cd");
                _dt.Columns.Add("cash_val");
                _dt.Columns.Add("cls_bal");
                _dt.Columns.Add("last_date");
                _dt.Columns.Add("product");
                _dt.Columns.Add("hire_value");
                _dt.Columns.Add("diriya");
                _dt.Columns.Add("customer_name");
                _dt.Columns.Add("cus_add1");
                _dt.Columns.Add("cus_add2");
                _dt.Columns.Add("guarantor_name");
                _dt.Columns.Add("gur_add1");
                _dt.Columns.Add("gur_add2");
                _dt.Columns.Add("guarantor2_name");
                _dt.Columns.Add("gur2_add1");
                _dt.Columns.Add("gur2_add2");
                _dt.Columns.Add("cusCode");
                _dt.Columns.Add("itemDesc");

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();


                //01.GET ACCOUNTS
                List<HpAccount> _accList = _salesDAL.GetAccountsBySchmeAndDate(_com, _pc, _fromDate, _toDate, _scheme);

                if (_accList != null)
                {


                    //02.GET CLOSING BALANCE FOR EACH ACCOUNT(FROM DATE)
                    foreach (HpAccount _acc in _accList)
                    {

                        Decimal _balance = _salesDAL.Get_AccountBalance(DateTime.Now.Date, _acc.Hpa_acc_no);

                        if (_margin > 0)
                        {
                            if (_balance >= _margin)
                            {
                                DataTable _customer = _salesDAL.GetAccountGruntors(_acc.Hpa_acc_no, 1);
                                DataTable _guaran = _salesDAL.GetAccountGruntors(_acc.Hpa_acc_no, 2);
                                DataTable _itm = _salesDAL.GetSalesDet(_acc.Hpa_invc_no);
                                string _customerN = "";
                                string _cusAdd1 = "";
                                string _cusAdd2 = "";
                                string _guarantor = "";
                                string _gurAdd1 = "";
                                string _gurAdd2 = "";
                                string _guarantor2 = "";
                                string _gur2Add1 = "";
                                string _gur2Add2 = "";
                                string _item = "";
                                string _cusCode = "";
                                string _desc = "";

                                if (_customer != null && _customer.Rows.Count > 0)
                                {
                                    _customerN = _customer.Rows[0]["MBE_NAME"].ToString();
                                    _cusAdd1 = _customer.Rows[0]["mbe_add1"].ToString();
                                    _cusAdd2 = _customer.Rows[0]["mbe_add2"].ToString() + " , " + _customer.Rows[0]["mbe_town_cd"].ToString();
                                    _cusCode = _customer.Rows[0]["HTC_CUST_CD"].ToString();

                                }
                                if (_guaran != null && _guaran.Rows.Count > 0)
                                {
                                    if (_guaran.Rows.Count >= 2)
                                    {

                                        _guarantor = _guaran.Rows[0]["MBE_NAME"].ToString();
                                        _gurAdd1 = _guaran.Rows[0]["HTC_ADR_01"].ToString();
                                        _gurAdd2 = _guaran.Rows[0]["HTC_ADR_02"].ToString() + " , " + _guaran.Rows[0]["HTC_ADR_03"].ToString();


                                        _guarantor2 = _guaran.Rows[1]["MBE_NAME"].ToString();
                                        _gur2Add1 = _guaran.Rows[1]["HTC_ADR_01"].ToString();
                                        _gur2Add2 = _guaran.Rows[1]["HTC_ADR_02"].ToString() + " , " + _guaran.Rows[0]["HTC_ADR_03"].ToString();
                                    }
                                    else if (_guaran.Rows.Count >= 1)
                                    {
                                        _guarantor = _guaran.Rows[0]["MBE_NAME"].ToString();
                                        _gurAdd1 = _guaran.Rows[0]["HTC_ADR_01"].ToString();
                                        _gurAdd2 = _guaran.Rows[0]["HTC_ADR_02"].ToString() + " , " + _guaran.Rows[0]["HTC_ADR_03"].ToString();
                                    }

                                }
                                if (_itm != null && _itm.Rows.Count > 0)
                                {
                                    foreach (DataRow _drr in _itm.Rows)
                                    {
                                        _item = _item + _drr["SAD_ITM_CD"].ToString() + ",";
                                        MasterItem _titm = _inventoryDAL.GetItem(_com, _drr["SAD_ITM_CD"].ToString());
                                        _desc = _desc + _titm.Mi_shortdesc + ",";
                                    }
                                    _item = _item.Substring(0, _item.Length - 1);
                                    _desc = _desc.Substring(0, _desc.Length - 1);
                                }

                                DataRow _dr = _dt.NewRow();
                                _dr[0] = _acc.Hpa_acc_no;
                                _dr[1] = _acc.Hpa_invc_no;
                                _dr[2] = _acc.Hpa_pc;
                                _dr[3] = _acc.Hpa_cre_dt;
                                _dr[4] = _acc.Hpa_sch_tp;
                                _dr[5] = _acc.Hpa_sch_cd;
                                _dr[6] = _acc.Hpa_cash_val;
                                _dr[7] = _balance;
                                _dr[8] = "";
                                _dr[9] = _item;
                                _dr[10] = _acc.Hpa_hp_val;
                                _dr[11] = _acc.Hpa_init_ins + _acc.Hpa_inst_ins;
                                _dr[12] = _customerN;
                                _dr[13] = _cusAdd1;
                                _dr[14] = _cusAdd2;
                                _dr[15] = _guarantor;
                                _dr[16] = _gurAdd1;
                                _dr[17] = _gurAdd2;
                                _dr[18] = _guarantor2;
                                _dr[19] = _gur2Add1;
                                _dr[20] = _gur2Add2;
                                _dr[21] = _cusCode;
                                _dr[22] = _desc;


                                _dt.Rows.Add(_dr);

                            }
                        }
                        else
                        {
                            DataTable _customer = _salesDAL.GetAccountGruntors(_acc.Hpa_acc_no, 1, _com);
                            DataTable _guaran = _salesDAL.GetAccountGruntors(_acc.Hpa_acc_no, 2);
                            DataTable _itm = _salesDAL.GetSalesDet(_acc.Hpa_invc_no);
                            string _customerN = "";
                            string _cusAdd1 = "";
                            string _cusAdd2 = "";
                            string _guarantor = "";
                            string _gurAdd1 = "";
                            string _gurAdd2 = "";
                            string _guarantor2 = "";
                            string _gur2Add1 = "";
                            string _gur2Add2 = "";
                            string _item = "";
                            string _cusCode = "";
                            string _desc = "";

                            if (_customer != null && _customer.Rows.Count > 0)
                            {
                                _customerN = _customer.Rows[0]["MBE_NAME"].ToString();
                                _cusAdd1 = _customer.Rows[0]["mbe_add1"].ToString();
                                _cusAdd2 = _customer.Rows[0]["mbe_add2"].ToString() + " , " + _customer.Rows[0]["mbe_town_cd"].ToString();
                                _cusCode = _customer.Rows[0]["HTC_CUST_CD"].ToString();

                            }
                            if (_guaran != null && _guaran.Rows.Count > 0)
                            {
                                if (_guaran.Rows.Count >= 2)
                                {
                                    _guarantor = _guaran.Rows[0]["MBE_NAME"].ToString();
                                    _gurAdd1 = _guaran.Rows[0]["HTC_ADR_01"].ToString();
                                    _gurAdd2 = _guaran.Rows[0]["HTC_ADR_02"].ToString() + " , " + _guaran.Rows[0]["HTC_ADR_03"].ToString();


                                    _guarantor2 = _guaran.Rows[1]["MBE_NAME"].ToString();
                                    _gur2Add1 = _guaran.Rows[1]["HTC_ADR_01"].ToString();
                                    _gur2Add2 = _guaran.Rows[1]["HTC_ADR_02"].ToString() + " , " + _guaran.Rows[0]["HTC_ADR_03"].ToString();
                                }
                                else if (_guaran.Rows.Count >= 1)
                                {
                                    _guarantor = _guaran.Rows[0]["MBE_NAME"].ToString();
                                    _gurAdd1 = _guaran.Rows[0]["HTC_ADR_01"].ToString();
                                    _gurAdd2 = _guaran.Rows[0]["HTC_ADR_02"].ToString() + " , " + _guaran.Rows[0]["HTC_ADR_03"].ToString();
                                }
                                if (_itm != null && _itm.Rows.Count > 0)
                                {
                                    foreach (DataRow _drr in _itm.Rows)
                                    {
                                        _item = _item + _drr["SAD_ITM_CD"].ToString() + ",";
                                        MasterItem _titm = _inventoryDAL.GetItem(_com, _drr["SAD_ITM_CD"].ToString());
                                        _desc = _desc + _titm.Mi_shortdesc + ",";
                                    }
                                    _item = _item.Substring(0, _item.Length - 1);
                                    _desc = _desc.Substring(0, _desc.Length - 1);
                                }

                            }

                            DataRow _dr = _dt.NewRow();
                            _dr[0] = _acc.Hpa_acc_no;
                            _dr[1] = _acc.Hpa_invc_no;
                            _dr[2] = _acc.Hpa_pc;
                            _dr[3] = _acc.Hpa_cre_dt;
                            _dr[4] = _acc.Hpa_sch_tp;
                            _dr[5] = _acc.Hpa_sch_cd;
                            _dr[6] = _acc.Hpa_cash_val;
                            _dr[7] = _balance;
                            _dr[8] = "";
                            _dr[9] = _item;
                            _dr[10] = _acc.Hpa_hp_val;
                            _dr[11] = _acc.Hpa_init_ins + _acc.Hpa_inst_ins;
                            _dr[12] = _customerN;
                            _dr[13] = _cusAdd1;
                            _dr[14] = _cusAdd2;
                            _dr[15] = _guarantor;
                            _dr[16] = _gurAdd1;
                            _dr[17] = _gurAdd2;
                            _dr[18] = _guarantor2;
                            _dr[19] = _gur2Add1;
                            _dr[20] = _gur2Add2;
                            _dr[21] = _cusCode;
                            _dr[22] = _desc;

                            _dt.Rows.Add(_dr);
                        }
                    }



                }
                _salesDAL.TransactionCommit();
                _error = "";
                return _dt;
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _error = ex.Message;
                return null;
            }
        }

        public int UpdateAcknoledgementPrintCount(List<string> _accList, out string _error)
        {
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                foreach (string _acc in _accList)
                {
                    _salesDAL.UpdateAccountAckPrintCount(_acc);
                }

                _salesDAL.TransactionCommit();
                _error = "";
                return 1;
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _error = ex.Message;
                return -1;
            }
        }


        public DataTable CheckBlackListCustomer(string _customer)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.CheckBlackListCustomer(_customer);
        }

        public int GetAgePriceActivation(List<Tuple<string, decimal>> _itemList, string _oriPb, string _oriPlevel, string _clonePb, string _clonePlevel, string _user, string _com, string _circular, out string _error, out DataTable _priceList)
        {
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                List<PriceDetailRef> _newPriceList = new List<PriceDetailRef>();
                foreach (Tuple<string, decimal> _tup in _itemList)
                {
                    decimal _originalPrice = 0;
                    decimal _newPrice = 0;
                    //get original pb plevel price
                    List<PriceDetailRef> _list = new List<PriceDetailRef>();
                    List<PriceDetailRef> _tpriceList = _salesDAL.GetPriceDetail(_oriPb, _oriPlevel, _tup.Item1, 1, DateTime.Now, null);

                    var _lst = _tpriceList.Where(x => x.Sapd_price_type == 0).ToList();
                    if (_lst != null)
                        if (_lst.Count > 0)
                            _list.Add(_lst[0]);
                    _list.OrderByDescending(x => x.Sapd_seq_no);
                    if (_list.Count <= 0)
                    {
                        _error = "No price for item - " + _tup.Item1;
                        _priceList = null;
                        continue;
                        //return -1;
                    }
                    _originalPrice = _list[0].Sapd_itm_price;
                    //apply discount
                    _newPrice = _originalPrice - (_originalPrice * _tup.Item2 / 100);

                    //save new price
                    PriceDetailRef _priceRef = new PriceDetailRef();
                    _priceRef.Sapd_pb_tp_cd = _clonePb;
                    _priceRef.Sapd_pbk_lvl_cd = _clonePlevel;
                    _priceRef.Sapd_avg_cost = _originalPrice;
                    _priceRef.Sapd_apply_on = _list[0].Sapd_apply_on;
                    _priceRef.Sapd_cancel_dt = DateTime.MaxValue;
                    _priceRef.Sapd_circular_no = _circular;
                    _priceRef.Sapd_cre_by = _user;
                    _priceRef.Sapd_customer_cd = "N/A";
                    _priceRef.Sapd_day_attempt = 0;
                    _priceRef.Sapd_dp_ex_cost = 0;
                    _priceRef.Sapd_erp_ref = _list[0].Sapd_erp_ref;
                    _priceRef.Sapd_from_date = DateTime.Now;
                    _priceRef.Sapd_to_date = DateTime.MaxValue;
                    _priceRef.Sapd_update_dt = DateTime.Now;
                    _priceRef.Sapd_upload_dt = DateTime.Now;
                    _priceRef.Sapd_usr_ip = "";
                    _priceRef.Sapd_warr_remarks = _list[0].Sapd_warr_remarks;
                    _priceRef.Sapd_with_tax = _list[0].Sapd_with_tax;
                    _priceRef.Sapd_no_of_times = _list[0].Sapd_no_of_times;
                    _priceRef.Sapd_no_of_use_times = 0;
                    _priceRef.Sapd_itm_cd = _tup.Item1;
                    _priceRef.Sapd_itm_price = _newPrice;

                    _newPriceList.Add(_priceRef);
                }
                _salesDAL.TransactionCommit();
                //convert to datatable
                DataTable _dt = new DataTable();
                _dt.TableName = "Price";
                _dt.Columns.Add("Sapd_pb_tp_cd");
                _dt.Columns.Add("Sapd_pbk_lvl_cd");
                _dt.Columns.Add("Sapd_avg_cost", typeof(System.Decimal));
                _dt.Columns.Add("Sapd_apply_on");
                _dt.Columns.Add("Sapd_cancel_dt");
                _dt.Columns.Add("Sapd_circular_no");
                _dt.Columns.Add("Sapd_cre_by");
                _dt.Columns.Add("Sapd_customer_cd");
                _dt.Columns.Add("Sapd_day_attempt");
                _dt.Columns.Add("Sapd_dp_ex_cost");
                _dt.Columns.Add("Sapd_erp_ref");
                _dt.Columns.Add("Sapd_from_date");
                _dt.Columns.Add("Sapd_to_date");
                _dt.Columns.Add("Sapd_update_dt");
                _dt.Columns.Add("Sapd_upload_dt");
                _dt.Columns.Add("Sapd_usr_ip");
                _dt.Columns.Add("Sapd_warr_remarks");
                _dt.Columns.Add("Sapd_with_tax");
                _dt.Columns.Add("Sapd_no_of_times");
                _dt.Columns.Add("Sapd_no_of_use_times");
                _dt.Columns.Add("Sapd_itm_cd");
                _dt.Columns.Add("Sapd_itm_price", typeof(System.Decimal));

                foreach (PriceDetailRef _ref in _newPriceList)
                {
                    DataRow _dr = _dt.NewRow();
                    _dr[0] = _ref.Sapd_pb_tp_cd;
                    _dr[1] = _ref.Sapd_pbk_lvl_cd;
                    _dr[2] = _ref.Sapd_avg_cost;
                    _dr[3] = _ref.Sapd_apply_on;
                    _dr[4] = _ref.Sapd_cancel_dt;
                    _dr[5] = _ref.Sapd_circular_no;
                    _dr[6] = _ref.Sapd_cre_by;
                    _dr[7] = _ref.Sapd_customer_cd;
                    _dr[8] = _ref.Sapd_day_attempt;
                    _dr[9] = _ref.Sapd_dp_ex_cost;
                    _dr[10] = _ref.Sapd_erp_ref;
                    _dr[11] = _ref.Sapd_from_date;
                    _dr[12] = _ref.Sapd_to_date;
                    _dr[13] = _ref.Sapd_update_dt;
                    _dr[14] = _ref.Sapd_upload_dt;
                    _dr[15] = _ref.Sapd_usr_ip;
                    _dr[16] = _ref.Sapd_warr_remarks;
                    _dr[17] = _ref.Sapd_with_tax;
                    _dr[18] = _ref.Sapd_no_of_times;
                    _dr[19] = _ref.Sapd_no_of_use_times;
                    _dr[20] = _ref.Sapd_itm_cd;
                    _dr[21] = _ref.Sapd_itm_price;
                    _dt.Rows.Add(_dr);
                }


                _priceList = _dt;
                _error = "";
                return 1;
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _error = ex.Message;
                _priceList = null;
                return -1;
            }
        }

        public int SaveAgePriceActivation(List<Tuple<string, decimal>> _itemList, string _oriPb, string _oriPlevel, string _clonePb, string _clonePlevel, string _user, string _com, string _circular, out string _error, DateTime _from, DateTime _to)
        {
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                int _serial = _inventoryDAL.GetSerialID();
                foreach (Tuple<string, decimal> _tup in _itemList)
                {
                    decimal _originalPrice = 0;
                    decimal _newPrice = 0;
                    //get original pb plevel price
                    List<PriceDetailRef> _list = new List<PriceDetailRef>();
                    List<PriceDetailRef> _tpriceList = _salesDAL.GetPriceDetail(_oriPb, _oriPlevel, _tup.Item1, 1, DateTime.Now, null);

                    var _lst = _tpriceList.Where(x => x.Sapd_price_type == 0).ToList();
                    if (_lst != null)
                        if (_lst.Count > 0)
                            _list.Add(_lst[0]);
                    _list.OrderByDescending(x => x.Sapd_seq_no);
                    if (_list.Count <= 0)
                    {
                        _error = "No price for item - " + _tup.Item1;
                        continue;
                        //return -1;
                    }
                    _originalPrice = _list[0].Sapd_itm_price;
                    //apply discount
                    _newPrice = _originalPrice - (_originalPrice * _tup.Item2 / 100);

                    //save new price
                    PriceDetailRef _priceRef = new PriceDetailRef();
                    _priceRef = _list[0];
                    _priceRef.Sapd_pb_tp_cd = _clonePb;
                    _priceRef.Sapd_pbk_lvl_cd = _clonePlevel;
                    _priceRef.Sapd_avg_cost = _originalPrice;
                    _priceRef.Sapd_apply_on = _list[0].Sapd_apply_on;
                    _priceRef.Sapd_cancel_dt = DateTime.MaxValue.Date;
                    _priceRef.Sapd_circular_no = _circular;
                    _priceRef.Sapd_cre_by = _user;
                    _priceRef.Sapd_customer_cd = "N/A";
                    _priceRef.Sapd_day_attempt = 0;
                    _priceRef.Sapd_dp_ex_cost = 0;
                    _priceRef.Sapd_from_date = _from;
                    _priceRef.Sapd_to_date = _to;
                    _priceRef.Sapd_update_dt = DateTime.Now;
                    _priceRef.Sapd_upload_dt = DateTime.Now;
                    _priceRef.Sapd_usr_ip = "";
                    _priceRef.Sapd_warr_remarks = _list[0].Sapd_warr_remarks;
                    _priceRef.Sapd_with_tax = _list[0].Sapd_with_tax;
                    _priceRef.Sapd_no_of_times = _list[0].Sapd_no_of_times;
                    _priceRef.Sapd_no_of_use_times = 0;
                    _priceRef.Sapd_itm_cd = _tup.Item1;
                    _priceRef.Sapd_model = _tup.Item1;
                    _priceRef.Sapd_pb_seq = _serial;
                    _priceRef.Sapd_seq_no = 1;
                    _priceRef.Sapd_itm_price = _newPrice;

                    _salesDAL.SavePriceDetails(_priceRef);
                }


                _salesDAL.TransactionCommit();




                _error = "";
                return 1;
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _error = ex.Message;

                return -1;
            }

        }

        public CashGeneralEntiryDiscountDef GetGeneralDiscountDefinitionBySequence(int _seq)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetGeneralDiscountDefinitionBySequence(_seq);
        }

        public Int32 UpdateAccLogStatus(string _com, string _account, string _status, DateTime _date, Int32 _isCls)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.UpdateAccLogStatus(_com, _account, _status, _date, _isCls);
        }

        public DataTable getSerialpriceDetailsForCirDT(string _itm, string _cir)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getSerialpriceDetailsForCirDT(_itm, _cir);
        }

        public int UpdateHpAccActive(string _com, string _pc, string _acc, DateTime _date, out string _error)
        {
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _salesDAL.Update_hp_accountStatus(_com, _pc, _acc, "A", 3, null, _date.Date);

                _salesDAL.UpdateAccLogStatus(_com, _acc, "A", _date.Date, 0);

                _salesDAL.TransactionCommit();
                _error = "";
                return 1;
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _error = ex.Message;
                return -1;
            }
        }

        public DataTable GetPriceTypeByCir(string _cir)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceTypeByCir(_cir);
        }
        public DataTable GetPromobyCirAndTp(string _cir, Int32 _tp)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPromobyCirAndTp(_cir, _tp);
        }

        public string GetSaleswithWarranty(DateTime _fdate, DateTime _tdate, string _Com, string _cat1, string _cat2, string _cat3, string _item, string _brand, string _model, string _InvoiceDate, string _userid, out string _err)
        {   // Sanjeewa 2015-10-12

            _err = string.Empty;
            string _filePath = string.Empty;

            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            _salesDAL.ConnectionOpen();

            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_Com, _userid);
            if (_securityDAL.Is_Report_DR("SaleswithWarranty") == true) _salesDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    DataTable _dtResults;
                    _dtResults = _salesDAL.GetSaleswithWarranty(_fdate, _tdate, _Com, drow["tpl_pc"].ToString(), _cat1, _cat2, _cat3, _item, _brand, _model, _InvoiceDate, _userid);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _userid, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
            return _filePath;

        }

        public string GetSaleswithWarrantySCM(DateTime _fdate, DateTime _tdate, string _Com, string _cat1, string _cat2, string _cat3, string _item, string _brand, string _model, string _InvoiceDate, string _userid, out string _err)
        {   // Sanjeewa 2015-10-23

            _err = string.Empty;
            string _filePath = string.Empty;

            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            _salesDAL.ConnectionOpen();
            //if (_securityDAL.Is_Report_DR("SaleswithWarranty") == true) _salesDAL.ConnectionOpen_DR();

            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_Com, _userid);
            if (_securityDAL.Is_Report_DR("SaleswithWarranty") == true) _salesDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    DataTable _dtResults;
                    _dtResults = _salesDAL.GetSaleswithWarrantySCM(_fdate, _tdate, _Com, drow["tpl_pc"].ToString(), _cat1, _cat2, _cat3, _item, _brand, _model, _InvoiceDate, _userid);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _userid, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
            return _filePath;

        }

        //public string GetRec_Age_Analysis_New(int _Year, int _Month, int _NoOfMonth, string _Com, string _user, string _order, string _groupintr, out string _error)
        //{   // Prabhath on 08/03/2014
        //    _salesDAL = new SalesDAL();
        //    _inventoryRepDAL = new ReptCommonDAL();
        //    _inventoryRepDAL.ConnectionOpen();
        //    _error = string.Empty;
        //    string _path = string.Empty;

        //    _inventoryRepDAL.DeleteRecAgeAnal(_user, _Com);
        //    DataTable GLOB_DataTable = new DataTable();

        //    DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_Com, _user);
        //    if (tmp_user_pc.Rows.Count > 0)
        //    {
        //        foreach (DataRow drow in tmp_user_pc.Rows)
        //        {
        //            _salesDAL.GetRec_Age_Analysis(_Year, _Month, _NoOfMonth, _Com, drow["tpl_pc"].ToString(), _user);
        //        }
        //    }

        //    GLOB_DataTable = _inventoryRepDAL.GetRec_Age_Analysis_New(_order, _Com, _user, _groupintr);
        //    _path = ExportExcel2007(_Com, _user, GLOB_DataTable, out _error);

        //    return _path;

        //}

        public string GetNoofCompletedAgreements(DateTime _fromdate, DateTime _todate, string _Com, string _user, out string _error)
        {   // Sanjeewa on 18-11-2014
            _salesDAL = new SalesDAL();
            //_inventoryRepDAL = new ReptCommonDAL();
            //_inventoryRepDAL.ConnectionOpen();
            _error = string.Empty;
            string _path = string.Empty;

            //_inventoryRepDAL.DeleteRecAgeAnal(_user, _Com);
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_Com, _user);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    DataTable TEMP_DataTable = new DataTable();
                    _securityDAL = new SecurityDAL();
                    if (_securityDAL.Is_Report_DR("CompletedAgreements") == true) _salesDAL.ConnectionOpen_DR();
                    TEMP_DataTable = _salesDAL.GetNoofCompletedAgreements(_fromdate, _todate, _Com, drow["tpl_pc"].ToString(), _user);
                    GLOB_DataTable.Merge(TEMP_DataTable);
                }
            }

            _path = ExportExcel2007(_Com, _user, GLOB_DataTable, out _error);

            if (GLOB_DataTable.Rows.Count == 0)
            {
                _error = "No Records Found.";
            }

            return _path;

        }

        public DataTable GetInsuReportDet(string _com, string _item, int _term, DateTime _asatdate, string _inscom, string _pol, string _PB, string _level, string _party, string _partycode, string _user, string _PC, out string _error)
        {
            _salesDAL = new SalesDAL();
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            _error = string.Empty;
            string _path = string.Empty;
            //  done by prabath modified by  Nadeeka 18-09-2015

            DataTable GLOB_DataTable = new DataTable();
            GLOB_DataTable.TableName = "glb_insu_def";

            //DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);
            //if (tmp_user_pc.Rows.Count > 0)
            //{
            //    foreach (DataRow drow in tmp_user_pc.Rows)
            //    {
            //        DataTable _t = _salesDAL.GetInsuReportDet(_com, _PC, _item, _term, _asatdate, _inscom, _pol, _PB, _level, _party, _partycode);
            //        GLOB_DataTable.Merge(_t);
            //    }
            //}
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("InsuranceDefinition") == true) _salesDAL.ConnectionOpen_DR();
            GLOB_DataTable = _salesDAL.GetInsuReportDet(_com, _PC, _item, _term, _asatdate, _inscom, _pol, _PB, _level, _party, _partycode);
            return GLOB_DataTable;
        }

        public DataTable GetInsuReportDetCirc(string _com, string _item, int _term, DateTime _asatdate, string _inscom, string _pol, string _PB, string _level, string _party, string _partycode, string _user, string _Circular, string _PC, out string _error)
        {
            _salesDAL = new SalesDAL();
            _inventoryRepDAL = new ReptCommonDAL();
            _inventoryRepDAL.ConnectionOpen();
            _error = string.Empty;
            string _path = string.Empty;
            //  done by sanjeewa modified by  Nadeeka 18-09-2015

            DataTable GLOB_DataTable = new DataTable();
            GLOB_DataTable.TableName = "glb_insu_def";

            //DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);
            //if (tmp_user_pc.Rows.Count > 0)
            //{
            //    foreach (DataRow drow in tmp_user_pc.Rows)
            //    {
            //        DataTable _t = _salesDAL.GetInsuReportDetCirc(_com, _PC, _item, _term, _asatdate, _inscom, _pol, _PB, _level, _party, _partycode, _Circular);
            //        GLOB_DataTable.Merge(_t);
            //    }
            //}
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("InsuranceDefinition") == true) _salesDAL.ConnectionOpen_DR();
            GLOB_DataTable = _salesDAL.GetInsuReportDetCirc(_com, _PC, _item, _term, _asatdate, _inscom, _pol, _PB, _level, _party, _partycode, _Circular);

            return GLOB_DataTable;
        }
        public Int32 SaveClearInvoicePriceEdit(string _com, string _userId, string _invNo, string _sessrionId, DateTime _logDate, out string _error)
        {

            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _salesDAL.SaveClearInvoicePriceEdit(_com, _userId, _invNo, _sessrionId, _logDate);
                _salesDAL.TransactionCommit();
                _error = "";
                return 1;
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _error = ex.Message;
                return -1;
            }

        }

        public DataTable GetInsuEnquiry(string _com, string _pc, string _item, int _term, DateTime _asatdate, string _user, string _tp, string _insucom, string _pol, string _PB, string _Level, string _party, string _partycode, out string _error)
        {
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            _error = string.Empty;
            DataTable GLOB_DataTable = new DataTable();
            GLOB_DataTable = _salesDAL.GetInsuEnquiry(_com, _pc, _item, _term, _asatdate, _tp, _insucom, _pol, _PB, _Level, _party, _partycode);
            MasterCompany _c = _inventoryDAL.GetCompByCode(_com);
            if (_c != null)
                if (string.IsNullOrEmpty(_c.Mc_anal7) || string.IsNullOrEmpty(_c.Mc_anal8))
                {
                    _error = "Default price book/level not setup";
                    return GLOB_DataTable;
                }

            foreach (DataRow r in GLOB_DataTable.Rows)
            {
                decimal _price = 0;
                List<PriceDetailRef> _det = GetPrice(_com, _pc, string.Empty, _c.Mc_anal7, _c.Mc_anal8, string.Empty, _item, 1, _asatdate.Date);
                if (_det != null && _det.Count > 0)
                { var _normal = _det.Where(x => x.Sapd_price_type == 0).ToList(); if (_normal != null && _normal.Count > 0) _price = _normal[0].Sapd_itm_price; }
                else _error = "There is no price defain for the item";
                _connectionopen = true;
                List<MasterItemTax> _tx = GetItemTax(_com, _item, "GOD", "VAT", string.Empty);
                if (_tx != null && _tx.Count > 0)
                    _price = _price * ((100 + _tx[0].Mict_tax_rate) / 100);
                r.SetField("ins_price", _price);
            }
            return GLOB_DataTable;
        }

        public List<CashPromotionDiscountDetail> GetPromotionalDiscountCacnel(DateTime _date, int _time, string _day, string _book, string _level, string _item, string _company, string _profitcenter, int _isPromotion, int _isSuperUser)
        {
            // public DataTable GetPromotionalDiscount(DateTime _date,int _time,string _day,string _book,string _level,string _item,string _company,string _partycd,string _partytp,int _isSerialized,int _isPromotion)
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            List<MasterSalesPriorityHierarchy> _hierarchy = _salesDAL.GetSalesPriorityHierarchy(_company, _profitcenter, "PC_PRIT_HIERARCHY", "PC");
            if (_hierarchy != null && _hierarchy.Count > 0) _hierarchy = _hierarchy.Where(x => x.Mpi_cd == "PC" || x.Mpi_cd == "CHNL").ToList();


            Int32 _isserialized = Convert.ToInt16(_salesDAL.GetPriceLevel(_company, _book, _level).Sapl_is_serialized);
            Int32 _ispromotion = _isPromotion;
            List<CashPromotionDiscountDetail> _List = new List<CashPromotionDiscountDetail>();

            if (_hierarchy != null && _hierarchy.Count > 0)
            {
                foreach (MasterSalesPriorityHierarchy _one in _hierarchy)
                {
                    string _type = _one.Mpi_cd;
                    string _value = _one.Mpi_val;
                    List<CashPromotionDiscountDetail> _List0 = _salesDAL.GetPromotionalDiscountCancel(_date, _time, _day, _book, _level, _item, _company, _value, _type, _isserialized, _isPromotion, _isSuperUser);
                    if (_List0 != null && _List0.Count > 0)
                        _List.AddRange(_List0);


                }
            }

            return _List;

        }
        private decimal TaxCalculation(string _company, string _item, string _status, decimal _qty, PriceBookLevelRef _level, decimal _pbUnitPrice, decimal _discount, bool _isTaxPotion)
        {
            if (_level != null)
                if (_level.Sapl_vat_calc)
                {
                    List<MasterItemTax> _taxs = new List<MasterItemTax>();
                    if (_isTaxPotion == false) _taxs = GetTax(_company, _item, _status); else _taxs = _salesDAL.GetItemTax(_company, _item, _status, string.Empty, string.Empty);
                    var _Tax = from _itm in _taxs
                               select _itm;
                    foreach (MasterItemTax _one in _Tax)
                    {
                        if (_isTaxPotion == false) _pbUnitPrice = _pbUnitPrice * _one.Mict_tax_rate; else _pbUnitPrice = ((_pbUnitPrice - _discount / _qty) * _one.Mict_tax_rate / 100) * _qty;
                    }
                }

            return _pbUnitPrice;
        }
        public int DocumentInvoice(string _dodoc, string _docom, string _user, DateTime _dodate, string _doloc, string _dopc, string _invcom, out string error, out string _invoiceNo)
        {
            int _effect = 0;
            error = string.Empty;
            InvoiceHeader _invoiceHeader = new InvoiceHeader();
            List<InvoiceItem> _invoiceItem = new List<InvoiceItem>();
            List<ReptPickSerials> _reptPickSerials = null;
            InventoryHeader _inventoryHeader = new InventoryHeader();
            _invoiceNo = string.Empty;
            try
            {
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                _inventoryRepDAL = new ReptCommonDAL();
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();
                _inventoryRepDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.BeginTransaction();
                _inventoryRepDAL.BeginTransaction();

                _reptPickSerials = _salesDAL.GetInvItem(_dodoc, _docom, _user, _dodate, _doloc);

                var _invItem = from _itm in _reptPickSerials
                               group _itm by new { _itm.Tus_itm_cd, _itm.Tus_itm_stus } into _items
                               select new { Tus_itm_cd = _items.Key.Tus_itm_cd, Tus_itm_stus = _items.Key.Tus_itm_stus, Tus_qty = _items.Sum(p => p.Tus_qty) };

                DataTable _adminT = _inventoryDAL.Get_location_by_code(_docom, _inventoryHeader.Ith_loc);
                if (_adminT == null || _adminT.Rows.Count <= 0)
                {
                    error = "Admin team not define";
                    _effect = -1;
                    _invoiceNo = string.Empty;
                    return _effect;
                }

                string _adminTeam = _adminT.Rows[0].Field<string>("ml_ope_cd");
                if (string.IsNullOrEmpty(_adminTeam))
                {
                    error = "Admin team not define";
                    _effect = -1;
                    _invoiceNo = string.Empty;
                    return _effect;
                }
                List<InterCompanySalesParameter> _priceParam = _salesDAL.GetInterCompanyParameter(_adminTeam, _docom, string.Empty, _invcom, string.Empty);

                string _otherProfitcenter = string.Empty;

                if (_priceParam != null && _priceParam.Count > 0)
                {
                    _invoiceHeader.Sah_pc = _priceParam[0].Sritc_frm_prof;
                    _invoiceHeader.Sah_cus_cd = _priceParam[0].Sritc_customer;
                    _invoiceHeader.Sah_d_cust_cd = _priceParam[0].Sritc_customer;
                    _otherProfitcenter = _priceParam[0].Sritc_to_prof;
                }
                _invoiceHeader.Sah_com = _docom;
                _invoiceHeader.Sah_cre_by = _user;
                _invoiceHeader.Sah_cre_when = DateTime.Now;
                _invoiceHeader.Sah_currency = "LKR";
                _invoiceHeader.Sah_cus_add1 = "N/A";
                _invoiceHeader.Sah_cus_add2 = "N/A";
                _invoiceHeader.Sah_cus_name = "N/A";
                _invoiceHeader.Sah_d_cust_add1 = "N/A";
                _invoiceHeader.Sah_d_cust_add2 = "N/A";
                _invoiceHeader.Sah_direct = true;
                _invoiceHeader.Sah_dt = Convert.ToDateTime(_dodate.Date);
                _invoiceHeader.Sah_epf_rt = 0;
                _invoiceHeader.Sah_esd_rt = 0;
                _invoiceHeader.Sah_ex_rt = 1;
                _invoiceHeader.Sah_inv_no = "NA";
                _invoiceHeader.Sah_inv_sub_tp = "SA";
                _invoiceHeader.Sah_inv_tp = "INTR";
                _invoiceHeader.Sah_is_acc_upload = false;
                _invoiceHeader.Sah_man_cd = "N/A";
                _invoiceHeader.Sah_man_ref = "N/A";
                _invoiceHeader.Sah_manual = false;
                _invoiceHeader.Sah_mod_by = _user;
                _invoiceHeader.Sah_mod_when = DateTime.Now;
                _invoiceHeader.Sah_pdi_req = 0;
                _invoiceHeader.Sah_ref_doc = "N/A";
                _invoiceHeader.Sah_remarks = "N/A";
                _invoiceHeader.Sah_sales_chn_cd = "N/A";
                _invoiceHeader.Sah_sales_chn_man = "N/A";
                _invoiceHeader.Sah_sales_ex_cd = "N/A";
                _invoiceHeader.Sah_sales_region_cd = "N/A";
                _invoiceHeader.Sah_sales_region_man = "N/A";
                _invoiceHeader.Sah_sales_sbu_cd = "N/A";
                _invoiceHeader.Sah_sales_sbu_man = "N/A";
                _invoiceHeader.Sah_sales_str_cd = "N/A";
                _invoiceHeader.Sah_sales_zone_cd = "N/A";
                _invoiceHeader.Sah_sales_zone_man = "N/A";
                _invoiceHeader.Sah_seq_no = 1;
                _invoiceHeader.Sah_structure_seq = "N/A";
                _invoiceHeader.Sah_stus = "D";
                _invoiceHeader.Sah_town_cd = "N/A";
                _invoiceHeader.Sah_tp = "INV";
                _invoiceHeader.Sah_wht_rt = 0;


                FF.BusinessObjects.PurchaseOrder _PurchaseOrder = new FF.BusinessObjects.PurchaseOrder();
                _PurchaseOrder.Poh_seq_no = _inventoryDAL.Generate_new_seq_num(_user, "PO", 1, _docom);
                _PurchaseOrder.Poh_tp = "L";
                _PurchaseOrder.Poh_sub_tp = "N";
                _PurchaseOrder.Poh_doc_no = "-1";
                _PurchaseOrder.Poh_com = _invcom;
                _PurchaseOrder.Poh_ope = "INV";
                _PurchaseOrder.Poh_profit_cd = _otherProfitcenter;
                _PurchaseOrder.Poh_dt = Convert.ToDateTime(_dodate).Date;
                _PurchaseOrder.Poh_ref = "N/A";
                _PurchaseOrder.Poh_job_no = "N/A";
                _PurchaseOrder.Poh_pay_term = "CREDIT";
                _PurchaseOrder.Poh_supp = string.Empty;
                _PurchaseOrder.Poh_cur_cd = "LKR";
                _PurchaseOrder.Poh_ex_rt = 0;
                _PurchaseOrder.Poh_trans_term = "";
                _PurchaseOrder.Poh_port_of_orig = "";
                _PurchaseOrder.Poh_cre_period = "0";
                _PurchaseOrder.Poh_frm_yer = Convert.ToDateTime(_dodate).Year;
                _PurchaseOrder.Poh_frm_mon = Convert.ToDateTime(_dodate).Month;
                _PurchaseOrder.Poh_to_yer = Convert.ToDateTime(_dodate).Year;
                _PurchaseOrder.Poh_to_mon = Convert.ToDateTime(_dodate).Month;
                _PurchaseOrder.Poh_preferd_eta = Convert.ToDateTime(_dodate).Date;
                _PurchaseOrder.Poh_contain_kit = false;
                _PurchaseOrder.Poh_sent_to_vendor = false;
                _PurchaseOrder.Poh_sent_by = "";
                _PurchaseOrder.Poh_sent_via = "";
                _PurchaseOrder.Poh_sent_add = "";
                _PurchaseOrder.Poh_stus = "F";
                _PurchaseOrder.Poh_remarks = string.Empty;
                _PurchaseOrder.Poh_sub_tot = 0;
                _PurchaseOrder.Poh_tax_tot = 0;
                _PurchaseOrder.Poh_dis_rt = 0;
                _PurchaseOrder.Poh_dis_amt = 0;
                _PurchaseOrder.Poh_oth_tot = 0;
                _PurchaseOrder.Poh_tot = 0;
                _PurchaseOrder.Poh_reprint = false;
                _PurchaseOrder.Poh_tax_chg = false;
                _PurchaseOrder.poh_is_conspo = 0;
                _PurchaseOrder.Poh_cre_by = _user;

                _connectionopen = true;
                Int32 _invoiceLine = 0;
                List<PurchaseOrderDetail> _POItemListSave = new List<PurchaseOrderDetail>();
                List<PurchaseOrderDelivery> _PODelSave = new List<PurchaseOrderDelivery>();

                foreach (var _itm in _invItem)
                {
                    PurchaseOrderDetail _pItm = new PurchaseOrderDetail();
                    PurchaseOrderDelivery _pDel = new PurchaseOrderDelivery();

                    string _iItem = _itm.Tus_itm_cd;
                    string _iStatus = _itm.Tus_itm_stus;
                    decimal _iQty = _itm.Tus_qty;
                    DateTime _iDate = _invoiceHeader.Sah_dt.Date;
                    bool _iIsSerialized = false;

                    string _iPriceBook = "";
                    string _iPriceLevel = "";
                    if (_salesDAL.GetItemTax(_docom, _iItem, _iStatus, string.Empty, string.Empty).Count <= 0) { error = "No tax define for the item " + _iItem + "."; _effect = -1; break; };
                    if (_priceParam.Count <= 0) { error = "No pricing parameters define."; _effect = -1; break; };

                    //Assuming there is no multiple book & level for the inter-company
                    if (_priceParam.Count > 0)
                        foreach (InterCompanySalesParameter _param in _priceParam)
                        {
                            _iPriceBook = _param.Sritc_pb;
                            _iPriceLevel = _param.Sritc_pb_lvl;
                            _invoiceHeader.Sah_cus_cd = _param.Sritc_customer;
                        }
                    List<PriceBookLevelRef> _level = _salesDAL.GetPriceLevelList(_docom, _iPriceBook, _iPriceLevel);

                    List<PriceDetailRef> _priceDetailRef = new List<PriceDetailRef>();
                    List<PriceSerialRef> _priceSerialRef = new List<PriceSerialRef>();
                    PriceBookLevelRef _priceLevel = new PriceBookLevelRef();

                    if (_level.Count <= 0) { error = "No price level define."; _effect = -1; break; };
                    if (_level.Count > 0)
                        foreach (PriceBookLevelRef _lvl in _level)
                        {
                            _priceLevel = _lvl;
                            _iIsSerialized = _lvl.Sapl_is_serialized; break;
                        }
                    //With out customer
                    if (_iIsSerialized == false)
                        _priceDetailRef = _salesDAL.GetPriceDetail(_iPriceBook, _iPriceLevel, _iItem, _iQty, _iDate.Date, string.Empty);
                    else
                        _priceSerialRef = _salesDAL.GetAllPriceSerial(_iPriceBook, _iPriceLevel, _iItem, _iDate.Date, string.Empty);

                    //checked serialized price but it will write as per the requirement.


                    if (_priceDetailRef.Count <= 0) { error = "There is no price define for the item " + _iItem + "."; _effect = -1; break; };

                    _invoiceLine++;
                    if (_priceDetailRef.Count > 0)
                        foreach (PriceDetailRef _price in _priceDetailRef)
                        {
                            decimal _AbsoulteUnitPrice = TaxCalculation(_docom, _iItem, _iStatus, _iQty, _priceLevel, _price.Sapd_itm_price, 0, false);
                            decimal _taxPortion = TaxCalculation(_docom, _iItem, _iStatus, _iQty, _priceLevel, _AbsoulteUnitPrice, 0, true);
                            MasterItem _im = _inventoryDAL.GetItem(_docom, _iItem);

                            InvoiceItem _item = new InvoiceItem();
                            _item.Sad_alt_itm_cd = string.Empty;
                            _item.Sad_alt_itm_desc = string.Empty;
                            _item.Sad_comm_amt = 0;
                            _item.Sad_disc_amt = 0;
                            _item.Sad_disc_rt = 0;
                            _item.Sad_do_qty = _iQty;
                            _item.Sad_fws_ignore_qty = 0;
                            _item.Sad_inv_no = Convert.ToString(_invoiceHeader.Sah_seq_no);
                            _item.Sad_is_promo = false;
                            _item.Sad_itm_cd = _iItem;
                            _item.Sad_itm_line = _invoiceLine;
                            _item.Sad_itm_seq = _price.Sapd_seq_no;
                            _item.Sad_itm_stus = _iStatus;
                            _item.Sad_itm_tax_amt = _taxPortion;
                            _item.Sad_itm_tp = _im.Mi_itm_tp;
                            _item.Sad_pb_lvl = _iPriceLevel;
                            _item.Sad_pb_price = _AbsoulteUnitPrice;
                            _item.Sad_pbook = _iPriceBook;
                            _item.Sad_print_stus = false;
                            _item.Sad_promo_cd = string.Empty;
                            _item.Sad_qty = _iQty;
                            _item.Sad_seq = _price.Sapd_pb_seq;
                            _item.Sad_seq_no = _invoiceHeader.Sah_seq_no;
                            _item.Sad_srn_qty = 0;
                            _item.Sad_tot_amt = _AbsoulteUnitPrice * _iQty + _taxPortion;
                            _item.Sad_unit_amt = _AbsoulteUnitPrice * _iQty;
                            _item.Sad_unit_rt = _AbsoulteUnitPrice;
                            _item.Sad_uom = _im.Mi_itm_uom;
                            _item.Sad_warr_based = false;
                            _item.Sad_warr_period = 0;
                            _item.Sad_warr_remarks = string.Empty;
                            _invoiceItem.Add(_item);

                            _pItm.Pod_act_unit_price = _AbsoulteUnitPrice;
                            _pItm.Pod_dis_amt = 0;
                            _pItm.Pod_dis_rt = 0;
                            _pItm.Pod_grn_bal = _iQty;
                            _pItm.Pod_item_desc = _im.Mi_longdesc;
                            _pItm.Pod_itm_cd = _iItem;
                            _pItm.Pod_itm_stus = _iStatus;
                            _pItm.Pod_itm_tp = _im.Mi_itm_tp;
                            _pItm.Pod_line_amt = _AbsoulteUnitPrice * _iQty;
                            _pItm.Pod_line_no = _invoiceLine;
                            _pItm.Pod_line_tax = _taxPortion;
                            _pItm.Pod_line_val = _AbsoulteUnitPrice * _iQty + _taxPortion;
                            _pItm.Pod_nbt = 0;
                            _pItm.Pod_nbt_before = 0;
                            _pItm.Pod_pi_bal = 0;
                            _pItm.Pod_qty = _iQty;
                            _pItm.Pod_ref_no = string.Empty;
                            _pItm.Pod_seq_no = _PurchaseOrder.Poh_seq_no;
                            _pItm.Pod_si_bal = 0;
                            _pItm.Pod_tot_tax_before = 0;
                            _pItm.Pod_unit_price = _AbsoulteUnitPrice;
                            _pItm.Pod_uom = _im.Mi_itm_uom;
                            _pItm.Pod_vat = _taxPortion;
                            _pItm.Pod_vat_before = 0;
                            _POItemListSave.Add(_pItm);

                            _pDel.Actual_qty = _iQty;
                            _pDel.Podi_bal_qty = _iQty;
                            _pDel.Podi_del_line_no = _invoiceLine;
                            _pDel.Podi_itm_cd = _iItem;
                            _pDel.Podi_itm_stus = _iStatus;
                            _pDel.Podi_line_no = _invoiceLine;
                            _pDel.Podi_loca = string.Empty;
                            _pDel.Podi_qty = _iQty;
                            _pDel.Podi_remarks = string.Empty;
                            _pDel.Podi_seq_no = _PurchaseOrder.Poh_seq_no;
                            _PODelSave.Add(_pDel);

                            break;
                        }
                }


                MasterAutoNumber masterAuto = new MasterAutoNumber();
                masterAuto.Aut_cate_cd = _invcom;
                masterAuto.Aut_cate_tp = "COM";
                masterAuto.Aut_direction = null;
                masterAuto.Aut_modify_dt = null;
                masterAuto.Aut_moduleid = "PUR";
                masterAuto.Aut_number = 5;//what is Aut_number
                masterAuto.Aut_start_char = "PUR";
                masterAuto.Aut_year = null;

                _inventoryDAL.SaveNewPO(_PurchaseOrder);
                foreach (PurchaseOrderDetail _POItems in _POItemListSave) _inventoryDAL.SaveNewPOItem(_POItems);

                Int32 _autoNo = _inventoryDAL.GetAutoNumber(masterAuto.Aut_moduleid, masterAuto.Aut_direction, masterAuto.Aut_start_char, masterAuto.Aut_cate_tp, masterAuto.Aut_cate_cd, masterAuto.Aut_modify_dt, masterAuto.Aut_year).Aut_number;
                string _documentNo = masterAuto.Aut_cate_cd + "-" + masterAuto.Aut_start_char + string.Format("{0:000000}", _autoNo);
                _inventoryDAL.UpdateAutoNumber(masterAuto);
                _inventoryDAL.UpdatePODocNo(_PurchaseOrder.Poh_seq_no, _documentNo);
                string docno = _documentNo;


                List<ReptPickSerials> _reptPickSerialList = _reptPickSerials;
                List<ReptPickSerialsSub> _reptPickSerialSubList = new List<ReptPickSerialsSub>();

                if (_effect != -1)
                {
                    MasterAutoNumber _invoiceAuto = new MasterAutoNumber();
                    _invoiceAuto.Aut_cate_cd = _invoiceHeader.Sah_pc;
                    _invoiceAuto.Aut_cate_tp = "PRO";
                    _invoiceAuto.Aut_direction = 1;
                    _invoiceAuto.Aut_modify_dt = null;
                    _invoiceAuto.Aut_moduleid = "CRED";
                    _invoiceAuto.Aut_start_char = _invoiceHeader.Sah_pc + "-" + "CR" + "-";
                    _invoiceAuto.Aut_modify_dt = null;
                    _invoiceAuto.Aut_year = Convert.ToDateTime(_dodate.Date).Year;

                    _invoiceNo = string.Empty;
                    string _deliveryOrder = string.Empty;
                    string _receiptNo = string.Empty;
                    //CommonSaveInvoiceWithDeliveryOrderDUP(_invoiceHeader, _invoiceItem, null, new RecieptHeader(), new List<RecieptItem>(), _inventoryHeader, _reptPickSerialList, _reptPickSerialSubList, _invoiceAuto, null, null, false, out _invoiceNo, out _receiptNo, out _deliveryOrder,  false, false, out error, false);

                    List<ReptPickSerials> _remakeReptSerialList = new List<ReptPickSerials>();
                    string _error = string.Empty;

                    string InvoiceNo = string.Empty;
                    string RecieptNo = string.Empty;
                    try
                    {
                        _invoiceLine = 1;
                        DataTable _tbl = _salesDAL.GetEmployee(_invoiceHeader.Sah_com, _invoiceHeader.Sah_sales_ex_cd);
                        string _executiveType = string.Empty;
                        foreach (DataRow _r in _tbl.Rows)
                        {
                            _executiveType = Convert.ToString(_r["esep_cat_cd"]);
                        }
                        List<SaleCommission> _saveCommission = new List<SaleCommission>();

                        Int32 InvoiceSeqNo = _inventoryDAL.GetSerialID();
                        Int32 RecieptSeqNo = -1;

                        //-------------------------------------------------------------------------- Invoice------------------------------------------------------------------------ 

                        _invoiceHeader.Sah_seq_no = InvoiceSeqNo;
                        _invoiceHeader.Sah_inv_no = Convert.ToString(InvoiceSeqNo);

                        #region Calculation for total of the payment to infiltrate invoice header

                        decimal _totalValue = _invoiceItem.Sum(x => x.Sad_tot_amt);
                        decimal _totalReceiptAmt = 0;


                        _invoiceHeader.Sah_anal_7 = _totalValue;// -_totalReceiptAmt; //Total Invoice Amount - Total Receipt AmountBY DARSHANA 3/12/2012
                        _invoiceHeader.Sah_anal_8 = _totalReceiptAmt;//Receipt Amount

                        //kapila 11/8/2015
                        //if (_invoiceHeader.Sah_inv_tp == "CRED")
                        //    _invoiceHeader.Sah_anal_8 = 0;


                        DataTable _tblESDEPFWHF = new DataTable();
                        _tblESDEPFWHF = _salesDAL.Get_ESD_EPF_WHT(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_dt);
                        Decimal ESD_rt = 0; Decimal EPF_rt = 0; Decimal WHT_rt = 0;
                        if (_tblESDEPFWHF.Rows.Count > 0) { ESD_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_ESD"]); EPF_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_EPF"]); WHT_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_WHT"]); }
                        _invoiceHeader.Sah_esd_rt = ESD_rt;
                        _invoiceHeader.Sah_epf_rt = EPF_rt;
                        _invoiceHeader.Sah_wht_rt = WHT_rt;

                        #endregion
                        //Save Invoice Header
                        #region Save Invoice Header
                        _salesDAL.SaveSalesHeader(_invoiceHeader);
                        #endregion

                        //Save Invoice Items
                        foreach (InvoiceItem _itm in _invoiceItem)
                        {
                            MasterItem _item = _inventoryDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);

                            _itm.Sad_seq_no = InvoiceSeqNo;
                            _invoiceLine = _itm.Sad_itm_line;
                            _itm.Sad_inv_no = Convert.ToString(InvoiceSeqNo);
                            _itm.Sad_unit_amt = _itm.Sad_unit_rt * _itm.Sad_qty;
                            _itm.Sad_itm_tp = _item.Mi_itm_tp;
                            _itm.Sad_uom = _item.Mi_itm_uom;
                            _itm.Sad_trd_svc_chrg = Math.Round((_itm.Sad_tot_amt - _itm.Sad_itm_tax_amt) / _itm.Sad_qty, 2);
                            if (_invoiceHeader.Sah_tax_exempted)
                            {
                                _itm.Sad_tot_amt = _itm.Sad_tot_amt - _itm.Sad_itm_tax_amt;
                                _itm.Sad_itm_tax_amt = 0;
                            }
                            _salesDAL.SaveSalesItem(_itm);
                            _salesDAL.UpdatePrice(_itm.Sad_itm_cd, _itm.Sad_pbook, _itm.Sad_pb_lvl, _invoiceHeader.Sah_cus_cd, _itm.Sad_promo_cd, _itm.Sad_seq, _itm.Sad_itm_seq);

                            List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                            _itmTax = _salesDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                            foreach (MasterItemTax _one in _itmTax)
                            {
                                InvoiceItemTax _tax = new InvoiceItemTax();
                                _tax.Satx_inv_no = _itm.Sad_inv_no;
                                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                _tax.Satx_itm_line = _itm.Sad_itm_line;
                                _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                _tax.Satx_job_line = 0;
                                _tax.Satx_job_no = "";
                                _tax.Satx_seq_no = InvoiceSeqNo;
                                _salesDAL.SaveSalesItemTax(_tax);
                            }

                        }

                        #region Invoice Auto Number/Delivery Order

                    nxt1:
                        _invoiceAuto.Aut_year = null;
                        MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
                        InvoiceNo = _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);


                        _invoiceAuto.Aut_year = null;
                        _invoiceAuto.Aut_modify_dt = null;
                        if (_salesDAL.CheckSalesNo("sp_getinvno", "p_inv_no", InvoiceNo) == 1)
                        {
                            _salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
                            goto nxt1;
                        }

                        _salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
                        _salesDAL.UpdateInvoiceWithTaxCommission(InvoiceNo, string.Empty, InvoiceSeqNo, RecieptSeqNo);

                        #endregion
                    }
                    catch (Exception ex)
                    {
                        _error += "Generated error " + ex.Message;
                        if (_error.Contains("UK_SAHINVNO") || _error.Contains("ORA-00001"))
                        {
                            _error = "Please try again in a few seconds.";
                        }
                    }
                }


                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();
                _effect = 1;
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _effect = -1;
                error = ex.Message;
            }

            return _effect;

        }

        public DataTable GetItemTp(string _tpCd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetItemTp(_tpCd);
        }

        public DataTable GetDefInvPrefix(string _com, string _tp)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDefInvPrefix(_com, _tp);
        }



        public List<PayTypeRestrict> GetPaymodeRestriction(string _com, string _pc, DateTime _date)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPaymodeRestriction(_com, _pc, _date);
        }

        public Int16 SaveWarrExReceiptWithCommission(RecieptHeader _NewExReceipt, List<RecieptItem> _NewExReceiptDetails, List<ReceiptWaraExtend> _NewExRecWaraDetails, MasterAutoNumber _masterAutoNumber, out string DocNo)
        {
            Int16 _effects = 0;
            try
            {
                _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                //calculate commission

                /*
                Dictionary<ItemHierarchyElement, string> _itemHierarchyElement = new Dictionary<ItemHierarchyElement, string>();
                _itemHierarchyElement.Add(ItemHierarchyElement.DISCOUNT, 0);
                _itemHierarchyElement.Add(ItemHierarchyElement.BRAND, _item.Mi_brand);
                _itemHierarchyElement.Add(ItemHierarchyElement.ITEM, _item.Mi_cd);
                _itemHierarchyElement.Add(ItemHierarchyElement.MAIN_CATEGORY, _item.Mi_cate_1);
                _itemHierarchyElement.Add(ItemHierarchyElement.PRICE_BOOK, _ListInvDet[x].Sad_pbook);
                _itemHierarchyElement.Add(ItemHierarchyElement.PRICE_LEVEL, _ListInvDet[x].Sad_pb_lvl);
                _itemHierarchyElement.Add(ItemHierarchyElement.PROMOTION, _ListInvDet[x].Sad_promo_cd);
                _itemHierarchyElement.Add(ItemHierarchyElement.SERIAL, string.Empty);
                _itemHierarchyElement.Add(ItemHierarchyElement.SUB_CATEGORY, _item.Mi_cate_2);

                List<CashCommissionDetailRef> _listCommCE = null;     //kapila 20/12/2013


                List<CashCommissionDetailRef> _CashCommissionDetail = GetCommissionStructure(_ListInv[i].Sah_com, _ListInv[i].Sah_pc, _ListInv[i].Sah_inv_tp, _ListInv[i].Sah_dt, _ListInvDet[x].Sad_pbook, _ListInvDet[x].Sad_pb_lvl, _ListInv[i].Sah_sales_ex_cd, _executiveType, _itemHierarchyElement, "PC_PRIT_HIERARCHY", "PC", out _listCommCE, _isPromo);



                 */
                //end calculate commission


                _salesDAL.SaveReceiptHeader(_NewExReceipt);

                if (_NewExReceiptDetails != null)
                {
                    foreach (RecieptItem _ReceiptDetails in _NewExReceiptDetails)
                    {
                        _salesDAL.SaveReceiptItem(_ReceiptDetails);
                    }
                }

                if (_NewExRecWaraDetails != null)
                {
                    foreach (ReceiptWaraExtend _ReceiptWaraDetails in _NewExRecWaraDetails)
                    {
                        _salesDAL.SaveReceiptWarrantyExtend(_ReceiptWaraDetails);
                        _salesDAL.UpdateExtendWarranty(_ReceiptWaraDetails.Srw_do_no, _ReceiptWaraDetails.Srw_itm, _ReceiptWaraDetails.Srw_ser_id, _ReceiptWaraDetails.Srw_new_period, _ReceiptWaraDetails.Srw_cre_by, _ReceiptWaraDetails.Srw_warra);
                    }
                }

                Int32 _autoNo = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                string _documentNo = _masterAutoNumber.Aut_cate_cd + "-" + _masterAutoNumber.Aut_start_char + string.Format("{0:0000}", _autoNo);

                _salesDAL.UpdateReceiptWaraEx(_documentNo, _NewExReceipt.Sar_seq_no);
                _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);

                DocNo = _documentNo;

                _inventoryDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                _effects = 1;
                //_tr.Complete();
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                DocNo = "";
                return -1;
            }

            return _effects;
        }

        public DataTable GetPriceForItem(string _book, string _level, string _item, DateTime _date, string _promo, string _circular)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceForItem(_book, _level, _item, _date, _promo, _circular);
        }

        public DataTable GetInsuCriteria(string _com, string _search, string _item, string _brand, string _model, string _main, string _sub, string _serial, string _circular, string _promotion)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInsuCriteria(_com, _search, _item, _brand, _model, _main, _sub, _serial, _circular, _promotion);
        }

        public DataTable GetInsuCriteriaAdditional(string _com, string _search, string _item, string _brand, string _model, string _main, string _sub, string _serial, string _circular, string _promotion, Int32 _cat)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInsuCriteriaAdditional(_com, _search, _item, _brand, _model, _main, _sub, _serial, _circular, _promotion, _cat);
        }

        public Int32 UpdateVouSettlement(string _company, string _profitcenter, string _book, string _page, string _prefix, string _item, string _user, string _ref, decimal _amount, DateTime _setDate)
        {   // kapila
            _fmsInventoryDal = new FMS_InventoryDAL();
            return _fmsInventoryDal.UpdateVouSettlement(_company, _profitcenter, _book, _page, _prefix, _item, _user, _ref, _amount, _setDate);
        }

        public int SaveAppPromoPcDataTable(DataTable _appPromoPc, out string _error)
        {
            Int16 _effects = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                foreach (DataRow _dr in _appPromoPc.Rows)
                {
                    PriceProfitCenterPromotion _pro = new PriceProfitCenterPromotion();
                    _pro.Srpr_act = Convert.ToInt32(_dr["Srpr_act"]);
                    _pro.Srpr_com = _dr["Srpr_com"].ToString();
                    _pro.Srpr_cre_by = _dr["Srpr_cre_by"].ToString();
                    _pro.Srpr_mod_by = _dr["Srpr_mod_by"].ToString();
                    _pro.Srpr_pbseq = Convert.ToInt32(_dr["Srpr_pbseq"]);
                    _pro.Srpr_pc = _dr["Srpr_pc"].ToString();
                    _pro.Srpr_promo_cd = _dr["Srpr_promo_cd"].ToString();
                    _pro.Srpr_pty_tp = _dr["Srpr_pty_tp"].ToString();

                    _salesDAL.SaveAppPromoPc(_pro);
                }

                _salesDAL.TransactionCommit();
                _effects = 1;
                _error = "";
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _effects = -1;
                _error = ex.Message;
            }


            return _effects;
        }

        public Int16 SavePriceDetailsSaveAs(List<PriceDetailRef> _priceDet, List<PriceCombinedItemRef> _priceDetCom, MasterAutoNumber _priceAuto, List<PriceProfitCenterPromotion> _appPCList, List<PriceSerialRef> _serialPrice, PriceDetailRestriction _restriction, out string _err, string session, string user)
        {
            Int16 _effects = 0;
            Int32 _seqNo = 0;
            Int32 _tmppbSeq = 0;
            string _documentNo = string.Empty;
            try
            {
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.BeginTransaction();
                if (_priceDet != null && _priceDet.Count > 0)
                {
                    foreach (PriceDetailRef _rec in _priceDet)
                    {
                        LogPriceDef _log = new LogPriceDef();
                        _log.Log_dt = _rec.Sapd_from_date;
                        _log.Log_rmk = "Save as";
                        _log.Log_session = session;
                        _log.Log_usr = user;
                        _log.Promo_cd = _rec.Sapd_promo_cd;
                        _log.Pb = _rec.Sapd_pb_tp_cd;
                        _log.To_dt = _rec.Sapd_to_date;
                        _log.Cir_no = _rec.Sapd_circular_no;
                        _salesDAL.SavePriceingLog(_log);
                    }

                    foreach (PriceDetailRef _tmpList in _priceDet)
                    {
                        //update cancel
                        _salesDAL.CancelPromotion(_tmpList.Sapd_seq_no, _tmpList.Sapd_pb_seq, _tmpList.Sapd_promo_cd);

                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_priceAuto.Aut_moduleid, _priceAuto.Aut_direction, _priceAuto.Aut_start_char, _priceAuto.Aut_cate_tp, _priceAuto.Aut_cate_cd, _priceAuto.Aut_modify_dt, _priceAuto.Aut_year).Aut_number;
                        _documentNo = _priceAuto.Aut_cate_cd + _priceAuto.Aut_start_char + string.Format("{0:0000}", _autoNo);
                        _seqNo = _inventoryDAL.GetSerialID();
                        _tmppbSeq = _tmpList.Sapd_pb_seq;
                        _tmpList.Sapd_pb_seq = _seqNo;
                        _tmpList.Sapd_promo_cd = _documentNo;
                        _salesDAL.SavePriceDetails(_tmpList);

                        //save restriction
                        if (_restriction != null)
                        {
                            _restriction.Spr_promo = _documentNo;
                            _salesDAL.SavePriceDetailRestriction(_restriction);
                        }

                        if (_priceDetCom != null)
                        {
                            foreach (PriceCombinedItemRef _tmpcomList in _priceDetCom)
                            {
                                if (_tmpcomList.Sapc_pb_seq == _tmppbSeq)
                                {
                                    _tmpcomList.Sapc_pb_seq = _seqNo;
                                    _salesDAL.SavePriceDetailsCom(_tmpcomList);
                                }
                            }
                        }


                        if (_appPCList != null)
                        {
                            foreach (PriceProfitCenterPromotion _tmpAppList in _appPCList)
                            {
                                _tmpAppList.Srpr_pbseq = _seqNo;
                                _tmpAppList.Srpr_promo_cd = _documentNo;
                                _salesDAL.SaveAppPromoPc(_tmpAppList);
                            }
                        }


                        _inventoryDAL.UpdateAutoNumber(_priceAuto);
                    }
                }
                else if (_serialPrice != null && _serialPrice.Count > 0)
                {
                    foreach (PriceSerialRef _tmpSerial in _serialPrice)
                    {
                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_priceAuto.Aut_moduleid, _priceAuto.Aut_direction, _priceAuto.Aut_start_char, _priceAuto.Aut_cate_tp, _priceAuto.Aut_cate_cd, _priceAuto.Aut_modify_dt, _priceAuto.Aut_year).Aut_number;
                        _documentNo = _priceAuto.Aut_cate_cd + _priceAuto.Aut_start_char + string.Format("{0:0000}", _autoNo);
                        _seqNo = _inventoryDAL.GetSerialID();
                        _tmppbSeq = _tmpSerial.Sars_pb_seq;
                        _tmpSerial.Sars_pb_seq = _seqNo;
                        _tmpSerial.Sars_promo_cd = _documentNo;
                        _salesDAL.Save_Serial_Price(_tmpSerial);

                        //save restriction
                        if (_restriction != null)
                        {
                            _restriction.Spr_promo = _documentNo;
                            _salesDAL.SavePriceDetailRestriction(_restriction);
                        }

                        if (_priceDetCom != null)
                        {
                            foreach (PriceCombinedItemRef _tmpcomList in _priceDetCom)
                            {
                                if (_tmpcomList.Sapc_pb_seq == _tmppbSeq)
                                {
                                    _tmpcomList.Sapc_pb_seq = _seqNo;
                                    _salesDAL.SavePriceDetailsCom(_tmpcomList);
                                }
                            }
                        }


                        if (_appPCList != null)
                        {
                            foreach (PriceProfitCenterPromotion _tmpAppList in _appPCList)
                            {
                                _tmpAppList.Srpr_pbseq = _seqNo;
                                _tmpAppList.Srpr_promo_cd = _documentNo;
                                _salesDAL.SaveAppPromoPc(_tmpAppList);
                            }
                        }


                        _inventoryDAL.UpdateAutoNumber(_priceAuto);
                    }
                }

                //save restriction
                //if (_restriction != null)
                //{
                //    _restriction.Spr_promo = _documentNo;
                //    _salesDAL.SavePriceDetailRestriction(_restriction);
                //}

                _inventoryDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                _effects = 1;
                _err = "";
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _effects = -1;
                _err = ex.Message;
            }
            return _effects;
        }

        //darshana on 01-04-2014
        public MasterVehicalInsuranceDefinitionNew GetVehInsAmtNewMethod(string _com, string _ptyTp, string _ptyCd, string _insCom, string _insPol, string _salesTp, string _itm, Int32 _tearm, string _pBook, string _pLvl, DateTime _date, decimal _frmItmVal, decimal _toItmVal, string _prmoCd, string _ser)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehInsAmtNewMethod(_com, _ptyTp, _ptyCd, _insCom, _insPol, _salesTp, _itm, _tearm, _pBook, _pLvl, _date, _frmItmVal, _toItmVal, _prmoCd, _ser);
        }
        //darshana on 01-04-2014
        public InvoiceItem GetInvDetByLine(string _invNo, string _itm, Int32 _line)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvDetByLine(_invNo, _itm, _line);
        }
        public QoutationDetails GetQuotDetByItem(string _qno, string _itm)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetQuotDetByItem(_qno, _itm);
        }
        public DataTable CheckAccountClose(string _prifix, string _receiptno)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.CheckAccountClose(_prifix, _receiptno);
        }
        //darshana on 25-04-2014
        public MasterBusinessEntity GetCustomerAllProfileByCom(string CustCD, string nic, string DL, string PPNo, string brNo, string com, string ent_type)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            MasterBusinessEntity ent = _salesDAL.GetAllCustomerProfileByCom(CustCD, nic, DL, PPNo, brNo, com, ent_type);
            _salesDAL.ConnectionClose();
            return ent;
        }
        //darshana on 23-05-2014
        public bool IsAdvanAmtExceed(string _company, string _profitcenter, string _recNo, decimal _usedAmt)
        {
            _salesDAL = new SalesDAL();
            DataTable _out = _salesDAL.IsAdvanAmtExceed(_company, _profitcenter, _recNo, _usedAmt);
            if (_out != null && _out.Rows.Count > 0)
            {
                bool _result = Convert.ToBoolean(_out.Rows[0]["sp_isadvanamtexceed"]);
                return _result;
            }
            else return false;
        }
        //darshana on 26-05-2014
        public List<HpSchemeDetails> GetSchForActivation(string _tp, string _cd, Int16 _act)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchForActivation(_tp, _cd, _act);
        }

        //darshan on 26-05-2014
        public Int16 SchemeActivation(List<HpSchemeDetails> _actDet, out string _err)
        {
            Int16 _effects = 0;

            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();

                foreach (HpSchemeDetails _n in _actDet)
                {
                    _salesDAL.UpdateSchemeActStatus(_n.Hsd_cd, _n.Hsd_cre_by, _n.Hsd_act);
                    _salesDAL.SaveSchemeActLog(_n.Hsd_cd, _n.Hsd_cre_by);
                }

                _salesDAL.TransactionCommit();
                _effects = 1;
                _err = "";

            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _effects = -1;
                _err = ex.Message;
            }
            return _effects;
        }

        //written by Shanuka perera 21/05/2014  In Order to get a OutItemDetails for given Invoice No....
        public DataTable GetOutItemDet(string _invNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetOutItemDet(_invNo);
        }

        //written by Shanuka perera 23/05/2014
        public DataTable GetNewOutItems(string _invoiceNo, string _itemcde, double price, string serial, string scm)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetNewOutItems(_invoiceNo, _itemcde, price, serial, scm);
        }

        //Written By Shanuka Perera 19/May/2014
        public DataTable GetAllInvDetails(string _invoiceNo)
        {
            _salesDAL = new SalesDAL();
            DataTable _dHdr = _salesDAL.GetSalesHdr(_invoiceNo);
            DataTable _dDetail = _salesDAL.GetInvoiceDetailByInvoiceTable(_invoiceNo);
            DataTable dtResult = new DataTable();

            dtResult.Columns.Add("SAH_CUS_CD", typeof(string));
            dtResult.Columns.Add("SAH_CUS_NAME", typeof(string));
            dtResult.Columns.Add("SAH_CUS_ADD1", typeof(string));
            dtResult.Columns.Add("SAH_CUS_ADD2", typeof(string));
            dtResult.Columns.Add("SAH_INV_NO", typeof(string));
            dtResult.Columns.Add("SAH_INV_TP", typeof(string));
            dtResult.Columns.Add("SAH_DT", typeof(DateTime));
            dtResult.Columns.Add("SAH_PC", typeof(string));
            dtResult.Columns.Add("SAD_ITM_CD", typeof(string));
            dtResult.Columns.Add("SAD_PBOOK", typeof(string));
            dtResult.Columns.Add("SAD_PB_LVL", typeof(string));
            dtResult.Columns.Add("SAD_QTY", typeof(decimal));
            dtResult.Columns.Add("SAD_TOT_AMT", typeof(decimal));

            var results = from p in _dHdr.AsEnumerable()
                          join q in _dDetail.AsEnumerable() on p.Field<string>("SAH_INV_NO") equals q.Field<string>("SAD_INV_NO")
                          select dtResult.LoadDataRow(new object[]
                          {
                             p.Field<string>("SAH_CUS_CD"),
                             p.Field<string>("SAH_CUS_NAME"),
                             p.Field<string>("SAH_CUS_ADD1"),
                             p.Field<string>("SAH_CUS_ADD2"),
                             p.Field<string>("SAH_INV_NO"),
                             p.Field<string>("SAH_INV_TP"),
                             p.Field<DateTime>("SAH_DT"),
                             p.Field<string>("SAH_PC"),
                             q.Field<string>("SAD_ITM_CD"),
                             q.Field<string>("SAD_PBOOK"),
                             q.Field<string>("SAD_PB_LVL"),
                             q.Field<decimal>("SAD_QTY"),
                             q.Field<decimal>("SAD_TOT_AMT"),
                          }, false);

            dtResult = results.CopyToDataTable();
            dtResult.TableName = "abc";
            return dtResult;
        }

        //Written By Shanuka on 26/05/2014
        public Int32 SaveOutItemdetails(CashSales_Out_RevItems objOutItems, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.SaveOutItemdetails(objOutItems);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;
        }
        public Int32 SaveOutItemdetailsHS(CashSales_Out_RevItems objOutItems, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.SaveOutItemdetailsHS(objOutItems);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;
        }
        public Int32 SaveINItemdetailsHS(CashSales_Out_RevItems objOutItems, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.SaveINItemdetailsHS(objOutItems);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;
        }
        public Int32 SaveApprovals(CashSales_Out_RevItems objOutItems, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.SaveApprovals(objOutItems);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;
        }
        //Written By Shanuka on 27/05/2014
        public Int32 SaveCommentDetails(string invNO, string user, string remark, string dept, string rec_tp, out string _errr)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _errr = _documentNo;
                effect = _salesDAL.SaveCommentDetails(invNO, user, remark, dept, rec_tp);


                _salesDAL.TransactionCommit();
                _errr = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _errr = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;
        }





        //shalika on 28/05/2014
        public List<HireSalesReversal_Det> Load_ExchangeItems(string _fuc_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_ExchangeItems(_fuc_cd);
        }
        public DataTable Get_Itemstatus()
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_Itemstatus();
        }
        public List<HireSalesReversal_Det> Get_Itemdetails(string Itemcode)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_Itemdetails(Itemcode);
        }

        public DataTable GetPromoDetails(string _item)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPromoDetails(_item);
        }
        public DataTable _lstCustomerDetails(string _fuc_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL._lstCustomerDetails(_fuc_cd);
        }
        public DataTable _lstRevertItemDetails(string _fuc_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL._lstRevertItemDetails(_fuc_cd);
        }
        public DataTable GET_RECEIPTS(string _invNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GET_RECEIPTS(_invNo);

        }
        public List<CashSalesRev_History> Load_AdvanceRecepts(string _fuc_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_AdvanceRecepts(_fuc_cd);
        }
        public DataTable Load_RevertReleaseHistory(string _fuc_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_RevertReleaseHistory(_fuc_cd);
        }
        public DataTable Load_ManagerIssueRevHistory(string _fuc_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_ManagerIssueRevHistory(_fuc_cd);
        }
        public DataTable Load_CashConversionHistory(string _fuc_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_CashConversionHistory(_fuc_cd);
        }
        public DataTable Load_ReceiptReversalHis(string _fuc_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_ReceiptReversalHis(_fuc_cd);
        }
        public DataTable Load_ManualDoc_TrnsrHis(string _fuc_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_ManualDoc_TrnsrHis(_fuc_cd);
        }
        public DataTable Load_AccountReScheduleHistory(string _fuc_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_AccountReScheduleHistory(_fuc_cd);
        }
        //SHANUKA PERERA 11/Jun/2014
        public Int32 SaveAdvancedRep_Details(CashSales_Out_RevItems _objAdvanced, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.SaveAdvancedRep_Details(_objAdvanced);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;
        }
        public DataTable Get_RequstingSchm(string _Grad_aNal2)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_RequstingSchm(_Grad_aNal2);
        }
        public DataTable GetAllInvDetailsHS(string _invoiceNo)
        {
            _salesDAL = new SalesDAL();
            DataTable _dHdr = _salesDAL.GetSalesHdrHS(_invoiceNo);
            DataTable _dDetail = _salesDAL.GetInvoiceDetailByInvoiceTableHS(_invoiceNo);
            DataTable dtResult = new DataTable();

            dtResult.Columns.Add("SAH_CUS_CD", typeof(string));
            dtResult.Columns.Add("SAH_CUS_NAME", typeof(string));
            dtResult.Columns.Add("SAH_CUS_ADD1", typeof(string));
            dtResult.Columns.Add("SAH_CUS_ADD2", typeof(string));
            dtResult.Columns.Add("SAH_INV_NO", typeof(string));
            dtResult.Columns.Add("SAH_INV_TP", typeof(string));
            dtResult.Columns.Add("SAH_DT", typeof(DateTime));
            dtResult.Columns.Add("SAH_PC", typeof(string));
            dtResult.Columns.Add("SAD_ITM_CD", typeof(string));
            dtResult.Columns.Add("SAD_PBOOK", typeof(string));
            dtResult.Columns.Add("SAD_PB_LVL", typeof(string));
            dtResult.Columns.Add("SAD_QTY", typeof(decimal));
            dtResult.Columns.Add("SAD_TOT_AMT", typeof(decimal));
            dtResult.Columns.Add("Scheme", typeof(string));

            var results = from p in _dHdr.AsEnumerable()
                          join q in _dDetail.AsEnumerable() on p.Field<string>("SAH_INV_NO") equals q.Field<string>("SAD_INV_NO")
                          select dtResult.LoadDataRow(new object[]
                          {
                             p.Field<string>("SAH_CUS_CD"),
                             p.Field<string>("SAH_CUS_NAME"),
                             p.Field<string>("SAH_CUS_ADD1"),
                             p.Field<string>("SAH_CUS_ADD2"),
                             p.Field<string>("SAH_INV_NO"),
                             p.Field<string>("SAH_INV_TP"),
                             p.Field<DateTime>("SAH_DT"),
                             p.Field<string>("SAH_PC"),
                             q.Field<string>("SAD_ITM_CD"),
                             q.Field<string>("SAD_PBOOK"),
                             q.Field<string>("SAD_PB_LVL"),
                             q.Field<decimal>("SAD_QTY"),
                             q.Field<decimal>("SAD_TOT_AMT"),
                             q.Field<string>("Scheme"),
                          }, false);

            dtResult = results.CopyToDataTable();
            dtResult.TableName = "abc";
            return dtResult;
        }
        public DataTable Load_ManagerIssueReversal_Details(string _invoiceNo)
        {
            _salesDAL = new SalesDAL();
            DataTable _dItem = _salesDAL.GetItemdetails(_invoiceNo);
            DataTable _dAmnt = _salesDAL.GetManagerandCustomerIssueAmt(_invoiceNo);
            DataTable dtResult = new DataTable();
            dtResult.Columns.Add("FUC_CD", typeof(string));
            dtResult.Columns.Add("ISS_STATUS", typeof(Int16));
            dtResult.Columns.Add("PAID", typeof(decimal));
            dtResult.Columns.Add("GRAH_FUC_CD", typeof(string));
            // dtResult.Columns.Add("GRAH_CRE_DT", typeof(DateTime));
            dtResult.Columns.Add("GRAH_CRE_DT", typeof(string));
            dtResult.Columns.Add("GRAH_LOC", typeof(string));
            dtResult.Columns.Add("GRAD_ANAL1", typeof(string));
            dtResult.Columns.Add("GRAD_ANAL2", typeof(string));
            dtResult.Columns.Add("GRAD_ANAL3", typeof(string));
            dtResult.Columns.Add("GRAD_VAL2", typeof(decimal));
            dtResult.Columns.Add("GRAD_VAL1", typeof(decimal));
            dtResult.Columns.Add("HPA_ACC_NO", typeof(string));
            dtResult.Columns.Add("HPA_HP_VAL", typeof(double));
            dtResult.Columns.Add("HPA_CASH_VAL", typeof(double));
            dtResult.Columns.Add("HPA_TOT_INTR", typeof(double));
            dtResult.Columns.Add("HPA_SER_CHG", typeof(double));
            dtResult.Columns.Add("ARRS", typeof(decimal));
            dtResult.Columns.Add("BALANCE", typeof(decimal));
            dtResult.Columns.Add("HRT_IS_RLS", typeof(decimal));



            var results = from p in _dItem.AsEnumerable()
                          join q in _dAmnt.AsEnumerable() on p.Field<string>("GRAH_FUC_CD") equals q.Field<string>("FUC_CD")
                          select dtResult.LoadDataRow(new object[]
                          {
                             q.Field<string>("FUC_CD"),
                           
                             q.Field<Int16>("ISS_STATUS"),
                            
                             q.Field<decimal>("PAID"),
                             p.Field<string>("GRAH_FUC_CD"),
                             //p.Field<DateTime>("GRAH_CRE_DT"),
                             p.Field<string>("GRAH_CRE_DT"),
                             p.Field<string>("GRAH_LOC"),
                             p.Field<string>("GRAD_ANAL1"),
                             p.Field<string>("GRAD_ANAL2"),
                             p.Field<string>("GRAD_ANAL3"),
                             p.Field<decimal>("GRAD_VAL2"),
                             p.Field<decimal>("GRAD_VAL1"),
                             p.Field<string>("HPA_ACC_NO"),
                             p.Field<double>("HPA_HP_VAL"),
                             p.Field<double>("HPA_CASH_VAL"),
                             p.Field<double>("HPA_TOT_INTR"),
                             p.Field<double>("HPA_SER_CHG"),
                             p.Field<decimal>("ARRS"),
                             p.Field<decimal>("BALANCE"), 
                             p.Field<decimal>("HRT_IS_RLS"),
                         
                          }, false);

            dtResult = results.CopyToDataTable();
            dtResult.TableName = "abc";
            return dtResult;
        }

        public DataTable GetVehicalRegisDetails(string _invoice_no, string _sart_cd)
        {
            // SHANUKA PERERA 18/06/2014
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehicalRegisDetails(_invoice_no, _sart_cd);
        }

        //shanuka perera 19/06/2014
        public Int32 SaveVehReDetails(CashSales_Out_RevItems objrev_det, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.SaveVehReDetails(objrev_det);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;

        }
        public Int32 SaveApprovalsManagerIsuRev(CashSales_Out_RevItems objOutItems, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.SaveApprovalsManagerIsuRev(objOutItems);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;
        }

        public List<PromoVoucherDefinition> GetProVouhByCir(string _cir)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetProVouhByCir(_cir);
        }
        public DataTable Load_ManagerChqRect_Details(string _fuc_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_ManagerChqRect_Details(_fuc_cd);
        }
        public Int16 SaveTempPromoVoucher(DataTable _schSchemeCommDefdt)
        {
            Int16 _effects = 0;
            _salesDAL = new SalesDAL();

            List<PromoVoucherDefinition> _schSchemeCommDef = DataTableExtensions.ToGenericList<PromoVoucherDefinition>(_schSchemeCommDefdt, PromoVoucherDefinition.Converter);

            using (TransactionScope _tr = new TransactionScope(TransactionScopeOption.RequiresNew, TimeSpan.FromMinutes(45)))
            {
                _salesDAL.ConnectionOpen();

                foreach (PromoVoucherDefinition _tmp in _schSchemeCommDef)
                {
                    _salesDAL.SaveTempPromoVoucher(_tmp);
                }
                _salesDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }

        public Int16 SavePromoVoucher(string _com, string _vouCode)
        {
            Int16 _effects = 0;
            _salesDAL = new SalesDAL();

            using (TransactionScope _tr = new TransactionScope(TransactionScopeOption.RequiresNew, TimeSpan.FromMinutes(45)))
            {
                _salesDAL.ConnectionOpen();
                _effects = _salesDAL.SavePromoVoucher(_com, _vouCode);
                _salesDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }
        // SHANUKA PERERA 21/06/2014
        public DataTable FillVehRegisHisDetails(string _invoice_no, string _sart_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.FillVehRegisHisDetails(_invoice_no, _sart_cd);

        }
        // Shalika on 25/06/2014
        public DataTable Load_CashConersion_Details(string _fuc_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_CashConersion_Details(_fuc_cd);
        }
        // Shalika on 25/06/2014
        public Int32 SaveApprovalsCashConversion(CashSales_Out_RevItems objOutItems, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.SaveApprovalsCashConversion(objOutItems);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;
        }
        public DataTable Load_AccountReschedule_Details(string _fuc_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_AccountReschedule_Details(_fuc_cd);
        }
        public List<PromoVoucherDefinition> GetPromotionalVouchersDefinition(string _company, string _salesType, string _profitCenter, DateTime _date, string _pb, string _pbLevel, string _brand, string _cate1, string _cate2, string _item, bool _isopenCnn)
        {
            if (_isopenCnn == true)
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
            }

            List<MasterSalesPriorityHierarchy> _hierarchy = _salesDAL.GetSalesPriorityHierarchy(_company, _profitCenter, "PC_PRIT_HIERARCHY", "PC");
            if (_hierarchy != null && _hierarchy.Count > 0) _hierarchy = _hierarchy.Where(x => x.Mpi_cd == "PC" || x.Mpi_cd == "CHNL" || x.Mpi_cd == "SCHNL").ToList();

            List<PromoVoucherDefinition> _List = new List<PromoVoucherDefinition>();

            if (_hierarchy != null && _hierarchy.Count > 0)
            {
                foreach (MasterSalesPriorityHierarchy _one in _hierarchy)
                {
                    string _type = _one.Mpi_cd;
                    string _value = _one.Mpi_val;
                    _List = _salesDAL.GetPromoVoucherDefinition(_company, _salesType, _type, _value, _date, _pb, _pbLevel, _brand, _cate1, _cate2, _item);
                    if (_List != null && _List.Count > 0)
                    {
                        return _List;
                    }

                }
            }
            return _List;

        }

        //kapila
        public bool CheckPromoVoucherParaNo(string _company, string _vou, string _tp, string _cd, Int32 _prd, out string _err)
        {
            bool _chk = false;
            try
            {
                _salesDAL = new SalesDAL();
                DataTable _dt = _salesDAL.CheckPromoVoucherParaNo(_company, _vou, _tp, _cd, _prd);
                if (_dt != null)
                {
                    if (_dt.Rows.Count > 0)
                    {
                        _chk = true;
                    }
                }
                if (_chk == false)
                { _err = "Voucher parameter definition not match with the entered data!"; }
                else
                { _err = ""; }
                return _chk;
            }
            catch (Exception err)
            {
                _err = "ERROR : " + err.Message.ToString();
                return _chk;
            }
        }

        public DataTable GetPromoVoucherNo(string _company, string _cust, string _nic, string _mobi, DateTime _date, int _vouNo, string gvcode = null)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.CheckPromoVoucherNo(_company, _cust, _nic, _mobi, _date, _vouNo, gvcode);
        }

        public bool CheckPromoVoucherNo(string _company, string _cust, string _nic, string _mobi, DateTime _date, int _vouNo, out string _err, string gvcode = null)
        {
            bool _chk = false;
            try
            {
                _salesDAL = new SalesDAL();
                DataTable _dt = _salesDAL.CheckPromoVoucherNo(_company, _cust, _nic, _mobi, _date, _vouNo, gvcode);
                if (_dt != null)
                {
                    if (_dt.Rows.Count == 1)
                    {
                        _chk = true;
                    }
                }
                if (_chk == false)
                { _err = "Invalid voucher number!"; }
                else
                { _err = ""; }
                return _chk;
            }
            catch (Exception err)
            {
                _err = "ERROR : " + err.Message.ToString();
                return _chk;
            }
        }

        public MasterBusinessEntity GetCustomerProfileByNIC(string nic)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCustomerProfileByNIC(nic);
        }

        public CashGeneralEntiryDiscountDef GetPromoVoucherNoDefinition(string _company, string _pc, string _customer, DateTime _date, string _book, string _level, string _item, string _voucherNo, string gvp_gv_cd = null)
        {
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            CashGeneralEntiryDiscountDef _returnList = null;
            List<GiftVoucherPages> _page = null;
            GiftVoucherPages _page0 = null;
            _page = _salesDAL.GetVoucherPage(1, _company, _pc, _date.Date, "", "A", _voucherNo, "P_GV", gvp_gv_cd);
            if (_page == null) return _returnList;
            if (_page.Count <= 0) return _returnList;

            foreach (GiftVoucherPages onePage in _page)
            {
                _page0 = onePage;
                break;
            }

            MasterItem _mitm = _inventoryDAL.GetItem(_company, _item);

            if (_salesDAL.CheckPromoVouRedeemItem(Convert.ToInt32(_page0.Gvp_ref), _item, _mitm.Mi_brand, _mitm.Mi_cate_1, _mitm.Mi_cate_2) == false) return _returnList;

            PromoVoucherDefinition _definitionInfor = _salesDAL.GetPromoVoucherDefinitionBySeq(Convert.ToInt32(_page0.Gvp_ref), _book, _level);
            if (_definitionInfor == null) return _returnList;

            _returnList = new CashGeneralEntiryDiscountDef();
            if (_definitionInfor.Spd_disc_isrt == true)
            {
                _returnList.Sgdd_disc_val = 0;
                _returnList.Sgdd_disc_rt = _definitionInfor.Spd_disc;
            }
            else
            {
                _returnList.Sgdd_disc_val = _definitionInfor.Spd_disc;
                _returnList.Sgdd_disc_rt = 0;
            }
            return _returnList;
        }

        public List<HPAddSchemePara> GetAddParaDetails(string _type, string _schCd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAddParaDetails(_type, _schCd);
        }

        public DataTable GetAllSchemeCircularsToDataTable()
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAllSchemeCircularsToDataTable();
        }
        public DataTable GetCustomerSalesDet(string _com, string _invTp, DateTime _frmDt, DateTime _toDt, string _cus, string _invNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCustomerSalesDet(_com, _invTp, _frmDt, _toDt, _cus, _invNo);
        }
        public DataTable CheckPreviousUseInvoice(string _com, string _invNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.CheckPreviousUseInvoice(_com, _invNo);
        }

        public CashGeneralEntiryDiscountDef CheckCustHaveDiscountPromoVoucher(string _company, string _pc, string _customer, DateTime _date, string _book, string _level, string _item, string _voucherNo, string _nic, string _mobi)
        {
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            CashGeneralEntiryDiscountDef _returnList = null;
            List<GiftVoucherPages> _page = null;
            bool _okVouPage = false;
            _page = _salesDAL.GetVoucherPage(2, _company, _pc, _date.Date, _customer, "A", _voucherNo, "P_GV", null);
            if (_page != null) if (_page.Count > 0) _okVouPage = true;

            if (_okVouPage == false)
            {
                _page = _salesDAL.GetVoucherPage(4, _company, _pc, _date.Date, _nic, "A", _voucherNo, "P_GV", null);
                if (_page != null) if (_page.Count > 0) _okVouPage = true;
            }

            if (_okVouPage == false)
            {
                _page = _salesDAL.GetVoucherPage(5, _company, _pc, _date.Date, _mobi, "A", _voucherNo, "P_GV", null);
                if (_page != null) if (_page.Count > 0) _okVouPage = true;
            }

            if (_page == null) return _returnList;
            if (_page.Count <= 0) return _returnList;

            if (_okVouPage == false) return _returnList;


            foreach (GiftVoucherPages _page0 in _page)
            {

                MasterItem _mitm = _inventoryDAL.GetItem(_company, _item);

                if (_salesDAL.CheckPromoVouRedeemItem(Convert.ToInt32(_page0.Gvp_ref), _item, _mitm.Mi_brand, _mitm.Mi_cate_1, _mitm.Mi_cate_2) == false) return _returnList;

                PromoVoucherDefinition _definitionInfor = _salesDAL.GetPromoVoucherDefinitionBySeq(Convert.ToInt32(_page0.Gvp_ref), _book, _level);
                if (_definitionInfor == null) return _returnList;

                _returnList = new CashGeneralEntiryDiscountDef();
                if (_definitionInfor.Spd_disc_isrt == true)
                {
                    _returnList.Sgdd_disc_val = 0;
                    _returnList.Sgdd_disc_rt = _definitionInfor.Spd_disc;
                }
                else
                {
                    _returnList.Sgdd_disc_val = _definitionInfor.Spd_disc;
                    _returnList.Sgdd_disc_rt = 0;
                }
            }
            return _returnList;
        }


        public bool CheckPromoVoucherInvoiceUsed(string _company, string _pc, string _invoiceNo)
        {
            _salesDAL = new SalesDAL();
            bool _isOk = false;
            List<GiftVoucherPages> _page = null;
            _page = _salesDAL.GetVoucherPage(3, _company, _pc, DateTime.Now.Date, _invoiceNo, "F", "", "P_GV", null);
            if (_page != null)
            {
                if (_page.Count >= 0)
                {
                    _isOk = true;
                }
            }

            return _isOk;
        }
        //shalika on 07/07/2014
        public DataTable Load_CashRefund_Details(string _fuc_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_CashRefund_Details(_fuc_cd);
        }
        //shalika on 07/07/2014
        public Int32 SaveApprovalsCashRefund(CashSales_Out_RevItems objOutItems, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.SaveApprovalsCashRefund(objOutItems);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;
        }
        public List<CashSalesRev_History> Load_CashRefundHis(string _fuc_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_CashRefundHis(_fuc_cd);
        }
        //shalika on 08/07/2014
        public DataTable Load_Manual_Doc_Tranfr_Details(string _fuc_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_Manual_Doc_Tranfr_Details(_fuc_cd);
        }
        //shalika on 08/07/2014
        public Int32 SaveManualDocTrnsr(CashSales_Out_RevItems objOutItems, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.SaveManualDocTrnsr(objOutItems);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;
        }
        //shalika on 08/07/2014
        public DataTable Load_Rev_Acc_Holder(string _fuc_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_Rev_Acc_Holder(_fuc_cd);
        }
        // shanuka 08/07/2014
        public DataTable Get_Special_EarlyDiscount_Details(string _invNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_Special_EarlyDiscount_Details(_invNo);
        }
        //shanuka perera 09/07/2014
        public Int32 Insert_Special_Closing_Dis_Details(CashSales_Out_RevItems objrev_det, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.Insert_Special_Closing_Dis_Details(objrev_det);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;
        }


        //Tharaka 11-07-2014
        public Int32 DeleteTempPromoVoucher(string CreateUser)
        {
            Int32 _effects = 0;
            try
            {
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                _effects = _inventoryRepDAL.DeleteTempPromoVoucher(CreateUser);

                _inventoryRepDAL.TransactionCommit();
                _effects = 1;
            }
            catch (Exception err)
            {
                _effects = -1;
                _salesDAL.TransactionRollback();

            }
            return _effects;
        }

        // shanuka 11/07/2014
        public DataTable Get_Dutyfree_Ex_Det(string _invNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_Dutyfree_Ex_Det(_invNo);
        }

        //Tharaka 2014-07-14
        public Int16 SaveTempPromoVoucherItems(DataTable _PromotionVoucherItems)
        {
            Int16 _effects = 0;
            _salesDAL = new SalesDAL();

            List<PromotionVoucherItems> _PromotionVoucherItemsList = DataTableExtensions.ToGenericList<PromotionVoucherItems>(_PromotionVoucherItems, PromotionVoucherItems.Converter);

            using (TransactionScope _tr = new TransactionScope(TransactionScopeOption.RequiresNew, TimeSpan.FromMinutes(45)))
            {
                _salesDAL.ConnectionOpen();

                foreach (PromotionVoucherItems _tmp in _PromotionVoucherItemsList)
                {
                    _salesDAL.SaveTempPromoVoucherItems(_tmp);
                }
                _salesDAL.ConnectionClose();
                _effects = 1;
                _tr.Complete();
            }
            return _effects;
        }

        // Tharaka 2014-07-15
        public DataTable GetPromotionItemsByBatchSeq(Int32 BatchSeq)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPromotionItemsByBatchSeq(BatchSeq);
        }

        //shanuka perera 15/07/2014
        public Int32 SaveDutyFreeDet(CashSales_Out_RevItems objrev_det, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.SaveDutyFreeDet(objrev_det);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;
        }

        //Tharaka 2014-07-17
        public Int32 UpdatePromotionVoucherStatus(string CricularNo, int Status, string modUser)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                effect = _salesDAL.UpdatePromotionVoucherStatus(CricularNo, Status, modUser);


                _salesDAL.TransactionCommit();
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _salesDAL.TransactionRollback();

            }
            return effect;
        }
        //Shalika on 2014/07/24
        public DataTable Load_Summery_History(string _fuc_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_Summery_History(_fuc_cd);
        }
        public DataTable Get_ReqType()
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_ReqType();
        }
        // Shalika on 27/07/2014
        public Int32 SaveApprovalsAccountReschedule(CashSales_Out_RevItems objOutItems, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.SaveApprovalsAccountReschedule(objOutItems);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;
        }
        //shalika on 07/07/2014
        public DataTable Get_NewOutItemPrice(string _invNo, string _itm_Code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_NewOutItemPrice(_invNo, _itm_Code);
        }
        //SHANUKA PERERA on 29/07/2014
        public DataTable Load_Period_Over_Details(string _invNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_Period_Over_Details(_invNo);
        }

        //Tharaka on 29/07/2017
        public Int32 UpdateBusinessEntityProfileWithPermission(MasterBusinessEntity _businessEntity, string modby, DateTime modDate, Decimal Newcredlimit, List<MasterBusinessEntityInfo> bisInfoList, List<MasterBusinessEntitySalesType> _salesTypes)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int32 effect = -1;
            effect = _salesDAL.UpdateBusinessEntityProfile(_businessEntity, 2);
            effect = effect + _salesDAL.UpdateCustomerCreditLimit(_businessEntity.Mbe_com, _businessEntity.Mbe_cd, modby, modDate, Newcredlimit);

            foreach (MasterBusinessEntityInfo bis in bisInfoList)
            {
                bis.Mbei_cd = _businessEntity.Mbe_cd;
                effect = effect + _salesDAL.UpdateBusinessEntityInfo(bis);
            }
            if (_salesTypes != null && _salesTypes.Count > 0)
            {
                string _type = "";
                _salesTypes[0].Mbsa_cd = _businessEntity.Mbe_cd;
                foreach (MasterBusinessEntitySalesType _sal in _salesTypes)
                {
                    _type = _type + "," + _sal.Mbsa_sa_tp;
                }
                _type = _type.Substring(1, _type.Length - 1);
                _salesDAL.UpdateCustomerSalesTypes(_salesTypes[0], _type);

            }
            else
            {
                MasterBusinessEntitySalesType _sal = new MasterBusinessEntitySalesType();
                _sal.Mbsa_com = _businessEntity.Mbe_com;
                _sal.Mbsa_cd = _businessEntity.Mbe_cd;
                _salesDAL.UpdateCustomerSalesTypes(_sal, "");
            }


            _salesDAL.ConnectionClose();
            return effect;
        }
        //SHANUKA PERERA on 30/07/2014
        public DataTable Load_DutyFree_det(string _invNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_DutyFree_det(_invNo);

        }
        //SHANUKA PERERA on 30/07/2014
        public DataTable Load_Specila_Closing_his(string _invNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_Specila_Closing_his(_invNo);
        }
        //SHANUKA PERERA on 30/07/2014
        public DataTable GetSerialsForItem(string _com, string _item, string _itemstatus)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSerialsForItem(_com, _item, _itemstatus);
        }
        //SHANUKA PERERA on 31/07/2014
        public DataTable Get_Prf_Cent_Det(string invNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_Prf_Cent_Det(invNo);
        }
        //SHANUKA PERERA on 31/07/2014
        public DataTable Get_Loc_Det(string com, string prf)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_Loc_Det(com, prf);
        }
        //SHANUKA PERERA on 1/08/2014
        public DataTable Get_Pblevel_book(string invNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_Pblevel_book(invNo);
        }

        //Tharaka 2014-08-01
        public int ProcessPromotionApprove(List<string> _promoCodes, out string _err, out List<string> _errList, string user, string session)
        {
            int result = 0;
            List<string> _errPromo = new List<string>();
            List<PriceDetailRef> _details = new List<PriceDetailRef>();
            try
            {

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                foreach (string st in _promoCodes)
                {
                    _details.AddRange(_salesDAL.GetPriceByPromoCD(st));
                }

                foreach (PriceDetailRef _det in _details)
                {
                    result = result + _salesDAL.ApprovePromotion(_det.Sapd_seq_no, _det.Sapd_pb_seq, _det.Sapd_promo_cd, user);

                    LogPriceDef _log = new LogPriceDef();
                    _log.Log_dt = _det.Sapd_from_date;
                    _log.Log_rmk = "Approved the price definition";
                    _log.Log_session = session;
                    _log.Log_usr = user;
                    _log.Promo_cd = _det.Sapd_promo_cd;
                    _log.Pb = _det.Sapd_pb_tp_cd;
                    _log.To_dt = _det.Sapd_to_date;
                    _log.Cir_no = _det.Sapd_circular_no;
                    _salesDAL.SavePriceingLog(_log);
                }

                _salesDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _errList = null;
                _err = ex.Message;
                result = 0;
                _salesDAL.TransactionRollback();
                result = 0;
                return result;
            }
            _err = "";
            _errList = _errPromo;
            return result;
        }

        //Tharaka 2014-08-02
        public int ApprovePromotionlDiscount(string _cir, string user, string session)
        {
            Int32 _effects = 0;
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            _effects = _salesDAL.ApprovePromotionlDiscount(_cir, 1);

            List<CashPromotionDiscountHeader> _hdr = _salesDAL.GetPromotionalHeader(_cir);

            LogPriceDef _log = new LogPriceDef();
            _log.Log_dt = _hdr[0].Spdd_from_dt;
            _log.Log_rmk = "Approved";
            _log.Log_session = session;
            _log.Log_usr = user;
            _log.Promo_cd = _hdr[0].Spdh_seq.ToString();
            _log.To_dt = _hdr[0].Spdd_to_dt;
            _log.Cir_no = _hdr[0].Spdh_circular;
            _salesDAL.SaveDiscountDefinitionLog(_log);

            _salesDAL.ConnectionClose();
            return _effects;
        }

        //tharaka 2014-08-04
        public Int32 DiscountDefinitionChangeStatus(string _cir, Int16 status)
        {
            Int32 result = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                result = _salesDAL.ApprovePromotionlDiscount(_cir, status);

                _salesDAL.TransactionCommit();
                return result;
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                return result = 0;
            }
        }
        //SHANUKA PERERA on 04/08/2014
        public DataTable GetJobNoServiceApp(string invNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetJobNoServiceApp(invNo);
        }

        //Tharaka on 06-08-2014
        public DataTable GetDiscountRequest(string Com, string PC, string Loc, string user)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDiscountRequest(Com, PC, Loc, user);
        }

        //tharaka 2014-08-04
        public int UpdateDiscountDefintionStatus(string user, decimal discount, int status, string SeqNo, decimal amount)
        {
            Int32 result = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                result = _salesDAL.UpdateDiscountDefintionStatus(user, discount, status, SeqNo, amount);
                _salesDAL.TransactionCommit();
                return result;
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                return result = 0;
            }
        }

        //tharaka 2014-08-08
        public int InsertIntoSCM_POPUP_COLECTOR(PopupCollect oPopupCollector)
        {
            Int32 result = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                result = _salesDAL.InsertIntoSCM_POPUP_COLECTOR(oPopupCollector);
                _salesDAL.TransactionCommit();
                return result;
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                return result = 0;
            }
        }

        //tharaka 2014-08-09
        public int InsetInto_DicountRqstLog(DiscountReqLog oDiscountReqLog)
        {
            Int32 result = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                result = _salesDAL.InsetInto_DicountRqstLog(oDiscountReqLog);
                _salesDAL.TransactionCommit();
                return result;
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                return result = 0;
            }
        }
        //Shalika on 12/08/2014
        public List<CashSalesRev_History> GetReprintDetails(string _Usrid, string _Com)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReprintDetails(_Usrid, _Com);
        }
        //Shalika on 13/08/2014
        public DataTable Load_SaleForRevAccHistory(string _fuc_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_SaleForRevAccHistory(_fuc_cd);
        }
        public Int32 UpdateScmCommDets(CashSales_Out_RevItems objOutItems, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.UpdateScmCommDets(objOutItems);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;
        }

        public DataTable GetScmDet()
        {
            //SHANUKA 2014/08/13
            _salesDAL = new SalesDAL();
            return _salesDAL.GetScmDet();

        }


        public Int32 SaveToDipositBankDet(List<Deposit_Bank_Pc_wise> listBankDetails, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.SaveToDipositBankDet(listBankDetails);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;

        }



        //SHANUKA 2014/08/13
        public Int32 UpdateReprintDets(CashSales_Out_RevItems objOutItems, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.UpdateReprintDets(objOutItems);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;
        }



        //tharaka 2014-08-11
        public DataTable GetHPdownPaymentReceipt(string Com, string user, string sart_desc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHPdownPaymentReceipt(Com, user, sart_desc);
        }

        //tharaka on 2014-08-11
        public int SaveHPDownPaymentReceipt(string User, string com, List<string> receiptList, string RequestNo, string remark, bool IsApprove)
        {
            _generalDAL = new GeneralDAL();
            _generalDAL.ConnectionOpen();
            _generalDAL.BeginTransaction();

            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();

            int effect = 0;
            _salesDAL = new SalesDAL();

            try
            {
                int FinalApproveLevel = -1;
                int UserApproveLevel = -1;

                DataTable dtApproveDetails = _generalDAL.GetFunctionApplevel_UserAppLevel(User, "HP MANUAL DOWN PAYMENT RECEIPT");
                FinalApproveLevel = Convert.ToInt16(dtApproveDetails.Rows[0]["sart_app_lvl"].ToString());
                UserApproveLevel = Convert.ToInt16(dtApproveDetails.Rows[0]["sarp_app_lvl"].ToString());


                if (receiptList.Count > 0)
                {
                    RequestApprovalHeader oHdr = _salesDAL.GetRequest_Header_ByRef(com, RequestNo);
                    List<RequestApprovalSerials> List = new List<RequestApprovalSerials>();
                    DataTable dtSearials = _generalDAL.Get_gen_reqapp_ser(com, RequestNo, out List);

                    if (FinalApproveLevel != UserApproveLevel)
                    {
                        // Insert to serial log
                        for (int i = 0; i < receiptList.Count; i++)
                        {
                            RequestApprovalSerials SelectedSerial = new RequestApprovalSerials();
                            SelectedSerial = List.Find(x => x.Gras_anal4 == (receiptList[i]));

                            RequestApprovalSerialsLog oSearial = new RequestApprovalSerialsLog();
                            oSearial.Gras_ref = SelectedSerial.Gras_ref;
                            oSearial.Gras_anal1 = SelectedSerial.Gras_anal1;
                            oSearial.Gras_anal2 = SelectedSerial.Gras_anal2;
                            oSearial.Gras_anal3 = SelectedSerial.Gras_anal3;
                            oSearial.Gras_anal4 = SelectedSerial.Gras_anal4;
                            oSearial.Gras_anal5 = SelectedSerial.Gras_anal5;
                            oSearial.Gras_anal6 = SelectedSerial.Gras_anal6;
                            oSearial.Gras_anal7 = SelectedSerial.Gras_anal7;
                            oSearial.Gras_anal8 = SelectedSerial.Gras_anal8;
                            oSearial.Gras_anal9 = SelectedSerial.Gras_anal9;
                            oSearial.Gras_anal10 = SelectedSerial.Gras_anal10;
                            oSearial.Gras_lvl = UserApproveLevel;
                            Int32 effectSerial = _generalDAL.Save_RequestApprove_Serial_Log(oSearial);
                        }

                        //Insert to header Log
                        RequestApprovalHeaderLog HeaderLog = new RequestApprovalHeaderLog();
                        HeaderLog.Grah_com = oHdr.Grah_com;
                        HeaderLog.Grah_loc = oHdr.Grah_loc;
                        HeaderLog.Grah_app_tp = oHdr.Grah_app_tp;
                        HeaderLog.Grah_fuc_cd = oHdr.Grah_fuc_cd;
                        HeaderLog.Grah_ref = oHdr.Grah_ref;
                        HeaderLog.Grah_oth_loc = oHdr.Grah_oth_loc;
                        HeaderLog.Grah_cre_by = User;
                        HeaderLog.Grah_cre_dt = DateTime.Now;
                        HeaderLog.Grah_mod_by = oHdr.Grah_mod_by;
                        HeaderLog.Grah_mod_dt = oHdr.Grah_mod_dt;
                        if (IsApprove)
                        {
                            HeaderLog.Grah_app_stus = "A";
                        }
                        else
                        {
                            HeaderLog.Grah_app_stus = "R";
                        }
                        HeaderLog.Grah_app_lvl = UserApproveLevel;
                        HeaderLog.Grah_app_by = User;
                        HeaderLog.Grah_app_dt = DateTime.Now;
                        HeaderLog.Grah_remaks = remark;
                        HeaderLog.Grah_sub_type = oHdr.Grah_sub_type;
                        HeaderLog.Grah_oth_pc = oHdr.Grah_oth_pc;
                        Int32 effectHeader = _generalDAL.SaveRequestApproveHear_Log(HeaderLog);

                        //update Header
                        RequestApprovalHeader oHeader = new RequestApprovalHeader();
                        oHeader.Grah_com = oHdr.Grah_com;
                        oHeader.Grah_loc = oHdr.Grah_loc;
                        oHeader.Grah_fuc_cd = oHdr.Grah_fuc_cd;
                        oHeader.Grah_ref = oHdr.Grah_ref;
                        oHeader.Grah_app_stus = oHdr.Grah_app_stus;
                        oHeader.Grah_app_lvl = UserApproveLevel;
                        oHeader.Grah_app_by = User;
                        Int32 effectHeaderUpdate = _generalDAL.UpdateMidApprovalStatus(oHeader);
                    }
                    else
                    {
                        //Final Approval level

                        // Insert to serial log
                        for (int i = 0; i < receiptList.Count; i++)
                        {
                            RequestApprovalSerials SelectedSerial = new RequestApprovalSerials();
                            SelectedSerial = List.Find(x => x.Gras_anal4 == (receiptList[i]));

                            RequestApprovalSerialsLog oSearial = new RequestApprovalSerialsLog();
                            oSearial.Gras_ref = SelectedSerial.Gras_ref;
                            oSearial.Gras_anal1 = SelectedSerial.Gras_anal1;
                            oSearial.Gras_anal2 = SelectedSerial.Gras_anal2;
                            oSearial.Gras_anal3 = SelectedSerial.Gras_anal3;
                            oSearial.Gras_anal4 = SelectedSerial.Gras_anal4;
                            oSearial.Gras_anal5 = SelectedSerial.Gras_anal5;
                            oSearial.Gras_anal6 = SelectedSerial.Gras_anal6;
                            oSearial.Gras_anal7 = SelectedSerial.Gras_anal7;
                            oSearial.Gras_anal8 = SelectedSerial.Gras_anal8;
                            oSearial.Gras_anal9 = SelectedSerial.Gras_anal9;
                            oSearial.Gras_anal10 = SelectedSerial.Gras_anal10;
                            oSearial.Gras_lvl = UserApproveLevel;
                            Int32 effectSerial = _generalDAL.Save_RequestApprove_Serial_Log(oSearial);
                        }

                        //Insert to header Log
                        RequestApprovalHeaderLog HeaderLog = new RequestApprovalHeaderLog();
                        HeaderLog.Grah_com = oHdr.Grah_com;
                        HeaderLog.Grah_loc = oHdr.Grah_loc;
                        HeaderLog.Grah_app_tp = oHdr.Grah_app_tp;
                        HeaderLog.Grah_fuc_cd = oHdr.Grah_fuc_cd;
                        HeaderLog.Grah_ref = oHdr.Grah_ref;
                        HeaderLog.Grah_oth_loc = oHdr.Grah_oth_loc;
                        HeaderLog.Grah_cre_by = User;
                        HeaderLog.Grah_cre_dt = DateTime.Now;
                        HeaderLog.Grah_mod_by = oHdr.Grah_mod_by;
                        HeaderLog.Grah_mod_dt = oHdr.Grah_mod_dt;
                        if (IsApprove)
                        {
                            HeaderLog.Grah_app_stus = "A";
                        }
                        else
                        {
                            HeaderLog.Grah_app_stus = "R";
                        }
                        HeaderLog.Grah_app_lvl = UserApproveLevel;
                        HeaderLog.Grah_app_by = User;
                        HeaderLog.Grah_app_dt = DateTime.Now;
                        HeaderLog.Grah_remaks = remark;
                        HeaderLog.Grah_sub_type = oHdr.Grah_sub_type;
                        HeaderLog.Grah_oth_pc = oHdr.Grah_oth_pc;
                        Int32 effectHeader = _generalDAL.SaveRequestApproveHear_Log(HeaderLog);

                        //update Header
                        RequestApprovalHeader oHeader = new RequestApprovalHeader();
                        oHeader.Grah_com = oHdr.Grah_com;
                        oHeader.Grah_loc = oHdr.Grah_loc;
                        oHeader.Grah_fuc_cd = oHdr.Grah_fuc_cd;
                        oHeader.Grah_ref = oHdr.Grah_ref;
                        oHeader.Grah_app_stus = oHdr.Grah_app_stus;
                        oHeader.Grah_app_lvl = UserApproveLevel;
                        oHeader.Grah_app_by = User;

                        if (IsApprove)
                        {
                            oHeader.Grah_app_stus = "A";
                        }
                        else
                        {
                            oHeader.Grah_app_stus = "R";
                        }
                        Int32 effectHeaderUpdat = _generalDAL.UpdateApprovalStatus(oHeader);


                        // Delete From serial table
                        Int32 effectDelete = _inventoryDAL.DeleteRequestSerial(RequestNo);

                        //Insert into serial table
                        for (int i = 0; i < receiptList.Count; i++)
                        {
                            RequestApprovalSerials SelectedSerial = new RequestApprovalSerials();
                            SelectedSerial = List.Find(x => x.Gras_anal4 == (receiptList[i]));
                            Int32 effectInsery = _generalDAL.Save_RequestApprove_Ser(SelectedSerial);
                        }

                    }
                    _generalDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();
                }
                else
                {
                    return -1;
                }

                return effect;
            }
            catch (Exception ex)
            {
                _generalDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                return -1;
            }
        }

        //tharaka 2014-08-13
        public RequestApprovalHeader GetRequest_Header_ByRef(string _com, string _ref)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRequest_Header_ByRef(_com, _ref);
        }

        //tharaka 2014-08-13
        public List<RequestApprovalHeaderLog> GetRequestHeaderLog(string reffNumber, string _Com)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRequestHeaderLog(reffNumber, _Com);
        }

        // Tharaka 13/08/2014
        public List<RequestApprovalSerialsLog> GetRequestSerialLog(string reffNumber)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRequestSerialLog(reffNumber);
        }
        // SHANUKA 15/08/2014
        public DataTable GetPayModeDetas()
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPayModeDetas();
        }
        // SHANUKA 15/08/2014
        public DataTable GetBankDetais(string com)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetBankDetais(com);
        }

        // Tharaka 14/08/2014
        public List<RequestApprovalHeader> Get_CustomerCreationRequset(string App_type, string user, string Company)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_CustomerCreationRequset(App_type, user, Company);
        }

        //tharaka 2014-08-15
        public DataTable Get_CustomerRequsetDetails(string ReqNo, string Company)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_CustomerRequsetDetails(ReqNo, Company);
        }

        //Tharaka 2014-08-15
        public int CustomerCreationUpdate(string requestNo, string user, string company, string NICNo, bool status, string type)
        {
            int effect = 0;

            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            _salesDAL.BeginTransaction();

            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();

            try
            {
                MasterBusinessEntity ocust = _salesDAL.GetBusinessCompanyDetail(null, null, NICNo, null, null);

                if (string.IsNullOrEmpty(ocust.Mbe_cd))
                {
                    //new customer
                    MasterAutoNumber _auto = new MasterAutoNumber();
                    _auto.Aut_moduleid = "CUS";
                    _auto.Aut_number = 0;
                    _auto.Aut_start_char = "CONT";

                    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                    string _cusNo = _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_auto);

                    //get Customer details from MST_BUSENTITY_REQ
                    DataTable dt = Get_CustomerRequsetDetails(requestNo, company);

                    //SaveCustomerDetail(MasterBusinessEntity _businessCompany)
                    MasterBusinessEntity obusEntity = new MasterBusinessEntity();

                    #region Assign Values

                    obusEntity.Mbe_acc_cd = null;
                    obusEntity.Mbe_act = true;
                    obusEntity.Mbe_tel = dt.Rows[0]["mbq_tel"].ToString();
                    obusEntity.Mbe_add1 = dt.Rows[0]["mbq_add1"].ToString();
                    obusEntity.Mbe_add2 = dt.Rows[0]["mbq_add2"].ToString();
                    obusEntity.Mbe_town_cd = dt.Rows[0]["mbq_town_cd"].ToString();
                    obusEntity.Mbe_country_cd = dt.Rows[0]["mbq_country_cd"].ToString();
                    obusEntity.Mbe_distric_cd = dt.Rows[0]["mbq_distric_cd"].ToString();
                    obusEntity.Mbe_province_cd = dt.Rows[0]["mbq_province_cd"].ToString();
                    obusEntity.Mbe_br_no = dt.Rows[0]["mbq_br_no"].ToString();
                    obusEntity.Mbe_cate = dt.Rows[0]["mbq_cate"].ToString();
                    obusEntity.Mbe_com = company;
                    obusEntity.Mbe_contact = null;
                    obusEntity.Mbe_cr_add1 = dt.Rows[0]["mbq_cr_add1"].ToString();
                    obusEntity.Mbe_cr_add2 = dt.Rows[0]["mbq_cr_add2"].ToString();
                    obusEntity.Mbe_cr_country_cd = dt.Rows[0]["mbq_cr_country_cd"].ToString();
                    obusEntity.Mbe_cr_distric_cd = dt.Rows[0]["mbq_cr_distric_cd"].ToString();
                    obusEntity.Mbe_cr_email = null;
                    obusEntity.Mbe_cr_fax = null;
                    obusEntity.Mbe_cr_postal_cd = dt.Rows[0]["mbq_cr_postal_cd"].ToString();
                    obusEntity.Mbe_cr_province_cd = dt.Rows[0]["mbq_cr_province_cd"].ToString();
                    obusEntity.Mbe_cr_tel = dt.Rows[0]["mbq_cr_tel"].ToString();
                    obusEntity.Mbe_cr_town_cd = dt.Rows[0]["mbq_cr_town_cd"].ToString();
                    obusEntity.Mbe_cre_by = user;
                    obusEntity.Mbe_cre_dt = Convert.ToDateTime(DateTime.Today).Date;
                    obusEntity.Mbe_cre_pc = dt.Rows[0]["mbq_cre_pc"].ToString();
                    obusEntity.Mbe_cust_com = dt.Rows[0]["mbq_cust_com"].ToString();
                    obusEntity.Mbe_cust_loc = dt.Rows[0]["mbq_cust_loc"].ToString();
                    obusEntity.Mbe_dl_no = dt.Rows[0]["mbq_dl_no"].ToString();
                    obusEntity.Mbe_dob = Convert.ToDateTime(dt.Rows[0]["mbq_dob"].ToString());
                    obusEntity.Mbe_email = dt.Rows[0]["mbq_email"].ToString();
                    obusEntity.Mbe_fax = null;
                    obusEntity.Mbe_ho_stus = "GOOD";
                    obusEntity.Mbe_income_grup = null;
                    obusEntity.Mbe_intr_com = false;
                    obusEntity.Mbe_is_suspend = false;
                    obusEntity.Mbe_mob = dt.Rows[0]["mbq_mob"].ToString();
                    obusEntity.Mbe_name = dt.Rows[0]["mbq_name"].ToString();
                    obusEntity.Mbe_nic = dt.Rows[0]["mbq_nic"].ToString();
                    obusEntity.Mbe_oth_id_no = null;
                    obusEntity.Mbe_oth_id_tp = null;
                    obusEntity.Mbe_pc_stus = "GOOD";
                    obusEntity.Mbe_postal_cd = dt.Rows[0]["mbq_postal_cd"].ToString();
                    obusEntity.Mbe_pp_no = dt.Rows[0]["mbq_pp_no"].ToString();
                    obusEntity.Mbe_sex = dt.Rows[0]["mbq_sex"].ToString();
                    obusEntity.Mbe_sub_tp = null;
                    obusEntity.Mbe_svat_no = dt.Rows[0]["mbq_svat_no"].ToString();
                    obusEntity.Mbe_tax_no = dt.Rows[0]["mbq_tax_no"].ToString();
                    obusEntity.Mbe_tp = "C";
                    obusEntity.Mbe_wr_add1 = dt.Rows[0]["mbq_wr_add1"].ToString();
                    obusEntity.Mbe_wr_add2 = dt.Rows[0]["mbq_wr_add2"].ToString();
                    obusEntity.Mbe_wr_com_name = dt.Rows[0]["mbq_wr_com_name"].ToString();
                    obusEntity.Mbe_wr_country_cd = null;
                    obusEntity.Mbe_wr_dept = dt.Rows[0]["mbq_wr_dept"].ToString();
                    obusEntity.Mbe_wr_designation = dt.Rows[0]["mbq_wr_designation"].ToString();
                    obusEntity.Mbe_wr_distric_cd = null;
                    obusEntity.Mbe_wr_email = dt.Rows[0]["mbq_wr_email"].ToString();
                    obusEntity.Mbe_wr_fax = dt.Rows[0]["mbq_wr_fax"].ToString();
                    obusEntity.Mbe_wr_proffesion = null;
                    obusEntity.Mbe_wr_province_cd = null;
                    obusEntity.Mbe_wr_tel = dt.Rows[0]["mbq_wr_tel"].ToString();
                    obusEntity.Mbe_wr_town_cd = null;



                    #endregion

                    obusEntity.Mbe_cd = _cusNo;

                    //customerCD = _cusNo;
                    _salesDAL.ConnectionOpen();
                    _salesDAL.BeginTransaction();
                    effect = _salesDAL.SaveBusinessEntityDetail(obusEntity);

                    if (effect == 1)
                    {
                        MasterBusinessEntitySalesType oMstBusSalesType = new MasterBusinessEntitySalesType();

                        oMstBusSalesType.Mbsa_com = company;
                        oMstBusSalesType.Mbsa_cd = _cusNo;
                        oMstBusSalesType.Mbsa_tp = dt.Rows[0]["MBQ_TP"].ToString();
                        oMstBusSalesType.Mbsa_sa_tp = type;
                        oMstBusSalesType.Mbsa_act = true;
                        oMstBusSalesType.Mbsa_cre_by = user;
                        oMstBusSalesType.Mbsa_cre_dt = DateTime.Now;
                        oMstBusSalesType.Mbsa_mod_by = user;
                        oMstBusSalesType.Mbsa_mod_dt = DateTime.Now;

                        int effect1 = _salesDAL.SaveCustomerSalesTypes(oMstBusSalesType);
                    }

                    _salesDAL.UpdateCreditCustomerRequest(company, requestNo, _cusNo);
                    if (status)
                    {
                        _salesDAL.UpdateRequestCloseStatus(company, dt.Rows[0]["mbq_reqloc"].ToString(), "ARQT034", requestNo, "A", user);

                    }
                    else
                    {
                        _salesDAL.UpdateRequestCloseStatus(company, dt.Rows[0]["mbq_reqloc"].ToString(), "ARQT034", requestNo, "R", user);
                    }
                }
                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();

            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
            }


            return effect;
        }
        //shanuka 2014-08-15
        public DataTable LoadBankNewDets()
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.LoadBankNewDets();
        }
        // SHANUKA PERERA 16/08/2014
        public Int32 InsertNewBankDets(Deposit_Bank_Pc_wise _Deposit, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.InsertNewBankDets(_Deposit);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;

        }
        //SHANUKA on 17-08-2014
        public Int32 UpdateToDiposit(List<Deposit_Bank_Pc_wise> listBankDetails, List<Deposit_Bank_Pc_wise> listBankSlips, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.UpdateToDipositBankDet(listBankDetails);
                effect = _salesDAL.UpdateToBankSlipDetails(listBankSlips);

                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;
        }

        //SHANUKA on 17-08-2014
        public DataTable Get_LoadDipDetais(string profit, DateTime from, DateTime To)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_LoadDipDetais(profit, from, To);
        }
        public DataTable Load_Adj_TypesDets()
        {
            // SHANUKA PERERA 21/08/2014
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_Adj_TypesDets();
        }
        public DataTable Load_Sub_Adj_Types(string _AdjType)
        {
            // SHANUKA PERERA 21/08/2014
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_Sub_Adj_Types(_AdjType);
        }
        public DataTable Load_Adj_Acc_Details(string _AdjType, string _subType)
        {
            // SHANUKA PERERA 21/08/2014
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_Adj_Acc_Details(_AdjType, _subType);
        }
        //Darshana on 22-08-2014
        public Decimal Get_OutHPInsValue(string accNo)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            decimal _InsVal = _salesDAL.Get_OutHPInsValue(accNo);
            _salesDAL.ConnectionClose();
            return _InsVal;
        }

        //Tharaka on 2014-08-21
        public int SaveAccountCancalRequest(RequestApprovalHeader ReqHdr, MasterAutoNumber _AppReqAuto, out string genaratedReqNo)
        {
            _inventoryDAL = new InventoryDAL();
            _generalDAL = new GeneralDAL();

            _inventoryDAL.ConnectionOpen();
            _generalDAL.ConnectionOpen();
            try
            {
                int effect = 0;

                string _ReqAppNo = string.Empty;
                MasterAutoNumber ReqNoAuto = _inventoryDAL.GetAutoNumber(_AppReqAuto.Aut_moduleid, _AppReqAuto.Aut_direction, _AppReqAuto.Aut_start_char, _AppReqAuto.Aut_cate_tp, _AppReqAuto.Aut_cate_cd, _AppReqAuto.Aut_modify_dt, _AppReqAuto.Aut_year);
                _ReqAppNo = ReqNoAuto.Aut_cate_cd + "-" + ReqNoAuto.Aut_start_char + "-" + ReqNoAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_AppReqAuto);
                ReqHdr.Grah_ref = _ReqAppNo;
                genaratedReqNo = _ReqAppNo;
                effect = _generalDAL.SaveRequestApproveHear(ReqHdr);

                _generalDAL.TransactionCommit();
                return effect;
            }
            catch (Exception ex)
            {
                _generalDAL.TransactionRollback();
                genaratedReqNo = string.Empty;
                return -1;
            }
        }
        //shanuka 25/08/2014
        public Int32 InsertTo_sat_Adj(Deposit_Bank_Pc_wise _objadjust, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.InsertTo_sat_Adj(_objadjust);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;

        }
        public DataTable GetUserAssignComment(string _usrId)
        {
            //Shalika
            _salesDAL = new SalesDAL();
            return _salesDAL.GetUserAssignComment(_usrId);
        }
        public Int32 Insert_CheqRetn_with_Adj(RecieptHeader receiptHdr, Deposit_Bank_Pc_wise objDeposit, ChequeReturn _chequeReturn, RemitanceSummaryDetail _remsumdet, out string RtnReceiptNo)
        {
            //Shanuka Perera
            int effect = 0;
            string _cusNum = "";
            int X = 0;
            int xy = 0;
            _salesDAL = new SalesDAL();
            _financialDAL = new FinancialDAL();
            _inventoryDAL = new InventoryDAL();
            _generalDAL = new GeneralDAL();
            try
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _generalDAL.ConnectionOpen();

                Int32 eff = 0;
                // int seqNo = receiptHdr.Sar_seq_no;



                //MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_receiptAuto.Aut_moduleid, _receiptAuto.Aut_direction, _receiptAuto.Aut_start_char, _receiptAuto.Aut_cate_tp, _receiptAuto.Aut_cate_cd, _receiptAuto.Aut_modify_dt, _receiptAuto.Aut_year);

                //_cusNum = _receiptAuto.Aut_cate_cd + _receiptAuto.Aut_start_char + string.Format("{0:0000}", _number.Aut_number);
                //_inventoryDAL.UpdateAutoNumber(_receiptAuto);//update MST_AUTO table

                //receiptHdr.Sar_receipt_no = _cusNum;
                //objDeposit.Ref_lnk = _cusNum;


                RtnReceiptNo = receiptHdr.Sar_receipt_no;

                eff = _salesDAL.UpdateToReceiptHeader(receiptHdr);

                if (_chequeReturn != null)
                    xy = _salesDAL.UpdateToReturnCheque(_chequeReturn);


                if (_remsumdet != null)
                    X = _salesDAL.UpdateTo_RemSummaryDetails(_remsumdet);

                //_salesDAL.ConnectionClose();
                //_financialDAL.ConnectionClose();

                eff = _salesDAL.InsertTo_sat_Adj(objDeposit);

                //kapila 11/8/2015--------------------------------------------------------------------
                if (objDeposit.Adj_Sub_Type == "SVAT")
                {
                    decimal _minCommAllow = 0;
                    HpSystemParameters _getSystemParameter = new HpSystemParameters();
                    decimal _Balance = 0;

                    if (receiptHdr.Sar_is_oth_shop == true)        //kapila   27/6/2014
                        _Balance = _salesDAL.GetOutInvAmt(receiptHdr.Sar_com_cd, receiptHdr.Sar_oth_sr, receiptHdr.Sar_debtor_cd, _remsumdet.Rem_rmk);
                    else
                        _Balance = _salesDAL.GetOutInvAmt(receiptHdr.Sar_com_cd, receiptHdr.Sar_profit_center_cd, receiptHdr.Sar_debtor_cd, _remsumdet.Rem_rmk);


                    _getSystemParameter = _salesDAL.GetSystemParameter("COM", receiptHdr.Sar_com_cd, "CRCOMMINAW", receiptHdr.Sar_receipt_date);

                    if (_getSystemParameter.Hsy_cd != null)
                    {
                        _minCommAllow = _getSystemParameter.Hsy_val;
                    }
                    else
                    {
                        _minCommAllow = 0;
                    }

                    if (_Balance <= _minCommAllow)
                    {
                        decimal _wkNo = 0;
                        //get commission amount
                        decimal _commAmt = _salesDAL.GetFinalCreditCommission(_remsumdet.Rem_rmk);

                        //save GNT_REM_SUM 
                        RemitanceSummaryDetail _remDet = new RemitanceSummaryDetail();
                        _remDet.Rem_com = receiptHdr.Sar_com_cd;
                        if (receiptHdr.Sar_is_oth_shop == true)    //kapila  27/6/2014
                            _remDet.Rem_pc = receiptHdr.Sar_oth_sr;
                        else
                            _remDet.Rem_pc = receiptHdr.Sar_profit_center_cd;

                        _remDet.Rem_dt = receiptHdr.Sar_receipt_date;
                        _remDet.Rem_sec = "02";
                        _remDet.Rem_cd = "005";
                        _remDet.Rem_sh_desc = "Group sale comm";
                        _remDet.Rem_lg_desc = "GROUP SALE COMM";
                        _remDet.Rem_val = _commAmt;
                        _remDet.Rem_val_final = _commAmt;
                        int _weekNo = _generalDAL.GetWeek(Convert.ToDateTime(receiptHdr.Sar_receipt_date).Date, out _wkNo, receiptHdr.Sar_com_cd);
                        _remDet.Rem_week = _wkNo + "S";
                        _remDet.Rem_ref_no = receiptHdr.Sar_seq_no.ToString();
                        _remDet.Rem_rmk = _remsumdet.Rem_rmk;
                        _remDet.Rem_cr_acc = null;
                        _remDet.Rem_db_acc = null;
                        _remDet.Rem_del_alw = false;
                        _remDet.Rem_cre_by = receiptHdr.Sar_create_by;
                        _remDet.Rem_cre_dt = receiptHdr.Sar_receipt_date;
                        _remDet.Rem_is_sos = true;
                        _remDet.Rem_is_dayend = true;
                        _remDet.Rem_is_sun = true;
                        _remDet.Rem_cat = 17;
                        _remDet.Rem_add = 0;
                        _remDet.Rem_ded = 0;
                        _remDet.Rem_net = _commAmt;
                        _remDet.Rem_epf = 0;
                        _remDet.Rem_esd = 0;
                        _remDet.Rem_wht = 0;
                        _remDet.Rem_add_fin = 0;
                        _remDet.Rem_ded_fin = 0;
                        _remDet.Rem_net_fin = _commAmt;
                        _remDet.Rem_rmk_fin = _remsumdet.Rem_rmk;
                        _remDet.Rem_bnk_cd = null;
                        _remDet.Rem_is_rem_sum = true;
                        _salesDAL.SaveRemSummaryForFinalCreditComm(_remDet);

                    }
                }

                _salesDAL.TransactionCommit();
                _financialDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _generalDAL.TransactionCommit();

                effect = 1;
                //tr.Complete();
            }
            catch (Exception err)
            {
                effect = -1;
                RtnReceiptNo = "ERROR : " + err.Message.ToString();
                //_plusDocNo = "ERROR : " + err.Message.ToString();
                //_errorList = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();
                _financialDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _generalDAL.TransactionRollback();

            }

            return effect;
        }

        //shanuka on 29/08/2014
        public bool Check_Available_Col_Bonus(string _company, string _profitcenter, string _voucher_no, DateTime _month)
        {
            _salesDAL = new SalesDAL();
            DataTable _tbl = _salesDAL.Check_Available_Col_Bonus(_company, _profitcenter, _voucher_no, _month);
            if (_tbl != null && _tbl.Rows.Count > 0) return true; else return false;
        }

        //shanuka 29/08/2014
        public Int32 Insert_to_Col_bonus(List<Deposit_Bank_Pc_wise> listColl_bonus, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.Insert_to_Col_bonus(listColl_bonus);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;

        }
        public DataTable Load_Recept_details(string _manual_ref_no)
        {
            //shanuka on 01/09/2014

            _salesDAL = new SalesDAL();
            return _salesDAL.Load_Recept_details(_manual_ref_no);

        }

        //shanuka on 01/09/2014
        public bool Check_Available_ProfitCenters(string _usr, string _com, string _profitcenter)
        {
            _salesDAL = new SalesDAL();
            DataTable _tbl = _salesDAL.GetPC_from_Hierachy_Rep(_usr, _com, "", "", "", "", "", _profitcenter);
            if (_tbl != null && _tbl.Rows.Count > 0) return true; else return false;
        }
        public Int32 UpdateToSat_hdr(decimal _anal8, string inv_no, out string _err)
        {
            //shanuka on 02/09/2014


            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.UpdateToSat_hdr(_anal8, inv_no);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;
        }

        public DataTable Load_Default_PriceBook(string com, string prof_cen)
        {
            //shanuka on 03/09/2014

            _salesDAL = new SalesDAL();
            return _salesDAL.Load_Default_PriceBook(com, prof_cen);
        }
        public DataTable Load_Promotion_PriceBook(string com, string prof_cen)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_Promotion_PriceBook(com, prof_cen);
        }
        public DataTable Load_PcWise_PriceBook(string com, string prof_cen)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_PcWise_PriceBook(com, prof_cen);
        }
        public DataTable Load_PcWise_Price_level(string com, string prof_cen, string _pbook)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_PcWise_Price_level(com, prof_cen, _pbook);
        }
        public DataTable Load_Item_dets(string com, string p_lvl, string _pbook)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_Item_dets(com, p_lvl, _pbook);
        }
        public DataTable Check_price_bookDetails(string com, string _prof_center, string p_lvl, string _pbook, string stus)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Check_price_bookDetails(com, _prof_center, p_lvl, _pbook, stus);
        }

        public Int32 Update_To_Parameters(Deposit_Bank_Pc_wise objDefaultpara, Deposit_Bank_Pc_wise objpromotion, out string _err)
        {
            //Shanuka Perera
            int effect = 0;
            _salesDAL = new SalesDAL();
            try
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                Int32 eff = 0;


                string _documentNo = "";
                _err = _documentNo;

                if (objDefaultpara != null)
                    eff = _salesDAL.Update_Default_param(objDefaultpara);


                if (objpromotion != null)
                    eff = _salesDAL.Update_Promo_param(objpromotion);


                _salesDAL.TransactionCommit();


                effect = 1;
                //tr.Complete();
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();

                _salesDAL.TransactionRollback();

            }

            return effect;
        }

        //shanuka 
        public bool Check_Available_Mids(string bankcode, string _mid, int _pun_tp)
        {
            _salesDAL = new SalesDAL();
            DataTable _tbl = _salesDAL.Get_ava_mids(bankcode, _mid, _pun_tp);
            if (_tbl != null && _tbl.Rows.Count > 0) return true; else return false;
        }
        //SHANUKA 
        public DataTable Get_stus_for_mid(string bankcode, string _mid, int _pun_tp)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_ava_mids(bankcode, _mid, _pun_tp);
        }


        //SHANUKA 
        public DataTable Load_mids(string bankcode, int _pun_tp)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_mids(bankcode, _pun_tp);
        }

        //shanuka 
        public Int32 Insert_to_master_mid(Deposit_Bank_Pc_wise _obj_mas_mid, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.Insert_to_master_mid(_obj_mas_mid);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;

        }
        public DataTable GetRegistraionDetails(DateTime _from_date, DateTime _to_date, string _rpt_mode, string _usr, string _com, string pc)
        {   // Shalika
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRegistraionDetails(_from_date, _to_date, _rpt_mode, _usr, _com, pc, "N", "N");
        }


        //shanuka 
        public Int32 Update_to_master_mid(Deposit_Bank_Pc_wise _obj_mas_mid, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.Update_to_master_mid(_obj_mas_mid);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;

        }

        //Tharaka 10-09-2014
        public DataTable Get_buscom_branch_det(string bankcode)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_buscom_branch_det(bankcode);
        }
        //Darshana 10-09-2014
        public DataTable GetAllPCWara(string _com, string _pc, string _itm)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAllPCWara(_com, _pc, _itm);
        }
        //shalika 10/08/2014
        public DataTable getCusInvoiceDetails(string _CusCode)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getCusInvoiceDetails(_CusCode);//gets data for UserControl
        }
        //shanuka 10-09-2014
        public Int32 SaveToMasterPcWiseMid(List<Deposit_Bank_Pc_wise> lst_master_mid, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                //foreach (Deposit_Bank_Pc_wise item in lst_master_mid)
                //{
                //    effect = _salesDAL.SaveToMasterPcWiseMidnew(item);
                //}
                effect = _salesDAL.SaveToMasterPcWiseMid(lst_master_mid);
                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;

        }
        //shanuka 10/09/2014
        public DataTable getMerchantIdDets(int pun_tp)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getMerchantIdDets(pun_tp);
        }
        //shanuka 12/09/2014
        public DataTable getAllMid_Details(string prof_cen)
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("MerchantIDDef") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.getAllMid_Details(prof_cen);
        }
        public DataTable SearchAgreementTrackingData(string prof_cen, string Doc_no, string Pod_no, DateTime Fromdate, DateTime Todate, Int32 From, Int32 To, string ischk)
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("AgeementTrackData") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.SearchAgreementTrackingData(prof_cen, Doc_no, Pod_no, Fromdate, Todate, From, To, ischk);
        }

        //shanuka 16-09-2014
        public Int32 SaveToIssueChqBank(List<Deposit_Bank_Pc_wise> lst_chqBank, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _fmsInventoryDal = new FMS_InventoryDAL();
                _fmsInventoryDal.ConnectionOpen();
                _fmsInventoryDal.BeginTransaction();

                string _documentNo = "";
                _err = _documentNo;
                effect = _fmsInventoryDal.SaveToIssueChqBank(lst_chqBank);
                _fmsInventoryDal.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _fmsInventoryDal.TransactionRollback();

            }
            return effect;

        }

        //shanuka 16-09-2014
        public Int32 SaveToDocPages(List<Deposit_Bank_Pc_wise> lst_docpages, out string _err)
        {
            Int32 effect = 0;
            try
            {

                _fmsInventoryDal = new FMS_InventoryDAL();
                _fmsInventoryDal.ConnectionOpen();
                _fmsInventoryDal.BeginTransaction();

                string _documentNo = "";
                _err = _documentNo;
                effect = _fmsInventoryDal.SaveToDocPages(lst_docpages);
                _fmsInventoryDal.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _fmsInventoryDal.TransactionRollback();

            }
            return effect;

        }
        //shalika 17/09/2014
        public Int32 UpdateToAgreementTracker(List<HPAgreementTracker> listAgreementTracker, string usr, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.UpdateToAgreementTracker(listAgreementTracker, usr);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;
        }
        //shalika 17/09/2014
        public DataTable GetHeadofficeRecdata(string Acc_no)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHeadofficeRecdata(Acc_no);
        }
        //shalika 17/09/2014
        public DataTable LoadOtherClosedTypes(string type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.LoadOtherClosedTypes(type);
        }
        public DataTable Load_cheque_printing_details(string vou)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_cheque_printing_details(vou);
        }
        //shalika 19/09/2014
        public DataTable GetInvoiceItemDetails(string _company, string _profitCenter, string _account)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceItemDetails(_company, _profitCenter, _account);
        }
        //Darshana 19-09-2014
        public DataTable GetTotalCRAmtByInv(string _invNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetTotalCRAmtByInv(_invNo);
        }
        //shanuka 20/09/2014
        public DataTable get_Terms(string com, int puntp, string prof)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.get_Terms(com, puntp, prof);
        }
        //shanuka 20/09/2014
        public DataTable get_mids_forIn(string com, int puntp, string prof, int term)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.get_mids_forIn(com, puntp, prof, term);
        }
        //shanuka 20/09/2014
        public Int32 Update_to_mst_pc_mid(string com, string pc, int puntp, int term, string mid, string creatby, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.Update_to_mst_pc_mid(com, pc, puntp, term, mid, creatby);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;
        }

        //shanuka 25/09/2014
        public DataTable get_unused_doc_report(DateTime from, DateTime to, string profitcen)
        {
            _fmsInventoryDal = new FMS_InventoryDAL();
            return _fmsInventoryDal.get_unused_doc_report(from, to, profitcen);

        }
        //shalika 30/09/2014
        public DataTable get_bank_mid_code(string branch_code, string pc, int mode, int period, DateTime _trdate, string _com)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.get_bank_mid_code(branch_code, pc, mode, period, _trdate, _com);
        }
        public DataTable check_mid_code_Allowed(string _com, string _pc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.check_mid_code_Allowed(_com, _pc);
        }
        //shalika 01/10/2014
        public DataTable LoadTransactionAccounts()
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.LoadTransactionAccounts();


        }
        //shalika 02/10/2014
        public DataTable Load_MID_codes_perAcc(string AccNo, string pc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Load_MID_codes_perAcc(AccNo, pc);


        }

        //shanuka 04-10-2014
        public Int32 SaveToAllocateItems(List<Deposit_Bank_Pc_wise> lst_all_items, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.SaveToAllocateItems(lst_all_items);
                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;

        }
        //shanuka 04-10-2014
        public DataTable getAllAllocateItems_details(string com)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getAllAllocateItems_details(com);
        }
        //shalika 11/10/2014
        public DataTable GetReturnType(string Acc_no)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReturnType(Acc_no);
        }
        //shalika 20/10/2014
        public InvoiceHeader GetInvoiceHeaderDetails_AGR(string _invoiceNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceHeaderDetails_AGR(_invoiceNo);
        }
        //Darshana 27-10-2014
        public GroupBussinessEntity GetCustomerProfileByGrup(string CustCD, string nic, string DL, string PPNo, string brNo, string mobNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCustomerProfileByGrup(CustCD, nic, DL, PPNo, brNo, mobNo);
        }
        //shanuka 23/10/2014
        public DataTable GetAll_Collection_Bonus(string com)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAll_Collection_Bonus(com);
        }

        //SHANUKA on 23-10-2014
        public Int32 UpdateToCollectionBonus(Deposit_Bank_Pc_wise objColBonus, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.UpdateToCollectionBonus(objColBonus);


                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;
        }
        public DataTable GetNotRealizeTransactionDet(string com, string _acc, DateTime _Date, DateTime _from, DateTime _to, string _user, Int32 _isAsAt)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetNotRealizeTransactionDet(com, _acc, _Date, _from, _to, _user, _isAsAt);
        }
        public DataTable PrintExtraAddBankDocs(string com, string _accNo, DateTime _from, DateTime _to, string _user, string _docType)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.PrintExtraAddBankDocs(com, _accNo, _from, _to, _user, _docType);
        }

        public DataTable Realization_Finaliz_sts(string acc, DateTime _fromDate, DateTime _toDate, string _com)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Realization_Finaliz_sts(acc, _fromDate, _toDate, _com);
        }
        //shalika 27/10/2014
        public DataTable LoadUsers()
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.LoadUsers();


        }
        public DataTable Bank_Reconciliation_Rpt(DateTime _Asatdate, string Acc)
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("Bank_Reconciliation_Rpt") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.Bank_Reconciliation_Rpt(_Asatdate, Acc);
        }
        //shanuka 29/10/2014
        public DataTable Get_Bank_Deposit_Slip(string pro, DateTime from, DateTime to)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_Bank_Deposit_Slip(pro, from, to);
        }
        //shanuka 29/10/2014
        public DataTable Get_Receive_Cheque_details(string pro, DateTime from, DateTime to)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_Receive_Cheque_details(pro, from, to);
        }
        //shanuka 29/10/2014
        public string Get_midno(string pro, string sun)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_midno(pro, sun);
        }
        //shalika 30/10/2014
        public DataTable LoadBankAccounts()
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.LoadBankAccounts();

        }

        //Tharaka 2014-11-04
        public DataTable Get_Currect_By_Book(string ITEMCODE, string BOOKNUM, string LOC)
        {
            _fmsInventoryDal = new FMS_InventoryDAL();
            return _fmsInventoryDal.Get_Currect_By_Book(ITEMCODE, BOOKNUM, LOC);
        }

        //subodana 2016-07-26
        public Int32 SavesunAccount(MasterBusinessEntity _businessEntity)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                effect = _salesDAL.SaveSunCustomer(_businessEntity);

                _salesDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
            }

            return effect;
        }

        //darshana 28-10-2014
        public Int32 SaveBusinessEntityDetailWithGroup(MasterBusinessEntity _businessEntity, CustomerAccountRef _account, List<MasterBusinessEntityInfo> bisInfoList, List<BusEntityItem> busItemList, out string customerCD, List<MasterBusinessEntitySalesType> SalesType, Boolean _isExsistCom, Boolean _isGroup, GroupBussinessEntity _groupCus, bool _isTours = true, List<MasterBusinessOfficeEntry> _MstBusOffEntry = null, string addasdriver = "false"
            , string pc = null, CustomsProcedureCodes _cusProCd = null, SupplierWiseNBT _supplierNBT = null)
        {
            Int32 effect = 0;
            int updateeffet = 0;
            try
            {
                //using (TransactionScope _tr = new TransactionScope())

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _generalDAL = new GeneralDAL();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();

                string dummycode = string.Empty;

                if (_isTours)
                {
                    //Added by Prabhath on 04/09/2013
                    _ScmCommonDAL = new SCMCommonDAL();
                    _ScmCommonDAL.ConnectionOpen();
                    _ScmCommonDAL.BeginTransaction();
                }
                else
                {
                    _ToursDAL = new ToursDAL();
                    _ToursDAL.ConnectionOpen();
                    _ToursDAL.BeginTransaction();
                }
                if (_isGroup == true && _isExsistCom == false)
                {
                    customerCD = _businessEntity.Mbe_cd;
                    effect = _salesDAL.SaveBusinessEntityDetailGroup(_groupCus);
                    effect = _salesDAL.SaveBusinessEntityDetail(_businessEntity);
                    //SAVE EXECUTIVE
                    effect = _salesDAL.SaveSunCustomer(_businessEntity);
                    if (_cusProCd != null)
                    {
                        effect = _salesDAL.SaveSalesForecastingDetail(_cusProCd);
                    }
                    _account.Saca_cust_cd = customerCD;
                    if (_account.Saca_crdt_lmt > 0)
                    {
                        _salesDAL.SaveCustomerAccount(_account);
                    }

                    //sales type save
                    if (SalesType != null && SalesType.Count > 0)
                    {
                        foreach (MasterBusinessEntitySalesType sal in SalesType)
                        {
                            sal.Mbsa_cd = customerCD;
                            _salesDAL.SaveCustomerSalesTypesNew(sal);
                            //_salesDAL.SaveCustomerSalesTypes(sal);
                        }
                        //Added by Prabhath on 04/09/2013
                        _ScmCommonDAL.SaveCustomer(_businessEntity);
                    }

                    //kelum : office of entry : 2016-May-04

                    if (_MstBusOffEntry != null && _MstBusOffEntry.Count > 0)
                    {
                        _MstBusOffEntry.ForEach(x => x._mbbo_cd = _businessEntity.Mbe_cd);
                        effect = _generalDAL.SaveCustomerOfficeofEntry(_MstBusOffEntry);
                    }

                    foreach (MasterBusinessEntityInfo bis in bisInfoList)
                    {
                        bis.Mbei_cd = customerCD;
                        _salesDAL.SaveBusinessEntityInfo(bis);
                    }

                    //kapila 8/8/2015
                    foreach (BusEntityItem bitm in busItemList)
                    {
                        bitm.MBII_CD = customerCD;
                        _salesDAL.UpdateSupplierItems(bitm);
                    }
                }
                else if (_isGroup == false && _isExsistCom == false)
                {
                    //Modified by kelum: get the inserted agent code : 2016-May-17
                    if (_businessEntity.Mbe_tp == "S" | _businessEntity.Mbe_tp == "A" | _businessEntity.Mbe_tp == "SUN")
                    {
                        customerCD = _businessEntity.Mbe_cd.ToUpper();
                        _groupCus.Mbg_cd = _businessEntity.Mbe_cd.ToUpper();
                        if (_businessEntity.Mbe_tp == "SUN")
                        {
                            _businessEntity.Mbe_tp = "C";
                        }
                    }


                    else
                    {
                        //new customer
                        MasterAutoNumber _auto = new MasterAutoNumber();
                        //_auto.Aut_cate_cd = _businessEntity.Mbe_cre_pc;//_invoiceHeader.Sah_pc;
                        //_auto.Aut_cate_tp = "PRO";
                        _auto.Aut_moduleid = "CUS";
                        _auto.Aut_number = 0;
                        //_auto.Aut_start_char = "CONT";
                        _auto.Aut_start_char = "XXX";

                        //MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                        //// MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, null, _auto.Aut_modify_dt, _auto.Aut_year);
                        //string _cusNo = _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        //_inventoryDAL.UpdateAutoNumber(_auto);
                        //_businessEntity.Mbe_cd = _cusNo;
                        //_groupCus.Mbg_cd = _cusNo;
                        //customerCD = _cusNo;

                        //MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                        // MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, null, _auto.Aut_modify_dt, _auto.Aut_year);
                        //string _cusNo = _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        //_inventoryDAL.UpdateAutoNumber(_auto);
                        //_businessEntity.Mbe_cd = _cusNo;
                        //_groupCus.Mbg_cd = _cusNo;
                        //customerCD = _cusNo;

                        // Tharindu 2018-05-09 due to the concurrency add oracle seq no
                        int cusdummyseq = _salesDAL.GetCusCreationDummyNo();

                        string _cusNo = _auto.Aut_start_char + "-" + cusdummyseq.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_auto);
                        _businessEntity.Mbe_cd = _cusNo;
                        _groupCus.Mbg_cd = _cusNo;
                        customerCD = _cusNo;

                        dummycode = _cusNo;

                        //dummycode = _cusNo;

                    }
                    effect = _salesDAL.SaveBusinessEntityDetailGroup(_groupCus);
                    effect = _salesDAL.SaveBusinessEntityDetail(_businessEntity);
                    //SAVE EXECUTIVE
                    effect = _salesDAL.SaveSunCustomer(_businessEntity);



                    if (_account != null)
                    {
                        _account.Saca_cust_cd = customerCD;
                        if (_account.Saca_crdt_lmt > 0)
                        {
                            _salesDAL.SaveCustomerAccount(_account);
                        }
                    }


                    //sales type save
                    if (SalesType != null && SalesType.Count > 0)
                    {
                        foreach (MasterBusinessEntitySalesType sal in SalesType)
                        {
                            sal.Mbsa_cd = customerCD;
                            _salesDAL.SaveCustomerSalesTypesNew(sal);
                            //_salesDAL.SaveCustomerSalesTypes(sal);
                        }
                        if (_isTours)
                        {
                            //Added by Prabhath on 04/09/2013
                            _ScmCommonDAL.SaveCustomer(_businessEntity);

                        }
                    }
                    if (bisInfoList != null)
                    {
                        foreach (MasterBusinessEntityInfo bis in bisInfoList)
                        {
                            bis.Mbei_cd = customerCD;
                            _salesDAL.SaveBusinessEntityInfo(bis);
                        }
                    }

                    //kapila 8/8/2015

                    if (busItemList != null)
                    {
                        foreach (BusEntityItem bitm in busItemList)
                        {
                            bitm.MBII_CD = customerCD;
                            _salesDAL.UpdateSupplierItems(bitm);
                        }
                    }

                }
                else
                {
                    customerCD = string.Empty;
                }

                if (addasdriver == "true" && customerCD != "")
                {
                    if (_businessEntity.Mbe_name != null || _businessEntity.Mbe_name != "")
                    {
                        MST_EMPLOYEE_NEW_TBS emp = new MST_EMPLOYEE_NEW_TBS();
                        emp.MEMP_CD = customerCD;
                        emp.MEMP_EPF = customerCD;
                        emp.MEMP_ACT = 1;
                        emp.MEMP_COM_CD = _businessEntity.Mbe_com;
                        emp.MEMP_CRE_BY = _businessEntity.Mbe_cre_by;
                        emp.MEMP_CRE_DT = DateTime.Now;
                        emp.MEMP_LIC_NO = _businessEntity.Mbe_dl_no;
                        emp.MEMP_LIC_EXDT = Convert.ToDateTime(_businessEntity.Mbe_dl_exp_dte);
                        emp.MEMP_TITLE = _businessEntity.MBE_TIT;
                        emp.MEMP_NIC = _businessEntity.Mbe_nic;
                        emp.MEMP_FIRST_NAME = _businessEntity.Mbe_name;
                        emp.MEMP_DOB = _businessEntity.Mbe_dob;
                        emp.MEMP_LAST_NAME = _businessEntity.Mbe_name;
                        emp.MEMP_LIVING_ADD_1 = _businessEntity.Mbe_add1;
                        emp.MEMP_LIVING_ADD_2 = _businessEntity.Mbe_add2;
                        emp.MEMP_TEL_HOME_NO = _businessEntity.Mbe_tel;
                        emp.MEMP_EMAIL = _businessEntity.Mbe_email;
                        emp.MEMP_MOBI_NO = _businessEntity.Mbe_mob;
                        emp.MEMP_CAT_CD = "DRIVER";
                        emp.MEMP_CAT_SUBCD = "External";
                        Int32 ret = _ToursDAL.SaveEmployeeData(emp);
                        if (ret > 0)
                        {
                            MST_PCEMP pcemp = new MST_PCEMP();
                            pcemp.MPE_EPF = emp.MEMP_CD;
                            pcemp.MPE_COM = emp.MEMP_COM_CD;
                            pcemp.MPE_PC = pc;
                            pcemp.MPE_ASSN_DT = DateTime.Now;
                            pcemp.MPE_ACT = 1;
                            _ToursDAL.SavePcemp(pcemp);
                        }
                    }
                }

                //if (_businessEntity.Mbe_cd == null || _businessEntity.Mbe_cd == null)
                //{

                //    //new customer
                //    MasterAutoNumber _auto = new MasterAutoNumber();
                //    //_auto.Aut_cate_cd = _businessEntity.Mbe_cre_pc;//_invoiceHeader.Sah_pc;
                //    //_auto.Aut_cate_tp = "PRO";
                //    _auto.Aut_moduleid = "CUS";
                //    _auto.Aut_number = 0;
                //    _auto.Aut_start_char = "CONT";

                //    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                //    // MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, null, _auto.Aut_modify_dt, _auto.Aut_year);
                //    string _cusNo = _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                //    _inventoryDAL.UpdateAutoNumber(_auto);
                //    _businessEntity.Mbe_cd = _cusNo;

                //    customerCD = _cusNo;
                //    effect = _salesDAL.SaveBusinessEntityDetail(_businessEntity);

                //    _account.Saca_cust_cd = customerCD;
                //    if (_account.Saca_crdt_lmt > 0)
                //    {
                //        _salesDAL.SaveCustomerAccount(_account);
                //    }

                //    //sales type save
                //    if (SalesType != null && SalesType.Count > 0)
                //    {
                //        foreach (MasterBusinessEntitySalesType sal in SalesType)
                //        {
                //            sal.Mbsa_cd = customerCD;
                //            _salesDAL.SaveCustomerSalesTypes(sal);
                //        }
                //        //Added by Prabhath on 04/09/2013
                //        _ScmCommonDAL.SaveCustomer(_businessEntity);
                //    }

                //    foreach (MasterBusinessEntityInfo bis in bisInfoList)
                //    {
                //        bis.Mbei_cd = customerCD;
                //        _salesDAL.SaveBusinessEntityInfo(bis);
                //    }
                //}
                //else
                //{
                //    customerCD = string.Empty;
                //}
                //_salesDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                if (_supplierNBT != null && !string.IsNullOrEmpty(_supplierNBT.MBIT_COM))
                {
                    effect = _salesDAL.SupplierNBT(_supplierNBT);
                }

                // Tharindu;
                if (_isGroup == false && _isExsistCom == false) // newly add
                {

                    MasterAutoNumber _auto1 = new MasterAutoNumber();
                    _auto1.Aut_moduleid = "CUS";
                    _auto1.Aut_number = 0;
                    _auto1.Aut_start_char = "CONT";

                    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto1.Aut_moduleid, _auto1.Aut_direction, _auto1.Aut_start_char, _auto1.Aut_cate_tp, _auto1.Aut_cate_cd, _auto1.Aut_modify_dt, _auto1.Aut_year);

                    string _cusNo1 = _auto1.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_auto1);
                    _businessEntity.Mbe_cd = _cusNo1;
                    _groupCus.Mbg_cd = _cusNo1;
                    customerCD = _cusNo1;

                    updateeffet = _salesDAL.UpdateCusCode(dummycode, _cusNo1);
                }
                ////
                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                if (_isTours)
                {
                    //Added by Prabhath on 04/09/2013
                    _ScmCommonDAL.TransactionCommit();
                }
                else
                {
                    _ToursDAL.TransactionCommit();
                }
                _generalDAL.TransactionCommit();
                //  _tr.Complete();

            }
            catch (Exception ex)
            {
                customerCD = string.Empty;
                customerCD = "ERROR : " + ex.Message.ToString();
                //  return -1;
                effect = -1;

                if (ex.Message.Contains("EMS.PK_MBECD"))
                {
                    customerCD = "Please Try Again Later";
                }

                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                if (_isTours)
                {
                    _ScmCommonDAL.TransactionRollback();
                }
                else
                {
                    _ToursDAL.TransactionRollback();
                }
                _generalDAL.TransactionRollback();

            }

            return effect;
        }

        //subodana
        public Int32 SaveBusinessEntityDetailWithGroupNew2(MasterBusinessEntity _businessEntity, CustomerAccountRef _account, List<MasterBusinessEntityInfo> bisInfoList, List<BusEntityItem> busItemList, out string customerCD, List<MasterBusinessEntitySalesType> SalesType, Boolean _isExsistCom, Boolean _isGroup, GroupBussinessEntity _groupCus, bool _isTours = true, List<MasterBusinessOfficeEntry> _MstBusOffEntry = null, string addasdriver = "false"
    , string pc = null, CustomsProcedureCodes _cusProCd = null)
        {
            Int32 effect = 0;
            try
            {
                //using (TransactionScope _tr = new TransactionScope())

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _generalDAL = new GeneralDAL();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();

                if (_isTours)
                {
                    //Added by Prabhath on 04/09/2013
                    _ScmCommonDAL = new SCMCommonDAL();
                    _ScmCommonDAL.ConnectionOpen();
                    _ScmCommonDAL.BeginTransaction();
                }
                else
                {
                    _ToursDAL = new ToursDAL();
                    _ToursDAL.ConnectionOpen();
                    _ToursDAL.BeginTransaction();
                }
                if (_isGroup == true && _isExsistCom == false)
                {
                    customerCD = _businessEntity.Mbe_cd;
                    effect = _salesDAL.SaveBusinessEntityDetailGroup(_groupCus);
                    effect = _salesDAL.SaveBusinessEntityDetailNew(_businessEntity);
                    //SAVE EXECUTIVE
                    effect = _salesDAL.SaveSunCustomer(_businessEntity);
                    if (_cusProCd != null)
                    {
                        effect = _salesDAL.SaveSalesForecastingDetail(_cusProCd);
                    }
                    _account.Saca_cust_cd = customerCD;
                    if (_account.Saca_crdt_lmt > 0)
                    {
                        _salesDAL.SaveCustomerAccount(_account);
                    }

                    //sales type save
                    if (SalesType != null && SalesType.Count > 0)
                    {
                        foreach (MasterBusinessEntitySalesType sal in SalesType)
                        {
                            sal.Mbsa_cd = customerCD;
                            _salesDAL.SaveCustomerSalesTypes(sal);
                        }
                        //Added by Prabhath on 04/09/2013
                        _ScmCommonDAL.SaveCustomer(_businessEntity);
                    }

                    //kelum : office of entry : 2016-May-04

                    if (_MstBusOffEntry != null && _MstBusOffEntry.Count > 0)
                    {
                        _MstBusOffEntry.ForEach(x => x._mbbo_cd = _businessEntity.Mbe_cd);
                        effect = _generalDAL.SaveCustomerOfficeofEntry(_MstBusOffEntry);
                    }

                    foreach (MasterBusinessEntityInfo bis in bisInfoList)
                    {
                        bis.Mbei_cd = customerCD;
                        _salesDAL.SaveBusinessEntityInfo(bis);
                    }

                    //kapila 8/8/2015
                    foreach (BusEntityItem bitm in busItemList)
                    {
                        bitm.MBII_CD = customerCD;
                        _salesDAL.UpdateSupplierItems(bitm);
                    }
                }
                else if (_isGroup == false && _isExsistCom == false)
                {
                    //Modified by kelum: get the inserted agent code : 2016-May-17
                    if (_businessEntity.Mbe_tp == "S" | _businessEntity.Mbe_tp == "A" | _businessEntity.Mbe_tp == "SUN")
                    {
                        customerCD = _businessEntity.Mbe_cd.ToUpper();
                        _groupCus.Mbg_cd = _businessEntity.Mbe_cd.ToUpper();
                        if (_businessEntity.Mbe_tp == "SUN")
                        {
                            _businessEntity.Mbe_tp = "C";
                        }
                    }


                    else
                    {
                        //new customer
                        MasterAutoNumber _auto = new MasterAutoNumber();
                        //_auto.Aut_cate_cd = _businessEntity.Mbe_cre_pc;//_invoiceHeader.Sah_pc;
                        //_auto.Aut_cate_tp = "PRO";
                        _auto.Aut_moduleid = "CUS";
                        _auto.Aut_number = 0;
                        _auto.Aut_start_char = "CONT";

                        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                        // MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, null, _auto.Aut_modify_dt, _auto.Aut_year);
                        string _cusNo = _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_auto);
                        _businessEntity.Mbe_cd = _cusNo;
                        _groupCus.Mbg_cd = _cusNo;
                        customerCD = _cusNo;
                    }
                    effect = _salesDAL.SaveBusinessEntityDetailGroup(_groupCus);
                    effect = _salesDAL.SaveBusinessEntityDetail(_businessEntity);
                    //SAVE EXECUTIVE
                    effect = _salesDAL.SaveSunCustomer(_businessEntity);



                    if (_account != null)
                    {
                        _account.Saca_cust_cd = customerCD;
                        if (_account.Saca_crdt_lmt > 0)
                        {
                            _salesDAL.SaveCustomerAccount(_account);
                        }
                    }


                    //sales type save
                    if (SalesType != null && SalesType.Count > 0)
                    {
                        foreach (MasterBusinessEntitySalesType sal in SalesType)
                        {
                            sal.Mbsa_cd = customerCD;
                            _salesDAL.SaveCustomerSalesTypes(sal);
                        }
                        if (_isTours)
                        {
                            //Added by Prabhath on 04/09/2013
                            _ScmCommonDAL.SaveCustomer(_businessEntity);

                        }
                    }
                    if (bisInfoList != null)
                    {
                        foreach (MasterBusinessEntityInfo bis in bisInfoList)
                        {
                            bis.Mbei_cd = customerCD;
                            _salesDAL.SaveBusinessEntityInfo(bis);
                        }
                    }

                    //kapila 8/8/2015

                    if (busItemList != null)
                    {
                        foreach (BusEntityItem bitm in busItemList)
                        {
                            bitm.MBII_CD = customerCD;
                            _salesDAL.UpdateSupplierItems(bitm);
                        }
                    }

                }
                else
                {
                    customerCD = string.Empty;
                }

                if (addasdriver == "true" && customerCD != "")
                {
                    if (_businessEntity.Mbe_name != null || _businessEntity.Mbe_name != "")
                    {
                        MST_EMPLOYEE_NEW_TBS emp = new MST_EMPLOYEE_NEW_TBS();
                        emp.MEMP_CD = customerCD;
                        emp.MEMP_EPF = customerCD;
                        emp.MEMP_ACT = 1;
                        emp.MEMP_COM_CD = _businessEntity.Mbe_com;
                        emp.MEMP_CRE_BY = _businessEntity.Mbe_cre_by;
                        emp.MEMP_CRE_DT = DateTime.Now;
                        emp.MEMP_LIC_NO = _businessEntity.Mbe_dl_no;
                        emp.MEMP_LIC_EXDT = Convert.ToDateTime(_businessEntity.Mbe_dl_exp_dte);
                        emp.MEMP_TITLE = _businessEntity.MBE_TIT;
                        emp.MEMP_NIC = _businessEntity.Mbe_nic;
                        emp.MEMP_FIRST_NAME = _businessEntity.Mbe_name;
                        emp.MEMP_DOB = _businessEntity.Mbe_dob;
                        emp.MEMP_LAST_NAME = _businessEntity.Mbe_name;
                        emp.MEMP_LIVING_ADD_1 = _businessEntity.Mbe_add1;
                        emp.MEMP_LIVING_ADD_2 = _businessEntity.Mbe_add2;
                        emp.MEMP_TEL_HOME_NO = _businessEntity.Mbe_tel;
                        emp.MEMP_EMAIL = _businessEntity.Mbe_email;
                        emp.MEMP_MOBI_NO = _businessEntity.Mbe_mob;
                        emp.MEMP_CAT_CD = "DRIVER";
                        emp.MEMP_CAT_SUBCD = "External";
                        Int32 ret = _ToursDAL.SaveEmployeeData(emp);
                        if (ret > 0)
                        {
                            MST_PCEMP pcemp = new MST_PCEMP();
                            pcemp.MPE_EPF = emp.MEMP_CD;
                            pcemp.MPE_COM = emp.MEMP_COM_CD;
                            pcemp.MPE_PC = pc;
                            pcemp.MPE_ASSN_DT = DateTime.Now;
                            pcemp.MPE_ACT = 1;
                            _ToursDAL.SavePcemp(pcemp);
                        }
                    }
                }

                //if (_businessEntity.Mbe_cd == null || _businessEntity.Mbe_cd == null)
                //{

                //    //new customer
                //    MasterAutoNumber _auto = new MasterAutoNumber();
                //    //_auto.Aut_cate_cd = _businessEntity.Mbe_cre_pc;//_invoiceHeader.Sah_pc;
                //    //_auto.Aut_cate_tp = "PRO";
                //    _auto.Aut_moduleid = "CUS";
                //    _auto.Aut_number = 0;
                //    _auto.Aut_start_char = "CONT";

                //    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                //    // MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, null, _auto.Aut_modify_dt, _auto.Aut_year);
                //    string _cusNo = _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                //    _inventoryDAL.UpdateAutoNumber(_auto);
                //    _businessEntity.Mbe_cd = _cusNo;

                //    customerCD = _cusNo;
                //    effect = _salesDAL.SaveBusinessEntityDetail(_businessEntity);

                //    _account.Saca_cust_cd = customerCD;
                //    if (_account.Saca_crdt_lmt > 0)
                //    {
                //        _salesDAL.SaveCustomerAccount(_account);
                //    }

                //    //sales type save
                //    if (SalesType != null && SalesType.Count > 0)
                //    {
                //        foreach (MasterBusinessEntitySalesType sal in SalesType)
                //        {
                //            sal.Mbsa_cd = customerCD;
                //            _salesDAL.SaveCustomerSalesTypes(sal);
                //        }
                //        //Added by Prabhath on 04/09/2013
                //        _ScmCommonDAL.SaveCustomer(_businessEntity);
                //    }

                //    foreach (MasterBusinessEntityInfo bis in bisInfoList)
                //    {
                //        bis.Mbei_cd = customerCD;
                //        _salesDAL.SaveBusinessEntityInfo(bis);
                //    }
                //}
                //else
                //{
                //    customerCD = string.Empty;
                //}
                //_salesDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                if (_isTours)
                {
                    //Added by Prabhath on 04/09/2013
                    _ScmCommonDAL.TransactionCommit();
                }
                else
                {
                    _ToursDAL.TransactionCommit();
                }
                _generalDAL.TransactionCommit();
                //  _tr.Complete();

            }
            catch (Exception ex)
            {
                customerCD = string.Empty;
                customerCD = "ERROR : " + ex.Message.ToString();
                //  return -1;
                effect = -1;

                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                if (_isTours)
                {
                    _ScmCommonDAL.TransactionRollback();
                }
                else
                {
                    _ToursDAL.TransactionRollback();
                }
                _generalDAL.TransactionRollback();

            }

            return effect;
        }

        //darshana 28-10-2014
        public Int32 UpdateBusinessEntityProfileWithGroup(MasterBusinessEntity _businessEntity, string modby, DateTime modDate, Decimal Newcredlimit, List<MasterBusinessEntityInfo> bisInfoList, List<MasterBusinessEntitySalesType> _salesTypes, List<BusEntityItem> busItemList, GroupBussinessEntity _grupCust, List<MasterBusinessOfficeEntry> _MstBusOffEntry = null, SupplierWiseNBT _supplierNBT = null, CustomerAccountRef _custAccount = null)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            _generalDAL = new GeneralDAL();
            _generalDAL.ConnectionOpen();

            Int32 effect = -1;
            effect = _salesDAL.SaveBusinessEntityDetailGroup(_grupCust);
            effect = _salesDAL.UpdateBusinessEntityProfile(_businessEntity, 1);

            //updated by akila 2017/10/28
            if (_custAccount != null && !string.IsNullOrEmpty(_custAccount.Saca_cust_cd))
            {
                if (_custAccount.Saca_crdt_lmt > 0)
                {
                    _salesDAL.SaveCustomerAccount(_custAccount);
                }
            }
            else
            {
                effect = effect + _salesDAL.UpdateCustomerCreditLimit(_businessEntity.Mbe_com, _businessEntity.Mbe_cd, modby, modDate, Newcredlimit);
            }


            if (bisInfoList != null)
            {
                foreach (MasterBusinessEntityInfo bis in bisInfoList)
                {
                    bis.Mbei_cd = _businessEntity.Mbe_cd;
                    effect = effect + _salesDAL.UpdateBusinessEntityInfo(bis);
                }
            }

            //kapila 8/8/2015
            if (busItemList != null)
            {
                foreach (BusEntityItem bitm in busItemList)
                {
                    bitm.MBII_CD = _businessEntity.Mbe_cd; ;
                    _salesDAL.UpdateSupplierItems(bitm);
                }
            }

            if (_salesTypes != null && _salesTypes.Count > 0)
            {
                //string _type = "";
                //_salesTypes[0].Mbsa_cd = _businessEntity.Mbe_cd;
                foreach (MasterBusinessEntitySalesType _sal in _salesTypes)
                {
                    _sal.Mbsa_cd = _businessEntity.Mbe_cd;
                    _salesDAL.SaveCustomerSalesTypesNew(_sal); //Add by akila 2017/10/26
                    //_type = _type + "," + _sal.Mbsa_sa_tp;
                }
                //_type = _type.Substring(1, _type.Length - 1);                
                //_salesDAL.UpdateCustomerSalesTypes(_salesTypes[0], _type);

            }
            else
            {
                MasterBusinessEntitySalesType _sal = new MasterBusinessEntitySalesType();
                _sal.Mbsa_com = _businessEntity.Mbe_com;
                _sal.Mbsa_cd = _businessEntity.Mbe_cd;
                _salesDAL.UpdateCustomerSalesTypes(_sal, "");
            }

            //kelum : update office of entry : 2016-May-04

            if (_MstBusOffEntry != null && _MstBusOffEntry.Count > 0)
            {
                _MstBusOffEntry.ForEach(x => x._mbbo_cd = _businessEntity.Mbe_cd);
                effect = _generalDAL.SaveCustomerOfficeofEntry(_MstBusOffEntry);
            }
            if (_supplierNBT != null)
            {
                effect = _salesDAL.SupplierNBT(_supplierNBT);
            }
            _salesDAL.ConnectionClose();

            _generalDAL.ConnectionClose();

            return effect;
        }


        //subodana
        public Int32 UpdateBusinessEntityProfileWithGroupNeww(MasterBusinessEntity _businessEntity, CustomerAccountRef _account, string modby, DateTime modDate, Decimal Newcredlimit, List<MasterBusinessEntityInfo> bisInfoList, List<MasterBusinessEntitySalesType> _salesTypes, List<BusEntityItem> busItemList, GroupBussinessEntity _grupCust
            , List<MasterBusinessOfficeEntry> _MstBusOffEntry = null, CustomsProcedureCodes _cusProcCd = null)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            _generalDAL = new GeneralDAL();
            _generalDAL.ConnectionOpen();
            string customerCD = _businessEntity.Mbe_cd;
            Int32 effect = -1;
            effect = _salesDAL.SaveBusinessEntityDetailGroup(_grupCust);
            effect = _salesDAL.UpdateBusinessEntityProfilenew(_businessEntity, 1);
            effect = _salesDAL.SaveSunCustomer(_businessEntity);
            effect = effect + _salesDAL.UpdateCustomerCreditLimit(_businessEntity.Mbe_com, _businessEntity.Mbe_cd, modby, modDate, Newcredlimit);
            if (_cusProcCd != null)
            {
                effect = _salesDAL.SaveSalesForecastingDetail(_cusProcCd);
            }
            if (bisInfoList != null)
            {
                foreach (MasterBusinessEntityInfo bis in bisInfoList)
                {
                    bis.Mbei_cd = _businessEntity.Mbe_cd;
                    effect = effect + _salesDAL.UpdateBusinessEntityInfo(bis);
                }
            }
            _account.Saca_cust_cd = customerCD;
            if (_account.Saca_crdt_lmt > 0)
            {
                _salesDAL.SaveCustomerAccount(_account);
            }
            //kapila 8/8/2015
            if (busItemList != null)
            {
                foreach (BusEntityItem bitm in busItemList)
                {
                    bitm.MBII_CD = _businessEntity.Mbe_cd; ;
                    _salesDAL.UpdateSupplierItems(bitm);
                }
            }
            if (_MstBusOffEntry != null && _MstBusOffEntry.Count > 0)
            {
                _MstBusOffEntry.ForEach(x => x._mbbo_cd = _businessEntity.Mbe_cd);
                effect = _generalDAL.SaveCustomerOfficeofEntry(_MstBusOffEntry);
            }
            if (_salesTypes != null && _salesTypes.Count > 0)
            {
                string _type = "";
                _salesTypes[0].Mbsa_cd = _businessEntity.Mbe_cd;
                foreach (MasterBusinessEntitySalesType _sal in _salesTypes)
                {
                    _type = _type + "," + _sal.Mbsa_sa_tp;
                    _salesDAL.SaveCustomerSalesTypesNew(_sal);
                }
                _type = _type.Substring(1, _type.Length - 1);
                //_salesDAL.UpdateCustomerSalesTypes(_salesTypes[0], _type);

            }
            else
            {
                MasterBusinessEntitySalesType _sal = new MasterBusinessEntitySalesType();
                _sal.Mbsa_com = _businessEntity.Mbe_com;
                _sal.Mbsa_cd = _businessEntity.Mbe_cd;
                _salesDAL.UpdateCustomerSalesTypes(_sal, "");
            }

            //kelum : update office of entry : 2016-May-04

            if (_MstBusOffEntry != null && _MstBusOffEntry.Count > 0)
            {
                _MstBusOffEntry.ForEach(x => x._mbbo_cd = _businessEntity.Mbe_cd);
                effect = _generalDAL.SaveCustomerOfficeofEntry(_MstBusOffEntry);
            }

            _salesDAL.ConnectionClose();

            _generalDAL.ConnectionClose();

            return effect;
        }
        public HPAccountLog GetHpAccLogByTP(string _acc, string _tp)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHpAccLogByTP(_acc, _tp);
        }
        //darshana 28-10-2014
        public Int32 UpdateBusinessEntityProfileWithGroupWithPermission(MasterBusinessEntity _businessEntity, string modby, DateTime modDate, Decimal Newcredlimit, List<MasterBusinessEntityInfo> bisInfoList, List<MasterBusinessEntitySalesType> _salesTypes, GroupBussinessEntity _grupCust)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int32 effect = -1;
            effect = _salesDAL.UpdateBusinessEntityProfile(_businessEntity, 1);
            effect = _salesDAL.UpdateEntityDetailGroupWithPermission(_grupCust);
            effect = effect + _salesDAL.UpdateCustomerCreditLimit(_businessEntity.Mbe_com, _businessEntity.Mbe_cd, modby, modDate, Newcredlimit);

            foreach (MasterBusinessEntityInfo bis in bisInfoList)
            {
                bis.Mbei_cd = _businessEntity.Mbe_cd;
                effect = effect + _salesDAL.UpdateBusinessEntityInfo(bis);
            }
            if (_salesTypes != null && _salesTypes.Count > 0)
            {
                string _type = "";
                _salesTypes[0].Mbsa_cd = _businessEntity.Mbe_cd;
                foreach (MasterBusinessEntitySalesType _sal in _salesTypes)
                {
                    _type = _type + "," + _sal.Mbsa_sa_tp;
                }
                _type = _type.Substring(1, _type.Length - 1);
                _salesDAL.UpdateCustomerSalesTypes(_salesTypes[0], _type);

            }
            else
            {
                MasterBusinessEntitySalesType _sal = new MasterBusinessEntitySalesType();
                _sal.Mbsa_com = _businessEntity.Mbe_com;
                _sal.Mbsa_cd = _businessEntity.Mbe_cd;
                _salesDAL.UpdateCustomerSalesTypes(_sal, "");
            }

            _salesDAL.ConnectionClose();
            return effect;
        }

        //Tharaka 2014-12-03
        public Int32 ServiceInvoiceSave(InvoiceHeader _invoiceHeader, List<Service_Confirm_detail> _confirmDetails, List<InvoiceItem> _invoiceItem, List<InvoiceSerial> _invoiceSerial, RecieptHeader _recieptHeader, List<RecieptItem> _recieptItem, InventoryHeader _inventoryHeader, List<ReptPickSerials> _pickSerial, List<ReptPickSerialsSub> _pickSubSerial, MasterAutoNumber _invoiceAuto, MasterAutoNumber _recieptAuto, MasterAutoNumber _inventoryAuto, bool _isDeliveryNow, out  string _invoiceNo, out string _receiptNo, out string _deliveryOrder, MasterBusinessEntity _businessCompany, bool _isHold, bool _isHoldInvoiceProcess, out string _errorlist, MasterAutoNumber _aodAuto, RCC _rcc, Boolean _isRcc, Boolean _isstockUpdate, InventoryHeader _aodHdr, List<ReptPickSerials> _reptPickSerialsAod, List<scv_agr_payshed> _lstShed, out string ADONumber, out string _scvreq,
               Service_Req_Hdr _jobHdrnew = null, List<Service_Req_Det> _jobItems = null, List<Service_free_det> _Service_free_detlist = null,
            List<Service_Req_Def> _jobDefList = null, List<Service_Req_Det_Sub> _jobDetSubList = null, MasterAutoNumber _recAuto = null,
            string _sbChnlnew = null, string _itemType = null, string _brandnew = null, Int32 _warStus = 0, MasterAutoNumber _masterAutonew = null,
           Int32 _isProcess = 0)
        {
            string _invNo = string.Empty;
            string _recNo = string.Empty;
            string _DONo = string.Empty;
            string _error = string.Empty;
            string _scvreq_no = string.Empty;
            Int32 _effect = 0;
            ADONumber = string.Empty;
            bool DeliveryNow = true;
            Boolean _aodneedrcc = false;

            try
            {

                // asign invoice item list And pick Serial list
                _invoiceItem = new List<InvoiceItem>();
                _pickSerial = new List<ReptPickSerials>();

                string _buybackinv = string.Empty;
                string _location = string.Empty;
                string _db = string.Empty;
                MasterAutoNumber _auto = null;
                bool _VoucherPromotion = false;

                _CustServiceDAL = new CustServiceDAL();
                _CustServiceDAL.ConnectionOpen();
                _CustServiceDAL.BeginTransaction();

                _db = DataBase._ems;

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _db = DataBase._ems;
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _db = DataBase._fms;
                _fmsInventoryDal = new FMS_InventoryDAL();
                _fmsInventoryDal.ConnectionOpen();
                _fmsInventoryDal.BeginTransaction();

                _db = DataBase._reportdb;
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                _db = DataBase._ems;
                _generalDAL = new GeneralDAL();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();

                Service_Chanal_parameter oChnlPara = _generalDAL.GetChannelParamers(_invoiceHeader.Sah_com, _inventoryHeader.Ith_loc);
                if (oChnlPara.SP_ISNEEDGATEPASS == 1)
                {
                    //continue;
                    DeliveryNow = false;
                }
                int LogCount = 0;
                foreach (Service_Confirm_detail item in _confirmDetails)
                {
                    #region MyRegion
                    //_inventoryDAL = new InventoryDAL();
                    //_CustServiceDAL = new CustServiceDAL();
                    //_generalDAL = new GeneralDAL();
                    _inventoryHeader.Ith_job_no = item.Jcd_jobno;
                    List<Service_job_Det> oJobitms = new List<Service_job_Det>();
                    oJobitms = _CustServiceDAL.GetJobDetails(item.Jcd_jobno, item.Jcd_joblineno, _invoiceHeader.Sah_com);

                    Service_job_Det JobDetailLine;
                    if (oJobitms.Count > 0)
                    {
                        JobDetailLine = oJobitms[0];
                    }
                    else
                    {
                        JobDetailLine = new Service_job_Det();
                    }

                    InvoiceItem _tempItem = new InvoiceItem();
                    _tempItem.Sad_alt_itm_cd = "";
                    _tempItem.Sad_alt_itm_desc = item.Jcd_itmdesc; //updated by akila 2017/06/28
                    //_tempItem.Sad_alt_itm_desc = "";
                    _tempItem.Sad_comm_amt = 0;
                    _tempItem.Sad_disc_amt = item.Jcd_dis;
                    _tempItem.Sad_disc_rt = item.Jcd_dis_rt;
                    if (item.Jcd_itmtp == "V")
                    {
                        _tempItem.Sad_do_qty = item.Jcd_qty;
                    }
                    else
                    {
                        if (DeliveryNow == true)
                        {
                            _tempItem.Sad_do_qty = item.Jcd_qty;
                        }
                        else
                        {
                            _tempItem.Sad_do_qty = 0;
                        }

                    }

                    _tempItem.Sad_inv_no = "";
                    //_tempItem.Sad_is_promo = _isPromotion;
                    _tempItem.Sad_itm_cd = item.Jcd_itmcd;
                    _tempItem.Sad_itm_line = _confirmDetails.IndexOf(item) + 1;
                    _tempItem.Sad_itm_seq = item.Jcd_pbitmseqno;
                    _tempItem.Sad_itm_stus = item.Jcd_itmstus;
                    _tempItem.Sad_itm_tax_amt = item.Jcd_tax;
                    //_tempItem.Sad_itm_tp = item.
                    _tempItem.Sad_job_no = item.Jcd_jobno;
                    _tempItem.Sad_res_line_no = 0;
                    _tempItem.Sad_res_no = item.Jcd_no;

                    //if (_proVouInvcItem == txtItem.Text.ToString())
                    //{
                    //    if (string.IsNullOrEmpty(lblPromoVouUsedFlag.Text))
                    //    {
                    //        lblPromoVouUsedFlag.Text = "U";
                    //        _proVouInvcLine = _lineNo;
                    //        _tempItem.Sad_res_line_no = Convert.ToInt32(lblPromoVouNo.Text.ToString());
                    //        _tempItem.Sad_res_no = "PROMO_VOU";
                    //    }
                    //}

                    _tempItem.Sad_merge_itm = "";
                    _tempItem.Sad_pb_lvl = item.Jcd_pblvl;
                    _tempItem.Sad_pb_price = item.Jcd_pbprice;
                    _tempItem.Sad_pbook = item.Jcd_pb;
                    //_tempItem.Sad_print_stus = false;
                    //_tempItem.Sad_promo_cd = SSPromotionCode;
                    _tempItem.Sad_qty = item.Jcd_qty;
                    _tempItem.Sad_seq = item.Jcd_pbseqno;
                    _tempItem.Sad_seq_no = 0;
                    _tempItem.Sad_srn_qty = 0;
                    _tempItem.Sad_tot_amt = item.Jcd_net_amt;
                    _tempItem.Sad_unit_amt = item.Jcd_unitprice * item.Jcd_qty;
                    _tempItem.Sad_unit_rt = item.Jcd_unitprice;
                    _tempItem.Sad_uom = "";
                    _tempItem.Sad_warr_based = false;
                    _tempItem.Sad_print_stus = item.IsPRint;

                    MasterItem itemDetails = _inventoryDAL.GetItem(_invoiceHeader.Sah_com, item.Jcd_itmcd);

                    if (item.IsNewRecord == "N")
                    {
                        _tempItem.Sad_warr_period = 0;
                        _tempItem.Sad_warr_remarks = "";
                    }
                    else
                    {
                        _tempItem.Sad_warr_period = item.WarrantyRepirod;
                        _tempItem.Sad_warr_remarks = item.WarrantyRemark;
                    }

                    _tempItem.Mi_longdesc = item.Jcd_itmcd_DESC;
                    _tempItem.Mi_itm_tp = item.Jcd_itmtp;
                    _tempItem.Mi_brand = item.Jcd_itmbrand;
                    _tempItem.Mi_cate_1 = (itemDetails.Mi_cate_1 == null) ? string.Empty : itemDetails.Mi_cate_1;
                    _tempItem.Mi_cate_2 = (itemDetails.Mi_cate_2 == null) ? string.Empty : itemDetails.Mi_cate_2;
                    _tempItem.Sad_job_line = item.Jcd_joblineno;
                    _tempItem.Sad_sim_itm_cd = item.Jcd_itmcd;

                    //_tempItem.Sad_merge_itm = itemDetails.Mi_itm_tp!= "M" ? "0" : Convert.ToString(SSPRomotionType);
                    //if (Convert.ToDecimal(item.Jcd_dis) > 0 && GeneralDiscount != null) 
                    //    {
                    //        _tempItem.Sad_dis_type = "M"; 
                    //        _tempItem.Sad_dis_seq = GeneralDiscount.Sgdd_seq;
                    //        _tempItem.Sad_dis_line = 0; 
                    //    }
                    if (item.PrintCode != null && item.PrintCode != "")
                    {
                        _tempItem.Sad_alt_itm_cd = item.PrintCode;
                        //_inventoryDAL = new InventoryDAL();
                        MasterItem itemDetails2 = _inventoryDAL.GetItem(_invoiceHeader.Sah_com, item.PrintCode);
                        if (itemDetails2 != null && itemDetails2.Mi_cd != null)
                        {
                            _tempItem.Sad_alt_itm_desc = itemDetails2.Mi_longdesc;
                            _tempItem.Sad_merge_itm = item.PrintCode;
                        }
                        else
                        {
                            _tempItem.Sad_alt_itm_desc = item.PrintCode;
                        }
                    }
                    _tempItem.Sad_merge_itm = item.Jcd_mainitmcd;

                    _tempItem.Sad_conf_no = item.Jcd_no;
                    _tempItem.Sad_conf_line = item.Jcd_line;

                    _invoiceItem.Add(_tempItem);

                    if (LogCount == 0)
                    {
                        Service_Job_StageLog oLog = new Service_Job_StageLog();
                        DataTable _dtJobHdr = _CustServiceDAL.sp_get_job_hdrby_jobno(item.Jcd_jobno);
                        DataTable _dtPend = _CustServiceDAL.GetPendingAcceptanceStatus(_invoiceHeader.Sah_com, _inventoryHeader.Ith_loc, _dtJobHdr.Rows[0]["SJB_JOBCAT"].ToString());
                        if (_dtPend.Rows.Count > 0)
                        {
                            if (Convert.ToDecimal(_dtPend.Rows[0]["scs_pend_accept"]) == 1)
                            {
                                oLog.SJL_JOBSTAGE = Convert.ToDecimal(7.9);
                            }
                            else
                            {
                                oLog.SJL_JOBSTAGE = 8;
                            }
                        }
                        else
                        {
                            oLog.SJL_JOBSTAGE = 8;
                        }
                        oLog.SJL_REQNO = "";
                        oLog.SJL_JOBNO = item.Jcd_jobno;
                        oLog.SJL_JOBLINE = item.Jcd_joblineno;
                        oLog.SJL_COM = _invoiceHeader.Sah_com;
                        oLog.SJL_LOC = _inventoryHeader.Ith_loc;
                        //oLog.SJL_JOBSTAGE = Convert.ToInt32(8);
                        oLog.SJL_CRE_BY = _invoiceHeader.Sah_cre_by;
                        oLog.SJL_CRE_DT = DateTime.Now;
                        oLog.SJL_SESSION_ID = _invoiceHeader.Sah_session_id;
                        oLog.SJL_INFSUP = 0;
                        if (item.Jcd_jobno != "N/A")
                        {
                            _effect = _CustServiceDAL.Save_ServiceJobStageLog(oLog);
                            _effect = _CustServiceDAL.Update_JobDetailStage(item.Jcd_jobno, item.Jcd_joblineno, 8, _invoiceHeader.Sah_cre_by);

                            //Commented on 2015-11-04

                            //List<Service_JOB_HDR> jobHeaders = _CustServiceDAL.GetServiceJobHeaderAll(item.Jcd_jobno, _invoiceHeader.Sah_com);
                            //if (jobHeaders != null && jobHeaders.Count > 0)
                            //{
                            //    if (jobHeaders[0].SJB_MOD_BY == "F")
                            //    {
                            //        oLog.SJL_JOBSTAGE = Convert.ToInt32(11);
                            //        _effect = _CustServiceDAL.Save_ServiceJobStageLog(oLog);
                            //        _effect = _CustServiceDAL.Update_JobDetailStage(item.Jcd_jobno, item.Jcd_joblineno, 11);
                            //    }
                            //}
                        }

                        LogCount = 1;
                    }

                    Service_Chanal_parameter oChnnalPara = _generalDAL.GetChannelParamers(_invoiceHeader.Sah_com, _inventoryHeader.Ith_loc);
                    if (oChnnalPara.SP_ISNEEDGATEPASS == 0)
                    {
                        //continue;
                        if (_aodneedrcc == false)
                        {
                            _aodneedrcc = true;
                        }
                    }
                    else
                    {
                        //check is job F or W
                        if (item.Jcd_jobno != "N/A")
                        {
                            Service_Category ocate = _CustServiceDAL.GET_SCV_CATE_BY_JOB(item.Jcd_jobno, _invoiceHeader.Sah_com);
                            if (ocate != null && ocate.Sc_direct.ToUpper() == "F")
                            {
                                //continue;
                            }
                            else
                            {
                                if (JobDetailLine.Jbd_isgatepass == 1)
                                {
                                    //continue;
                                }
                                else
                                {
                                    continue;
                                }
                            }

                            if (_aodneedrcc == false)
                            {
                                _aodneedrcc = true;
                            }
                        }
                    }

                    if (itemDetails.Mi_is_ser1 == 1)
                    {
                        ReptPickSerials PickSerials = _inventoryDAL.Get_all_details_on_serialID(_invoiceHeader.Sah_com, _inventoryHeader.Ith_loc, null, itemDetails.Mi_cd, item.Jcd_ser_id);
                        PickSerials.Tus_job_no = item.Jcd_jobno;
                        PickSerials.Tus_job_line = item.Jcd_joblineno;
                        //PickSerials.Tus_base_itm_line = item.Jcd_line;
                        PickSerials.Tus_base_itm_line = _tempItem.Sad_itm_line;
                        _pickSerial.Add(PickSerials);
                    }
                    else
                    {
                        if (itemDetails.Mi_itm_tp == "V")
                        {
                            continue;
                        }
                        ReptPickSerials _reptPickSerial_ = new ReptPickSerials();
                        _reptPickSerial_.Tus_com = _invoiceHeader.Sah_com;
                        _reptPickSerial_.Tus_base_doc_no = item.Jcd_mov_doc;
                        //_reptPickSerial_.Tus_base_itm_line = item.Jcd_itmline;
                        _reptPickSerial_.Tus_base_itm_line = _tempItem.Sad_itm_line;
                        _reptPickSerial_.Tus_bin = _inventoryDAL.GetDefaultBinCode(_invoiceHeader.Sah_com, _inventoryHeader.Ith_loc);
                        _reptPickSerial_.Tus_cre_by = _invoiceHeader.Sah_cre_by;
                        _reptPickSerial_.Tus_cre_dt = DateTime.Now;
                        _reptPickSerial_.Tus_cross_batchline = 0;
                        _reptPickSerial_.Tus_cross_itemline = 0;
                        _reptPickSerial_.Tus_cross_seqno = 0;
                        _reptPickSerial_.Tus_cross_serline = 0;
                        _reptPickSerial_.Tus_doc_dt = Convert.ToDateTime(_invoiceHeader.Sah_dt);
                        _reptPickSerial_.Tus_doc_no = string.Empty;
                        _reptPickSerial_.Tus_exist_grncom = string.Empty;
                        _reptPickSerial_.Tus_isapp = 1;
                        _reptPickSerial_.Tus_iscovernote = 1;
                        _reptPickSerial_.Tus_itm_brand = itemDetails.Mi_brand;
                        _reptPickSerial_.Tus_itm_cd = itemDetails.Mi_cd;
                        _reptPickSerial_.Tus_itm_desc = itemDetails.Mi_longdesc;
                        _reptPickSerial_.Tus_itm_line = 0;
                        _reptPickSerial_.Tus_itm_model = itemDetails.Mi_model;
                        _reptPickSerial_.Tus_itm_stus = item.Jcd_itmstus;
                        _reptPickSerial_.Tus_loc = _inventoryHeader.Ith_loc;
                        _reptPickSerial_.Tus_new_status = string.Empty;
                        _reptPickSerial_.Tus_qty = item.Jcd_qty;
                        _reptPickSerial_.Tus_ser_1 = "N/A";
                        _reptPickSerial_.Tus_ser_2 = "N/A";
                        _reptPickSerial_.Tus_ser_id = 0;
                        _reptPickSerial_.Tus_ser_line = 0;
                        _reptPickSerial_.Tus_session_id = _invoiceHeader.Sah_session_id;
                        _reptPickSerial_.Tus_unit_cost = 0;
                        _reptPickSerial_.Tus_unit_price = 0;
                        _reptPickSerial_.Tus_usrseq_no = -100;
                        _reptPickSerial_.Tus_warr_no = "N/A";
                        _reptPickSerial_.Tus_warr_period = 0;
                        _reptPickSerial_.Tus_new_remarks = string.Empty;
                        _reptPickSerial_.Tus_job_no = item.Jcd_jobno;
                        _reptPickSerial_.Tus_job_line = item.Jcd_joblineno;

                        if (itemDetails.Mi_is_ser1 == 0)
                        {
                            List<ReptPickSerials> _chkList;
                            _chkList = _inventoryDAL.GetNonSerializedItemRandomlyByByDoc(_invoiceHeader.Sah_com, JobDetailLine.Jbd_loc, itemDetails.Mi_cd, string.Empty, item.Jcd_qty, _invoiceHeader.Sah_dt, item.Jcd_mov_doc, item.Jcd_batchline, item.Jcd_itmline);
                            foreach (ReptPickSerials _pick in _chkList)
                            {
                                _pick.Tus_base_doc_no = item.Jcd_mov_doc;
                                _pick.Tus_base_itm_line = _tempItem.Sad_itm_line;
                                _pick.Tus_job_no = item.Jcd_jobno;
                                _pick.Tus_job_line = item.Jcd_joblineno;
                                _pick.Tus_batch_line = _pick.Tus_batch_line;
                                _pickSerial.Add(_pick);
                            }
                        }
                        else
                        {
                            //reptPickSerialsList.Add(_reptPickSerial_);
                            _pickSerial.Add(_reptPickSerial_);
                        }

                    }
                    #endregion
                }

                DataTable dt = DataTableExtensions.ToDataTable(_pickSerial);
                DataTable dt2 = DataTableExtensions.ToDataTable(_confirmDetails);


                if (_pickSerial.Count == 0)
                {
                    _isDeliveryNow = false;
                }

                #region 2015-01-22 Check invoice item availability in the stock

                List<Service_stockReturn> oStockItems = new List<Service_stockReturn>();
                var selectedList = _pickSerial.Select(m => new { m.Tus_itm_cd, m.Tus_itm_stus, m.Tus_ser_1, m.Tus_qty, m.Tus_job_no, m.Tus_job_line }).Distinct().ToList();

                var oInvoiceItems = (from n in _pickSerial
                                     group n by new { n.Tus_itm_cd, n.Tus_itm_stus, n.Tus_ser_1, n.Tus_job_no, n.Tus_job_line } into r
                                     select new { Tus_itm_cd = r.Key.Tus_itm_cd, Tus_itm_stus = r.Key.Tus_itm_stus, Tus_ser_1 = r.Key.Tus_ser_1, Tus_job_no = r.Key.Tus_job_no, Tus_job_line = r.Key.Tus_job_line, Qty = r.Sum(p => p.Tus_qty) }).ToList();


                foreach (var item in selectedList)
                {
                    List<Service_stockReturn> oStkItm = _CustServiceDAL.Get_ServiceWIP_StockReturnItems(_invoiceHeader.Sah_com, item.Tus_job_no, item.Tus_job_line, item.Tus_itm_cd, _inventoryHeader.Ith_loc);

                    var oSelectedStockItems = (from n in oStkItm
                                               group n by new { n.ITEM_CODE, n.ITEM_STAUS, n.SERIAL_NO, n.JOB_NO, n.JOB_LINE } into r
                                               select new { ITEM_CODE = r.Key.ITEM_CODE, ITEM_STAUS = r.Key.ITEM_STAUS, SERIAL_NO = r.Key.SERIAL_NO, JOB_NO = r.Key.JOB_NO, JOB_LINE = r.Key.JOB_LINE, Qty = r.Sum(p => p.QTY) }).ToList();
                    foreach (var itemInvo in oInvoiceItems)
                    {

                        if (item.Tus_itm_cd == itemInvo.Tus_itm_cd && item.Tus_itm_stus == itemInvo.Tus_itm_stus && item.Tus_ser_1 == itemInvo.Tus_ser_1 && item.Tus_job_no == itemInvo.Tus_job_no && item.Tus_job_line == itemInvo.Tus_job_line && itemInvo.Qty < item.Tus_qty)
                        {
                            _error = "No Stock Items.";
                            _invoiceNo = string.Empty;
                            _receiptNo = string.Empty;
                            _deliveryOrder = string.Empty;
                            _errorlist = _error;
                            // BuyBackInvNo = string.Empty;
                            _effect = -1;

                        }
                        //if (oSelectedStockItems.Find(x => x.ITEM_CODE == itemInvo.Tus_itm_cd && x.ITEM_STAUS == itemInvo.Tus_itm_stus && x.SERIAL_NO == itemInvo.Tus_ser_1).Qty < itemInvo.Qty)
                        //{
                        //    _error = "No Stock Items.";
                        //    _invoiceNo = string.Empty;
                        //    _receiptNo = string.Empty;
                        //    _deliveryOrder = string.Empty;
                        //    _errorlist = _error;
                        //    // BuyBackInvNo = string.Empty;
                        //    _effect = -1;
                        //}





                    }

                }

                #endregion


                #region Check promotion voucher exist for invoice items
                //_inventoryDAL = new InventoryDAL();
                //_inventoryDAL.ConnectionOpen();
                //foreach (InvoiceItem _itm in _invoiceItem)
                //{
                //    MasterItem _mitm = _inventoryDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);
                //    if (_mitm.Mi_is_ser1 != -1)
                //    {
                //        for (int i = 1; i <= _itm.Sad_qty; i++)
                //        {
                //            List<PromoVoucherDefinition> _proVouList = new List<PromoVoucherDefinition>();
                //            _proVouList = GetPromotionalVouchersDefinition(_invoiceHeader.Sah_com, _invoiceHeader.Sah_inv_tp, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_dt.Date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _mitm.Mi_brand, _mitm.Mi_cate_1, _mitm.Mi_cate_2, _itm.Sad_itm_cd, true);
                //            if (_proVouList != null && _proVouList.Count > 0) _VoucherPromotion = true;
                //        }
                //    }
                //}
                //_inventoryDAL.ConnectionClose();

                #endregion

                //using (TransactionScope _tr = new TransactionScope(TransactionScopeOption.RequiresNew))
                // {
                // try
                //  {
                //  }
                //   catch { _invoiceNo = string.Empty; _receiptNo = string.Empty; _deliveryOrder = string.Empty; _errorlist = "Database" + _db + " is not responding. Please contact IT Operation."; BuyBackInvNo = _buybackinv; _effect = -1; return _effect; }
                //Transaction tx = Transaction.Current;
                //_salesDAL.EnlistTransaction(tx);
                //_inventoryDAL.EnlistTransaction(tx);
                //_fmsInventoryDal.EnlistTransaction(tx);
                //// _inventoryRepDAL.EnlistTransaction(tx);
                //_generalDAL.EnlistTransaction(tx);


                //Tharaka 2015-08-22 Set Invoice Number
                if (!_isHold)
                {
                    //nxt1:
                    _invoiceAuto.Aut_year = null;
                    MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
                    _invNo = _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                    _invoiceHeader.Sah_inv_no = _invNo;
                }

                _db = string.Empty;
                _location = (_inventoryHeader != null && !string.IsNullOrEmpty(_inventoryHeader.Ith_com)) ? _inventoryHeader.Ith_loc : string.Empty;
                string _recieptSeq = null;
                string _invoiceSeq = null;
                InventoryHeader _invHdr = null;
                DataTable _dataTable = null;
                Service_SaveInvoiceWithDeliveryOrderWithTransaction(_invoiceHeader, _invoiceItem, _invoiceSerial, _recieptHeader, _recieptItem, _inventoryHeader, _pickSerial, _pickSubSerial, _invoiceAuto, _recieptAuto, _inventoryAuto, _isDeliveryNow, out _invNo, out _recNo, out _DONo, _inventoryDAL, _salesDAL, null, _inventoryRepDAL, _isHold, _isHoldInvoiceProcess, out _error, false, out _invoiceSeq, out _recieptSeq, out _invHdr, out _dataTable, true);



                List<String> ConfirmationSeqNumber = _confirmDetails.Select(x => x.Jcd_jobno).ToList();

                foreach (String itemSeqs in ConfirmationSeqNumber)
                {
                    _effect = _CustServiceDAL.UPDATE_SCV_CONF_HDR_ISINVD_type(1, 0, _invoiceHeader.Sah_com, itemSeqs, _invoiceHeader.Sah_inv_tp);
                }

                // Nadeeka 28-07-2015
                Decimal _totAgeAmt = 0;
                Decimal _decAmt = 0;
                if (_invoiceHeader.Sah_anal_2 == "SCVA")
                {
                    //  List<scv_agr_payshed> _lstShed=new  List<scv_agr_payshed>();
                    foreach (InvoiceItem item in _invoiceItem)
                    {
                        _salesDAL.UpdateAgreementBalance(_invoiceHeader.Sah_ref_doc, item.Sad_tot_amt);
                        _totAgeAmt = item.Sad_tot_amt;
                        //   _lstShed = _CustServiceDAL.getAgrPay(_invoiceHeader.Sah_ref_doc);
                        foreach (scv_agr_payshed itemSch in _lstShed)
                        {
                            if (itemSch.Sap_sel == true)
                            {
                                if (_totAgeAmt > 0)
                                {
                                    if (itemSch.Sap_bal_amt < item.Sad_tot_amt)
                                    {
                                        _totAgeAmt = _totAgeAmt - itemSch.Sap_bal_amt;
                                        _decAmt = itemSch.Sap_bal_amt;

                                    }
                                    else
                                    {
                                        _totAgeAmt = _totAgeAmt - item.Sad_tot_amt;
                                        _decAmt = item.Sad_tot_amt;
                                    }
                                }

                                _salesDAL.UpdateAgreementSchedule(_invoiceHeader.Sah_ref_doc, _decAmt, itemSch.Sap_term);
                            }
                        }
                    }
                }

                //update invoice discount
                //foreach (InvoiceItem _itm in _invoiceItem)
                //{

                //    if (_itm.Sad_dis_type == "P")
                //        _salesDAL.UpdateDiscountUsedTimes(_itm.Sad_dis_seq, 1);
                //}
                //end

                string _customerCode = _invoiceHeader.Sah_cus_cd;
                GroupBussinessEntity _businessEntityGrup = new GroupBussinessEntity();
                if (string.IsNullOrEmpty(_error))
                {
                    #region Customer Creation
                    //if (_invoiceHeader.Sah_cus_cd == "CASH" && (!string.IsNullOrEmpty(_businessCompany.Mbe_nic) || !string.IsNullOrEmpty(_businessCompany.Mbe_mob)))
                    //{
                    //    // MasterBusinessEntity _nic = _salesDAL.GetActiveBusinessCompanyDetail(_invoiceHeader.Sah_com, string.Empty, _businessCompany.Mbe_nic, string.Empty, "C");
                    //    // MasterBusinessEntity _mobile = _salesDAL.GetActiveBusinessCompanyDetail(_invoiceHeader.Sah_com, string.Empty, string.Empty, _businessCompany.Mbe_mob, "C");
                    //    // if (_nic.Mbe_cd == null && _mobile.Mbe_cd == null)
                    //    {
                    //        _businessEntityGrup = new GroupBussinessEntity();
                    //        _businessEntityGrup.Mbg_act = true;
                    //        _businessEntityGrup.Mbg_add1 = _businessCompany.Mbe_add1;
                    //        _businessEntityGrup.Mbg_add2 = _businessCompany.Mbe_add2;
                    //        _businessEntityGrup.Mbg_cd = "c1";
                    //        _businessEntityGrup.Mbg_contact = string.Empty;
                    //        _businessEntityGrup.Mbg_email = string.Empty;
                    //        _businessEntityGrup.Mbg_fax = string.Empty;
                    //        _businessEntityGrup.Mbg_mob = _businessCompany.Mbe_mob;
                    //        _businessEntityGrup.Mbg_name = _businessCompany.Mbe_name;
                    //        _businessEntityGrup.Mbg_nic = _businessCompany.Mbe_nic;
                    //        _businessEntityGrup.Mbg_tel = string.Empty;
                    //        _businessEntityGrup.Mbg_tit = _businessCompany.MBE_TIT;
                    //        _businessEntityGrup.Mbg_nationality = "SL";
                    //        _businessEntityGrup.Mbg_cre_by = _invoiceHeader.Sah_cre_by;
                    //        _businessEntityGrup.Mbg_mod_by = _invoiceHeader.Sah_mod_by;

                    //        //new customer
                    //        _auto = new MasterAutoNumber();
                    //        _auto.Aut_cate_cd = string.Empty;
                    //        _auto.Aut_cate_tp = string.Empty;
                    //        _auto.Aut_moduleid = "CUS";
                    //        _auto.Aut_number = 0;
                    //        _auto.Aut_start_char = "CONT";

                    //    nxt1:
                    //        _auto.Aut_year = null;
                    //        MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                    //        _customerCode = _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);


                    //        if (_salesDAL.CheckSalesNo("sp_getcustomer", "p_customer", _customerCode) == 1)
                    //        {
                    //            goto nxt1;
                    //        }
                    //        _businessCompany.Mbe_cd = _customerCode;
                    //        _businessEntityGrup.Mbg_cd = _customerCode;
                    //        _invoiceHeader.Sah_cus_cd = _customerCode;
                    //        _salesDAL.SaveBusinessEntityDetailGroup(_businessEntityGrup);
                    //        _salesDAL.SaveBusinessEntityDetail(_businessCompany);
                    //        _salesDAL.UpdateInvoiceforNewCustomer(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_seq_no, _customerCode);
                    //        _salesDAL.UpdateInventoryCustomer(_inventoryHeader.Ith_seq_no, _customerCode);
                    //    }

                    //}
                    //else 
                    if (_invoiceHeader.Sah_cus_cd != "CASH")
                    {
                        MasterBusinessEntity _chkList = new MasterBusinessEntity();
                        _chkList = _salesDAL.GetCustomerProfileByCom(_invoiceHeader.Sah_cus_cd, null, null, null, null, _invoiceHeader.Sah_com);

                        if (_chkList.Mbe_cd == null && _businessCompany != null)
                        {
                            _businessEntityGrup = new GroupBussinessEntity();
                            _businessEntityGrup.Mbg_act = true;
                            _businessEntityGrup.Mbg_add1 = _businessCompany.Mbe_add1;
                            _businessEntityGrup.Mbg_add2 = _businessCompany.Mbe_add2;
                            _businessEntityGrup.Mbg_cd = _invoiceHeader.Sah_cus_cd;
                            _businessEntityGrup.Mbg_contact = string.Empty;
                            _businessEntityGrup.Mbg_email = string.Empty;
                            _businessEntityGrup.Mbg_fax = string.Empty;
                            _businessEntityGrup.Mbg_mob = _businessCompany.Mbe_mob;
                            _businessEntityGrup.Mbg_name = _businessCompany.Mbe_name;
                            _businessEntityGrup.Mbg_nic = _businessCompany.Mbe_nic;
                            _businessEntityGrup.Mbg_tel = string.Empty;
                            _businessEntityGrup.Mbg_nationality = "SL";
                            _businessEntityGrup.Mbg_tit = _businessCompany.MBE_TIT;
                            _businessEntityGrup.Mbg_cre_by = _invoiceHeader.Sah_cre_by;
                            _businessEntityGrup.Mbg_mod_by = _invoiceHeader.Sah_mod_by;

                            _businessCompany.Mbe_cd = _invoiceHeader.Sah_cus_cd;
                            _salesDAL.SaveBusinessEntityDetailGroup(_businessEntityGrup);
                            _salesDAL.SaveBusinessEntityDetail(_businessCompany);

                        }
                        else
                        {
                            GroupBussinessEntity _grupList = new GroupBussinessEntity();
                            _grupList = _salesDAL.GetCustomerProfileByGrup(_invoiceHeader.Sah_cus_cd, null, null, null, null, null);

                            if (_grupList.Mbg_cd == null)
                            {
                                //_businessEntityGrup = new GroupBussinessEntity();
                                //_businessEntityGrup.Mbg_act = true;
                                //_businessEntityGrup.Mbg_add1 = _businessCompany.Mbe_add1;
                                //_businessEntityGrup.Mbg_add2 = _businessCompany.Mbe_add2;
                                //_businessEntityGrup.Mbg_cd = _invoiceHeader.Sah_cus_cd;
                                //_businessEntityGrup.Mbg_contact = string.Empty;
                                //_businessEntityGrup.Mbg_email = string.Empty;
                                //_businessEntityGrup.Mbg_fax = string.Empty;
                                //_businessEntityGrup.Mbg_mob = _businessCompany.Mbe_mob;
                                //_businessEntityGrup.Mbg_name = _businessCompany.Mbe_name;
                                //_businessEntityGrup.Mbg_nic = _businessCompany.Mbe_nic;
                                //_businessEntityGrup.Mbg_tel = string.Empty;
                                //_businessEntityGrup.Mbg_nationality = "SL";
                                //_businessEntityGrup.Mbg_tit = _businessCompany.MBE_TIT;
                                //_businessEntityGrup.Mbg_cre_by = _invoiceHeader.Sah_cre_by;
                                //_businessEntityGrup.Mbg_mod_by = _invoiceHeader.Sah_mod_by;
                                //_salesDAL.SaveBusinessEntityDetailGroup(_businessEntityGrup);
                            }
                        }
                    }
                    #endregion

                    #region update auto no

                    if (!_isHold)
                    {
                        //nxt1:
                        //_invoiceAuto.Aut_year = null;
                        //MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
                        //_invNo = _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                        _invoiceAuto.Aut_year = null;
                        _invoiceAuto.Aut_modify_dt = null;
                        //if (_salesDAL.CheckSalesNo("sp_getinvno", "p_inv_no", _invNo) == 1)
                        //{
                        //    //_salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
                        //    //goto nxt1;
                        //    _error = "Invoice process terminated. Please re-process.(Hint - Duplicating Invoice No)";
                        //    _invoiceNo = string.Empty;
                        //    _receiptNo = string.Empty;
                        //    _deliveryOrder = string.Empty;
                        //    _errorlist = _error;
                        //    //BuyBackInvNo = string.Empty;
                        //    _effect = -1;

                        //    _salesDAL.TransactionRollback();
                        //    _inventoryDAL.TransactionRollback();
                        //    _fmsInventoryDal.TransactionRollback();
                        //    _inventoryRepDAL.TransactionRollback();
                        //    _generalDAL.TransactionRollback();
                        //    return _effect;
                        //}

                        _salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto);

                        //Commented on 2015-08-22 By Tharaka
                        //_salesDAL.UpdateInvoiceWithTaxCommission(_invNo, string.Empty, Convert.ToInt32(_invoiceSeq), Convert.ToInt32(_recieptSeq));

                        //string RecieptNo = "";
                        if (_recieptAuto != null)
                        {
                            //nxt2:
                            _recieptAuto.Aut_year = null;
                            MasterAutoNumber RecieptAuto = _inventoryDAL.GetAutoNumber(_recieptAuto.Aut_moduleid, _recieptAuto.Aut_direction, _recieptAuto.Aut_start_char, _recieptAuto.Aut_cate_tp, _recieptAuto.Aut_cate_cd, _recieptAuto.Aut_modify_dt, _recieptAuto.Aut_year);
                            _receiptNo = _recieptAuto.Aut_cate_cd + "-" + RecieptAuto.Aut_start_char + RecieptAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                            _recieptAuto.Aut_year = null;
                            _recieptAuto.Aut_modify_dt = null;
                            _recNo = _receiptNo;
                            if (_salesDAL.CheckSalesNo("sp_getreceiptno", "p_rept_no", _recNo) == 1)
                            {
                                // _salesDAL.UpdateInvoiceAutoNumber(_recieptAuto);
                                // goto nxt2;
                                _error = "Invoice process terminated. Please re-process.(Hint - Duplicating Receipt No)";
                                _invoiceNo = string.Empty;
                                _receiptNo = string.Empty;
                                _deliveryOrder = string.Empty;
                                _errorlist = _error;
                                // BuyBackInvNo = string.Empty;
                                _effect = -1;

                                _salesDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                _fmsInventoryDal.TransactionRollback();
                                _inventoryRepDAL.TransactionRollback();
                                _generalDAL.TransactionRollback();
                                _scvreq = string.Empty;
                                return _effect;
                            }
                            //_invDAL.UpdateAutoNumber(_recieptAuto);

                            _salesDAL.UpdateInvoiceAutoNumber(_recieptAuto);
                        }
                        _salesDAL.UpdateReceipt(_invNo, _recNo, Convert.ToInt32(_invoiceSeq), Convert.ToInt32(_recieptSeq));
                        //Update receipt no which allocated by receipt entry as per invoice
                        _inventoryRepDAL.UpdateAdvanceReceiptNofromInvoice(string.Empty, Convert.ToString(_invoiceSeq), _invNo);

                        if (_isDeliveryNow)
                        {
                            // string _doc;
                            _inventoryDAL.UpdateInventoryAutoNumber(_invHdr, _inventoryAuto, "-", out _DONo);
                            MasterAutoNumber _AutoNo = new MasterAutoNumber();
                            int _e = 0;
                            if (_dataTable.Rows.Count > 0)
                            {
                                for (int i = 0; i < _dataTable.Rows.Count; i++)
                                {
                                    if (_dataTable.Rows[i]["DocType"].ToString() == "ADJ")
                                    {
                                        _AutoNo.Aut_cate_cd = _invHdr.Ith_loc;
                                        _AutoNo.Aut_moduleid = "ADJ";
                                        _AutoNo.Aut_direction = null;
                                        _AutoNo.Aut_start_char = "ADJ";
                                        _AutoNo.Aut_cate_tp = "LOC";
                                        //_AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;
                                        _AutoNo.Aut_year = null;

                                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                        string _documentNo = _invHdr.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_invHdr.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                        _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                        _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                    }
                                    else if (_dataTable.Rows[i]["DocType"].ToString() == "GRN")
                                    {
                                        _AutoNo.Aut_cate_cd = _invHdr.Ith_loc;
                                        _AutoNo.Aut_moduleid = "GRN";
                                        _AutoNo.Aut_direction = null;
                                        _AutoNo.Aut_start_char = "GRN";
                                        _AutoNo.Aut_cate_tp = "LOC";
                                        //_AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;
                                        _AutoNo.Aut_year = _invHdr.Ith_doc_date.Year;

                                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                        string _documentNo = _invHdr.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_invHdr.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                        _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                        _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                    }
                                    else if (_dataTable.Rows[i]["DocType"].ToString() == "PO")
                                    {
                                        //_AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_com;
                                        //_AutoNo.Aut_moduleid = "PO_LOCAL";
                                        //_AutoNo.Aut_direction = null;
                                        //_AutoNo.Aut_start_char = "PO";
                                        //_AutoNo.Aut_cate_tp = "COM";
                                        //_AutoNo.Aut_year = null;

                                        _AutoNo.Aut_cate_cd = _invHdr.Ith_com;
                                        _AutoNo.Aut_cate_tp = "COM";
                                        _AutoNo.Aut_direction = null;
                                        _AutoNo.Aut_modify_dt = null;
                                        _AutoNo.Aut_moduleid = "PUR";
                                        _AutoNo.Aut_start_char = "PUR";
                                        _AutoNo.Aut_year = null;

                                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                        string _documentNo = _AutoNo.Aut_cate_cd + "-" + _AutoNo.Aut_start_char + string.Format("{0:000000}", _autoNo);
                                        _inventoryDAL.UpdatePODocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                        _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                        _inventoryDAL.UpdateGRNPODocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                    }
                                }
                            }

                            //update inv no
                            Int16 res = _inventoryDAL.UpdateOtherDocuments(_DONo, _invNo);
                            res = _inventoryDAL.UpdateBatchRefDoc(_DONo, _invNo);
                        }
                    }
                    #endregion

                    #region Update Manual Doc
                    if (_invoiceHeader.Sah_manual)
                    {
                        MasterCompany _masterComp = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com);  //kapila 27/4/2016
                        if (_masterComp.MC_IS_SCM2_FMS == 1)
                            _inventoryDAL.UpdateManualDocNo(_location, "MDOC_INV", Convert.ToInt32(_invoiceHeader.Sah_man_ref), _invNo);
                        else
                            _fmsInventoryDal.UpdateManualDocNo(_location, "MDOC_INV", Convert.ToInt32(_invoiceHeader.Sah_man_ref), _invNo);
                    }
                    #endregion

                    #region update invoice discount / Promotion Voucher page as F
                    foreach (InvoiceItem _itm in _invoiceItem)
                    {
                        if (_itm.Sad_dis_type == "P")
                        {
                            _salesDAL.UpdateDiscountUsedTimes(_itm.Sad_dis_seq, 1);
                        }

                        if (_itm.Sad_res_no == "PROMO_VOU" && _itm.Sad_res_line_no > 0)
                        {
                            //Add by Chamal 6-Jul-2014
                            _salesDAL.Update_GV_Pages(1, _invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_dt.Date, "", "F", _itm.Sad_res_line_no, "P_GV", _invoiceHeader.Sah_cre_by, _invNo);
                        }
                    }
                    #endregion

                    #region ADO 2015-06-26

                    InventoryBLL _InventoryBLL = new InventoryBLL();
                    Int32 effect = 0;

                    if (_aodneedrcc == true && _isstockUpdate == true && _aodHdr.Ith_loc != null)
                    {
                        _aodAuto.Aut_moduleid = "AOD";
                        _aodAuto.Aut_start_char = "AOD";
                        _aodAuto.Aut_direction = 0;

                        _aodHdr.Ith_entry_no = _invNo;

                        _InventoryBLL.SaveOutwardScanSerial(_aodHdr, _reptPickSerialsAod, null, _inventoryDAL, true);
                        string documentNo = "";
                        effect = _InventoryBLL.UpdateInventoryAutoNumber(_aodHdr, _aodAuto, "-", out documentNo);

                        ADONumber = documentNo;
                        // string _message = "";
                        // string _genSalesDoc = ""; string _genInventoryDoc = "";
                        // _InventoryBLL.SaveCommonOutWardEntry(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc, _inventoryHeader.Ith_com, null, _inventoryHeader, _inventoryAuto, null, null, _reptPickSerials, null, out _message, out _genSalesDoc, out _genInventoryDoc, false, false);
                    }

                    if (_isRcc == true)
                    {
                        _inventoryDAL.Update_RCC_Repair(_rcc);
                    }

                    #endregion

                    _effect = 1;
                }
                else
                    _effect = -1;

                try
                {
                    if (_isDeliveryNow)
                    {
                        bool inv_balance = false;
                        decimal sad_qty = 0;
                        decimal inb_qty = 0;

                        DataTable dt_sat = _salesDAL.sat_qty_inv_balance(_invNo, null, null, null);
                        if (dt_sat != null && dt_sat.Rows.Count > 0)
                        {
                            if (dt_sat.Rows[0][0] != DBNull.Value)
                            {
                                sad_qty = Convert.ToDecimal(dt_sat.Rows[0][0].ToString());
                            }
                        }
                        DataTable dt_inv_batch = _inventoryDAL.qty_inv_balance(_invNo, null, null, null);
                        if (dt_inv_batch != null && dt_inv_batch.Rows.Count > 0)
                        {
                            if (dt_inv_batch.Rows[0][1] != DBNull.Value)
                            {
                                inb_qty = Convert.ToDecimal(dt_inv_batch.Rows[0][1].ToString());
                            }
                        }
                        if (sad_qty == inb_qty)
                        {
                            inv_balance = true;
                        }

                        if (inv_balance == false)
                        {
                            _error = "Invoice quantity does not match with used item  quantity";
                            _invNo = string.Empty;
                            _recNo = string.Empty;
                            _DONo = string.Empty;
                            _effect = -1;

                        }
                    }
                    if (_Service_free_detlist.Count > 0)
                    {
                        string _scv_no = string.Empty;
                        for (int i = 0; i < _Service_free_detlist.Count; i++)
                        {
                            _jobHdrnew.Srb_dt = _Service_free_detlist[i].Servicedates;
                            _jobHdrnew.Srb_st_dt = _Service_free_detlist[i].Servicedates;
                            _jobHdrnew.Srb_ed_dt = _Service_free_detlist[i].Servicedates;
                            _jobHdrnew.Srb_custexptdt = _Service_free_detlist[i].Servicedates;
                            CustServiceBLL __CustServiceDAL = new CustServiceBLL();
                            Int32 _effects = __CustServiceDAL.Save_Req_comm(_jobHdrnew, _jobItems, _jobDefList, _jobDetSubList, _recAuto, _sbChnlnew, _itemType, _brandnew, _warStus, _masterAutonew,
                        out _error, out _scv_no, _isProcess, DateTime.Now.Date, DateTime.Now.Date,
         true, _CustServiceDAL, _generalDAL, _inventoryDAL, true);
                            if (string.IsNullOrEmpty(_scvreq_no))
                            {
                                _scvreq_no = _scv_no;
                            }
                            else
                            {
                                _scvreq_no = _scvreq_no + "||" + _scv_no;
                            }

                        }

                    }
                    // _db = DataBase._ems; _salesDAL.ConnectionClose(); _db = DataBase._ems; _inventoryDAL.ConnectionClose(); _db = DataBase._fms; _fmsInventoryDal.ConnectionClose(); _db = DataBase._reportdb; _inventoryRepDAL.ConnectionClose(); _db = DataBase._ems; _generalDAL.ConnectionClose();
                    if (string.IsNullOrEmpty(_error))
                    {
                        _db = DataBase._ems;
                        _salesDAL.TransactionCommit();
                        _db = DataBase._ems;
                        _inventoryDAL.TransactionCommit();
                        _db = DataBase._fms;
                        _fmsInventoryDal.TransactionCommit();
                        _db = DataBase._reportdb;
                        _inventoryRepDAL.TransactionCommit();
                        _db = DataBase._ems;
                        _generalDAL.TransactionCommit();
                        _inventoryDAL.UpdateInvoiceDOStatus(_invNo);

                        _CustServiceDAL.TransactionCommit();
                        _scvreq = string.Empty;
                        //cus code update
                        if (_auto != null)
                        {
                            _inventoryDAL.UpdateAutoNumber(_auto);
                        }
                    }
                    else
                    {
                        _salesDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        _fmsInventoryDal.TransactionRollback();
                        _inventoryRepDAL.TransactionRollback();
                        _generalDAL.TransactionRollback();
                        _CustServiceDAL.TransactionRollback();
                    }
                }
                catch (Exception ex)
                {
                    _invoiceNo = string.Empty; _receiptNo = string.Empty; _deliveryOrder = string.Empty; _errorlist = "Database" + _db + " is not responding. Please contact IT Operation.\n" + ex.Message;
                    //BuyBackInvNo = string.Empty; 
                    _effect = -1;
                    _scvreq = string.Empty;
                    return _effect;

                }

                //  if (_effect == 1) _tr.Complete();
                //}
            }
            catch (Exception ex)
            {
                _error = ex.Message.ToString();
                _invoiceNo = string.Empty;
                _receiptNo = string.Empty;
                _deliveryOrder = string.Empty;
                _errorlist = _error;
                // BuyBackInvNo = string.Empty;
                _effect = -1;
                _scvreq = string.Empty;
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _CustServiceDAL.TransactionRollback();
            }

            _invoiceNo = _invNo;
            _receiptNo = _recNo;
            _deliveryOrder = _DONo;
            _errorlist = _error;
            // BuyBackInvNo = _buybackinv;
            _scvreq = _scvreq_no;
            return _effect;
        }

        //Tharaka 2014-12-17
        public Int32 SaveDiscount(CashGeneralDicountDef _genDisc)
        {
            Int32 effect = 0;
            string _err = "";
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                effect = _salesDAL.SaveGeneralDiscDef(_genDisc);
                _salesDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                effect = -1;
                _err = "ERROR : " + ex.Message.ToString();
                _salesDAL.TransactionRollback();
            }
            return effect;

        }

        //Written By Darshana on 29/12/2014
        public List<LogMasterItemTax> GetItemTaxLog(string _company, string _item, string _status, string _taxCode, string _taxRateCode, DateTime _effDate)
        {
            if (!_connectionopen) _salesDAL = new SalesDAL();
            List<LogMasterItemTax> _list = new List<LogMasterItemTax>();
            _list = _salesDAL.GetItemTaxLog(_company, _item, _status, _taxCode, _taxRateCode, _effDate);
            return _list;
        }

        public decimal GetMaxTaxLog(string _company, string _item, DateTime _effDate)
        {
            List<LogMasterItemTax> _WOStatus = new List<LogMasterItemTax>();
            _WOStatus = GetItemTaxLog(_company, _item, string.Empty, string.Empty, string.Empty, _effDate);
            decimal _maxTax = -1;

            if (_WOStatus.Count > 0)
            {
                var _max = (from _MaxTax in _WOStatus
                            select _MaxTax.Lict_tax_rate).Max();

                _maxTax = _max;
            }
            return _maxTax;
        }

        public List<LogMasterItemTax> GetTaxLog(string _company, string _item, string _status, DateTime _effDate)
        {


            decimal _maxTax = GetMaxTaxLog(_company, _item, _effDate);

            List<LogMasterItemTax> _WStatus = new List<LogMasterItemTax>();
            List<LogMasterItemTax> _list = new List<LogMasterItemTax>();
            _WStatus = GetItemTaxLog(_company, _item, _status, string.Empty, string.Empty, _effDate);

            if (_WStatus.Count > 0)
            {
                foreach (LogMasterItemTax _itm in _WStatus)
                {
                    decimal _rate = _itm.Lict_tax_rate;
                    decimal _newRate = ((100 + _maxTax) / 100) * 100 / (100 + _rate);
                    _itm.Lict_tax_rate = _newRate;
                    _list.Add(_itm);
                }
            }
            else
            {
                _list = new List<LogMasterItemTax>() { new LogMasterItemTax { Lict_act = true, Lict_itm_cd = _item, Lict_stus = _status, Lict_tax_cd = "S", Lict_tax_rate = _maxTax / 100, Lict_taxrate_cd = "S" } };

            }

            return _list;
        }

        //Written By Darshana on 31/12/2014
        public List<MasterItemTax> GetItemTaxEffDt(string _company, string _item, string _status, string _taxCode, string _taxRateCode, DateTime _effDate)
        {
            if (!_connectionopen) _salesDAL = new SalesDAL();
            List<MasterItemTax> _list = new List<MasterItemTax>();
            _list = _salesDAL.GetItemTaxEffDt(_company, _item, _status, _taxCode, _taxRateCode, _effDate);
            return _list;
        }

        public decimal GetMaxTaxEffDt(string _company, string _item, DateTime _effDate)
        {
            List<MasterItemTax> _WOStatus = new List<MasterItemTax>();
            _WOStatus = GetItemTaxEffDt(_company, _item, string.Empty, string.Empty, string.Empty, _effDate);
            decimal _maxTax = -1;

            if (_WOStatus.Count > 0)
            {
                var _max = (from _MaxTax in _WOStatus
                            select _MaxTax.Mict_tax_rate).Max();

                _maxTax = _max;
            }
            return _maxTax;
        }

        public List<MasterItemTax> GetTaxEffDt(string _company, string _item, string _status, DateTime _effDate)
        {


            decimal _maxTax = GetMaxTaxEffDt(_company, _item, _effDate);

            List<MasterItemTax> _WStatus = new List<MasterItemTax>();
            List<MasterItemTax> _list = new List<MasterItemTax>();
            _WStatus = GetItemTaxEffDt(_company, _item, _status, string.Empty, string.Empty, _effDate);

            if (_WStatus.Count > 0)
            {
                foreach (MasterItemTax _itm in _WStatus)
                {
                    decimal _rate = _itm.Mict_tax_rate;
                    decimal _newRate = ((100 + _maxTax) / 100) * 100 / (100 + _rate);
                    _itm.Mict_tax_rate = _newRate;
                    _list.Add(_itm);
                }
            }
            else
            {
                _list = new List<MasterItemTax>(); //{ new MasterItemTax { Mict_act = true, Mict_itm_cd = _item, Mict_stus = _status, Mict_tax_cd = "S", Mict_tax_rate = _maxTax / 100, Mict_taxrate_cd = "S" } };

            }

            return _list;
        }

        public MasterVehicalInsuranceDefinitionNew GetAddInsAmt(string _com, string _ptyTp, string _ptyCd, string _insCom, string _insPol, string _salesTp, DateTime _date, decimal _ItmVal, string _insTp, string _itm, string _cat1, string _cat2, string _brand, string _pb, string _lvl)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAddInsAmt(_com, _ptyTp, _ptyCd, _insCom, _insPol, _salesTp, _date, _ItmVal, _insTp, _itm, _cat1, _cat2, _brand, _pb, _lvl);
        }

        public Decimal Get_HpIntAmt(Int32 _term, decimal _rent, decimal _amtF, Int32 _pv, Int32 _payEnd)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            return _salesDAL.Get_HpIntAmt(_term, _rent, _amtF, _pv, _payEnd);
            _salesDAL.ConnectionClose();
        }
        public DataTable GetDeduceBalEcd(DateTime _tDate, string _acc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDeduceBalEcd(_tDate, _acc);
        }
        public DataTable GetDeduceBal(DateTime _fDate, DateTime _tDate, string _com, string _pc, Int32 _isSum, string _acc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDeduceBal(_fDate, _tDate, _com, _pc, _isSum, _acc);
        }
        public MasterItemWarrantyPeriod GetItemWarrEffDt(string _item, string _status, Int32 _act, DateTime _effDate)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetItemWarrEffDt(_item, _status, _act, _effDate);
        }
        public LogMasterItemWarranty GetItemWarrEffDtLog(string _item, string _status, Int32 _act, DateTime _effDate)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetItemWarrEffDtLog(_item, _status, _act, _effDate);
        }
        //Darshana 04-03-2015
        public int SaveOthPCECDRequest(RequestApprovalHeader ReqHdr, MasterAutoNumber _AppReqAuto, OutSMS _newSMS, out string genaratedReqNo)
        {
            _inventoryDAL = new InventoryDAL();
            _generalDAL = new GeneralDAL();

            _inventoryDAL.ConnectionOpen();
            _generalDAL.ConnectionOpen();
            try
            {
                int effect = 0;
                Int32 Sgdd_seq = 0;

                string _ReqAppNo = string.Empty;
                MasterAutoNumber ReqNoAuto = _inventoryDAL.GetAutoNumber(_AppReqAuto.Aut_moduleid, _AppReqAuto.Aut_direction, _AppReqAuto.Aut_start_char, _AppReqAuto.Aut_cate_tp, _AppReqAuto.Aut_cate_cd, _AppReqAuto.Aut_modify_dt, _AppReqAuto.Aut_year);
                _ReqAppNo = ReqNoAuto.Aut_cate_cd + "-" + ReqNoAuto.Aut_start_char + "-" + ReqNoAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_AppReqAuto);
                ReqHdr.Grah_ref = _ReqAppNo;
                genaratedReqNo = _ReqAppNo;
                effect = _generalDAL.SaveRequestApproveHear(ReqHdr);


                Sgdd_seq = _inventoryDAL.GetSMSSerialID();
                _newSMS.Msg = "ECD:" + Sgdd_seq + " " + _newSMS.Msg + " Ref. # : " + _ReqAppNo;
                _newSMS.Msgid = Sgdd_seq.ToString();
                _newSMS.Refdocno = _ReqAppNo;

                _generalDAL.SaveSMSOut(_newSMS);

                _generalDAL.TransactionCommit();
                effect = 1;
                return effect;
            }
            catch (Exception ex)
            {
                _generalDAL.TransactionRollback();
                genaratedReqNo = string.Empty;
                return -1;
            }
        }

        public void Service_SaveInvoiceWithDeliveryOrderWithTransaction(InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, List<InvoiceSerial> _invoiceSerial, RecieptHeader _recieptHeader, List<RecieptItem> _recieptItem, InventoryHeader _inventoryHeader, List<ReptPickSerials> _pickSerial, List<ReptPickSerialsSub> _pickSubSerial, MasterAutoNumber _invoiceAuto, MasterAutoNumber _recieptAuto, MasterAutoNumber _inventoryAuto, bool _isDeliveryNow, out  string _invoiceNo, out string _receiptNo, out string _deliveryOrder, InventoryDAL _invDAL, SalesDAL _salDAL, GeneralDAL _genDAL, ReptCommonDAL _invRepDAL, bool _isHold, bool _isHoldInvoiceProcess, out string _errorlist, bool _ishireSale, out string _invSeq, out string _recieptSeq, out InventoryHeader _mov, out DataTable _datatable, bool isJobInvoice = false)
        {
            string _invNo = "";
            string _recNo = "";
            string _doNo = "";

            if (_genDAL != null)
                _generalDAL = _genDAL;

            List<ReptPickSerials> _remakeReptSerialList = new List<ReptPickSerials>();
            string _error = string.Empty;

            #region Delivery Now - Reserve Serialized/Non-Serialized Item inline
            if (_isDeliveryNow)
            {
                bool _isOK = true;
                string _list = string.Empty;

                _isOK = TakeInventorySerialwithItem(_invoiceHeader.Sah_dt, _invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _inventoryHeader.Ith_loc, _invoiceItem, _pickSerial, _invDAL, _salDAL, _invRepDAL, out _remakeReptSerialList, out _list, isJobInvoice);

                if (_isOK == false)
                {
                    _error = "Inventory and invoice qty mismatch found. process aborted!";
                    _invoiceNo = _invNo;
                    _receiptNo = _recNo;
                    _deliveryOrder = _doNo;
                    _errorlist = _error;
                    _invSeq = "";
                    _recieptSeq = "";
                    _mov = null;
                    _datatable = null;
                    return;
                }

                _pickSerial = new List<ReptPickSerials>();
                _pickSerial = _remakeReptSerialList;
            }
            #endregion

            string InvoiceNo = _invoiceHeader.Sah_inv_no;
            string RecieptNo = string.Empty;
            try
            {
                Int32 _invoiceLine = 1;
                DataTable _tbl = _salDAL.GetEmployee(_invoiceHeader.Sah_com, _invoiceHeader.Sah_sales_ex_cd);
                string _executiveType = string.Empty;
                foreach (DataRow _r in _tbl.Rows)
                {
                    _executiveType = Convert.ToString(_r["esep_cat_cd"]);
                }
                List<SaleCommission> _saveCommission = new List<SaleCommission>();

                #region Delete invoice if its a HOLD status
                if (_isHold || _isHoldInvoiceProcess) _salDAL.DeleteInvoiceDetailForHold(_invoiceHeader.Sah_seq_no);
                #endregion

                //Generate SeqNo
                //If hold, then client should generate the sequence and assign to header,ie; if its recall hold invoice and need to second time hold, could set sequence no
                //as per the recalled sequence no
                Int32 InvoiceSeqNo = _isHoldInvoiceProcess ? _invoiceHeader.Sah_seq_no : _invDAL.GetSerialID();
                Int32 RecieptSeqNo = !string.IsNullOrEmpty(_recieptHeader.Sar_receipt_type) ? _invDAL.GetSerialID() : -1;
                Int32 InventorySeqNo = 0;
                if (_isDeliveryNow) InventorySeqNo = _invDAL.GetSerialID();

                //-------------------------------------------------------------------------- Invoice------------------------------------------------------------------------ 

                _invoiceHeader.Sah_seq_no = InvoiceSeqNo;
                //_invoiceHeader.Sah_inv_no = Convert.ToString(InvoiceSeqNo);


                #region Calculation for total of the payment to infiltrate invoice header

                decimal _totalValue = _invoiceItem.Sum(x => x.Sad_tot_amt);
                decimal _totalReceiptAmt = 0;
                if (_recieptItem != null) if (_recieptItem.Count > 0) _totalReceiptAmt = _recieptItem.Sum(x => x.Sard_settle_amt);

                _invoiceHeader.Sah_anal_7 = _totalValue;// -_totalReceiptAmt; //Total Invoice Amount - Total Receipt AmountBY DARSHANA 3/12/2012
                _invoiceHeader.Sah_anal_8 = _totalReceiptAmt;//Receipt Amount

                //ADDED SACHITH 2013/12/04
                //CREDIT SALES
                //FOR SVAT CUSTOMERS ADD TAX VALUE TO ANAL_8
                //decimal vatTotal = 0;
                //if (_invoiceHeader.Sah_is_svat && _invoiceHeader.Sah_inv_tp == "CRED")
                //{
                //    //kapila 11/8/2015
                //    if (_invoiceHeader.Sah_inv_tp != "CRED")
                //        vatTotal = _invoiceItem.Sum(X => X.Sad_itm_tax_amt);

                //    _invoiceHeader.Sah_anal_8 = _invoiceHeader.Sah_anal_8 + vatTotal;
                //}

                if (_invoiceSerial != null)
                    if (_invoiceSerial.Count > 0)
                    {
                        //_invoiceSerial.ForEach(X => X.Sap_inv_no = Convert.ToString(InvoiceSeqNo));
                        _invoiceSerial.ForEach(X => X.Sap_inv_no = _invoiceHeader.Sah_inv_no);
                        _invoiceSerial.ForEach(x => x.Sap_seq_no = InvoiceSeqNo);
                    }


                DataTable _tblESDEPFWHF = new DataTable();
                _tblESDEPFWHF = _salDAL.Get_ESD_EPF_WHT(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_dt);
                Decimal ESD_rt = 0; Decimal EPF_rt = 0; Decimal WHT_rt = 0;
                if (_tblESDEPFWHF.Rows.Count > 0) { ESD_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_ESD"]); EPF_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_EPF"]); WHT_rt = Convert.ToDecimal(_tblESDEPFWHF.Rows[0]["MPCH_WHT"]); }
                _invoiceHeader.Sah_esd_rt = ESD_rt;
                _invoiceHeader.Sah_epf_rt = EPF_rt;
                _invoiceHeader.Sah_wht_rt = WHT_rt;
                _recieptHeader.Sar_esd_rate = ESD_rt;
                _recieptHeader.Sar_epf_rate = EPF_rt;
                _recieptHeader.Sar_wht_rate = WHT_rt;

                #endregion
                //Save Invoice Header
                #region Save Invoice Header
                _salDAL.SaveSalesHeader(_invoiceHeader);
                #endregion

                //Save Invoice Items
                #region Invoice Item Detail

                MasterProfitCenter _mstPc = new MasterProfitCenter();
                _mstPc = _salesDAL.GetProfitCenter(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc);

                //add by akila 2017/06/29
                Boolean _isStrucBaseTax = false;
                MasterCompany _masterComp = null;
                _masterComp = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com);
                if (_masterComp.MC_TAX_CALC_MTD == "1") _isStrucBaseTax = true;

                foreach (InvoiceItem _itm in _invoiceItem)
                {
                    MasterItem _item = _invDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);

                    _itm.Sad_seq_no = InvoiceSeqNo;
                    _invoiceLine = _itm.Sad_itm_line;
                    //_itm.Sad_inv_no = Convert.ToString(InvoiceSeqNo);
                    _itm.Sad_inv_no = _invoiceHeader.Sah_inv_no;
                    _itm.Sad_unit_amt = _itm.Sad_unit_rt * _itm.Sad_qty;
                    _itm.Sad_itm_tp = _item.Mi_itm_tp;
                    _itm.Sad_uom = _item.Mi_itm_uom;
                    _itm.Sad_trd_svc_chrg = Math.Round((_itm.Sad_tot_amt - _itm.Sad_itm_tax_amt) / _itm.Sad_qty, 2);
                    if (_invoiceHeader.Sah_tax_exempted)
                    {
                        _itm.Sad_tot_amt = _itm.Sad_tot_amt - _itm.Sad_itm_tax_amt;
                        _itm.Sad_itm_tax_amt = 0;
                    }

                    //update DO qty
                    if (_isDeliveryNow)
                    {
                        decimal _doQty = 0;
                        List<ReptPickSerials> _temp = _pickSerial.Where(x => x.Tus_base_itm_line == _itm.Sad_itm_line).ToList<ReptPickSerials>();
                        if (_temp != null && _temp.Count > 0)
                        {
                            _itm.Sad_do_qty = _temp.Sum(p => p.Tus_qty);
                        }
                        if (_itm.Mi_itm_tp == "V")
                        {
                            _itm.Sad_do_qty = _itm.Sad_qty;
                        }

                    }
                    _salDAL.SaveSalesItem(_itm);
                    _salDAL.UpdatePrice(_itm.Sad_itm_cd, _itm.Sad_pbook, _itm.Sad_pb_lvl, _invoiceHeader.Sah_cus_cd, _itm.Sad_promo_cd, _itm.Sad_seq, _itm.Sad_itm_seq);

                    //MasterProfitCenter _mstPc = new MasterProfitCenter();
                    //_mstPc = _salesDAL.GetProfitCenter(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc);

                    ////add by akila 2017/06/29
                    //Boolean _isStrucBaseTax = false;
                    //MasterCompany _masterComp = null;
                    //_masterComp = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com);
                    //if (_masterComp.MC_TAX_CALC_MTD == "1") _isStrucBaseTax = true;

                    if (_mstPc.Mpc_issp_tax == true)
                    {

                        List<MasterPCTax> _masterPCTax = new List<MasterPCTax>();
                        _masterPCTax = _salesDAL.GetPcTax(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, 1, _invoiceHeader.Sah_dt.Date);

                        decimal newTaxValue = 0;

                        var _pcTaxNBT = from _pcTaxs in _masterPCTax
                                        where _pcTaxs.Mpt_taxtp == "NBT"
                                        select _pcTaxs;

                        foreach (MasterPCTax _one in _pcTaxNBT)
                        {
                            InvoiceItemTax _tax = new InvoiceItemTax();
                            _tax.Satx_inv_no = _itm.Sad_inv_no;
                            _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                            _tax.Satx_itm_line = _itm.Sad_itm_line;
                            //kapila 25/2/2016

                            //updated by akila 2017/06/29
                            decimal _tmpTaxAmount = 0;
                            if (_itm.Sad_disc_rt > 0)
                                _tmpTaxAmount = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt - (_itm.Sad_unit_amt / 100 * _itm.Sad_disc_rt)) * _one.Mpt_taxrt / 100;
                            else
                                _tmpTaxAmount = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt - _itm.Sad_disc_amt) * _one.Mpt_taxrt / 100;

                            _tax.Satx_itm_tax_amt = RoundSalesValue(_tmpTaxAmount, _invoiceHeader.Sah_com);

                            //if (_itm.Sad_disc_rt > 0)
                            //    _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt - (_itm.Sad_unit_amt / 100 * _itm.Sad_disc_rt)) * _one.Mpt_taxrt / 100; // ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                            //else
                            //    _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt - _itm.Sad_disc_amt) * _one.Mpt_taxrt / 100; // ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;

                            if (_invoiceHeader.Sah_inv_tp == "DEBT")
                            {
                                _tax.Satx_itm_tax_amt = 0;
                            }
                            _tax.Satx_itm_tax_rt = _one.Mpt_taxrt;
                            _tax.Satx_itm_tax_tp = _one.Mpt_taxtp;
                            _tax.Satx_job_line = 0;
                            _tax.Satx_job_no = "";
                            _tax.Satx_seq_no = InvoiceSeqNo;
                            _salesDAL.SaveSalesItemTax(_tax);
                            newTaxValue += _tax.Satx_itm_tax_amt;
                        }

                        var _pcTaxVAT = from _pcTaxs in _masterPCTax
                                        where _pcTaxs.Mpt_taxtp == "VAT"
                                        select _pcTaxs;

                        foreach (MasterPCTax _one in _pcTaxVAT)
                        {
                            InvoiceItemTax _tax = new InvoiceItemTax();
                            _tax.Satx_inv_no = _itm.Sad_inv_no;
                            _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                            _tax.Satx_itm_line = _itm.Sad_itm_line;

                            //updated by akila 2017/06/29
                            decimal _tmpTaxAmount = 0;
                            if (_itm.Sad_disc_rt > 0)
                                _tmpTaxAmount = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt + newTaxValue - (_itm.Sad_unit_amt / 100 * _itm.Sad_disc_rt)) * _one.Mpt_taxrt / 100;
                            else
                                _tmpTaxAmount = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt + newTaxValue - _itm.Sad_disc_amt) * _one.Mpt_taxrt / 100;

                            _tax.Satx_itm_tax_amt = RoundSalesValue(_tmpTaxAmount, _invoiceHeader.Sah_com);

                            //kapila 25/2/2016
                            //if (_itm.Sad_disc_rt > 0)
                            //    _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt + newTaxValue - (_itm.Sad_unit_amt / 100 * _itm.Sad_disc_rt)) * _one.Mpt_taxrt / 100;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                            //else
                            //    _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt + newTaxValue - _itm.Sad_disc_amt) * _one.Mpt_taxrt / 100;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;

                            if (_invoiceHeader.Sah_inv_tp == "DEBT")
                            {
                                _tax.Satx_itm_tax_amt = 0;
                            }
                            _tax.Satx_itm_tax_rt = _one.Mpt_taxrt;
                            _tax.Satx_itm_tax_tp = _one.Mpt_taxtp;
                            _tax.Satx_job_line = 0;
                            _tax.Satx_job_no = "";
                            _tax.Satx_seq_no = InvoiceSeqNo;
                            _salesDAL.SaveSalesItemTax(_tax);
                        }
                    }
                    else
                    {
                        if (_invoiceHeader.Sah_dt == DateTime.Now.Date)
                        {
                            List<MasterItemTax> _itmTax = new List<MasterItemTax>();

                            //add by akila 2017/06/29
                            if (_isStrucBaseTax == true)
                            {
                                MasterItem _mstItem = _salesDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);
                                _itmTax = _salesDAL.GetItemTax_strucbase(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "NBT", string.Empty, _mstItem.Mi_anal1);
                            }
                            else
                                _itmTax = _salesDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "NBT", string.Empty);
                            //_itmTax = _salDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "NBT", string.Empty);

                            decimal newTaxValue = 0;

                            foreach (MasterItemTax _one in _itmTax)
                            {
                                InvoiceItemTax _tax = new InvoiceItemTax();
                                _tax.Satx_inv_no = _itm.Sad_inv_no;
                                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                _tax.Satx_itm_line = _itm.Sad_itm_line;

                                //updated by akila 2017/06/29
                                decimal _tmpTaxAmount = 0;
                                _tmpTaxAmount = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt - ((_itm.Sad_unit_amt * _itm.Sad_disc_rt) / 100)) * _one.Mict_tax_rate / 100;
                                _tax.Satx_itm_tax_amt = RoundSalesValue(_tmpTaxAmount, _invoiceHeader.Sah_com);

                                //_tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100; // ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                if (_invoiceHeader.Sah_inv_tp == "DEBT")
                                {
                                    _tax.Satx_itm_tax_amt = 0;
                                }
                                _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                _tax.Satx_job_line = 0;
                                _tax.Satx_job_no = "";
                                _tax.Satx_seq_no = InvoiceSeqNo;
                                _salDAL.SaveSalesItemTax(_tax);
                                newTaxValue += _tax.Satx_itm_tax_amt;
                            }

                            _itmTax = new List<MasterItemTax>();
                            //add by akila 2017/06/29
                            if (_isStrucBaseTax == true)
                            {
                                MasterItem _mstItem = _salesDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);
                                _itmTax = _salesDAL.GetItemTax_strucbase(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "VAT", string.Empty, _mstItem.Mi_anal1);
                            }
                            else
                                _itmTax = _salesDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "VAT", string.Empty);
                            //_itmTax = _salDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "VAT", string.Empty);


                            foreach (MasterItemTax _one in _itmTax)
                            {
                                InvoiceItemTax _tax = new InvoiceItemTax();
                                _tax.Satx_inv_no = _itm.Sad_inv_no;
                                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                _tax.Satx_itm_line = _itm.Sad_itm_line;

                                //updated by akila. 2017/06/28
                                decimal _tmpTaxAmount = 0;
                                _tmpTaxAmount = _invoiceHeader.Sah_tax_exempted ? 0 : ((_itm.Sad_unit_amt - ((_itm.Sad_unit_amt * _itm.Sad_disc_rt) / 100)) + newTaxValue) * _one.Mict_tax_rate / 100;
                                _tax.Satx_itm_tax_amt = RoundSalesValue(_tmpTaxAmount, _invoiceHeader.Sah_com);

                                //_tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt + newTaxValue - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                if (_invoiceHeader.Sah_inv_tp == "DEBT")
                                {
                                    _tax.Satx_itm_tax_amt = 0;
                                }
                                _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                _tax.Satx_job_line = 0;
                                _tax.Satx_job_no = "";
                                _tax.Satx_seq_no = InvoiceSeqNo;
                                _salDAL.SaveSalesItemTax(_tax);
                            }
                        }
                        else
                        {
                            List<MasterItemTax> _itmTaxEff = new List<MasterItemTax>();
                            _itmTaxEff = _salDAL.GetItemTaxEffDt(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _invoiceHeader.Sah_dt);

                            if (_itmTaxEff.Count > 0)
                            {
                                foreach (MasterItemTax _one in _itmTaxEff)
                                {
                                    InvoiceItemTax _tax = new InvoiceItemTax();
                                    _tax.Satx_inv_no = _itm.Sad_inv_no;
                                    _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                    _tax.Satx_itm_line = _itm.Sad_itm_line;
                                    _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                    if (_invoiceHeader.Sah_inv_tp == "DEBT")
                                    {
                                        _tax.Satx_itm_tax_amt = 0;
                                    }
                                    _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                    _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                    _tax.Satx_job_line = 0;
                                    _tax.Satx_job_no = "";
                                    _tax.Satx_seq_no = InvoiceSeqNo;
                                    _salDAL.SaveSalesItemTax(_tax);
                                }
                            }
                            else
                            {

                                List<LogMasterItemTax> _itmTax = new List<LogMasterItemTax>();
                                _itmTax = _salDAL.GetItemTaxLog(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _invoiceHeader.Sah_dt);

                                foreach (LogMasterItemTax _one in _itmTax)
                                {
                                    InvoiceItemTax _tax = new InvoiceItemTax();
                                    _tax.Satx_inv_no = _itm.Sad_inv_no;
                                    _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                    _tax.Satx_itm_line = _itm.Sad_itm_line;
                                    _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                    if (_invoiceHeader.Sah_inv_tp == "DEBT")
                                    {
                                        _tax.Satx_itm_tax_amt = 0;
                                    }
                                    _tax.Satx_itm_tax_rt = _one.Lict_tax_rate;
                                    _tax.Satx_itm_tax_tp = _one.Lict_tax_cd;
                                    _tax.Satx_job_line = 0;
                                    _tax.Satx_job_no = "";
                                    _tax.Satx_seq_no = InvoiceSeqNo;
                                    _salDAL.SaveSalesItemTax(_tax);
                                }
                            }
                        }
                    }
                    //Dictionary<ItemHierarchyElement, string> _itemHierarchyElement = new Dictionary<ItemHierarchyElement, string>();
                    //_itemHierarchyElement.Add(ItemHierarchyElement.BRAND, _item.Mi_brand);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.ITEM, _item.Mi_cd);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.MAIN_CATEGORY, _item.Mi_cate_1);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.PRICE_BOOK, _itm.Sad_pbook);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.PRICE_LEVEL, _itm.Sad_pb_lvl);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.PROMOTION, _itm.Sad_promo_cd);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.SERIAL, string.Empty);
                    //_itemHierarchyElement.Add(ItemHierarchyElement.SUB_CATEGORY, _item.Mi_cate_2);

                    //List<CashCommissionDetailRef> _CashCommissionDetail = GetCommissionStructure(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_inv_tp, _invoiceHeader.Sah_dt, _itm.Sad_pbook, _itm.Sad_pb_lvl, _invoiceHeader.Sah_sales_ex_cd, _executiveType, _itemHierarchyElement, "PC_PRIT_HIERARCHY", "PC");
                    //List<SaleCommission> _commission = null;

                    ////commission calculation
                    //if (_CashCommissionDetail != null)
                    //{
                    //    if (_CashCommissionDetail.Count > 0)
                    //    {
                    //        _commission = GetCalculatedCommission(_itm.Sad_itm_cd, _invoiceLine, _itm.Sad_unit_rt * _itm.Sad_qty - _itm.Sad_disc_amt, _totalValue, _recieptItem, _CashCommissionDetail[0]);
                    //    }
                    //}

                    //if (_commission != null)
                    //    _saveCommission.AddRange(_commission);

                    //_invoiceLine += 1;
                }

                //Update Discount Definition
                var _discountseq = _invoiceItem.Where(x => x.Sad_dis_type == "M").Select(x => x.Sad_dis_seq).Distinct().ToList();
                if (_discountseq != null && _discountseq.Count > 0)
                {
                    foreach (var _i in _discountseq)
                    {
                        int _seqno = Convert.ToInt32(_i);
                        _salDAL.UpdateGeneralDiscount("M", _seqno, 0);
                    }
                }
                #endregion

                #region Commission Part - Commented :)

                //if (_saveCommission != null)
                //    if (_saveCommission.Count > 0)
                //    {

                //        //Save Commissiom
                //        _saveCommission.ForEach(x => x.Sac_invoice_no = Convert.ToString(_invoiceHeader.Sah_seq_no));
                //        _saveCommission.ForEach(x => x.Sac_seq_no = _invoiceHeader.Sah_seq_no);
                //        foreach (SaleCommission _com in _saveCommission)
                //        {
                //            _salDAL.SaveSalesCommission(_com);
                //        }
                //    }

                #endregion

                //Save Invoice Serials
                #region Invoice Serial
                if (_invoiceSerial != null)
                    if (_invoiceSerial.Count > 0)
                    {
                        foreach (InvoiceSerial _itm in _invoiceSerial)
                        {
                            _itm.Sap_seq_no = InvoiceSeqNo;
                            _salDAL.SaveSalesSerial(_itm);
                        }
                    }
                #endregion

                //-------------------------------------------------------------------------- Payment
                #region Payment
                string _shortcompany = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com).Mc_anal5;
                if (_recieptHeader != null && _recieptItem != null && _recieptItem.Count > 0)
                {
                    _recieptHeader.Sar_seq_no = RecieptSeqNo;
                    _recieptHeader.Sar_receipt_no = Convert.ToString(RecieptSeqNo);
                    _recieptHeader.Sar_tot_settle_amt = _totalReceiptAmt;
                    _salDAL.SaveReceiptHeader(_recieptHeader);

                    if (_recieptItem != null)
                        if (_recieptItem.Count > 0)
                        {
                            foreach (RecieptItem _itm in _recieptItem)
                            {
                                _itm.Sard_seq_no = RecieptSeqNo;
                                _itm.Sard_inv_no = _invoiceHeader.Sah_inv_no;
                                _itm.Sard_receipt_no = Convert.ToString(RecieptSeqNo);
                                _salDAL.SaveReceiptItem(_itm);

                                if (_itm.Sard_pay_tp.Trim() == "ADVAN")
                                {
                                    _invRepDAL.UpdateAdvanceReceiptNofromInvoice(_itm.Sard_ref_no, Convert.ToString(InvoiceSeqNo), string.Empty);
                                    RecieptHeader _rHdr = new RecieptHeader();
                                    _rHdr.Sar_receipt_no = _itm.Sard_ref_no;
                                    _rHdr.Sar_used_amt = _itm.Sard_settle_amt;
                                    _rHdr.Sar_act = true;
                                    _rHdr.Sar_direct = true;
                                    _rHdr.Sar_mod_by = _recieptHeader.Sar_mod_by;
                                    _salDAL.SaveReceiptHeader(_rHdr);
                                }
                                if (_itm.Sard_pay_tp.Trim() == "CRNOTE")
                                {
                                    _salesDAL.UpdateCreditNoteBalance(_recieptHeader.Sar_com_cd, _recieptHeader.Sar_profit_center_cd, _itm.Sard_ref_no, _itm.Sard_settle_amt);
                                    MasterBusinessEntity _entity = _salDAL.GetBusinessCompanyDetail(_invoiceHeader.Sah_com, _invoiceHeader.Sah_cus_cd, null, null, "C");
                                    MasterProfitCenter _profit = _salDAL.GetProfitCenter(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc);
                                    if (_entity != null)
                                        if (!string.IsNullOrEmpty(_entity.Mbe_com) && !string.IsNullOrEmpty(_entity.Mbe_mob))
                                        {
                                            string _realPhNo = GetRealPhoneNumber(_entity.Mbe_mob);
                                            OutSMS _out = new OutSMS();
                                            _out.Createtime = DateTime.Now;
                                            _out.Msg = "Your customer code : " + _entity.Mbe_cd + " auth. payment " + _itm.Sard_settle_amt + " deduct from your cred. bal. at " + _profit.Mpc_desc + ". Enq SMS/Call " + _profit.Mpc_tel + ". " + _shortcompany + ",(" + DateTime.Now.Day + "," + DateTime.Now.Month + ")";
                                            _out.Msgstatus = 0;
                                            _out.Msgtype = "S";
                                            _out.Receivedtime = DateTime.Now;
                                            _out.Receiver = _entity.Mbe_cd;
                                            //_out.Receiverphno = _entity.Mbe_mob; //Edit by Chamal 31-03-2015
                                            _out.Senderphno = _entity.Mbe_mob;
                                            _out.Refdocno = _itm.Sard_ref_no;
                                            _out.Sender = _invoiceHeader.Sah_cre_by;
                                            _out.Createtime = DateTime.Now;
                                            _invDAL.SaveSMSOut(_out);
                                        }
                                }

                                if (_itm.Sard_pay_tp.Trim() == "LORE")
                                {
                                    _salesDAL.RedeemLoyaltyPoint(_itm.Sard_ref_no, _invoiceHeader.Sah_cus_cd, _itm.Sard_anal_4);
                                }

                                if (_itm.Sard_pay_tp.Trim() == "GVO")
                                {
                                    //_fmsInventoryDal.UpdateRedeemVoucher(_itm.Sard_anal_1, _invoiceHeader.Sah_pc, _itm.Sard_sim_ser, _itm.Sard_ref_no, _itm.Sard_cc_tp, _itm.Sard_anal_2, _invoiceHeader.Sah_cre_by, _itm.Sard_settle_amt);
                                    _fmsInventoryDal.UpdateRedeemVoucher(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _itm.Sard_sim_ser, _itm.Sard_ref_no, _itm.Sard_cc_tp, _itm.Sard_anal_2, _invoiceHeader.Sah_cre_by, _itm.Sard_settle_amt);
                                }

                            }
                        }
                }
                #endregion

                #region Customer Account Maintain
                if (_invoiceHeader.Sah_cus_cd != "CASH")
                {
                    decimal _invoiceTotal = 0;
                    decimal _paidTotal = 0;

                    if (_invoiceItem != null)
                        if (_invoiceItem.Count > 0)
                        {
                            //Updating Account Balance
                            var _grandTotal = (from _total in _invoiceItem
                                               select _total.Sad_tot_amt).Sum();
                            _invoiceTotal = _grandTotal;
                        }

                    if (_recieptItem != null)
                        if (_recieptItem.Count > 0)
                        {
                            var _payTotal = (from _pay in _recieptItem
                                             select _pay.Sard_settle_amt).Sum();
                            _paidTotal = _payTotal;
                        }

                    CustomerAccountRef _account = new CustomerAccountRef();
                    _account.Saca_acc_bal = _invoiceTotal - _paidTotal;
                    _account.Saca_com_cd = _invoiceHeader.Sah_com;
                    _account.Saca_crdt_lmt = 0;
                    _account.Saca_cre_by = _invoiceHeader.Sah_cre_by;
                    _account.Saca_cre_when = _invoiceHeader.Sah_cre_when;
                    _account.Saca_cust_cd = _invoiceHeader.Sah_cus_cd;
                    _account.Saca_mod_by = _invoiceHeader.Sah_cre_by;
                    _account.Saca_mod_when = _invoiceHeader.Sah_cre_when;
                    _account.Saca_ord_bal = 0;
                    _account.Saca_session_id = _invoiceHeader.Sah_session_id;

                    //
                    // _salDAL.SaveCustomerAccount(_account);
                }
                #endregion

                if (!string.IsNullOrEmpty(_invoiceHeader.Sah_anal_6))
                {
                    DataTable _loldetail = _salDAL.GetLoyaltyCardDetail(_invoiceHeader.Sah_cus_cd, _invoiceHeader.Sah_anal_6);
                    string _loltype = string.Empty;
                    string _membership = string.Empty;
                    if (_loldetail != null && _loldetail.Rows.Count >= 0) { _loltype = _loldetail.Rows[0].Field<string>("salcm_loty_tp"); _membership = _loldetail.Rows[0].Field<string>("salcm_cus_spec"); }
                    decimal _points = GetLoyaltyPoint(_loltype, _membership, _invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _invoiceHeader.Sah_dt, _invoiceItem, _invoiceSerial, _recieptItem, _salDAL, _invDAL, _invoiceHeader.Sah_inv_tp);
                    if (_points > 0)
                    {
                       // _salDAL.UpdateLoyaltyCardPoint(_invoiceHeader.Sah_cus_cd, _invoiceHeader.Sah_anal_6, _points, _invoiceHeader.Sah_cre_by);
                        InvoiceLoyalty _lol = new InvoiceLoyalty();
                        _lol.Stlt_inv_no = Convert.ToString(_invoiceHeader.Sah_seq_no);
                        _lol.Stlt_pt = _points;
                        _lol.Stlt_seq_no = _invoiceHeader.Sah_seq_no;
                        _salDAL.SaveInvoiceLoyalty(_lol);
                    }
                }

                InventoryHeader _invHdr = null;
                DataTable _dataTable = null; ;
                #region Invoice Auto Number/Delivery Order
                if (!_isHold)
                {
                    /*
                nxt1:
                    _invoiceAuto.Aut_year = null;
                    MasterAutoNumber InvoiceAuto = _invDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
                    if (!_ishireSale)
                        InvoiceNo = _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                    else
                        InvoiceNo = _invoiceAuto.Aut_cate_cd + "-" + _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                    _invoiceAuto.Aut_year = null;
                    _invoiceAuto.Aut_modify_dt = null;
                    if (_salDAL.CheckSalesNo("sp_getinvno", "p_inv_no", InvoiceNo) == 1)
                    {
                        _salDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
                        goto nxt1;
                    }

                    _salDAL.UpdateInvoiceAutoNumber(_invoiceAuto);
                    _salDAL.UpdateInvoiceWithTaxCommission(InvoiceNo, string.Empty, InvoiceSeqNo, RecieptSeqNo);

                    if (_recieptAuto != null)
                    {
                    nxt2:
                        _recieptAuto.Aut_year = null;
                        MasterAutoNumber RecieptAuto = _invDAL.GetAutoNumber(_recieptAuto.Aut_moduleid, _recieptAuto.Aut_direction, _recieptAuto.Aut_start_char, _recieptAuto.Aut_cate_tp, _recieptAuto.Aut_cate_cd, _recieptAuto.Aut_modify_dt, _recieptAuto.Aut_year);
                        RecieptNo = _recieptAuto.Aut_cate_cd + "-" + RecieptAuto.Aut_start_char + RecieptAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                        _recieptAuto.Aut_year = null;
                        _recieptAuto.Aut_modify_dt = null;

                        if (_salDAL.CheckSalesNo("sp_getreceiptno", "p_rept_no", RecieptNo) == 1)
                        {
                            _salDAL.UpdateInvoiceAutoNumber(_recieptAuto);
                            goto nxt2;
                        }
                        //_invDAL.UpdateAutoNumber(_recieptAuto);

                        _salDAL.UpdateInvoiceAutoNumber(_recieptAuto);
                    }
                    _salDAL.UpdateReceipt(InvoiceNo, RecieptNo, InvoiceSeqNo, RecieptSeqNo);
                    //Update receipt no which allocated by receipt entry as per invoice
                    _invRepDAL.UpdateAdvanceReceiptNofromInvoice(string.Empty, Convert.ToString(InvoiceSeqNo), InvoiceNo);
                    */

                    //Raise Delivery Order if the invoice going to deliver now!
                    if (_isDeliveryNow)
                    {

                        _pickSerial.ForEach(x => x.Tus_base_doc_no = InvoiceSeqNo.ToString());
                        _pickSerial.ForEach(x => x.Tus_usrseq_no = InventorySeqNo);
                        _inventoryHeader.Ith_pc = _invoiceHeader.Sah_pc;
                        _inventoryHeader.Ith_oth_docno = InvoiceSeqNo.ToString();
                        _inventoryHeader.Ith_entry_no = InvoiceSeqNo.ToString();
                        _inventoryHeader.Ith_seq_no = InventorySeqNo;
                        InventoryBLL _bll = new InventoryBLL();
                        //_bll.DeliveryOrderInterCompany(_inventoryHeader, _pickSerial, _pickSubSerial, _inventoryAuto, out  _doNo, _invRepDAL, _invDAL);
                        //Code by Chamal 13-May-2013 edit DeliveryOrder function and new DeliveryOrderEntry

                        DataTable dttt = DataTableExtensions.ToDataTable(_pickSerial);

                        _bll.DeliveryOrderWithoutAutoNo(_inventoryHeader, _pickSerial, _pickSubSerial, _inventoryAuto, _invRepDAL, _invDAL, true, out _invHdr, out _dataTable);
                    }
                }
                else
                {
                    InvoiceNo = Convert.ToString(InvoiceSeqNo);
                }

                _invSeq = InvoiceSeqNo.ToString();
                _recieptSeq = RecieptSeqNo.ToString();
                _mov = _invHdr;
                _datatable = _dataTable;

                #endregion
            }
            catch (Exception ex)
            {
                _invSeq = "";
                _recieptSeq = "";
                _mov = null;
                _datatable = null;
                _error += "Generated error " + ex.Message;
                if (_error.Contains("UK_SAHINVNO") || _error.Contains("ORA-00001"))
                {
                    _error = "Please try again in a few seconds.";
                }
            }

            _invNo = InvoiceNo;
            _recNo = RecieptNo;

            _invoiceNo = _invNo;
            _receiptNo = _recNo;
            _deliveryOrder = _doNo;
            _errorlist = _error;

        }

        public InvoiceHeader GetInvoiceHeader(string _invoiceno)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceHeader(_invoiceno);
        }

        //Tharaka 2015-08-04
        public DataTable GETCUST_BY_ACC(string _company, string _profitcenter, string _Acc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GETCUST_BY_ACC(_company, _profitcenter, _Acc);
        }


        public class PostCommissionEmployee
        {
            private string emp_code;
            private string emp_epf;


            public string Emp_code
            {
                get { return emp_code; }
                set { emp_code = value; }
            }
            public string Emp_epf
            {
                get { return emp_epf; }
                set { emp_epf = value; }
            }
        }

        public class EliteCommissionInvoice
        {

            private string invoice_no;
            private bool invoice_type;
            private string mge_code;
            private string exe_code;
            private string cashier_code;
            private string item_code;
            private decimal value;
            private decimal discount;
            private decimal vat;



            public bool Invoice_type
            {
                get { return invoice_type; }
                set { invoice_type = value; }
            }
            public string Mge_code
            {
                get { return mge_code; }
                set { mge_code = value; }
            }
            public string Exe_code
            {
                get { return exe_code; }
                set { exe_code = value; }
            }
            public string Cashier_code
            {
                get { return cashier_code; }
                set { cashier_code = value; }
            }
            public string Item_code
            {
                get { return item_code; }
                set { item_code = value; }
            }
            public decimal Value
            {
                get { return this.value; }
                set { this.value = value; }
            }
            public decimal Discount
            {
                get { return discount; }
                set { discount = value; }
            }
            public decimal Vat
            {
                get { return vat; }
                set { vat = value; }
            }
            public string Invoice_no
            {
                get { return invoice_no; }
                set { invoice_no = value; }
            }

        }


        public DataTable CheckRequestType(string com, string pc, string doc_tp)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.CheckRequestType(com, pc, doc_tp);
        }
        public DataTable CheckExecutive(string emp_id)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.CheckExecutive(emp_id);
        }
        public DataTable Select_EMP_ID(string usr_name)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Select_EMP_ID(usr_name);
        }
        public Int32 SaveSalesOrderRequest(INT_REQ int_req, List<INT_REQ_ITM> int_req_itm, MasterAutoNumber mastAutoNo, out string msg)
        {
            Int32 seqNo = 0;
            Int32 result = 0;
            string documentNo = null;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                Int32 autoNo = _financialDAL.GetAutoNumber(mastAutoNo.Aut_moduleid, mastAutoNo.Aut_direction, mastAutoNo.Aut_start_char, mastAutoNo.Aut_cate_tp, mastAutoNo.Aut_cate_cd, mastAutoNo.Aut_modify_dt, mastAutoNo.Aut_year).Aut_number;
                documentNo = mastAutoNo.Aut_cate_cd + "-" + mastAutoNo.Aut_cate_tp + "-" + autoNo.ToString("00000", CultureInfo.InvariantCulture);

                if (string.IsNullOrEmpty(documentNo))
                {
                    msg = "Request DocumentNo Empty";
                    return -1;
                }

                int effect = -1;
                effect = _financialDAL.UpdateAutoNumber(mastAutoNo);
                //effect = _salesDAL.UpdateAutoNumber(mastAutoNo);

                if (effect < 0)
                {
                    msg = "autoNo Update fail.";
                    return -1;
                }

                int_req.ITR_REQ_NO = documentNo;


                seqNo = _salesDAL.SaveINT_REQ(int_req);

                if (seqNo < 0)
                {
                    msg = "Request Insert fail.";
                    return -1;
                }
                foreach (INT_REQ_ITM itm in int_req_itm)
                {
                    itm.ITRI_SEQ_NO = seqNo;
                    result = _salesDAL.SaveINT_REQ_ITM(itm);

                    if (result <= 0)
                    {
                        msg = "Item Insert Fail.";
                        return -1;
                    }
                }

                _financialDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                result = -1;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
            }

            msg = documentNo;
            return result;
        }
        public Int32 UpdateStatus_INT_REQ(string req_no, string stus)
        {
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                int result = _salesDAL.UpdateStatus_INT_REQ(req_no, stus);

                _salesDAL.TransactionCommit();
                return result;

            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                return -1;
            }
        }
        public INT_REQ GetRequest(string req_no)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRequest(req_no);
        }
        public List<INT_REQ_ITM> GetRequestItem(Int32 seq_no)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRequestItem(seq_no);
        }
        public DataTable Check_INT_REQ(string req_no, string tp, string excecutive)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Check_INT_REQ(req_no, tp, excecutive);
        }
        public DataTable Check_INT_REQ_RER(string req_no, string tp)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Check_INT_REQ_RER(req_no, tp);
        }
        public Int32 UpdateSalesOrderRequest(INT_REQ int_req, List<INT_REQ_ITM> int_req_itm, out string msg)
        {
            Int32 seqNo = 0;
            Int32 result = 0;
            string documentNo = null;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                seqNo = _salesDAL.UpdateINT_REQ(int_req);

                if (seqNo < 0)
                {
                    msg = "Request Update fail.";
                    return -1;
                }

                seqNo = int_req.ITR_SEQ_NO;

                foreach (INT_REQ_ITM itm in int_req_itm)
                {
                    itm.ITRI_SEQ_NO = seqNo;
                    result = _salesDAL.SaveINT_REQ_ITM(itm);

                    if (result <= 0)
                    {
                        msg = "Item Update Fail.";
                        return -1;
                    }
                }

                _financialDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                result = -1;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
            }

            msg = documentNo;
            return result;
        }

        public DataTable Select_REF_REQ_SUBTP(string main_tp)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Select_REF_REQ_SUBTP(main_tp);
        }
        public DataTable Select_REF_LOC_CATE1()
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Select_REF_LOC_CATE1();
        }

        public Int32 SaveReservationRequest(INT_REQ int_req, List<INT_REQ_ITM> int_req_itm, List<INT_REQ_SER> int_req_ser, MasterAutoNumber mastAutoNo, out string msg)
        {
            Int32 seqNo = 0;
            Int32 result = 0;
            string documentNo = null;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                Int32 autoNo = _financialDAL.GetAutoNumber(mastAutoNo.Aut_moduleid, mastAutoNo.Aut_direction, mastAutoNo.Aut_start_char, mastAutoNo.Aut_cate_tp, mastAutoNo.Aut_cate_cd, mastAutoNo.Aut_modify_dt, mastAutoNo.Aut_year).Aut_number;
                // documentNo = mastAutoNo.Aut_cate_cd + "-" + mastAutoNo.Aut_moduleid + "-" + mastAutoNo.Aut_year + "-" + autoNo.ToString("00000", CultureInfo.InvariantCulture);
                documentNo = mastAutoNo.Aut_moduleid + "-" + mastAutoNo.Aut_year + "-" + autoNo.ToString("00000", CultureInfo.InvariantCulture);

                if (string.IsNullOrEmpty(documentNo))
                {
                    msg = "Request DocumentNo Empty";
                    return -1;
                }

                int effect = -1;
                effect = _financialDAL.UpdateAutoNumber(mastAutoNo);
                //effect = _salesDAL.UpdateAutoNumber(mastAutoNo);

                if (effect < 0)
                {
                    msg = "autoNo Update fail.";
                    return -1;
                }

                int_req.ITR_REQ_NO = documentNo;


                seqNo = _salesDAL.SaveINT_REQ(int_req);

                if (seqNo < 0)
                {
                    msg = "Request Insert fail.";
                    return -1;
                }
                foreach (INT_REQ_ITM itm in int_req_itm)
                {
                    itm.ITRI_SEQ_NO = seqNo;
                    result = _salesDAL.SaveINT_REQ_ITM(itm);

                    if (result <= 0)
                    {
                        msg = "Item Insert Fail.";
                        return -1;
                    }
                }
                if (int_req_ser != null)
                {
                    foreach (INT_REQ_SER ser in int_req_ser)
                    {
                        ser.ITRS_SEQ_NO = seqNo;
                        result = _salesDAL.SaveINT_REQ_SER(ser);

                        if (result <= 0)
                        {
                            msg = "Item Serial Fail.";
                            return -1;
                        }
                    }
                }

                _financialDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                result = -1;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
            }

            msg = documentNo;
            return result;
        }

        public List<INT_REQ_SER> GetINT_REQ_SER(Int32 seq_no)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetINT_REQ_SER(seq_no);
        }

        public List<INR_LOC> GetINR_LOC(string com, string loc, string item_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetINR_LOC(com, loc, item_cd);
        }

        public DataTable Select_MST_STUS(string cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Select_MST_STUS(cd);
        }

        //Sahan 12/Aug/2015
        public DataTable SearchSalesRequest(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SearchSalesRequest(_initialSearchParams, _searchCatergory, _searchText);
        }

        //Sahan 12/Aug/2015
        public DataTable SearchCustomer(string p_mbe_com, string p_mbe_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SearchCustomer(p_mbe_com, p_mbe_cd);
        }
        public DataTable SearchCustomer2(string p_mbe_com, string p_mbe_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SearchCustomer2(p_mbe_com, p_mbe_cd);
        }
        //Sahan 12/Aug/2015

        public Tuple<int, string> PlaceSalesOrder(SalesOrderHeader SalesOrder, MasterAutoNumber _masterAutoNumber)
        {
            Int32 _effect = 0;
            Tuple<int, int> _effect2;
            string docno = string.Empty;

            try
            {
                string _documentNo = string.Empty;

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                Int32 _autoNo = _financialDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                _documentNo = _masterAutoNumber.Aut_cate_cd + "-" + _masterAutoNumber.Aut_moduleid + "-" + _masterAutoNumber.Aut_start_char + "-" + _autoNo.ToString("0000", CultureInfo.InvariantCulture);
                _effect = _financialDAL.UpdateAutoNumber(_masterAutoNumber);

                if (string.IsNullOrEmpty(SalesOrder.SOH_SO_NO))
                {
                    SalesOrder.SOH_SO_NO = _documentNo;
                }
                _effect2 = _salesDAL.PlaceSalesOrder(SalesOrder);
                int _seq = Convert.ToInt32(_effect2.Item2);
                SalesOrder.SOH_SEQ_NO = _seq;
                _effect = _seq;

                docno = _documentNo;
                _financialDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                return new Tuple<int, string>(_effect, docno);
            }
            catch (Exception err)
            {
                _effect = -1;
                docno = "ERROR : " + err.Message.ToString();
                _financialDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                return new Tuple<int, string>(_effect, docno);
            }
            finally
            {
                _financialDAL.ConnectionClose();
                _salesDAL.ConnectionClose();
            }
        }

        //Sahan 12/Aug/2015
        public DataTable SearchSalesOrder(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SearchSalesOrder(_initialSearchParams, _searchCatergory, _searchText);
        }

        //Sahan 12/Aug/2015
        public Int32 SaveSOItems(SalesOrderItems SalesOrderItems)
        {
            _salesDAL = new SalesDAL();

            return _salesDAL.SaveSOItems(SalesOrderItems);
        }

        //Sahan 12/Aug/2015
        public Int32 SaveSOItemTax(SalesOrderItemTax SalesOrderItemTax)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SaveSOItemTax(SalesOrderItemTax);
        }

        //Sahan 12/Aug/2015
        public Int32 SaveSOSer(SalesOrderSer _SalesOrderSer)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SaveSOSer(_SalesOrderSer);
        }

        //Sahan 12/Aug/2015
        public Int32 UpdateSOStatus(SalesOrderHeader _SalesOrder, out string _error)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            _salesDAL.BeginTransaction();
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            _generalDAL = new GeneralDAL();
            _error = string.Empty;

            int _result = 0;
            decimal _tot_amt = 0;
            _result = _salesDAL.UpdateSOStatus(_SalesOrder);
            if (_result > 0)
            {
                List<SalesOrderItems> _soitm = new List<SalesOrderItems>();
                SalesOrderItems _itmObj = new SalesOrderItems();
                _itmObj.SOI_SO_NO = _SalesOrder.SOH_SO_NO;
                _soitm = _salesDAL.GETSOITEM(_itmObj);
                _tot_amt = _soitm.Sum(r => r.SOI_TOT_AMT);
                if (_SalesOrder.SOH_STUS == "C")
                {
                    if (_soitm != null)
                    {
                        if (_soitm.Count > 0)
                        {
                            InventoryBLL _BL = new InventoryBLL();
                            foreach (SalesOrderItems _itm in _soitm)
                            {
                                if (!string.IsNullOrEmpty(_itm.SOI_RES_NO) && _itm.SOI_RES_NO != "N/A")
                                {
                                    #region add reservation log update by lakshan 04 Mar 2017
                                    InventoryRequest _intSoData = new InventoryRequest();
                                    _intSoData = _inventoryDAL.GET_INT_REQ_DATA_NEW(new InventoryRequest() { Itr_req_no = _SalesOrder.SOH_SO_NO }).FirstOrDefault();
                                    int _res = 0;
                                    string _errro = "";
                                    _res = _inventoryDAL.UPDATE_INR_RES_DET_SO_MRN(new INR_RES_DET()
                                    {
                                        IRD_RES_NO = _itm.SOI_RES_NO,
                                        IRD_ITM_CD = _itm.SOI_ITM_CD,
                                        IRD_ITM_STUS = _itm.SOI_ITM_STUS,
                                        IRD_RES_BQTY = (_itm.SOI_QTY * -1)
                                    });

                                    INR_RES_LOG _baseDocCancel = new INR_RES_LOG();
                                    _baseDocCancel.IRL_CURT_COM = _intSoData.Itr_com;
                                    _baseDocCancel.IRL_CURT_LOC = _intSoData.Itr_issue_from;
                                    _baseDocCancel.IRL_ORIG_DOC_TP = _intSoData.Itr_tp;
                                    _baseDocCancel.IRL_ORIG_DOC_NO = _intSoData.Itr_req_no;
                                    _baseDocCancel.IRL_ORIG_DOC_DT = DateTime.Now;
                                    _baseDocCancel.IRL_CURT_DOC_TP = _intSoData.Itr_tp + "_CANCL";
                                    _baseDocCancel.IRL_CURT_DOC_NO = _intSoData.Itr_req_no;
                                    _baseDocCancel.IRL_CURT_DOC_DT = _intSoData.Itr_dt;
                                    _baseDocCancel.IRL_RES_NO = _itm.SOI_RES_NO;
                                    _baseDocCancel.IRL_ITM_CD = _itm.SOI_ITM_CD;
                                    _baseDocCancel.IRL_ITM_STUS = _itm.SOI_ITM_STUS;
                                    _baseDocCancel.IRL_MOD_BY_NEW = _SalesOrder.SOH_MOD_BY;
                                    _baseDocCancel.IRL_MOD_SESSION = _SalesOrder.SOH_SESSION_ID;
                                    _baseDocCancel.IRL_MOD_DT = DateTime.Now;
                                    _baseDocCancel.IRL_CRE_BY = _SalesOrder.SOH_CRE_BY;
                                    _baseDocCancel.IRL_CRE_DT = DateTime.Now;
                                    _baseDocCancel.IRL_CRE_SESSION = _SalesOrder.SOH_SESSION_ID;
                                    _baseDocCancel.IRL_RES_QTY = _itm.SOI_QTY;
                                    _res = _BL.ReservationLogDataUpdateCancel(_baseDocCancel, 0, _inventoryDAL, out _errro);

                                    if (_res > 0)
                                    {
                                        INR_RES_LOG _refDocSave = new INR_RES_LOG();
                                        _refDocSave.IRL_CURT_COM = _intSoData.Itr_com;
                                        _refDocSave.IRL_CURT_LOC = _intSoData.Itr_issue_from;
                                        _refDocSave.IRL_ORIG_DOC_TP = _intSoData.Itr_tp + "_CANCL";
                                        _refDocSave.IRL_ORIG_DOC_NO = _intSoData.Itr_req_no;
                                        _refDocSave.IRL_ORIG_DOC_DT = DateTime.Now;
                                        _refDocSave.IRL_CURT_DOC_TP = "INV";
                                        _refDocSave.IRL_CURT_DOC_NO = _itm.SOI_RES_NO;
                                        _refDocSave.IRL_CURT_DOC_DT = _intSoData.Itr_dt;
                                        _refDocSave.IRL_RES_NO = _itm.SOI_RES_NO;
                                        _refDocSave.IRL_ITM_CD = _itm.SOI_ITM_CD;
                                        _refDocSave.IRL_ITM_STUS = _itm.SOI_ITM_STUS;
                                        _refDocSave.IRL_MOD_BY_NEW = _SalesOrder.SOH_MOD_BY;
                                        _refDocSave.IRL_MOD_SESSION = _SalesOrder.SOH_SESSION_ID;
                                        _refDocSave.IRL_MOD_DT = DateTime.Now;
                                        _refDocSave.IRL_CRE_BY = _SalesOrder.SOH_CRE_BY;
                                        _refDocSave.IRL_CRE_DT = DateTime.Now;
                                        _refDocSave.IRL_CRE_SESSION = _SalesOrder.SOH_SESSION_ID;
                                        _refDocSave.IRL_RES_QTY = _itm.SOI_QTY;
                                        _res = _BL.ReservationLogDataUpdateCancel(_refDocSave, 0, _inventoryDAL, out _errro);
                                    }
                                    if (_res < 1)
                                    {
                                        _result = -1;
                                        _error = _errro;
                                        _salesDAL.TransactionRollback();
                                        _inventoryDAL.TransactionRollback();
                                        _salesDAL.ConnectionClose();
                                        _inventoryDAL.ConnectionClose();
                                        return _result;
                                    }
                                    #endregion
                                }
                            }
                        }
                    }
                }
                else
                {
                    if (_soitm != null)
                    {
                        if (_soitm.Count > 0)
                        {
                            foreach (SalesOrderItems _itm in _soitm)
                            {
                                #region update item allocation data 10 Jan 2017
                                if (_SalesOrder.SOH_ALLOCATION)
                                {

                                    InventoryRequest _tmpReqHdr = new InventoryRequest();
                                    InventoryRequestItem _tmpReqItm = new InventoryRequestItem();
                                    _tmpReqHdr.Itr_loc = _SalesOrder.SOH_DEL_LOC;
                                    _tmpReqHdr.Itr_com = _SalesOrder.SOH_COM;
                                    _tmpReqItm = new InventoryRequestItem();
                                    _tmpReqItm.Itri_itm_cd = _itm.SOI_ITM_CD;
                                    _tmpReqItm.Itri_itm_stus = _itm.SOI_ITM_STUS;
                                    _tmpReqItm.Itri_qty = _itm.SOI_QTY;
                                    Int32 _rr = UpdateItemAllocationDataFIFO(_inventoryDAL, _tmpReqItm, _tmpReqHdr);

                                }
                                #endregion
                            }
                        }
                    }

                }
                // _CustServiceDAL.SendConfirmationMail()
                SendConfirmationSMS(_SalesOrder.SOH_COM, _SalesOrder.SOH_PC, null, null, null, _SalesOrder.SOH_MOD_WHEN, "", null, _SalesOrder.SOH_SALES_EX_CD, _SalesOrder.SOH_SO_NO, _SalesOrder.SOH_MAN_REF, _SalesOrder.SOH_CUS_CD + " - " + _SalesOrder.SOH_CUS_NAME);
                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
            }
            //Added By Udaya 04.10.2017
            bool _isSend = false;
            HpSystemParameters _getSystemParameter = new HpSystemParameters();
            _getSystemParameter = _salesDAL.GetSystemParameter("COM", "AAL", "EMAIL", DateTime.Now);
            if (_getSystemParameter != null)
            {
                if (_getSystemParameter.Hsy_val == 1)
                {
                    _isSend = true;
                }
            }
            if (_isSend)
            {
                if (_result > 0)
                {
                    List<MsgInformation> _mail = _generalDAL.GetMsgInformation(_SalesOrder.SOH_COM, "", "JOB_CONFIRM");
                    if (_mail != null)
                    {
                        if (_mail.Count > 0)
                        {
                            foreach (MsgInformation _info in _mail)
                            {
                                SmtpClient smtpClient = new SmtpClient();
                                MailMessage message = new MailMessage();

                                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                                smtpClient.Host = _generalDAL.GetMailHost();
                                smtpClient.Port = 25;
                                message.From = fromAddress;

                                string _email = "";

                                _email = " Dear Sir/Madam, \n\n" + _email;
                                _email += " Sales Order customer name : " + _SalesOrder.SOH_CUS_CD + " - " + _SalesOrder.SOH_CUS_NAME + " \n";
                                _email += "\n Sales Order approved value : " + _tot_amt + " \n";
                                _email += "\n Excutive code : " + _SalesOrder.SOH_SALES_EX_CD + " \n";
                                _email += "\n SO # : " + _SalesOrder.SOH_SO_NO + "\n";
                                _email += "\n Approve Date : " + _SalesOrder.SOH_MOD_WHEN + " \n";

                                //_email += _generalDAL.GetMailFooterMsg();
                                _email += " \n Thank You, \n ** This is an auto generated mail from Abans infor portal. Please don't Reply ** \n ** Abans IT Department **";
                                message.To.Add(_info.Mmi_email);
                                message.Subject = "Sales Order Credit Approval";
                                message.IsBodyHtml = false;
                                message.Body = _email;
                                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                                smtpClient.Send(message);
                            }
                        }
                    }
                }
            }
            return _result;
        }

        //Sahan 14/Aug/2015
        public DataTable SearchLocations(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SearchLocations(_initialSearchParams, _searchCatergory, _searchText);
        }

        //Sahan 14/Aug/2015
        public DataTable SearchSalesOrdData(string p_soh_so_no, string p_soh_com, string p_soh_pc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SearchSalesOrdData(p_soh_so_no, p_soh_com, p_soh_pc);
        }

        //Sahan 14/Aug/2015
        public List<SalesOrderItems> SearchSalesOrdItems(string p_soi_so_no)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SearchSalesOrdItems(p_soi_so_no);
        }

        //Sahan
        public DataTable SearchSalesOrdItemTax(string p_sotx_so_no)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SearchSalesOrdItemTax(p_sotx_so_no);
        }

        //Sahan 14/Aug/2015
        public DataTable SearchSalesOrdSerials(string p_sose_so_no)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SearchSalesOrdSerials(p_sose_so_no);
        }

        //Sahan 15/Aug/2015
        public DataTable GetInvReqItems(string p_seq_no, string p_itri_com, string p_itri_loc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvReqItems(p_seq_no, p_itri_com, p_itri_loc);
        }

        //Sahan 18/Aug/2015
        public DataTable GetWareHousetemsData(string p_inl_com, string p_inl_loc, string p_inl_itm_cd, string p_inl_itm_stus)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetWareHousetemsData(p_inl_com, p_inl_loc, p_inl_itm_cd, p_inl_itm_stus);
        }

        //Sahan 18/Aug/2015
        public DataTable GetItemStatusVal(string p_mis_desc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetItemStatusVal(p_mis_desc);
        }

        //Sahan 18/Aug/2015
        public DataTable GetItemStatusTxt(string p_mis_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetItemStatusTxt(p_mis_cd);
        }

        //Sahan 18/Aug/2015
        public Int32 BalanceItemStock(INT_REQ_ITM _ReqItem)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.BalanceItemStock(_ReqItem);
        }

        //Pemil 2015-08-20
        public List<INT_REQ> Search_INT_REQ(string com, string code, string chnl, string pc, DateTime fdate, DateTime tdate)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Search_INT_REQ(com, code, chnl, pc, fdate, tdate);
        }

        //Pemil 2015-08-20
        public DataTable SELECT_INT_REQ_ITMbyREQ_NO(string req_no)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SELECT_INT_REQ_ITMbyREQ_NO(req_no);
        }

        //Pemil 2015-08-20
        public DataTable Select_REF_LOC_TP(string cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Select_REF_LOC_TP(cd);
        }

        //Pemil 2015-08-21
        public DataTable Select_InventoryBalance(string cd, string itm_cd, string company = null)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Select_InventoryBalance(cd, itm_cd, company);
        }

        //Pemil 2015-08-22 
        public Int32 SaveReservationApproval(INR_RES inr_res, List<INR_RES_DET> inr_res_det, List<INR_RES_LOG> inr_res_log, MasterAutoNumber mastAutoNo, out string msg, out string finaldoc)
        {
            Int32 seqNo = 0;
            Int32 result = 0;
            string documentNo = null;
            finaldoc = null;
            string error = null;

            string reqno = null;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                _CustServiceDAL = new CustServiceDAL();
                _CustServiceDAL.ConnectionOpen();
                _CustServiceDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();


                //var _scanItems = inr_res_det.GroupBy(x => new { x.BL_NO, x.IRD_ITM_CD, x.LOC_CD }).Select(group => new { Peo = group.Key, theCount = group.Count() }).ToList();
                var _scanItems = inr_res_det.GroupBy(x => new { x.BL_NO, x.LOC_CD }).Select(group => new { Peo = group.Key, theCount = group.Count() }).ToList();
                foreach (var itm in _scanItems)
                {
                    Int32 autoNo = _financialDAL.GetAutoNumber(mastAutoNo.Aut_moduleid, mastAutoNo.Aut_direction, mastAutoNo.Aut_start_char, mastAutoNo.Aut_cate_tp, mastAutoNo.Aut_cate_cd, mastAutoNo.Aut_modify_dt, mastAutoNo.Aut_year).Aut_number;
                    documentNo = mastAutoNo.Aut_cate_cd + "-" + mastAutoNo.Aut_moduleid + "-" + mastAutoNo.Aut_year + "-" + autoNo.ToString("00000", CultureInfo.InvariantCulture);

                    if (string.IsNullOrEmpty(documentNo))
                    {
                        msg = "Request DocumentNo Empty";
                        _CustServiceDAL.TransactionRollback();
                        _financialDAL.TransactionRollback();
                        _salesDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        return -1;
                    }

                    int effect = -1;
                    effect = _financialDAL.UpdateAutoNumber(mastAutoNo);
                    //effect = _salesDAL.UpdateAutoNumber(mastAutoNo);

                    if (effect < 0)
                    {
                        msg = "autoNo Update fail.";
                        _CustServiceDAL.TransactionRollback();
                        _financialDAL.TransactionRollback();
                        _salesDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        return -1;
                    }
                    inr_res.IRS_ANAL_1 = itm.Peo.BL_NO;
                    inr_res.IRS_RES_NO = documentNo;
                    //inr_res.IRS_SEQ = Convert.ToInt32(autoNo.ToString("00000", CultureInfo.InvariantCulture));

                    seqNo = _salesDAL.SaveINR_RES(inr_res);

                    if (seqNo < 0)
                    {
                        msg = "Request Insert fail.";
                        _CustServiceDAL.TransactionRollback();
                        _financialDAL.TransactionRollback();
                        _salesDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        return -1;
                    }
                    foreach (INR_RES_DET itm_d in inr_res_det)
                    {
                        //var vBl = inr_res_det.Where(c => c.BL_NO == itm.Peo.BL_NO).FirstOrDefault();
                        //if ((itm_d.BL_NO == itm.Peo.BL_NO) && (itm_d.IRD_ITM_CD == itm.Peo.IRD_ITM_CD))
                        if (itm_d.BL_NO == itm.Peo.BL_NO && !string.IsNullOrEmpty(itm_d.BL_NO))
                        {
                            itm_d.IRD_SEQ = seqNo;
                            result = _salesDAL.SaveINR_RES_DET(itm_d);
                            if (itm_d.BL_NO != null)
                            {
                                var vBl = inr_res_det.Where(c => c.BL_NO == itm.Peo.BL_NO).ToList();
                                if (vBl != null)
                                {
                                    foreach (var v in vBl)
                                    {
                                        if (v.IRD_ITM_CD == itm_d.IRD_ITM_CD)
                                        {
                                            result = _salesDAL.Update_BI_RqtyNew(v.BL_NO, v.IRD_ITM_CD, v.IRD_RESREQ_LINE, v.IRD_RES_QTY, 3);
                                        }
                                    }
                                }

                            }
                            else
                            {

                            }

                            if (result <= 0)
                            {
                                msg = "Item Insert Fail.";
                                _CustServiceDAL.TransactionRollback();
                                _financialDAL.TransactionRollback();
                                _salesDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                return -1;
                            }
                            reqno = itm_d.IRD_RESREQ_NO;
                        }
                        if (itm_d.LOC_CD == itm.Peo.LOC_CD && !string.IsNullOrEmpty(itm_d.LOC_CD))
                        {
                            itm_d.IRD_SEQ = seqNo;
                            result = _salesDAL.SaveINR_RES_DET(itm_d);
                            if (itm_d.BL_NO != null)
                            {
                                //result = _salesDAL.Update_BI_Rqty(itm_d.BL_NO, itm_d.IRD_ITM_CD, itm_d.IRD_RESREQ_LINE, itm_d.IRD_RES_QTY, 3);
                            }
                            if (result <= 0)
                            {
                                msg = "Item Insert Fail.";
                                _CustServiceDAL.TransactionRollback();
                                _financialDAL.TransactionRollback();
                                _salesDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                return -1;
                            }
                            reqno = itm_d.IRD_RESREQ_NO;
                        }
                    }
                    foreach (INR_RES_LOG log in inr_res_log)
                    {
                        //if ((log.BL_NO == itm.Peo.BL_NO) && (log.IRL_ITM_CD == itm.Peo.IRD_ITM_CD))
                        if ((log.BL_NO == itm.Peo.BL_NO) && !string.IsNullOrEmpty(log.BL_NO))
                        {
                            log.IRL_SEQ = seqNo;
                            log.IRL_RES_NO = documentNo;
                            result = _salesDAL.SaveINR_RES_LOG(log);
                            if (log.BL_NO != null)
                            {

                            }
                            else
                            {
                                result = _inventoryDAL.UpdateLocationRes(inr_res.IRS_COM, log.IRL_ORIG_LOC, log.IRL_ITM_CD, log.IRL_ITM_STUS, log.IRL_CRE_BY, log.IRL_RES_BQTY);
                            }

                            if (result <= 0)
                            {
                                msg = "log Insert Fail.";
                                _CustServiceDAL.TransactionRollback();
                                _financialDAL.TransactionRollback();
                                _salesDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                return -1;
                            }
                        }

                        if ((log.LOC_CD == itm.Peo.LOC_CD && !string.IsNullOrEmpty(log.LOC_CD)))
                        {
                            log.IRL_SEQ = seqNo;
                            log.IRL_RES_NO = documentNo;
                            result = _salesDAL.SaveINR_RES_LOG(log);
                            result = _inventoryDAL.UpdateLocationRes(inr_res.IRS_COM, log.IRL_ORIG_LOC, log.IRL_ITM_CD, log.IRL_ITM_STUS, log.IRL_CRE_BY, log.IRL_RES_BQTY);
                            if (result <= 0)
                            {
                                msg = "log Insert Fail.";
                                _CustServiceDAL.TransactionRollback();
                                _financialDAL.TransactionRollback();
                                _salesDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                return -1;
                            }
                        }

                    }
                    result = _CustServiceDAL.Update_ReqHeaderStatus("F", inr_res.IRS_CRE_BY, inr_res.IRS_COM, reqno);
                    finaldoc = finaldoc + "|" + documentNo;
                }

                _CustServiceDAL.TransactionCommit();
                _financialDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                result = -1;
                error = ex.Message;
                _CustServiceDAL.TransactionRollback();
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
            }

            msg = error;
            return result;
        }

        //Pemil 2015-08-22
        public Int32 UpdateReservationApproval(INR_RES inr_res, List<INR_RES_DET> inr_res_det, out string msg)
        {
            Int32 seqNo = 0;
            Int32 result = 0;
            string documentNo = null;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                result = _salesDAL.UpdateINR_RES(inr_res);

                //if (seqNo < 0)
                //{
                //    msg = "Request Update fail.";
                //    return -1;
                //}

                //seqNo = inr_res.IRS_SEQ;

                foreach (INR_RES_DET itm in inr_res_det)
                {
                    //    itm.IRD_SEQ = seqNo;
                    result = _salesDAL.UpdateINR_RES_DET(itm);

                    //    if (result <= 0)
                    //    {
                    //        msg = "Item Update Fail.";
                    //        return -1;
                    //    }
                }

                _financialDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                documentNo = ex.ToString(); ;
                result = -1;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
            }

            msg = documentNo;
            return result;
        }

        //Pemil 2015-08-22
        public INR_RES GetReservationApproval(string req_no)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReservationApproval(req_no);
        }

        //Pemil 2015-08-22
        public List<INR_RES_DET> GetGetReservationApprovalItem(Int32 seq_no)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetGetReservationApprovalItem(seq_no);
        }

        //Pemil 2015-08-27
        public List<INR_RES_LOG> GetGetReservationlog(Int32 seq_no, string cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetGetReservationlog(seq_no, cd);
        }

        //Pemil 2015-08-28
        public List<INT_REQ> GetINT_REQList(Int32 seq_no)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetINT_REQList(seq_no);
        }

        //darshana 21-08-2015
        public DataTable GetDetailsforBatchPrice(string p_com, string p_loc, decimal p_margin, string p_cat1, string p_cat2, string p_cat3, string p_docNo, DateTime _frmDt, DateTime _toDt)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDetailsforBatchPrice(p_com, p_loc, p_margin, p_cat1, p_cat2, p_cat3, p_docNo, _frmDt, _toDt);
        }
        //Rukshan 26-08-2015
        public DataTable GetDetailsforBarcodePrice(string p_BType, string p_lvlcode, string p_Icode)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDetailsforBarcodePrice(p_BType, p_lvlcode, p_Icode);
        }

        //Pemil 2015-08-31
        public List<INR_RES> Select_INR_RES(string com, string chnl, string res_no, string tp, string cust_cd, DateTime fromDate, DateTime toDate, string status)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Select_INR_RES(com, chnl, res_no, tp, cust_cd, fromDate, toDate, status);
        }

        //Pemil 2015-08-31
        public Int32 CancelINR_RES_LOG(List<INR_RES_LOG> inr_res_log, decimal qty, string mod_by, DateTime mod_dt)
        {
            Int32 seqNo = 0;
            Int32 result = 0;
            string documentNo = null;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                InventoryBLL _BL = new InventoryBLL();

                //INR_RES_LOG inrResLog = new INR_RES_LOG();
                //inrResLog.IRL_RES_NO = inr_res_log.FirstOrDefault().IRL_RES_NO;
                //inrResLog.IRL_ACT = 1;

                //List<INR_RES_LOG> inrResLogDet = _BL.GET_INR_RES_LOG_DATA_NEW(inrResLog);

                //int maxlineno = inrResLogDet.Max(x => x.IRL_LINE);
                foreach (INR_RES_LOG log in inr_res_log)
                {

                    seqNo = _salesDAL.CancelINR_RES_LOG(log, qty, mod_by, mod_dt);
                    //log.IRL_LINE = maxlineno + 1;

                    if (seqNo > 0)
                    {
                        INR_RES_LOG newreslog = new INR_RES_LOG();
                        newreslog.IRL_RES_NO = log.IRL_RES_NO;
                        newreslog.IRL_CURT_COM = log.IRL_CURT_COM;
                        newreslog.IRL_CURT_LOC = log.IRL_CURT_LOC;
                        newreslog.IRL_CURT_DOC_DT = log.IRL_CURT_DOC_DT;
                        newreslog.IRL_CURT_DOC_TP = "CANCL";
                        newreslog.IRL_CURT_DOC_NO = "";
                        newreslog.IRL_ITM_CD = log.IRL_ITM_CD;
                        newreslog.IRL_ITM_STUS = log.IRL_ITM_STUS;
                        newreslog.IRL_RES_QTY = log.IRL_CAN_QTY;
                        newreslog.IRL_RES_IQTY = log.IRL_CAN_QTY;
                        // newreslog.IRL_RES_BQTY = log.IRL_RES_BQTY - log.IRL_CAN_QTY;
                        newreslog.IRL_RES_BQTY = 0;
                        newreslog.TMP_IRL_RES_BQTY = log.TMP_IRL_RES_BQTY - log.IRL_CAN_QTY;
                        newreslog.IRL_ACT = 0;
                        newreslog.IRL_MOD_BY_NEW = log.IRL_MOD_BY_NEW;
                        newreslog.IRL_MOD_DT = log.IRL_MOD_DT;
                        newreslog.IRL_MOD_SESSION = log.IRL_MOD_SESSION;

                        newreslog.IRL_ORIG_COM = log.IRL_CURT_COM;
                        newreslog.IRL_ORIG_LOC = log.IRL_CURT_LOC;
                        newreslog.IRL_ORIG_DOC_DT = log.IRL_ORIG_DOC_DT;
                        newreslog.IRL_ORIG_DOC_NO = log.IRL_ORIG_DOC_NO;
                        newreslog.IRL_ORIG_BATCH_LINE = log.IRL_ORIG_BATCH_LINE;
                        newreslog.IRL_ORIG_ITM_LINE = log.IRL_ORIG_ITM_LINE;
                        newreslog.IRL_ORIG_DOC_TP = log.IRL_ORIG_DOC_TP;

                        newreslog.IRL_SEQ = log.IRL_SEQ;
                        newreslog.IRL_LINE = 0;
                        newreslog.IRL_RES_LINE = log.IRL_RES_LINE;
                        newreslog.IRL_CRE_BY = mod_by;
                        newreslog.IRL_CRE_DT = mod_dt;
                        newreslog.IRL_CRE_SESSION = log.IRL_CRE_SESSION;
                        newreslog.IRL_RES_WP = 0;

                        seqNo = _inventoryDAL.SaveInrResLogDataCancel(newreslog);
                    }

                    if (seqNo <= 0)
                    {
                        return -1;
                    }
                    //maxlineno = log.IRL_LINE;
                }


                _financialDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                result = 1;
            }
            catch (Exception ex)
            {
                result = -1;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();

                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
            }

            return result;
        }

        //Tharaka 2015-09-04
        private bool IsVirtual(string _type)
        {
            bool _yes = false;
            if (!string.IsNullOrEmpty(_type))
                if (_type == "V")
                    _yes = true;
                else
                    _yes = false;
            else
                _yes = false;
            return _yes;
        }

        //Tharaka 2015-09-29
        public List<INR_RES> GET_RESERVATION_HDR(string com, string custCode, String Status, string _loc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GET_RESERVATION_HDR(com, custCode, Status, _loc);
        }

        //Tharaka 2015-09-30
        public List<INR_RES_DET> GET_RESERVATION_DET(Int32 seq_no, string _doc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GET_RESERVATION_DET(seq_no, _doc);
        }

        //Rukshan 2015-10-15
        public List<ReptPickSerials> GetInvItem(string _doc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvItem(_doc, null, null, System.DateTime.Now, null);
        }

        public DataTable Get_GroupSaleInvoiceDetails(DataTable _groupsale)
        {//Sanjeewa 2015-10-17
            _salesDAL = new SalesDAL();
            DataTable _invoicedetails = new DataTable();

            if (_groupsale.Rows.Count > 0)
            {
                foreach (DataRow drow in _groupsale.Rows)
                {
                    DataTable _temp = new DataTable();
                    _temp = _salesDAL.Get_GroupSaleInvoiceDetails(drow["HPA_INVC_NO"].ToString());
                    _invoicedetails.Merge(_temp);
                }
            }

            return _invoicedetails;
        }

        public DataTable Get_GroupSaleInvoiceDetails1(string _invno)
        {//Sanjeewa 2015-10-17
            _salesDAL = new SalesDAL();
            DataTable _invoicedetails = new DataTable();

            return _invoicedetails = _salesDAL.Get_GroupSaleInvoiceDetails(_invno);
        }

        //Tharaka 2015-10-19
        public List<ReptPickSerials> GET_BUYBACKITMES_FOR_INVOIC(string invoice)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GET_BUYBACKITMES_FOR_INVOIC(invoice);
        }

        //Tharaka 2015-09-29
        public List<InvoiceItem> GET_INV_ITM_BY_RESNO_LINE(String Res, Int32 ResLine)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GET_INV_ITM_BY_RESNO_LINE(Res, ResLine);
        }

        //Sahan 02/Nov/2015
        public Int32 UpdatePriceBook(PriceBookRef book)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.UpdatePriceBook(book);
        }

        //Sahan 02/Nov/2015
        public DataTable SearchPriceBooks(string company)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SearchPriceBooks(company);
        }

        //Tharaka 2015-11-02
        public List<CashGeneralEntiryDiscountDef> GET_DIS_REQ_BY_CUSTOMER(string saleType, string com, string pc, DateTime date, string customer)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GET_DIS_REQ_BY_CUSTOMER(saleType, com, pc, date, customer);
        }

        //Sahan 03/Nov/2015
        public Int32 UpdatePriceBookLevel(PriceBookLevelRef booklevel)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.UpdatePriceBookLevel(booklevel);
        }


        //Sahan 04/Nov/2015
        public DataTable SearchPriceBookLevels(string company, string code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SearchPriceBookLevels(company, code);
        }

        //Tharaka 2015-12-03
        public List<InterCompanySalesParameter> GET_INTERCOM_PAR_BY_CUST(string Com, String Cust)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GET_INTERCOM_PAR_BY_CUST(Com, Cust);
        }

        //Tharaka 2015-12-04
        private decimal TaxCalculation(string _com, string _item, string _status, decimal _UnitPrice, decimal _TaxVal)
        {
            decimal _totNBT = 0;
            decimal _NBT = 0;
            decimal _oTax = 0;
            _TaxVal = 0;

            List<MasterItemTax> _taxs = new List<MasterItemTax>();
            _taxs = _inventoryDAL.GetItemTax(_com, _item, _status, string.Empty, string.Empty);
            var _Tax = from _itm in _taxs
                       select _itm;
            foreach (MasterItemTax _one in _Tax)
            {
                if (_one.Mict_tax_cd == "NBT")
                {
                    _NBT = _UnitPrice * _one.Mict_tax_rate / 100;
                    _TaxVal = _TaxVal + _NBT;
                    _totNBT = _totNBT + _NBT;
                }
            }

            foreach (MasterItemTax _two in _Tax)
            {
                if (_two.Mict_tax_cd != "NBT")
                {
                    _oTax = (_UnitPrice + _totNBT) * _two.Mict_tax_rate / 100;
                    _TaxVal = _TaxVal + _oTax;
                }
            }

            return _TaxVal;
        }

        private decimal TaxCalculationActualCost(string _com, string _item, string _status, decimal _UnitPrice, string _supTaxCate, decimal _actTaxVal)
        {
            //_inventoryDAL = new InventoryDAL();
            //_salesDAL = new SalesDAL();
            decimal _totNBT = 0;
            decimal _NBT = 0;
            decimal _oTax = 0;
            decimal _claimTaxRt = 0;

            _actTaxVal = 0;

            List<MasterItemTax> _taxs = new List<MasterItemTax>();
            _taxs = _inventoryDAL.GetItemTax(_com, _item, _status, string.Empty, string.Empty);
            var _Tax = from _itm in _taxs select _itm;

            MasterItemTaxClaim _claimTax = new MasterItemTaxClaim();
            _claimTax = _inventoryDAL.GetTaxClaimDet(_com, _item, _supTaxCate);
            foreach (MasterItemTax _one in _Tax)
            {
                if (_one.Mict_tax_cd == "NBT")
                {
                    _NBT = _UnitPrice * _one.Mict_tax_rate / 100;
                    _actTaxVal = _actTaxVal + _NBT;
                    _totNBT = _totNBT + _NBT;
                }
            }

            foreach (MasterItemTax _two in _Tax)
            {
                if (_two.Mict_tax_cd != "NBT")
                {
                    if (_claimTax != null)
                    { _claimTaxRt = _two.Mict_tax_rate - _claimTax.Mic_claim; }
                    else
                    { _claimTaxRt = _two.Mict_tax_rate; }
                    _oTax = (_UnitPrice + _totNBT) * _claimTaxRt / 100;
                    _actTaxVal = _actTaxVal + _oTax;
                }
            }
            return _actTaxVal;
        }

        //Tharaka 2015-12-04
        private decimal GetUnitPrice(decimal TotalPrice, decimal Tax)
        {
            decimal UnitPrice = 0;
            UnitPrice = (100 * TotalPrice) / (100 + Tax);
            return UnitPrice;
        }

        //Tharaka 2015-12-04
        public List<ReptPickSerials> GetServicesForPO(String Com, String loc, String InvoiceNumber)
        {
            _CustServiceDAL = new CustServiceDAL();
            _inventoryDAL = new InventoryDAL();
            List<ReptPickSerials> oSerials = new List<ReptPickSerials>();
            List<InventoryHeader> oHeaders = _CustServiceDAL.GET_ADO_BY_OTH_DOC(InvoiceNumber, Com, loc);
            if (oHeaders != null && oHeaders.Count > 0)
            {
                foreach (InventoryHeader item in oHeaders)
                {
                    List<ReptPickSerials> oSerialsFromOD = _inventoryDAL.Get_Int_Ser(item.Ith_doc_no);
                    oSerials.AddRange(oSerialsFromOD);
                }
            }
            return oSerials;
        }

        //Darshana 2015-12-04
        public List<PaymentType> GetPossiblePaymentTypes_Default(string _com, string _schnl, string _pc, string txn_tp, DateTime today, Int32 _isBOCN)
        {
            _salesDAL = new SalesDAL();
            List<PaymentType> pc_list = null;
            pc_list = _salesDAL.GetPossiblePaymentTypes_Default(_com, "PC", _pc, txn_tp, today, _isBOCN);
            if (pc_list == null)
                pc_list = _salesDAL.GetPossiblePaymentTypes_Default(_com, "SCHNL", _schnl, txn_tp, today, _isBOCN);
            //else
            //    pc_list = null;

            return pc_list;

        }
        public DataTable GetPossiblePayTypes(string _com, string _party, string _cd, string txn_tp, DateTime today)
        {
            _salesDAL = new SalesDAL();
            DataTable _dt = _salesDAL.GetPossiblePayTypes(_com, "ALL", _cd, txn_tp, today);
            return _dt;
        }
        //Tharaka 2015-12-22
        public Int32 ReceiptInvoiceAllocation(RecieptHeader _NewReceipt, List<RecieptItem> oRecieptItems, List<RecieptItem> oDebitInvoices, out string err)
        {
            Int32 result = 0;
            err = string.Empty;
            try
            {

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                foreach (RecieptItem _ReceiptDetails in oDebitInvoices)
                {
                    //_salesDAL.SaveReceiptItem(_ReceiptDetails);
                    if (_NewReceipt.Sar_receipt_type == "DEBT")
                    {
                        //Int32 getErr = Convert.ToInt32("");

                        decimal _curBalance = 0;
                        if (_NewReceipt.Sar_is_oth_shop == true)        //kapila   27/6/2014
                        {
                            _curBalance = _salesDAL.GetOutInvAmt(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_oth_sr, _NewReceipt.Sar_debtor_cd, _ReceiptDetails.Sard_inv_no);
                            if (_curBalance >= _ReceiptDetails.Sard_settle_amt)
                            {
                                _salesDAL.UpdateInvoiceSettleAmt(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_oth_sr, _NewReceipt.Sar_debtor_cd, _ReceiptDetails.Sard_inv_no, _ReceiptDetails.Sard_settle_amt);
                            }
                            else
                            {
                                result = -1;
                                err = "Cannot proceed : Outstanding balance is " + _curBalance + " and settlement amount is " + _ReceiptDetails.Sard_settle_amt + " for the invoice " + _ReceiptDetails.Sard_inv_no;
                                _inventoryDAL.TransactionRollback();
                                _salesDAL.TransactionRollback();

                                return result;
                            }
                        }
                        else
                        {
                            if (!String.IsNullOrEmpty(_ReceiptDetails.Sard_inv_no))
                            {
                                _curBalance = _salesDAL.GetOutInvAmt(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd, _NewReceipt.Sar_debtor_cd, _ReceiptDetails.Sard_inv_no);
                                if (_curBalance >= _ReceiptDetails.Sard_settle_amt)
                                {
                                    _salesDAL.UpdateInvoiceSettleAmt(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd, _NewReceipt.Sar_debtor_cd, _ReceiptDetails.Sard_inv_no, _ReceiptDetails.Sard_settle_amt);
                                }
                                else
                                {
                                    result = -1;
                                    err = "Cannot proceed : Outstanding balance is " + _curBalance + " and settlement amount is " + _ReceiptDetails.Sard_settle_amt + " for the invoice " + _ReceiptDetails.Sard_inv_no;
                                    _inventoryDAL.TransactionRollback();
                                    _salesDAL.TransactionRollback();
                                    return result;
                                }
                            }
                        }
                    }
                }

                if (_NewReceipt.Sar_receipt_type == "DEBT")
                {
                    // get invoice numbers
                    var _lst = (from n in oRecieptItems
                                group n by new { n.Sard_inv_no } into r
                                select new { Sard_inv_no = r.Key.Sard_inv_no }).ToList();

                    decimal _Balance = 0;
                    decimal _commAmt = 0;
                    decimal _minCommAllow = 0;
                    decimal _wkNo = 0;
                    Decimal _maxDaysAllow = 0;
                    HpSystemParameters _getSystemParameter = new HpSystemParameters();

                    foreach (var s in _lst)
                    {
                        if (s.Sard_inv_no == "")
                        {
                            continue;
                        }

                        if (_NewReceipt.Sar_is_oth_shop == true)        //kapila   27/6/2014
                            _Balance = _salesDAL.GetOutInvAmt(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_oth_sr, _NewReceipt.Sar_debtor_cd, s.Sard_inv_no);
                        else
                            _Balance = _salesDAL.GetOutInvAmt(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd, _NewReceipt.Sar_debtor_cd, s.Sard_inv_no);

                        _getSystemParameter = _salesDAL.GetSystemParameter("COM", _NewReceipt.Sar_com_cd, "CRCOMMINAW", _NewReceipt.Sar_receipt_date);

                        if (_getSystemParameter.Hsy_cd != null)
                        {
                            _minCommAllow = _getSystemParameter.Hsy_val;
                        }
                        else
                        {
                            _minCommAllow = 0;
                        }

                        if (_Balance <= _minCommAllow)
                        {
                            //kapila 28/7/2015
                            _getSystemParameter = _salesDAL.GetSystemParameter("COM", _NewReceipt.Sar_com_cd, "COMIGNORE", _NewReceipt.Sar_receipt_date);

                            if (_getSystemParameter.Hsy_cd != null)
                                _maxDaysAllow = _getSystemParameter.Hsy_val;
                            else
                                _maxDaysAllow = -1;

                            if (_maxDaysAllow != -1)    //record found in hpr_sys_para table
                            {
                                //check whether registration is done
                                List<VehicalRegistration> _preReg = new List<VehicalRegistration>();
                                _preReg = _generalDAL.GetVehRegNoByInvoiceNo(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd, s.Sard_inv_no);

                                if (_preReg != null)
                                {
                                    DataTable _dtInvDt = _salesDAL.GetSalesHdr(s.Sard_inv_no);
                                    Int32 _days = Convert.ToInt32((Convert.ToDateTime(_dtInvDt.Rows[0]["sah_dt"]) - _preReg[0].P_svrt_reg_dt).TotalDays);
                                    if (_days > _maxDaysAllow)
                                        _commAmt = 0;
                                    else
                                        _commAmt = _salesDAL.GetFinalCreditCommission(s.Sard_inv_no);
                                }
                                else
                                    _commAmt = 0;
                            }
                            else
                                //get commission amount
                                _commAmt = _salesDAL.GetFinalCreditCommission(s.Sard_inv_no);

                            //save GNT_REM_SUM 
                            RemitanceSummaryDetail _remDet = new RemitanceSummaryDetail();
                            _remDet.Rem_com = _NewReceipt.Sar_com_cd;
                            if (_NewReceipt.Sar_is_oth_shop == true)    //kapila  27/6/2014
                                _remDet.Rem_pc = _NewReceipt.Sar_oth_sr;
                            else
                                _remDet.Rem_pc = _NewReceipt.Sar_profit_center_cd;

                            _remDet.Rem_dt = _NewReceipt.Sar_receipt_date;
                            _remDet.Rem_sec = "02";
                            _remDet.Rem_cd = "005";
                            _remDet.Rem_sh_desc = "Group sale comm";
                            _remDet.Rem_lg_desc = "GROUP SALE COMM";
                            _remDet.Rem_val = _commAmt;
                            _remDet.Rem_val_final = _commAmt;
                            int _weekNo = _generalDAL.GetWeek(Convert.ToDateTime(_NewReceipt.Sar_receipt_date).Date, out _wkNo, _NewReceipt.Sar_com_cd);
                            _remDet.Rem_week = _wkNo + "S";
                            _remDet.Rem_ref_no = _NewReceipt.Sar_seq_no.ToString();
                            _remDet.Rem_rmk = s.Sard_inv_no;
                            _remDet.Rem_cr_acc = null;
                            _remDet.Rem_db_acc = null;
                            _remDet.Rem_del_alw = false;
                            _remDet.Rem_cre_by = _NewReceipt.Sar_create_by;
                            _remDet.Rem_cre_dt = _NewReceipt.Sar_receipt_date;
                            _remDet.Rem_is_sos = true;
                            _remDet.Rem_is_dayend = true;
                            _remDet.Rem_is_sun = true;
                            _remDet.Rem_cat = 17;
                            _remDet.Rem_add = 0;
                            _remDet.Rem_ded = 0;
                            _remDet.Rem_net = _commAmt;
                            _remDet.Rem_epf = 0;
                            _remDet.Rem_esd = 0;
                            _remDet.Rem_wht = 0;
                            _remDet.Rem_add_fin = 0;
                            _remDet.Rem_ded_fin = 0;
                            _remDet.Rem_net_fin = _commAmt;
                            _remDet.Rem_rmk_fin = s.Sard_inv_no;
                            _remDet.Rem_bnk_cd = null;
                            _remDet.Rem_is_rem_sum = true;
                            _salesDAL.SaveRemSummaryForFinalCreditComm(_remDet);
                        }
                    }
                }

                foreach (RecieptItem _ReceiptDetails in oRecieptItems)
                {
                    result = _salesDAL.UPDATEP_RECP_ITM_SETL_AMNT(_ReceiptDetails.Sard_settle_amt, _ReceiptDetails.Sard_seq_no, _ReceiptDetails.Sard_line_no, _ReceiptDetails.Sard_receipt_no);
                }

                decimal TotalValue = oRecieptItems.Sum(x => x.Sard_settle_amt);
                if (TotalValue == 0)
                {
                    result = _salesDAL.UpdateUsedReceiptAmt(_NewReceipt.Sar_com_cd, _NewReceipt.Sar_profit_center_cd, Convert.ToDecimal("1"), _NewReceipt.Sar_receipt_type, oRecieptItems[0].Sard_receipt_no);
                }

                _inventoryDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();

            }

            return result;
        }

        //Tharaka 2015-12-28
        public DataTable GET_SAO_ITEMS_BY_SO_NO(string code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GET_SAO_ITEMS_BY_SO_NO(code);
        }

        //Tharaka 2015-12-28
        public DataTable GET_SAO_SER_BY_SO_NO(string code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GET_SAO_SER_BY_SO_NO(code);
        }

        public List<MasterPCTax> GetPcTax(string _company, string _pc, Int16 _stus, DateTime _dt)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPcTax(_company, _pc, _stus, _dt);
        }

        public Int32 Save_Exchange_Rate(List<MasterExchangeRate> _Exchange, string p_type)
        {
            //Lakshan 2016/01/30
            Int32 _effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                if (_Exchange != null)
                {
                    foreach (MasterExchangeRate item in _Exchange)
                    {
                        _effect = _salesDAL.Save_Exchange_Rate(item, p_type);

                    }

                }
                _salesDAL.TransactionCommit();
                _effect = 1;
            }
            catch (Exception err)
            {
                _effect = -1;
                _salesDAL.TransactionRollback();
            }
            return _effect;
        }

        //Rukshan 2016-02-06
        public DataTable GETRES_PO_DETAILS(string _com, string _sbu, string _supp, string _blno, DateTime _fdate, DateTime _todate, string _item)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GETRES_PO_DETAILS(_com, _sbu, _supp, _blno, _fdate, _todate, _item);

        }

        //Sanjeewa 2016-02-10
        public DataTable getPOAllocation(string _po)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getPOAllocation(_po);

        }

        public Int16 CheckBalanceInvoiceQty(string _invoice, string _item)
        {
            _salesDAL = new SalesDAL();
            DataTable _tbl = _salesDAL.CheckBalanceInvoiceQty(_invoice, _item);
            Int16 _output = -2;
            if (_tbl != null && _tbl.Rows.Count > 0)
                _output = Convert.ToInt16(_tbl.Rows[0]["bal_qty"]);
            return _output;
        }

        //Lakshan 19/02/2016
        public Int32 SaveBusinessEntityDetailWithGroupNew(MasterBusinessEntity _businessEntity, CustomerAccountRef _account, List<MasterBusinessEntityInfo> bisInfoList,
            List<BusEntityItem> busItemList, out string customerCD, List<MasterBusinessEntitySalesType> SalesType,
            Boolean _isExsistCom, Boolean _isGroup, GroupBussinessEntity _groupCus, MasterItem _item, SupplierWiseNBT _supplierNBT = null)
        {
            Int32 effect = 0;
            try
            {
                List<BusEntityItem> _busItem = busItemList;
                #region SetSupItem
                DataTable _dt = GetInsuCriteria(_item.Mi_purcom_cd, _item.Mi_anal1, _item.Mi_cd, _item.Mi_brand, _item.Mi_model, _item.Mi_cate_1, _item.Mi_cate_2, null, null, null);
                foreach (DataRow row in _dt.Rows)
                {
                    BusEntityItem _tmp = new BusEntityItem();
                    _tmp.MBII_ACT = 1;
                    _tmp.MBII_CD = _item.Mi_cd;
                    _tmp.MBII_COM = _item.Mi_purcom_cd;
                    _tmp.MBII_CRE_BY = _item.Mi_cre_by;
                    _tmp.MBII_ITM_CD = row["CODE"].ToString();
                    _tmp.MBII_TP = "S";
                    _tmp.MI_SHORTDESC = row["DESCRIPT"].ToString();
                    _tmp.MBII_MOD_BY = _item.Mi_mod_by;
                    if (_busItem != null)
                    {
                        if (_busItem.Count > 0)
                        {
                            var item = _busItem.Where(c => c.MBII_ITM_CD == _tmp.MBII_ITM_CD).FirstOrDefault();
                            if (item != null)
                            {
                                var rem = _busItem.Where(c => c.MBII_ITM_CD == item.MBII_ITM_CD && c.MBII_ACT == 0).SingleOrDefault();
                                if (rem != null)
                                {
                                    _busItem.Remove(rem);
                                    _busItem.Add(_tmp);
                                }
                                else
                                {
                                    _busItem.Add(_tmp);
                                }
                            }
                            else
                            {
                                _busItem.Add(_tmp);
                            }
                        }
                        else
                        {
                            _busItem.Add(_tmp);
                        }
                    }
                    else
                    {
                        if (_busItem == null)
                        {
                            _busItem = new List<BusEntityItem>();
                        }
                        _busItem.Add(_tmp);
                    }
                }
                //GetInsuCriteria(BaseCls.GlbUserComCode, "ITEM", txtItemCode.Text.Trim().ToUpper(), txtBrand.Text.ToUpper().Trim(),
                //                txtModel.Text.Trim().ToUpper(),
                //                                txtMainCat.Text.ToUpper().Trim(), txtSubCat.Text.ToUpper().Trim(), null, null, null);
                #endregion
                effect = SaveBusinessEntityDetailWithGroup(_businessEntity, _account, bisInfoList, _busItem, out customerCD, null, _isExsistCom, _isGroup, _groupCus, true, null, "false", null, null, _supplierNBT);
                return effect;
            }
            catch (Exception)
            {
                customerCD = string.Empty;
                return effect;
            }
        }

        //Lakshan 19/02/2016
        public Int32 UpdateBusinessEntityProfileWithGroupNew(MasterBusinessEntity _businessEntity, string modby, DateTime modDate, Decimal Newcredlimit, List<MasterBusinessEntityInfo> bisInfoList,
            List<MasterBusinessEntitySalesType> _salesTypes, List<BusEntityItem> busItemList, GroupBussinessEntity _grupCust, MasterItem _item, SupplierWiseNBT _supplierNBT = null)
        {
            Int32 effect = 0;
            try
            {
                List<BusEntityItem> _busItem = busItemList;
                #region SetSupItem
                DataTable _dt = GetInsuCriteria(_item.Mi_purcom_cd, _item.Mi_anal1, _item.Mi_cd, _item.Mi_brand, _item.Mi_model, _item.Mi_cate_1, _item.Mi_cate_2, null, null, null);
                BusEntityItem _tmp = new BusEntityItem();
                foreach (DataRow row in _dt.Rows)
                {
                    _tmp = new BusEntityItem();
                    _tmp.MBII_ACT = 1;
                    _tmp.MBII_CD = _item.Mi_cd;
                    _tmp.MBII_COM = _item.Mi_purcom_cd;
                    _tmp.MBII_CRE_BY = _item.Mi_cre_by;
                    _tmp.MBII_CRE_DT = _item.Mi_cre_dt;
                    _tmp.MBII_ITM_CD = row["CODE"].ToString();
                    _tmp.MBII_TP = "S";
                    _tmp.MI_SHORTDESC = row["DESCRIPT"].ToString();
                    _tmp.MBII_MOD_BY = _item.Mi_mod_by;
                    _tmp.MBII_MOD_DT = _item.Mi_mod_dt;
                    if (_busItem != null)
                    {
                        if (_busItem.Count > 0)
                        {
                            var item = _busItem.Where(c => c.MBII_ITM_CD == _tmp.MBII_ITM_CD).FirstOrDefault();
                            if (item != null)
                            {
                                var rem = _busItem.Where(c => c.MBII_ITM_CD == item.MBII_ITM_CD && c.MBII_ACT == 0).SingleOrDefault();
                                if (rem != null)
                                {
                                    _busItem.Remove(rem);
                                    _busItem.Add(_tmp);
                                }
                                else
                                {
                                    _busItem.Add(_tmp);
                                }
                            }
                            else
                            {
                                _busItem.Add(_tmp);
                            }
                        }
                        else
                        {
                            _busItem.Add(_tmp);
                        }
                    }
                    else
                    {
                        if (_busItem == null)
                        {
                            _busItem = new List<BusEntityItem>();
                        }
                        _busItem.Add(_tmp);
                    }
                }
                //GetInsuCriteria(BaseCls.GlbUserComCode, "ITEM", txtItemCode.Text.Trim().ToUpper(), txtBrand.Text.ToUpper().Trim(),
                //                txtModel.Text.Trim().ToUpper(),
                //                                txtMainCat.Text.ToUpper().Trim(), txtSubCat.Text.ToUpper().Trim(), null, null, null);
                #endregion
                effect = UpdateBusinessEntityProfileWithGroup(_businessEntity, _item.Mi_cre_by, Convert.ToDateTime(DateTime.Today).Date, 0,
                            bisInfoList, null, _busItem, _grupCust, null, _supplierNBT);
                return effect;
            }
            catch (Exception)
            {
                return effect;
            }
        }

        //Lakshan 19-02-2016
        public MasterBusinessEntity GetCustomerProfileNew(string CustCD, string nic, string DL, string PPNo, string brNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCustomerProfile(CustCD, nic, DL, PPNo, brNo);
        }
        public Boolean CheckIsAccountClosed(string _invoice, DateTime _asatdate)
        {
            _salesDAL = new SalesDAL();
            DataTable _tbl = _salesDAL.CheckIsAccountClosed(_invoice, _asatdate);
            Boolean _output = false;
            if (_tbl != null && _tbl.Rows.Count > 0)
                _output = true;
            else
                _output = false;
            return _output;
        }
        public LoyaltyMemeber getLoyaltyDetails(string customer, string loyalNu)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getLoyaltyDetails(customer, loyalNu);
        }

        public GiftVoucherPages getGiftVoucherPage(string voucherNo, string voucherBook, string company)
        {
            _fmsInventoryDal = new FMS_InventoryDAL();
            return _fmsInventoryDal.getGiftVoucherPage(voucherNo, voucherBook, company);
        }

        /*Lakshan 2016-Feb-26*/
        public List<PriceDefinitionRef> GetPriceDefinitionRefs(PriceDefinitionRef _priceDef)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceDefinitionRefs(_priceDef);
        }

        //Lakshan 27-Feb-27
        public Int32 UpdatePriceDefinitionRef(PriceDefinitionRef _ref, out string err)
        {
            err = "";
            Int32 _effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                if (_ref != null)
                {
                    _effect = _salesDAL.UpdatePriceDefinitionRef(_ref);
                }
                _salesDAL.TransactionCommit();
                _effect = 1;
                return _effect;
            }
            catch (Exception ex)
            {
                _effect = -1;
                _salesDAL.TransactionRollback();
                err = ex.Message;
                return _effect;
            }
        }

        //Sahan 29/Feb/2016
        public Int32 UpdateSerialAvailability(string company, string location, string serial)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.UpdateSerialAvailability(company, location, serial);
        }

        //Sahan 07/Feb/2016
        public DataTable Check_PC_SO_REST_STK(string company, string pc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Check_PC_SO_REST_STK(company, pc);
        }

        //Sahan 07/Feb/2016
        public Int32 UpdateINRLoc(string company, string location, string Item, string status, Decimal _qty)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.UpdateINRLoc(company, location, Item, status, _qty);
        }

        //Sahan 07/Feb/2016
        public DataTable CheckLocationBaBalance(string company, string loc, string item, string itemstus)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.CheckLocationBaBalance(company, loc, item, itemstus);
        }

        //Sahan 18/MAr/2016
        public DataTable LoadPoData(string company, string pc, string doc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.LoadPoData(company, pc, doc);
        }

        //subodana 2016-03-21
        public List<QUO_COST_DET> GetInvoiceDetailsForEnq(string cuscode, string enqid)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceDetailsForEnq(cuscode, enqid);
        }
        public Int32 SaveSalesOrder(SalesOrderHeader SalesOrder_hdr, MasterAutoNumber mastAutoNo, List<SalesOrderItems> SalesOrder_itm, List<SalesOrderSer> SalesOrder_ser, out string msg, bool _AppStatus = false)
        {
            Int32 seqNo = 0;
            Int32 result = 0;
            string _documentNo = string.Empty;
            string documentNo = null;
            decimal _tot_amt = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _generalDAL = new GeneralDAL();

                string newseqno = string.Empty;
                string outputopno = string.Empty;
                Int32 so_rest_stk = 0;
                Int32 mpc_so_res = 0;
                int seq = 0;
                List<Int32> qtylist = new List<int>();

                InventoryRequest p_inventoryRequest = new InventoryRequest();
                if (SalesOrder_hdr != null)
                {
                    if (mastAutoNo != null)
                    {
                        Int32 _autoNo = _financialDAL.GetAutoNumber(mastAutoNo.Aut_moduleid, mastAutoNo.Aut_direction, mastAutoNo.Aut_start_char, mastAutoNo.Aut_cate_tp, mastAutoNo.Aut_cate_cd, mastAutoNo.Aut_modify_dt, mastAutoNo.Aut_year).Aut_number;
                        _documentNo = mastAutoNo.Aut_cate_cd + "-" + mastAutoNo.Aut_moduleid + "-" + mastAutoNo.Aut_start_char + "-" + _autoNo.ToString("0000", CultureInfo.InvariantCulture);
                        // mastAutoNo.Aut_modify_dt = DateTime.Now;
                        result = _financialDAL.UpdateAutoNumber(mastAutoNo);
                    }
                    if (string.IsNullOrEmpty(SalesOrder_hdr.SOH_SO_NO))
                    {
                        SalesOrder_hdr.SOH_SO_NO = _documentNo;
                    }
                    HpSystemParameters _SystemPara = new HpSystemParameters();
                    _SystemPara = _salesDAL.GetSystemParameter("PC", SalesOrder_hdr.SOH_PC, "SOAP", SalesOrder_hdr.SOH_DT);


                    MasterProfitCenter _MasterProfitCenter = _salesDAL.GetProfitCenter(SalesOrder_hdr.SOH_COM, SalesOrder_hdr.SOH_PC);
                    if (_inventoryDAL.Is_OptionPerimitted(SalesOrder_hdr.SOH_COM, SalesOrder_hdr.SOH_CRE_BY, 16011) == 0)
                    {


                        //if (_SystemPara.Hsy_cd == "SOAP")
                        //{
                        //    decimal _totalInvoice = SalesOrder_hdr.SOH_ANAL_10;
                        //    decimal _credit = SalesOrder_hdr.SOH_ANAL_11;
                        //    if (_credit < _totalInvoice)
                        //    {
                        //        SalesOrder_hdr.SOH_STUS = "S";
                        //    }
                        //    else
                        //    {
                        //        SalesOrder_hdr.SOH_STUS = "A";
                        //    }
                        //}
                        bool _found = false;
                        if (_MasterProfitCenter != null)
                        {
                            if (_MasterProfitCenter.Mpc_chk_credit == true)
                            {
                                SalesOrder_hdr.SOH_STUS = "S";
                                _found = true;
                            }
                            else if (_MasterProfitCenter.Mpc_chk_credit == false)
                            {
                                SalesOrder_hdr.SOH_STUS = "A";
                                _found = true;
                            }
                        }
                        //if (_found == false)
                        //{
                        //    if (_AppStatus == false)
                        //    {
                        //        bool CreditPeriod = false;
                        //        bool CreditLimt = false;

                        //        DataTable _syspara = new DataTable();
                        //        _syspara = _inventoryDAL.getMstSysPara(SalesOrder_hdr.SOH_COM, "PC", SalesOrder_hdr.SOH_PC, "CRDIT", "N/A");
                        //        if (_syspara != null)
                        //        {
                        //            if (_syspara.Rows.Count > 0)
                        //            {
                        //                int _period = Convert.ToInt32(_syspara.Rows[0]["msp_rest_val"].ToString());
                        //                decimal _balnce = 0;
                        //                _balnce = _salesDAL.CHECK_CREDIT(SalesOrder_hdr.SOH_COM, SalesOrder_hdr.SOH_CUS_CD, _period, SalesOrder_hdr.SOH_DT, SalesOrder_hdr.SOH_PC);
                        //                if (_balnce > 0)
                        //                {
                        //                    CreditPeriod = false;
                        //                }
                        //                else
                        //                {
                        //                    CreditPeriod = true;
                        //                }

                        //            }

                        //        }
                        //        decimal _totalInvoice = SalesOrder_hdr.SOH_ANAL_10;
                        //        decimal _credit = SalesOrder_hdr.SOH_ANAL_11;
                        //        decimal _pendingso = _salesDAL.CHECKPENDING_SOAPP(SalesOrder_hdr.SOH_COM, SalesOrder_hdr.SOH_CUS_CD, SalesOrder_hdr.SOH_PC);

                        //        if (_credit < (_totalInvoice + _pendingso))
                        //        {
                        //            CreditLimt = false;
                        //        }
                        //        else
                        //        {
                        //            CreditLimt = true;
                        //        }

                        //        if ((CreditLimt == false) || (CreditPeriod == false))
                        //        {
                        //            if (CreditLimt == true)
                        //            {
                        //                documentNo = "CL";
                        //            }
                        //            if (CreditPeriod == true)
                        //            {
                        //                documentNo = "CP";
                        //            }

                        //            result = -1;
                        //            _salesDAL.TransactionRollback();
                        //            _financialDAL.TransactionRollback();
                        //            _salesDAL.ConnectionClose();
                        //            _financialDAL.ConnectionClose();
                        //            _inventoryDAL.TransactionRollback();
                        //            _inventoryDAL.ConnectionClose();
                        //            msg = documentNo;
                        //            return result;
                        //        }
                        //        if ((CreditLimt == true) && (CreditPeriod == true))
                        //        {
                        //            SalesOrder_hdr.SOH_STUS = "A";
                        //        }
                        //    }
                        //    else
                        //    {
                        //        SalesOrder_hdr.SOH_STUS = "S";

                        //    }
                        //}




                    }
                    else
                    {
                        SalesOrder_hdr.SOH_STUS = "A";
                    }
                    if (SalesOrder_hdr.SOH_COM == "AAL")
                    {
                        _SystemPara = _salesDAL.GetSystemParameter("PC", SalesOrder_hdr.SOH_PC, SalesOrder_hdr.SOH_SO_TP, SalesOrder_hdr.SOH_DT);
                        if (_SystemPara.Hsy_val == 1)
                        {
                            SalesOrder_hdr.SOH_STUS = "A";
                        }
                    }
                    //Added By Dulaj 2018/Dec/21
                    DataTable paraTB = _inventoryDAL.getMstSysPara(SalesOrder_hdr.SOH_COM, "PC", SalesOrder_hdr.SOH_PC, "TEMPSOPC", SalesOrder_hdr.SOH_COM);
                    if (paraTB != null)
                    {

                        if (paraTB.Rows.Count > 0)
                        {
                            SalesOrder_hdr.SOH_STUS = "P";
                        }
                    }

                    Tuple<int, int> _effect2 = _salesDAL.PlaceSalesOrder(SalesOrder_hdr);
                    newseqno = _effect2.Item2.ToString();
                    documentNo = _documentNo;
                    outputopno = _documentNo;
                    result = _inventoryDAL.UpdateQuatationDOStatus(SalesOrder_hdr.SOH_STRUCTURE_SEQ);

                    //Pick stage 


                    p_inventoryRequest.Ird_res_no = "";
                    p_inventoryRequest.Itr_act = 1;
                    p_inventoryRequest.Itr_anal1 = "";
                    // p_inventoryRequest.Itr_anal2 = _cusdecHdr.CUH_SUN_REQ_NO;
                    p_inventoryRequest.Itr_bus_code = SalesOrder_hdr.SOH_CUS_CD;//"N/A";
                    p_inventoryRequest.Itr_com = SalesOrder_hdr.SOH_COM;
                    // p_inventoryRequest.Itr_country_cd = SalesOrder_hdr.;
                    p_inventoryRequest.Itr_cre_by = SalesOrder_hdr.SOH_CRE_BY;
                    // p_inventoryRequest.Itr_cur_code = _cusdecHdr.CUH_CUR_CD;
                    p_inventoryRequest.Itr_direct = 0;
                    p_inventoryRequest.Itr_dt = SalesOrder_hdr.SOH_DT.Date;
                    p_inventoryRequest.Itr_exp_dt = SalesOrder_hdr.SOH_DT.Date;
                    p_inventoryRequest.Itr_exg_rate = SalesOrder_hdr.SOH_EX_RT;
                    //  p_inventoryRequest.Itr_exp_dt = _cusdecHdr.CUH_DT.Date;
                    p_inventoryRequest.Itr_issue_com = SalesOrder_hdr.SOH_COM;
                    p_inventoryRequest.Itr_issue_from = SalesOrder_hdr.SOH_DISP_LOC;
                    p_inventoryRequest.Itr_loc = SalesOrder_hdr.SOH_PC;
                    // p_inventoryRequest.Itr_mod_by = _cusdecHdr.CUH_CRE_BY;
                    p_inventoryRequest.Itr_note = SalesOrder_hdr.SOH_REMARKS;
                    p_inventoryRequest.Itr_rec_to = string.Empty;
                    p_inventoryRequest.Itr_ref = SalesOrder_hdr.SOH_SO_NO;
                    p_inventoryRequest.Itr_req_no = SalesOrder_hdr.SOH_SO_NO;
                    p_inventoryRequest.Itr_seq_no = 0;
                    p_inventoryRequest.Itr_session_id = SalesOrder_hdr.SOH_SESSION_ID;
                    p_inventoryRequest.Itr_stus = SalesOrder_hdr.SOH_STUS;
                    p_inventoryRequest.Itr_sub_tp = "SO";
                    p_inventoryRequest.Itr_tp = "SO";

                    // p_inventoryRequest.Itr_job_no = _cusdecHdr.CUH_SUN_BOND_NO;

                    seq = _inventoryDAL.SaveInventoryRequest(p_inventoryRequest);



                }

                #region SalesOrder Item
                if (SalesOrder_itm.Count > 0)
                {
                    foreach (SalesOrderItems _itm in SalesOrder_itm)
                    {




                        if (!string.IsNullOrEmpty(_itm.SOI_RES_NO))
                        {
                            string _err = string.Empty;
                            //  _salesDAL.UPDATE_RES_BQTY(_itm.SOI_RES_NO, _itm.SOI_RES_LINE_NO, _itm.SOI_QTY);
                            InventoryBLL _BL = new InventoryBLL();
                            if (_itm.SOI_resLogUpdate == 1)
                            {
                                #region reservation
                                //INR_RES_LOG _resLogSave = new INR_RES_LOG();
                                //_resLogSave.IRL_RES_NO = _itm.SOI_RES_NO;
                                //_resLogSave.IRL_ITM_CD = _itm.SOI_ITM_CD;
                                //_resLogSave.IRL_ITM_STUS = _itm.SOI_ITM_STUS;
                                //_resLogSave.IRL_CURT_COM = SalesOrder_hdr.SOH_COM;
                                //_resLogSave.IRL_CURT_LOC = SalesOrder_hdr.SOH_DEL_LOC;
                                //_resLogSave.IRL_RES_QTY = _itm.SOI_QTY;
                                //_resLogSave.IRL_MOD_BY_NEW = SalesOrder_hdr.SOH_CRE_BY;
                                //_resLogSave.IRL_MOD_DT = SalesOrder_hdr.SOH_CRE_WHEN;
                                //_resLogSave.IRL_CRE_BY = SalesOrder_hdr.SOH_CRE_BY;
                                //_resLogSave.IRL_CRE_DT = SalesOrder_hdr.SOH_CRE_WHEN;
                                //_resLogSave.IRL_CRE_SESSION = SalesOrder_hdr.SOH_SESSION_ID;
                                //_resLogSave.IRL_CURT_DOC_NO = SalesOrder_hdr.SOH_SO_NO;
                                //_resLogSave.IRL_CURT_DOC_TP = "SO";
                                //_resLogSave.IRL_CURT_DOC_DT = SalesOrder_hdr.SOH_DT;
                                //_resLogSave.IRL_RES_WP = 1;
                                //_resLogSave.IRL_ORIG_DOC_NO = _itm.SOI_RES_NO;
                                //_resLogSave.IRL_ORIG_DOC_TP = "INV";
                                //result = _BL.InrResLogDataManage(_resLogSave, 0, _inventoryDAL, out _err);
                                //if (result == 0)
                                //{
                                //    documentNo = _err;
                                //    result = -1;
                                //    _salesDAL.TransactionRollback();
                                //    _financialDAL.TransactionRollback();
                                //    _salesDAL.ConnectionClose();
                                //    _financialDAL.ConnectionClose();
                                //    _inventoryDAL.TransactionRollback();
                                //    _inventoryDAL.ConnectionClose();
                                //}
                                #endregion
                                #region update reservation det and log add by rukshan 28 Oct 2016 chg by lakshan

                                string _errro = "";

                                int _res = 0;
                                _res = _inventoryDAL.UPDATE_INR_RES_DET_SO_MRN(new INR_RES_DET()
                                {
                                    IRD_RES_NO = _itm.SOI_RES_NO,
                                    IRD_ITM_CD = _itm.SOI_ITM_CD,
                                    IRD_ITM_STUS = _itm.SOI_ITM_STUS,
                                    IRD_RES_BQTY = _itm.SOI_QTY
                                });

                                if (_res > 0)
                                {
                                    _res = 0;
                                    _res = _BL.ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                    {
                                        IRL_CURT_COM = SalesOrder_hdr.SOH_COM,
                                        IRL_CURT_LOC = SalesOrder_hdr.SOH_DISP_LOC,
                                        IRL_ORIG_DOC_TP = "INV",
                                        IRL_ORIG_DOC_NO = _itm.SOI_RES_NO,
                                        IRL_ORIG_DOC_DT = DateTime.Now,

                                        IRL_CURT_DOC_TP = "SO",
                                        IRL_CURT_DOC_NO = _documentNo,
                                        IRL_CURT_DOC_DT = SalesOrder_hdr.SOH_DT,
                                        IRL_RES_NO = _itm.SOI_RES_NO,
                                        IRL_ITM_CD = _itm.SOI_ITM_CD,
                                        IRL_ITM_STUS = _itm.SOI_ITM_STUS,
                                        IRL_MOD_BY_NEW = SalesOrder_hdr.SOH_CRE_BY,
                                        IRL_MOD_SESSION = SalesOrder_hdr.SOH_SESSION_ID,
                                        IRL_MOD_DT = DateTime.Now,
                                        IRL_CRE_BY = SalesOrder_hdr.SOH_CRE_BY,
                                        IRL_CRE_DT = DateTime.Now,
                                        IRL_CRE_SESSION = SalesOrder_hdr.SOH_SESSION_ID,
                                        IRL_RES_QTY = _itm.SOI_QTY
                                    }, 0, _inventoryDAL, out _errro);
                                }
                                if (_res < 1)
                                {
                                    documentNo = _errro;
                                    result = -1;
                                    _salesDAL.TransactionRollback();
                                    _financialDAL.TransactionRollback();
                                    _inventoryDAL.TransactionRollback();
                                    msg = documentNo;
                                    return result;
                                }
                                if (_res > 0)
                                {
                                    List<INR_RES_DET> _resDetList = _inventoryDAL.GET_INR_RES_DET_DATA(new INR_RES_DET()
                                    {
                                        IRD_RES_NO = _itm.SOI_RES_NO,
                                        IRD_ITM_CD = _itm.SOI_ITM_CD,
                                        IRD_ITM_STUS = _itm.SOI_ITM_STUS,
                                    });
                                    decimal _resBal = _resDetList.Sum(c => c.IRD_RES_BQTY);
                                    if (_resBal == 0)
                                    {
                                        _res = _inventoryDAL.UPDATE_INR_RES_HDR_STS(new INR_RES()
                                        {
                                            IRS_RES_NO = _itm.SOI_RES_NO,
                                            IRS_STUS = "F"
                                        });
                                    }
                                }



                                #endregion
                            }

                        }


                        #region checkvalidation
                        /*
                        if (!string.IsNullOrEmpty(SalesOrder_hdr.SOH_DISP_LOC))
                        {
                            DataTable dtchkpc_rest_stk = Check_PC_SO_REST_STK(SalesOrder_hdr.SOH_COM, SalesOrder_hdr.SOH_DISP_LOC);

                            if (dtchkpc_rest_stk.Rows.Count > 0)
                            {
                                foreach (DataRow ddr in dtchkpc_rest_stk.Rows)
                                {
                                    if (!string.IsNullOrEmpty(ddr["mpc_so_rest_stk"].ToString()))
                                    {
                                        so_rest_stk = Convert.ToInt32(ddr["mpc_so_rest_stk"].ToString());
                                    }
                                    if (!string.IsNullOrEmpty(ddr["mpc_so_res"].ToString()))
                                    {
                                        mpc_so_res = Convert.ToInt32(ddr["mpc_so_res"].ToString());
                                    }
                                }
                            }

                            if (so_rest_stk == 1)
                            {

                                DataTable dtbal = CheckLocationBaBalance(SalesOrder_hdr.SOH_COM, SalesOrder_hdr.SOH_DISP_LOC, _itm.SOI_ITM_CD, _itm.SOI_ITM_STUS);
                                    Decimal balance = 0;

                                    foreach (DataRow item in dtbal.Rows)
                                    {
                                        balance = Convert.ToDecimal(item["inl_free_qty"].ToString());
                                    }

                                    if (balance > 0)
                                    {
                                        qtylist.Add(0);
                                    }
                                    else
                                    {
                                        qtylist.Add(1);
                                    }
                                
                            }
                        }

                        if (qtylist.Contains(1))
                        {
                            documentNo = "Stock is not available for added item/items at the dispatch location";
                            _salesDAL.TransactionRollback();
                            _financialDAL.TransactionRollback();
                            _salesDAL.ConnectionClose();
                            _financialDAL.ConnectionClose();
                            _inventoryDAL.TransactionRollback();
                            _inventoryDAL.ConnectionClose();
                            result = -1;
                            msg = documentNo;
                            return result;
                        }
                         */
                        #endregion

                        // SalesOrder_hdr.mpc_so_res = mpc_so_res;

                        _itm.SOI_SEQ_NO = Convert.ToInt32(newseqno);
                        _itm.SOI_SO_NO = outputopno;
                        result = _salesDAL.SaveSOItems(_itm);

                        //INT_REQ_ITM _ReqItem = new INT_REQ_ITM();
                        //_ReqItem.ITRI_QTY = _itm.SOI_INV_QTY;
                        //_ReqItem.ITRI_SEQ_NO = _itm.SOI_ITM_SEQ;//Convert.ToInt32(itemInv.Cells[14].Text);
                        //_ReqItem.ITRI_ITM_CD = _itm.SOI_ITM_CD;//itemInv.Cells[1].Text;
                        //result = _salesDAL.BalanceItemStock(_ReqItem);

                        result = _salesDAL.UpdatePrice(_itm.SOI_ITM_CD, _itm.SOI_PBOOK, _itm.SOI_PB_LVL, SalesOrder_hdr.SOH_CUS_CD, _itm.SOI_PROMO_CD, _itm.SOI_SEQ, _itm.SOI_ITM_SEQ);

                        #region SalesOrderItemTax
                        SalesOrderItemTax SalesOrderItemTax = new SalesOrderItemTax();
                        SalesOrderItemTax.SOTX_SO_NO = outputopno;
                        SalesOrderItemTax.SOTX_ITM_CD = _itm.SOI_ITM_CD; //ddr.Cells[1].Text;
                        SalesOrderItemTax.SOTX_ITM_TAX_TP = "VAT";
                        SalesOrderItemTax.SOTX_ITM_TAX_RT = 0;
                        SalesOrderItemTax.SOTX_ITM_TAX_AMT = _itm.SOI_ITM_TAX_AMT;
                        SalesOrderItemTax.SOTX_JOB_NO = string.Empty;
                        SalesOrderItemTax.SOTX_JOB_LINE = _itm.SOI_ITM_LINE;
                        SalesOrderItemTax.SOTX_SEQ_NO = Convert.ToInt32(newseqno);
                        SalesOrderItemTax.SOTX_ITM_LINE = _itm.SOI_ITM_LINE;

                        result = _salesDAL.SaveSOItemTax(SalesOrderItemTax);
                        #endregion

                        if (SalesOrder_hdr.mpc_so_res == 1)
                        {
                            result = _salesDAL.UpdateINRLoc(SalesOrder_hdr.SOH_COM, SalesOrder_hdr.SOH_PC, _itm.SOI_ITM_CD, _itm.SOI_ITM_STUS, _itm.SOI_INV_QTY);

                        }

                        #region save Request
                        InventoryRequestItem _inventoryRequestItem = new InventoryRequestItem();
                        MasterItem _mstItem = new MasterItem();
                        _mstItem.Mi_cd = _itm.SOI_ITM_CD;
                        _inventoryRequestItem.MasterItem = _mstItem;
                        _inventoryRequestItem.Itri_advan_qty = 0;
                        _inventoryRequestItem.Itri_base_req_line = 0;
                        _inventoryRequestItem.Itri_base_req_no = "";
                        _inventoryRequestItem.Itri_batchno = "";
                        _inventoryRequestItem.Itri_buffer = 0;
                        _inventoryRequestItem.Itri_cncl_qty = 0;
                        _inventoryRequestItem.Itri_com = SalesOrder_hdr.SOH_COM;
                        _inventoryRequestItem.Itri_seq_no = seq;
                        _inventoryRequestItem.Itri_line_no = _itm.SOI_ITM_LINE;
                        _inventoryRequestItem.Itri_itm_cd = _itm.SOI_ITM_CD;
                        _inventoryRequestItem.Itri_itm_stus = _itm.SOI_ITM_STUS;
                        _inventoryRequestItem.Itri_qty = _itm.SOI_QTY;
                        _inventoryRequestItem.Itri_bqty = _itm.SOI_QTY;
                        _inventoryRequestItem.Itri_unit_price = _itm.SOI_UNIT_RT;
                        _inventoryRequestItem.Itri_app_qty = _itm.SOI_QTY;
                        _inventoryRequestItem.Itri_res_no = _itm.SOI_RES_NO;
                        _inventoryRequestItem.Itri_res_line = _itm.SOI_RES_LINE_NO;
                        // _inventoryRequestItem.Itri_bqty = cusdecItm.Cui_qty;
                        // _inventoryRequestItem.Itri_job_no = _cusdecHdr.CUH_SUN_BOND_NO;
                        // _inventoryRequestItem.Itri_job_line = cusdecItm.Cui_line;
                        // _inventoryRequestItem.MasterItem.Mi_cd = cusdecItm.Cui_itm_cd;
                        _inventoryRequestItem.Temp_itri_is_allocation = _itm.SOI_allocation;
                        _inventoryDAL.SaveInventoryRequestItem(_inventoryRequestItem);
                        ////if (SalesOrder_hdr.SOH_STUS == "A")
                        ////{
                        ////    if (_inventoryRequestItem.Temp_itri_is_allocation == 1)
                        ////    {
                        ////        UpdateItemAllocationDataFIFO(_inventoryDAL, _inventoryRequestItem, p_inventoryRequest);
                        ////    }

                        ////}



                        #endregion

                        if (SalesOrder_hdr.SOH_STUS == "A")
                        {

                            //#region update item allocation data 10 Jan 2017
                            //if (SalesOrder_hdr.SOH_ALLOCATION)
                            //{
                            //    p_inventoryRequest.Itr_anal3 = SalesOrder_hdr.SOH_PC;
                            //    _inventoryRequestItem.Itri_itm_cd = _itm.SOI_ITM_CD;
                            //    _inventoryRequestItem.Itri_itm_stus = _itm.SOI_ITM_STUS;
                            //    _inventoryRequestItem.Itri_qty = _itm.SOI_QTY;
                            //    Int32 _rr = UpdateItemAllocationDataFIFO(_inventoryDAL, _inventoryRequestItem, p_inventoryRequest);
                            //}
                            //#endregion

                        }
                    }

                }
                #endregion

                #region SalesOrderSer
                if (SalesOrder_ser.Count > 0)
                {
                    foreach (SalesOrderSer _serial in SalesOrder_ser)
                    {
                        _serial.SOSE_SEQ_NO = Convert.ToInt32(newseqno);
                        _serial.SOSE_SO_NO = outputopno;
                        result = _salesDAL.SaveSOSer(_serial);

                        DataTable _serialIDTbl = _inventoryDAL.GetSerialDetailsBySerial(SalesOrder_hdr.SOH_COM, SalesOrder_hdr.SOH_PC, _serial.SOSE_ITM_CD, _serial.SOSE_SER_1);
                        if (_serialIDTbl.Rows.Count > 0)
                        {
                            string _serialID = _serialIDTbl.Rows[0][4].ToString();
                            if (SalesOrder_hdr.mpc_so_res == 1)
                            {
                                _inventoryDAL.Update_serialID_INS_AVAILABLE(SalesOrder_hdr.SOH_COM, SalesOrder_hdr.SOH_PC, _serial.SOSE_ITM_CD, Convert.ToInt32(_serialID), -1);
                            }

                        }


                    }
                }

                #endregion

                //change status sales order request 
                if (SalesOrder_hdr.SOH_REF_DOC != null)
                {
                    _financialDAL.Update_ReqHeaderStatus("F", SalesOrder_hdr.SOH_CRE_BY, SalesOrder_hdr.SOH_COM, SalesOrder_hdr.SOH_REF_DOC);

                }

                if (result > 0)
                {
                    // _CustServiceDAL.SendConfirmationMail()
                    if (SalesOrder_hdr.SOH_STUS == "A")
                    {

                        SendConfirmationSMS(SalesOrder_hdr.SOH_COM, SalesOrder_hdr.SOH_PC, null, null, null, SalesOrder_hdr.SOH_MOD_WHEN, "", null, SalesOrder_hdr.SOH_SALES_EX_CD, SalesOrder_hdr.SOH_SO_NO, SalesOrder_hdr.SOH_MAN_REF, SalesOrder_hdr.SOH_CUS_CD + " - " + SalesOrder_hdr.SOH_CUS_NAME);
                    }
                }
                _salesDAL.TransactionCommit();
                _financialDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                documentNo = ex.Message;
                result = -1;
                _salesDAL.TransactionRollback();
                _financialDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _financialDAL.ConnectionClose();
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
            }
            bool _isSend = false;
            HpSystemParameters _getSystemParameter = new HpSystemParameters();
            _getSystemParameter = _salesDAL.GetSystemParameter("COM", "AAL", "EMAIL", DateTime.Now);
            if (_getSystemParameter != null)
            {
                if (_getSystemParameter.Hsy_val == 1)
                {
                    _isSend = true;
                }
            }
            if (_isSend && SalesOrder_hdr.SOH_STUS == "A")
            {
                if (result > 0)
                {
                    _tot_amt = SalesOrder_itm.Sum(r => r.SOI_TOT_AMT);
                    List<MsgInformation> _mail = _generalDAL.GetMsgInformation(SalesOrder_hdr.SOH_COM, "", "JOB_CONFIRM");
                    if (_mail != null)
                    {
                        if (_mail.Count > 0)
                        {
                            foreach (MsgInformation _info in _mail)
                            {
                                SmtpClient smtpClient = new SmtpClient();
                                MailMessage message = new MailMessage();

                                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                                smtpClient.Host = _generalDAL.GetMailHost();
                                smtpClient.Port = 25;
                                message.From = fromAddress;

                                string _email = "";

                                _email = " Dear Sir/Madam, \n\n" + _email;
                                _email += " Sales Order customer name : " + SalesOrder_hdr.SOH_CUS_CD + " - " + SalesOrder_hdr.SOH_CUS_NAME + " \n";
                                _email += "\n Sales Order approved value : " + _tot_amt + " \n";
                                _email += "\n Excutive code : " + SalesOrder_hdr.SOH_SALES_EX_CD + " \n";
                                _email += "\n SO # : " + SalesOrder_hdr.SOH_SO_NO + "\n";
                                _email += "\n Approve Date : " + SalesOrder_hdr.SOH_MOD_WHEN + " \n";
                                _email += " \n Thank You, \n ** This is an auto generated mail from Abans infor portal. Please don't Reply ** \n ** Abans IT Department **";
                                //_email += _generalDAL.GetMailFooterMsg();
                                message.To.Add(_info.Mmi_email);
                                message.Subject = "Sales Order Credit Approval";
                                message.IsBodyHtml = false;
                                message.Body = _email;
                                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                                smtpClient.Send(message);
                            }
                        }
                    }
                }
            }
            msg = documentNo;
            return result;
        }
        //Darshana 29-03-2016
        public void GetPromotionNew(string _company, string _profitcenter, string _item, DateTime _date, string _customer, decimal _qty, out List<PriceDetailRef> _priceDetailRefPromo, out List<PriceSerialRef> _priceSerialRefPromo, out List<PriceSerialRef> _priceSerialRefNormal)
        {
            List<PriceDetailRef> _PriceDetailRefPromo = null;
            List<PriceSerialRef> _PriceSerialRef = null;
            List<PriceSerialRef> _PriceSerialRefPromo = null;
            List<PriceSerialRef> _PriceSerialRefNormal = null;

            _salesDAL = new SalesDAL();
            DataTable _dtChnl = null;

            //profit center
            _PriceDetailRefPromo = _salesDAL.GetPromotionNew(_company, _profitcenter, _item, _date, _customer, _qty, "PC", _profitcenter);

            var _PricePromoPC = _salesDAL.GetPromotionNew(_company, _profitcenter, _item, _date, string.Empty, _qty, "PC", _profitcenter);
            if (_PricePromoPC.Count > 0)
                _PriceDetailRefPromo.AddRange(_PricePromoPC);

            //sub channel
            _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitcenter, "SCHNL");
            var _PricePromoCusschnl = _salesDAL.GetPromotionNew(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), _item, _date, _customer, _qty, "SCHNL", _profitcenter);
            if (_PricePromoCusschnl.Count > 0)
                _PriceDetailRefPromo.AddRange(_PricePromoCusschnl);

            var _PricePromoschnl = _salesDAL.GetPromotionNew(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), _item, _date, string.Empty, _qty, "SCHNL", _profitcenter);
            if (_PricePromoschnl.Count > 0)
                _PriceDetailRefPromo.AddRange(_PricePromoschnl);

            //channel
            _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitcenter, "CHNL");
            var _PricePromoCuschnl = _salesDAL.GetPromotionNew(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), _item, _date, _customer, _qty, "CHNL", _profitcenter);
            if (_PricePromoCuschnl.Count > 0)
                _PriceDetailRefPromo.AddRange(_PricePromoCuschnl);

            var _PricePromochnl = _salesDAL.GetPromotionNew(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), _item, _date, string.Empty, _qty, "CHNL", _profitcenter);
            if (_PricePromochnl.Count > 0)
                _PriceDetailRefPromo.AddRange(_PricePromochnl);



            //////_PriceDetailRefPromo = _salesDAL.GetPromotionNew(_company, _profitcenter, _item, _date, _customer, _qty);
            //////if (_PriceDetailRefPromo == null || _PriceDetailRefPromo.Count <= 0)
            //////    _PriceDetailRefPromo = _salesDAL.GetPromotionNew(_company, _profitcenter, _item, _date, string.Empty, _qty);

            _PriceSerialRef = _salesDAL.GetPromotionSerial(_company, _profitcenter, _item, _date, _customer);
            if (_PriceSerialRef == null || _PriceSerialRef.Count <= 0)
                _PriceSerialRef = _salesDAL.GetPromotionSerial(_company, _profitcenter, _item, _date, string.Empty);

            if (_PriceSerialRef != null && _PriceSerialRef.Count > 0)
            {
                _PriceSerialRefPromo = _PriceSerialRef.Where(x => x.Sars_price_type != 0).ToList();
                _PriceSerialRefNormal = _PriceSerialRef.Where(x => x.Sars_price_type == 0).ToList();
            }

            _priceDetailRefPromo = _PriceDetailRefPromo;
            _priceSerialRefPromo = _PriceSerialRefPromo;
            _priceSerialRefNormal = _PriceSerialRefNormal;
        }
        //subodana
        public Int32 Save_ExchangeRate(MasterExchangeRate _ExchangeRate)
        {
            Int32 _effect = 0;
            SalesDAL _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            _salesDAL.BeginTransaction();
            _effect = _salesDAL.Save_ExchangeRate(_ExchangeRate);
            _salesDAL.TransactionCommit();
            _salesDAL.ConnectionClose();


            return _effect;
        }
        public DataTable GetReceiptPayDetails(string recno)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReceiptPayDetails(recno);
        }

        //written by Rukshan 
        public List<RequestApprovalHeader> getcompleded_ReqbyType(string _com, string _pc, string _type, string _user, string _selectPC)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getcompleded_ReqbyType(_com, _pc, _type, _user, _selectPC);
        }
        //written by Rukshan 
        public SarDocumentPriceDefn GetDocPriceDetails(string _company, string _profitcenter, string _book, string _level, string _doctype)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDocPriceDetails(_company, _profitcenter, _book, _level, _doctype);

        }
        public DataTable GetItemCodeDes(string ORCODE)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetItemCodeDes(ORCODE);
        }
        //written by Rukshan 
        public DataTable GetChanelData(string _company, string _code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetChanelData(_company, _code);
        }

        //SUBODANA

        public List<InventorySearchItemsAll> GETALLITEMS(string docno, string code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GETALLITEMS(docno, code);
        }

        public Int32 SaveBOQHDD(SatProjectHeader _BOQ, MasterAutoNumber mastAutoNo, List<SatProjectDetails> Cost, out string doc)
        {
            Int32 _effect = 0;
            Int32 seq = 0;
            doc = string.Empty;
            try
            {

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                if (_BOQ != null)
                {
                    if (mastAutoNo != null)
                    {
                        if (_BOQ.SPH_NO == null)
                        {
                            Int32 _autoNo = _financialDAL.GetAutoNumber(mastAutoNo.Aut_moduleid, mastAutoNo.Aut_direction, mastAutoNo.Aut_start_char, mastAutoNo.Aut_cate_tp, mastAutoNo.Aut_cate_cd, mastAutoNo.Aut_modify_dt, mastAutoNo.Aut_year).Aut_number;
                            doc = mastAutoNo.Aut_cate_cd + "-" + mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                            _BOQ.SPH_NO = doc;
                            _effect = _financialDAL.UpdateAutoNumber(mastAutoNo);
                        }
                    }

                    seq = _salesDAL.SaveBOQHDD(_BOQ);
                }
                if (Cost != null)
                {
                    if (Cost.Count > 0)
                    {
                        if (seq > 0)
                        {
                            int i = 1;
                            foreach (SatProjectDetails _Items in Cost)
                            {

                                _Items.SPD_SEQ = seq;
                                _Items.SPD_NO = doc;
                                _Items.SPD_LINE = i;
                                _effect = _salesDAL.SaveBOQDetails(_Items);
                                i++;
                            }

                        }
                    }
                }

                _salesDAL.TransactionCommit();
                _salesDAL.ConnectionClose();
                _financialDAL.TransactionCommit();
                _financialDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                doc = ex.Message;
                _effect = -1;
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
            }


            return _effect;
        }

        //Rukshan
        public SatProjectHeader GETBOQHDR(string com, string code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GETBOQHDR(com, code);
        }
        //Rukshan
        public List<SatProjectDetails> GETBOQDETAILS(string code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GETBOQDETAILS(code);
        }

        public Int32 UpdateBOQHDD(SatProjectHeader _BOQ, List<SatProjectDetails> Cost, List<SatProjectKitDetails> satKitDetails, out string doc)
        {
            Int32 _effect = 0;
            Int32 seq = 0;
            doc = string.Empty;
            try
            {

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                if (_BOQ != null)
                {

                    seq = _salesDAL.SaveBOQHDD(_BOQ);
                }
                if (Cost != null)
                {
                    if (Cost.Count > 0)
                    {
                        if (seq > 0)
                        {
                            int macline = Cost.Max(t => t.SPD_LINE);
                            foreach (SatProjectDetails _Items in Cost)
                            {
                                _Items.SPD_SEQ = _BOQ.SPH_SEQ;//seq;
                                if (_Items.SPD_LINE == 0)
                                {
                                    _Items.SPD_LINE = macline + 1;
                                    macline++;
                                }
                                _effect = _salesDAL.SaveBOQDetails(_Items);
                            }

                        }
                    }
                }
                //Dulaj 2018/Oct/17
                if (satKitDetails != null)
                {
                    if (satKitDetails.Count > 0)
                    {
                        foreach (var kitItem in satKitDetails)
                        {
                            _effect = UpdateSatProjectKitDetails(kitItem.SPK_LINE, kitItem.SPK_NO, kitItem.SPK_KIT_CD, kitItem.SPK_KIT_DESC, kitItem.SPK_KIT_MODEL, kitItem.SPK_QTY, kitItem.SPK_ACTIVE, _BOQ.SPH_MOD_BY, kitItem.SPK_SESSION, kitItem.SPK_UNIT_PRICE, kitItem.SPK_COST, kitItem.SPK_TOTAL_COST, kitItem.SPK_TOTAL_PRICE, kitItem.SPK_SEQ, kitItem.SPK_RMK);
                        }
                    }
                }
                _salesDAL.TransactionCommit();
                _salesDAL.ConnectionClose();
                _financialDAL.TransactionCommit();
                _financialDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                doc = ex.Message;
                _effect = -1;
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
            }


            return _effect;
        }

        public Int32 APPROVEBOQHDD(SatProjectHeader _BOQ, out string doc)
        {
            Int32 _effect = 0;
            Int32 seq = 0;
            doc = string.Empty;
            try
            {

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                if (_BOQ != null)
                {

                    seq = _salesDAL.ApproveBOQHDR(_BOQ);
                }

                _salesDAL.TransactionCommit();
                _salesDAL.ConnectionClose();

            }
            catch (Exception ex)
            {
                doc = ex.Message;
                _effect = -1;
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();

            }


            return _effect;
        }

        public DataTable GetLASTMONTHSALE(string _com, string _pc, DateTime _from, DateTime _to, string _item)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetLASTMONTHSALE(_com, _pc, _from, _to, _item);
        }

        //Rukshan 2015-06-11
        public String GetDescription(string req_no)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDescription(req_no);
        }

        //Kelum : Get Bus Entity Profile: 2016-May:13

        public MasterBusinessEntity GetBusEntityProfile(string CustCD, string nic, string DL, string PPNo, string brNo, string com, string mobile, string type, int activestatus)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            MasterBusinessEntity ent = _salesDAL.GetBusEntityProfile(CustCD, nic, DL, PPNo, brNo, com, mobile, type, activestatus);
            _salesDAL.ConnectionClose();
            return ent;
        }

        //subodana 2016-05-19
        public DataTable GetProfitCenterDetails(string company, string pclist)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetProfitCenterDetails(company, pclist);
        }
        /* Creat by Rukshan on 20/May/2016 2:32:50 PM */
        public List<ImpCusdecHdr> GECUSBOND_CUS(string _com, string _loc, string _cus, string _code, DateTime _form, DateTime _To)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GECUSBOND_CUS(_com, _loc, _cus, _code, _form, _To);
        }
        //subodana 2016-06-08
        public DataTable GetPC_from_Hierachy_with_Opteam(string com, string channel, string subChannel, string area, string region, string zone, string pc_code, string opteam)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPC_from_Hierachy_with_Opteam(com, channel, subChannel, area, region, zone, pc_code, opteam);
        }

        //Lakshan 08 Jun 2016
        public DataTable GetSalesTrackerInvoices(InvoiceHeader hdr, InvoiceItem itm)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSalesTrackerInvoices(hdr, itm);
        }
        // Lakshan 09 Jun 2016
        public DataTable GetIntHdrData(InventoryHeader hdr)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetIntHdrData(hdr);
        }
        // Lakshan 09 Jun 2016
        public DataTable GetIntHdrDataByInv(InventoryHeader hdr)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetIntHdrDataByInv(hdr);
        }

        //subodana 2016-06-13
        public DataTable GetReversalInvoiceData(string _com, string _invNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReversalInvoiceData(_com, _invNo);
        }

        //Rukshan 2016-06-23
        public CashPromotionDiscountDetail GetitemDiscount(string _pctype, string _pc, string _item, string _stype, DateTime _date, string _book,
                                                     string _lvl, decimal _qty)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetitemDiscount(_pctype, _pc, _item, _stype, _date, _book, _lvl, _qty);
        }
        //subodana 2016-06-25
        public DataTable GetTotalApproveQty(string req_no)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetTotalApproveQty(req_no);
        }

        //subodana 2016-06-25
        public Int32 SaveReservationApprovalNew(INR_RES inr_res, List<INR_RES_DET> inr_res_det, List<INR_RES_LOG> inr_res_log, MasterAutoNumber mastAutoNo, out string msg, out string finaldoc, decimal Totalallqty, decimal BeforetotAppqty, bool _isPendingReq, string _pendingDoc)
        {
            Int32 seqNo = 0;
            Int32 result = 0;
            string documentNo = null;
            finaldoc = null;
            string error = null;

            string reqno = null;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                _CustServiceDAL = new CustServiceDAL();
                _CustServiceDAL.ConnectionOpen();
                _CustServiceDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                decimal finaltoaappQty = 0;
                finaltoaappQty = Convert.ToDecimal(inr_res_det.Sum(z => z.IRD_RES_BQTY));
                //var _scanItems = inr_res_det.GroupBy(x => new { x.BL_NO, x.IRD_ITM_CD, x.LOC_CD }).Select(group => new { Peo = group.Key, theCount = group.Count() }).ToList();
                var _scanItems = inr_res_det.GroupBy(x => new { x.BL_NO, x.LOC_CD }).Select(group => new { Peo = group.Key, theCount = group.Count() }).ToList();
                foreach (var itm in _scanItems)
                {
                    Int32 autoNo = _financialDAL.GetAutoNumber(mastAutoNo.Aut_moduleid, mastAutoNo.Aut_direction, mastAutoNo.Aut_start_char, mastAutoNo.Aut_cate_tp, mastAutoNo.Aut_cate_cd, mastAutoNo.Aut_modify_dt, mastAutoNo.Aut_year).Aut_number;
                    documentNo = mastAutoNo.Aut_cate_cd + "-" + mastAutoNo.Aut_moduleid + "-" + mastAutoNo.Aut_year + "-" + autoNo.ToString("00000", CultureInfo.InvariantCulture);

                    if (string.IsNullOrEmpty(documentNo))
                    {
                        msg = "Request DocumentNo Empty";
                        _CustServiceDAL.TransactionRollback();
                        _financialDAL.TransactionRollback();
                        _salesDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        return -1;
                    }

                    int effect = -1;
                    effect = _financialDAL.UpdateAutoNumber(mastAutoNo);
                    //effect = _salesDAL.UpdateAutoNumber(mastAutoNo);

                    if (effect < 0)
                    {
                        msg = "autoNo Update fail.";
                        _CustServiceDAL.TransactionRollback();
                        _financialDAL.TransactionRollback();
                        _salesDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        return -1;
                    }
                    inr_res.IRS_ANAL_1 = itm.Peo.BL_NO;
                    inr_res.IRS_ANAL_2 = itm.Peo.LOC_CD;
                    inr_res.IRS_RES_NO = documentNo;
                    //inr_res.IRS_SEQ = Convert.ToInt32(autoNo.ToString("00000", CultureInfo.InvariantCulture));

                    seqNo = _salesDAL.SaveINR_RES(inr_res);

                    if (seqNo < 0)
                    {
                        msg = "Request Insert fail.";
                        _CustServiceDAL.TransactionRollback();
                        _financialDAL.TransactionRollback();
                        _salesDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        return -1;
                    }

                    List<INR_RES_DET> _resdet = new List<INR_RES_DET>();
                    _resdet = inr_res_det.Where(x => x.BL_NO == itm.Peo.BL_NO && x.LOC_CD == itm.Peo.LOC_CD).ToList();

                    foreach (INR_RES_DET itm_d in _resdet)
                    {
                        //var vBl = inr_res_det.Where(c => c.BL_NO == itm.Peo.BL_NO).FirstOrDefault();
                        //if ((itm_d.BL_NO == itm.Peo.BL_NO) && (itm_d.IRD_ITM_CD == itm.Peo.IRD_ITM_CD))
                        if ((itm_d.BL_NO == itm.Peo.BL_NO && !string.IsNullOrEmpty(itm_d.BL_NO)) && (itm_d.LOC_CD == itm.Peo.LOC_CD && !string.IsNullOrEmpty(itm_d.LOC_CD)))
                        {
                            #region blno
                            itm_d.IRD_SEQ = seqNo;

                            //check bal qty
                            decimal _resqty = _salesDAL.GetResQty(itm_d.IRD_SI_NO, itm_d.IRD_SI_LINE);
                            decimal totalrqy = _inventoryDAL.GetTotalreqQty(inr_res.IRS_ANAL_1, inr_res.IRS_COM, itm_d.IRD_ITM_CD, itm_d.IRD_SI_LINE);
                            List<TobondItemQty> Tobondqty = new List<TobondItemQty>();
                            Tobondqty = _financialDAL.GetTobondQty(inr_res.IRS_ANAL_1, itm_d.IRD_SI_LINE);
                            decimal tobontqty = Tobondqty.Sum(a => a.Tobond_Qty);
                            //TOBOND BASE ALL ENTRY SUM
                            if (tobontqty > 0)
                            {
                                List<TobondItemQty> EntryQty = new List<TobondItemQty>();
                                EntryQty = _financialDAL.GetEntryQty(inr_res.IRS_ANAL_1, itm_d.IRD_SI_LINE, inr_res.IRS_COM);
                                decimal entryqty = EntryQty.Sum(a => a.Entry_Qty);
                                if (tobontqty < entryqty + _resqty + itm_d.IRD_RES_QTY + totalrqy)
                                {
                                    result = -1;
                                    _inventoryDAL.TransactionRollback();
                                    _CustServiceDAL.TransactionRollback();
                                    _financialDAL.TransactionRollback();
                                    _inventoryDAL.TransactionRollback();
                                    msg = "Process Terminate - balance exceed";
                                    return result;
                                }
                            }


                            result = _salesDAL.SaveINR_RES_DET(itm_d);
                            if (itm_d.BL_NO != null)
                            {
                                var vBl = inr_res_det.Where(c => c.BL_NO == itm.Peo.BL_NO).ToList();
                                if (vBl != null)
                                {
                                    foreach (var v in vBl)
                                    {
                                        if (v.IRD_ITM_CD == itm_d.IRD_ITM_CD)
                                        {
                                            List<ImportsBLItems> _BLITM = new List<ImportsBLItems>();
                                            ImportsBLHeader OBJ = new ImportsBLHeader();
                                            OBJ.Ib_com = inr_res.IRS_COM;
                                            OBJ.Ib_bl_ref_no = v.BL_NO;
                                            _BLITM = _salesDAL.GetBLItemByRef(OBJ);
                                            result = -1;
                                            if (_BLITM != null)
                                            {
                                                int line = 0;
                                                decimal Qty = v.IRD_RES_QTY;
                                                var Items = _BLITM.Where(x => x.Ibi_itm_cd == v.IRD_ITM_CD && x.Ibi_qty != x.Ibi_req_qty).ToList();

                                                if (inr_res.checkbaseitem)
                                                {
                                                    if (Items != null)
                                                    {
                                                        if (Items.Count == 0)
                                                        {
                                                            List<InventoryBatchN> _batch = new List<InventoryBatchN>();
                                                            _batch = _inventoryDAL.GETBASEITEMBY_TOBOND(v.BL_NO, inr_res.IRS_COM, v.IRD_ITM_CD);
                                                            if (_batch != null)
                                                            {
                                                                if (_batch.Count > 0)
                                                                {
                                                                    string _baseitem = _batch[0].Inb_base_itmcd;

                                                                    Items = _BLITM.Where(x => x.Ibi_itm_cd == _baseitem && x.Ibi_qty != x.Ibi_req_qty).ToList();
                                                                }
                                                            }

                                                        }
                                                    }
                                                }

                                                //foreach (ImportsBLItems item in Items)
                                                //{
                                                //    if (Qty <= item.Ibi_qty)
                                                //    {
                                                //        decimal _remqty = item.Ibi_qty - item.Ibi_req_qty;
                                                //        if (_remqty != 0)
                                                //        {
                                                //            result = _salesDAL.Update_BI_RqtyNew2(v.BL_NO, v.IRD_ITM_CD, item.Ibi_line, Qty, 3);
                                                //            Qty = _remqty - Qty;
                                                //        }
                                                //    }

                                                //}

                                                result = _salesDAL.Update_BI_RqtyNew2(itm_d.IRD_SI_NO, itm_d.IRD_ITM_CD, itm_d.IRD_SI_LINE, itm_d.IRD_RES_QTY, 3);
                                            }

                                        }
                                    }
                                }

                            }

                            if (result <= 0)
                            {
                                msg = "BL Item Update fail";
                                _CustServiceDAL.TransactionRollback();
                                _financialDAL.TransactionRollback();
                                _salesDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                return -1;
                            }
                            reqno = itm_d.IRD_RESREQ_NO;
                            #endregion
                        }
                        else if (itm_d.BL_NO == itm.Peo.BL_NO && !string.IsNullOrEmpty(itm_d.BL_NO))
                        {
                            #region blno
                            itm_d.IRD_SEQ = seqNo;
                            //check bal qty
                            decimal _resqty = _salesDAL.GetResQty(itm_d.IRD_SI_NO, itm_d.IRD_SI_LINE);
                            decimal totalrqy = _inventoryDAL.GetTotalreqQty(inr_res.IRS_ANAL_1, inr_res.IRS_COM, itm_d.IRD_ITM_CD, itm_d.IRD_SI_LINE);
                            List<TobondItemQty> Tobondqty = new List<TobondItemQty>();
                            Tobondqty = _financialDAL.GetTobondQty(inr_res.IRS_ANAL_1, itm_d.IRD_SI_LINE);
                            decimal tobontqty = Tobondqty.Sum(a => a.Tobond_Qty);
                            //TOBOND BASE ALL ENTRY SUM
                            if (tobontqty > 0)
                            {
                                List<TobondItemQty> EntryQty = new List<TobondItemQty>();
                                EntryQty = _financialDAL.GetEntryQty(inr_res.IRS_ANAL_1, itm_d.IRD_SI_LINE, inr_res.IRS_COM);
                                decimal entryqty = EntryQty.Sum(a => a.Entry_Qty);
                                if (tobontqty < entryqty + _resqty + itm_d.IRD_RES_QTY + totalrqy)
                                {
                                    result = -1;
                                    _inventoryDAL.TransactionRollback();
                                    _CustServiceDAL.TransactionRollback();
                                    _financialDAL.TransactionRollback();
                                    _inventoryDAL.TransactionRollback();
                                    msg = "Process Terminate - balance exceed";
                                    return result;
                                }
                            }
                            result = _salesDAL.SaveINR_RES_DET(itm_d);
                            if (itm_d.BL_NO != null)
                            {
                                var vBl = inr_res_det.Where(c => c.BL_NO == itm.Peo.BL_NO).ToList();
                                if (vBl != null)
                                {
                                    foreach (var v in vBl)
                                    {
                                        if (!_isPendingReq)
                                        {
                                            #region not pending
                                            if (v.IRD_ITM_CD == itm_d.IRD_ITM_CD)
                                            {
                                                List<ImportsBLItems> _BLITM = new List<ImportsBLItems>();
                                                ImportsBLHeader OBJ = new ImportsBLHeader();
                                                OBJ.Ib_com = inr_res.IRS_COM;
                                                OBJ.Ib_bl_ref_no = v.BL_NO;
                                                _BLITM = _salesDAL.GetBLItemByRef(OBJ);
                                                result = -1;
                                                if (_BLITM != null)
                                                {
                                                    int line = 0;
                                                    //line = _BLITM.FindAll(x => x.Ibi_itm_cd == v.IRD_ITM_CD && x.Ibi_qty != x.Ibi_req_qty)[0].Ibi_line;
                                                    // result = _salesDAL.Update_BI_RqtyNew(v.BL_NO, v.IRD_ITM_CD, line, v.IRD_RES_QTY, 3);
                                                    decimal Qty = v.IRD_RES_QTY;
                                                    var Items = _BLITM.Where(x => x.Ibi_itm_cd == v.IRD_ITM_CD && x.Ibi_qty != x.Ibi_req_qty);
                                                    foreach (ImportsBLItems item in Items)
                                                    {
                                                        decimal _remqty = item.Ibi_qty - item.Ibi_req_qty;
                                                        if (_remqty != 0)
                                                        {
                                                            result = _salesDAL.Update_BI_RqtyNew(v.BL_NO, v.IRD_ITM_CD, item.Ibi_line, Qty, 3);
                                                            Qty = _remqty - Qty;
                                                        }
                                                    }

                                                }

                                                //result = _salesDAL.Update_BI_RqtyNew(v.BL_NO, v.IRD_ITM_CD, v.IRD_RESREQ_LINE, v.IRD_RES_QTY, 3);

                                            }
                                            #endregion
                                        }
                                        else
                                        {
                                            #region Pending doc
                                            if (v.IRD_ITM_CD == itm_d.IRD_ITM_CD)
                                            {
                                                List<ImportsBLItems> _BLITM = new List<ImportsBLItems>();
                                                ImportsBLHeader OBJ = new ImportsBLHeader();
                                                OBJ.Ib_com = inr_res.IRS_COM;
                                                OBJ.Ib_bl_ref_no = v.BL_NO;
                                                _BLITM = _salesDAL.GetBLItemByBlNo(OBJ);
                                                result = -1;
                                                if (_BLITM != null)
                                                {
                                                    int line = 0;
                                                    //line = _BLITM.FindAll(x => x.Ibi_itm_cd == v.IRD_ITM_CD && x.Ibi_qty != x.Ibi_req_qty)[0].Ibi_line;
                                                    // result = _salesDAL.Update_BI_RqtyNew(v.BL_NO, v.IRD_ITM_CD, line, v.IRD_RES_QTY, 3);
                                                    decimal Qty = v.IRD_RES_QTY;
                                                    var Items = _BLITM.Where(x => x.Ibi_itm_cd == v.IRD_ITM_CD && x.Ibi_qty != x.Ibi_req_qty && x.Ibi_line == v.IRD_RESREQ_LINE);
                                                    if (Items != null)
                                                    {
                                                        foreach (ImportsBLItems item in Items)
                                                        {
                                                            decimal _remqty = item.Ibi_qty - item.Ibi_req_qty;
                                                            if (_remqty != 0)
                                                            {
                                                                result = _salesDAL.UpdateBlReqQtyForPendingOrders(item.Ibi_doc_no, v.IRD_ITM_CD, item.Ibi_line, Qty, 3);
                                                                Qty = _remqty - Qty;
                                                            }
                                                        }
                                                    }

                                                }

                                                //result = _salesDAL.Update_BI_RqtyNew(v.BL_NO, v.IRD_ITM_CD, v.IRD_RESREQ_LINE, v.IRD_RES_QTY, 3);

                                            }
                                            #endregion
                                        }
                                    }
                                }

                            }
                            else
                            {

                            }

                            if (result <= 0)
                            {
                                msg = "BL Item Update fail.";
                                _CustServiceDAL.TransactionRollback();
                                _financialDAL.TransactionRollback();
                                _salesDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                return -1;
                            }
                            reqno = itm_d.IRD_RESREQ_NO;
                            #endregion
                        }
                        else if (itm_d.LOC_CD == itm.Peo.LOC_CD && !string.IsNullOrEmpty(itm_d.LOC_CD))
                        {
                            #region location
                            itm_d.IRD_SEQ = seqNo;
                            result = _salesDAL.SaveINR_RES_DET(itm_d);
                            if (itm_d.BL_NO != null)
                            {
                                //result = _salesDAL.Update_BI_Rqty(itm_d.BL_NO, itm_d.IRD_ITM_CD, itm_d.IRD_RESREQ_LINE, itm_d.IRD_RES_QTY, 3);
                            }
                            if (result <= 0)
                            {
                                msg = "Item Insert Fail.";
                                _CustServiceDAL.TransactionRollback();
                                _financialDAL.TransactionRollback();
                                _salesDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                return -1;
                            }
                            reqno = itm_d.IRD_RESREQ_NO;
                            #endregion
                        }
                    }

                    List<INR_RES_LOG> _reslog = new List<INR_RES_LOG>();
                    _reslog = inr_res_log.Where(x => x.BL_NO == itm.Peo.BL_NO && x.LOC_CD == itm.Peo.LOC_CD).ToList();

                    foreach (INR_RES_LOG log in _reslog)
                    {
                        log.IRL_SEQ = seqNo;
                        log.IRL_RES_NO = documentNo;
                        log.IRL_CURT_DOC_TP = log.IRL_ORIG_DOC_TP;
                        log.IRL_CURT_DOC_NO = documentNo;
                        log.IRL_CURT_DOC_DT = log.IRL_ORIG_DOC_DT;
                        log.IRL_ORIG_DOC_NO = documentNo;
                        log.IRL_CURT_LOC = itm.Peo.LOC_CD;
                        log.IRL_RES_WP = 0;
                        //if ((log.BL_NO == itm.Peo.BL_NO) && (log.IRL_ITM_CD == itm.Peo.IRD_ITM_CD))
                        if ((log.BL_NO == itm.Peo.BL_NO && !string.IsNullOrEmpty(log.BL_NO)) && (log.LOC_CD == itm.Peo.LOC_CD && !string.IsNullOrEmpty(log.LOC_CD)))
                        {

                            result = _salesDAL.SaveINR_RES_LOG(log);
                            result = _inventoryDAL.UpdateLocationRes(inr_res.IRS_COM, log.IRL_ORIG_LOC, log.IRL_ITM_CD, log.IRL_ITM_STUS, log.IRL_CRE_BY, log.IRL_RES_BQTY);
                            if (result <= 0)
                            {
                                msg = "log Insert Fail.";
                                _CustServiceDAL.TransactionRollback();
                                _financialDAL.TransactionRollback();
                                _salesDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                return -1;
                            }
                        }
                        else if ((log.BL_NO == itm.Peo.BL_NO) && !string.IsNullOrEmpty(log.BL_NO))
                        {
                            #region
                            ///log.IRL_SEQ = seqNo;
                            //log.IRL_RES_NO = documentNo;
                            result = _salesDAL.SaveINR_RES_LOG(log);
                            if (log.BL_NO != null)
                            {
                                //var vBl = inr_res_log.Where(c => c.BL_NO == itm.Peo.BL_NO).ToList();
                                //if (vBl != null)
                                //{
                                //    foreach (var v in vBl)
                                //    {
                                //        if (v.IRL_ITM_CD == log.IRL_ITM_CD)
                                //        {
                                //            result = _salesDAL.Update_BI_RqtyNew(v.BL_NO, v.IRL_ITM_CD, v.IRL_LINE, v.IRL_RES_BQTY, 3);

                                //            InventoryBatchN _grntb = _inventoryDAL.GET_INVENTBATCH_JOB(log.BL_NO, log.IRL_ITM_CD);
                                //            if (_grntb != null)
                                //            {
                                //                if (_grntb.Inb_qty > 0)
                                //                {
                                //                    result = _inventoryDAL.UpdateLocation_Batch_Res(inr_res.IRS_COM, log.IRL_ORIG_LOC, log.IRL_ITM_CD, log.IRL_ITM_STUS, log.IRL_CRE_BY, log.IRL_RES_BQTY, v.BL_NO);
                                //                }
                                //                else
                                //                {
                                //                    msg = "Inventory Balance Fail";
                                //                    _CustServiceDAL.TransactionRollback();
                                //                    _financialDAL.TransactionRollback();
                                //                    _salesDAL.TransactionRollback();
                                //                    _inventoryDAL.TransactionRollback();
                                //                    return -1;
                                //                }
                                //            }


                                //        }
                                //    }
                                //}

                            }
                            else
                            {
                                result = _inventoryDAL.UpdateLocationRes(inr_res.IRS_COM, log.IRL_ORIG_LOC, log.IRL_ITM_CD, log.IRL_ITM_STUS, log.IRL_CRE_BY, log.IRL_RES_BQTY);
                            }

                            if (result <= 0)
                            {
                                msg = "log Insert Fail.";
                                _CustServiceDAL.TransactionRollback();
                                _financialDAL.TransactionRollback();
                                _salesDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                return -1;
                            }
                            #endregion
                        }

                        else if ((log.LOC_CD == itm.Peo.LOC_CD && !string.IsNullOrEmpty(log.LOC_CD)))
                        {
                            #region
                            //log.IRL_SEQ = seqNo;
                            //log.IRL_RES_NO = documentNo;
                            result = _salesDAL.SaveINR_RES_LOG(log);
                            result = _inventoryDAL.UpdateLocationRes(inr_res.IRS_COM, log.IRL_ORIG_LOC, log.IRL_ITM_CD, log.IRL_ITM_STUS, log.IRL_CRE_BY, log.IRL_RES_BQTY);
                            if (result <= 0)
                            {
                                msg = "log Insert Fail.";
                                _CustServiceDAL.TransactionRollback();
                                _financialDAL.TransactionRollback();
                                _salesDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                return -1;
                            }
                            #endregion
                        }

                    }
                    if (Totalallqty == BeforetotAppqty + finaltoaappQty)
                    {
                        result = _CustServiceDAL.Update_ReqHeaderStatus("F", inr_res.IRS_CRE_BY, inr_res.IRS_COM, reqno);
                    }


                    finaldoc = finaldoc + "|" + documentNo;
                }

                _CustServiceDAL.TransactionCommit();
                _financialDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                result = -1;
                error = ex.Message;
                _CustServiceDAL.TransactionRollback();
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
            }

            msg = error;
            return result;
        }

        //subodana 2016-07-05
        public DataTable GetUnitPriceNew(string itemcode, string loc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetUnitPriceNew(itemcode, loc);
        }

        //Lakshan 06 Jul 2016
        public List<INR_RES_DET> GetInrResDet(INR_RES_DET _obj)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInrResDet(_obj);
        }
        //subodana 2016-07-06
        public Int32 Update_filenoforCostsheet(string _com, string _doc, string file)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            return _salesDAL.Update_filenoforCostsheet(_com, _doc, file);
        }
        //subodana 2016-07-07
        public DataTable GetSOSeqno(string com, string sono)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSOSeqno(com, sono);
        }
        //subodana 2016-07-07
        public DataTable GetREQITMSeqno(string com, string sono)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetREQITMSeqno(com, sono);
        }

        //subodana 2016-07-07
        public int Update_SalesOrder(List<SalesOrderItems> SalesOrder_itm, Int32 seq, string _sono, string cuscode, string com, Int32 reqseqno, SalesOrderHeader SalesOrder_hdr)
        {
            int result = 0;
            string error = "";
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                if (SalesOrder_hdr != null)
                {

                    Tuple<int, int> _effect2 = _salesDAL.PlaceSalesOrder(SalesOrder_hdr);

                    INT_REQ p_inventoryRequest = new INT_REQ();
                    p_inventoryRequest.ITR_BUS_CODE = SalesOrder_hdr.SOH_CUS_CD;//"N/A";
                    p_inventoryRequest.ITR_COM = SalesOrder_hdr.SOH_COM;
                    p_inventoryRequest.ITR_CRE_BY = SalesOrder_hdr.SOH_CRE_BY;
                    p_inventoryRequest.ITR_DT = SalesOrder_hdr.SOH_DT.Date;
                    p_inventoryRequest.ITR_EXP_DT = SalesOrder_hdr.SOH_DT.Date;
                    p_inventoryRequest.ITR_EXG_RATE = SalesOrder_hdr.SOH_EX_RT;
                    p_inventoryRequest.ITR_ISSUE_COM = SalesOrder_hdr.SOH_COM;
                    p_inventoryRequest.ITR_ISSUE_FROM = SalesOrder_hdr.SOH_DISP_LOC;
                    p_inventoryRequest.ITR_LOC = SalesOrder_hdr.SOH_PC;
                    p_inventoryRequest.ITR_NOTE = SalesOrder_hdr.SOH_REMARKS;
                    p_inventoryRequest.ITR_REC_TO = string.Empty;
                    p_inventoryRequest.ITR_REF = SalesOrder_hdr.SOH_SO_NO;
                    p_inventoryRequest.ITR_REQ_NO = SalesOrder_hdr.SOH_SO_NO;
                    // p_inventoryRequest.Itr_seq_no = 0;
                    p_inventoryRequest.ITR_SESSION_ID = SalesOrder_hdr.SOH_SESSION_ID;
                    p_inventoryRequest.ITR_STUS = SalesOrder_hdr.SOH_STUS;
                    p_inventoryRequest.ITR_SUB_TP = "SO";
                    p_inventoryRequest.ITR_TP = "SO";

                    _salesDAL.UpdateINT_REQ(p_inventoryRequest);



                }

                //clear so items
                result = _salesDAL.Update_SOItems(seq, _sono);
                //if (result < 1)
                //{
                //    result = -1;
                //    _salesDAL.TransactionRollback();
                //    _salesDAL.ConnectionClose();
                //    return -1;
                //}
                // clear reqitem
                result = _salesDAL.Update_ReqItems(reqseqno, _sono);

                // save so and req item

                #region SalesOrder Item
                if (SalesOrder_itm.Count > 0)
                {
                    foreach (SalesOrderItems _itm in SalesOrder_itm)
                    {

                        // SalesOrder_hdr.mpc_so_res = mpc_so_res;

                        _itm.SOI_SEQ_NO = Convert.ToInt32(seq);
                        _itm.SOI_SO_NO = _sono;
                        result = _salesDAL.SaveSOItems(_itm);

                        INT_REQ_ITM _ReqItem = new INT_REQ_ITM();
                        _ReqItem.ITRI_QTY = _itm.SOI_INV_QTY;
                        _ReqItem.ITRI_SEQ_NO = _itm.SOI_ITM_SEQ;//Convert.ToInt32(itemInv.Cells[14].Text);
                        _ReqItem.ITRI_ITM_CD = _itm.SOI_ITM_CD;//itemInv.Cells[1].Text;
                        // result = _salesDAL.BalanceItemStock(_ReqItem);

                        result = _salesDAL.UpdatePrice(_itm.SOI_ITM_CD, _itm.SOI_PBOOK, _itm.SOI_PB_LVL, cuscode, _itm.SOI_PROMO_CD, _itm.SOI_SEQ, _itm.SOI_ITM_SEQ);

                        #region SalesOrderItemTax
                        SalesOrderItemTax SalesOrderItemTax = new SalesOrderItemTax();
                        SalesOrderItemTax.SOTX_SO_NO = _sono;
                        SalesOrderItemTax.SOTX_ITM_CD = _itm.SOI_ITM_CD; //ddr.Cells[1].Text;
                        SalesOrderItemTax.SOTX_ITM_TAX_TP = "VAT";
                        SalesOrderItemTax.SOTX_ITM_TAX_RT = 0;
                        SalesOrderItemTax.SOTX_ITM_TAX_AMT = _itm.SOI_ITM_TAX_AMT;
                        SalesOrderItemTax.SOTX_JOB_NO = string.Empty;
                        SalesOrderItemTax.SOTX_JOB_LINE = _itm.SOI_ITM_LINE;
                        SalesOrderItemTax.SOTX_SEQ_NO = Convert.ToInt32(seq);
                        SalesOrderItemTax.SOTX_ITM_LINE = _itm.SOI_ITM_LINE;

                        result = _salesDAL.SaveSOItemTax(SalesOrderItemTax);
                        #endregion

                        #region save Request
                        INT_REQ_ITM _inventoryRequestItem = new INT_REQ_ITM();
                        MasterItem _mstItem = new MasterItem();
                        _mstItem.Mi_cd = _itm.SOI_ITM_CD;
                        // _inventoryRequestItem. = _mstItem;
                        //_inventoryRequestItem.Itri_advan_qty = 0;
                        //_inventoryRequestItem.Itri_base_req_line = 0;
                        //_inventoryRequestItem.Itri_base_req_no = "";
                        //_inventoryRequestItem.Itri_batchno = "";
                        //_inventoryRequestItem.Itri_buffer = 0;
                        //_inventoryRequestItem. = 0;
                        _inventoryRequestItem.ITRI_COM = com;
                        _inventoryRequestItem.ITRI_SEQ_NO = reqseqno;
                        _inventoryRequestItem.ITRI_LINE_NO = _itm.SOI_ITM_LINE;
                        _inventoryRequestItem.ITRI_ITM_CD = _itm.SOI_ITM_CD;
                        _inventoryRequestItem.ITRI_ITM_STUS = _itm.SOI_ITM_STUS;
                        _inventoryRequestItem.ITRI_QTY = _itm.SOI_QTY;
                        _inventoryRequestItem.ITRI_BQTY = _itm.SOI_QTY;
                        _inventoryRequestItem.ITRI_UNIT_PRICE = _itm.SOI_UNIT_RT;
                        _inventoryRequestItem.ITRI_APP_QTY = _itm.SOI_QTY;
                        _inventoryRequestItem.ITRI_RES_NO = _itm.SOI_RES_NO;
                        _salesDAL.SaveINT_REQ_ITM(_inventoryRequestItem);
                        //_inventoryDAL.SaveInventoryRequestItem(_inventoryRequestItem);
                        #endregion
                    }

                }
                #endregion
                bool _dataSave = true;
                #region reservation data update add by lakshan 28 Jun 2017
                InventoryRequest _invReq = _inventoryDAL.GET_INT_REQ_DATA_NEW(new InventoryRequest() { Itr_req_no = _sono }).FirstOrDefault();
                foreach (var _sao in SalesOrder_itm)
                {
                    if (!string.IsNullOrEmpty(_sao.SOI_RES_NO) && _sao.SOI_RES_NO != "N/A")
                    {

                        bool _resLogDataAva = false;
                        string _errro = "";
                        InventoryBLL _BL = new InventoryBLL();
                        Int32 _res = 0;
                        List<INR_RES_LOG> _resLogAvaData = new List<INR_RES_LOG>();
                        #region collect data 2
                        INR_RES_LOG _resObj = new INR_RES_LOG();
                        _resObj.IRL_RES_NO = _sao.SOI_RES_NO;
                        _resObj.IRL_ITM_CD = _sao.SOI_ITM_CD;
                        _resObj.IRL_ITM_STUS = _sao.SOI_ITM_STUS;
                        _resObj.IRL_CURT_COM = _invReq.Itr_issue_com;
                        _resObj.IRL_CURT_LOC = _invReq.Itr_issue_from;
                        _resObj.IRL_CURT_DOC_NO = _sono;
                        _resObj.IRL_CURT_DOC_TP = "SO";
                        _resObj.IRL_ACT = 1;
                        _resLogAvaData = _inventoryDAL.GET_INR_RES_LOG_DATA_NEW(_resObj);
                        if (_resLogAvaData.Count == 0)
                        {
                            _res = _inventoryDAL.UPDATE_INR_RES_DET_SO_MRN(new INR_RES_DET()
                            {
                                IRD_RES_NO = _sao.SOI_RES_NO,
                                IRD_ITM_CD = _sao.SOI_ITM_CD,
                                IRD_ITM_STUS = _sao.SOI_ITM_STUS,
                                IRD_RES_BQTY = _sao.SOI_QTY
                            });

                            if (_res > 0)
                            {
                                _res = 0;
                                _res = _BL.ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                {
                                    IRL_CURT_COM = SalesOrder_hdr.SOH_COM,
                                    IRL_CURT_LOC = SalesOrder_hdr.SOH_DISP_LOC,
                                    IRL_ORIG_DOC_TP = "INV",
                                    IRL_ORIG_DOC_NO = _sao.SOI_RES_NO,
                                    IRL_ORIG_DOC_DT = DateTime.Now,

                                    IRL_CURT_DOC_TP = "SO",
                                    IRL_CURT_DOC_NO = _sono,
                                    IRL_CURT_DOC_DT = SalesOrder_hdr.SOH_DT,
                                    IRL_RES_NO = _sao.SOI_RES_NO,
                                    IRL_ITM_CD = _sao.SOI_ITM_CD,
                                    IRL_ITM_STUS = _sao.SOI_ITM_STUS,
                                    IRL_MOD_BY_NEW = SalesOrder_hdr.SOH_CRE_BY,
                                    IRL_MOD_SESSION = SalesOrder_hdr.SOH_SESSION_ID,
                                    IRL_MOD_DT = DateTime.Now,
                                    IRL_CRE_BY = SalesOrder_hdr.SOH_CRE_BY,
                                    IRL_CRE_DT = DateTime.Now,
                                    IRL_CRE_SESSION = SalesOrder_hdr.SOH_SESSION_ID,
                                    IRL_RES_QTY = _sao.SOI_QTY
                                }, 0, _inventoryDAL, out _errro);
                            }
                        }
                        #endregion
                    }
                }
                #endregion
                if (_dataSave)
                {
                    _salesDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();
                }
                else
                {
                    result = -1;
                    //error = ex.Message;
                    _salesDAL.TransactionRollback();
                    _salesDAL.ConnectionClose();
                    _inventoryDAL.TransactionRollback();
                    _inventoryDAL.ConnectionClose();
                    return -1;
                }

            }
            catch (Exception ex)
            {
                result = -1;
                error = ex.Message;
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                return -1;
            }
            return result;
        }

        //Lakshan 27 Jul 2016

        #region Sales Forcasting
        public Int32 SaveSalesForecastingCalendar(MasterAutoNumber _mstAutoCalendar, SalesForecastingCalendar _salForCasCal, out string _docNo, out string _err)
        {
            int _res = 1;
            _docNo = "";
            _err = "";
            string _errMsg = "";
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            try
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                string _documentNo = _salForCasCal.Sfc_cd;
                if (string.IsNullOrEmpty(_documentNo))
                {
                    _res = -1;
                    _errMsg = "Auto no not updated !";
                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_mstAutoCalendar.Aut_moduleid, _mstAutoCalendar.Aut_direction, _mstAutoCalendar.Aut_start_char, _mstAutoCalendar.Aut_cate_tp, _mstAutoCalendar.Aut_cate_cd, _mstAutoCalendar.Aut_modify_dt, _mstAutoCalendar.Aut_year).Aut_number;
                    _documentNo = _mstAutoCalendar.Aut_start_char + "-" + Convert.ToString(_salForCasCal.Sfc_ye_frm).Remove(0, 2) + "-" + _salForCasCal.Sfc_st_mnt.ToString("00") + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                    _res = _inventoryDAL.UpdateAutoNumber(_mstAutoCalendar);
                }
                if (_res > 0)
                {
                    _errMsg = "Forecasting calendar not save !";
                    _res = -1;
                    _salForCasCal.Sfc_cd = _documentNo;
                    _res = _salesDAL.SaveSalesForecastingCalendar(_salForCasCal);
                }
                if (_res > 0)
                {
                    _errMsg = "";
                    _inventoryDAL.TransactionCommit();
                    _salesDAL.TransactionCommit();
                }
                _docNo = _documentNo;
                _err = _errMsg;
                return _res;
            }
            catch (Exception ex)
            {
                _res = -1;
                _err = ex.Message;
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                return _res;
            }
        }

        //Lakshan 27 Jul 2016
        public DataTable SearchSalesForecastingCalendar(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SearchSalesForecastingCalendar(_initialSearchParams, _searchCatergory, _searchText);
        }
        //Lakshan 27 Jul 2016
        public List<SalesForecastingCalendar> GetSarForCal(SalesForecastingCalendar _obj)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSarForCal(_obj);
        }
        //Lakshan 29 Jul 2016
        public Int32 SaveSalesForecastingCompany(List<SalesForecastingCalendarCom> _calComList, out string _err)
        {
            int _res = -1;
            _err = "";
            string _errMsg = "";
            _salesDAL = new SalesDAL();
            try
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _errMsg = "No data found !";
                _errMsg = "";
                if (_calComList != null)
                {
                    _res = 1;
                    _errMsg = "Forecasting company not save !";
                    foreach (var item in _calComList)
                    {
                        if (_res > 0)
                        {
                            _res = _salesDAL.SaveSalesForecastingCompany(item);
                        }
                    }
                }
                if (_res > 0)
                {
                    _errMsg = "";
                    _salesDAL.TransactionCommit();
                }
                _err = _errMsg;
                return _res;
            }
            catch (Exception ex)
            {
                _res = -1;
                _err = ex.Message;
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                return _res;
            }
        }

        //Lakshan 29 Jul 2016c
        public List<SalesForecastingCalendarCom> GetSarForCom(SalesForecastingCalendarCom _obj)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSarForCom(_obj);
        }

        //Lakshan 2016 Aug 01
        public List<SalesForecastingMasterPeriod> Get_MST_FOR_PD_TP(SalesForecastingMasterPeriod _obj)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_MST_FOR_PD_TP(_obj);
        }
        //Lakshan 2016 Aug 01
        public List<SalesForecastingPeriod> Get_SAR_FOR_PD(SalesForecastingPeriod _obj)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_SAR_FOR_PD(_obj);
        }
        #endregion
        //Lakshan 2016 Aug 01
        public Int32 SaveSalesForecastingPeriod(MasterAutoNumber _mstAutoSalForPer, SalesForecastingPeriod _saForCasPer, out string _err, out string _docNo)
        {
            int _res = 1;
            _docNo = "";
            _err = "";
            string _errMsg = "";
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            try
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                string _documentNo = _saForCasPer.Sfp_pd_cd;
                if (string.IsNullOrEmpty(_documentNo))
                {
                    _res = -1;
                    _errMsg = "Auto no not updated !";
                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_mstAutoSalForPer.Aut_moduleid, _mstAutoSalForPer.Aut_direction, _mstAutoSalForPer.Aut_start_char, _mstAutoSalForPer.Aut_cate_tp, _mstAutoSalForPer.Aut_cate_cd, _mstAutoSalForPer.Aut_modify_dt, _mstAutoSalForPer.Aut_year).Aut_number;
                    _documentNo = _mstAutoSalForPer.Aut_start_char + "-" + Convert.ToString(_saForCasPer.Sfp_frm_pd.Year).Remove(0, 2) + "-" + _saForCasPer.Sfp_frm_pd.Month.ToString("00") + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                    _res = _inventoryDAL.UpdateAutoNumber(_mstAutoSalForPer);
                }
                if (_res > 0)
                {
                    _errMsg = "Forecasting period not save !";
                    _res = -1;
                    _saForCasPer.Sfp_pd_cd = _documentNo;
                    _res = _salesDAL.SaveSalesForecastingPeriod(_saForCasPer);
                }
                if (_res > 0)
                {
                    _errMsg = "";
                    _inventoryDAL.TransactionCommit();
                    _salesDAL.TransactionCommit();
                }
                _docNo = _documentNo;
                _err = _errMsg;
                return _res;
            }
            catch (Exception ex)
            {
                _res = -1;
                _err = ex.Message;
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                return _res;
            }
        }

        //Lakshan 2016 Aug 02
        public DataTable SearchSalesForecastingPeriod(string _initialSearchParams, string _searchCatergory, string _searchText, string frmDt, string toDt)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SearchSalesForecastingPeriod(_initialSearchParams, _searchCatergory, _searchText, frmDt, toDt);
        }

        //Lakshan 2016 Aug 08
        public DataTable SearchSalesForecastingPeriodByCal(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SearchSalesForecastingPeriodByCal(_initialSearchParams, _searchCatergory, _searchText);
        }

        //Lakshan 2016 Aug 08
        public Int32 SaveSalesForecasting(SalesForecastingHeader _sarHdr, List<SalesForecastingDetail> _sarDet, out string _err)
        {
            int _res = -1;
            Int32 _seqNo = 0;
            _err = "";
            string _errMsg = "";
            _salesDAL = new SalesDAL();
            try
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                if (_sarHdr != null)
                {
                    _res = _salesDAL.SaveSalesForecastingHeader(_sarHdr, out _seqNo);
                    if (_res > 0)
                    {
                        _res = -1;
                        foreach (var item in _sarDet)
                        {
                            item.Sfd_seq = _seqNo;
                            _res = _salesDAL.SaveSalesForecastingDetail(item);
                        }
                    }
                }
                if (_res > 0)
                {
                    _errMsg = "";
                    _salesDAL.TransactionCommit();
                }
                _err = _errMsg;
                return _res;
            }
            catch (Exception ex)
            {
                _res = -1;
                _err = ex.Message;
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                return _res;
            }
        }
        //Lakshan 2016 Aug 08
        public List<SalesForecastingDetail> GET_SAR_FOR_DET_BY_HDR(SalesForecastingHeader _hdr)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GET_SAR_FOR_DET_BY_HDR(_hdr);
        }
        //Lakshan 2016 Aug 16
        public List<MasterBusinessEntity> GetCustomerProfileNew(MasterBusinessEntity _obj)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCustomerProfileNew(_obj);
        }
        //subodana 2016-08-22
        public DataTable GET_CST_DATA_BYDOC(string docno)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GET_CST_DATA_BYDOC(docno);
        }
        //Rukshan 2016-09-10
        public bool Check_resno(string _COM, string DOCNO, string _cus, string _LOC)
        {

            _salesDAL = new SalesDAL();
            DataTable _tbl = _salesDAL.Check_resno(_COM, DOCNO, _cus, _LOC);
            if (_tbl != null)
            {
                if (_tbl.Rows.Count > 0)
                {
                    return true;
                }
            }
            return false;
        }

        //subodana 2016-09-19
        public DataTable GET_HSLIMIT_DATA(string loc, DateTime firstdate, DateTime lastdate)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GET_HSLIMIT_DATA(loc, firstdate, lastdate);
        }
        //subodana 2016-09-19
        public DataTable GET_HSINVDATA(string loc, DateTime firstdate, DateTime lastdate)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GET_HSINVDATA(loc, firstdate, lastdate);
        }
        //subodana 2016-09-28
        public DataTable GET_PCFROMLOC(string loc, string com)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GET_PCFROMLOC(loc, com);
        }
        //subodana 2016-09-28
        public DataTable GET_ADVRECFORMRN(string itmcode, string com, string pc, DateTime fromdate, DateTime todate)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GET_ADVRECFORMRN(itmcode, com, pc, fromdate, todate);
        }
        //subodana 2016-09-28
        public DataTable SP_GETERRLINEDOC(string com, DateTime fromdate, DateTime todate)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SP_GETERRLINEDOC(com, fromdate, todate);
        }
        //subodana 2016-09-28
        public DataTable SP_GETERRLINEDOC2(string doc, string itm, Int32 line, Int32 batchline, string status)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SP_GETERRLINEDOC2(doc, itm, line, batchline, status);
        }

        //Lakshika 2016-10-14
        public DataTable GetDiscountReportDetails(string _com, string _pc, string _itemCode, string _cat1, string _cat2, string _cat3,
            string _brand, string _model, string _customer, string _executive, DateTime _fromDate, DateTime _toDate, int _fromDisc, int _toDisc, string _user)
        {
            _salesDAL = new SalesDAL();
            _reportDAL = new ReptCommonDAL();

            DataTable GLOB_DataTable = new DataTable();
            GLOB_DataTable.TableName = "tblDiscount";
            DataTable _dtResults = new DataTable();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_user);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.GetDiscountReportDetails(_com, drow["tpl_pc"].ToString(), _itemCode, _cat1, _cat2, _cat3,
             _brand, _model, _customer, _executive, _fromDate, _toDate, _fromDisc, _toDisc, _user);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            //return _salesDAL.GetDiscountReportDetails(_com, _pc, _itemCode, _cat1, _cat2, _cat3,
            // _brand, _model, _customer, _executive, _fromDate, _toDate, _fromDisc, _toDisc, _user);

            return GLOB_DataTable;
        }

        public DataTable GetStockSummaryReportDetail(string _User, string _JoNo)
        {   // Lakshika 2016/10/20
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();
            //if (_securityDAL.Is_Report_DR("FIFO_Audit") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetStockSummaryReportDetails(_User, _JoNo);
        }

        public List<MasterItemTax> GetCustomerTax(string _cus, string _company)
        {
            if (!_connectionopen) _salesDAL = new SalesDAL();
            List<MasterItemTax> _list = new List<MasterItemTax>();
            _list = _salesDAL.GetCustomerTax(_cus, _company);
            return _list;
        }

        //RUKSHAN 2016-10-23
        public List<ReptPickSerials> Get_TEMP_PICK_SER_BY_loc(string _company, string _docNo, string _loc)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.Get_TEMP_PICK_SER_BY_loc(_company, _docNo, _loc);
        }

        public Int32 SendConfirmationSMS(string _com, string _pc, string _loc, string _jobNo, string _rccno, DateTime _date, String _remarks, string _subChanel, string _user, string _SONO, string _ref, string _cus)
        {
            Int32 _effects = 0;

            //  _err = string.Empty 

            DataTable mst_profit_center = new DataTable();
            DataTable dtlloc = new DataTable();
            string _pcDes = string.Empty;
            string _pcMail = string.Empty;
            string _locDes = string.Empty;
            string _mgrMobno = string.Empty;
            string _PCMgr = string.Empty;
            if (_rccno != "-1")
            {
                #region Manager
                mst_profit_center = _salesDAL.GetProfitCenterTable(_com, _pc);
                foreach (DataRow row in mst_profit_center.Rows)
                {
                    _pcDes = row["MPC_DESC"].ToString();
                    _pcMail = row["mpc_email"].ToString();
                    _PCMgr = row["mpc_man"].ToString();
                }

                // dtlloc = _salesDAL.GetLocationCode(_com, _loc);

                //foreach (DataRow row in dtlloc.Rows)
                //{
                //    _locDes = row["ML_LOC_DESC"].ToString();
                //}

                #region sms

                Service_Message oMessage = new Service_Message();
                string emailBody = string.Empty;

                string _realPhNo = string.Empty;

                String SmsBody = "SO Approved -SMS ID";
                SmsBody += "\n SO # " + _SONO + " \n REFERENCE #:" + _ref + "\n CUSTOMER : " + _cus;
                //SmsBody += "RCC #  :" + _rccno + "";

                Master_Employee _mgrMob = _salesDAL.GetMasterEmployee(_com, _user);

                if (_mgrMob.Esep_epf != null)
                {
                    _mgrMobno = _mgrMob.Esep_mobi_no;
                }
                if (!string.IsNullOrEmpty(_mgrMobno))
                {
                    if (_mgrMobno.Length >= 9)
                    {

                        OutSMS _outmgr = new OutSMS();
                        if (_mgrMobno.Length == 10)
                        {
                            _outmgr.Receiverphno = "+94" + _mgrMobno.Substring(1, 9);
                            _outmgr.Senderphno = "+94" + _mgrMobno.Substring(1, 9);
                        }
                        if (_mgrMobno.Length == 9)
                        {
                            _outmgr.Receiverphno = "+94" + _mgrMobno;
                            _outmgr.Senderphno = "+94" + _mgrMobno;
                        }



                        _realPhNo = GetRealPhoneNumber(_mgrMobno);

                        _outmgr.Createtime = DateTime.Now;
                        _outmgr.Msg = SmsBody;
                        _outmgr.Msgstatus = 0;
                        _outmgr.Msgtype = "S";
                        _outmgr.Receivedtime = DateTime.Now;
                        _outmgr.Receiver = _pcDes;
                        _outmgr.Senderphno = _mgrMobno;
                        _outmgr.Receiverphno = _mgrMobno;
                        _outmgr.Refdocno = _jobNo;
                        _outmgr.Sender = _user;
                        _outmgr.Createtime = DateTime.Now;
                        _effects = _salesDAL.SaveSMSOut(_outmgr);

                    }
                }
                #endregion
                #endregion
            }





            return _effects;

        }
        //Rukshan 04 Nov 2016
        public Int32 UpdateItemAllocationDataFIFO(InventoryDAL _invDal, InventoryRequestItem _reqItm, InventoryRequest _req)
        {
            int _eff = 0;
            // _generalDAL = new GeneralDAL();
            // _invDal = new InventoryDAL();
            MasterProfitCenter _mstProNew = new MasterProfitCenter();
            _mstProNew = _salesDAL.GetProfitCenter(_req.Itr_com, _req.Itr_anal3);
            //  MasterLocationNew _mstLocNew =_salesDAL.GetMasterLocations(new MasterLocationNew() { Ml_loc_cd = _req.Itr_loc, Ml_com_cd = _req.Itr_com }).FirstOrDefault();
            List<InventoryAllocateDetails> _chnlAllocation = _salesDAL.GET_INR_STOCK_ALOC_DATA(new InventoryAllocateDetails
            {
                Isa_chnl = _mstProNew.Mpc_chnl,
                Isa_com = _req.Itr_com,
                Isa_itm_cd = _reqItm.Itri_itm_cd,
                Isa_itm_stus = _reqItm.Itri_itm_stus
            });
            if (_chnlAllocation != null)
            {
                foreach (InventoryAllocateDetails _chnAllData in _chnlAllocation)
                {
                    if (_chnAllData.Isa_aloc_bqty >= _reqItm.Itri_qty)
                    {
                        _chnAllData.Isa_aloc_bqty = _reqItm.Itri_qty;
                        _salesDAL.UpdateItemAllocationData(_chnAllData);
                        _reqItm.Itri_qty = _reqItm.Itri_qty - _reqItm.Itri_qty;
                    }
                    else
                    {
                        _salesDAL.UpdateItemAllocationData(_chnAllData);
                        _reqItm.Itri_qty = _reqItm.Itri_qty - _chnAllData.Isa_aloc_bqty;
                    }
                }
            }
            return _eff;
        }

        //Randima 17 Nov 2016
        public List<RecieptHeader> GetRecieptByRefDoc(string _com, string _refDocNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRecieptByRefDoc(_com, _refDocNo);
        }

        //Add by Akila 2016/11/23
        public DataTable GetLoyaltyPointSummaryForHPRevert(string loyaltyCardNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetLoyaltyPointSummaryForHPRevert(loyaltyCardNo);
        }

        //Add by Akila 2016/11/24
        public int UpdateLmMembers(string accountNo, string tranType, double pointAmt)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            return _salesDAL.UpdateLmMembers(accountNo, tranType, pointAmt);
        }

        //Rukshan 26 Nov 2016
        public List<InterCompanySalesParameter> GET_INTERCOM_PAR_BY_SUP(string _com, string _sup)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GET_INTERCOM_PAR_BY_SUP(_com, _sup);
        }

        //Rukshan 26 Nov 2016
        public List<ProductionFinGood> GETFINGOD(string _DOC)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GETFINGOD(_DOC);
        }

        //Rukshan 26 Nov 2016
        public List<ProductionPlaneDetails> GETSATPROJ_LINE(string _DOC)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GETSATPROJ_LINE(_DOC);
        }

        //Rukshan 15/Dec/2016
        public DataTable SearchSalesOrderRequest(string _initialSearchParams, string _searchCatergory, string _searchText, DateTime _from, DateTime _to)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SearchSalesOrderRequest(_initialSearchParams, _searchCatergory, _searchText, _from, _to);
        }

        //Randima 16 Dec 2016
        public List<SalesForecastingHeader> GET_SAR_FOR_HDR(string _com, string _calCd, string _pdCd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GET_SAR_FOR_HDR(_com, _calCd, _pdCd);
        }


        //Add by Akila 2016/12/20
        public DataTable GetAdvanReceiptSettings(string _CompanyCode, string _profitCenter, string _receiptType, string _subReceiptType, string _itemCategory = null)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            return _salesDAL.GetAdvanReceiptSettings(_CompanyCode, _profitCenter, _receiptType, _subReceiptType, _itemCategory);
        }

        //Lakshan 2016 Dec 21
        public Int32 DeleteSalesForecasting(SalesForecastingHeader _sarHdr, List<SalesForecastingDetail> _sarDet, out string _err)
        {
            int _res = -1;
            Int32 _seqNo = 0;
            _err = "";
            string _errMsg = "";
            _salesDAL = new SalesDAL();
            try
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                foreach (var item in _sarDet)
                {
                    _res = _salesDAL.DeleteSalesForecastingDetail(item);
                }
                if (_res > 0)
                {
                    _errMsg = "";
                    _salesDAL.TransactionCommit();
                    _salesDAL.ConnectionClose();
                }
                _err = _errMsg;
                return _res;
            }
            catch (Exception ex)
            {
                _res = -1;
                _err = ex.Message;
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                return _res;
            }
        }
        //Lakshan 27 Jul 2016
        public DataTable SearchSalesForecastingCalendarWithDate(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SearchSalesForecastingCalendarWithDate(_initialSearchParams, _searchCatergory, _searchText);
        }

        //add by akila
        public DataTable LoadHPSchemasNew(DateTime _date, string _comCode, string _location, string _item, string _priceBook, string _priceBookLevel)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            return _salesDAL.LoadHPSchemasNew(_date, _comCode, _location, _item, _priceBook, _priceBookLevel);
        }

        //Isuru 2017/03/17
        public Int32 SaveBrandMangerDtL(List<mst_brnd_alloc> _managerdetailsList)
        {
            _salesDAL = new SalesDAL();
            Int32 _effect = 0;
            try
            {

                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                foreach (mst_brnd_alloc _list in _managerdetailsList)
                {
                    _effect = _salesDAL.SaveBrandMangerDtL(_list);
                }

                _salesDAL.TransactionCommit();
                _salesDAL.ConnectionClose();

            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _effect = -1;
            }


            return _effect;
        }
        //isuru 2017-03-17
        public List<mst_brnd_alloc> GetBrandManagerDet(string com, DateTime fdate, DateTime tdate)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetBrandManagerDet(com, fdate, tdate);
        }


        //Isuru 2017/03/23
        public Int32 SavePrefixMasterDetails(List<sar_tp> _PrefixList)
        {
            _salesDAL = new SalesDAL();
            Int32 _effect = 0;
            try
            {

                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                foreach (sar_tp _list in _PrefixList)
                {
                    _effect = _salesDAL.SavePrefixMasterDetails(_list);
                }

                _salesDAL.TransactionCommit();
                _salesDAL.ConnectionClose();

            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _effect = -1;
            }


            return _effect;
        }


        //Isuru 2017/03/23
        public Int32 SaveSunLedgerDetails(List<gnr_acc_sun_ledger> _sunledgerlist1)
        {
            _salesDAL = new SalesDAL();
            Int32 _effect = 0;
            try
            {

                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                foreach (gnr_acc_sun_ledger _list in _sunledgerlist1)
                {
                    _effect = _salesDAL.SaveSunLedgerDetails(_list);
                }

                _salesDAL.TransactionCommit();
                _salesDAL.ConnectionClose();

            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _effect = -1;
            }


            return _effect;
        }

        //Isuru 2017/03/27
        public Int32 UpdatePrefixMasterDetails(List<sar_doc_price_defn> _PrefixList1)
        {
            _salesDAL = new SalesDAL();
            Int32 _effect = 0;
            try
            {

                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                foreach (sar_doc_price_defn _list in _PrefixList1)
                {
                    _effect = _salesDAL.UpdatePrefixMasterDetails(_list);
                }

                _salesDAL.TransactionCommit();
                _salesDAL.ConnectionClose();

            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _effect = -1;
            }


            return _effect;
        }

        //isuru 2017-03-27 
        public DataTable CheckPrefixMasterDetails(sar_doc_price_defn _PrefixList1)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.CheckPrefixMasterDetails(_PrefixList1);
        }

        //Udaya 26/04/2017
        public Int32 BOQCanclation(string com, string loc, string boqNo)
        {
            _salesDAL = new SalesDAL();
            Int32 _effect = 0;
            try
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _effect = _salesDAL.BOQCanclation(com, loc, boqNo);
                _salesDAL.TransactionCommit();
                _salesDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _effect = -1;
            }
            return _effect;
        }
        //Udaya 27/04/2017
        public Int32 UpdateBOQsatProHdr(SatProjectHeader _BOQ, List<SatProjectDetails> Cost, out string doc)
        {
            Int32 _effect = 0;
            Int32 seq = 0;
            doc = string.Empty;
            try
            {

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                if (_BOQ != null)
                {

                    seq = _salesDAL.UpdateBOQsatProHdr(_BOQ);
                }
                if (Cost != null)
                {
                    if (Cost.Count > 0)
                    {
                        if (seq > 0)
                        {
                            int macline = Cost.Max(t => t.SPD_LINE);
                            foreach (SatProjectDetails _Items in Cost)
                            {
                                _Items.SPD_SEQ = seq;
                                if (_Items.SPD_LINE == 0)
                                {
                                    _Items.SPD_LINE = macline + 1;
                                    macline++;
                                }
                                _effect = _salesDAL.SaveBOQDetails(_Items);
                            }

                        }
                    }
                }

                _salesDAL.TransactionCommit();
                _salesDAL.ConnectionClose();
                _financialDAL.TransactionCommit();
                _financialDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                doc = ex.Message;
                _effect = -1;
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
            }


            return _effect;
        }
        //Udaya 27/04/2017
        public DataTable SOACancleCheck(string itr_ref)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SOACancleCheck(itr_ref);
        }
        //Dilshan 08/03/2018
        public DataTable SOACancleChecknew(string itr_ref, string invoiceno)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SOACancleChecknew(itr_ref, invoiceno);
        }

        //Isuru 2017/04/28
        public Int32 SavePluCreationDetails(List<mst_busentity_itm> _pludetailslist)
        {
            _salesDAL = new SalesDAL();
            Int32 _effect = 0;
            try
            {

                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                foreach (mst_busentity_itm _list in _pludetailslist)
                {
                    _effect = _salesDAL.SavePluCreationDetails(_list);
                }

                _salesDAL.TransactionCommit();
                _salesDAL.ConnectionClose();

            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _effect = -1;
            }


            return _effect;
        }
        //Add by Lakshan 29Apr2017
        public RecieptItem GET_SAT_RECIEPT_FOR_RETURN_CHK(string itr_ref)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GET_SAT_RECIEPT_FOR_RETURN_CHK(itr_ref);
        }

        //Udaya 29/04/2017
        public Int32 BOQCostDelete(string boqNo, int seqNo, int lineNo, string itemNo)
        {
            _salesDAL = new SalesDAL();
            Int32 _effect = 0;
            try
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _effect = _salesDAL.BOQCostDelete(boqNo, seqNo, lineNo, itemNo);
                _salesDAL.TransactionCommit();
                _salesDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _effect = -1;
            }
            return _effect;
        }

        //isuru 2017/05/02
        public List<mst_busentity_itm> Getcustomerpluupdate(string com, string cuscode, string itmcode)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Getcustomerpluupdate(com, cuscode, itmcode);
        }

        //Isuru 2017/05/02
        public Int32 UpdatePluCreationDetails(List<mst_busentity_itm> _pludetailslist)
        {
            _salesDAL = new SalesDAL();
            Int32 _effect = 0;
            try
            {

                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                foreach (mst_busentity_itm _list in _pludetailslist)
                {
                    _effect = _salesDAL.UpdatePluCreationDetails(_list);
                }

                _salesDAL.TransactionCommit();
                _salesDAL.ConnectionClose();

            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _effect = -1;
            }


            return _effect;
        }
        public SupplierWiseNBT GetSupplierNBT(string _company, string _suppCode)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSupplierNBT(_company, _suppCode);
        }
        //Tharanga 2017/05/08
        public DataTable Get_SVID_VAL(string _p_svid_com, string _p_svid_pty_cd, string _p_svid_ins_tp, DateTime _fromDate)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_SVID_VAL(_p_svid_com, _p_svid_pty_cd, _p_svid_ins_tp, _fromDate);
        }


        //Isuru 2017/05/16
        public DataTable getjobdetailsforjobinvoiceall(string jobnum)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getjobdetailsforjobinvoiceall(jobnum);
        }



        //Isuru 2017/05/19
        public DataTable getmeasuredetails(string _itm)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getmeasuredetails(_itm);
        }

        //isuru 2017/05/19
        public DataTable typedetails(string _invNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.typedetails(_invNo);
        }

        //Tharanga 2017/05/20
        public DataTable GetmaxCount_SCH_ALW_COM(string sch_tp)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetmaxCount_SCH_ALW_COM(sch_tp);
        }


        //Tharanga 2017/05/20
        public Int32 Save_SCH_ALW_COM(List<SchemetypeCom> _SchemetypeCom)
        {
            _salesDAL = new SalesDAL();
            Int32 _effect = 0;
            try
            {

                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                foreach (SchemetypeCom _list in _SchemetypeCom)
                {
                    _effect = _salesDAL.Save_SCH_ALW_COM(_list);
                }

                _salesDAL.TransactionCommit();
                _salesDAL.ConnectionClose();

            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _effect = -1;
            }


            return _effect;
        }
        //Tharanga 2017/05/22
        public DataTable Get_SCH_ALW_COM(string sch_tp)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_SCH_ALW_COM(sch_tp);
        }
        //tharanga 2017/05/22
        public Int32 update_SCH_ALW_COM(List<SchemetypeCom> _SchemetypeCom)
        {
            _salesDAL = new SalesDAL();
            Int32 _effect = 0;
            try
            {

                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                foreach (SchemetypeCom _list in _SchemetypeCom)
                {
                    _effect = _salesDAL.update_SCH_ALW_COM(_list);
                }

                _salesDAL.TransactionCommit();
                _salesDAL.ConnectionClose();

            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _effect = -1;
            }


            return _effect;
        }


        //Tharanga 2017?may/25
        public DataTable GetSchemes_alw_com(string _type, string _code, string _com)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchemes_alw_com(_type, _code, _com);
        }
        //Tharanga 


        public List<HpSchemeType> GetSchemeTypeByCat_com(string _cat, string _com)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchemeTypeByCat_com(_cat, _com);
        }

        //ISuru 2017/05/30

        public DataTable getcompanyforpanalty(string com)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getcompanyforpanalty(com);
        }

        //Dilshan 2017/09/18
        public DataTable getsaleswithserial(string selectedcompany, string Channel, string Brand, string txtModel, string txtItem, DateTime fromdate, DateTime todate, string Category, string type, string pc, string itemcode, string txtCircular, string txtSchemeType, string txtSchemeCode, string txtPriceBook, string txtPriceLevel, string txtInvoiceType, string txtCustomer, string txtExecutive, string allreversal, string allfissue, string allicom)
        {
            //_salesDAL = new SalesDAL();
            //return _salesDAL.getsaleswithserial(selectedcompany, Channel, Brand, txtModel, txtItem, fromdate, todate, Category, type, pc, itemcode, txtCircular, txtSchemeType, txtSchemeCode, txtPriceBook, txtPriceLevel, txtInvoiceType, txtCustomer, txtExecutive, allreversal, allfissue, allicom);

            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("getsaleswithserial") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.getsaleswithserial(selectedcompany, Channel, Brand, txtModel, txtItem, fromdate, todate, Category, type, pc, itemcode, txtCircular, txtSchemeType, txtSchemeCode, txtPriceBook, txtPriceLevel, txtInvoiceType, txtCustomer, txtExecutive, allreversal, allfissue, allicom);
        }

        //Dilshan 2017/09/18
        public DataTable getsaleswithpayment(string selectedcompany, string Channel, string Brand, string txtModel, string txtItem, DateTime fromdate, DateTime todate, string Category, string type, string pc, string itemcode, string txtCircular, string txtSchemeType, string txtSchemeCode, string txtPriceBook, string txtPriceLevel, string txtInvoiceType, string txtCustomer, string txtExecutive, string allreversal, string allfissue, string allicom)
        {
            //_salesDAL = new SalesDAL();
            //return _salesDAL.getsaleswithpayment(selectedcompany, Channel, Brand, txtModel, txtItem, fromdate, todate, Category, type, pc, itemcode, txtCircular, txtSchemeType, txtSchemeCode, txtPriceBook, txtPriceLevel, txtInvoiceType, txtCustomer, txtExecutive, allreversal, allfissue, allicom);

            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("getsaleswithpayment") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.getsaleswithpayment(selectedcompany, Channel, Brand, txtModel, txtItem, fromdate, todate, Category, type, pc, itemcode, txtCircular, txtSchemeType, txtSchemeCode, txtPriceBook, txtPriceLevel, txtInvoiceType, txtCustomer, txtExecutive, allreversal, allfissue, allicom);
        }

        //Tharanga 2017/06/07
        public DataTable get_sar_provou_tp(string com, string invNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.get_sar_provou_tp(com, invNo);
        }

        //add by akila 2017/06/29
        private decimal RoundSalesValue(decimal _value, string _company)
        {
            //GeneralBLL _generalBal = new GeneralBLL();
            //bool _isValueNeedToRound = _generalBal.IsSaleFigureRoundUp(_company);
            //if (_isValueNeedToRound) { _value = Math.Round(_value); }

            //double multiplier = Math.Pow(10, Convert.ToDouble(2));
            //return Math.Ceiling(_value * Convert.ToDecimal(multiplier)) / Convert.ToDecimal(multiplier);

            return _value;
        }
        public DataTable executive_Sales_Target(string ProfitCenter, DateTime FromDate, DateTime ToDate, string circularCode, string Epf)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.executive_Sales_Target(ProfitCenter, FromDate, ToDate, circularCode, Epf);
        }
        //tharanga 2017/24
        public Int32 SaveMyAbansDetailsNew(MyAbans _myab, LoyaltyMemeber _loyal, Boolean _isExist, string _Ser_no)
        {
            Int32 effect = 0;
            Int32 _eff = 0;
            Int32 _eft = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();

                if (_isExist == false)
                {
                    MasterAutoNumber _auto = new MasterAutoNumber();
                    _auto.Aut_moduleid = "CUS";
                    _auto.Aut_number = 0;
                    _auto.Aut_start_char = "CONT";

                    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_auto.Aut_moduleid, _auto.Aut_direction, _auto.Aut_start_char, _auto.Aut_cate_tp, _auto.Aut_cate_cd, _auto.Aut_modify_dt, _auto.Aut_year);
                    string _cusNo = _auto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(_auto);
                    //_businessEntity.Mbe_cd = _cusNo;
                    //   _groupCus.Mbg_cd = _cusNo;
                    string customerCD = _cusNo;

                    //effect = _salesDAL.SaveBusinessEntityDetailGroup(_groupCus);
                    // effect = _salesDAL.SaveBusinessEntityDetail(_businessEntity);
                }
                else
                {
                    // effect = _salesDAL.SaveBusinessEntityDetailGroup(_groupCus);
                    // effect = _salesDAL.UpdateBusinessEntityProfile(_businessEntity, 1);
                }

                //kapila 26/7/2016
                MasterAutoNumber _auto1 = new MasterAutoNumber();
                _auto1.Aut_moduleid = "MYAB";
                _auto1.Aut_number = 0;
                _auto1.Aut_start_char = "MYAB";

                MasterAutoNumber _number1 = _inventoryDAL.GetAutoNumber(_auto1.Aut_moduleid, _auto1.Aut_direction, _auto1.Aut_start_char, _auto1.Aut_cate_tp, _auto1.Aut_cate_cd, _auto1.Aut_modify_dt, _auto1.Aut_year);
                string _cardSer = _number1.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_auto1);

                //   string _cd_no = _number1.Aut_number.ToString();
                //  _cd_no = Convert.ToInt32(_cd_no).ToString("000000", CultureInfo.InvariantCulture);

                //string _cardSerNew = _cardSer.Substring(0, 3) + " " + _cardSer.Substring(3, 3) + " " + _cd_no;
                string _cardSerNew = "000 000 " + _cardSer;

                _loyal.Salcm_cd_ser = _Ser_no;

                _myab.Myab_ser_no = _Ser_no;     //kapila 14/12/2016
                effect = _salesDAL.SaveMyAbansDetails(_myab);


                _loyal.Salcm_no = _Ser_no;    //kapila 14/12/2016
                _eff = _salesDAL.SaveLoyaltyMembership(_loyal);

                //Tharindu 2017-12-18
                //_eft = _salesDAL.UpdateLoyalityStatus("MYAB", _Ser_no, _loyal.Salcm_cre_by);

                _salesDAL.TransactionCommit();

                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _salesDAL.TransactionRollback();
            }
            return effect;
        }

        //tharanga 2017/08/09
        public List<PriceSerialRef> GetEnquirySerialDetailwithLoc(string _profitcenter, int _startFrom, int _endFrom, string _user, string _company, string _priceBook, string _priceLevel, string _customer, string _item, string _category1,

           string _category2, string _category3, string _status, string _pricetype, string _circular, DateTime _fromDate, DateTime _toDate, bool _isHistory, bool _isAsAtHistory,

           bool _isAllStatus, bool _isSuperUser, string _loc)
        {
            _salesDAL = new SalesDAL();

            List<PriceSerialRef> _priceDetailRef = new List<PriceSerialRef>();
            List<PriceSerialRef> _temppriceDetailRef = new List<PriceSerialRef>();
            List<PriceSerialRef> _returnlist = new List<PriceSerialRef>();
            DataTable _dtChnl = new DataTable();

            _temppriceDetailRef = _salesDAL.GetEnquirySerialDetailwithLoc(_profitcenter, _startFrom, _endFrom, _user, _company, _priceBook, _priceLevel, _item, _fromDate, _toDate, _customer, _category1, _category2, _category3, _pricetype, _circular, _isHistory ? 1 : 0, _isAsAtHistory ? 1 : 0, _isSuperUser ? 1 : 0, _loc);
            if (_isAllStatus == false)
                _priceDetailRef.AddRange(_temppriceDetailRef.Where(x => x.Sapl_itm_stuts == _status).ToList());
            else
                _priceDetailRef.AddRange(_temppriceDetailRef);

            List<PriceSerialRef> _lists = new List<PriceSerialRef>();

            if (_priceDetailRef != null)
                if (_priceDetailRef.Count > 0)
                    //If request not a history
                    if (_isHistory == false && _isAsAtHistory == false)
                    {
                        var _temp1 = (from _l in _priceDetailRef
                                      group _l by new { _l.Sars_pbook, _l.Sars_price_lvl, _l.Sars_itm_cd, _l.Sars_price_type, _l.Sadd_pc, _l.Sapl_itm_stuts, _l.Sars_val_frm, _l.Sars_val_to, _l.Sars_ser_no, _l.Sadd_loc } into itm
                                      select new { Sars_pbook = itm.Key.Sars_pbook, Sars_price_lvl = itm.Key.Sars_price_lvl, Sars_itm_cd = itm.Key.Sars_itm_cd, Sars_price_type = itm.Key.Sars_price_type, Sadd_pc = itm.Key.Sadd_pc, Sapl_itm_stuts = itm.Key.Sapl_itm_stuts, Sars_val_frm = itm.Key.Sars_val_frm, Sars_val_to = itm.Key.Sars_val_to, Sapd_ser_upload = itm.Sum(p => p.Sarpt_indi), Sars_ser = itm.Key.Sars_ser_no, Sadd_loc = itm.Key.Sadd_loc }).ToList();

                        if (_temp1 != null)
                            if (_temp1.Count > 0)
                            {
                                foreach (var _ls in _temp1)
                                {

                                    string _book = _ls.Sars_pbook;
                                    string _level = _ls.Sars_price_lvl;
                                    string _itm = _ls.Sars_itm_cd;
                                    int _type = _ls.Sars_price_type;
                                    string _pc = _ls.Sadd_pc;
                                    string _ser = _ls.Sars_ser;

                                    var _lst = _priceDetailRef.Where(x => x.Sars_price_type == _type && x.Sars_pbook == _book && x.Sars_price_lvl == _level && x.Sars_itm_cd == _itm && x.Sadd_pc == _pc && x.Sars_ser_no == _ser).ToList();
                                    _lists.AddRange(_lst);
                                    //if (_type != 0)
                                    //{
                                    //    if (_lst != null)
                                    //        if (_lst.Count > 0)
                                    //            _lists.AddRange(_lst);
                                    //}
                                    //else
                                    //{
                                    //    if (_lst != null)
                                    //        if (_lst.Count > 0)
                                    //            _lists.Add(_lst[0]);
                                    //}
                                }


                                //if (_isSuperUser == false)
                                //{
                                var _promo = _lists.Where(x => x.Sars_price_type != 0).ToList();
                                var _normal = _lists.Where(x => x.Sars_price_type == 0).ToList();

                                if (_promo != null)
                                    if (_promo.Count > 0)
                                        foreach (PriceSerialRef i in _promo)
                                        {
                                            List<PriceProfitCenterPromotion> _lst = new List<PriceProfitCenterPromotion>();
                                            _lst = _salesDAL.CheckPromotion(_company, _profitcenter, i.Sars_promo_cd, i.Sars_pb_seq, "PC");
                                            if (_lst != null)
                                            {
                                                if (_lst.Count > 0)
                                                    _returnlist.Add(i);
                                            }
                                            else
                                            {
                                                _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitcenter, "SCHNL");
                                                _lst = _salesDAL.CheckPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), i.Sars_promo_cd, i.Sars_pb_seq, "SCHNL");
                                                if (_lst != null)
                                                {
                                                    if (_lst.Count > 0)
                                                        _returnlist.Add(i);
                                                }
                                                else
                                                {
                                                    _dtChnl = _salesDAL.GetChanelOnPC(_company, _profitcenter, "CHNL");
                                                    _lst = _salesDAL.CheckPromotion(_company, _dtChnl.Rows[0]["MPI_VAL"].ToString(), i.Sars_promo_cd, i.Sars_pb_seq, "CHNL");
                                                    if (_lst != null)
                                                    {
                                                        if (_lst.Count > 0)
                                                            _returnlist.Add(i);
                                                    }
                                                }
                                            }
                                        }
                                if (_normal != null)
                                    if (_normal.Count > 0) _returnlist.AddRange(_normal);
                                //}
                                //else
                                //{
                                //    _returnlist.AddRange(_lists);
                                //}
                            }
                    }
                    //If request a history
                    else
                    {
                        _returnlist.AddRange(_priceDetailRef);
                    }

            return _returnlist;

        }

        //Add by Lakshan 20 Aug 2017
        public List<SatProjectDetails> GET_SAT_PRO_DET_DATA(SatProjectDetails _obj)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_SAT_PRO_DET_DATA(_obj);
        }


        // add by tharanga 2017/08/29
        public DataTable getrootDesc(string _Com, string _route)
        {

            _salesDAL = new SalesDAL();
            return _salesDAL.getrootDesc(_Com, _route);
        }
        // add by tharanga 2017/08/30
        public List<InvoiceItem> Getref_doc_items(string _invoice)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Getref_doc_items(_invoice);
        }
        //Added By Udaya 07.09.2017
        public Int32 SupplierNBTDetails(SupplierWiseNBT _NBTDetails)
        {
            _salesDAL = new SalesDAL();
            Int32 _effect = 0;
            try
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _effect = _salesDAL.SupplierNBT(_NBTDetails);
                _salesDAL.TransactionCommit();
                _salesDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _effect = -1;
            }
            return _effect;
        }
        //Add by lakshan 07SEp2017
        public Int32 CancelReservationDocument(List<INR_RES_LOG> inr_res_log, out string _err)
        {
            _err = "";
            Int32 seqNo = 0;
            Int32 result = 0;
            string documentNo = null;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                InventoryBLL _BL = new InventoryBLL();

                foreach (INR_RES_LOG log in inr_res_log)
                {

                    seqNo = _salesDAL.CancelINR_RES_LOG(log, log.IRL_RES_BQTY, log.Temp_IRL_MOD_BY, log.IRL_MOD_DT);
                    //log.IRL_LINE = maxlineno + 1;

                    if (seqNo > 0)
                    {
                        INR_RES_LOG newreslog = new INR_RES_LOG();
                        newreslog.IRL_RES_NO = log.IRL_RES_NO;
                        newreslog.IRL_CURT_COM = log.IRL_CURT_COM;
                        newreslog.IRL_CURT_LOC = log.IRL_CURT_LOC;
                        newreslog.IRL_CURT_DOC_DT = log.IRL_CURT_DOC_DT;
                        newreslog.IRL_CURT_DOC_TP = "CANCL";
                        newreslog.IRL_CURT_DOC_NO = "";
                        newreslog.IRL_ITM_CD = log.IRL_ITM_CD;
                        newreslog.IRL_ITM_STUS = log.IRL_ITM_STUS;
                        newreslog.IRL_RES_QTY = log.IRL_CAN_QTY;
                        newreslog.IRL_RES_IQTY = log.IRL_CAN_QTY;
                        // newreslog.IRL_RES_BQTY = log.IRL_RES_BQTY - log.IRL_CAN_QTY;
                        newreslog.IRL_RES_BQTY = 0;
                        newreslog.TMP_IRL_RES_BQTY = log.TMP_IRL_RES_BQTY - log.IRL_CAN_QTY;
                        newreslog.IRL_ACT = 0;
                        newreslog.IRL_MOD_BY_NEW = log.IRL_MOD_BY_NEW;
                        newreslog.IRL_MOD_DT = log.IRL_MOD_DT;
                        newreslog.IRL_MOD_SESSION = log.IRL_MOD_SESSION;

                        newreslog.IRL_ORIG_COM = log.IRL_CURT_COM;
                        newreslog.IRL_ORIG_LOC = log.IRL_CURT_LOC;
                        newreslog.IRL_ORIG_DOC_DT = log.IRL_ORIG_DOC_DT;
                        newreslog.IRL_ORIG_DOC_NO = log.IRL_ORIG_DOC_NO;
                        newreslog.IRL_ORIG_BATCH_LINE = log.IRL_ORIG_BATCH_LINE;
                        newreslog.IRL_ORIG_ITM_LINE = log.IRL_ORIG_ITM_LINE;
                        newreslog.IRL_ORIG_DOC_TP = log.IRL_ORIG_DOC_TP;

                        newreslog.IRL_SEQ = log.IRL_SEQ;
                        newreslog.IRL_LINE = 0;
                        newreslog.IRL_RES_LINE = log.IRL_RES_LINE;
                        newreslog.IRL_CRE_BY = log.Temp_IRL_MOD_BY;
                        newreslog.IRL_CRE_DT = log.IRL_MOD_DT;
                        newreslog.IRL_CRE_SESSION = log.IRL_CRE_SESSION;
                        newreslog.IRL_RES_WP = 0;

                        seqNo = _inventoryDAL.SaveInrResLogDataCancel(newreslog);
                    }

                    if (seqNo <= 0)
                    {
                        return -1;
                    }
                    //maxlineno = log.IRL_LINE;
                }
                _financialDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                result = 1;
            }
            catch (Exception ex)
            {
                result = -1;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();

                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
            }

            return result;
        }

        public DataTable getinvshed_item(string _Com, string _loc, string _inv)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getinvshed_item(_Com, _loc, _inv);
        }

        //add by tharanga 2017/10/02
        public Int32 CreateRefundNEW(RecieptHeader _refundHdr, List<RecieptItem> _refundItm, MasterAutoNumber _receiptAuto, List<ReceiptItemDetails> _resItmDet, RemitanceSummaryDetail _remsumdet, out string _refNo)
        {
            Int32 _effect = 0;
            string _refundNo = "";
            Int32 _refundSeq = 0;
            string _invNo = "";
            string _cusNo = "";
            int X = 0;

            // using (TransactionScope _tr = new TransactionScope())
            try
            {
                _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen(); _salesDAL.BeginTransaction();
                _inventoryDAL = new InventoryDAL(); _inventoryDAL.ConnectionOpen(); _inventoryDAL.BeginTransaction();
                _inventoryRepDAL = new ReptCommonDAL(); _inventoryRepDAL.ConnectionOpen(); _inventoryRepDAL.BeginTransaction();
                _financialDAL = new FinancialDAL(); _financialDAL.ConnectionOpen(); _financialDAL.BeginTransaction();
                _generalDAL = new GeneralDAL(); _generalDAL.ConnectionOpen(); _generalDAL.BeginTransaction();

                MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_receiptAuto.Aut_moduleid, _receiptAuto.Aut_direction, _receiptAuto.Aut_start_char, _receiptAuto.Aut_cate_tp, _receiptAuto.Aut_cate_cd, _receiptAuto.Aut_modify_dt, _receiptAuto.Aut_year);
                // _receiptAuto.Aut_cate_cd + "-" + _receiptAuto.Aut_start_char + "-" + _number.Aut_number.ToString("000000", CultureInfo.InvariantCulture);
                _cusNo = _receiptAuto.Aut_cate_cd + _receiptAuto.Aut_start_char + string.Format("{0:0000}", _number.Aut_number);
                _inventoryDAL.UpdateAutoNumber(_receiptAuto);//update MST_AUTO table

                //_inventoryDAL.UpdateAutoNumber(_receiptAuto);//update MST_AUTO table
                _refundHdr.Sar_ref_doc = _refundHdr.Sar_receipt_no;
                _refundHdr.Sar_receipt_no = _cusNo;

                Int32 RecieptSeqNo = 0;
                RecieptSeqNo = _inventoryDAL.GetSerialID();

                _refundHdr.Sar_seq_no = RecieptSeqNo;

                _effect = _salesDAL.SaveReceiptHeader(_refundHdr);//save receipt header

                foreach (RecieptItem _itm in _refundItm)
                {
                    _itm.Sard_seq_no = RecieptSeqNo;
                    _itm.Sard_receipt_no = _refundHdr.Sar_receipt_no;
                    _salesDAL.SaveReceiptItem(_itm);
                }

                if (_resItmDet != null)
                {
                    List<ReceiptItemDetails> _advRecItm = new List<ReceiptItemDetails>();
                    _advRecItm = _salesDAL.GetAdvanReceiptItems(_refundHdr.Sar_ref_doc);
                    //{ 

                    //}
                    //List<ReptPickSerials> _ser = _inventoryRepDAL.GetInvoiceAdvanceReceiptSerial(_refundHdr.Sar_com_cd, _refundHdr.Sar_ref_doc);
                    DataTable _availableser;
                    //if (_ser != null && _ser.Count > 0)
                    if (_advRecItm != null && _advRecItm.Count > 0)
                    {
                        //foreach (ReptPickSerials _s in _ser)
                        //{
                        foreach (ReceiptItemDetails _s in _advRecItm)
                        {
                            _availableser = null;
                            //_availableser = _inventoryDAL.check_IsItemAvailable(_s.Tus_itm_cd, _s.Tus_ser_1);
                            if (!String.IsNullOrEmpty(_s.Sari_serial))
                            {
                                _availableser = _inventoryDAL.check_IsItemAvailable(_s.Sari_item, _s.Sari_serial);
                            }


                            //DataTable dtrev = _inventoryDAL.GetItemInventoryBalanceStatus_RESNew(_s.Tus_com, _s.Tus_loc, _s.Tus_itm_cd, _s.Tus_itm_stus);
                            DataTable dtrev = _inventoryDAL.GetItemInventoryBalanceStatus_RESNew(_refundHdr.Sar_com_cd, _refundHdr.Sar_loc, _s.Sari_item, _s.Sari_sts);
                            if (dtrev.Rows.Count > 0)
                            {
                                //_inventoryDAL.UpdateLocationResRevers(_s.Tus_com, _s.Tus_loc, _s.Tus_itm_cd, _s.Tus_itm_stus, _s.Tus_cre_by, _s.Tus_qty);
                                _inventoryDAL.UpdateLocationResRevers(_refundHdr.Sar_com_cd, _refundHdr.Sar_loc, _s.Sari_item, _s.Sari_sts, _refundHdr.Sar_create_by, _s.Sari_qty);
                                if (_availableser != null)
                                {

                                    if (_availableser.Rows.Count == 0)
                                    //if (_availableser.Rows.Count == 0)
                                    {
                                        //_inventoryDAL.UpdateLocationResRevers(_s.Tus_com, _s.Tus_loc, _s.Tus_itm_cd, _s.Tus_itm_stus, _s.Tus_cre_by, _s.Tus_qty);
                                        //_inventoryDAL.UpdateSerialAvailability(_s.Tus_com, _s.Tus_loc, _s.Tus_itm_cd, _s.Tus_ser_1); // tharanga 2017/09/30
                                        _inventoryDAL.UpdateSerialAvailability(_refundHdr.Sar_com_cd, _refundHdr.Sar_loc, _s.Sari_item, _s.Sari_serial); // tharanga 2017/09/30

                                        foreach (ReceiptItemDetails res in _resItmDet)
                                        {
                                            int a = _inventoryRepDAL.DeleteResSerial(res.Sari_rec_no, _refundHdr.Sar_com_cd, res.Sari_item, res.Sari_serial, res.Sari_serial_1);
                                            //_salesDAL.UpdateRegResAvailability(_refundHdr.Sar_com_cd, res.Sari_item, res.Sari_serial, res.Sari_serial_1, 1);
                                            _invNo = res.Sari_rec_no;

                                            List<ReptPickSerials> tempSer = new List<ReptPickSerials>();
                                            tempSer = _inventoryRepDAL.Get_TEMP_PICK_SER_BY_BASEDOC(_refundHdr.Sar_com_cd, _invNo);

                                            if (tempSer == null)
                                            {
                                                _inventoryRepDAL.DeleteResHdr(_refundHdr.Sar_com_cd, _invNo);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                if (_remsumdet != null)
                    X = _financialDAL.SaveRemSummaryDetails(_remsumdet);

                _effect = _salesDAL.UpdateRefundDetails(_refundHdr.Sar_tot_settle_amt, _refundHdr.Sar_receipt_no, _refundHdr.Sar_ref_doc, _refundHdr.Sar_com_cd, _refundHdr.Sar_profit_center_cd);

                if (_refundHdr.Sar_receipt_type == "INSRF")
                {
                    List<VehicleInsuarance> _insuDet = _generalDAL.GetVehicalInsurance(_refundHdr.Sar_ref_doc, null);
                    if (_insuDet.Count > 0)
                    {
                        foreach (VehicleInsuarance _tmp in _insuDet)
                        {
                            _salesDAL.UpdateInsTxnCan(_tmp.Svit_com, _tmp.Svit_pc, _tmp.Svit_inv_no, _tmp.Svit_ref_no, _tmp.Svit_itm_cd, _tmp.Svit_engine, _tmp.Svit_chassis, 2);
                            if (!string.IsNullOrEmpty(_tmp.Svit_engine) && _tmp.Svit_engine != "N/A")
                            {
                                _salesDAL.UpdateAddWarr(_tmp.Svit_itm_cd, _tmp.Svit_engine, 0, null, _refundHdr.Sar_receipt_date, _refundHdr.Sar_receipt_no);
                            }
                        }
                    }

                }
                if (_refundHdr.Sar_receipt_type == "ADREF")
                {
                    foreach (ReceiptItemDetails res in _resItmDet)
                    {// Nadeeka 11-11-2015
                        _inventoryRepDAL.UpdateitemAllocation(res.Sari_item, 1, 0);
                    }
                }


                //_salesDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                //_inventoryRepDAL.ConnectionClose();
                _salesDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();
                _financialDAL.TransactionCommit();
                _generalDAL.TransactionCommit();
                _effect = 1;

            }
            catch (Exception err)
            {
                _effect = -1;
                _refNo = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _financialDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
            }
            _refNo = _cusNo;
            return _effect;
        }

        public DataTable Bank_Reconciliation_Summery_Rpt(DateTime _Asatdate, string _accountNo) // Added by Chathura on 20-oct-2017
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("Bank_Reconciliation_Summery_Rpt") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.Bank_Reconciliation_Summery_Rpt(_Asatdate, _accountNo);
        }
        public DataTable RealizationStatusReport(string _reportType, string _accountNo, DateTime _fromDate, DateTime _toDate, string _profitCenter) // Added by Chathura on 20-oct-2017
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("RealizationStatusReport") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.RealizationStatusReport(_reportType, _accountNo, _fromDate, _toDate, _profitCenter);
        }
        public DataTable RemitanceControlReconReport(string _pc, string _com, DateTime _asatdate, int _isasat, DateTime _fromdate, DateTime _todate, string _user) // Added by Chathura on 20-oct-2017
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("RemitanceControlReconReport") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.RemitanceControlReconReport(_pc, _com, _asatdate, _isasat, _fromdate, _todate, _user);
        }
        //Add by lakshan 25Oct2017
        public Int32 SaveReservationApprovalAll(INR_RES _inrRes, MasterAutoNumber mastAutoNo, out string msg, out string finaldoc)
        {
            Int32 seqNo = 0;
            Int32 _resHdrSave = 0;
            Int32 _resDetSave = 0;
            Int32 _resLogSave = 0;
            Int32 _inrLocSave = 0;
            Int32 result = 0;
            string documentNo = "";
            finaldoc = "";
            string reqno = "";
            msg = "";

            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                _CustServiceDAL = new CustServiceDAL();
                _CustServiceDAL.ConnectionOpen();
                _CustServiceDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                decimal finaltoaappQty = 0;
                finaltoaappQty = Convert.ToDecimal(_inrRes.Inr_res_det.Sum(z => z.IRD_RES_QTY));
                //var _scanItems = inr_res_det.GroupBy(x => new { x.BL_NO, x.IRD_ITM_CD, x.LOC_CD }).Select(group => new { Peo = group.Key, theCount = group.Count() }).ToList();
                var _scanItems = _inrRes.Inr_res_det.GroupBy(x => new { x.BL_NO, x.LOC_CD }).Select(group => new { Peo = group.Key, theCount = group.Count() }).ToList();
                foreach (var itm in _scanItems)
                {
                    Int32 autoNo = _financialDAL.GetAutoNumber(mastAutoNo.Aut_moduleid, mastAutoNo.Aut_direction, mastAutoNo.Aut_start_char, mastAutoNo.Aut_cate_tp, mastAutoNo.Aut_cate_cd, mastAutoNo.Aut_modify_dt, mastAutoNo.Aut_year).Aut_number;
                    documentNo = mastAutoNo.Aut_cate_cd + "-" + mastAutoNo.Aut_moduleid + "-" + mastAutoNo.Aut_year + "-" + autoNo.ToString("00000", CultureInfo.InvariantCulture);

                    if (string.IsNullOrEmpty(documentNo))
                    {
                        msg = "Request DocumentNo Empty";
                        _CustServiceDAL.TransactionRollback();
                        _financialDAL.TransactionRollback();
                        _salesDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        return -1;
                    }

                    int effect = -1;
                    effect = _financialDAL.UpdateAutoNumber(mastAutoNo);
                    //effect = _salesDAL.UpdateAutoNumber(mastAutoNo);

                    if (effect < 0)
                    {
                        msg = "autoNo Update fail.";
                        _CustServiceDAL.TransactionRollback();
                        _financialDAL.TransactionRollback();
                        _salesDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        return -1;
                    }
                    _inrRes.IRS_ANAL_2 = itm.Peo.LOC_CD;
                    _inrRes.IRS_RES_NO = documentNo;
                    //inr_res.IRS_SEQ = Convert.ToInt32(autoNo.ToString("00000", CultureInfo.InvariantCulture));

                    seqNo = _salesDAL.SaveINR_RES(_inrRes);

                    if (seqNo < 0)
                    {
                        msg = "Reservation log data not updated correctly!";
                        _CustServiceDAL.TransactionRollback();
                        _financialDAL.TransactionRollback();
                        _salesDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        return -1;
                    }
                    else
                    {
                        _resHdrSave = 1;
                    }
                    List<INR_RES_DET> _resdet = new List<INR_RES_DET>();
                    _resdet = _inrRes.Inr_res_det.Where(x => x.BL_NO == itm.Peo.BL_NO && x.LOC_CD == itm.Peo.LOC_CD).ToList();

                    foreach (INR_RES_DET itm_d in _resdet)
                    {
                        _resDetSave = 0;
                        itm_d.IRD_SEQ = seqNo;
                        reqno = itm_d.IRD_RESREQ_NO;
                        result = _salesDAL.SaveINR_RES_DET(itm_d);
                        if (result <= 0)
                        {
                            msg = "Reservation detail not updated correctly!";
                            _CustServiceDAL.TransactionRollback();
                            _financialDAL.TransactionRollback();
                            _salesDAL.TransactionRollback();
                            _inventoryDAL.TransactionRollback();
                            return -1;
                        }
                        else
                        {
                            _resDetSave = 1;
                        }
                    }

                    List<INR_RES_LOG> _reslog = new List<INR_RES_LOG>();
                    _reslog = _inrRes.Inr_res_log.Where(x => x.BL_NO == itm.Peo.BL_NO && x.LOC_CD == itm.Peo.LOC_CD).ToList();

                    foreach (INR_RES_LOG log in _reslog)
                    {
                        log.IRL_SEQ = seqNo;
                        log.IRL_RES_NO = documentNo;
                        log.IRL_CURT_DOC_TP = log.IRL_ORIG_DOC_TP;
                        log.IRL_CURT_DOC_NO = documentNo;
                        log.IRL_CURT_DOC_DT = log.IRL_ORIG_DOC_DT;
                        log.IRL_ORIG_DOC_NO = documentNo;
                        log.IRL_CURT_LOC = itm.Peo.LOC_CD;
                        log.IRL_RES_WP = 0;
                        //if ((log.BL_NO == itm.Peo.BL_NO) && (log.IRL_ITM_CD == itm.Peo.IRD_ITM_CD))
                        #region
                        //log.IRL_SEQ = seqNo;
                        //log.IRL_RES_NO = documentNo;
                        result = _salesDAL.SaveINR_RES_LOG(log);
                        if (result <= 0)
                        {
                            msg = "Reservation data not updated correctly!";
                            _CustServiceDAL.TransactionRollback();
                            _financialDAL.TransactionRollback();
                            _salesDAL.TransactionRollback();
                            _inventoryDAL.TransactionRollback();
                            return -1;
                        }
                        else
                        {
                            _resLogSave = 1;
                        }
                        result = _inventoryDAL.UpdateLocationRes(_inrRes.IRS_COM, log.IRL_ORIG_LOC, log.IRL_ITM_CD, log.IRL_ITM_STUS, log.IRL_CRE_BY, log.IRL_RES_BQTY);
                        if (result <= 0)
                        {
                            msg = "Inventory balance not updated correctly!";
                            _CustServiceDAL.TransactionRollback();
                            _financialDAL.TransactionRollback();
                            _salesDAL.TransactionRollback();
                            _inventoryDAL.TransactionRollback();
                            return -1;
                        }
                        else
                        {
                            _inrLocSave = 1;
                        }
                        #endregion

                    }
                    result = _CustServiceDAL.Update_ReqHeaderStatus("F", _inrRes.IRS_CRE_BY, _inrRes.IRS_COM, reqno);
                    finaldoc = string.IsNullOrEmpty(finaldoc) ? documentNo : finaldoc + "|" + documentNo;
                }
                if (_resHdrSave == 1 && _resDetSave == 1 && _resLogSave == 1 && _inrLocSave == 1)
                {
                    _CustServiceDAL.TransactionCommit();
                    _financialDAL.TransactionCommit();
                    _salesDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();
                }
                else
                {
                    _CustServiceDAL.TransactionRollback();
                    _financialDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                    _salesDAL.TransactionRollback();

                    _CustServiceDAL.ConnectionClose();
                    _financialDAL.ConnectionClose();
                    _inventoryDAL.ConnectionClose();
                    _salesDAL.ConnectionClose();
                    if (_resHdrSave == 0)
                    {
                        msg = "Reservation data not updated correctly!";
                    }
                    else if (_resDetSave == 0)
                    {
                        msg = "Reservation detail not updated correctly!";
                    }
                    else if (_resLogSave == 0)
                    {
                        msg = "Reservation log data not updated correctly!";
                    }
                    else if (_inrLocSave == 0)
                    {
                        msg = "Inventory balance not updated correctly!";
                    }
                    return -1;
                }

            }
            catch (Exception ex)
            {
                result = -1;
                msg = ex.Message;
                _CustServiceDAL.TransactionRollback();
                _financialDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();

                _CustServiceDAL.ConnectionClose();
                _financialDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _salesDAL.ConnectionClose();
            }
            return result;
        }


        //Akila 2017/010/11
        public Int16 SaveCctTransLog(CctTransLog _transLog, ref string _error)
        {
            _salesDAL = new SalesDAL();
            Int16 _affected = 0;
            _error = string.Empty;

            try
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _affected = _salesDAL.SaveCctTransLog(_transLog);
                if (_affected < 1)
                {
                    _error = "Couldn't save credit card transaction details !";
                }
                _salesDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _affected = -1;
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _error = ex.Message;
            }
            return _affected;
        }

        public Int16 UpdateCctTransLog(CctTransLog _transLog, ref string _error)
        {
            _salesDAL = new SalesDAL();
            Int16 _affected = 0;
            _error = string.Empty;

            try
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _affected = _salesDAL.UpdateCctTransLog(_transLog);
                if (_affected < 1)
                {
                    _error = "Couldn't update credit card transaction details !";
                }
                _salesDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _affected = -1;
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _error = ex.Message;
            }
            return _affected;
        }

        //Akila 2017/10/26
        public DataTable GetCustomerAllowInvoiceTypeNew(string _company, string _customer)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCustomerAllowInvoiceTypeNew(_company, _customer);

        }

        //Akila 2017/10/26
        public DataTable GetCustomerInvoiceBalance(string _comCode, string _custCode, string _invType)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCustomerInvoiceBalance(_comCode, _custCode, _invType);
        }
        //add by tharanga 2017/11/07    
        public List<ReceiptItemDetails> ReceiptItemDetailsNew(string _code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.ReceiptItemDetailsNew(_code);
        }
        public DataTable processMovementSubtypeReport(string compString, int hasMultiComp, string docType, string docSubType, DateTime fromDate, DateTime toDate, string userName) // Added by Chathura on 09-nov-2017
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("Movement_Subtype_Wise_Summary") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.processMovementSubtypeReport(compString, hasMultiComp, docType, docSubType, fromDate, toDate, userName);
        }

        //nuwan 2017.11.10
        public Int32 getExpireNumberofDateConf(string location, string com, out string error)
        {
            error = string.Empty;
            Int32 num = -1;
            try
            {
                _salesDAL = new SalesDAL();
                DataTable data = _salesDAL.getExpireNumberofDateConf(location, com);
                if (data.Rows.Count > 0)
                {
                    if (data.Rows[0]["MSP_REST_VAL"] != DBNull.Value)
                    {
                        if (data.Rows[0]["MSP_REST_VAL"].ToString() != "" || data.Rows[0]["MSP_REST_VAL"].ToString() != "0")
                        {
                            num = Convert.ToInt32(data.Rows[0]["MSP_REST_VAL"].ToString());
                        }
                    }
                }
                return num;
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
                return -1;
            }
        }
        //Pemil 2015-08-22
        public INR_RES GetReservationApprovalNew(string req_no)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetReservationApprovalNew(req_no);
        }

        //Nuwan 2017-11-13
        public Int32 UpdateReservationApprovalNew(INR_RES inr_res, List<INR_RES_DET> inr_res_det, out string msg)
        {
            Int32 seqNo = 0;
            Int32 result = 0;
            string documentNo = null;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();


                result = _salesDAL.UpdateINR_RESExpDate(inr_res);
                _salesDAL.TransactionCommit();
                _salesDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                documentNo = ex.ToString(); ;
                result = -1;
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
            }

            msg = documentNo;
            return result;
        }
        //By Akila   - 2017/11/13
        public DataTable GetExchangeRequestBySerail(string _ser, Int32 _isinv)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetExchangeRequestBySerail(_ser, _isinv);
        }
        //add by tharanga 2017/11/21
        public DataTable GetBrandManager(string _com)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetBrandManager(_com);
        }
        //add by tharanga 2017/11/21
        public List<SAR_PB_CIREFFECT> get_SAR_PB_CIREFFECT(string spc_circular, Int32 spc_act)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.get_SAR_PB_CIREFFECT(spc_circular, spc_act);
        }
        //add by tharanga 2017/11/21
        public Int32 SAVE_SAR_PB_CIREFFECT(SAR_PB_CIREFFECT _SAR_PB_CIREFFECT)
        {
            _salesDAL = new SalesDAL();
            Int32 _affected = 0;
            // _error = string.Empty;

            try
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _affected = _salesDAL.SAVE_SAR_PB_CIREFFECT(_SAR_PB_CIREFFECT);
                _salesDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _affected = -1;
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                // _error = ex.Message;
            }
            return _affected;
        }
        //Tharindu 2017-11-21
        public bool GetLoyalityExistsStatus(string _cardtype, string _cardref)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetLoyalityExistsStatus(_cardtype, _cardref);
        }

        //public bool GetLoyalityExistsStatus(string _cardtype, string _cardref)
        //{
        //    _salesDAL = new SalesDAL();
        //    return _salesDAL.GetLoyalityExistsStatus(_cardtype, _cardref);
        //}
        public Int32 Update_price_def_EST(List<PriceDetailRef> _PriceDetailRef)
        {
            _salesDAL = new SalesDAL();
            Int32 _affected = 0;
            try
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                foreach (PriceDetailRef Det in _PriceDetailRef)
                {
                    _affected = _salesDAL.Update_price_def_EST(Det);
                }


                _salesDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _affected = -1;
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                // _error = ex.Message;
            }
            return _affected;

        }
        //subodana 2017-12-11
        public Int32 SaveAddtionalCustomer(List<mst_busentity_add_cus> _addcus, ref string _error)
        {
            _salesDAL = new SalesDAL();
            Int32 _affected = 0;
            _error = string.Empty;

            try
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                if (_addcus != null && _addcus.Count > 0)
                {
                    _affected = _salesDAL.deleteCustAddicodes(_addcus.First().mbac_master_cd, _addcus.First().mbac_add_cd);
                    foreach (var item in _addcus)
                    {
                        _affected = _salesDAL.SaveAddttionalCustomers(item);
                    }
                }


                _salesDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _affected = -1;
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _error = ex.Message;
            }
            return _affected;
        }
        //subodana
        public List<mst_busentity_add_cus> GetAddtinalCusCodes(string mastercode)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAddtinalCusCodes(mastercode);
        }
        public DataTable get_quo_to_inv(string _company, DateTime _fromDate, DateTime _toDate, string _doNo, string _sts, string _pc)
        {

            _salesDAL = new SalesDAL();
            return _salesDAL.get_quo_to_inv(_company, _fromDate, _toDate, _doNo, _sts, _pc);
        }
        //Add by lakshan 20Dec2017
        public List<InvoiceHeader> ChkInvoiceAvailableForSalesOredr(string _soNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.ChkInvoiceAvailableForSalesOredr(_soNo);
        }
        //add by tharanga 2018/01/08
        public Int32 SaveCustomerPriorityLevel_jonentry(List<MST_BUSPRIT_LVL> _custLevel, string _cusCode)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();

            //_salesDAL.deleteCustPrioLevels(_cusCode);

            foreach (MST_BUSPRIT_LVL _list in _custLevel)
            {
                _salesDAL.SaveCustomerPriorityLevel_jonentry(_list);
            }
            _salesDAL.ConnectionClose();
            return 1;
        }

        //Akila 2018/01/08
        public DataTable GetSalesDetailsWithDo(string _doNumber, string _refNumber, string _acc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSalesDetailsWithDo(_doNumber, _refNumber, _acc);
        }
        public DataTable GetRever_balance(string _doc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRever_balance(_doc);
        }

        //Akila 2018/02/23
        public DataTable GetInvoiceDetailsInSCM2(string _invNo, string _item, Int32 _lineNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceDetailsInSCM2(_invNo, _item, _lineNo);
        }
        private bool ValidateMobileNo(string num)//add by tharanga
        {
            int intNum = 0;
            //check only contain degits
            //if (!int.TryParse(num, out intNum))       //comented by kapila on 10/9/2015 coz +94 messages will not be sent
            //    return false;
            ////check for length
            //else
            //{
            if (num.Length < 10)
            {
                return false;
            }
            //check for first three chars
            else
            {
                string firstChar = num.Substring(0, 3);
                string firstChar_94 = num.Substring(0, 5);
                if (firstChar != "071" && firstChar != "077" && firstChar != "078" && firstChar != "072" && firstChar != "075" && firstChar != "076" && firstChar != "074" &&
                    firstChar_94 != "+9471" && firstChar_94 != "+9477" && firstChar_94 != "+9478" && firstChar_94 != "+9472" && firstChar_94 != "+9475" && firstChar_94 != "+9476" && firstChar_94 != "+9474")
                {
                    return false;
                }
            }
            //}
            return true;
        }
        public DataTable GetInvoicecom_item_details(string _invNo, string _prom_cd, string _com)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoicecom_item_details(_invNo, _prom_cd, _com);
        }

        public DataTable GetRequestdetails(string _basedoc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRequestdetails(_basedoc);
        }

        //Akila 2018/01/31
        public List<EventRegistry> GetEventDetById(string _eventId)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetEventDetById(_eventId);
        }

        //Akila 2018/01/31
        public List<EventItems> GetEventItemsByEventId(string _eventId)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetEventItemsByEventId(_eventId);
        }

        public Int16 UpdateEventHdrStatus(EventRegistry _event)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.UpdateEventHdrStatus(_event);
        }

        public Int16 UpdateEventItemQty(EventItems _eventItem)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.UpdateEventItemQty(_eventItem);
        }

        public Int16 SaveInvoicedEventItems(InvoicedEventItems _invItems)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SaveInvoicedEventItems(_invItems);
        }

        //Akila 2018/02/14
        public List<InvoicedEventItems> GetInvoiceEventItems(string _invNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceEventItems(_invNo);
        }

        //Akila 2018/02/26
        public Int16 UpdateInvoiceEventItems(string _invNo, string _eventId)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.UpdateInvoiceEventItems(_invNo, _eventId);
        }

        //Tharindu 2018-03-12
        public DataTable GetSCMInvoice2(string _company, string _customer, string _item)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSCMInvoice2(_company, _customer, _item);
        }
        public bool IsValidEmail(string email)
        {
            string pattern = @"^[a-z][a-z|0-9|]*([_][a-z|0-9]+)*([.][a-z|0-9]+([_][a-z|0-9]+)*)?@[a-z][a-z|0-9|]*\.([a-z][a-z|0-9]*(\.[a-z][a-z|0-9]*)?)$";

            System.Text.RegularExpressions.Match match = Regex.Match(email.Trim(), pattern, RegexOptions.IgnoreCase);
            if (match.Success)
                return true;
            else
                return false;
        }

        //Tharindu 2018-03-16
        public DataTable Getsupplierinvoicedetails(string _company, string _docNo)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.Getsupplierinvoicedetails(_company, _docNo);
        }
        public Int32 updateToMasterPcWiseMid(List<Deposit_Bank_Pc_wise> lst_master_mid, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _salesDAL.updateToMasterPcWiseMid(lst_master_mid);
                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;

        }


        //Added by akila 2018/03/05
        public List<InvoiceItem> GetGeneralDiscountForTotalInvoice(int _disSeq, string _company, List<InvoiceItem> invoiceItems, out bool _isDifferent, out decimal _tobepay, InvoiceHeader _invoiceheader, out string _errorMsg)
        {
            List<InvoiceItem> _discountedItems = new List<InvoiceItem>();
            _errorMsg = string.Empty;
            bool _isNormal = true;
            _isDifferent = false;
            _tobepay = 0;
            Boolean _isDiscFound = false;

            _salesDAL = new SalesDAL();
            _generalDAL = new GeneralDAL();
            _inventoryDAL = new InventoryDAL();

            try
            {
                decimal _currentPaid = invoiceItems.Sum(x => x.Sad_tot_amt);
                bool vat = _invoiceheader.Sah_tax_inv || _invoiceheader.Sah_tax_exempted ? true : false;

                List<CashPromotionDiscountDetail> _discPromoList = new List<CashPromotionDiscountDetail>();

                #region apply discount for total invoice
                if (invoiceItems != null && invoiceItems.Count > 0)
                {
                    foreach (InvoiceItem _promoItm in invoiceItems)
                    {
                        //check for profit center
                        List<CashPromotionDiscountDetail> _disDetails = _salesDAL.GetPromotinalDiscountDetail01_new(_disSeq, _promoItm.Sad_itm_cd, "PC", _invoiceheader.Sah_pc);
                        if (_disDetails == null || _disDetails.Count < 1)
                        {
                            //check for channel 
                            DataTable _dtChnl = _salesDAL.GetChanelOnPC(_company, _invoiceheader.Sah_pc, "CHNL");
                            _disDetails = _salesDAL.GetPromotinalDiscountDetail01_new(_disSeq, _promoItm.Sad_itm_cd, "CHNL", _dtChnl.Rows[0]["mpi_val"].ToString());
                            if (_disDetails == null || _disDetails.Count < 1)
                            {
                                //check for sub channel 
                                _dtChnl = _salesDAL.GetChanelOnPC(_company, _invoiceheader.Sah_pc, "SCHNL");
                                _disDetails = _salesDAL.GetPromotinalDiscountDetail01_new(_disSeq, _promoItm.Sad_itm_cd, "SCHNL", _dtChnl.Rows[0]["mpi_val"].ToString());
                            }
                        }

                        if (_disDetails != null && _disDetails.Count > 0)
                        {
                            _discPromoList.AddRange(_disDetails);
                        }
                    }

                    if (_discPromoList != null && _discPromoList.Count > 0)
                    {
                        int _appliedSeq = 0;
                        foreach (CashPromotionDiscountDetail _discount in _discPromoList)
                        {
                            if (_appliedSeq != _discount.Spdd_seq)
                            {
                                foreach (InvoiceItem _invItem in invoiceItems)
                                {
                                    _discountedItems.Add(CalculateDiscount(_company, _discount, _invItem, _isNormal, vat, _invoiceheader.Sah_dt));
                                    _isDiscFound = true;
                                }
                                _appliedSeq = _discount.Spdd_seq;
                            }

                        }
                    }
                    else { _discountedItems = invoiceItems; }

                    _isDifferent = false;
                    decimal _NewPaid = 0;

                    if (_discountedItems != null && _discountedItems.Count > 0)
                    {
                        _NewPaid = (_discountedItems.Select(X => X.Sad_tot_amt)).Sum();
                    }

                    if (Math.Round(_currentPaid, 2) != Math.Round(_NewPaid, 2))
                    {
                        _isDifferent = true;
                    }
                    else
                    {
                        _isDifferent = false;
                    }

                    _tobepay = _NewPaid;
                }

                #endregion
            }
            catch (Exception ex)
            {
                _errorMsg = ex.Message;
                _isDifferent = false;
                _discountedItems = null;
                _tobepay = 0;
            }

            return _discountedItems;
        }
        //add by tharanga 208/04/26
        public List<ReceiptItemDetails> GetAdvanReceiptdet_frominvoice(string _recNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAdvanReceiptdet_frominvoice(_recNo);

        }
        public List<ReptPickSerials> search_res_serials_for_do(string company, string location, string itemCode, string pbook, string pblvl, string itemstatus, string ser1)
        {
            // copy of ublic List<ReptPickSerials> GetStatusGodSerial(string company, string location, string itemCode, string pbook, string pblvl, string itemstatus)
            InventoryDAL _inventoryDAL = new InventoryDAL();
            _salesDAL = new SalesDAL();
            List<ReptPickSerials> _list = new List<ReptPickSerials>();
            List<PriceBookLevelRef> _pblvls = new List<PriceBookLevelRef>();

            _list = _inventoryDAL.search_res_serials_for_do(company, location, itemCode, pbook, pblvl, "", false, ser1);

            List<ReptPickSerials> _list1 = new List<ReptPickSerials>();

            if (_list != null)
            {

                _pblvls = _salesDAL.GetPriceLevelList(company, pbook, pblvl);
                var _listSerials = from list1Item in _list
                                   join list2Item in _pblvls on list1Item.Tus_itm_stus equals list2Item.Sapl_itm_stuts
                                   select list1Item;
                _list1 = _listSerials.ToList();



            }
            return _list1;
        }

        //  Tharindu  
        public DataTable getcustomermobno(string p_com, string p_mobile, string p_type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getcustomermobno(p_com, p_mobile, p_type);
        }


        //Wimal 03/05/2018
        public List<InterCompanySalesParameter> GET_INTERCOM_PAR_BY_SUP_PO(string _com, string _sup)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GET_INTERCOM_PAR_BY_SUP_PO(_com, _sup);
        }

        public Int32 cancel_MasterPcWiseMid(List<Deposit_Bank_Pc_wise> lst_master_mid, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                //effect = _salesDAL.cancel_MasterPcWiseMid(lst_master_mid);
                _salesDAL.TransactionCommit();
                _err = "Sucessfully Inactivated";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;

        }

        public List<TradingInterest> get_trd_int_det(string _com, string _itm, DateTime _date, string _sch_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.get_trd_int_det(_com, _itm, _date, _sch_cd);
        }

        //Tharindu 
        public DataTable GetSchemes_term(string _type, int _term, string _sch_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchemes_term(_type, _term, _sch_cd);
        }
        public DataTable GetPromoCodesByCirnew(string _cir, string _promo, string _pb, string pbl)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPromoCodesByCirnew(_cir, _promo, _pb, pbl);
        }
        public DataTable getTradingInterest(string _scheme, string _item)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getTradingInterest(_scheme, _item);
        }

        public Int16 DeleteTrialCalSum()
        {
            Int16 _effects = 0;
            try
            {
                _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _salesDAL.DeleteTrialCalSum();

                _salesDAL.TransactionCommit();
                _effects = 1;
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                return -1;
            }

            return _effects;
        }
        public Int16 SaveTrialCalSum(string p_com_cd, string p_pc_cd, string p_pc_desc, string p_pc_chnl, string p_cat1, string p_cat2, string p_cat3,
            string p_item_cd, string p_item_desc, string p_brnd, string p_pbook, string p_pblvl, string p_scheme, string p_scheme_name,
            decimal p_gross_amt, decimal p_vat_amt, decimal p_d_net_amt, decimal p_d_cost, decimal p_d_gp, decimal p_init_vat, decimal p_inst_vat,
            decimal p_trd_intr_rt, decimal p_trd_intr_amt, decimal p_ser_charge, decimal p_intr_charge, decimal p_diriya, decimal
            p_dp_amt, decimal p_hp_amt, decimal p_init_ser_charge, decimal p_inst_ser_charge, decimal p_init_diriya, decimal p_inst_diriya, decimal
            p_coll_comm, decimal p_coll_comm_rt, decimal p_dp_comm, decimal p_dp_comm_rt, decimal p_diriya_comm, decimal p_diriya_comm_rt, decimal p_monthly_inst)
        {
            Int16 _effects = 0;
            try
            {
                _salesDAL = new SalesDAL(); _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _effects = _salesDAL.SaveTrialCalSum(p_com_cd, p_pc_cd, p_pc_desc, p_pc_chnl, p_cat1, p_cat2, p_cat3,
                    p_item_cd, p_item_desc, p_brnd, p_pbook, p_pblvl, p_scheme, p_scheme_name,
                    p_gross_amt, p_vat_amt, p_d_net_amt, p_d_cost, p_d_gp, p_init_vat, p_inst_vat,
                    p_trd_intr_rt, p_trd_intr_amt, p_ser_charge, p_intr_charge, p_diriya,
                    p_dp_amt, p_hp_amt, p_init_ser_charge, p_inst_ser_charge, p_init_diriya, p_inst_diriya,
                    p_coll_comm, p_coll_comm_rt, p_dp_comm, p_dp_comm_rt, p_diriya_comm, p_diriya_comm_rt, p_monthly_inst);

                _salesDAL.TransactionCommit();
                _effects = 1;
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                return -1;
            }

            return _effects;
        }
        //Dulaj 2018-Apr-10
        public DataTable GetUserDefineTemplate(string template, string user)
        {
            _generalDAL = new GeneralDAL();
            return _generalDAL.GetUserDefineTemplate(template, user);
        }
        //Dulaj 2018-Apr-11
        public Int32 SaveUserProfileTemplate(string _templateName, string _codes, string _values, string _userId, string _dectription, string _key, string sessionId)
        {
            Int32 _effect = 0;
            try
            {
                _generalDAL = new GeneralDAL();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();
                _effect = _generalDAL.SaveUserProfileTemplate(_templateName, _codes, _values, _userId, _dectription, _key, sessionId);
                if (_effect > 0)
                {
                    _generalDAL.TransactionCommit();
                    _generalDAL.ConnectionClose();
                    return _effect;
                }
                else
                {
                    _generalDAL.TransactionRollback();
                    _generalDAL.ConnectionClose();
                    return _effect;
                }
            }
            catch (Exception e)
            {
                _generalDAL.TransactionRollback();
                _generalDAL.ConnectionClose();
                return _effect;

            }
        }

        //Dulaj 2018-apr-12

        public Int32 CheckTemplateName(string _tempName)
        {
            Int32 _effect = 0;
            _generalDAL = new GeneralDAL();
            _generalDAL.ConnectionOpen();
            _effect = _generalDAL.CheckTemplateName(_tempName);
            _generalDAL.ConnectionClose();
            return _effect;
        }

        //Pasindu 2018/05/06
        public List<RBH_FRMDT_TODT> get_hdr_dates(string p_cir_code)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.get_hdr_dates(p_cir_code);
        }

        //Pasindu 2018/05/06
        public DataTable GetProductBonusDet(string p_circular_code, string p_scehema_code, string p_fromdata, string p_todate)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetProductBonusDet(p_circular_code, p_scehema_code, p_fromdata, p_todate);
        }

        //Tharindu 2018-03-12
        public DataTable GetInvoiceSerial_SCM2(string _company, string _invoice, string _item)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceSerial_SCM2(_company, _invoice, _item);
        }

        //public DataTable GetInvoiceSerial_SCM2(string _company, string _invoice, string _item)
        //{
        //    _salesDAL = new SalesDAL();
        //    return _salesDAL.GetInvoiceSerial_SCM2(_company, _invoice, _item);
        //}
        //Dulaj 2018/Jun/29
        public string GetAccountNo(string customerCode, string companyCode)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAccountNo(customerCode, companyCode);
        }
        //Dulaj 2018/Jul/19
        public DataTable GetProductBonusInvoiceDetails(string circular_code, string scehema_code, string FromDate, string ToDate, string com)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetProductBonusInvoiceDetails(circular_code, scehema_code, FromDate, ToDate, com);
        }
        public List<RequestApprovalDetail> GET_EXCHANGE_REC_DET(string _ref)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GET_EXCHANGE_REC_DET(_ref);
        }
        public List<HpSchemeDefinition> GetDPCommission(string _book, string _level, DateTime _date, string _item, string _brand, string _maincat, string _cat, string _scheme)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDPCommission(_book, _level, _date, _item, _brand, _maincat, _cat, _scheme);
        }
        public decimal GetCashCommissionRate(string _book, string _level, DateTime _date, string _item, string _brand, string _maincat, string _cat, string type)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCashCommissionRate(_book, _level, _date, _item, _brand, _maincat, _cat, type);
        }
        public DataTable Get_hp_balance_bycust(DateTime _date, string _cust_cd, string _loc)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_hp_balance_bycust(_date, _cust_cd, _loc);
        }

        public DataTable Get_warr_det_by_ser(string _itm, string _ser)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_warr_det_by_ser(_itm, _ser);
        }
        public InvoiceLoyalty GetInvoiceLoyalty(string _invoice)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceLoyalty(_invoice);
        }
        public List<InvoiceHeader> GetInvoiceByAccountNo_HS(string _company, string _profitCenter, string _account)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetInvoiceByAccountNo_HS(_company, _profitCenter, _account);
        }
        //tharanga 2018/10/12
        public Int32 update_loty_crdmember(string account_no, string type, Int32 _status, out string _errmsg)
        {
            Int32 _effect = 0;
            string _err = "";
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _effect = _salesDAL.update_loty_crdmember(account_no, type, _status);
                if (_effect > 0)
                {
                    _salesDAL.TransactionCommit();
                    _salesDAL.ConnectionClose();
                    _errmsg = string.Empty;
                    return _effect;
                }
                else
                {
                    _errmsg = "NOT SAVED";
                    _salesDAL.TransactionRollback();
                    _salesDAL.ConnectionClose();
                    return _effect;
                }
            }
            catch (Exception e)
            {
                _errmsg = e.Message.ToString();
                _generalDAL.TransactionRollback();
                _generalDAL.ConnectionClose();
                return _effect;

            }
        }
        //add  by tharanga 2018/10/15

        public LoyaltyMemeber getLoyaltyDetails_by_ser(string _cd_ser)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getLoyaltyDetails_by_ser(_cd_ser);
        }
        public DataTable getAllMid_Detailsnew(string prof_cen)
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("MerchantIDDef") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.getAllMid_Detailsnew(prof_cen);
        }

        //Wimal 22/Oct/2018
        public List<string> GetAdjType()
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAdjType();
        }

        public DataTable CC_Reconciliation_Rpt(string com, DateTime _fromdate, DateTime _todate, string Acc)
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CC_Reconciliation_Rpt") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.CC_Reconciliation_Rpt(com, _fromdate, _todate, Acc);
        }

        //Wimal @ 02/Nov/2018
        public DataTable LoadCCAccounts()
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.LoadCCAccounts();

        }
        //darshana 07-11-2018
        public DataTable GetAlwItm(string _itm)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAlwItm(_itm);
        }
        //Darshana 07-11-2018
        public DataTable GetCurInvt()
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCurInv();
        }
        public List<SER_HIS> get_ser_details(string serial, out string _err)
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            List<SER_HIS> dt = new List<SER_HIS>();
            _err = "";
            try
            {
                if (_securityDAL.Is_Report_DR("Total_Arrears") == true) _salesDAL.ConnectionOpen_DR();
                dt= _salesDAL.get_ser_details(serial);
            }
            catch (Exception ex)
            {
                _err = ex.Message.ToString();

   
            }
            return dt;
        }

        //Wimal 2018/Nov/29
        public Int32 UpdateDipositBankDet(List<Deposit_Bank_Pc_wise> listBankDetails, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                //string _documentNo = "";
                //_err = _documentNo;              
                effect = _salesDAL.UpdateDipositBankDet(listBankDetails);

                _salesDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();

            }
            return effect;

        }
        public List<SaleCommission> GetCalculatedCommission_new(string _item, Int32 _lineno, decimal _netItemValue, decimal _totalValue, List<RecieptItem> _paymode, List<CashCommissionDetailRef> _commissiondef_new, string _invoiceType, string _invNo, CashCommissionDetailRef _commissiondefCE, string _empType)
        {
            Decimal _virVal = 0;
            decimal _payment = 0;
            string _err = string.Empty;
            int isCE = _empType == "CE" ? 1 : 0;
            List<SaleCommission> _list = null;
            if (_totalValue <= 0)

                return _list;

            _salesDAL = new SalesDAL();
            int X = _salesDAL.GetVirtualItemTotal(_invNo, out _virVal);

            _list = new List<SaleCommission>();
            Int32 _commissionLineno = 0;

            //updated by akila.
            //Update cash commission amount - cash commission amount will be define for entire payment type. Therefore if there are multiple payment types, need to
            //calculate cash commission portion (total cash commission rate / no. of payments)

            if (_paymode != null && _paymode.Count > 0)
            {
                if (_commissiondefCE != null && _commissiondefCE.Sccd_cash_comm > 0)
                {
                    _commissiondefCE.Sccd_cash_comm = _commissiondefCE.Sccd_cash_comm / _paymode.Count;
                }

                if (_commissiondef_new != null && _commissiondef_new.First().Sccd_cash_comm > 0)
                {
                    _commissiondef_new.First().Sccd_cash_comm = _commissiondef_new.First().Sccd_cash_comm / _paymode.Count;
                }
            }
            List<CashCommissionDetailRef> _commissiondef = _commissiondef_new;

            foreach (var _mode in _paymode)
            {

                if (_mode.Sard_pay_tp == "CASH")
                {
                    if (isCE == 0)
                    {
                        _commissiondef = _commissiondef_new.Where(z => z.Sccd_cash_comm != -1 && z.Sccd_cash_comm_rt != -1).ToList();
                    }
                    else
                    {
                        _commissiondef = _commissiondef_new.Where(z => z.Sccd_cash_ecomm != -1 && z.Sccd_cash_ecomm_rt != -1).ToList();
                    }
                }
                else if (_mode.Sard_pay_tp == "CRCD" && _mode.Sard_cc_period == 0)
                {
                    if (isCE == 0)
                    {
                        _commissiondef = _commissiondef_new.Where(z => z.Sccd_cc_comm != -1 && z.Sccd_cc_comm_rt != -1).ToList();
                    }
                    else
                    {
                        _commissiondef = _commissiondef_new.Where(z => z.Sccd_cc_ecomm != -1 && z.Sccd_cc_ecomm_rt != -1).ToList();
                    }
                }
                else if (_mode.Sard_pay_tp == "CRCD")
                {
                    if (isCE == 0)
                    {
                        _commissiondef = _commissiondef_new.Where(z => z.Sccd_cc_pro_comm != -1 && z.Sccd_cc_pro_comm_rt != -1).ToList();
                    }
                    else
                    {
                        _commissiondef = _commissiondef_new.Where(z => z.Sccd_cc_pro_ecomm != -1 && z.Sccd_cc_pro_ecomm_rt != -1).ToList();
                    }
                }
                else if (_mode.Sard_pay_tp == "CHEQUE")
                {
                    if (isCE == 0)
                    {
                        _commissiondef = _commissiondef_new.Where(z => z.Sccd_chq_comm != -1 && z.Sccd_chq_comm_rt != -1).ToList();
                    }
                    else
                    {

                        _commissiondef = _commissiondef_new.Where(z => z.Sccd_chq_ecomm_rt != -1 && z.Sccd_chq_ecomm_rt != -1).ToList();
                    }
                }
                else if (_mode.Sard_pay_tp == "GVO")
                {
                    if (isCE == 0)
                    {
                        _commissiondef = _commissiondef_new.Where(z => z.Sccd_gv_comm != -1 && z.Sccd_gv_comm_rt != -1).ToList();
                    }
                    else
                    {
                        _commissiondef = _commissiondef_new.Where(z => z.Sccd_gv_ecomm != -1 && z.Sccd_gv_ecomm_rt != -1).ToList();
                    }
                }
                else if (_mode.Sard_pay_tp == "DEBT")
                {
                    if (isCE == 0)
                    {
                        _commissiondef = _commissiondef_new.Where(z => z.Sccd_dbc_comm != -1 && z.Sccd_dbc_comm_rt != -1).ToList();
                    }
                    else
                    {
                        _commissiondef = _commissiondef_new.Where(z => z.Sccd_dbc_ecomm != -1 && z.Sccd_dbc_ecomm_rt != -1).ToList();
                    }
                }
                else
                {
                    if (isCE == 0)
                    {
                        _commissiondef = _commissiondef_new.Where(z => z.Sccd_oth_comm != -1 && z.Sccd_oth_comm_rt != -1).ToList();
                    }
                    else
                    {
                        _commissiondef = _commissiondef_new.Where(z => z.Sccd_oth_ecomm != -1 && z.Sccd_oth_ecomm_rt != -1).ToList();
                    }
                }

                if (_commissiondef.Count <= 0)
                {
                    _err = "Commision definition not found " + _invNo;

                }

                _commissionLineno += 1;
                string _pmode = _mode.Sard_pay_tp;
                if (_mode.Sard_pay_tp == "CRCD" && _mode.Sard_cc_period != 0)
                {
                    _pmode = "CRCD_POMO";
                }
                if (_commissionLineno == 1)
                {
                    _payment = _mode.Sard_settle_amt - _virVal;
                }
                else
                {
                    _payment = _mode.Sard_settle_amt;
                }
                decimal _beforeCommission = _netItemValue * _payment / _totalValue;

                decimal _commissionAmt = 0;
                decimal _commissionRt = 0;
                decimal _cecommissionAmt = 0;
                decimal _cecommissionRt = 0;

                decimal _adCommissionRate = 0;
                decimal _adCommissionAmt = 0;

                switch (_pmode)
                {
                    case "CASH":


                        //add sachith   //modified kapila
                        if (_empType == "CE")
                        {
                            if (_commissiondefCE != null)
                            {
                                if (_commissiondef.Count > 0)
                                {
                                    _cecommissionAmt = _commissiondefCE.Sccd_cash_ecomm;
                                    _cecommissionRt = _commissiondefCE.Sccd_cash_ecomm_rt;
                                    _commissionAmt = _commissiondefCE.Sccd_cash_comm;
                                    _commissionRt = _commissiondefCE.Sccd_cash_comm_rt;
                                }
                                else
                                {
                                    _cecommissionAmt = 0;
                                    _cecommissionRt = 0;
                                    _commissionAmt = 0;
                                    _commissionRt = 0;
                                }
                            }
                            else
                            {
                                _cecommissionAmt = 0;
                                _cecommissionRt = 0;
                                _commissionAmt = 0;
                                _commissionRt = 0;
                            }
                        }
                        else
                        {
                            if (_commissiondef.Count > 0)
                            {
                                _commissionAmt = _commissiondef.First().Sccd_cash_comm;
                                _commissionRt = _commissiondef.First().Sccd_cash_comm_rt;
                            }

                        }
                        if (_commissiondef.Count > 0)
                        {
                            if (_commissiondef.First().Sccd_add_cash_comm_rt > 0 || _commissiondef.First().Sccd_add_allw_cash)
                            {

                                if (!string.IsNullOrEmpty(_commissiondef.First().Sccd_app_cust_tp))
                                {
                                    //get invoice
                                    InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);

                                    //customer type check
                                    List<MasterBusinessEntity> _customer = _salesDAL.GetCustomerDetailList(_invHrd.Sah_com, _invHrd.Sah_cus_cd, null, null, "C");
                                    if (_customer != null && _customer.Count > 0)
                                    {
                                        if (_customer[0].Mbe_cate == _commissiondef.First().Sccd_app_cust_tp)
                                        {
                                            //default qty
                                            if ((_commissiondef.First().Sccd_add_from_qty >= 1 && _commissiondef.First().Sccd_add_to_qty >= 1000))
                                            {
                                                _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                                //comm amt
                                                if (_commissiondef.First().Sccd_add_allw_cash)
                                                {
                                                    _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                }
                                            }
                                            //check qty
                                            else
                                            {
                                                List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                                //item wise qty
                                                if (_commissiondef.First().Sccd_add_allow_comb)
                                                {
                                                    foreach (InvoiceItem _itm in _itmDetails)
                                                    {
                                                        if (_commissiondef.First().Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.First().Sccd_add_to_qty >= _itm.Sad_qty)
                                                        {
                                                            _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                                            //comm amt
                                                            if (_commissiondef.First().Sccd_add_allw_cash)
                                                            {
                                                                _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                            }
                                                            break;
                                                        }
                                                    }
                                                }
                                                //all qty
                                                else
                                                {
                                                    decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                                    if (_commissiondef.First().Sccd_add_from_qty <= _qtyTotal && _commissiondef.First().Sccd_add_to_qty >= _qtyTotal)
                                                    {
                                                        _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                                        //comm amt
                                                        if (_commissiondef.First().Sccd_add_allw_cash)
                                                        {
                                                            _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                        }
                                                    }
                                                }
                                            }

                                        }
                                    }
                                }
                                //invoice qty check
                                else
                                {
                                    //default qty
                                    //get invoice
                                    InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);
                                    if ((_commissiondef.First().Sccd_add_from_qty >= 1 && _commissiondef.First().Sccd_add_to_qty >= 1000))
                                    {
                                        _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                        //comm amt
                                        if (_commissiondef.First().Sccd_add_allw_cash)
                                        {
                                            _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                        }
                                    }
                                    //check qty
                                    else
                                    {
                                        List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                        //item wise qty
                                        if (_commissiondef.First().Sccd_add_allow_comb)
                                        {
                                            foreach (InvoiceItem _itm in _itmDetails)
                                            {
                                                if (_commissiondef.First().Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.First().Sccd_add_to_qty >= _itm.Sad_qty)
                                                {
                                                    _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                                    //comm amt
                                                    if (_commissiondef.First().Sccd_add_allw_cash)
                                                    {
                                                        _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                    }
                                                    break;
                                                }
                                            }
                                        }

                                        //all qty
                                        else
                                        {
                                            decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                            if (_commissiondef.First().Sccd_add_from_qty <= _qtyTotal && _commissiondef.First().Sccd_add_to_qty >= _qtyTotal)
                                            {
                                                _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                                //comm amt
                                                if (_commissiondef.First().Sccd_add_allw_cash)
                                                {
                                                    _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "CRCD":
                        if (_mode.Sard_cc_period != 0)
                        //if (_mode.Sard_cc_is_promo)
                        {

                            if (_empType == "CE")
                            {
                                //add sachith   //modified kapila
                                if (_commissiondefCE != null)
                                {
                                    if (_commissiondef.Count > 0)
                                    {
                                        _cecommissionAmt = _commissiondefCE.Sccd_cc_pro_ecomm;
                                        _cecommissionRt = _commissiondefCE.Sccd_cc_pro_ecomm_rt;
                                        _commissionAmt = _commissiondefCE.Sccd_cash_comm;
                                        _commissionRt = _commissiondefCE.Sccd_cc_pro_comm_rt;
                                    }
                                    else
                                    {
                                        _cecommissionAmt = 0;
                                        _cecommissionRt = 0;
                                        _commissionAmt = 0;
                                        _commissionRt = 0;
                                    }
                                }
                                else
                                {
                                    _cecommissionAmt = 0;
                                    _cecommissionRt = 0;
                                    _commissionAmt = 0;
                                    _commissionRt = 0;
                                }
                            }
                            else
                            {
                                if (_commissiondef.Count > 0)
                                {
                                    _commissionAmt = _commissiondef.First().Sccd_cash_comm;
                                    _commissionRt = _commissiondef.First().Sccd_cc_pro_comm_rt;
                                }
                            }
                        }
                        else
                        {


                            //add sachith   //modified kapila
                            if (_empType == "CE")
                            {
                                if (_commissiondefCE != null)
                                {
                                    _cecommissionAmt = _commissiondefCE.Sccd_cc_ecomm;
                                    _cecommissionRt = _commissiondefCE.Sccd_cc_ecomm_rt;
                                    _commissionAmt = _commissiondefCE.Sccd_cash_comm;
                                    _commissionRt = _commissiondefCE.Sccd_cc_comm_rt;
                                }
                                else
                                {
                                    _cecommissionAmt = 0;
                                    _cecommissionRt = 0;
                                    _commissionAmt = 0;
                                    _commissionRt = 0;
                                }
                            }
                            else
                            {
                                if (_commissiondef.Count > 0)
                                {
                                    _commissionAmt = _commissiondef.First().Sccd_cc_comm;
                                    _commissionRt = _commissiondef.First().Sccd_cc_comm_rt;
                                }

                            }
                        }
                        if (_commissiondef.Count > 0)
                        {
                            if (_commissiondef.First().Sccd_add_cash_comm_rt > 0 || _commissiondef.First().Sccd_add_allw_cc)
                            {

                                if (!string.IsNullOrEmpty(_commissiondef.First().Sccd_app_cust_tp))
                                {
                                    //get invoice
                                    InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);

                                    //customer type check
                                    List<MasterBusinessEntity> _customer = _salesDAL.GetCustomerDetailList(_invHrd.Sah_com, _invHrd.Sah_cus_cd, null, null, "C");
                                    if (_customer != null && _customer.Count > 0)
                                    {
                                        if (_customer[0].Mbe_cate == _commissiondef.First().Sccd_app_cust_tp)
                                        {
                                            //default qty
                                            if ((_commissiondef.First().Sccd_add_from_qty >= 1 && _commissiondef.First().Sccd_add_to_qty >= 1000))
                                            {
                                                _adCommissionRate = _commissiondef.First().Sccd_add_cc_comm_rt;
                                                //comm amt
                                                if (_commissiondef.First().Sccd_add_allw_cc)
                                                {
                                                    _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                }
                                            }
                                            //check qty
                                            else
                                            {
                                                List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                                //item wise qty
                                                if (_commissiondef.First().Sccd_add_allow_comb)
                                                {
                                                    foreach (InvoiceItem _itm in _itmDetails)
                                                    {
                                                        if (_commissiondef.First().Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.First().Sccd_add_to_qty >= _itm.Sad_qty)
                                                        {
                                                            _adCommissionRate = _commissiondef.First().Sccd_add_cc_comm_rt;
                                                            //comm amt
                                                            if (_commissiondef.First().Sccd_add_allw_cc)
                                                            {
                                                                _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                            }
                                                            break;
                                                        }
                                                    }
                                                }
                                                //all qty
                                                else
                                                {
                                                    decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                                    if (_commissiondef.First().Sccd_add_from_qty <= _qtyTotal && _commissiondef.First().Sccd_add_to_qty >= _qtyTotal)
                                                    {
                                                        _adCommissionRate = _commissiondef.First().Sccd_add_cc_comm_rt;
                                                        //comm amt
                                                        if (_commissiondef.First().Sccd_add_allw_cc)
                                                        {
                                                            _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                        }
                                                    }
                                                }
                                            }

                                        }
                                    }
                                }
                                //invoice qty check
                                else
                                {
                                    //default qty
                                    //get invoice
                                    InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);
                                    if ((_commissiondef.First().Sccd_add_from_qty >= 1 && _commissiondef.First().Sccd_add_to_qty >= 1000))
                                    {
                                        _adCommissionRate = _commissiondef.First().Sccd_add_cc_comm_rt;
                                        //comm amt
                                        if (_commissiondef.First().Sccd_add_allw_cc)
                                        {
                                            _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                        }
                                    }
                                    //check qty
                                    else
                                    {
                                        List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                        //item wise qty
                                        if (_commissiondef.First().Sccd_add_allow_comb)
                                        {
                                            foreach (InvoiceItem _itm in _itmDetails)
                                            {
                                                if (_commissiondef.First().Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.First().Sccd_add_to_qty >= _itm.Sad_qty)
                                                {
                                                    _adCommissionRate = _commissiondef.First().Sccd_add_cc_comm_rt;
                                                    //comm amt
                                                    if (_commissiondef.First().Sccd_add_allw_cc)
                                                    {
                                                        _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                    }
                                                    break;
                                                }
                                            }
                                        }

                                        //all qty
                                        else
                                        {
                                            decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                            if (_commissiondef.First().Sccd_add_from_qty <= _qtyTotal && _commissiondef.First().Sccd_add_to_qty >= _qtyTotal)
                                            {
                                                _adCommissionRate = _commissiondef.First().Sccd_add_cc_comm_rt;
                                                //comm amt
                                                if (_commissiondef.First().Sccd_add_allw_cc)
                                                {
                                                    _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "CRCD_POMO":
                        if (_mode.Sard_cc_period == 0)
                        //if (_mode.Sard_cc_is_promo)
                        {

                            if (_empType == "CE")
                            {
                                //add sachith   //modified kapila
                                if (_commissiondefCE != null)
                                {
                                    if (_commissiondef.Count > 0)
                                    {
                                        _cecommissionAmt = _commissiondefCE.Sccd_cc_pro_ecomm;
                                        _cecommissionRt = _commissiondefCE.Sccd_cc_pro_ecomm_rt;
                                        _commissionAmt = _commissiondefCE.Sccd_cash_comm;
                                        _commissionRt = _commissiondefCE.Sccd_cc_pro_comm_rt;
                                    }
                                    else
                                    {
                                        _cecommissionAmt = 0;
                                        _cecommissionRt = 0;
                                        _commissionAmt = 0;
                                        _commissionRt = 0;
                                    }
                                }
                                else
                                {
                                    _cecommissionAmt = 0;
                                    _cecommissionRt = 0;
                                    _commissionAmt = 0;
                                    _commissionRt = 0;
                                }
                            }
                            else
                            {
                                if (_commissiondef.Count > 0)
                                {
                                    _commissionAmt = _commissiondef.First().Sccd_cc_pro_comm;
                                    _commissionRt = _commissiondef.First().Sccd_cc_pro_comm_rt;
                                }
                            }
                        }
                        else
                        {


                            //add sachith   //modified kapila
                            if (_empType == "CE")
                            {
                                if (_commissiondefCE != null)
                                {
                                    _cecommissionAmt = _commissiondefCE.Sccd_cc_ecomm;
                                    _cecommissionRt = _commissiondefCE.Sccd_cc_ecomm_rt;
                                    _commissionAmt = _commissiondefCE.Sccd_cash_comm;
                                    _commissionRt = _commissiondefCE.Sccd_cc_comm_rt;
                                }
                                else
                                {
                                    _cecommissionAmt = 0;
                                    _cecommissionRt = 0;
                                    _commissionAmt = 0;
                                    _commissionRt = 0;
                                }
                            }
                            else
                            {
                                if (_commissiondef.Count > 0)
                                {
                                    _commissionAmt = _commissiondef.First().Sccd_cc_comm;
                                    _commissionRt = _commissiondef.First().Sccd_cc_comm_rt;
                                }

                            }
                        }
                        if (_commissiondef.Count > 0)
                        {
                            if (_commissiondef.First().Sccd_cc_pro_comm_rt > 0 || _commissiondef.First().Sccd_add_allw_cc)
                            {

                                if (!string.IsNullOrEmpty(_commissiondef.First().Sccd_app_cust_tp))
                                {
                                    //get invoice
                                    InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);

                                    //customer type check
                                    List<MasterBusinessEntity> _customer = _salesDAL.GetCustomerDetailList(_invHrd.Sah_com, _invHrd.Sah_cus_cd, null, null, "C");
                                    if (_customer != null && _customer.Count > 0)
                                    {
                                        if (_customer[0].Mbe_cate == _commissiondef.First().Sccd_app_cust_tp)
                                        {
                                            //default qty
                                            if ((_commissiondef.First().Sccd_add_from_qty >= 1 && _commissiondef.First().Sccd_add_to_qty >= 1000))
                                            {
                                                _adCommissionRate = _commissiondef.First().Sccd_add_cc_comm_rt;
                                                //comm amt
                                                if (_commissiondef.First().Sccd_add_allw_cc)
                                                {
                                                    _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                }
                                            }
                                            //check qty
                                            else
                                            {
                                                List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                                //item wise qty
                                                if (_commissiondef.First().Sccd_add_allow_comb)
                                                {
                                                    foreach (InvoiceItem _itm in _itmDetails)
                                                    {
                                                        if (_commissiondef.First().Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.First().Sccd_add_to_qty >= _itm.Sad_qty)
                                                        {
                                                            _adCommissionRate = _commissiondef.First().Sccd_add_cc_comm_rt;
                                                            //comm amt
                                                            if (_commissiondef.First().Sccd_add_allw_cc)
                                                            {
                                                                _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                            }
                                                            break;
                                                        }
                                                    }
                                                }
                                                //all qty
                                                else
                                                {
                                                    decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                                    if (_commissiondef.First().Sccd_add_from_qty <= _qtyTotal && _commissiondef.First().Sccd_add_to_qty >= _qtyTotal)
                                                    {
                                                        _adCommissionRate = _commissiondef.First().Sccd_add_cc_comm_rt;
                                                        //comm amt
                                                        if (_commissiondef.First().Sccd_add_allw_cc)
                                                        {
                                                            _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                        }
                                                    }
                                                }
                                            }

                                        }
                                    }
                                }
                                //invoice qty check
                                else
                                {
                                    //default qty
                                    //get invoice
                                    InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);
                                    if ((_commissiondef.First().Sccd_add_from_qty >= 1 && _commissiondef.First().Sccd_add_to_qty >= 1000))
                                    {
                                        _adCommissionRate = _commissiondef.First().Sccd_add_cc_comm_rt;
                                        //comm amt
                                        if (_commissiondef.First().Sccd_add_allw_cc)
                                        {
                                            _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                        }
                                    }
                                    //check qty
                                    else
                                    {
                                        List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                        //item wise qty
                                        if (_commissiondef.First().Sccd_add_allow_comb)
                                        {
                                            foreach (InvoiceItem _itm in _itmDetails)
                                            {
                                                if (_commissiondef.First().Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.First().Sccd_add_to_qty >= _itm.Sad_qty)
                                                {
                                                    _adCommissionRate = _commissiondef.First().Sccd_add_cc_comm_rt;
                                                    //comm amt
                                                    if (_commissiondef.First().Sccd_add_allw_cc)
                                                    {
                                                        _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                    }
                                                    break;
                                                }
                                            }
                                        }

                                        //all qty
                                        else
                                        {
                                            decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                            if (_commissiondef.First().Sccd_add_from_qty <= _qtyTotal && _commissiondef.First().Sccd_add_to_qty >= _qtyTotal)
                                            {
                                                _adCommissionRate = _commissiondef.First().Sccd_add_cc_comm_rt;
                                                //comm amt
                                                if (_commissiondef.First().Sccd_add_allw_cc)
                                                {
                                                    _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "ADVAN":


                        //add sachith   //modified kapila
                        if (_empType == "CE")
                        {
                            if (_commissiondefCE != null)
                            {
                                _cecommissionAmt = _commissiondefCE.Sccd_cash_ecomm;
                                _cecommissionRt = _commissiondefCE.Sccd_cash_ecomm_rt;
                                _commissionAmt = _commissiondefCE.Sccd_cash_comm;
                                _commissionRt = _commissiondefCE.Sccd_cash_comm_rt;
                            }
                            else
                            {
                                _cecommissionAmt = 0;
                                _cecommissionRt = 0;
                                _commissionAmt = 0;
                                _commissionRt = 0;
                            }
                        }
                        else
                        {
                            _commissionAmt = _commissiondef.First().Sccd_cash_comm;
                            _commissionRt = _commissiondef.First().Sccd_cash_comm_rt;
                        }
                        if (_commissiondef.First().Sccd_add_cash_comm_rt > 0 || _commissiondef.First().Sccd_add_allw_cash)
                        {

                            if (!string.IsNullOrEmpty(_commissiondef.First().Sccd_app_cust_tp))
                            {
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);

                                //customer type check
                                List<MasterBusinessEntity> _customer = _salesDAL.GetCustomerDetailList(_invHrd.Sah_com, _invHrd.Sah_cus_cd, null, null, "C");
                                if (_customer != null && _customer.Count > 0)
                                {
                                    if (_customer[0].Mbe_cate == _commissiondef.First().Sccd_app_cust_tp)
                                    {
                                        //default qty
                                        if ((_commissiondef.First().Sccd_add_from_qty >= 1 && _commissiondef.First().Sccd_add_to_qty >= 1000))
                                        {
                                            _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                            //comm amt
                                            if (_commissiondef.First().Sccd_add_allw_cash)
                                            {
                                                _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                            }
                                        }
                                        //check qty
                                        else
                                        {
                                            List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                            //item wise qty
                                            if (_commissiondef.First().Sccd_add_allow_comb)
                                            {
                                                foreach (InvoiceItem _itm in _itmDetails)
                                                {
                                                    if (_commissiondef.First().Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.First().Sccd_add_to_qty >= _itm.Sad_qty)
                                                    {
                                                        _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                                        //comm amt
                                                        if (_commissiondef.First().Sccd_add_allw_cash)
                                                        {
                                                            _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                            //all qty
                                            else
                                            {
                                                decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                                if (_commissiondef.First().Sccd_add_from_qty <= _qtyTotal && _commissiondef.First().Sccd_add_to_qty >= _qtyTotal)
                                                {
                                                    _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                                    //comm amt
                                                    if (_commissiondef.First().Sccd_add_allw_cash)
                                                    {
                                                        _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                            //invoice qty check
                            else
                            {
                                //default qty
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);
                                if ((_commissiondef.First().Sccd_add_from_qty >= 1 && _commissiondef.First().Sccd_add_to_qty >= 1000))
                                {
                                    _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                    //comm amt
                                    if (_commissiondef.First().Sccd_add_allw_cash)
                                    {
                                        _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                    }
                                }
                                //check qty
                                else
                                {
                                    List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                    //item wise qty
                                    if (_commissiondef.First().Sccd_add_allow_comb)
                                    {
                                        foreach (InvoiceItem _itm in _itmDetails)
                                        {
                                            if (_commissiondef.First().Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.First().Sccd_add_to_qty >= _itm.Sad_qty)
                                            {
                                                _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                                //comm amt
                                                if (_commissiondef.First().Sccd_add_allw_cash)
                                                {
                                                    _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                }
                                                break;
                                            }
                                        }
                                    }

                                    //all qty
                                    else
                                    {
                                        decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                        if (_commissiondef.First().Sccd_add_from_qty <= _qtyTotal && _commissiondef.First().Sccd_add_to_qty >= _qtyTotal)
                                        {
                                            _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                            //comm amt
                                            if (_commissiondef.First().Sccd_add_allw_cash)
                                            {
                                                _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "CRNOTE":


                        //add sachith   //modified kapila
                        if (_empType == "CE")
                        {
                            if (_commissiondefCE != null)
                            {
                                _cecommissionAmt = _commissiondefCE.Sccd_cash_ecomm;
                                _cecommissionRt = _commissiondefCE.Sccd_cash_ecomm_rt;
                                _commissionAmt = _commissiondefCE.Sccd_cash_comm;
                                _commissionRt = _commissiondefCE.Sccd_cash_comm_rt;
                            }
                            else
                            {
                                _cecommissionAmt = 0;
                                _cecommissionRt = 0;
                                _commissionAmt = 0;
                                _commissionRt = 0;
                            }
                        }
                        else
                        {
                            _commissionAmt = _commissiondef.First().Sccd_cash_comm;
                            _commissionRt = _commissiondef.First().Sccd_cash_comm_rt;
                        }
                        if (_commissiondef.First().Sccd_add_cash_comm_rt > 0 || _commissiondef.First().Sccd_add_allw_cash)
                        {

                            if (!string.IsNullOrEmpty(_commissiondef.First().Sccd_app_cust_tp))
                            {
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);

                                //customer type check
                                List<MasterBusinessEntity> _customer = _salesDAL.GetCustomerDetailList(_invHrd.Sah_com, _invHrd.Sah_cus_cd, null, null, "C");
                                if (_customer != null && _customer.Count > 0)
                                {
                                    if (_customer[0].Mbe_cate == _commissiondef.First().Sccd_app_cust_tp)
                                    {
                                        //default qty
                                        if ((_commissiondef.First().Sccd_add_from_qty >= 1 && _commissiondef.First().Sccd_add_to_qty >= 1000))
                                        {
                                            _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                            //comm amt
                                            if (_commissiondef.First().Sccd_add_allw_cash)
                                            {
                                                _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                            }
                                        }
                                        //check qty
                                        else
                                        {
                                            List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                            //item wise qty
                                            if (_commissiondef.First().Sccd_add_allow_comb)
                                            {
                                                foreach (InvoiceItem _itm in _itmDetails)
                                                {
                                                    if (_commissiondef.First().Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.First().Sccd_add_to_qty >= _itm.Sad_qty)
                                                    {
                                                        _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                                        //comm amt
                                                        if (_commissiondef.First().Sccd_add_allw_cash)
                                                        {
                                                            _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                            //all qty
                                            else
                                            {
                                                decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                                if (_commissiondef.First().Sccd_add_from_qty <= _qtyTotal && _commissiondef.First().Sccd_add_to_qty >= _qtyTotal)
                                                {
                                                    _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                                    //comm amt
                                                    if (_commissiondef.First().Sccd_add_allw_cash)
                                                    {
                                                        _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                            //invoice qty check
                            else
                            {
                                //default qty
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);
                                if ((_commissiondef.First().Sccd_add_from_qty >= 1 && _commissiondef.First().Sccd_add_to_qty >= 1000))
                                {
                                    _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                    //comm amt
                                    if (_commissiondef.First().Sccd_add_allw_cash)
                                    {
                                        _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                    }
                                }
                                //check qty
                                else
                                {
                                    List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                    //item wise qty
                                    if (_commissiondef.First().Sccd_add_allow_comb)
                                    {
                                        foreach (InvoiceItem _itm in _itmDetails)
                                        {
                                            if (_commissiondef.First().Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.First().Sccd_add_to_qty >= _itm.Sad_qty)
                                            {
                                                _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                                //comm amt
                                                if (_commissiondef.First().Sccd_add_allw_cash)
                                                {
                                                    _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                }
                                                break;
                                            }
                                        }
                                    }

                                    //all qty
                                    else
                                    {
                                        decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                        if (_commissiondef.First().Sccd_add_from_qty <= _qtyTotal && _commissiondef.First().Sccd_add_to_qty >= _qtyTotal)
                                        {
                                            _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                            //comm amt
                                            if (_commissiondef.First().Sccd_add_allw_cash)
                                            {
                                                _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        break;
                    case "CHEQUE":



                        //add sachith   //modified kapila
                        if (_empType == "CE")
                        {
                            if (_commissiondefCE != null)
                            {
                                _cecommissionAmt = _commissiondefCE.Sccd_chq_ecomm;
                                _cecommissionRt = _commissiondefCE.Sccd_chq_ecomm_rt;
                                _commissionAmt = _commissiondefCE.Sccd_cash_comm;
                                _commissionRt = _commissiondefCE.Sccd_chq_comm_rt;
                            }
                            else
                            {
                                _cecommissionAmt = 0;
                                _cecommissionRt = 0;
                                _commissionAmt = 0;
                                _commissionRt = 0;
                            }
                        }
                        else
                        {
                            if (_commissiondef.Count > 0)
                            {
                                _commissionAmt = _commissiondef.First().Sccd_cash_comm;
                                _commissionRt = _commissiondef.First().Sccd_chq_comm_rt;
                            }

                        }
                        if (_commissiondef.Count > 0)
                        {


                            if (_commissiondef.First().Sccd_add_cash_comm_rt > 0 || _commissiondef.First().Sccd_add_allw_cash)
                            {

                                if (!string.IsNullOrEmpty(_commissiondef.First().Sccd_app_cust_tp))
                                {
                                    //get invoice
                                    InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);

                                    //customer type check
                                    List<MasterBusinessEntity> _customer = _salesDAL.GetCustomerDetailList(_invHrd.Sah_com, _invHrd.Sah_cus_cd, null, null, "C");
                                    if (_customer != null && _customer.Count > 0)
                                    {
                                        if (_customer[0].Mbe_cate == _commissiondef.First().Sccd_app_cust_tp)
                                        {
                                            //default qty
                                            if ((_commissiondef.First().Sccd_add_from_qty >= 1 && _commissiondef.First().Sccd_add_to_qty >= 1000))
                                            {
                                                _adCommissionRate = _commissiondef.First().Sccd_add_chq_comm_rt;
                                                //comm amt
                                                if (_commissiondef.First().Sccd_add_allw_chq)
                                                {
                                                    _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                }
                                            }
                                            //check qty
                                            else
                                            {
                                                List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                                //item wise qty
                                                if (_commissiondef.First().Sccd_add_allow_comb)
                                                {
                                                    foreach (InvoiceItem _itm in _itmDetails)
                                                    {
                                                        if (_commissiondef.First().Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.First().Sccd_add_to_qty >= _itm.Sad_qty)
                                                        {
                                                            _adCommissionRate = _commissiondef.First().Sccd_add_chq_comm_rt;
                                                            //comm amt
                                                            if (_commissiondef.First().Sccd_add_allw_chq)
                                                            {
                                                                _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                            }
                                                            break;
                                                        }
                                                    }
                                                }
                                                //all qty
                                                else
                                                {
                                                    decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                                    if (_commissiondef.First().Sccd_add_from_qty <= _qtyTotal && _commissiondef.First().Sccd_add_to_qty >= _qtyTotal)
                                                    {
                                                        _adCommissionRate = _commissiondef.First().Sccd_add_chq_comm_rt;
                                                        //comm amt
                                                        if (_commissiondef.First().Sccd_add_allw_chq)
                                                        {
                                                            _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                        }
                                                    }
                                                }
                                            }

                                        }
                                    }
                                }
                                //invoice qty check
                                else
                                {
                                    //default qty
                                    //get invoice
                                    InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);
                                    if ((_commissiondef.First().Sccd_add_from_qty >= 1 && _commissiondef.First().Sccd_add_to_qty >= 1000))
                                    {
                                        _adCommissionRate = _commissiondef.First().Sccd_add_chq_comm_rt;
                                        //comm amt
                                        if (_commissiondef.First().Sccd_add_allw_chq)
                                        {
                                            _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                        }
                                    }
                                    //check qty
                                    else
                                    {
                                        List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                        //item wise qty
                                        if (_commissiondef.First().Sccd_add_allow_comb)
                                        {
                                            foreach (InvoiceItem _itm in _itmDetails)
                                            {
                                                if (_commissiondef.First().Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.First().Sccd_add_to_qty >= _itm.Sad_qty)
                                                {
                                                    _adCommissionRate = _commissiondef.First().Sccd_add_chq_comm_rt;
                                                    //comm amt
                                                    if (_commissiondef.First().Sccd_add_allw_chq)
                                                    {
                                                        _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                    }
                                                    break;
                                                }
                                            }
                                        }

                                        //all qty
                                        else
                                        {
                                            decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                            if (_commissiondef.First().Sccd_add_from_qty <= _qtyTotal && _commissiondef.First().Sccd_add_to_qty >= _qtyTotal)
                                            {
                                                _adCommissionRate = _commissiondef.First().Sccd_add_chq_comm_rt;
                                                //comm amt
                                                if (_commissiondef.First().Sccd_add_allw_chq)
                                                {
                                                    _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "LORE":


                        //add sachith   //modified kapila
                        if (_empType == "CE")
                        {
                            if (_commissiondefCE != null)
                            {
                                _cecommissionAmt = _commissiondefCE.Sccd_cash_ecomm;
                                _cecommissionRt = _commissiondefCE.Sccd_cash_ecomm_rt;
                                _commissionAmt = _commissiondefCE.Sccd_cash_comm;
                                _commissionRt = _commissiondefCE.Sccd_cash_comm_rt;
                            }
                            else
                            {
                                _cecommissionAmt = 0;
                                _cecommissionRt = 0;
                                _commissionAmt = 0;
                                _commissionRt = 0;
                            }
                        }
                        else
                        {
                            _commissionAmt = _commissiondef.First().Sccd_cash_comm;
                            _commissionRt = _commissiondef.First().Sccd_cash_comm_rt;
                        }
                        if (_commissiondef.First().Sccd_add_cash_comm_rt > 0 || _commissiondef.First().Sccd_add_allw_cash)
                        {

                            if (!string.IsNullOrEmpty(_commissiondef.First().Sccd_app_cust_tp))
                            {
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);

                                //customer type check
                                List<MasterBusinessEntity> _customer = _salesDAL.GetCustomerDetailList(_invHrd.Sah_com, _invHrd.Sah_cus_cd, null, null, "C");
                                if (_customer != null && _customer.Count > 0)
                                {
                                    if (_customer[0].Mbe_cate == _commissiondef.First().Sccd_app_cust_tp)
                                    {
                                        //default qty
                                        if ((_commissiondef.First().Sccd_add_from_qty >= 1 && _commissiondef.First().Sccd_add_to_qty >= 1000))
                                        {
                                            _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                            //comm amt
                                            if (_commissiondef.First().Sccd_add_allw_cash)
                                            {
                                                _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                            }
                                        }
                                        //check qty
                                        else
                                        {
                                            List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                            //item wise qty
                                            if (_commissiondef.First().Sccd_add_allow_comb)
                                            {
                                                foreach (InvoiceItem _itm in _itmDetails)
                                                {
                                                    if (_commissiondef.First().Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.First().Sccd_add_to_qty >= _itm.Sad_qty)
                                                    {
                                                        _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                                        //comm amt
                                                        if (_commissiondef.First().Sccd_add_allw_cash)
                                                        {
                                                            _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                            //all qty
                                            else
                                            {
                                                decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                                if (_commissiondef.First().Sccd_add_from_qty <= _qtyTotal && _commissiondef.First().Sccd_add_to_qty >= _qtyTotal)
                                                {
                                                    _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                                    //comm amt
                                                    if (_commissiondef.First().Sccd_add_allw_cash)
                                                    {
                                                        _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                            //invoice qty check
                            else
                            {
                                //default qty
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);
                                if ((_commissiondef.First().Sccd_add_from_qty >= 1 && _commissiondef.First().Sccd_add_to_qty >= 1000))
                                {
                                    _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                    //comm amt
                                    if (_commissiondef.First().Sccd_add_allw_cash)
                                    {
                                        _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                    }
                                }
                                //check qty
                                else
                                {
                                    List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                    //item wise qty
                                    if (_commissiondef.First().Sccd_add_allow_comb)
                                    {
                                        foreach (InvoiceItem _itm in _itmDetails)
                                        {
                                            if (_commissiondef.First().Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.First().Sccd_add_to_qty >= _itm.Sad_qty)
                                            {
                                                _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                                //comm amt
                                                if (_commissiondef.First().Sccd_add_allw_cash)
                                                {
                                                    _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                }
                                                break;
                                            }
                                        }
                                    }

                                    //all qty
                                    else
                                    {
                                        decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                        if (_commissiondef.First().Sccd_add_from_qty <= _qtyTotal && _commissiondef.First().Sccd_add_to_qty >= _qtyTotal)
                                        {
                                            _adCommissionRate = _commissiondef.First().Sccd_add_chq_comm_rt;
                                            //comm amt
                                            if (_commissiondef.First().Sccd_add_allw_cash)
                                            {
                                                _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "GVO":


                        //add sachith   //modified kapila
                        if (_empType == "CE")
                        {
                            if (_commissiondefCE != null)
                            {
                                _cecommissionAmt = _commissiondefCE.Sccd_cash_ecomm;
                                _cecommissionRt = _commissiondefCE.Sccd_cash_ecomm_rt;
                                _commissionAmt = _commissiondefCE.Sccd_cash_comm;
                                _commissionRt = _commissiondefCE.Sccd_cash_comm_rt;
                            }
                            else
                            {
                                _cecommissionAmt = 0;
                                _cecommissionRt = 0;
                                _commissionAmt = 0;
                                _commissionRt = 0;
                            }
                        }
                        else
                        {
                            _commissionAmt = _commissiondef.First().Sccd_cash_comm;
                            _commissionRt = _commissiondef.First().Sccd_cash_comm_rt;
                        }
                        if (_commissiondef.First().Sccd_add_cash_comm_rt > 0 || _commissiondef.First().Sccd_add_allw_cash)
                        {

                            if (!string.IsNullOrEmpty(_commissiondef.First().Sccd_app_cust_tp))
                            {
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);

                                //customer type check
                                List<MasterBusinessEntity> _customer = _salesDAL.GetCustomerDetailList(_invHrd.Sah_com, _invHrd.Sah_cus_cd, null, null, "C");
                                if (_customer != null && _customer.Count > 0)
                                {
                                    if (_customer[0].Mbe_cate == _commissiondef.First().Sccd_app_cust_tp)
                                    {
                                        //default qty
                                        if ((_commissiondef.First().Sccd_add_from_qty >= 1 && _commissiondef.First().Sccd_add_to_qty >= 1000))
                                        {
                                            _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                            //comm amt
                                            if (_commissiondef.First().Sccd_add_allw_cash)
                                            {
                                                _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                            }
                                        }
                                        //check qty
                                        else
                                        {
                                            List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                            //item wise qty
                                            if (_commissiondef.First().Sccd_add_allow_comb)
                                            {
                                                foreach (InvoiceItem _itm in _itmDetails)
                                                {
                                                    if (_commissiondef.First().Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.First().Sccd_add_to_qty >= _itm.Sad_qty)
                                                    {
                                                        _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                                        //comm amt
                                                        if (_commissiondef.First().Sccd_add_allw_cash)
                                                        {
                                                            _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                            //all qty
                                            else
                                            {
                                                decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                                if (_commissiondef.First().Sccd_add_from_qty <= _qtyTotal && _commissiondef.First().Sccd_add_to_qty >= _qtyTotal)
                                                {
                                                    _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                                    //comm amt
                                                    if (_commissiondef.First().Sccd_add_allw_cash)
                                                    {
                                                        _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                            //invoice qty check
                            else
                            {
                                //default qty
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);
                                if ((_commissiondef.First().Sccd_add_from_qty >= 1 && _commissiondef.First().Sccd_add_to_qty >= 1000))
                                {
                                    _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                    //comm amt
                                    if (_commissiondef.First().Sccd_add_allw_cash)
                                    {
                                        _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                    }
                                }
                                //check qty
                                else
                                {
                                    List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                    //item wise qty
                                    if (_commissiondef.First().Sccd_add_allow_comb)
                                    {
                                        foreach (InvoiceItem _itm in _itmDetails)
                                        {
                                            if (_commissiondef.First().Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.First().Sccd_add_to_qty >= _itm.Sad_qty)
                                            {
                                                _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                                //comm amt
                                                if (_commissiondef.First().Sccd_add_allw_cash)
                                                {
                                                    _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                }
                                                break;
                                            }
                                        }
                                    }

                                    //all qty
                                    else
                                    {
                                        decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                        if (_commissiondef.First().Sccd_add_from_qty <= _qtyTotal && _commissiondef.First().Sccd_add_to_qty >= _qtyTotal)
                                        {
                                            _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                            //comm amt
                                            if (_commissiondef.First().Sccd_add_allw_cash)
                                            {
                                                _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "GVS":


                        //add sachith   //modified kapila
                        if (_empType == "CE")
                        {
                            if (_commissiondefCE != null)
                            {
                                _cecommissionAmt = _commissiondefCE.Sccd_cash_ecomm;
                                _cecommissionRt = _commissiondefCE.Sccd_cash_ecomm_rt;
                                _commissionAmt = _commissiondefCE.Sccd_cash_comm;
                                _commissionRt = _commissiondefCE.Sccd_cash_comm_rt;
                            }
                            else
                            {
                                _cecommissionAmt = 0;
                                _cecommissionRt = 0;
                                _commissionAmt = 0;
                                _commissionRt = 0;
                            }
                        }
                        else
                        {
                            _commissionAmt = _commissiondef.First().Sccd_cash_comm;
                            _commissionRt = _commissiondef.First().Sccd_cash_comm_rt;
                        }
                        if (_commissiondef.First().Sccd_add_cash_comm_rt > 0 || _commissiondef.First().Sccd_add_allw_cash)
                        {

                            if (!string.IsNullOrEmpty(_commissiondef.First().Sccd_app_cust_tp))
                            {
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);

                                //customer type check
                                List<MasterBusinessEntity> _customer = _salesDAL.GetCustomerDetailList(_invHrd.Sah_com, _invHrd.Sah_cus_cd, null, null, "C");
                                if (_customer != null && _customer.Count > 0)
                                {
                                    if (_customer[0].Mbe_cate == _commissiondef.First().Sccd_app_cust_tp)
                                    {
                                        //default qty
                                        if ((_commissiondef.First().Sccd_add_from_qty >= 1 && _commissiondef.First().Sccd_add_to_qty >= 1000))
                                        {
                                            _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                            //comm amt
                                            if (_commissiondef.First().Sccd_add_allw_cash)
                                            {
                                                _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                            }
                                        }
                                        //check qty
                                        else
                                        {
                                            List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                            //item wise qty
                                            if (_commissiondef.First().Sccd_add_allow_comb)
                                            {
                                                foreach (InvoiceItem _itm in _itmDetails)
                                                {
                                                    if (_commissiondef.First().Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.First().Sccd_add_to_qty >= _itm.Sad_qty)
                                                    {
                                                        _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                                        //comm amt
                                                        if (_commissiondef.First().Sccd_add_allw_cash)
                                                        {
                                                            _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                            //all qty
                                            else
                                            {
                                                decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                                if (_commissiondef.First().Sccd_add_from_qty <= _qtyTotal && _commissiondef.First().Sccd_add_to_qty >= _qtyTotal)
                                                {
                                                    _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                                    //comm amt
                                                    if (_commissiondef.First().Sccd_add_allw_cash)
                                                    {
                                                        _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                            //invoice qty check
                            else
                            {
                                //default qty
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);
                                if ((_commissiondef.First().Sccd_add_from_qty >= 1 && _commissiondef.First().Sccd_add_to_qty >= 1000))
                                {
                                    _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                    //comm amt
                                    if (_commissiondef.First().Sccd_add_allw_cash)
                                    {
                                        _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                    }
                                }
                                //check qty
                                else
                                {
                                    List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                    //item wise qty
                                    if (_commissiondef.First().Sccd_add_allow_comb)
                                    {
                                        foreach (InvoiceItem _itm in _itmDetails)
                                        {
                                            if (_commissiondef.First().Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.First().Sccd_add_to_qty >= _itm.Sad_qty)
                                            {
                                                _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                                //comm amt
                                                if (_commissiondef.First().Sccd_add_allw_cash)
                                                {
                                                    _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                }
                                                break;
                                            }
                                        }
                                    }

                                    //all qty
                                    else
                                    {
                                        decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                        if (_commissiondef.First().Sccd_add_from_qty <= _qtyTotal && _commissiondef.First().Sccd_add_to_qty >= _qtyTotal)
                                        {
                                            _adCommissionRate = _commissiondef.First().Sccd_add_cash_comm_rt;
                                            //comm amt
                                            if (_commissiondef.First().Sccd_add_allw_cash)
                                            {
                                                _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "DEBT":


                        //add sachith   //modified kapila
                        if (_empType == "CE")
                        {
                            if (_commissiondefCE != null)
                            {
                                _cecommissionAmt = _commissiondefCE.Sccd_dbc_ecomm;
                                _cecommissionRt = _commissiondefCE.Sccd_dbc_ecomm_rt;
                                _commissionAmt = _commissiondefCE.Sccd_cash_comm;
                                _commissionRt = _commissiondefCE.Sccd_dbc_comm_rt;
                            }
                            else
                            {
                                _cecommissionAmt = 0;
                                _cecommissionRt = 0;
                                _commissionAmt = 0;
                                _commissionRt = 0;
                            }
                        }
                        else
                        {
                            _commissionAmt = _commissiondef.First().Sccd_cash_comm;
                            _commissionRt = _commissiondef.First().Sccd_dbc_comm_rt;
                        }
                        if (_commissiondef.First().Sccd_add_cash_comm_rt > 0 || _commissiondef.First().Sccd_add_allw_cash)
                        {

                            if (!string.IsNullOrEmpty(_commissiondef.First().Sccd_app_cust_tp))
                            {
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);

                                //customer type check
                                List<MasterBusinessEntity> _customer = _salesDAL.GetCustomerDetailList(_invHrd.Sah_com, _invHrd.Sah_cus_cd, null, null, "C");
                                if (_customer != null && _customer.Count > 0)
                                {
                                    if (_customer[0].Mbe_cate == _commissiondef.First().Sccd_app_cust_tp)
                                    {
                                        //default qty
                                        if ((_commissiondef.First().Sccd_add_from_qty >= 1 && _commissiondef.First().Sccd_add_to_qty >= 1000))
                                        {
                                            _adCommissionRate = _commissiondef.First().Sccd_add_dbc_comm_rt;
                                            //comm amt
                                            if (_commissiondef.First().Sccd_add_allw_dbc)
                                            {
                                                _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                            }
                                        }
                                        //check qty
                                        else
                                        {
                                            List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                            //item wise qty
                                            if (_commissiondef.First().Sccd_add_allow_comb)
                                            {
                                                foreach (InvoiceItem _itm in _itmDetails)
                                                {
                                                    if (_commissiondef.First().Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.First().Sccd_add_to_qty >= _itm.Sad_qty)
                                                    {
                                                        _adCommissionRate = _commissiondef.First().Sccd_add_dbc_comm_rt;
                                                        //comm amt
                                                        if (_commissiondef.First().Sccd_add_allw_dbc)
                                                        {
                                                            _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                            //all qty
                                            else
                                            {
                                                decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                                if (_commissiondef.First().Sccd_add_from_qty <= _qtyTotal && _commissiondef.First().Sccd_add_to_qty >= _qtyTotal)
                                                {
                                                    _adCommissionRate = _commissiondef.First().Sccd_add_dbc_comm_rt;
                                                    //comm amt
                                                    if (_commissiondef.First().Sccd_add_allw_dbc)
                                                    {
                                                        _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                            //invoice qty check
                            else
                            {
                                //default qty
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);
                                if ((_commissiondef.First().Sccd_add_from_qty >= 1 && _commissiondef.First().Sccd_add_to_qty >= 1000))
                                {
                                    _adCommissionRate = _commissiondef.First().Sccd_add_dbc_comm_rt;
                                    //comm amt
                                    if (_commissiondef.First().Sccd_add_allw_dbc)
                                    {
                                        _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                    }
                                }
                                //check qty
                                else
                                {
                                    List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                    //item wise qty
                                    if (_commissiondef.First().Sccd_add_allow_comb)
                                    {
                                        foreach (InvoiceItem _itm in _itmDetails)
                                        {
                                            if (_commissiondef.First().Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.First().Sccd_add_to_qty >= _itm.Sad_qty)
                                            {
                                                _adCommissionRate = _commissiondef.First().Sccd_add_dbc_comm_rt;
                                                //comm amt
                                                if (_commissiondef.First().Sccd_add_allw_dbc)
                                                {
                                                    _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                }
                                                break;
                                            }
                                        }
                                    }

                                    //all qty
                                    else
                                    {
                                        decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                        if (_commissiondef.First().Sccd_add_from_qty <= _qtyTotal && _commissiondef.First().Sccd_add_to_qty >= _qtyTotal)
                                        {
                                            _adCommissionRate = _commissiondef.First().Sccd_add_dbc_comm_rt;
                                            //comm amt
                                            if (_commissiondef.First().Sccd_add_allw_dbc)
                                            {
                                                _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    default:


                        //add sachith   //modified kapila
                        if (_empType == "CE")
                        {
                            if (_commissiondefCE != null)
                            {
                                _cecommissionAmt = _commissiondefCE.Sccd_oth_ecomm;
                                _cecommissionRt = _commissiondefCE.Sccd_oth_ecomm_rt;
                                _commissionAmt = _commissiondefCE.Sccd_cash_comm;
                                _commissionRt = _commissiondefCE.Sccd_oth_comm_rt;
                            }
                            else
                            {
                                _cecommissionAmt = 0;
                                _cecommissionRt = 0;
                                _commissionAmt = 0;
                                _commissionRt = 0;
                            }
                        }
                        else
                        {
                            _commissionAmt = _commissiondef.First().Sccd_cash_comm;
                            _commissionRt = _commissiondef.First().Sccd_oth_comm_rt;
                        }
                        if (_commissiondef.First().Sccd_add_cash_comm_rt > 0 || _commissiondef.First().Sccd_add_allw_cash)
                        {

                            if (!string.IsNullOrEmpty(_commissiondef.First().Sccd_app_cust_tp))
                            {
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);

                                //customer type check
                                List<MasterBusinessEntity> _customer = _salesDAL.GetCustomerDetailList(_invHrd.Sah_com, _invHrd.Sah_cus_cd, null, null, "C");
                                if (_customer != null && _customer.Count > 0)
                                {
                                    if (_customer[0].Mbe_cate == _commissiondef.First().Sccd_app_cust_tp)
                                    {
                                        //default qty
                                        if ((_commissiondef.First().Sccd_add_from_qty >= 1 && _commissiondef.First().Sccd_add_to_qty >= 1000))
                                        {
                                            _adCommissionRate = _commissiondef.First().Sccd_add_oth_comm_rt;
                                            //comm amt
                                            if (_commissiondef.First().Sccd_add_allw_oth)
                                            {
                                                _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                            }
                                        }
                                        //check qty
                                        else
                                        {
                                            List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                            //item wise qty
                                            if (_commissiondef.First().Sccd_add_allow_comb)
                                            {
                                                foreach (InvoiceItem _itm in _itmDetails)
                                                {
                                                    if (_commissiondef.First().Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.First().Sccd_add_to_qty >= _itm.Sad_qty)
                                                    {
                                                        _adCommissionRate = _commissiondef.First().Sccd_add_oth_comm_rt;
                                                        //comm amt
                                                        if (_commissiondef.First().Sccd_add_allw_oth)
                                                        {
                                                            _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                            //all qty
                                            else
                                            {
                                                decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                                if (_commissiondef.First().Sccd_add_from_qty <= _qtyTotal && _commissiondef.First().Sccd_add_to_qty >= _qtyTotal)
                                                {
                                                    _adCommissionRate = _commissiondef.First().Sccd_add_oth_comm_rt;
                                                    //comm amt
                                                    if (_commissiondef.First().Sccd_add_allw_oth)
                                                    {
                                                        _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                            //invoice qty check
                            else
                            {
                                //default qty
                                //get invoice
                                InvoiceHeader _invHrd = _salesDAL.GetInvoiceHeader(_mode.Sard_inv_no);
                                if ((_commissiondef.First().Sccd_add_from_qty >= 1 && _commissiondef.First().Sccd_add_to_qty >= 1000))
                                {
                                    _adCommissionRate = _commissiondef.First().Sccd_add_oth_comm_rt;
                                    //comm amt
                                    if (_commissiondef.First().Sccd_add_allw_oth)
                                    {
                                        _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                    }
                                }
                                //check qty
                                else
                                {
                                    List<InvoiceItem> _itmDetails = _salesDAL.GetAllInvoiceItems(_invHrd.Sah_inv_no);

                                    //item wise qty
                                    if (_commissiondef.First().Sccd_add_allow_comb)
                                    {
                                        foreach (InvoiceItem _itm in _itmDetails)
                                        {
                                            if (_commissiondef.First().Sccd_add_from_qty <= _itm.Sad_qty && _commissiondef.First().Sccd_add_to_qty >= _itm.Sad_qty)
                                            {
                                                _adCommissionRate = _commissiondef.First().Sccd_add_oth_comm_rt;
                                                //comm amt
                                                if (_commissiondef.First().Sccd_add_allw_oth)
                                                {
                                                    _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                                }
                                                break;
                                            }
                                        }
                                    }

                                    //all qty
                                    else
                                    {
                                        decimal _qtyTotal = _itmDetails.Sum(x => x.Sad_qty);
                                        if (_commissiondef.First().Sccd_add_from_qty <= _qtyTotal && _commissiondef.First().Sccd_add_to_qty >= _qtyTotal)
                                        {
                                            _adCommissionRate = _commissiondef.First().Sccd_add_oth_comm_rt;
                                            //comm amt
                                            if (_commissiondef.First().Sccd_add_allw_oth)
                                            {
                                                _adCommissionAmt = _commissiondef.First().Sccd_add_comm;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                }

                decimal _commission = (_beforeCommission * _commissionRt / 100) + _commissionAmt;
                //add sachith
                decimal _cecommission = (_beforeCommission * _cecommissionRt / 100) + _cecommissionAmt;

                SaleCommission _one = new SaleCommission();

                if (_invoiceType == "CRED")
                {
                    _one.Sac_pay_mode = "CRED COMM";
                }
                else if (_pmode == "CRCD_POMO")
                {
                    _one.Sac_pay_mode = "CRED";
                }
                else
                {
                    _one.Sac_pay_mode = _pmode;
                }
                _one.Sac_itm_cd = _item;
                _one.Sac_comm_rate = _commissionRt;
                _one.Sac_comm_rate_final = _commissionRt;       //kapila
                _one.Sac_comm_amt = Convert.ToInt32(_commission);
                _one.Sac_comm_amt_final = Convert.ToInt32(_commission); //kapila
                _one.Sac_calc_on = Convert.ToString(_beforeCommission);
                _one.Sac_itm_line = _lineno;
                _one.Sac_comm_line = _commissionLineno;

                _one.Sac_add_comm_rate = _adCommissionRate;
                _one.Sac_add_comm = _adCommissionAmt;
                if (_commissiondef.Count > 0)
                {
                    _one.Sac_add_epf = _commissiondef.First().Sccd_add_epf_apply;
                    _one.sac_comm_cd = _commissiondef.First().Sccd_cd;
                    _one.sac_comm_circular = _commissiondef.First().scch_circular;


                }


                //add sachith
                //modified kapila
                _one.Sac_ce_rate = _cecommissionRt;
                _one.Sac_ce_amt = _cecommission;

                _list.Add(_one);

            }
            return _list;
        }
     
        public Int32 Delete_inv_type(string com, string customerCd, string invType)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            Int32 effect = 0;

            try
            {
                effect = _salesDAL.Delete_inv_type(com, customerCd, invType);
                _salesDAL.TransactionCommit();
                _salesDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                effect = 0;
                _salesDAL.TransactionRollback();
                _salesDAL.ConnectionClose();

            }
            return effect;
        }
        public Int32 UpdateSatProjectKitDetails(int lineNo, string Boqno, string kitCd, string kitDesc, string kitModel, decimal qty, int active, string modBy, string session, decimal unitprice, decimal unitCost, decimal totalCost, decimal totalPrice, int seq, string rmk)
        {
            Int32 _effect = 0;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _effect = _salesDAL.UpdateSatProjectKitDetails(lineNo, Boqno, kitCd, kitDesc, kitModel, qty, active, modBy, session, unitprice, unitCost, totalCost, totalPrice, seq, rmk);
                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();
            }
            catch (Exception e)
            {
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                _effect = -1;
            }
            return _effect;
        }
       
        //Udesh 03-Nov-2018
        public DataTable Get_GV_Page_Availability(string _cusCode, string _pc, int _pageNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_GV_Page_Availability(_cusCode, _pc, _pageNo);
        }

        public DataTable loyaltyPointEarning(string _com, string _pc, string _itemCode, string _cat1, string _cat2, string _cat3, string _cat4, string _cat5,
            string _brand, string _model, string _customer, DateTime _fromDate, DateTime _toDate, string _rptType, string _userID)
        {
            //Wimal @ 16/Jan/2018 
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("loyalty_point_earning_Rpt") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.loyaltyPointEarning(_com, _pc, _itemCode, _cat1, _cat2, _cat3, _cat4, _cat5,
             _brand, _model, _customer, _fromDate, _toDate, _rptType, _userID);
        }
        public DataTable GetHP_CheckedAccounts(string com, string pc, DataTable _dt)
        {
            //--------Crete by sandaruwan 2019/02/14
            _salesDAL = new SalesDAL();
            DataTable GetHP_CheckedAccounts = _salesDAL.GetHP_CheckedAccounts(com, pc, _dt);
            return GetHP_CheckedAccounts;
        }
   
    }
}

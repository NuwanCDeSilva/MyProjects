using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using FF.BusinessObjects;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;
using FF.WindowsERPClient.Reports.Sales;
using System.IO.Ports;


namespace FF.WindowsERPClient.Sales
{
    public partial class POSInvoiceTouch : Base
    {
        private  Int32 _srchCriteria = 2;

        #region Variables

        private List<InvoiceItem> _invoiceItemList = null; private List<InvoiceItem> _invoiceItemListWithDiscount = null; private List<RecieptItem> _recieptItem = null; private List<RecieptItem> _newRecieptItem = null;
        private MasterBusinessEntity _businessEntity = null; private List<MasterItemComponent> _masterItemComponent = null; private PriceBookLevelRef _priceBookLevelRef = null; private List<PriceBookLevelRef> _priceBookLevelRefList = null;
        private List<PriceDetailRef> _priceDetailRef = null; private MasterBusinessEntity _masterBusinessCompany = null; private List<PriceSerialRef> _MainPriceSerial = null; private List<PriceSerialRef> _tempPriceSerial = null; private List<PriceCombinedItemRef> _MainPriceCombinItem = null; private List<PriceCombinedItemRef> _tempPriceCombinItem = null;
        private bool _isInventoryCombineAdded = false; private Int32 ScanSequanceNo = 0; private List<ReptPickSerials> ScanSerialList = null; private bool IsPriceLevelAllowDoAnyStatus = false; private string WarrantyRemarks = string.Empty; private Int32 WarrantyPeriod = 0; private string ScanSerialNo = string.Empty; private string DefaultItemStatus = string.Empty;
        private List<InvoiceSerial> InvoiceSerialList = null; private List<ReptPickSerials> InventoryCombinItemSerialList = null; private List<ReptPickSerials> PriceCombinItemSerialList = null; private List<ReptPickSerials> BuyBackItemList = null;
        private Int32 _lineNo = 0; private bool _isEditPrice = false; private bool _isEditDiscount = false; private decimal GrndSubTotal = 0; private decimal GrndDiscount = 0; private decimal GrndTax = 0; private decimal _toBePayNewAmount = 0; private bool _isCompleteCode = false;
        public decimal SSPriceBookPrice = 0; public string SSPriceBookSequance = string.Empty; public string SSPriceBookItemSequance = string.Empty; public string SSIsLevelSerialized = string.Empty; public string SSPromotionCode = string.Empty; public string SSCirculerCode = string.Empty; public Int32 SSPRomotionType = 0; public Int32 SSCombineLine = 0;
        private Dictionary<decimal, decimal> ManagerDiscount = null; private CashGeneralEntiryDiscountDef GeneralDiscount = null; private string DefaultBook = string.Empty; private string DefaultLevel = string.Empty; private string DefaultInvoiceType = string.Empty; private string DefaultStatus = string.Empty; private string DefaultBin = string.Empty; private MasterItem _itemdetail = null;
        private List<MasterItemTax> MainTaxConstant = null; private List<ReptPickSerials> _promotionSerial = null; private List<ReptPickSerials> _promotionSerialTemp = null;
        private bool _isBackDate = false; private MasterProfitCenter _MasterProfitCenter = null; private List<PriceDefinitionRef> _PriceDefinitionRef = null; private const string InvoiceBackDateName = "SALESENTRY"; private static int VirtualCounter = 1;
        private bool _isGiftVoucherCheckBoxClick = false; private DataTable MasterChannel = null; private CommonSearch.CommonOutScan _commonOutScan = null; private bool IsToken = false; private bool IsSaleFigureRoundUp = false; private DataTable _tblExecutive = null; private CommonSearch.CommonSearch _commonSearch = null; private bool IsFwdSaleCancelAllowUser = false; private bool IsDlvSaleCancelAllowUser = false; private bool _IsVirtualItem = false; private string technicianCode = string.Empty; private bool _iswhat = false;
        private DataTable _tblPromotor = null;
        private bool _serialMatch = true; private PriortyPriceBook _priorityPriceBook = null;
        private bool _processMinusBalance = false;
        private int _discountSequence;
        private bool _isRegistrationMandatory = false;
        private bool _isNeedRegistrationReciept = false;
        private decimal _totalRegistration = 0;
        ////private List<RegistrationList> _List = new List<RegistrationList>();
        private LoyaltyType _loyaltyType;
        private int _proVouInvcLine = 0;
        private string _proVouInvcItem = string.Empty;
        private Boolean _isGroup = false;
        private DateTime _serverDt = DateTime.Now.Date;
        private bool calculateBankChg = false;
        private Boolean _isStrucBaseTax = false;
        private string _promoType = ""; //kapila 29/12/2016
        #endregion Variables

        #region variables

        private decimal TotalAmount;
        private List<RecieptItem> recieptItemList;
        //private string invoiceType;
        private string invoiceNo;
        // private bool havePayModes;
        private bool isDutyFree;
        private string currancy;
        private decimal currancyAmount;
        private decimal exchangeRate;
        private string cusCode;
        private DateTime date;
        private string mobile;
        private List<InvoiceSerial> serialList;
        private List<InvoiceItem> invoiceItem;
        private List<string> LoyaltyTYpeList = new List<string>();

        private string bank;
        private string branch;
        private string chqNo;
        private DateTime chqExpire;
        private string depBank;
        private string depBranch;
        private bool isZeroAllow = false;
        private bool isPromotion;
        private bool isTaxInvoice;
        private bool isDiscounted;
        // private decimal discountedValue;
        private List<InvoiceItem> discountedInvoiceItem = new List<InvoiceItem>();
        private string loyaltyCard;
        private bool _removePromotion;
        private bool _LINQ_METHOD = true;
        private Boolean _isPanelMain = true;
        private Boolean _isDepBanAccMan = false;
        private Boolean _isCustMan = false;
        bool IsInvoiceCompleted = false;
        string Promoter = string.Empty; // add by akila 2017/11/27
        #endregion

        #region payment variables
        private decimal _paidAmount = 0;
        private string InvoiceType;
        private string InvoiceNo;
        private List<MasterItem> ItemList;
        private bool HavePayModes;
        private bool IsDutyFree;
        private string CurrancyCode;
        private decimal CurrancyAmount;
        private decimal ExchangeRate;
        private string Customer_Code;
        private List<InvoiceSerial> SerialList;
        private List<InvoiceItem> InvoiceItemList;
        private string Mobile;
        private bool IsZeroAllow;
        private bool ISPromotion;
        private bool IsTaxInvoice;
        private bool IsDiscounted;
        private decimal DiscountedValue;
        private List<InvoiceItem> DiscountedInvoiceItem;
        private bool alwPlsBalance;
        private bool Allow_Plus_balance;
        private string LoyaltyCard;
        private List<RecieptItem> RecieptItemList;
        private DateTime Date;
        private string GVLOC;
        private DateTime GVISSUEDATE = DateTime.MinValue;
        private string GVCOM;
        #endregion

        List<PaymentType> _paymentTypeRef;

        string _promoVoucherTp = string.Empty;
        decimal _promoVoucherDiscount = 0;
        decimal _promoVoucherDiscBalance = 0;
        string _promoVoucherCode = string.Empty;

        private void SystemErrorMessage(Exception ex)
        { CHNLSVC.CloseChannel(); this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(ex.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error); } }

        private void LoadCachedObjects()
        { _MasterProfitCenter = CacheLayer.Get<MasterProfitCenter>(CacheLayer.Key.ProfitCenter.ToString()); _PriceDefinitionRef = CacheLayer.Get<List<PriceDefinitionRef>>(CacheLayer.Key.PriceDefinition.ToString()); MasterChannel = CacheLayer.Get<DataTable>(CacheLayer.Key.ChannelDefinition.ToString()); IsSaleFigureRoundUp = CacheLayer.Get(CacheLayer.Key.IsSaleValueRoundUp.ToString()); }

        private void SetPanelSize()
        {
            pnlMultipleItem.Size = new Size(610, 155);
            pnlMultiCombine.Size = new Size(597, 140);
            pnlConsumerPrice.Size = new Size(553, 137);
            pnlPriceNPromotion.Size = new Size(1007, 366);
            pnlDeliveryInstruction.Size = new Size(441, 246);
            pnlInventoryCombineSerialPick.Size = new Size(648, 242);
            pnlDiscountRequest.Size = new Size(484, 143);
            pnlGroupSale.Size = new Size(200, 35);
            pnlRePay.Size = new Size(597, 279);
            pnlBuyBack.Size = new Size(1009, 342);
            pnlSubSerial.Size = new Size(1004, 210);
            pnlTokenItem.Size = new Size(911, 130);
            pnlRegistration.Size = new Size(1000, 373);
            pnlDiscount.Size = new Size(608, 303);
            pnlDoNowItems.Size = new Size(785, 303);
            pnlDoNowItems.Size = new Size(785, 303);
            pnlPromoVouNo.Size = new Size(237, 40);
        }

        private void SetGridViewAutoColumnGenerate()
        { gvInvoiceItem.AutoGenerateColumns = false; gvPopSerial.AutoGenerateColumns = false; gvGiftVoucher.AutoGenerateColumns = false; gvDisItem.AutoGenerateColumns = false; gvNormalPrice.AutoGenerateColumns = false; gvPopComItem.AutoGenerateColumns = false; gvPopComItemSerial.AutoGenerateColumns = false; gvPopConsumPricePick.AutoGenerateColumns = false; gvPromotionItem.AutoGenerateColumns = false; gvPromotionPrice.AutoGenerateColumns = false; gvPromotionSerial.AutoGenerateColumns = false; gvRePayment.AutoGenerateColumns = false; }

        private void LoadInvoiceProfitCenterDetail()
        {
            if (_MasterProfitCenter != null)
                if (_MasterProfitCenter.Mpc_cd != null)
                {
                    if (!_MasterProfitCenter.Mpc_edit_price)
                        txtUnitPrice.ReadOnly = true;

                    txtCustomer.Text = _MasterProfitCenter.Mpc_def_customer;
                    lblCurrency.Text = _MasterProfitCenter.Mpc_def_exrate + " - Sri Lankan Rupees";
                    //// txtExecutive.Text = _MasterProfitCenter.Mpc_man;
                    if (BaseCls.GlbUserDefProf == "ABWDC") txtExecutive.Text = "N/A";   //kapila
                    _masterBusinessCompany = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, string.Empty, string.Empty, "C");
                }
        }

        private void LoadPriceDefaultValue()
        {
            if (_PriceDefinitionRef != null)
                if (_PriceDefinitionRef.Count > 0)
                {
                    var _defaultValue = _PriceDefinitionRef.Where(x => x.Sadd_def == true).ToList();
                    if (_defaultValue != null) if (_defaultValue.Count > 0)
                        {
                            DefaultInvoiceType = _defaultValue[0].Sadd_doc_tp;
                            DefaultBook = _defaultValue[0].Sadd_pb;
                            DefaultLevel = _defaultValue[0].Sadd_p_lvl;
                            DefaultStatus = _defaultValue[0].Sadd_def_stus;
                            DefaultItemStatus = _defaultValue[0].Sadd_def_stus;
                            ////  LoadInvoiceType();
                            LoadPriceBook("CS");
                            LoadPriceLevel("CS", cmbBook.Text.Trim()); LoadLevelStatus("CS", cmbBook.Text.Trim(), cmbLevel.Text.Trim());
                            CheckPriceLevelStatusForDoAllow(cmbLevel.Text.Trim(), cmbBook.Text.Trim());
                        }
                }
            ////cmbTitle.SelectedIndex = 0;
        }

        private void VariableInitialization()
        {
            InvItm_Qty.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleRight;
            InvItm_UPrice.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleRight;
            InvItm_UnitAmt.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleRight;
            InvItm_DisRate.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleRight;
            InvItm_DisAmt.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleRight;
            InvItm_TaxAmt.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleRight;
            InvItm_LineAmt.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleRight;
            InvItm_Qty.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            InvItm_UPrice.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            InvItm_UnitAmt.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            InvItm_DisRate.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            InvItm_DisAmt.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            InvItm_TaxAmt.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            InvItm_LineAmt.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            InvItm_Qty.DefaultCellStyle.Format = "0.0000";
            InvItm_UPrice.DefaultCellStyle.Format = "N";
            InvItm_UnitAmt.DefaultCellStyle.Format = "N";
            InvItm_DisRate.DefaultCellStyle.Format = "N"; InvItm_DisAmt.DefaultCellStyle.Format = "N";
            InvItm_TaxAmt.DefaultCellStyle.Format = "N"; InvItm_LineAmt.DefaultCellStyle.Format = "N";
            btnSave.Enabled = true;
            txtInvoiceNo.Enabled = true;
            WarrantyRemarks = string.Empty; WarrantyPeriod = 0; ScanSequanceNo = 0; ScanSerialNo = string.Empty; SSPriceBookSequance = "0"; SSPriceBookItemSequance = "0"; SSPriceBookPrice = 0; _recieptItem = new List<RecieptItem>(); ScanSerialList = new List<ReptPickSerials>(); InventoryCombinItemSerialList = new List<ReptPickSerials>(); ManagerDiscount = new Dictionary<decimal, decimal>(); _invoiceItemList = new List<InvoiceItem>(); InvoiceSerialList = new List<InvoiceSerial>(); PriceCombinItemSerialList = new List<ReptPickSerials>(); MainTaxConstant = new List<MasterItemTax>(); _priceBookLevelRefList = new List<PriceBookLevelRef>(); _masterItemComponent = new List<MasterItemComponent>(); _newRecieptItem = new List<RecieptItem>(); _lineNo = 0; GrndSubTotal = 0; GrndDiscount = 0; GrndTax = 0; _isCompleteCode = false; chkOpenDelivery.Enabled = false;
        }

        private bool IsBackDateOk(bool _isDelverNow, bool _isBuyBackItemAvailable)
        {
            bool _isOK = true;
            _isBackDate = true;
            bool _allowCurrentTrans = false;
            if (IsAllowBackDateForModule(BaseCls.GlbUserComCode, string.Empty.ToUpper().ToString(), BaseCls.GlbUserDefProf, this.GlbModuleName, txtDate, lblBackDateInfor, txtDate.Value.Date.ToString(), out _allowCurrentTrans) == false)
            {
                if (_allowCurrentTrans == true)
                {
                    if (txtDate.Value.Date != DateTime.Now.Date)
                    {
                        //txtDate.Enabled = true;
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Back date is not allowed for selected date for the profit center " + BaseCls.GlbUserDefProf + "!.", "Process Terminated", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtDate.Focus();
                        _isOK = false;
                        _isBackDate = false;
                        return _isOK;
                    }
                }
                else
                {
                    //txtDate.Enabled = true;
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Back date is not allowed for selected date for the profit center " + BaseCls.GlbUserDefProf + "!.", "Process Terminated", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    txtDate.Focus();
                    _isOK = false;
                    _isBackDate = false;
                    return _isOK;
                }
            }
            return _isOK;
        }

        private bool IsInvoiceItemNSerialListTally(out string _Item)
        {
            bool _tally = true;
            string _errorItem = string.Empty;
            if (IsPriceLevelAllowDoAnyStatus)
            {
                var _itemswitouthstatus = (from _l in _invoiceItemList where !IsGiftVoucher(_l.Sad_itm_tp) && !IsVirtual(_l.Sad_itm_tp) group _l by new { _l.Sad_itm_cd } into _i select new { Sad_itm_cd = _i.Key.Sad_itm_cd, Sad_qty = _i.Sum(p => p.Sad_qty) }).ToList();
                Parallel.ForEach(_itemswitouthstatus, _itm =>
                {
                    string _item = _itm.Sad_itm_cd;
                    decimal _qty = _itm.Sad_qty;

                    decimal _scanItemQty = (from _n in ScanSerialList where _n.Tus_itm_cd == _item select _n.Tus_qty).Sum();
                    if (_qty != _scanItemQty)
                    {
                        if (string.IsNullOrEmpty(_errorItem))
                            _errorItem = _item;
                        else
                            _errorItem += ", " + _item;
                        _tally = false;
                    }
                });
            }
            else
            {
                var _itemswithstatus = (from _l in _invoiceItemList where !IsGiftVoucher(_l.Sad_itm_tp) && !IsVirtual(_l.Sad_itm_tp) group _l by new { _l.Sad_itm_cd, _l.Sad_itm_stus } into _i select new { Sad_itm_cd = _i.Key.Sad_itm_cd, Sad_itm_stus = _i.Key.Sad_itm_stus, Sad_qty = _i.Sum(p => p.Sad_qty) }).ToList();
                Parallel.ForEach(_itemswithstatus, _itm =>
                {
                    string _item = _itm.Sad_itm_cd;
                    string _status = _itm.Sad_itm_stus;
                    decimal _qty = _itm.Sad_qty;

                    decimal _scanItemQty = (from _n in ScanSerialList where _n.Tus_itm_cd == _item && _n.Tus_itm_stus == _status select _n.Tus_qty).Sum();
                    if (_qty != _scanItemQty)
                    {
                        if (string.IsNullOrEmpty(_errorItem))
                            _errorItem = _item;
                        else
                            _errorItem += ", " + _item;
                        _tally = false;
                    }
                });
            }
            _Item = _errorItem;
            return _tally;
        }

        private bool IsInventoryBalanceNInvoiceItemTally(out string _NotTallyList)
        {
            bool availability = true;
            MasterItem _itm = null;
            string _itemList = string.Empty;

            var _modifySerialList = (from _l in ScanSerialList group _l by new { _l.Tus_itm_cd, _l.Tus_itm_stus, _l.Tus_ser_1 } into _new select new { Tus_itm_cd = _new.Key.Tus_itm_cd, Tus_itm_stus = _new.Key.Tus_itm_stus, Tus_ser_1 = _new.Key.Tus_ser_1, Tus_qty = _new.Sum(p => p.Tus_qty) }).ToList();

            foreach (var _serial in _modifySerialList)
            {
                _itm = null;
                string _item = _serial.Tus_itm_cd;
                string _serialno = _serial.Tus_ser_1;
                string _status = _serial.Tus_itm_stus;
                decimal _qty = _serial.Tus_qty;
                _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                if (IsGiftVoucher(_itm.Mi_itm_tp)) continue;

                bool _isAgePriceLevel = false;
                int _noofDays = 0;
                DateTime _serialpickingdate = txtDate.Value.Date;
                CheckNValidateAgeItem(_item, _itm.Mi_cate_1, cmbBook.Text.Trim(), cmbLevel.Text.Trim(), _status, out _isAgePriceLevel, out _noofDays);
                if (_isAgePriceLevel) _serialpickingdate.AddDays(-_noofDays);
                if (_itm.Mi_is_ser1 == 1)
                {
                    ReptPickSerials _chk = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, _item, _serialno);
                    if (string.IsNullOrEmpty(_chk.Tus_com)) { availability = false; if (string.IsNullOrEmpty(_itemList)) _itemList = _item; else _itemList += "," + _item; }
                    else if (IsPriceLevelAllowDoAnyStatus == false)
                        if (_chk.Tus_itm_stus != _status) { availability = false; if (string.IsNullOrEmpty(_itemList)) _itemList = _item; else _itemList += "," + _item; }
                }
                else if (_itm.Mi_is_ser1 == 0)
                {
                    List<ReptPickSerials> _chk;
                    if (IsPriceLevelAllowDoAnyStatus == false)
                        _chk = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, _status, _qty, _serialpickingdate.Date);
                    else
                        _chk = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, string.Empty, _qty, _serialpickingdate.Date);
                    if (_chk != null)
                        if (_chk.Count > 0)
                        {
                            if (IsPriceLevelAllowDoAnyStatus == false)
                            {
                                decimal _statuswiseqty = (from i in _chk where i.Tus_itm_cd == _item && i.Tus_itm_stus == _status select i.Tus_qty).Sum();
                                if (_statuswiseqty < _qty) { availability = false; if (string.IsNullOrEmpty(_itemList)) _itemList = _item; else _itemList += "," + _item; }
                            }
                            else
                                if (_chk.Count() < _qty) { availability = false; if (string.IsNullOrEmpty(_itemList)) _itemList = _item; else _itemList += "," + _item; }
                        }
                        else { availability = false; if (string.IsNullOrEmpty(_itemList)) _itemList = _item; else _itemList += "," + _item; }
                    else { availability = false; if (string.IsNullOrEmpty(_itemList)) _itemList = _item; else _itemList += "," + _item; }
                }
                else if (_itm.Mi_is_ser1 == -1)
                {
                    List<InventoryLocation> _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, string.Empty);

                    if (_inventoryLocation != null)
                        if (_inventoryLocation.Count > 0)
                        {
                            if (IsPriceLevelAllowDoAnyStatus == false)
                            {
                                decimal _statuswiseqty = (from i in _inventoryLocation where i.Inl_itm_cd == _item && i.Inl_itm_stus == _status select i.Inl_free_qty).Sum();
                                if (_statuswiseqty < _qty) { availability = false; if (string.IsNullOrEmpty(_itemList)) _itemList = _item; else _itemList += "," + _item; }
                            }
                            else
                            {
                                decimal _withoustusqty = (from i in _inventoryLocation where i.Inl_itm_cd == _item select i.Inl_free_qty).Sum();
                                if (_withoustusqty < _qty) { availability = false; if (string.IsNullOrEmpty(_itemList)) _itemList = _item; else _itemList += "," + _item; }
                            }
                        }
                        else { availability = false; if (string.IsNullOrEmpty(_itemList)) _itemList = _item; else _itemList += "," + _item; }
                    else { availability = false; if (string.IsNullOrEmpty(_itemList)) _itemList = _item; else _itemList += "," + _item; }
                }
            }
            _NotTallyList = _itemList;
            return availability;
        }

        private void ProcessInvoice()
        {
            button1.Focus();
            // if (btnSave.Enabled == false) return;
            _serialMatch = true;
            try
            {
                //kapila
                DataTable _dt = CHNLSVC.Financial.get_SignOn(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, BaseCls.GlbUserID, Convert.ToDateTime(txtDate.Text));
                if (_dt.Rows.Count == 0)
                {
                    MessageBox.Show("Process Halted ! You have not sign on", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
                if (CheckServerDateTime() == false) return;

                //ADDED 2013/12/09
                //IF REGISTRATION NEED CAN NOT PROCEESS
                //WITHOUT REGISTRATION RECIEPT
                if (Convert.ToDecimal(lblGrndTotalAmount.Text) <= 0)
                {
                    MessageBox.Show("Total invoice amount cannot be zero.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }


                //if (_isNeedRegistrationReciept)
                //{
                //    if (_List == null || _List.Count <= 0)
                //    {
                //        MessageBox.Show("Registration Details not found.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                //        return;
                //    }
                //    decimal _payAmt = ucPayModes2.RecieptItemList.Sum(x => x.Sard_settle_amt);
                //    if (_payAmt < _totalRegistration)
                //    {
                //        MessageBox.Show("Please enter full Registration Amount.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                //        return;
                //    }
                //}

                //END

                if (string.IsNullOrEmpty(Convert.ToString(txtExecutive.Text)))
                {
                    MessageBox.Show("Please select executive before save.", "Executive", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
                //kapila 25/4/2017
                if(_isCustMan==true && txtCustomer.Text.Trim() == "AST-CASH" )
                {
                    MessageBox.Show("Please create a new customer/ select a registered customer", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
                //add by darshana on 12-Mar-2014 - To Gold operation totally operate as consignment base and no need to generate grn.
                MasterCompany _masterComp = null;
                _masterComp = CHNLSVC.General.GetCompByCode(BaseCls.GlbUserComCode);

                if (_masterComp.Mc_anal13 == 0)
                {
                    #region Check Consignment Item has Quotation(s) :: Chamal 18-Sep-2013

                    string documntNo = string.Empty;
                    if ((chkDeliverLater.Checked == false || chkDeliverNow.Checked) && ScanSerialList != null && ScanSerialList.Count > 0)
                        if (CHNLSVC.Inventory.Check_Cons_Item_has_Quo(BaseCls.GlbUserComCode, txtDate.Value.Date, ScanSerialList, out documntNo) < 0)
                        {
                            Cursor.Current = Cursors.Default;
                            MessageBox.Show(documntNo, "Quotation not define", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            return;
                        }

                    #endregion Check Consignment Item has Quotation(s) :: Chamal 18-Sep-2013
                }
                if (chkDeliverLater.Checked)
                {
                    if (CHNLSVC.Sales.IsForwardSaleExceed(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf))
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("No of forward sales are restricted. Please contact inventory dept.", "Max. Forward Sale", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        return;
                    }
                }
                //if (cmbInvType.Text.Trim() == "CRED" && txtCustomer.Text.Trim() == "AST-CASH")
                //{
                //    this.Cursor = Cursors.Default;
                //    using (new CenterWinDialog(this)) { MessageBox.Show("You can not select customer as CASH, because your invoice type is " + cmbInvType.Text, "Credit Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                //    txtCustomer.Clear();
                //    txtCustomer.Focus();
                //    return;
                //}
                //if (chkManualRef.Checked && string.IsNullOrEmpty(txtManualRefNo.Text))
                //{
                //    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the manual no", "Manual No", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                //    return;
                //}
                //if (cmbInvType.Text.Trim() == "CRED")
                //    if (string.IsNullOrEmpty(txtPoNo.Text))
                //    {
                //        this.Cursor = Cursors.Default;
                //        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the PO number", "Purchase Order Number", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                //        txtPoNo.Clear();
                //        txtPoNo.Focus();
                //        return;
                //    }
                //    else if (txtPoNo.Text.Trim() == "N/A" || txtPoNo.Text.Trim() == "NA" || txtPoNo.Text.Trim() == ".")
                //    {
                //        this.Cursor = Cursors.Default;
                //        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid PO number", "Purchase Order Number", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                //        txtPoNo.Clear();
                //        txtPoNo.Focus();
                //        return;
                //    }
                bool IsBuyBackItemAvailable = false;
                var _bbQty = _invoiceItemList.Where(x => x.Sad_merge_itm == "3" && x.Sad_unit_rt != 0).Sum(x => x.Sad_qty);
                if (_bbQty > 0)
                {
                    if (BuyBackItemList == null || BuyBackItemList.Count <= 0)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the buy back item", "Buy Back Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        pnlBuyBack.Visible = true;
                        IsBuyBackItemAvailable = false;
                        return;
                    }
                    else
                    {
                        var _purBB = BuyBackItemList.Sum(x => x.Tus_qty);
                        if (_purBB != _bbQty)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Please select " + _bbQty.ToString() + " buy back item(s)", "Buy Back Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            pnlBuyBack.Visible = true;
                            IsBuyBackItemAvailable = false;
                            return;
                        }
                    }
                }
                else if (_bbQty <= 0 && BuyBackItemList != null)
                {
                    if (BuyBackItemList.Count > 0)
                    {
                        tabControl1.SelectedTab = tabPage4;
                        if (MessageBox.Show("There is no buy back promotion selected, but buy back return item already available. Do you need to remove selected return buy-back item and continue?", "Return Item - Buy Back", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                        {
                            BuyBackItemList = null;
                        }
                        else
                        {
                            tabControl1.SelectedTab = tabPage4;
                            IsBuyBackItemAvailable = false;
                            return;
                        }

                        IsBuyBackItemAvailable = true;
                    }
                    else IsBuyBackItemAvailable = false;
                }
                else if (_bbQty > 0 && BuyBackItemList != null) if (BuyBackItemList.Count > 0) IsBuyBackItemAvailable = true;
                if (chkGiftVoucher.Checked)
                {
                    var _isExistGv = _invoiceItemList.Where(x => IsGiftVoucher(x.Sad_itm_tp)).Count();
                    if (_isExistGv <= 0)
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You can't process without gift vouchers", "Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                    string _notMapped = string.Empty;
                    var _gvitm = (from DataGridViewRow _row in gvGiftVoucher.Rows where _row.Index != -1 select _row).ToList();
                    Parallel.ForEach(_gvitm, _row => { var _isPromotion = _invoiceItemList.Where(x => x.Sad_itm_line == Convert.ToInt32(_row.Cells["gf_baseItemLine"].Value) && !string.IsNullOrEmpty(x.Sad_promo_cd)).Select(x => x.Sad_promo_cd).Count(); if (_isPromotion <= 0) { string _mappedItem = Convert.ToString(_row.Cells[7].EditedFormattedValue); string _gvNo = Convert.ToString(_row.Cells["gf_serial1"].EditedFormattedValue); if (string.IsNullOrEmpty(_mappedItem)) if (string.IsNullOrEmpty(_notMapped)) _notMapped = _gvNo; else _notMapped += ", " + _gvNo; } });
                    if (!string.IsNullOrEmpty(_notMapped))
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please attach the issuing item to the gift voucher for the following gift voucher(s). " + _notMapped + ".", "Attach Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); } tabControl1.SelectedTab = tabPage3; return; }
                }
                //  if (pnlMain.Enabled == false) return;
                if (IsBackDateOk(chkDeliverLater.Checked, IsBuyBackItemAvailable) == false) return;
                bool _isHoldInvoiceProcess = false;
                InvoiceHeader _hdr = new InvoiceHeader();
                if (!string.IsNullOrEmpty(txtInvoiceNo.Text.Trim()))
                {
                    _hdr = CHNLSVC.Sales.GetInvoiceHeaderDetails(txtInvoiceNo.Text.Trim());
                    if (_hdr != null)
                        if (_hdr.Sah_stus != "H")
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("You can not edit already saved invoice", "Invoice Re-call", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                            return;
                        }
                }
                if (_hdr != null && _hdr.Sah_stus == "H") _isHoldInvoiceProcess = true;
                //if (_isHoldInvoiceProcess && chkDeliverLater.Checked == false)
                //{
                //    this.Cursor = Cursors.Default;
                //    using (new CenterWinDialog(this)) { MessageBox.Show("You can not use 'Deliver Now!' option for hold invoice", "Invoice Hold", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                //    return;
                //}
                //if (string.IsNullOrEmpty(cmbInvType.Text))
                //{
                //    this.Cursor = Cursors.Default;
                //    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the invoice type", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                //    cmbInvType.Focus();
                //    return;
                //}
                if (string.IsNullOrEmpty(txtCustomer.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the customer", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    txtCustomer.Focus();
                    return;
                }
                if (string.IsNullOrEmpty(cmbBook.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the price book", "Price Book", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    cmbBook.Focus();
                    return;
                }
                if (string.IsNullOrEmpty(cmbLevel.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the price level", "Price Level", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    cmbLevel.Focus();
                    return;
                }
                if (_invoiceItemList.Count <= 0)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the items for invoice", "Invoice item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                bool _isExeMust = false;
                if (MasterChannel != null && MasterChannel.Rows.Count > 0)
                    _isExeMust = Convert.ToBoolean(MasterChannel.Rows[0].Field<Int16>("msc_needsalexe"));
                if (string.IsNullOrEmpty(txtExecutive.Text))
                {
                    if (_isExeMust)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the executive code", "Executive", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtExecutive.Focus();
                        return;
                    }
                    else txtExecutive.Text = "";
                }
                if (!string.IsNullOrEmpty(txtExecutive.Text) && _isExeMust)
                {
                    if (txtExecutive.Text.Trim().ToUpper() == "N/A" || txtExecutive.Text.Trim().ToUpper() == "NA")
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Sales executive is mandatory to this channel", "Sales Executive", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtExecutive.Clear();
                        txtExecutive.Focus();
                        txtExecutive.Focus();
                        return;
                    }
                }
                if (string.IsNullOrEmpty(lblCurrency.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the currency code", "Currency", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    lblCurrency.Focus();
                    return;
                }
                if (_MasterProfitCenter.Mpc_check_pay && _recieptItem.Count <= 0)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("This profit center is not allow for raise invoice without payment. Please enter the payment detail", "Payments", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                if (string.IsNullOrEmpty(txtCusName.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please enter the customer name", "Customer Name", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                ////if (string.IsNullOrEmpty(txtAddress1.Text) && string.IsNullOrEmpty(txtAddress2.Text))
                ////{
                ////    this.Cursor = Cursors.Default;
                ////    using (new CenterWinDialog(this)) { MessageBox.Show("Please enter the customer address", "Customer Address", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                ////    return;
                ////}
                ////    if (cmbInvType.Text == "CS")
                if (_recieptItem == null)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Payment is not completed", "Payments", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                    return;
                }
                ////      if (cmbInvType.Text == "CS")
                if (_recieptItem != null)
                    if (_recieptItem.Count <= 0)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Payment is not completed yet.Please continue with another payment type", "Payments", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                        return;
                    }
                ////    if (cmbInvType.Text == "CS")
                if (_recieptItem != null)
                    if (_recieptItem.Count >= 0)
                    {
                        decimal _realPay = 0;
                        if (lblSVatStatus.Text == "Available")
                            _realPay = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim()) - Convert.ToDecimal(lblGrndTax.Text.Trim());
                        else
                            _realPay = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());

                        decimal _totlaPay = _recieptItem.Sum(x => x.Sard_settle_amt);
                        if (_totlaPay != _realPay)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Payment is not completed yet.Please continue with another payment type", "Payments", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                            return;
                        }
                        string LoyaltyCard = "";
                        if (_loyaltyType != null)
                        {
                            LoyaltyCard = _loyaltyType.Salt_loty_tp;
                        }

                        //paymode restriction
                        //added 2014/03/26
                        List<PayTypeRestrict> _restrictList = new List<PayTypeRestrict>();
                        if (_invoiceItemList != null && _invoiceItemList.Count > 0)
                        {
                            foreach (InvoiceItem _itm in _invoiceItemList)
                            {
                                /*
                                itm,loty,promo - lv1
                                itm,promo -lv2
                                loty,promo-lv3
                                itm,loty -lv4
                                itm-lv5
                                promo-lv6
                                loty-lv7
                                 */
                                List<PayTypeRestrict> _resPay = CHNLSVC.Sales.GetPaymodeRestriction(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtDate.Value.Date);
                                if (_resPay != null && _resPay.Count > 0)
                                {
                                    //lv 01
                                    List<PayTypeRestrict> _temp;
                                    _temp = (from _t in _resPay
                                             where (_t.Stpr_itm == _itm.Sad_itm_cd || _t.Stpr_itm == "ALL") && (_t.Stpr_promo_cd == _itm.Sad_promo_cd || _t.Stpr_promo_cd == "ALL") && (_t.Stpr_loty == LoyaltyCard || _t.Stpr_loty == "ALL")
                                             select _t).ToList<PayTypeRestrict>();

                                    if (_temp != null && _temp.Count > 0)
                                    {
                                        _restrictList.AddRange(_temp);
                                    }
                                    _temp = null;
                                    //lv 02
                                    _temp = (from _t in _resPay
                                             where (_t.Stpr_itm == _itm.Sad_itm_cd || _t.Stpr_itm == "ALL") && (_t.Stpr_promo_cd == _itm.Sad_promo_cd || _t.Stpr_promo_cd == "ALL") && (string.IsNullOrEmpty(_t.Stpr_loty))
                                             select _t).ToList<PayTypeRestrict>();

                                    if (_temp != null && _temp.Count > 0)
                                    {
                                        _restrictList.AddRange(_temp);
                                    }
                                    _temp = null;
                                    //lv 03
                                    _temp = (from _t in _resPay
                                             where (string.IsNullOrEmpty(_t.Stpr_loty)) && (_t.Stpr_promo_cd == _itm.Sad_promo_cd || _t.Stpr_promo_cd == "ALL") && (string.IsNullOrEmpty(_t.Stpr_loty))
                                             select _t).ToList<PayTypeRestrict>();

                                    if (_temp != null && _temp.Count > 0)
                                    {
                                        _restrictList.AddRange(_temp);
                                    }
                                    _temp = null;
                                    //lv 04
                                    _temp = (from _t in _resPay
                                             where (_t.Stpr_itm == _itm.Sad_itm_cd || _t.Stpr_itm == "ALL") && (string.IsNullOrEmpty(_t.Stpr_promo_cd)) && (string.IsNullOrEmpty(_t.Stpr_loty))
                                             select _t).ToList<PayTypeRestrict>();

                                    if (_temp != null && _temp.Count > 0)
                                    {
                                        _restrictList.AddRange(_temp);
                                    }
                                    _temp = null;
                                    //lv 05
                                    _temp = (from _t in _resPay
                                             where (_t.Stpr_itm == _itm.Sad_itm_cd || _t.Stpr_itm == "ALL") && (string.IsNullOrEmpty(_t.Stpr_promo_cd)) && (string.IsNullOrEmpty(_t.Stpr_loty))
                                             select _t).ToList<PayTypeRestrict>();

                                    if (_temp != null && _temp.Count > 0)
                                    {
                                        _restrictList.AddRange(_temp);
                                    }
                                    _temp = null;
                                    //lv 06
                                    _temp = (from _t in _resPay
                                             where (string.IsNullOrEmpty(_t.Stpr_itm)) && (_t.Stpr_promo_cd == _itm.Sad_promo_cd || _t.Stpr_promo_cd == "ALL") && (string.IsNullOrEmpty(_t.Stpr_loty))
                                             select _t).ToList<PayTypeRestrict>();

                                    if (_temp != null && _temp.Count > 0)
                                    {
                                        _restrictList.AddRange(_temp);
                                    }
                                    _temp = null;
                                    //lv 07
                                    _temp = (from _t in _resPay
                                             where (string.IsNullOrEmpty(_t.Stpr_itm)) && (string.IsNullOrEmpty(_t.Stpr_promo_cd)) && (_t.Stpr_loty == LoyaltyCard || _t.Stpr_loty == "ALL")
                                             select _t).ToList<PayTypeRestrict>();

                                    if (_temp != null && _temp.Count > 0)
                                    {
                                        _restrictList.AddRange(_temp);
                                    }
                                }
                            }
                        }
                        if (_restrictList != null && _restrictList.Count > 0)
                        {
                            foreach (RecieptItem _recItm in _recieptItem)
                            {
                                List<PayTypeRestrict> _tRes = (from _res in _restrictList
                                                               where _res.Stpr_pay_mode == _recItm.Sard_pay_tp
                                                               select _res).ToList<PayTypeRestrict>();
                                if (_tRes != null && _tRes.Count > 0)
                                {
                                    if (_recItm.Sard_pay_tp == "CRCD")
                                    {
                                        foreach (PayTypeRestrict _payres in _tRes)
                                        {
                                            if (_payres.Stpr_alw_non_promo)
                                            {
                                                if (_recItm.Sard_cc_period > 0)
                                                {
                                                    using (new CenterWinDialog(this)) { MessageBox.Show("Cannot process invoice paymode- " + _recItm.Sard_pay_tp + " restricted for promotions.\nPlease remove paymode and check again.", "Invoice Payment", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                                    return;
                                                }
                                            }
                                            else
                                            {
                                                using (new CenterWinDialog(this)) { MessageBox.Show("Cannot process invoice paymode- " + _recItm.Sard_pay_tp + " restricted.\nPlease remove paymode and check again.", "Invoice Payment", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                                return;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        using (new CenterWinDialog(this)) { MessageBox.Show("Cannot process invoice paymode- " + _recItm.Sard_pay_tp + " restricted.\nPlease remove paymode and check again.", "Invoice Payment", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                        return;
                                    }
                                }
                            }
                        }
                        //end
                    }
                string _invoicePrefix = CHNLSVC.Sales.GetInvoicePrefix(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "CS");
                if (string.IsNullOrEmpty(_invoicePrefix))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Selected invoice no does not having a invoice prefix to generate invoice no. Please contact accounts department.", "Invoice Prefix", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                Int32 _count = 1;
                if (_recieptItem != null)
                    if (_recieptItem.Count > 0)
                        _recieptItem.ForEach(x => x.Sard_line_no = _count++);
                _count = 1;
                List<InvoiceItem> _linedInvoiceItem = new List<InvoiceItem>();
                _invoiceItemList = _invoiceItemList.OrderBy(x => x.Sad_itm_line).ToList();
                ScanSerialList = ScanSerialList.OrderBy(x => x.Tus_base_itm_line).ToList();
                foreach (InvoiceItem _item in _invoiceItemList)
                {
                    Int32 _currentLine = _item.Sad_itm_line;
                    if (ScanSerialList != null)
                        if (ScanSerialList.Count > 0)
                            ScanSerialList.Where(x => x.Tus_base_itm_line == _currentLine).ToList().ForEach(x => x.Tus_base_itm_line = _count);
                    if (InvoiceSerialList != null)
                        if (InvoiceSerialList.Count > 0)
                            InvoiceSerialList.Where(x => x.Sap_itm_line == _currentLine).ToList().ForEach(x => x.Sap_itm_line = _count);
                    _item.Sad_itm_line = _count;
                    _linedInvoiceItem.Add(_item);
                    _count += 1;
                }

                _linedInvoiceItem.ForEach(x => x.Sad_isapp = true);
                _linedInvoiceItem.ForEach(x => x.Sad_iscovernote = true);
                _invoiceItemList = new List<InvoiceItem>();
                _invoiceItemList = _linedInvoiceItem;
                if (chkDeliverLater.Checked == false && IsReferancedDocDateAppropriate(ScanSerialList, Convert.ToDateTime(txtDate.Text).Date) == false)
                    return;
                if (chkDeliverLater.Checked == false)
                {
                    string _itmList = string.Empty;

                    bool _isqtyNserialOk = IsInvoiceItemNSerialListTally(out _itmList);

                    ////if (_isqtyNserialOk == false)
                    ////{
                    ////    if (!chkDeliverNow.Checked)
                    ////    {
                    ////        this.Cursor = Cursors.Default;
                    ////        using (new CenterWinDialog(this)) { MessageBox.Show("Invoice qty and no. of serials are mismatched. Please check the following item for its serials and qty.\nItem List : " + _itmList, "Qty & Serial", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                    ////        _serialMatch = false;
                    ////        return;
                    ////    }
                    ////    else
                    ////    {
                    ////        _serialMatch = false;
                    ////    }
                    ////}

                }
                //kapila 7/7/2016
                MasterCompany _mastercompany = CacheLayer.Get<MasterCompany>(CacheLayer.Key.CompanyInfor.ToString());
                if (_mastercompany.Mc_alw_minus_bal == 0)
                {
                    if (chkDeliverLater.Checked == false)
                    {
                        string _nottallylist = string.Empty;
                        bool _isTallywithinventory = IsInventoryBalanceNInvoiceItemTally(out _nottallylist);

                        if (_isTallywithinventory == false)
                        {
                            if (!chkDeliverNow.Checked)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Following item does not having inventory balance for raise delivery order; " + _nottallylist, "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                                _serialMatch = false;
                                return;
                            }
                            else
                            {
                                _serialMatch = false;
                            }
                        }
                    }
                }

                #region sachith/process serial select

                if (!_serialMatch)
                {
                    if (chkDeliverNow.Checked)
                    {
                        dvDOItems.AutoGenerateColumns = false;
                        dvDOItems.DataSource = _invoiceItemList;
                        pnlDoNowItems.Visible = true;
                        //// pnlMain.Enabled = false;

                        return;
                    }
                }

                #endregion sachith/process serial select

                MasterBusinessEntity _entity = new MasterBusinessEntity();
                InvoiceHeader _invheader = new InvoiceHeader();
                RecieptHeader _recHeader = new RecieptHeader();
                InventoryHeader invHdr = new InventoryHeader();
                InventoryHeader _buybackheader = new InventoryHeader();
                MasterAutoNumber _buybackAuto = new MasterAutoNumber();
                bool _isCustomerHasCompany = false;
                string _customerCompany = string.Empty;
                string _customerLocation = string.Empty;
                _entity = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, string.Empty, string.Empty, "C");
                if (_entity != null)
                    if (_entity.Mbe_cd != null)
                        if (!string.IsNullOrEmpty(_entity.Mbe_cust_com) && !string.IsNullOrEmpty(_entity.Mbe_cust_loc))
                        { _isCustomerHasCompany = true; _customerCompany = _entity.Mbe_cust_com; _customerLocation = _entity.Mbe_cust_loc; }
                invHdr.Ith_loc = BaseCls.GlbUserDefLoca;
                invHdr.Ith_com = BaseCls.GlbUserComCode;
                invHdr.Ith_doc_tp = "DO";
                invHdr.Ith_doc_date = Convert.ToDateTime(txtDate.Text).Date;
                invHdr.Ith_doc_year = Convert.ToDateTime(txtDate.Text).Year;
                invHdr.Ith_cate_tp = "CS";   //// cmbInvType.Text.Trim();
                invHdr.Ith_sub_tp = "DPS";
                invHdr.Ith_bus_entity = txtCustomer.Text.Trim();
                invHdr.Ith_del_add1 = txtDelAddress1.Text.Trim();
                invHdr.Ith_del_add1 = txtDelAddress2.Text.Trim();
                invHdr.Ith_is_manual = false;
                invHdr.Ith_stus = "A";
                invHdr.Ith_cre_by = BaseCls.GlbUserID;
                invHdr.Ith_mod_by = BaseCls.GlbUserID;
                invHdr.Ith_direct = false;
                invHdr.Ith_session_id = BaseCls.GlbUserSessionID;
                invHdr.Ith_manual_ref = "";  ////txtManualRefNo.Text;
                invHdr.Ith_vehi_no = string.Empty;
                invHdr.Ith_remarks = string.Empty;
                MasterAutoNumber _masterAutoDo = new MasterAutoNumber();
                _masterAutoDo.Aut_cate_cd = BaseCls.GlbUserDefLoca;
                _masterAutoDo.Aut_cate_tp = "LOC";
                _masterAutoDo.Aut_direction = 0;
                _masterAutoDo.Aut_moduleid = "DO";
                _masterAutoDo.Aut_start_char = "DO";
                _masterAutoDo.Aut_year = Convert.ToDateTime(txtDate.Text).Year;
                _invheader.Sah_com = BaseCls.GlbUserComCode;
                _invheader.Sah_cre_by = BaseCls.GlbUserID;
                _invheader.Sah_cre_when = DateTime.Now;
                _invheader.Sah_currency = "LKR";
                //// _invheader.Sah_cus_add1 = txtAddress1.Text.Trim();
                //// _invheader.Sah_cus_add2 = txtAddress2.Text.Trim();
                _invheader.Sah_cus_cd = txtCustomer.Text.Trim();
                _invheader.Sah_cus_name = txtCusName.Text.Trim();
                _invheader.Sah_d_cust_add1 = txtDelAddress1.Text.Trim();
                _invheader.Sah_d_cust_add2 = txtDelAddress2.Text.Trim();
                _invheader.Sah_d_cust_cd = txtDelCustomer.Text.Trim();
                _invheader.Sah_d_cust_name = txtDelName.Text.Trim();
                _invheader.Sah_direct = true;
                _invheader.Sah_dt = Convert.ToDateTime(txtDate.Text);
                _invheader.Sah_epf_rt = 0;
                _invheader.Sah_esd_rt = 0;
                _invheader.Sah_ex_rt = 1;
                _invheader.Sah_inv_no = "na";
                _invheader.Sah_inv_sub_tp = "SA";
                _invheader.Sah_inv_tp = "CS";  //// cmbInvType.Text.Trim();
                _invheader.Sah_is_acc_upload = false;
                _invheader.Sah_man_ref = "";  //// txtManualRefNo.Text;
                _invheader.Sah_manual = false; //// chkManualRef.Checked ? true : false;
                _invheader.Sah_mod_by = BaseCls.GlbUserID;
                _invheader.Sah_mod_when = DateTime.Now;
                _invheader.Sah_pc = BaseCls.GlbUserDefProf;
                _invheader.Sah_pdi_req = 0;
                _invheader.Sah_ref_doc = ""; //// txtDocRefNo.Text;
                _invheader.Sah_remarks = txtRemarks.Text;
                _invheader.Sah_sales_chn_cd = "";
                _invheader.Sah_sales_chn_man = "";
                _invheader.Sah_sales_ex_cd = txtExecutive.Text.Trim();
                _invheader.Sah_sales_region_cd = "";
                _invheader.Sah_sales_region_man = "";
                _invheader.Sah_sales_sbu_cd = "";
                _invheader.Sah_sales_sbu_man = "";
                _invheader.Sah_sales_str_cd = "";
                _invheader.Sah_sales_zone_cd = "";
                _invheader.Sah_sales_zone_man = "";
                _invheader.Sah_seq_no = 1;
                _invheader.Sah_session_id = BaseCls.GlbUserSessionID;
                _invheader.Sah_structure_seq = ""; //// txtQuotation.Text.Trim();
                _invheader.Sah_stus = "A";
                if (chkDeliverLater.Checked == false || chkDeliverNow.Checked) _invheader.Sah_stus = "D";
                _invheader.Sah_town_cd = "";
                _invheader.Sah_tp = "INV";
                _invheader.Sah_wht_rt = 0;
                _invheader.Sah_direct = true;
                _invheader.Sah_tax_inv = chkTaxPayable.Checked ? true : false;
                _invheader.Sah_anal_11 = (chkDeliverLater.Checked || chkDeliverNow.Checked) ? 0 : 1;
                _invheader.Sah_del_loc = (chkDeliverLater.Checked == false || chkDeliverNow.Checked) ? BaseCls.GlbUserDefLoca : !string.IsNullOrEmpty(txtDelLocation.Text) ? txtDelLocation.Text : string.Empty;
                _invheader.Sah_grn_com = _customerCompany;
                _invheader.Sah_grn_loc = _customerLocation;
                _invheader.Sah_is_grn = _isCustomerHasCompany;
                _invheader.Sah_grup_cd = string.IsNullOrEmpty(txtGroup.Text.Trim()) ? string.Empty : txtGroup.Text.Trim();
                _invheader.Sah_is_svat = lblSVatStatus.Text == "Available" ? true : false;
                _invheader.Sah_tax_exempted = lblVatExemptStatus.Text == "Available" ? true : false;
                _invheader.Sah_anal_4 = ""; //// txtPoNo.Text.Trim();
                _invheader.Sah_anal_6 = txtLoyalty.Text.Trim();
                _invheader.Sah_man_cd = _MasterProfitCenter.Mpc_man;
                _invheader.Sah_is_dayend = 0;
                _invheader.Sah_remarks = txtRemarks.Text;
                //if (string.IsNullOrEmpty(Convert.ToString(cmbTechnician.SelectedValue))) _invheader.Sah_anal_1 = string.Empty;
                //else _invheader.Sah_anal_1 = Convert.ToString(cmbTechnician.SelectedValue);

                _invheader.Sah_anal_1 = Promoter;
                //_invheader.Sah_anal_1 = ""; //// txtPromotor.Text;

                if (_isHoldInvoiceProcess) _invheader.Sah_seq_no = Convert.ToInt32(txtInvoiceNo.Text.Trim());
                _recHeader.Sar_acc_no = "";
                _recHeader.Sar_act = true;
                _recHeader.Sar_com_cd = BaseCls.GlbUserComCode;
                _recHeader.Sar_comm_amt = 0;
                _recHeader.Sar_create_by = BaseCls.GlbUserID;
                _recHeader.Sar_create_when = DateTime.Now;
                _recHeader.Sar_currency_cd = "LKR";
                ////  _recHeader.Sar_debtor_add_1 = txtAddress1.Text;
                //// _recHeader.Sar_debtor_add_2 = txtAddress2.Text;
                _recHeader.Sar_debtor_cd = txtCustomer.Text;
                _recHeader.Sar_debtor_name = txtCusName.Text;
                _recHeader.Sar_direct = true;
                _recHeader.Sar_direct_deposit_bank_cd = "";
                _recHeader.Sar_direct_deposit_branch = "";
                _recHeader.Sar_epf_rate = 0;
                _recHeader.Sar_esd_rate = 0;
                _recHeader.Sar_is_mgr_iss = false;
                _recHeader.Sar_is_oth_shop = false;
                _recHeader.Sar_is_used = false;
                _recHeader.Sar_manual_ref_no = ""; //// txtManualRefNo.Text;
                _recHeader.Sar_mob_no = txtMobile.Text;
                _recHeader.Sar_mod_by = BaseCls.GlbUserID;
                _recHeader.Sar_mod_when = DateTime.Now;
                _recHeader.Sar_nic_no = txtNIC.Text;
                _recHeader.Sar_oth_sr = "";
                _recHeader.Sar_prefix = "";
                _recHeader.Sar_profit_center_cd = BaseCls.GlbUserDefProf;
                _recHeader.Sar_receipt_date = Convert.ToDateTime(txtDate.Text);
                _recHeader.Sar_receipt_no = "na";
                _recHeader.Sar_receipt_type = "DIR"; //// cmbInvType.Text.Trim() == "CRED" ? "DEBT" : "DIR";
                _recHeader.Sar_ref_doc = "";
                _recHeader.Sar_remarks = txtRemarks.Text;
                _recHeader.Sar_seq_no = 1;
                _recHeader.Sar_ser_job_no = "";
                _recHeader.Sar_session_id = BaseCls.GlbUserSessionID;
                _recHeader.Sar_tel_no = txtMobile.Text;
                _recHeader.Sar_tot_settle_amt = 0;
                _recHeader.Sar_uploaded_to_finance = false;
                _recHeader.Sar_used_amt = 0;
                _recHeader.Sar_wht_rate = 0;
                MasterAutoNumber _invoiceAuto = new MasterAutoNumber();
                _invoiceAuto.Aut_cate_cd = BaseCls.GlbUserDefProf;
                _invoiceAuto.Aut_cate_tp = "PRO";
                _invoiceAuto.Aut_direction = 1;
                _invoiceAuto.Aut_modify_dt = null;
                _invoiceAuto.Aut_moduleid = "CS"; //// cmbInvType.Text;
                _invoiceAuto.Aut_number = 0;
                _invoiceAuto.Aut_start_char = _invoicePrefix;
                _invoiceAuto.Aut_year = Convert.ToDateTime(txtDate.Text).Year;
                MasterAutoNumber _receiptAuto = null;
                if (_recieptItem != null)
                    if (_recieptItem.Count > 0)
                    {
                        _receiptAuto = new MasterAutoNumber();
                        _receiptAuto.Aut_cate_cd = BaseCls.GlbUserDefProf;
                        _receiptAuto.Aut_cate_tp = "PRO";
                        _receiptAuto.Aut_direction = 1;
                        _receiptAuto.Aut_modify_dt = null;
                        _receiptAuto.Aut_moduleid = "RECEIPT";
                        _receiptAuto.Aut_number = 0;
                        _receiptAuto.Aut_start_char = "DIR";
                        _receiptAuto.Aut_year = Convert.ToDateTime(txtDate.Text).Year;
                    }
                DataTable dt_location = CHNLSVC.Inventory.Get_location_by_code(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca);
                foreach (DataRow r in dt_location.Rows)
                {
                    _buybackheader.Ith_sbu = (string)r["ML_OPE_CD"];
                    if (System.DBNull.Value != r["ML_CATE_2"])
                    {
                        _buybackheader.Ith_channel = (string)r["ML_CATE_2"];
                    }
                    else
                    {
                        _buybackheader.Ith_channel = string.Empty;
                    }
                }
                _buybackheader.Ith_acc_no = "BB_INVC";
                _buybackheader.Ith_anal_1 = "";
                _buybackheader.Ith_anal_2 = "";
                _buybackheader.Ith_anal_3 = "";
                _buybackheader.Ith_anal_4 = "";
                _buybackheader.Ith_anal_5 = "";
                _buybackheader.Ith_anal_6 = 0;
                _buybackheader.Ith_anal_7 = 0;
                _buybackheader.Ith_anal_8 = DateTime.MinValue;
                _buybackheader.Ith_anal_9 = DateTime.MinValue;
                _buybackheader.Ith_anal_10 = false;
                _buybackheader.Ith_anal_11 = false;
                _buybackheader.Ith_anal_12 = false;
                _buybackheader.Ith_bus_entity = "";
                _buybackheader.Ith_cate_tp = "NOR";
                _buybackheader.Ith_com = BaseCls.GlbUserComCode;
                _buybackheader.Ith_com_docno = "";
                _buybackheader.Ith_cre_by = BaseCls.GlbUserID;
                _buybackheader.Ith_cre_when = DateTime.Now;
                _buybackheader.Ith_del_add1 = "";
                _buybackheader.Ith_del_add2 = "";
                _buybackheader.Ith_del_code = "";
                _buybackheader.Ith_del_party = "";
                _buybackheader.Ith_del_town = "";
                _buybackheader.Ith_direct = true;
                _buybackheader.Ith_doc_date = txtDate.Value.Date;
                _buybackheader.Ith_doc_no = string.Empty;
                _buybackheader.Ith_doc_tp = "ADJ";
                _buybackheader.Ith_doc_year = txtDate.Value.Date.Year;
                _buybackheader.Ith_entry_no = string.Empty;
                _buybackheader.Ith_entry_tp = "NOR";
                _buybackheader.Ith_git_close = true;
                _buybackheader.Ith_git_close_date = DateTime.MinValue;
                _buybackheader.Ith_git_close_doc = string.Empty;
                _buybackheader.Ith_isprinted = false;
                _buybackheader.Ith_is_manual = false;
                _buybackheader.Ith_job_no = string.Empty;
                _buybackheader.Ith_loading_point = string.Empty;
                _buybackheader.Ith_loading_user = string.Empty;
                _buybackheader.Ith_loc = BaseCls.GlbUserDefLoca;
                _buybackheader.Ith_manual_ref = string.Empty;
                _buybackheader.Ith_mod_by = BaseCls.GlbUserID;
                _buybackheader.Ith_mod_when = DateTime.Now;
                _buybackheader.Ith_noofcopies = 0;
                _buybackheader.Ith_oth_loc = string.Empty;
                _buybackheader.Ith_oth_docno = "N/A";
                _buybackheader.Ith_remarks = string.Empty;
                _buybackheader.Ith_session_id = BaseCls.GlbUserSessionID;
                _buybackheader.Ith_stus = "A";
                _buybackheader.Ith_sub_tp = "NOR";
                _buybackheader.Ith_vehi_no = string.Empty;
                _buybackAuto.Aut_cate_cd = BaseCls.GlbUserDefLoca;
                _buybackAuto.Aut_cate_tp = "LOC";
                _buybackAuto.Aut_direction = null;
                _buybackAuto.Aut_modify_dt = null;
                _buybackAuto.Aut_moduleid = "ADJ";
                _buybackAuto.Aut_number = 5;
                _buybackAuto.Aut_start_char = "ADJ";
                _buybackAuto.Aut_year = null;
                _count = 1;
                string _bin = CHNLSVC.Inventory.GetDefaultBinCode(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca);
                if (BuyBackItemList != null) if (BuyBackItemList.Count > 0)
                    {
                        BuyBackItemList.ForEach(X => X.Tus_bin = _bin);
                        BuyBackItemList.ForEach(X => X.Tus_itm_line = _count++);
                        BuyBackItemList.ForEach(X => X.Tus_serial_id = "N/A");
                        BuyBackItemList.ForEach(x => x.Tus_exist_grndt = Convert.ToDateTime(txtDate.Value).Date);
                        BuyBackItemList.ForEach(x => x.Tus_orig_grndt = Convert.ToDateTime(txtDate.Value).Date);
                    }
                if (txtCustomer.Text.Trim() != "AST-CASH")
                {
                    MasterBusinessEntity _en = CHNLSVC.Sales.GetCustomerProfile(txtCustomer.Text.Trim(), string.Empty, string.Empty, string.Empty, string.Empty);
                    if (_en != null)
                        if (string.IsNullOrEmpty(_en.Mbe_com))
                        {
                            _invheader.Sah_tax_exempted = _en.Mbe_tax_ex;
                            _invheader.Sah_is_svat = _en.Mbe_is_svat;
                        }
                }
                else
                {
                    if (string.IsNullOrEmpty(txtNIC.Text) && string.IsNullOrEmpty(txtMobile.Text))
                    {
                        bool _promoVouApplied = false;
                        foreach (InvoiceItem _itm in _invoiceItemList)
                        {
                            MasterItem _mitm = CHNLSVC.Inventory.GetItem(_invheader.Sah_com, _itm.Sad_itm_cd);
                            if (_mitm.Mi_is_ser1 != -1)
                            {
                                for (int i = 1; i <= _itm.Sad_qty; i++)
                                {
                                    List<PromoVoucherDefinition> _proVouList = CHNLSVC.Sales.GetPromotionalVouchersDefinition(_invheader.Sah_com, _invheader.Sah_inv_tp, _invheader.Sah_pc, _invheader.Sah_dt.Date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _mitm.Mi_brand, _mitm.Mi_cate_1, _mitm.Mi_cate_2, _itm.Sad_itm_cd, true);
                                    if (_proVouList != null)
                                    {
                                        if (_proVouList.Count > 0)
                                        { _promoVouApplied = true; break; }
                                    }
                                }
                            }
                        }
                        if (_promoVouApplied == true)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Promotion voucher available! Please enter the customer NIC or Mobile No", "Prmotion Voucher", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                            return;
                        }
                    }
                }
                CollectBusinessEntity();
                string _invoiceNo = "";
                string _receiptNo = "";
                string _deliveryOrderNo = "";
                _invoiceItemListWithDiscount = new List<InvoiceItem>();
                List<InvoiceItem> _discounted = null;
                bool _isDifferent = false;
                decimal _tobepay = 0;
                decimal _tobepay1 = 0;
                bool _canSaveWithoutDiscount = false;
                _discountSequence = 0;  //kapila
                try
                {
                    //Int32 _timeno = Convert.ToInt32(DateTime.Now.ToString("HHmmss"));
                    //CHNLSVC.Sales.GetGeneralPromotionDiscount(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _invoiceItemList, _recieptItem, out _discounted, out _isDifferent, out _tobepay, _invheader);
                    //_invoiceItemListWithDiscount = _discounted;Int32 _timeno = Convert.ToInt32(DateTime.Now.ToString("HHmmss"));

                    Int32 _timeno = Convert.ToInt32(DateTime.Now.ToString("HHmmss"));
                    if (_discountSequence == 0)
                    {
                        //updated by akila 2018/03/05                        
                        #region new code

                        int _previousSeq = 0;

                        #region Apply line level promotional discounts
                        foreach (InvoiceItem itm in _invoiceItemList)
                        {
                            bool isMulti;
                            int seq;
                            List<InvoiceItem> _item = new List<InvoiceItem>();
                            _item.Add(itm);
                            DataTable _discount = CHNLSVC.Sales.GetPromotionalDiscountSequences(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "CS", _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _item, _recieptItem, _invheader, out isMulti, out seq);
                            //show pop up
                            if (_discount == null)
                            {
                                _discountSequence = seq;
                                if (isMulti)
                                {
                                    _isDifferent = false;
                                    _discountSequence = -9999;
                                }
                                else
                                {
                                    if (_discountSequence != -9999 && _discountSequence != 0)
                                    {
                                        _isDifferent = true;
                                        _discountSequence = seq;
                                        CashPromotionDiscountHeader _discountHdr = CHNLSVC.General.GetPromotionalDiscountBySeq(seq);
                                        if (_discountHdr != null)
                                        {
                                            _canSaveWithoutDiscount = _discountHdr.Spdh_is_alw_normal;
                                        }

                                        if (_discountHdr.ApplyForTotalInvoice != 1)
                                        {
                                            CHNLSVC.Sales.GetGeneralPromotionProcess(_discountSequence, BaseCls.GlbUserComCode, _item, out _discounted, out _isDifferent, out _tobepay1, _invheader);
                                            _invoiceItemListWithDiscount.AddRange(_discounted);
                                        }
                                    }
                                    else
                                    {
                                        if (IsDiscounted)
                                        {
                                            _isDifferent = false;
                                            _discountSequence = -9999;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (_discount.Rows.Count > 0)
                                {
                                    pnlDiscount.Visible = true;
                                    gvDiscount.DataSource = _discount;
                                    return;
                                }
                                else
                                {
                                    _isDifferent = false;
                                    _discountSequence = -9999;
                                }
                            }
                        }
                        #endregion

                        #region Apply header level promotional discount

                        List<InvoiceItem> _mixItemList = new List<InvoiceItem>();

                        if (_invoiceItemListWithDiscount != null && _invoiceItemListWithDiscount.Count > 0)
                        {
                            foreach (InvoiceItem _invItem in _invoiceItemList)
                            {
                                var _tmpList = _invoiceItemListWithDiscount.Where(x => x.Sad_itm_cd == _invItem.Sad_itm_cd && x.Sad_itm_line == _invItem.Sad_itm_line).ToList();
                                if (_tmpList == null || _tmpList.Count < 1)
                                {
                                    _mixItemList.Add(_invItem);
                                }
                            }
                            _mixItemList.AddRange(_invoiceItemListWithDiscount);
                        }
                        else
                        {
                            _mixItemList = _invoiceItemList;
                        }


                        foreach (InvoiceItem itm in _mixItemList)
                        {
                            bool isMulti;
                            int seq;
                            List<InvoiceItem> _item = new List<InvoiceItem>();
                            _item.Add(itm);

                            DataTable _discount = CHNLSVC.Sales.GetPromotionalDiscountSequences(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "CS", _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _item, _recieptItem, _invheader, out isMulti, out seq);
                            //show pop up
                            if (_discount == null)
                            {
                                _discountSequence = seq;
                                if (isMulti)
                                {
                                    _isDifferent = false;
                                    _discountSequence = -9999;
                                }
                                else
                                {
                                    if (_discountSequence != -9999 && _discountSequence != 0)
                                    {
                                        CashPromotionDiscountHeader _discountHdr = CHNLSVC.General.GetPromotionalDiscountBySeq(seq);
                                        if (_discountHdr != null)
                                        {
                                            _canSaveWithoutDiscount = _discountHdr.Spdh_is_alw_normal;
                                        }

                                        _isDifferent = true;
                                        _discountSequence = seq;

                                        //by akila 2018/03/05
                                        if (_discountHdr.ApplyForTotalInvoice == 1)
                                        {
                                            if ((_previousSeq != _discountSequence))
                                            {
                                                string _errorString = string.Empty;
                                                _invoiceItemListWithDiscount = new List<InvoiceItem>();
                                                _invoiceItemListWithDiscount.AddRange(CHNLSVC.Sales.GetGeneralDiscountForTotalInvoice(_discountSequence, BaseCls.GlbUserComCode, _mixItemList, out _isDifferent, out _tobepay1, _invheader, out _errorString));
                                                if (!string.IsNullOrEmpty(_errorString))
                                                {
                                                    MessageBox.Show("Can not process invoice! " + _errorString, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                                    _isDifferent = false;
                                                    _discountSequence = 0;
                                                    return;
                                                }
                                                else
                                                {
                                                    _previousSeq = _discountSequence;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (IsDiscounted)
                                        {
                                            _isDifferent = false;
                                            _discountSequence = -9999;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (_discount.Rows.Count > 0)
                                {
                                    pnlDiscount.Visible = true;
                                    gvDiscount.DataSource = _discount;
                                    return;
                                }
                                else
                                {
                                    _isDifferent = false;
                                    _discountSequence = -9999;
                                }
                            }
                        }
                        #endregion

                        #endregion

                        #region old code
                        //foreach (InvoiceItem itm in _invoiceItemList)
                        //{
                        //    bool isMulti;
                        //    int seq;
                        //    List<InvoiceItem> _item = new List<InvoiceItem>();
                        //    _item.Add(itm);
                        //    DataTable _discount = CHNLSVC.Sales.GetPromotionalDiscountSequences(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "CS", _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _item, _recieptItem, _invheader, out isMulti, out seq);
                        //    //show pop up
                        //    if (_discount == null)
                        //    {
                        //        _discountSequence = seq;
                        //        if (isMulti)
                        //        {
                        //            _isDifferent = false;
                        //            _discountSequence = -9999;
                        //        }
                        //        else
                        //        {
                        //            if (_discountSequence != -9999 && _discountSequence != 0)
                        //            {
                        //                // if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                        //                //  {
                        //                _isDifferent = true;
                        //                _discountSequence = seq;
                        //                CHNLSVC.Sales.GetGeneralPromotionProcess(_discountSequence, BaseCls.GlbUserComCode, _item, out _discounted, out _isDifferent, out _tobepay1, _invheader);
                        //                // _tobepay = _tobepay + _tobepay1;
                        //                _invoiceItemListWithDiscount.AddRange(_discounted);
                        //                CashPromotionDiscountHeader _discountHdr = CHNLSVC.General.GetPromotionalDiscountBySeq(seq);
                        //                if (_discountHdr != null)
                        //                {
                        //                    _canSaveWithoutDiscount = _discountHdr.Spdh_is_alw_normal;
                        //                }
                        //                //    }
                        //            }
                        //            else
                        //            {
                        //                if (IsDiscounted)
                        //                {
                        //                    _isDifferent = false;
                        //                    _discountSequence = -9999;
                        //                    //       if (MessageBox.Show("There is no specific discount promotion available. Do you want to save?", "Saving...", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                        //                    //       {
                        //                    // _discountSequence = 0;
                        //                    //  return;

                        //                    //    }
                        //                }
                        //            }
                        //        }
                        //    }
                        //    else
                        //    {
                        //        //  if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                        //        //   {
                        //        if (_discount.Rows.Count > 0)
                        //        {
                        //            //show popup
                        //            pnlDiscount.Visible = true;
                        //            ////  pnlMain.Enabled = false;
                        //            gvDiscount.DataSource = _discount;
                        //            return;
                        //        }
                        //        //      }
                        //        else
                        //        {
                        //            _isDifferent = false;
                        //            _discountSequence = -9999;
                        //        }
                        //    }
                        //}
                        #endregion
                    }
                    else if (_discountSequence != -9999)
                    {
                        //Int32 _timeno = Convert.ToInt32(DateTime.Now.ToString("HHmmss"));
                        CHNLSVC.Sales.GetGeneralPromotionProcess(_discountSequence, BaseCls.GlbUserComCode, _invoiceItemList, out _discounted, out _isDifferent, out _tobepay, _invheader);

                        _invoiceItemListWithDiscount = _discounted;
                    }
                    if (_invoiceItemListWithDiscount != null && _invoiceItemListWithDiscount.Count > 0)
                    {
                        _isDifferent = true;
                        foreach (InvoiceItem invItm in _invoiceItemList)
                        {
                            List<InvoiceItem> _itmList = (from _res in _invoiceItemListWithDiscount
                                                          where _res.Mi_itm_stus == invItm.Mi_itm_stus && _res.Sad_itm_cd == invItm.Sad_itm_cd
                                                          select _res).ToList<InvoiceItem>();
                            if (_itmList == null || _itmList.Count <= 0)
                            {
                                _invoiceItemListWithDiscount.Add(invItm);
                            }
                        }
                        _tobepay = _invoiceItemListWithDiscount.Select(X => X.Sad_tot_amt).Sum();
                    }

                    //if ((_discountSequence == -9999 && _isDifferent) || (_discountSequence == -9999 && IsDiscounted))
                    //{
                    //    if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    //    {
                    //    }
                    //    else
                    //    {
                    //        _isDifferent = false;
                    //        _discountSequence = 0;
                    //    }
                    //}

                    //if (_discountSequence == -9999) {
                    //    CHNLSVC.Sales.GetGeneralPromotionDiscount(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _invoiceItemList, _recieptItem, out _discounted, out _isDifferent, out _tobepay, _invheader);
                    //    _invoiceItemListWithDiscount = _discounted;

                    //    if (_isDifferent) {
                    //        if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    //        {
                    //            _isDifferent = false;
                    //        }
                    //    }

                    //}

                    //added sachith
                    //2013/09/04

                    if (!_isDifferent && !IsDiscounted)
                    {
                        //credit note discount (if invoice pay mode has credit note and invoice don't have discount)
                        List<RecieptItem> _creditNote = (from _res in _recieptItem
                                                         where _res.Sard_pay_tp == "CRNOTE" || _res.Sard_pay_tp == "ADVAN"
                                                         select _res).ToList<RecieptItem>();
                        if (_creditNote != null && _creditNote.Count > 0)
                        {
                            Int32 _timeno1 = Convert.ToInt32(DateTime.Now.ToString("HHmmss"));
                            CHNLSVC.Sales.GetGeneralPromotionDiscountAdvanCredit(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "CS", _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _invoiceItemList, _recieptItem, out _discounted, out _isDifferent, out _tobepay, _invheader);
                            _invoiceItemListWithDiscount = _discounted;
                            foreach (InvoiceItem _invItm in _invoiceItemListWithDiscount)
                            {
                                if (_invItm.Sad_dis_type == "P")
                                {
                                    CashPromotionDiscountHeader _discountHdr = CHNLSVC.General.GetPromotionalDiscountBySeq(_invItm.Sad_dis_seq);
                                    if (_discountHdr != null)
                                    {
                                        _canSaveWithoutDiscount = _discountHdr.Spdh_is_alw_normal;
                                    }
                                }
                            }
                        }
                    }


                    ////if (_discountSequence == 0)
                    ////{
                    ////    foreach (InvoiceItem itm in _invoiceItemList)
                    ////    {
                    ////        bool isMulti;
                    ////        int seq;
                    ////        List<InvoiceItem> _item = new List<InvoiceItem>();
                    ////        _item.Add(itm);
                    ////        DataTable _discount = CHNLSVC.Sales.GetPromotionalDiscountSequences(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "CS", _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _item, _recieptItem, _invheader, out isMulti, out seq);
                    ////        //show pop up
                    ////        if (_discount == null)
                    ////        {
                    ////            _discountSequence = seq;
                    ////            if (isMulti)
                    ////            {
                    ////                _isDifferent = false;
                    ////                _discountSequence = -9999;
                    ////            }
                    ////            else
                    ////            {
                    ////                if (_discountSequence != -9999 && _discountSequence != 0)
                    ////                {
                    ////                    // if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    ////                    //  {
                    ////                    _isDifferent = true;
                    ////                    _discountSequence = seq;
                    ////                    CHNLSVC.Sales.GetGeneralPromotionProcess(_discountSequence, BaseCls.GlbUserComCode, _item, out _discounted, out _isDifferent, out _tobepay1, _invheader);
                    ////                    // _tobepay = _tobepay + _tobepay1;
                    ////                    _invoiceItemListWithDiscount.AddRange(_discounted);
                    ////                    CashPromotionDiscountHeader _discountHdr = CHNLSVC.General.GetPromotionalDiscountBySeq(seq);
                    ////                    if (_discountHdr != null)
                    ////                    {
                    ////                        _canSaveWithoutDiscount = _discountHdr.Spdh_is_alw_normal;
                    ////                    }
                    ////                    //    }
                    ////                }
                    ////                else
                    ////                {
                    ////                    if (IsDiscounted)
                    ////                    {
                    ////                        _isDifferent = false;
                    ////                        _discountSequence = -9999;
                    ////                        //       if (MessageBox.Show("There is no specific discount promotion available. Do you want to save?", "Saving...", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    ////                        //       {
                    ////                        // _discountSequence = 0;
                    ////                        //  return;

                    ////                        //    }
                    ////                    }
                    ////                }
                    ////            }
                    ////        }
                    ////        else
                    ////        {
                    ////            //  if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    ////            //   {
                    ////            if (_discount.Rows.Count > 0)
                    ////            {
                    ////                //show popup
                    ////                pnlDiscount.Visible = true;
                    ////                ////  pnlMain.Enabled = false;
                    ////                gvDiscount.DataSource = _discount;
                    ////                return;
                    ////            }
                    ////            //      }
                    ////            else
                    ////            {
                    ////                _isDifferent = false;
                    ////                _discountSequence = -9999;
                    ////            }
                    ////        }
                    ////    }
                    ////}
                    ////else if (_discountSequence != -9999)
                    ////{
                    ////    //Int32 _timeno = Convert.ToInt32(DateTime.Now.ToString("HHmmss"));
                    ////    CHNLSVC.Sales.GetGeneralPromotionProcess(_discountSequence, BaseCls.GlbUserComCode, _invoiceItemList, out _discounted, out _isDifferent, out _tobepay, _invheader);

                    ////    _invoiceItemListWithDiscount = _discounted;
                    ////}
                    ////if (_invoiceItemListWithDiscount != null && _invoiceItemListWithDiscount.Count > 0)
                    ////{
                    ////    _isDifferent = true;
                    ////    foreach (InvoiceItem invItm in _invoiceItemList)
                    ////    {
                    ////        List<InvoiceItem> _itmList = (from _res in _invoiceItemListWithDiscount
                    ////                                      where _res.Mi_itm_stus == invItm.Mi_itm_stus && _res.Sad_itm_cd == invItm.Sad_itm_cd
                    ////                                      select _res).ToList<InvoiceItem>();
                    ////        if (_itmList == null || _itmList.Count <= 0)
                    ////        {
                    ////            _invoiceItemListWithDiscount.Add(invItm);
                    ////        }
                    ////    }
                    ////    _tobepay = _invoiceItemListWithDiscount.Select(X => X.Sad_tot_amt).Sum();
                    ////}

                    //if ((_discountSequence == -9999 && _isDifferent) || (_discountSequence == -9999 && IsDiscounted))
                    //{
                    //    if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    //    {
                    //    }
                    //    else
                    //    {
                    //        _isDifferent = false;
                    //        _discountSequence = 0;
                    //    }
                    //}

                    //if (_discountSequence == -9999) {
                    //    CHNLSVC.Sales.GetGeneralPromotionDiscount(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _invoiceItemList, _recieptItem, out _discounted, out _isDifferent, out _tobepay, _invheader);
                    //    _invoiceItemListWithDiscount = _discounted;

                    //    if (_isDifferent) {
                    //        if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    //        {
                    //            _isDifferent = false;
                    //        }
                    //    }

                    //}

                    //added sachith
                    //2013/09/04

                    if (!_isDifferent && !IsDiscounted)
                    {
                        //credit note discount (if invoice pay mode has credit note and invoice don't have discount)
                        List<RecieptItem> _creditNote = (from _res in _recieptItem
                                                         where _res.Sard_pay_tp == "CRNOTE" || _res.Sard_pay_tp == "ADVAN"
                                                         select _res).ToList<RecieptItem>();
                        if (_creditNote != null && _creditNote.Count > 0)
                        {
                            Int32 _timeno1 = Convert.ToInt32(DateTime.Now.ToString("HHmmss"));
                            CHNLSVC.Sales.GetGeneralPromotionDiscountAdvanCredit(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "CS", _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _invoiceItemList, _recieptItem, out _discounted, out _isDifferent, out _tobepay, _invheader);
                            _invoiceItemListWithDiscount = _discounted;
                            foreach (InvoiceItem _invItm in _invoiceItemListWithDiscount)
                            {
                                if (_invItm.Sad_dis_type == "P")
                                {
                                    CashPromotionDiscountHeader _discountHdr = CHNLSVC.General.GetPromotionalDiscountBySeq(_invItm.Sad_dis_seq);
                                    if (_discountHdr != null)
                                    {
                                        _canSaveWithoutDiscount = _discountHdr.Spdh_is_alw_normal;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception exs)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show(exs.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    CHNLSVC.CloseChannel();
                    return;
                }
                if (_isDifferent || IsDiscounted)
                {
                    if (MessageBox.Show("Discount applicable for selected paymodes,Do you want to ammend payments\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                    }
                    else
                    {
                        if (_canSaveWithoutDiscount)
                        {
                            if (MessageBox.Show("Invoice will save without Discount", "Question", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                            {
                                _isDifferent = false;
                                _discountSequence = 0;
                            }
                            else
                            {
                                _isDifferent = false;
                                _discountSequence = 0;
                                return;
                            }
                            //return;
                        }
                        else
                        {
                            MessageBox.Show("Can not process invoice because discount circular not allow to process without discount", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            _isDifferent = false;
                            _discountSequence = 0;
                            return;
                        }
                    }
                }
                else
                {
                    ////if (MessageBox.Show("There is no specific discount promotion available. Do you want to save?", "Saving...", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    ////{
                    ////    _discountSequence = 0;
                    ////    return;
                    ////}
                }

                if (_isDifferent)
                {
                    string _discountItem = FormatDiscoutnItem(0, "Item") + FormatDiscoutnItem(2, "Unit Amount") + FormatDiscoutnItem(2, "Dis. Rate") + FormatDiscoutnItem(2, "Dis. Amount") + FormatDiscoutnItem(2, "Total Amount") + "\n";
                    foreach (InvoiceItem i in _invoiceItemList)//.Where(x => x.Sad_disc_rt > 0).ToList()
                        _discountItem += FormatDiscoutnItem(0, i.Sad_itm_cd) + FormatDiscoutnItem(2, i.Sad_unit_amt.ToString()) + FormatDiscoutnItem(2, i.Sad_disc_rt.ToString()) + FormatDiscoutnItem(2, i.Sad_disc_amt.ToString()) + FormatDiscoutnItem(2, i.Sad_tot_amt.ToString()) + "\n";

                    //if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    //{
                    if (lblSVatStatus.Text.Trim() == "Available" || lblVatExemptStatus.Text.Trim() == "Available")
                    {
                        decimal Vatsum = _invoiceItemListWithDiscount.Sum(x => x.Sad_itm_tax_amt);
                        _tobepay -= Vatsum;
                    }
                    lblRePayToBePay.Text = FormatToCurrency(_tobepay.ToString());
                    if (_recieptItem != null) if (_recieptItem.Count > 0)
                            if (_recieptItem.Count == 1)
                                _recieptItem.ForEach(x => x.Newpayment = Math.Round(_tobepay, 2));
                            else
                                _recieptItem.ForEach(x => x.Newpayment = Math.Round(x.Sard_settle_amt, 2));
                    DataTable _tbl = _recieptItem.ToDataTable();
                    gvRePayment.DataSource = _tbl;
                    _toBePayNewAmount = _tobepay;
                    //bool creditnote=false;
                    //foreach (DataGridViewRow grv in gvRePayment.Rows) {
                    //    string paytp = grv.Cells["repy_paymenttype"].Value.ToString();
                    //    if (paytp == "CRNOTE")
                    //    {
                    //        creditnote = true;
                    //        grv.ReadOnly = true;
                    //        gvRePayment.BeginEdit(true);
                    //    }

                    //}
                    pnlRePay.Visible = true;
                    ////pnlMain.Enabled = false;
                    //}
                    return;
                }
                if (IsDiscounted)
                {
                    _invoiceItemListWithDiscount = DiscountedInvoiceItem;
                    string _discountItem = FormatDiscoutnItem(0, "Item") + FormatDiscoutnItem(2, "Unit Amount") + FormatDiscoutnItem(2, "Dis. Rate") + FormatDiscoutnItem(2, "Dis. Amount") + FormatDiscoutnItem(2, "Total Amount") + "\n";
                    foreach (InvoiceItem i in _invoiceItemList)//.Where(x => x.Sad_disc_rt > 0).ToList()
                        _discountItem += FormatDiscoutnItem(0, i.Sad_itm_cd) + FormatDiscoutnItem(2, i.Sad_unit_amt.ToString()) + FormatDiscoutnItem(2, i.Sad_disc_rt.ToString()) + FormatDiscoutnItem(2, i.Sad_disc_amt.ToString()) + FormatDiscoutnItem(2, i.Sad_tot_amt.ToString()) + "\n";
                    if (MessageBox.Show("Discount applicable for selected paymodes,Do you want to ammend payments?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        if (lblSVatStatus.Text.Trim() == "Available" || lblVatExemptStatus.Text.Trim() == "Available")
                        {
                            decimal Vatsum = DiscountedInvoiceItem.Sum(x => x.Sad_itm_tax_amt);
                            _tobepay = DiscountedValue - Vatsum;
                        }
                        else
                        {
                            _tobepay = DiscountedValue;
                        }
                        lblRePayToBePay.Text = FormatToCurrency(_tobepay.ToString());
                        if (_recieptItem != null) if (_recieptItem.Count > 0)
                                if (_recieptItem.Count == 1)
                                    _recieptItem.ForEach(x => x.Newpayment = Math.Round(_tobepay, 2));
                                else
                                    _recieptItem.ForEach(x => x.Newpayment = Math.Round(x.Sard_settle_amt, 2));
                        DataTable _tbl = _recieptItem.ToDataTable();
                        gvRePayment.DataSource = _tbl;
                        _toBePayNewAmount = _tobepay;
                        //bool creditnote=false;
                        //foreach (DataGridViewRow grv in gvRePayment.Rows) {
                        //    string paytp = grv.Cells["repy_paymenttype"].Value.ToString();
                        //    if (paytp == "CRNOTE")
                        //    {
                        //        creditnote = true;
                        //        grv.ReadOnly = true;
                        //        gvRePayment.BeginEdit(true);
                        //    }

                        //}
                        pnlRePay.Visible = true;
                        //// pnlMain.Enabled = false;
                    }
                    return;
                }
                else
                {
                    //if (MessageBox.Show("There is no specific discount promotion available. Do you want to save?", "Saving...", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    //{
                    //    return;
                    //}
                }

                #region Gift Voucher - Parser

                List<InvoiceVoucher> _giftVoucher = null;
                List<ReptPickSerials> _giftVoucherSerial = null;
                List<ReptPickSerials> _gvLst = ScanSerialList.Where(x => IsGiftVoucher(x.ItemType)).ToList();
                if (_gvLst != null)
                    if (_gvLst.Count > 0)
                    {
                        _giftVoucher = new List<InvoiceVoucher>();
                        Parallel.ForEach(_gvLst, _one =>
                        {
                            string _attachedItem = string.Empty;
                            if (gf_assignItem.Visible)
                            {
                                _attachedItem = (from DataGridViewRow _row in gvGiftVoucher.Rows where Convert.ToString(_row.Cells["gf_serial1"].Value) == _one.Tus_ser_1 && Convert.ToString(_row.Cells["gf_serial2"].Value) == _one.Tus_ser_2 && Convert.ToString(_row.Cells["gf_item"].Value) == _one.Tus_itm_cd select Convert.ToString(_row.Cells[7].Value)).ToList()[0];
                                if (string.IsNullOrEmpty(_attachedItem))
                                    _attachedItem = _invoiceItemList.Where(y => y.Sad_job_line == (_invoiceItemList.Where(x => x.Sad_itm_line == _one.Tus_base_itm_line).ToList()[0].Sad_job_line) && y.Sad_itm_tp == "M").Select(y => y.Sad_itm_cd).Distinct().ToList()[0];
                            }
                            else
                                _attachedItem = _invoiceItemList.Where(y => y.Sad_job_line == (_invoiceItemList.Where(x => x.Sad_itm_line == _one.Tus_base_itm_line).ToList()[0].Sad_job_line) && y.Sad_itm_tp == "M").Select(y => y.Sad_itm_cd).Distinct().ToList()[0];

                            InvoiceVoucher _gift = new InvoiceVoucher();
                            _gift.Stvo_bookno = Convert.ToInt32(_one.Tus_ser_2);
                            _gift.Stvo_cre_by = BaseCls.GlbUserID;
                            _gift.Stvo_cre_when = DateTime.Now;
                            _gift.Stvo_gv_itm = _one.Tus_itm_cd;
                            _gift.Stvo_inv_no = string.Empty;
                            _gift.Stvo_itm_cd = _attachedItem;
                            _gift.Stvo_pageno = Convert.ToInt32(_one.Tus_ser_1);
                            _gift.Stvo_prefix = _one.Tus_ser_3;
                            _gift.Stvo_price = _one.Tus_unit_price;
                            _giftVoucher.Add(_gift);
                            if (_giftVoucherSerial == null) _giftVoucherSerial = new List<ReptPickSerials>();
                            _giftVoucherSerial.Add(_one);
                            ScanSerialList.Remove(_one);
                        });
                    }

                #endregion Gift Voucher - Parser

                #region cr note warranty updation

                /* MODIFICATION 2014/02/08
                 * SACHITH
                 * ********* PROCESS ***************
                 *
                 * get all reciept types
                 * get credit notes in reciept types
                 * get all items in credit note
                 * get warranty in cr note
                 * update all new items with old warranty
                 *
                 * **IMPORTANT**
                 * if cr has multiple items and multiple warranty get maximum warranty
                 * first item 0 months
                 * second 12 months
                 * third 24 months
                 * new discount will be 24 month for all items
                 *
                 * **********************************
                 */

                //Check and apply warranty period and remarks - New
                foreach (InvoiceItem _itmWar in _invoiceItemList)
                {
                    //Check Selected price book and level is warranty base price level.
                    PriceBookLevelRef _pbLvl = CHNLSVC.Sales.GetPriceLevelForHp(BaseCls.GlbUserComCode, _itmWar.Sad_pbook, _itmWar.Sad_pb_lvl, _itmWar.Sad_itm_stus);
                    if (_pbLvl != null)
                    {
                        if (_pbLvl.Sapl_set_warr == true || txtDate.Value.Date != _serverDt)
                        {
                            if (CheckItemWarrantyNew(_itmWar.Sad_itm_cd, _itmWar.Sad_itm_stus, _itmWar.Sad_seq, _itmWar.Sad_itm_seq, _itmWar.Sad_pbook, _itmWar.Sad_pb_lvl, _pbLvl.Sapl_set_warr, _itmWar.Sad_unit_rt, _pbLvl.Sapl_warr_period))
                            {
                                MessageBox.Show(_itmWar.Sad_itm_cd + " item's warranty period not setup by the inventory department. Please contact inventory department", "Warranty Setup", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            else
                            {
                                _itmWar.Sad_warr_period = WarrantyPeriod;
                                _itmWar.Sad_warr_remarks = WarrantyRemarks;
                            }
                        }
                    }
                    else
                    {
                        MessageBox.Show("Cannot find valid warranty.Please contact IT Dept.", "Warranty Setup", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }
                string _WarrFrom = "";

                foreach (RecieptItem ritm in _recieptItem)
                {
                    if (ritm.Sard_pay_tp == "CRNOTE")
                    {
                        InvoiceHeader _invoice = CHNLSVC.Sales.GetInvoiceHeaderDetails(ritm.Sard_ref_no);
                        if (_invoice != null)
                        {
                            DataTable _appReq = CHNLSVC.General.SearchrequestAppDetByRef(_invoice.Sah_anal_3);

                            if (_appReq.Rows.Count == 0)
                            {
                                MessageBox.Show("Cannot find approval details.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }
                            else
                            {
                                foreach (DataRow row2 in _appReq.Rows)
                                {
                                    if (row2["GRAD_ANAL10"] != null)
                                    {
                                        _WarrFrom = row2["GRAD_ANAL10"].ToString();
                                    }
                                }
                            }
                        }

                        if (_WarrFrom != "NEWITEM")
                        {
                            //get items from cr note
                            List<InvoiceItem> _invItmList = CHNLSVC.Sales.GetInvoiceItems(ritm.Sard_ref_no);
                            int _proPd = 0;
                            string _warrRmk = "";
                            //get all discounts
                            foreach (InvoiceItem _tem in _invItmList)
                            {
                                if (_tem.Sad_warr_period > _proPd)
                                {
                                    _proPd = _tem.Sad_warr_period;
                                    _warrRmk = _tem.Sad_warr_remarks;
                                }
                            }

                            _invoiceItemList.ForEach(x => x.Sad_warr_period = _proPd);
                        }
                        //Comment by darshana 12-02-2015 after submint invoice copy 26H-CS-33176 mentionning system error by boss
                        // _invoiceItemList.ForEach(x => x.Sad_warr_remarks = _warrRmk);
                    }
                }

                #endregion cr note warranty updation

                //Check and valid date ADVANCE Receipt Item and invoice Item
                if (_recieptItem != null)
                {
                    if (_recieptItem.Count > 0)
                    {
                        foreach (RecieptItem _itm in _recieptItem)
                        {
                            if (_itm.Sard_pay_tp == "ADVAN")
                            {
                                List<ReceiptItemDetails> _advRecItm = new List<ReceiptItemDetails>();
                                _advRecItm = CHNLSVC.Sales.GetAdvanReceiptItems(_itm.Sard_ref_no);

                                if (_advRecItm != null)
                                {
                                    if (_advRecItm.Count > 0)
                                    {
                                        foreach (ReceiptItemDetails _advItm in _advRecItm)
                                        {
                                            List<InvoiceItem> _foundItm = (from _res in _invoiceItemList
                                                                           where _res.Sad_itm_cd == _advItm.Sari_item
                                                                           select _res).ToList<InvoiceItem>();
                                            if (_foundItm != null && _foundItm.Count > 0)
                                            {

                                            }
                                            else
                                            {
                                                MessageBox.Show("Advance receipt item : " + _advItm.Sari_item + " not in invoice item list.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                                return;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }



                int effect = -1;
                string _error = string.Empty;
                string _buybackadj = string.Empty;
                string _registration = "";
                try
                {
                    btnSave.Enabled = false;
                    _invoiceItemList.ForEach(x => x.Sad_srn_qty = 0);
                    List<RecieptItem> _registrationReciept = new List<RecieptItem>();
                    _registrationReciept = ucPayModes2.RecieptItemList;
                    List<VehicalRegistration> _registrationList = new List<VehicalRegistration>();
                    //2013/12/10
                    //ADDED REGISTRATION PROCESS

                    if (_isNeedRegistrationReciept)
                    {
                        //reciept auto number
                        MasterAutoNumber masterAutoRecTp = new MasterAutoNumber();
                        masterAutoRecTp.Aut_cate_cd = BaseCls.GlbUserDefProf;
                        masterAutoRecTp.Aut_cate_tp = "PC";
                        masterAutoRecTp.Aut_direction = null;
                        masterAutoRecTp.Aut_modify_dt = null;
                        masterAutoRecTp.Aut_moduleid = "RECEIPT";
                        masterAutoRecTp.Aut_number = 5;//what is Aut_number
                        masterAutoRecTp.Aut_start_char = "VHREG";
                        masterAutoRecTp.Aut_year = null;

                        RecieptHeader _ReceiptHeader = new RecieptHeader();
                        _ReceiptHeader.Sar_seq_no = -1; //CHNLSVC.Inventory.Generate_new_seq_num(GlbUserName, "RECEIPT", 1, BaseCls.GlbUserComCode);
                        _ReceiptHeader.Sar_com_cd = BaseCls.GlbUserComCode;
                        _ReceiptHeader.Sar_receipt_type = "VHREG";
                        // _ReceiptHeader.Sar_receipt_no = txtRecNo.Text.Trim();

                        MasterReceiptDivision _RecDiv = new MasterReceiptDivision();
                        _RecDiv = CHNLSVC.Sales.GetDefRecDivision(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf);
                        if (_RecDiv.Msrd_cd != null)
                        {
                            _ReceiptHeader.Sar_prefix = _RecDiv.Msrd_cd;
                        }
                        else
                        {
                            _ReceiptHeader.Sar_prefix = "";
                        }
                        //_ReceiptHeader.Sar_prefix = txtDivision.Text.Trim();
                        // _ReceiptHeader.Sar_manual_ref_no = txtManual.Text.Trim();
                        _ReceiptHeader.Sar_receipt_date = Convert.ToDateTime(txtDate.Value).Date;
                        _ReceiptHeader.Sar_direct = true;
                        _ReceiptHeader.Sar_acc_no = "";
                        _ReceiptHeader.Sar_is_oth_shop = false;
                        _ReceiptHeader.Sar_oth_sr = "";
                        _ReceiptHeader.Sar_profit_center_cd = BaseCls.GlbUserDefProf;
                        _ReceiptHeader.Sar_debtor_cd = txtCustomer.Text.Trim();
                        _ReceiptHeader.Sar_debtor_name = txtCusName.Text.Trim();
                        ////  _ReceiptHeader.Sar_debtor_add_1 = txtAddress1.Text.Trim();
                        //// _ReceiptHeader.Sar_debtor_add_2 = txtAddress2.Text.Trim();
                        _ReceiptHeader.Sar_tel_no = "";
                        _ReceiptHeader.Sar_mob_no = txtMobile.Text.Trim();
                        _ReceiptHeader.Sar_nic_no = txtNIC.Text.Trim();
                        _ReceiptHeader.Sar_tot_settle_amt = ucPayModes2.RecieptItemList.Sum(x => x.Sard_settle_amt);
                        _ReceiptHeader.Sar_comm_amt = 0;
                        _ReceiptHeader.Sar_is_mgr_iss = false;
                        _ReceiptHeader.Sar_esd_rate = 0;
                        _ReceiptHeader.Sar_wht_rate = 0;
                        _ReceiptHeader.Sar_epf_rate = 0;
                        _ReceiptHeader.Sar_currency_cd = "LKR";
                        _ReceiptHeader.Sar_uploaded_to_finance = false;
                        _ReceiptHeader.Sar_act = true;
                        _ReceiptHeader.Sar_direct_deposit_bank_cd = "";
                        _ReceiptHeader.Sar_direct_deposit_branch = "";
                        // _ReceiptHeader.Sar_remarks = txtNote.Text.Trim();
                        _ReceiptHeader.Sar_is_used = false;
                        _ReceiptHeader.Sar_ref_doc = "";
                        _ReceiptHeader.Sar_ser_job_no = "";
                        _ReceiptHeader.Sar_used_amt = 0;
                        _ReceiptHeader.Sar_create_by = BaseCls.GlbUserID;
                        _ReceiptHeader.Sar_mod_by = BaseCls.GlbUserID;
                        _ReceiptHeader.Sar_session_id = BaseCls.GlbUserSessionID;
                        _ReceiptHeader.Sar_anal_1 = cmbDistrict.Text;
                        _ReceiptHeader.Sar_anal_2 = txtProvince.Text.Trim();
                        if (string.IsNullOrEmpty(_businessEntity.Mbe_distric_cd))
                            _businessEntity.Mbe_distric_cd = cmbDistrict.Text;
                        if (string.IsNullOrEmpty(_businessEntity.Mbe_province_cd))
                            _businessEntity.Mbe_province_cd = txtProvince.Text;

                        if (cmbDistrict.SelectedValue != null)
                            _masterBusinessCompany.Mbe_distric_cd = cmbDistrict.SelectedValue.ToString();
                        _masterBusinessCompany.Mbe_province_cd = txtProvince.Text;

                        ReptPickHeader _SerHeader = new ReptPickHeader();
                        _SerHeader.Tuh_usrseq_no = -1;
                        _SerHeader.Tuh_usr_id = BaseCls.GlbUserID;
                        _SerHeader.Tuh_usr_com = BaseCls.GlbUserComCode;
                        _SerHeader.Tuh_session_id = BaseCls.GlbUserSessionID;
                        _SerHeader.Tuh_cre_dt = Convert.ToDateTime(txtDate.Value).Date;
                        _SerHeader.Tuh_doc_tp = "INV";
                        _SerHeader.Tuh_direct = false;
                        _SerHeader.Tuh_ischek_itmstus = true;
                        _SerHeader.Tuh_ischek_simitm = true;
                        _SerHeader.Tuh_ischek_reqqty = true;
                        _SerHeader.Tuh_doc_no = null;

                        // vehical regitration list
                        //foreach (RegistrationList _reg in _List)
                        //{
                        //    //get serials
                        //    List<ReptPickSerials> _serList = (from res in ScanSerialList
                        //                                      where res.Tus_itm_cd == _reg.Item && res.Tus_itm_stus == _reg.Stus
                        //                                      select res).ToList<ReptPickSerials>();
                        //    foreach (ReptPickSerials _serial in _serList)
                        //    {
                        //        VehicalRegistration _tem = AssingRegDetails(_reg.Item, _reg.Item_reg, _reg.Item_claim, _serial.Tus_ser_1, _serial.Tus_ser_2);
                        //        _registrationList.Add(_tem);
                        //    }
                        //}
                        //save invoice with registration

                        effect = CHNLSVC.Sales.SaveInvoiceDuplicateWithTransactionRegistration(_invheader, _invoiceItemList, InvoiceSerialList, _recHeader, _recieptItem, invHdr, ScanSerialList, null, _invoiceAuto, _receiptAuto, _masterAutoDo, (chkDeliverLater.Checked == false || chkDeliverNow.Checked) ? true : false, out _invoiceNo, out _receiptNo, out _deliveryOrderNo, _businessEntity, false, _isHoldInvoiceProcess, out _error, _giftVoucher, _buybackheader, _buybackAuto, BuyBackItemList, out _buybackadj, _ReceiptHeader, masterAutoRecTp, _registrationList, _registrationReciept, _SerHeader, out _registration, ref IsInvoiceCompleted);

                        //if (effect == -1) {
                        //    MessageBox.Show("Error occured while processing !!\n" + _error, "Error");
                        //    return;

                        //}
                    }
                    //END
                    else
                    {
                        //ADDED 2014/02/26
                        bool _sucess = CheckGeneralDiscount();
                        if (_sucess == false)
                        {
                            return;
                        }
                        //
                        foreach (InvoiceItem _itm01 in _invoiceItemList)    //kapila 26/4/2016
                        {
                            decimal _doQty = 0;
                            List<ReptPickSerials> _temp = ScanSerialList.Where(x => x.Tus_base_itm_line == _itm01.Sad_itm_line).ToList<ReptPickSerials>();
                            _doQty = _temp.Sum(p => p.Tus_qty);
                            if (_itm01.Sad_qty != _doQty)
                            {
                                this.Cursor = Cursors.Default;
                                MessageBox.Show("Error: Item Qty not match with DO Qty. Contact IT Dept.", "Invoice", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                return;
                            }
                        }

                        effect = CHNLSVC.Sales.SaveInvoiceDuplicateWithTransaction01(_invheader, _invoiceItemList, InvoiceSerialList, _recHeader, _recieptItem, invHdr, ScanSerialList, null, _invoiceAuto, _receiptAuto, _masterAutoDo, (chkDeliverLater.Checked == false || chkDeliverNow.Checked) ? true : false, out _invoiceNo, out _receiptNo, out _deliveryOrderNo, _businessEntity, false, _isHoldInvoiceProcess, out _error, _giftVoucher, _buybackheader, _buybackAuto, BuyBackItemList, out _buybackadj, ref IsInvoiceCompleted);
                    }
                }
                catch (Exception ex)
                {
                    if (_giftVoucher != null && _giftVoucher.Count > 0) { _giftVoucher = new List<InvoiceVoucher>(); ScanSerialList.AddRange(_giftVoucherSerial); _giftVoucherSerial = new List<ReptPickSerials>(); }
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show(ex.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
                    CHNLSVC.CloseChannel();
                    return;
                }
                finally
                {
                    string Msg = string.Empty;

                    if (effect != -1)
                    {
                        ////if (chkDeliverLater.Checked == false || chkDeliverNow.Checked)
                        ////{
                        ////    ////Msg = "Successfully Saved! Document No : " + _invoiceNo + " with Delivery Order :" + _deliveryOrderNo + ". ";
                        ////    Msg = "Successfully Saved! Document No : " + _invoiceNo + ". ";
                        ////}
                        ////else
                        ////{
                        ////    Msg = "Successfully Saved! Document No : " + _invoiceNo + ". ";
                        ////}

                        ////if (cmbInvType.Text.Trim() == "CS")
                        ////{
                        ////var _isCashPaymentExsit = _recieptItem.Where(x => x.Sard_pay_tp == "CASH").ToList();
                        ////if (_isCashPaymentExsit != null)
                        ////    if (_isCashPaymentExsit.Count > 0)
                        ////    {
                        ////        decimal _cashamt = _isCashPaymentExsit.Sum(x => x.Sard_settle_amt);
                        ////        string _customerGiven = PaymentBalanceConfirmation(Msg, _cashamt);
                        ////        if (!string.IsNullOrEmpty(_customerGiven))
                        ////        {
                        ////            this.Cursor = Cursors.Default;
                        ////            string BalanceToGive = FormatToCurrency(Convert.ToString(Convert.ToDecimal(_customerGiven) - _cashamt));
                        ////            using (new CenterWinDialog(this))
                        ////            {
                        ////                MessageBox.Show("You have to give back as balance " + BalanceToGive + "\n in " + lblCurrency.Text + ".", "Balance To Customer", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        ////            }
                        ////        }
                        ////    }
                        ////}
                        ////    else
                        ////    {
                        //// this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(Msg, "Saved Documents", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        ////}
                        BaseCls.GlbReportName = string.Empty;
                        GlbReportName = string.Empty;
                        MasterBusinessEntity _itm = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, string.Empty, string.Empty, "C");
                        bool _isAskDO = false;
                        if (MasterChannel != null) if (MasterChannel.Rows.Count > 0) if (MasterChannel.Rows[0].Field<Int16>("msc_isprint_do") == 1) _isAskDO = true; else _isAskDO = false;

                        clsSalesRep obj = new clsSalesRep();
                        BaseCls.GlbReportDoc = _invoiceNo;
                        BaseCls.GlbReportIsCostPrmission = 0;

                        if (BaseCls.GlbDefSubChannel == "HUG")  //kapila 11/3/2017
                            obj.HugPOSInvoiceDirectPrint();
                        else
                            obj.POSInvoiceDirectPrint();

                        //TODO POS PRINT
                        //ReportViewer _view = new ReportViewer();
                        //BaseCls.GlbReportTp = "POS";
                        //_view.GlbReportName = "InvoicePOSPrint.rpt";
                        //_view.GlbReportDoc = _invoiceNo;
                        //BaseCls.GlbReportName = "InvoicePOSPrint.rpt";
                        //_view.Show();
                        //_view = null;

                        ////////if (chkManualRef.Checked == false)
                        ////////{
                        ////////    bool _isPrintElite = false;
                        ////////    if (!string.IsNullOrEmpty(_MasterProfitCenter.Mpc_chnl))
                        ////////    { if (_MasterProfitCenter.Mpc_chnl.Trim() == "ELITE" || _MasterProfitCenter.Mpc_chnl.Trim() == "RRC1" || _MasterProfitCenter.Mpc_chnl.Trim() == "RRE2" || _MasterProfitCenter.Mpc_chnl.Trim() == "APPLE") { BaseCls.GlbReportTp = "INV"; ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; _view.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "InvoiceHalfPrints.rpt" : BaseCls.GlbUserComCode == "GCL" ? "InvoicePrints_Gold.rpt" : "InvoiceHalfPrints.rpt"; _view.GlbReportDoc = _invoiceNo; _view.Show(); _view = null; _isPrintElite = true; } }
                        ////////    //AUTO_DEL
                        ////////    //get permission
                        ////////    bool _permission = CHNLSVC.Security.Is_OptionPerimitted(BaseCls.GlbUserComCode, BaseCls.GlbUserID, 11055);
                        ////////    if (!_permission)
                        ////////    {
                        ////////        if (_MasterProfitCenter.Mpc_chnl.Trim() == "AUTO_DEL")
                        ////////        {
                        ////////            if (cmbInvType.Text.Trim() == "CRED")
                        ////////            {
                        ////////                ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; _view.GlbReportName = "DealerCreditInvoicePrints.rpt"; BaseCls.GlbReportName = "DealerCreditInvoicePrints.rpt"; _view.GlbReportDoc = _invoiceNo; BaseCls.GlbReportDoc = _invoiceNo;
                        ////////                _view.Show(); _view = null; _isPrintElite = true;
                        ////////            }
                        ////////            else
                        ////////            {
                        ////////                ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; _view.GlbReportName = "DealerInvoicePrints.rpt"; BaseCls.GlbReportName = "DealerInvoicePrints.rpt"; _view.GlbReportDoc = _invoiceNo; BaseCls.GlbReportDoc = _invoiceNo; _view.Show(); _view = null; _isPrintElite = true;
                        ////////            }
                        ////////        }
                        ////////    }
                        ////////    if (_isPrintElite == false)
                        ////////    {
                        ////////        if (_itm.Mbe_sub_tp != "C.")
                        ////////        {
                        ////////            //Showroom
                        ////////            //========================= INVOCIE  CASH/CREDIT/ HIRE
                        ////////            if (chkTaxPayable.Checked == false)
                        ////////            { ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; BaseCls.GlbReportTp = "INV"; _view.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "InvoiceHalfPrints.rpt" : BaseCls.GlbUserComCode == "GCL" ? "InvoicePrints_Gold.rpt" : "InvoiceHalfPrints.rpt"; _view.GlbReportDoc = _invoiceNo; _view.Show(); _view = null; }
                        ////////            else
                        ////////            {
                        ////////                //Add Code by Chamal 27/04/2013
                        ////////                //====================  TAX INVOICE
                        ////////                ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; BaseCls.GlbReportTp = "INV"; _view.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "InvoiceHalfPrints.rpt" : BaseCls.GlbUserComCode == "GCL" ? "InvoicePrints_Gold.rpt" : "InvoiceHalfPrints.rpt"; _view.GlbReportDoc = _invoiceNo; _view.Show(); _view = null;
                        ////////                if (_recieptItem != null) if (_recieptItem.Count > 0) if (_itm.Mbe_cate == "LEASE") { ReportViewer _viewt = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; _viewt.GlbReportName = "InvoicePrintTax_insus.rpt"; _viewt.GlbReportDoc = _invoiceNo; _viewt.Show(); _viewt = null; }
                        ////////                //====================  TAX INVOICE
                        ////////            }
                        ////////        }
                        ////////        else
                        ////////        {
                        ////////            //Dealer
                        ////////            ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; BaseCls.GlbReportTp = "INV"; _view.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "InvoiceHalfPrints.rpt" : BaseCls.GlbUserComCode == "GCL" ? "InvoicePrints_Gold.rpt" : "InvoicePrintTax.rpt"; _view.GlbReportDoc = _invoiceNo; _view.Show(); _view = null;
                        ////////            if (_recieptItem != null) if (_recieptItem.Count > 0) if (_itm.Mbe_cate == "LEASE") { ReportViewer _viewt = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; _viewt.GlbReportName = "InvoicePrint_insus.rpt"; _viewt.GlbReportDoc = _invoiceNo; _viewt.Show(); _viewt = null; }
                        ////////        }
                        ////////    }

                        ////////    if (BuyBackItemList != null)
                        ////////        if (BuyBackItemList.Count > 0)
                        ////////        {
                        ////////            Reports.Inventory.ReportViewerInventory _viewBB = new Reports.Inventory.ReportViewerInventory();

                        ////////            BaseCls.GlbReportName = string.Empty;
                        ////////            GlbReportName = string.Empty;
                        ////////            _viewBB.GlbReportName = string.Empty;
                        ////////            BaseCls.GlbReportTp = "INWARD";
                        ////////            if (BaseCls.GlbUserComCode == "SGL") //Sanjeewa 2014-01-07
                        ////////                _viewBB.GlbReportName = "Inward_Docs.rpt";
                        ////////            else if (BaseCls.GlbDefChannel == "AUTO_DEL") //Sanjeewa 2014-03-06
                        ////////                _viewBB.GlbReportName = "Dealer_Inward_Docs.rpt";
                        ////////            else
                        ////////                _viewBB.GlbReportName = "Inward_Docs.rpt";
                        ////////            _viewBB.GlbReportDoc = _buybackadj;
                        ////////            _viewBB.Show();
                        ////////            _viewBB = null;
                        ////////        }
                        ////////}

                        //=========================DO
                        //////if (chkDeliverLater.Checked == false || chkDeliverNow.Checked)
                        //////{
                        //////    if (_isAskDO)
                        //////    {
                        //////        if (MessageBox.Show("Do you need to print delivery order now?", "Print", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                        //////        { ReportViewerInventory _views = new ReportViewerInventory(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _views.GlbReportName = string.Empty; BaseCls.GlbReportTp = "OUTWARD"; _views.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "Outward_Docs.rpt" : BaseCls.GlbDefChannel == "AUTO_DEL" ? "Dealer_Outward_Docs.rpt" : "Outward_Docs.rpt"; _views.GlbReportDoc = _deliveryOrderNo; _views.Show(); _views = null; }
                        //////    }
                        //////    else
                        //////    { ReportViewerInventory _views = new ReportViewerInventory(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _views.GlbReportName = string.Empty; BaseCls.GlbReportTp = "OUTWARD"; _views.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "Outward_Docs.rpt" : BaseCls.GlbDefChannel == "AUTO_DEL" ? "Dealer_Outward_Docs.rpt" : "Outward_Docs.rpt"; _views.GlbReportDoc = _deliveryOrderNo; _views.Show(); _views = null; }
                        //////}
                        //////if (_isNeedRegistrationReciept)
                        //////{
                        //////    MasterBusinessEntity _tem = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, string.Empty, string.Empty, "C");

                        //////    if (_tem.Mbe_sub_tp == "C.")
                        //////    {
                        //////        ReportViewer _view = new ReportViewer();
                        //////        BaseCls.GlbReportName = string.Empty;
                        //////        _view.GlbReportName = string.Empty;
                        //////        _view.GlbReportName = "ReceiptPrintDealers.rpt";
                        //////        _view.GlbReportDoc = _registration;
                        //////        _view.GlbReportProfit = BaseCls.GlbUserDefProf;
                        //////        _view.Show();
                        //////        _view = null;
                        //////    }
                        //////    else
                        //////    {
                        //////        ReportViewer _view = new ReportViewer();
                        //////        BaseCls.GlbReportName = string.Empty;
                        //////        _view.GlbReportName = string.Empty;
                        //////        BaseCls.GlbReportTp = "REC";
                        //////        _view.GlbReportName = "ReceiptPrints.rpt";
                        //////        _view.GlbReportDoc = _registration;
                        //////        _view.GlbReportProfit = BaseCls.GlbUserDefProf;
                        //////        _view.Show();
                        //////        _view = null;
                        //////    }
                        //////}
                        Clear();
                        //change chk value
                        if (_MasterProfitCenter.Mpc_is_do_now == 0)
                        {
                            chkDeliverLater.Checked = false;
                            chkDeliverNow.Checked = false;
                            chkDeliverLater_CheckedChanged(null, null);
                        }
                        else if (_MasterProfitCenter.Mpc_is_do_now == 1)
                        {
                            chkDeliverNow.Checked = true;
                            chkDeliverLater.Checked = false;
                            chkDeliverNow_CheckedChanged(null, null);
                        }
                        else
                        {
                            chkDeliverLater.Checked = true;
                            chkDeliverNow.Checked = false;
                            chkDeliverLater_CheckedChanged(null, null);
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(_error))
                        { if (_giftVoucher != null && _giftVoucher.Count > 0) { _giftVoucher = new List<InvoiceVoucher>(); ScanSerialList.AddRange(_giftVoucherSerial); _giftVoucherSerial = new List<ReptPickSerials>(); } this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Generating Invoice is terminated due to following reason, " + _error, "Generated Error", MessageBoxButtons.OK, MessageBoxIcon.Hand); } }
                        CHNLSVC.CloseChannel();
                    }
                    CHNLSVC.CloseAllChannels();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + "\n" + ex.StackTrace);
                this.Cursor = Cursors.Default;
                CHNLSVC.CloseChannel();
            }
            finally
            {
                btnSave.Enabled = true;
                CHNLSVC.CloseAllChannels();
            }
        }

        private void SetDecimalTextBoxForZero(bool _isUnit, bool _isAccBal, bool _isQty)
        {
            txtDisRate.Text = FormatToCurrency("0");
            txtDisAmt.Text = FormatToCurrency("0");
            if (_isQty) txtQty.Text = FormatToQty("1");
            txtTaxAmt.Text = FormatToCurrency("0");
            if (_isUnit) txtUnitPrice.Text = FormatToCurrency("0");
            txtUnitAmt.Text = FormatToCurrency("0");
            txtLineTotAmt.Text = FormatToCurrency("0"); if (_isAccBal)
            {
                //// lblAccountBalance.Text = FormatToCurrency("0"); lblAvailableCredit.Text = FormatToCurrency("0");
            }
        }

        private void VaribleClear()
        { _lineNo = 1; _isEditPrice = false; _isEditDiscount = false; GrndSubTotal = 0; GrndDiscount = 0; GrndTax = 0; SSCombineLine = 1; _proVouInvcLine = 0; _proVouInvcItem = string.Empty; }

        private void LoadCancelPermission()
        { IsFwdSaleCancelAllowUser = false; IsDlvSaleCancelAllowUser = false; btnCancel.Enabled = false; string _masterLocation = (string.IsNullOrEmpty(BaseCls.GlbUserDefLoca)) ? BaseCls.GlbUserDefProf : BaseCls.GlbUserDefLoca; if (CHNLSVC.Security.Is_OptionPerimitted(BaseCls.GlbUserComCode, BaseCls.GlbUserID, 10002)) { IsFwdSaleCancelAllowUser = true; btnCancel.Enabled = true; } else { IsFwdSaleCancelAllowUser = false; btnCancel.Enabled = false; } if (CHNLSVC.Security.Is_OptionPerimitted(BaseCls.GlbUserComCode, BaseCls.GlbUserID, 10042)) { IsFwdSaleCancelAllowUser = true; IsDlvSaleCancelAllowUser = true; btnCancel.Enabled = true; } else { if (!IsFwdSaleCancelAllowUser) { IsDlvSaleCancelAllowUser = false; btnCancel.Enabled = false; } } }


        private void LoadPayMode()
        {
            InvoiceType = "CS";
            Customer_Code = txtCustomer.Text.Trim();
            mobile = txtMobile.Text.Trim();
            LoadPayModes();
        }

        private void LoadPayModes()
        {
            lblbalanceAmo.Text = Base.FormatToCurrency((Convert.ToDecimal(lblGrndTotalAmount.Text) - Convert.ToDecimal(lblPaidAmo.Text)).ToString());
            BindPaymentType();
        }


        class PayTypeBank
        {
            public string PayType { get; set; }
            public string PayBank { get; set; }
        }

        protected void BindPaymentType()
        {
            try
            {
                //re-arrange by darshana on 18-08-2014. spec given by dilanda

                int selctedIndex = -1;
                int j = 0;

                //if (_paymentTypeRef == null)
                //{
                //    List<PaymentType> _paymentTypeRef1 = CHNLSVC.Sales.GetPossiblePaymentTypes_new(BaseCls.GlbUserComCode, BaseCls.GlbDefSubChannel, BaseCls.GlbUserDefProf, InvoiceType, DateTime.Now.Date);
                //    _paymentTypeRef = _paymentTypeRef1;
                //}
                //if (_paymentTypeRef.Count <= 0)
                //{
                //List<PaymentType> _paymentTypeRef1 = CHNLSVC.Sales.GetPossiblePaymentTypes_new(BaseCls.GlbUserComCode, BaseCls.GlbDefSubChannel, BaseCls.GlbUserDefProf, InvoiceType, DateTime.Now.Date);
                //kapila 8/4/2015
                // List<PaymentType> _paymentTypeRef1 = null;
                _paymentTypeRef = CHNLSVC.Sales.GetPossiblePaymentTypes_new(BaseCls.GlbUserComCode, BaseCls.GlbDefSubChannel, BaseCls.GlbUserDefProf, InvoiceType, Convert.ToDateTime(txtDate.Value.Date), 1);

                //  _paymentTypeRef = _paymentTypeRef1;
                //}


                //select distinct
                // _paymentTypeRef =_paymentTypeRef.GroupBy(x=>x.Stp_pay_tp).Select(x=>x.First()).ToList<PaymentType>() ;

                List<string> payTypes = new List<string>();
                List<PaymentType> _temPayType = new List<PaymentType>();
                List<PayTypeBank> _temPayType1 = new List<PayTypeBank>();

                payTypes.Add("");
                if (_paymentTypeRef == null || _paymentTypeRef.Count <= 0)
                {
                    //MessageBox.Show("No Payment methods available", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    HavePayModes = false;
                }

                #region Pay modes check with LINQ queries :: Chamal 02-Jun-2014
                if (_LINQ_METHOD == true)
                {
                    if (_paymentTypeRef != null && _paymentTypeRef.Count > 0)
                    {
                        HavePayModes = true;

                        //load paymodes define as default....without any condition
                        var _promo = (from _prom in _paymentTypeRef
                                      where (_prom.Stp_brd == null || _prom.Stp_brd == "") && (_prom.Stp_cat == null || _prom.Stp_cat == "") && (_prom.Stp_main_cat == null || _prom.Stp_main_cat == "") && (_prom.Stp_itm == null || _prom.Stp_itm == "") && (_prom.Stp_ser == null || _prom.Stp_ser == "") && (_prom.Stp_pb == null || _prom.Stp_pb == "") && (_prom.Stp_pb_lvl == null || _prom.Stp_pb_lvl == "") && (_prom.Stp_pro == null || _prom.Stp_pro == "")
                                      select new { STP_PAY_TP = _prom.Stp_pay_tp, STP_BANK = _prom.Stp_bank, STP_DEF = _prom.Stp_def }).ToList().Distinct();
                        foreach (var _type in _promo)
                        {
                            payTypes.Add(_type.STP_PAY_TP);
                            PayTypeBank _PayTypeBank = new PayTypeBank();
                            _PayTypeBank.PayType = _type.STP_PAY_TP;
                            _PayTypeBank.PayBank = _type.STP_BANK;
                            _temPayType1.Add(_PayTypeBank);
                            if (_type.STP_DEF) selctedIndex = j;
                            j++;
                        }


                        if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                        {


                            if (SerialList != null && SerialList.Count > 0)
                            {
                                //check pb+plevel+item+serial - done
                                var _promo3 = (from p in _paymentTypeRef
                                               from i in InvoiceItemList
                                               from s in SerialList
                                               where (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_cat == null || p.Stp_cat == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") && (p.Stp_pro == null || p.Stp_pro == "") &&
                                               (p.Stp_pb == i.Sad_pbook) && (p.Stp_pb != null) && (p.Stp_pb != "") &&
                                               (p.Stp_pb_lvl == i.Sad_pb_lvl) && (p.Stp_pb_lvl != null) && (p.Stp_pb_lvl != "") &&
                                               (p.Stp_itm == i.Sad_itm_cd) && (p.Stp_itm == s.Sap_itm_cd) && (s.Sap_itm_cd != null) && (s.Sap_itm_cd != "") &&
                                               (p.Stp_ser == s.Sap_ser_1) && (s.Sap_ser_1 != null) && (s.Sap_ser_1 != "") && (s.Sap_ser_1 != "N/A")
                                               select new
                                               {
                                                   STP_PAY_TP = p.Stp_pay_tp,
                                                   STP_BANK = p.Stp_bank,
                                                   STP_DEF = p.Stp_def
                                               }).ToList().Distinct();
                                foreach (var _type in _promo3)
                                {
                                    payTypes.Add(_type.STP_PAY_TP);
                                    PayTypeBank _PayTypeBank = new PayTypeBank();
                                    _PayTypeBank.PayType = _type.STP_PAY_TP;
                                    _PayTypeBank.PayBank = _type.STP_BANK;
                                    _temPayType1.Add(_PayTypeBank);
                                    if (_type.STP_DEF) selctedIndex = j;
                                    j++;
                                }


                                //check pb + item + serial - done

                                var _promo4 = (from p in _paymentTypeRef
                                               from i in InvoiceItemList
                                               from s in SerialList
                                               where (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_cat == null || p.Stp_cat == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") && (p.Stp_pro == null || p.Stp_pro == "") &&
                                               (p.Stp_pb == i.Sad_pbook) && (p.Stp_pb != null) && (p.Stp_pb != "") &&
                                               (p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                               (p.Stp_itm == i.Sad_itm_cd) && (p.Stp_itm == s.Sap_itm_cd) && (s.Sap_itm_cd != null) && (s.Sap_itm_cd != "") &&
                                               (p.Stp_ser == s.Sap_ser_1) && (s.Sap_ser_1 != null) && (s.Sap_ser_1 != "") && (s.Sap_ser_1 != "N/A")
                                               select new
                                               {
                                                   STP_PAY_TP = p.Stp_pay_tp,
                                                   STP_BANK = p.Stp_bank,
                                                   STP_DEF = p.Stp_def
                                               }).ToList().Distinct();
                                foreach (var _type in _promo4)
                                {
                                    payTypes.Add(_type.STP_PAY_TP);
                                    PayTypeBank _PayTypeBank = new PayTypeBank();
                                    _PayTypeBank.PayType = _type.STP_PAY_TP;
                                    _PayTypeBank.PayBank = _type.STP_BANK;
                                    _temPayType1.Add(_PayTypeBank);
                                    if (_type.STP_DEF) selctedIndex = j;
                                    j++;
                                }


                                //item + serial

                                var _promo5 = (from p in _paymentTypeRef
                                               from i in InvoiceItemList
                                               from s in SerialList
                                               where (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_cat == null || p.Stp_cat == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") && (p.Stp_pro == null || p.Stp_pro == "") &&
                                               (p.Stp_pb == null || p.Stp_pb == "") &&
                                               (p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                               (p.Stp_itm == i.Sad_itm_cd) && (p.Stp_itm == s.Sap_itm_cd) && (s.Sap_itm_cd != null) && (s.Sap_itm_cd != "") &&
                                               (p.Stp_ser == s.Sap_ser_1) && (s.Sap_ser_1 != null) && (s.Sap_ser_1 != "") && (s.Sap_ser_1 != "N/A")
                                               select new
                                               {
                                                   STP_PAY_TP = p.Stp_pay_tp,
                                                   STP_BANK = p.Stp_bank,
                                                   STP_DEF = p.Stp_def
                                               }).ToList().Distinct();
                                foreach (var _type in _promo5)
                                {
                                    payTypes.Add(_type.STP_PAY_TP);
                                    PayTypeBank _PayTypeBank = new PayTypeBank();
                                    _PayTypeBank.PayType = _type.STP_PAY_TP;
                                    _PayTypeBank.PayBank = _type.STP_BANK;
                                    _temPayType1.Add(_PayTypeBank);
                                    if (_type.STP_DEF) selctedIndex = j;
                                    j++;
                                }


                            }

                            //promotion code
                            var _promo8 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_cat == null || p.Stp_cat == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                                           (p.Stp_pb == null || p.Stp_pb == "") &&
                                           (p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                           (p.Stp_itm == null || p.Stp_itm == "") &&
                                           (p.Stp_ser == null || p.Stp_ser == "") &&
                                           (p.Stp_pro == i.Sad_promo_cd) && (p.Stp_pro != null) && (p.Stp_pro != "")
                                           select new
                                           {
                                               STP_PAY_TP = p.Stp_pay_tp,
                                               STP_BANK = p.Stp_bank,
                                               STP_DEF = p.Stp_def
                                           }).ToList().Distinct();
                            foreach (var _type in _promo8)
                            {
                                payTypes.Add(_type.STP_PAY_TP);
                                PayTypeBank _PayTypeBank = new PayTypeBank();
                                _PayTypeBank.PayType = _type.STP_PAY_TP;
                                _PayTypeBank.PayBank = _type.STP_BANK;
                                _temPayType1.Add(_PayTypeBank);
                                if (_type.STP_DEF) selctedIndex = j;
                                j++;
                            }

                            //item only
                            var _promo6 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_cat == null || p.Stp_cat == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                                           (p.Stp_pb == null || p.Stp_pb == "") && (p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                           (p.Stp_pro == null || p.Stp_pro == "") &&
                                           (p.Stp_itm == i.Sad_itm_cd) && (p.Stp_itm != null) && (p.Stp_itm != "") &&
                                           (p.Stp_ser == null || p.Stp_ser == "") && (p.Stp_pro == null || p.Stp_pro == "")
                                           select new
                                           {
                                               STP_PAY_TP = p.Stp_pay_tp,
                                               STP_BANK = p.Stp_bank,
                                               STP_DEF = p.Stp_def
                                           }).ToList().Distinct();
                            foreach (var _type in _promo6)
                            {
                                payTypes.Add(_type.STP_PAY_TP);
                                PayTypeBank _PayTypeBank = new PayTypeBank();
                                _PayTypeBank.PayType = _type.STP_PAY_TP;
                                _PayTypeBank.PayBank = _type.STP_BANK;
                                _temPayType1.Add(_PayTypeBank);
                                if (_type.STP_DEF) selctedIndex = j;
                                j++;
                            }

                            //check pb + Item
                            var _promo2 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_cat == null || p.Stp_cat == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") && (p.Stp_ser == null || p.Stp_ser == "") &&
                                           (p.Stp_pb != null) && (p.Stp_pb != "") && (p.Stp_pb == i.Sad_pbook) &&
                                           (p.Stp_itm == i.Sad_itm_cd) && (p.Stp_itm != null) && (p.Stp_itm != "") &&
                                            (p.Stp_pro == null || p.Stp_pro == "") &&
                                           (p.Stp_pb_lvl == null || p.Stp_pb_lvl == "")
                                           select new
                                           {
                                               STP_PAY_TP = p.Stp_pay_tp,
                                               STP_BANK = p.Stp_bank,
                                               STP_DEF = p.Stp_def
                                           }).ToList().Distinct();
                            foreach (var _type in _promo2)
                            {
                                payTypes.Add(_type.STP_PAY_TP);
                                PayTypeBank _PayTypeBank = new PayTypeBank();
                                _PayTypeBank.PayType = _type.STP_PAY_TP;
                                _PayTypeBank.PayBank = _type.STP_BANK;
                                _temPayType1.Add(_PayTypeBank);
                                if (_type.STP_DEF) selctedIndex = j;
                                j++;
                            }

                            //check pb + plevel + Invoice Items
                            var _promo1 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_cat == null || p.Stp_cat == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") && (p.Stp_ser == null || p.Stp_ser == "") &&
                                           (p.Stp_pb != null) && (p.Stp_pb != "") && (p.Stp_pb_lvl != null) && (p.Stp_pb_lvl != "") && (p.Stp_itm != null) && (p.Stp_itm != "") &&
                                           (p.Stp_pb == i.Sad_pbook) && (p.Stp_pb_lvl == i.Sad_pb_lvl) && (p.Stp_itm == i.Sad_itm_cd)
                                           select new
                                           {
                                               STP_PAY_TP = p.Stp_pay_tp,
                                               STP_BANK = p.Stp_bank,
                                               STP_DEF = p.Stp_def
                                           }).ToList().Distinct();
                            foreach (var _type in _promo1)
                            {
                                payTypes.Add(_type.STP_PAY_TP);
                                PayTypeBank _PayTypeBank = new PayTypeBank();
                                _PayTypeBank.PayType = _type.STP_PAY_TP;
                                _PayTypeBank.PayBank = _type.STP_BANK;
                                _temPayType1.Add(_PayTypeBank);
                                if (_type.STP_DEF) selctedIndex = j;
                                j++;
                            }



                            //check promo
                            //check pb/plevel : PROMO Invoice Items
                            //var _promo6 = (from p in _paymentTypeRef
                            //               from i in InvoiceItemList
                            //               where (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_cat == null || p.Stp_cat == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                            //               (p.Stp_pb != null) && (p.Stp_pb != "") && (p.Stp_pb_lvl != null) && (p.Stp_pb_lvl != "") &&
                            //               (p.Stp_pb == i.Sad_pbook) && (p.Stp_pb_lvl == i.Sad_pb_lvl) &&
                            //               (p.Stp_pro == i.Sad_promo_cd) && (p.Stp_pro != null) && (p.Stp_pro != "")
                            //               select new
                            //               {
                            //                   STP_PAY_TP = p.Stp_pay_tp,
                            //                   STP_BANK = p.Stp_bank,
                            //                   STP_DEF = p.Stp_def
                            //               }).ToList().Distinct();
                            //foreach (var _type in _promo6)
                            //{
                            //    payTypes.Add(_type.STP_PAY_TP);
                            //    PayTypeBank _PayTypeBank = new PayTypeBank();
                            //    _PayTypeBank.PayType = _type.STP_PAY_TP;
                            //    _PayTypeBank.PayBank = _type.STP_BANK;
                            //    _temPayType1.Add(_PayTypeBank);
                            //    if (_type.STP_DEF) selctedIndex = j;
                            //    j++;
                            //}

                            //check pb only : PROMO Invoice Items
                            //if (_promo6 != null && _promo6.Count() > 0)
                            //{
                            //    var _promo7 = (from p in _paymentTypeRef
                            //                   from i in InvoiceItemList
                            //                   where (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_cat == null || p.Stp_cat == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                            //                   (p.Stp_pb == i.Sad_pbook) && (p.Stp_pb != null) && (p.Stp_pb != "") &&
                            //                   (p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                            //                   (p.Stp_pro == i.Sad_promo_cd) && (p.Stp_pro != null) && (p.Stp_pro != "")
                            //                   select new
                            //                   {
                            //                       STP_PAY_TP = p.Stp_pay_tp,
                            //                       STP_BANK = p.Stp_bank,
                            //                       STP_DEF = p.Stp_def
                            //                   }).ToList().Distinct();
                            //    foreach (var _type in _promo7)
                            //    {
                            //        payTypes.Add(_type.STP_PAY_TP);
                            //        PayTypeBank _PayTypeBank = new PayTypeBank();
                            //        _PayTypeBank.PayType = _type.STP_PAY_TP;
                            //        _PayTypeBank.PayBank = _type.STP_BANK;
                            //        _temPayType1.Add(_PayTypeBank);
                            //        if (_type.STP_DEF) selctedIndex = j;
                            //        j++;
                            //    }


                            //}

                            //Brand + Sub Cate - done
                            var _promo7 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                                           (p.Stp_pb == null || p.Stp_pb == "") &&
                                           (p.Stp_pro == null || p.Stp_pro == "") &&
                                           (p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") && (p.Stp_ser == null || p.Stp_ser == "") && (p.Stp_itm == null || p.Stp_itm == "") &&
                                           (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "") &&
                                           (p.Stp_cat == i.Mi_cate_2) && (p.Stp_cat != null) && (p.Stp_cat != "")
                                           select new
                                           {
                                               STP_PAY_TP = p.Stp_pay_tp,
                                               STP_BANK = p.Stp_bank,
                                               STP_DEF = p.Stp_def
                                           }).ToList().Distinct();
                            foreach (var _type in _promo7)
                            {
                                payTypes.Add(_type.STP_PAY_TP);
                                PayTypeBank _PayTypeBank = new PayTypeBank();
                                _PayTypeBank.PayType = _type.STP_PAY_TP;
                                _PayTypeBank.PayBank = _type.STP_BANK;
                                _temPayType1.Add(_PayTypeBank);
                                if (_type.STP_DEF) selctedIndex = j;
                                j++;
                            }

                            //price book + brand + sub cate - done
                            var _promo10 = (from p in _paymentTypeRef
                                            from i in InvoiceItemList
                                            where (p.Stp_pro == null || p.Stp_pro == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                                            (p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") && (p.Stp_ser == null || p.Stp_ser == "") && (p.Stp_itm == null || p.Stp_itm == "") &&
                                            (p.Stp_pb == i.Sad_pbook) && (p.Stp_pb != null) && (p.Stp_pb != "") &&
                                            (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "") &&
                                            (p.Stp_cat == i.Mi_cate_2) && (p.Stp_cat != null) && (p.Stp_cat != "")
                                            select new
                                            {
                                                STP_PAY_TP = p.Stp_pay_tp,
                                                STP_BANK = p.Stp_bank,
                                                STP_DEF = p.Stp_def
                                            }).ToList().Distinct();
                            foreach (var _type in _promo10)
                            {
                                payTypes.Add(_type.STP_PAY_TP);
                                PayTypeBank _PayTypeBank = new PayTypeBank();
                                _PayTypeBank.PayType = _type.STP_PAY_TP;
                                _PayTypeBank.PayBank = _type.STP_BANK;
                                _temPayType1.Add(_PayTypeBank);
                                if (_type.STP_DEF) selctedIndex = j;
                                j++;
                            }


                            //check pb + plevel + brand + Subcat - DONE
                            var _promo9 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_pro == null || p.Stp_pro == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") && (p.Stp_ser == null || p.Stp_ser == "") && (p.Stp_itm == null || p.Stp_itm == "") &&
                                           (p.Stp_pb != null) && (p.Stp_pb != "") && (p.Stp_pb_lvl != null) && (p.Stp_pb_lvl != "") &&
                                           (p.Stp_pb == i.Sad_pbook) && (p.Stp_pb_lvl == i.Sad_pb_lvl) &&
                                           (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "") &&
                                           (p.Stp_cat == i.Mi_cate_2) && (p.Stp_cat != null) && (p.Stp_cat != "")
                                           select new
                                           {
                                               STP_PAY_TP = p.Stp_pay_tp,
                                               STP_BANK = p.Stp_bank,
                                               STP_DEF = p.Stp_def
                                           }).ToList().Distinct();
                            foreach (var _type in _promo9)
                            {
                                payTypes.Add(_type.STP_PAY_TP);
                                PayTypeBank _PayTypeBank = new PayTypeBank();
                                _PayTypeBank.PayType = _type.STP_PAY_TP;
                                _PayTypeBank.PayBank = _type.STP_BANK;
                                _temPayType1.Add(_PayTypeBank);
                                if (_type.STP_DEF) selctedIndex = j;
                                j++;
                            }

                            //Sub Cate Only - Done
                            var _promo11 = (from p in _paymentTypeRef
                                            from i in InvoiceItemList
                                            where (p.Stp_pro == null || p.Stp_pro == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                                            (p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") && (p.Stp_pb == null || p.Stp_pb == "") && (p.Stp_itm == null || p.Stp_itm == "") && (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_ser == null || p.Stp_ser == "") &&
                                            (p.Stp_cat == i.Mi_cate_2) && (p.Stp_cat != null) && (p.Stp_cat != "")
                                            select new
                                            {
                                                STP_PAY_TP = p.Stp_pay_tp,
                                                STP_BANK = p.Stp_bank,
                                                STP_DEF = p.Stp_def
                                            }).ToList().Distinct();
                            foreach (var _type in _promo11)
                            {
                                payTypes.Add(_type.STP_PAY_TP);
                                PayTypeBank _PayTypeBank = new PayTypeBank();
                                _PayTypeBank.PayType = _type.STP_PAY_TP;
                                _PayTypeBank.PayBank = _type.STP_BANK;
                                _temPayType1.Add(_PayTypeBank);
                                if (_type.STP_DEF) selctedIndex = j;
                                j++;
                            }

                            //price book + sub cate - Done
                            var _promo20 = (from p in _paymentTypeRef
                                            from i in InvoiceItemList
                                            where (p.Stp_pro == null || p.Stp_pro == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                                            (p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") && (p.Stp_itm == null || p.Stp_itm == "") && (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_ser == null || p.Stp_ser == "") &&
                                            (p.Stp_cat == i.Mi_cate_2) && (p.Stp_cat != null) && (p.Stp_cat != "") &&
                                            (p.Stp_pb == i.Sad_pbook) && (p.Stp_pb != null) && (p.Stp_pb != "")
                                            select new
                                            {
                                                STP_PAY_TP = p.Stp_pay_tp,
                                                STP_BANK = p.Stp_bank,
                                                STP_DEF = p.Stp_def
                                            }).ToList().Distinct();
                            foreach (var _type in _promo20)
                            {
                                payTypes.Add(_type.STP_PAY_TP);
                                PayTypeBank _PayTypeBank = new PayTypeBank();
                                _PayTypeBank.PayType = _type.STP_PAY_TP;
                                _PayTypeBank.PayBank = _type.STP_BANK;
                                _temPayType1.Add(_PayTypeBank);
                                if (_type.STP_DEF) selctedIndex = j;
                                j++;
                            }

                            //price book + price level + sub category - Done
                            var _promo21 = (from p in _paymentTypeRef
                                            from i in InvoiceItemList
                                            where (p.Stp_pro == null || p.Stp_pro == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                                            (p.Stp_itm == null || p.Stp_itm == "") && (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_ser == null || p.Stp_ser == "") &&
                                            (p.Stp_cat == i.Mi_cate_2) && (p.Stp_cat != null) && (p.Stp_cat != "") &&
                                            (p.Stp_pb == i.Sad_pbook) && (p.Stp_pb != null) && (p.Stp_pb != "") &&
                                            (p.Stp_pb_lvl == i.Sad_pb_lvl) && (p.Stp_pb_lvl != null) && (p.Stp_pb_lvl != "")
                                            select new
                                            {
                                                STP_PAY_TP = p.Stp_pay_tp,
                                                STP_BANK = p.Stp_bank,
                                                STP_DEF = p.Stp_def
                                            }).ToList().Distinct();
                            foreach (var _type in _promo21)
                            {
                                payTypes.Add(_type.STP_PAY_TP);
                                PayTypeBank _PayTypeBank = new PayTypeBank();
                                _PayTypeBank.PayType = _type.STP_PAY_TP;
                                _PayTypeBank.PayBank = _type.STP_BANK;
                                _temPayType1.Add(_PayTypeBank);
                                if (_type.STP_DEF) selctedIndex = j;
                                j++;
                            }

                            //Brand + Main Category - Done
                            var _promo22 = (from p in _paymentTypeRef
                                            from i in InvoiceItemList
                                            where (p.Stp_pro == null || p.Stp_pro == "") && (p.Stp_cat == null || p.Stp_cat == "") &&
                                            (p.Stp_itm == null || p.Stp_itm == "") && (p.Stp_pb == null || p.Stp_pb == "") && (p.Stp_ser == null || p.Stp_ser == "") &&
                                            (p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                            (p.Stp_main_cat == i.Mi_cate_1) && (p.Stp_main_cat != null) && (p.Stp_main_cat != "") &&
                                            (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "")
                                            select new
                                            {
                                                STP_PAY_TP = p.Stp_pay_tp,
                                                STP_BANK = p.Stp_bank,
                                                STP_DEF = p.Stp_def
                                            }).ToList().Distinct();
                            foreach (var _type in _promo22)
                            {
                                payTypes.Add(_type.STP_PAY_TP);
                                PayTypeBank _PayTypeBank = new PayTypeBank();
                                _PayTypeBank.PayType = _type.STP_PAY_TP;
                                _PayTypeBank.PayBank = _type.STP_BANK;
                                _temPayType1.Add(_PayTypeBank);
                                if (_type.STP_DEF) selctedIndex = j;
                                j++;
                            }

                            //Price Book + Brand + Main Category - Done
                            var _promo23 = (from p in _paymentTypeRef
                                            from i in InvoiceItemList
                                            where (p.Stp_pro == null || p.Stp_pro == "") && (p.Stp_cat == null || p.Stp_cat == "") &&
                                            (p.Stp_itm == null || p.Stp_itm == "") && (p.Stp_ser == null || p.Stp_ser == "") &&
                                            (p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                            (p.Stp_pb == i.Sad_pbook) && (p.Stp_pb != null) && (p.Stp_pb != "") &&
                                            (p.Stp_main_cat == i.Mi_cate_1) && (p.Stp_main_cat != null) && (p.Stp_main_cat != "") &&
                                            (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "")
                                            select new
                                            {
                                                STP_PAY_TP = p.Stp_pay_tp,
                                                STP_BANK = p.Stp_bank,
                                                STP_DEF = p.Stp_def
                                            }).ToList().Distinct();

                            foreach (var _type in _promo23)
                            {
                                payTypes.Add(_type.STP_PAY_TP);
                                PayTypeBank _PayTypeBank = new PayTypeBank();
                                _PayTypeBank.PayType = _type.STP_PAY_TP;
                                _PayTypeBank.PayBank = _type.STP_BANK;
                                _temPayType1.Add(_PayTypeBank);
                                if (_type.STP_DEF) selctedIndex = j;
                                j++;
                            }

                            //Price Book + price level + Brand + Main Category - Done
                            var _promo24 = (from p in _paymentTypeRef
                                            from i in InvoiceItemList
                                            where (p.Stp_pro == null || p.Stp_pro == "") && (p.Stp_cat == null || p.Stp_cat == "") &&
                                            (p.Stp_itm == null || p.Stp_itm == "") && (p.Stp_ser == null || p.Stp_ser == "") &&
                                            (p.Stp_pb == i.Sad_pbook) && (p.Stp_pb != null) && (p.Stp_pb != "") &&
                                            (p.Stp_pb_lvl == i.Sad_pb_lvl) && (p.Stp_pb_lvl != null) && (p.Stp_pb_lvl != "") &&
                                            (p.Stp_main_cat == i.Mi_cate_1) && (p.Stp_main_cat != null) && (p.Stp_main_cat != "") &&
                                            (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "")
                                            select new
                                            {
                                                STP_PAY_TP = p.Stp_pay_tp,
                                                STP_BANK = p.Stp_bank,
                                                STP_DEF = p.Stp_def
                                            }).ToList().Distinct();

                            foreach (var _type in _promo24)
                            {
                                payTypes.Add(_type.STP_PAY_TP);
                                PayTypeBank _PayTypeBank = new PayTypeBank();
                                _PayTypeBank.PayType = _type.STP_PAY_TP;
                                _PayTypeBank.PayBank = _type.STP_BANK;
                                _temPayType1.Add(_PayTypeBank);
                                if (_type.STP_DEF) selctedIndex = j;
                                j++;
                            }

                            //Main Cate only - done
                            var _promo25 = (from p in _paymentTypeRef
                                            from i in InvoiceItemList
                                            where (p.Stp_pro == null || p.Stp_pro == "") && (p.Stp_cat == null || p.Stp_cat == "") &&
                                            (p.Stp_itm == null || p.Stp_itm == "") && (p.Stp_ser == null || p.Stp_ser == "") &&
                                            (p.Stp_pb == null || p.Stp_pb == "") && (p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") && (p.Stp_brd == null || p.Stp_brd == "") &&
                                            (p.Stp_main_cat == i.Mi_cate_1) && (p.Stp_main_cat != null) && (p.Stp_main_cat != "")
                                            select new
                                            {
                                                STP_PAY_TP = p.Stp_pay_tp,
                                                STP_BANK = p.Stp_bank,
                                                STP_DEF = p.Stp_def
                                            }).ToList().Distinct();

                            foreach (var _type in _promo25)
                            {
                                payTypes.Add(_type.STP_PAY_TP);
                                PayTypeBank _PayTypeBank = new PayTypeBank();
                                _PayTypeBank.PayType = _type.STP_PAY_TP;
                                _PayTypeBank.PayBank = _type.STP_BANK;
                                _temPayType1.Add(_PayTypeBank);
                                if (_type.STP_DEF) selctedIndex = j;
                                j++;
                            }

                            //Price book + Main Cate only - done
                            var _promo26 = (from p in _paymentTypeRef
                                            from i in InvoiceItemList
                                            where (p.Stp_pro == null || p.Stp_pro == "") && (p.Stp_cat == null || p.Stp_cat == "") &&
                                            (p.Stp_itm == null || p.Stp_itm == "") && (p.Stp_ser == null || p.Stp_ser == "") &&
                                            (p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") && (p.Stp_brd == null || p.Stp_brd == "") &&
                                            (p.Stp_main_cat == i.Mi_cate_1) && (p.Stp_main_cat != null) && (p.Stp_main_cat != "") &&
                                            (p.Stp_pb == i.Sad_pbook) && (p.Stp_pb != null) && (p.Stp_pb != "")
                                            select new
                                            {
                                                STP_PAY_TP = p.Stp_pay_tp,
                                                STP_BANK = p.Stp_bank,
                                                STP_DEF = p.Stp_def
                                            }).ToList().Distinct();

                            foreach (var _type in _promo26)
                            {
                                payTypes.Add(_type.STP_PAY_TP);
                                PayTypeBank _PayTypeBank = new PayTypeBank();
                                _PayTypeBank.PayType = _type.STP_PAY_TP;
                                _PayTypeBank.PayBank = _type.STP_BANK;
                                _temPayType1.Add(_PayTypeBank);
                                if (_type.STP_DEF) selctedIndex = j;
                                j++;
                            }

                            //Price book + price level + Main Cate only - done
                            var _promo27 = (from p in _paymentTypeRef
                                            from i in InvoiceItemList
                                            where (p.Stp_pro == null || p.Stp_pro == "") && (p.Stp_cat == null || p.Stp_cat == "") &&
                                            (p.Stp_itm == null || p.Stp_itm == "") && (p.Stp_ser == null || p.Stp_ser == "") &&
                                            (p.Stp_brd == null || p.Stp_brd == "") &&
                                            (p.Stp_main_cat == i.Mi_cate_1) && (p.Stp_main_cat != null) && (p.Stp_main_cat != "") &&
                                            (p.Stp_pb == i.Sad_pbook) && (p.Stp_pb != null) && (p.Stp_pb != "") &&
                                            (p.Stp_pb_lvl == i.Sad_pb_lvl) && (p.Stp_pb_lvl != null) && (p.Stp_pb_lvl != "")
                                            select new
                                            {
                                                STP_PAY_TP = p.Stp_pay_tp,
                                                STP_BANK = p.Stp_bank,
                                                STP_DEF = p.Stp_def
                                            }).ToList().Distinct();

                            foreach (var _type in _promo27)
                            {
                                payTypes.Add(_type.STP_PAY_TP);
                                PayTypeBank _PayTypeBank = new PayTypeBank();
                                _PayTypeBank.PayType = _type.STP_PAY_TP;
                                _PayTypeBank.PayBank = _type.STP_BANK;
                                _temPayType1.Add(_PayTypeBank);
                                if (_type.STP_DEF) selctedIndex = j;
                                j++;
                            }

                            //brand Only - done
                            var _promo28 = (from p in _paymentTypeRef
                                            from i in InvoiceItemList
                                            where (p.Stp_pro == null || p.Stp_pro == "") && (p.Stp_cat == null || p.Stp_cat == "") &&
                                            (p.Stp_itm == null || p.Stp_itm == "") && (p.Stp_ser == null || p.Stp_ser == "") &&
                                            (p.Stp_main_cat == null || p.Stp_main_cat == "") && (p.Stp_pb == null || p.Stp_pb == "") && (p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                            (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "")
                                            select new
                                            {
                                                STP_PAY_TP = p.Stp_pay_tp,
                                                STP_BANK = p.Stp_bank,
                                                STP_DEF = p.Stp_def
                                            }).ToList().Distinct();

                            foreach (var _type in _promo28)
                            {
                                payTypes.Add(_type.STP_PAY_TP);
                                PayTypeBank _PayTypeBank = new PayTypeBank();
                                _PayTypeBank.PayType = _type.STP_PAY_TP;
                                _PayTypeBank.PayBank = _type.STP_BANK;
                                _temPayType1.Add(_PayTypeBank);
                                if (_type.STP_DEF) selctedIndex = j;
                                j++;
                            }

                            // Price book + brand  - done
                            var _promo29 = (from p in _paymentTypeRef
                                            from i in InvoiceItemList
                                            where (p.Stp_pro == null || p.Stp_pro == "") && (p.Stp_cat == null || p.Stp_cat == "") &&
                                            (p.Stp_itm == null || p.Stp_itm == "") && (p.Stp_ser == null || p.Stp_ser == "") &&
                                            (p.Stp_main_cat == null || p.Stp_main_cat == "") && (p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                            (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "") &&
                                            (p.Stp_pb == i.Sad_pbook) && (p.Stp_pb != null) && (p.Stp_pb != "")
                                            select new
                                            {
                                                STP_PAY_TP = p.Stp_pay_tp,
                                                STP_BANK = p.Stp_bank,
                                                STP_DEF = p.Stp_def
                                            }).ToList().Distinct();

                            foreach (var _type in _promo29)
                            {
                                payTypes.Add(_type.STP_PAY_TP);
                                PayTypeBank _PayTypeBank = new PayTypeBank();
                                _PayTypeBank.PayType = _type.STP_PAY_TP;
                                _PayTypeBank.PayBank = _type.STP_BANK;
                                _temPayType1.Add(_PayTypeBank);
                                if (_type.STP_DEF) selctedIndex = j;
                                j++;
                            }

                            // Price book + price level + brand  - done
                            var _promo30 = (from p in _paymentTypeRef
                                            from i in InvoiceItemList
                                            where (p.Stp_pro == null || p.Stp_pro == "") && (p.Stp_cat == null || p.Stp_cat == "") &&
                                            (p.Stp_itm == null || p.Stp_itm == "") && (p.Stp_ser == null || p.Stp_ser == "") &&
                                            (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                                            (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "") &&
                                            (p.Stp_pb == i.Sad_pbook) && (p.Stp_pb != null) && (p.Stp_pb != "") &&
                                            (p.Stp_pb_lvl == i.Sad_pb_lvl) && (p.Stp_pb_lvl != null) && (p.Stp_pb_lvl != "")
                                            select new
                                            {
                                                STP_PAY_TP = p.Stp_pay_tp,
                                                STP_BANK = p.Stp_bank,
                                                STP_DEF = p.Stp_def
                                            }).ToList().Distinct();

                            foreach (var _type in _promo30)
                            {
                                payTypes.Add(_type.STP_PAY_TP);
                                PayTypeBank _PayTypeBank = new PayTypeBank();
                                _PayTypeBank.PayType = _type.STP_PAY_TP;
                                _PayTypeBank.PayBank = _type.STP_BANK;
                                _temPayType1.Add(_PayTypeBank);
                                if (_type.STP_DEF) selctedIndex = j;
                                j++;
                            }

                            //check pb only : check brand/cat1 Invoice Items
                            //if (_promo9 != null && _promo9.Count() > 0)
                            //{
                            //var _promo10 = (from p in _paymentTypeRef
                            //                from i in InvoiceItemList
                            //                where (p.Stp_pro == null || p.Stp_pro == "") && (p.Stp_cat == null || p.Stp_cat == "") &&
                            //                (p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                            //                (p.Stp_pb == i.Sad_pbook) && (p.Stp_pb != null) && (p.Stp_pb != "") &&
                            //                (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "") &&
                            //                (p.Stp_main_cat == i.Mi_cate_1) && (p.Stp_main_cat != null) && (p.Stp_main_cat != "")
                            //                select new
                            //                {
                            //                    STP_PAY_TP = p.Stp_pay_tp,
                            //                    STP_BANK = p.Stp_bank,
                            //                    STP_DEF = p.Stp_def
                            //                }).ToList().Distinct();
                            //foreach (var _type in _promo10)
                            //{
                            //    payTypes.Add(_type.STP_PAY_TP);
                            //    PayTypeBank _PayTypeBank = new PayTypeBank();
                            //    _PayTypeBank.PayType = _type.STP_PAY_TP;
                            //    _PayTypeBank.PayBank = _type.STP_BANK;
                            //    _temPayType1.Add(_PayTypeBank);
                            //    if (_type.STP_DEF) selctedIndex = j;
                            //    j++;
                            //}

                            //    //check NOT pb/level :  check brand/cat1 Invoice Items
                            //    if (_promo10 != null && _promo10.Count() > 0)
                            //    {
                            //        //var _promo11 = (from p in _paymentTypeRef
                            //        //                from i in InvoiceItemList
                            //        //                where (p.Stp_pro == null || p.Stp_pro == "") && (p.Stp_cat == null || p.Stp_cat == "") &&
                            //        //                (p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                            //        //                (p.Stp_pb == null || p.Stp_pb == "") &&
                            //        //                (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "") &&
                            //        //                (p.Stp_main_cat == i.Mi_cate_1) && (p.Stp_main_cat != null) && (p.Stp_main_cat != "")
                            //        //                select new
                            //        //                {
                            //        //                    STP_PAY_TP = p.Stp_pay_tp,
                            //        //                    STP_BANK = p.Stp_bank,
                            //        //                    STP_DEF = p.Stp_def
                            //        //                }).ToList().Distinct();
                            //        //foreach (var _type in _promo11)
                            //        //{
                            //        //    payTypes.Add(_type.STP_PAY_TP);
                            //        //    PayTypeBank _PayTypeBank = new PayTypeBank();
                            //        //    _PayTypeBank.PayType = _type.STP_PAY_TP;
                            //        //    _PayTypeBank.PayBank = _type.STP_BANK;
                            //        //    _temPayType1.Add(_PayTypeBank);
                            //        //    if (_type.STP_DEF) selctedIndex = j;
                            //        //    j++;
                            //        //}
                            //    }
                            //}


                            ////check brand/cat1/cat2
                            ////check pb/plevel : check brand/cat1/cat2 Invoice Items
                            //var _promo12 = (from p in _paymentTypeRef
                            //                from i in InvoiceItemList
                            //                where (p.Stp_pro == null || p.Stp_pro == "") &&
                            //                (p.Stp_pb != null) && (p.Stp_pb != "") && (p.Stp_pb_lvl != null) && (p.Stp_pb_lvl != "") &&
                            //                (p.Stp_pb == i.Sad_pbook) && (p.Stp_pb_lvl == i.Sad_pb_lvl) &&
                            //                (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "") &&
                            //                (p.Stp_main_cat == i.Mi_cate_1) && (p.Stp_main_cat != null) && (p.Stp_main_cat != "") &&
                            //                (p.Stp_cat == i.Mi_cate_2) && (p.Stp_cat != null) && (p.Stp_cat != "")
                            //                select new
                            //                {
                            //                    STP_PAY_TP = p.Stp_pay_tp,
                            //                    STP_BANK = p.Stp_bank,
                            //                    STP_DEF = p.Stp_def
                            //                }).ToList().Distinct();
                            //foreach (var _type in _promo12)
                            //{
                            //    payTypes.Add(_type.STP_PAY_TP);
                            //    PayTypeBank _PayTypeBank = new PayTypeBank();
                            //    _PayTypeBank.PayType = _type.STP_PAY_TP;
                            //    _PayTypeBank.PayBank = _type.STP_BANK;
                            //    _temPayType1.Add(_PayTypeBank);
                            //    if (_type.STP_DEF) selctedIndex = j;
                            //    j++;
                            //}

                            ////check pb only : check brand/cat1/cat2 Invoice Items
                            //if (_promo12 != null && _promo12.Count() > 0)
                            //{
                            //    var _promo13 = (from p in _paymentTypeRef
                            //                    from i in InvoiceItemList
                            //                    where (p.Stp_pro == null || p.Stp_pro == "") &&
                            //                    (p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                            //                    (p.Stp_pb == i.Sad_pbook) && (p.Stp_pb != null) && (p.Stp_pb != "") &&
                            //                    (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "") &&
                            //                    (p.Stp_main_cat == i.Mi_cate_1) && (p.Stp_main_cat != null) && (p.Stp_main_cat != "") &&
                            //                    (p.Stp_cat == i.Mi_cate_2) && (p.Stp_cat != null) && (p.Stp_cat != "")
                            //                    select new
                            //                    {
                            //                        STP_PAY_TP = p.Stp_pay_tp,
                            //                        STP_BANK = p.Stp_bank,
                            //                        STP_DEF = p.Stp_def
                            //                    }).ToList().Distinct();
                            //    foreach (var _type in _promo13)
                            //    {
                            //        payTypes.Add(_type.STP_PAY_TP);
                            //        PayTypeBank _PayTypeBank = new PayTypeBank();
                            //        _PayTypeBank.PayType = _type.STP_PAY_TP;
                            //        _PayTypeBank.PayBank = _type.STP_BANK;
                            //        _temPayType1.Add(_PayTypeBank);
                            //        if (_type.STP_DEF) selctedIndex = j;
                            //        j++;
                            //    }

                            //    //check NOT pb/level :  check brand/cat1/cat2 Invoice Items
                            //    if (_promo13 != null && _promo13.Count() > 0)
                            //    {
                            //        var _promo14 = (from p in _paymentTypeRef
                            //                        from i in InvoiceItemList
                            //                        where (p.Stp_pro == null || p.Stp_pro == "") &&
                            //                        (p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                            //                        (p.Stp_pb == null || p.Stp_pb == "") &&
                            //                        (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "") &&
                            //                        (p.Stp_main_cat == i.Mi_cate_1) && (p.Stp_main_cat != null) && (p.Stp_main_cat != "") &&
                            //                        (p.Stp_cat == i.Mi_cate_2) && (p.Stp_cat != null) && (p.Stp_cat != "")
                            //                        select new
                            //                        {
                            //                            STP_PAY_TP = p.Stp_pay_tp,
                            //                            STP_BANK = p.Stp_bank,
                            //                            STP_DEF = p.Stp_def
                            //                        }).ToList().Distinct();
                            //        foreach (var _type in _promo14)
                            //        {
                            //            payTypes.Add(_type.STP_PAY_TP);
                            //            PayTypeBank _PayTypeBank = new PayTypeBank();
                            //            _PayTypeBank.PayType = _type.STP_PAY_TP;
                            //            _PayTypeBank.PayBank = _type.STP_BANK;
                            //            _temPayType1.Add(_PayTypeBank);
                            //            if (_type.STP_DEF) selctedIndex = j;
                            //            j++;
                            //        }
                            //    }
                            //}

                            ////check brand
                            ////check pb/plevel : check brand Invoice Items
                            //var _promo15 = (from p in _paymentTypeRef
                            //                from i in InvoiceItemList
                            //                where (p.Stp_pro == null || p.Stp_pro == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") && (p.Stp_cat == null || p.Stp_cat == "") &&
                            //               (p.Stp_pb != null) && (p.Stp_pb != "") && (p.Stp_pb_lvl != null) && (p.Stp_pb_lvl != "") &&
                            //               (p.Stp_pb == i.Sad_pbook) && (p.Stp_pb_lvl == i.Sad_pb_lvl) &&
                            //               (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "")
                            //                select new
                            //                {
                            //                    STP_PAY_TP = p.Stp_pay_tp,
                            //                    STP_BANK = p.Stp_bank,
                            //                    STP_DEF = p.Stp_def
                            //                }).ToList().Distinct();
                            //foreach (var _type in _promo15)
                            //{
                            //    payTypes.Add(_type.STP_PAY_TP);
                            //    PayTypeBank _PayTypeBank = new PayTypeBank();
                            //    _PayTypeBank.PayType = _type.STP_PAY_TP;
                            //    _PayTypeBank.PayBank = _type.STP_BANK;
                            //    _temPayType1.Add(_PayTypeBank);
                            //    if (_type.STP_DEF) selctedIndex = j;
                            //    j++;
                            //}

                            ////check pb only : check brand Invoice Items
                            //if (_promo15 != null && _promo15.Count() > 0)
                            //{
                            //    var _promo16 = (from p in _paymentTypeRef
                            //                    from i in InvoiceItemList
                            //                    where (p.Stp_pro == null || p.Stp_pro == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") && (p.Stp_cat == null || p.Stp_cat == "") &&
                            //                    (p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                            //                    (p.Stp_pb == i.Sad_pbook) && (p.Stp_pb != null) && (p.Stp_pb != "") &&
                            //                    (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "")
                            //                    select new
                            //                    {
                            //                        STP_PAY_TP = p.Stp_pay_tp,
                            //                        STP_BANK = p.Stp_bank,
                            //                        STP_DEF = p.Stp_def
                            //                    }).ToList().Distinct();
                            //    foreach (var _type in _promo16)
                            //    {
                            //        payTypes.Add(_type.STP_PAY_TP);
                            //        PayTypeBank _PayTypeBank = new PayTypeBank();
                            //        _PayTypeBank.PayType = _type.STP_PAY_TP;
                            //        _PayTypeBank.PayBank = _type.STP_BANK;
                            //        _temPayType1.Add(_PayTypeBank);
                            //        if (_type.STP_DEF) selctedIndex = j;
                            //        j++;
                            //    }

                            //    //check NOT pb/level :  check brand Invoice Items
                            //    //if (_promo16 != null && _promo16.Count() > 0)
                            //    //{
                            //    //    var _promo17 = (from p in _paymentTypeRef
                            //    //                    from i in InvoiceItemList
                            //    //                    where (p.Stp_pro == null || p.Stp_pro == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") && (p.Stp_cat == null || p.Stp_cat == "") &&
                            //    //                    (p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                            //    //                    (p.Stp_pb == null || p.Stp_pb == "") &&
                            //    //                    (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "")
                            //    //                    select new
                            //    //                    {
                            //    //                        STP_PAY_TP = p.Stp_pay_tp,
                            //    //                        STP_BANK = p.Stp_bank,
                            //    //                        STP_DEF = p.Stp_def
                            //    //                    }).ToList().Distinct();
                            //    //    foreach (var _type in _promo17)
                            //    //    {
                            //    //        payTypes.Add(_type.STP_PAY_TP);
                            //    //        PayTypeBank _PayTypeBank = new PayTypeBank();
                            //    //        _PayTypeBank.PayType = _type.STP_PAY_TP;
                            //    //        _PayTypeBank.PayBank = _type.STP_BANK;
                            //    //        _temPayType1.Add(_PayTypeBank);
                            //    //        if (_type.STP_DEF) selctedIndex = j;
                            //    //        j++;
                            //    //    }
                            //    //}
                            //}
                        }
                    }
                }
                #endregion

                #region Pay Modes Check with Looping
                if (_LINQ_METHOD == false)
                {
                    if (_paymentTypeRef != null && _paymentTypeRef.Count > 0)
                    {
                        for (int i = 0; i < _paymentTypeRef.Count; i++)
                        {
                            if (string.IsNullOrEmpty(_paymentTypeRef[i].Stp_brd) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_cat) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_main_cat) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_itm) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_ser)
                                && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb_lvl))
                            {
                                payTypes.Add(_paymentTypeRef[i].Stp_pay_tp);
                                _temPayType.Add(_paymentTypeRef[i]);
                                if (_paymentTypeRef[i].Stp_def)
                                    selctedIndex = i;

                                continue;
                            }
                            //pay mode has item selection
                            //check serial/item

                            if (string.IsNullOrEmpty(_paymentTypeRef[i].Stp_brd) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_cat) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_main_cat) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_itm) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_ser)
                               && !string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb) && !string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb_lvl))
                            {
                                if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                                    foreach (InvoiceItem _itm in InvoiceItemList)
                                    {
                                        if (_paymentTypeRef[i].Stp_pb == _itm.Sad_pbook && _paymentTypeRef[i].Stp_pb_lvl == _itm.Sad_pb_lvl)
                                        {
                                            payTypes.Add(_paymentTypeRef[i].Stp_pay_tp);
                                            _temPayType.Add(_paymentTypeRef[i]);
                                            if (_paymentTypeRef[i].Stp_def)
                                                selctedIndex = i;
                                            //goto End;
                                        }
                                    }
                            }

                            if (string.IsNullOrEmpty(_paymentTypeRef[i].Stp_brd) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_cat) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_main_cat) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_itm) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_ser)
                               && !string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb_lvl))
                            {
                                if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                                    foreach (InvoiceItem _itm in InvoiceItemList)
                                    {
                                        if (_paymentTypeRef[i].Stp_pb == _itm.Sad_pbook)
                                        {
                                            payTypes.Add(_paymentTypeRef[i].Stp_pay_tp);
                                            _temPayType.Add(_paymentTypeRef[i]);
                                            if (_paymentTypeRef[i].Stp_def)
                                                selctedIndex = i;
                                            //goto End;
                                        }
                                    }
                            }

                            if (SerialList != null) if (SerialList.Count > 0)
                                    if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                                        foreach (InvoiceItem _itm in InvoiceItemList)
                                        {
                                            var seriallist = SerialList.Where(x => x.Sap_itm_cd == _itm.Sad_itm_cd && x.Sap_ser_1 != "N/A" && !string.IsNullOrEmpty(x.Sap_ser_1)).ToList();
                                            foreach (InvoiceSerial _serial in seriallist)
                                            {
                                                {
                                                    //check serial
                                                    if (_paymentTypeRef[i].Stp_ser == _serial.Sap_ser_1 && _paymentTypeRef[i].Stp_itm == _itm.Sad_itm_cd && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_brd) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_main_cat) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_cat))
                                                    {
                                                        //check pb/plevel
                                                        if (!string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb) && !!string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb_lvl))
                                                        {
                                                            if (_paymentTypeRef[i].Stp_pb == _itm.Sad_pbook && _paymentTypeRef[i].Stp_pb == _itm.Sad_pb_lvl)
                                                            {
                                                                payTypes.Add(_paymentTypeRef[i].Stp_pay_tp);
                                                                _temPayType.Add(_paymentTypeRef[i]);
                                                                if (_paymentTypeRef[i].Stp_def)
                                                                    selctedIndex = i;
                                                                //goto End;
                                                            }

                                                        }
                                                        else if (!string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb))
                                                        {
                                                            if (_paymentTypeRef[i].Stp_pb == _itm.Sad_pbook)
                                                            {
                                                                payTypes.Add(_paymentTypeRef[i].Stp_pay_tp);
                                                                _temPayType.Add(_paymentTypeRef[i]);
                                                                if (_paymentTypeRef[i].Stp_def)
                                                                    selctedIndex = i;
                                                                // goto End;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            payTypes.Add(_paymentTypeRef[i].Stp_pay_tp);
                                                            _temPayType.Add(_paymentTypeRef[i]);
                                                            if (_paymentTypeRef[i].Stp_def)
                                                                selctedIndex = i;
                                                            //goto End;
                                                        }
                                                    }
                                                }
                                            }
                                        }

                            //check promo
                            if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                            {
                                foreach (InvoiceItem _itm in InvoiceItemList)
                                {
                                    {
                                        //check promo
                                        if (_paymentTypeRef[i].Stp_pro == _itm.Sad_promo_cd && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_brd) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_main_cat) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_cat))
                                        {

                                            //check pb/plevel
                                            if (!string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb) && !!string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb_lvl))
                                            {
                                                if (_paymentTypeRef[i].Stp_pb == _itm.Sad_pbook && _paymentTypeRef[i].Stp_pb == _itm.Sad_pb_lvl)
                                                {
                                                    payTypes.Add(_paymentTypeRef[i].Stp_pay_tp);
                                                    _temPayType.Add(_paymentTypeRef[i]);
                                                    if (_paymentTypeRef[i].Stp_def)
                                                        selctedIndex = i;
                                                    //goto End;
                                                }

                                            }
                                            else if (!string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb))
                                            {
                                                if (_paymentTypeRef[i].Stp_pb == _itm.Sad_pbook)
                                                {
                                                    payTypes.Add(_paymentTypeRef[i].Stp_pay_tp);
                                                    _temPayType.Add(_paymentTypeRef[i]);
                                                    if (_paymentTypeRef[i].Stp_def)
                                                        selctedIndex = i;
                                                    //goto End;
                                                }
                                            }
                                            else
                                            {
                                                payTypes.Add(_paymentTypeRef[i].Stp_pay_tp);
                                                _temPayType.Add(_paymentTypeRef[i]);
                                                if (_paymentTypeRef[i].Stp_def)
                                                    selctedIndex = i;
                                                //goto End;
                                            }
                                        }
                                    }
                                }
                            }
                            //OK--------------------- (NO NEED BECOZ THIS IS SAME AS "check promo", DISCUSS WITH DARSHANA removed this)
                            //check item
                            if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                            {
                                foreach (InvoiceItem _itm in InvoiceItemList)
                                {
                                    {
                                        if (_paymentTypeRef[i].Stp_pro == _itm.Sad_promo_cd && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_brd) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_main_cat) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_cat))
                                        {
                                            //check pb/plevel
                                            if (!string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb) && !!string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb_lvl))
                                            {
                                                if (_paymentTypeRef[i].Stp_pb == _itm.Sad_pbook && _paymentTypeRef[i].Stp_pb == _itm.Sad_pb_lvl)
                                                {
                                                    payTypes.Add(_paymentTypeRef[i].Stp_pay_tp);
                                                    _temPayType.Add(_paymentTypeRef[i]);
                                                    if (_paymentTypeRef[i].Stp_def)
                                                        selctedIndex = i;
                                                    // goto End;
                                                }

                                            }
                                            else if (!string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb))
                                            {
                                                if (_paymentTypeRef[i].Stp_pb == _itm.Sad_pbook)
                                                {
                                                    payTypes.Add(_paymentTypeRef[i].Stp_pay_tp);
                                                    _temPayType.Add(_paymentTypeRef[i]);
                                                    if (_paymentTypeRef[i].Stp_def)
                                                        selctedIndex = i;
                                                    // goto End;
                                                }
                                            }
                                            else
                                            {
                                                payTypes.Add(_paymentTypeRef[i].Stp_pay_tp);
                                                _temPayType.Add(_paymentTypeRef[i]);
                                                if (_paymentTypeRef[i].Stp_def)
                                                    selctedIndex = i;
                                                // goto End;
                                            }
                                        }
                                    }
                                }
                            }


                            //check brand/cat1
                            if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                            {
                                foreach (InvoiceItem _itm in InvoiceItemList)
                                {
                                    {
                                        if (string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pro) && _paymentTypeRef[i].Stp_brd == _itm.Mi_brand && _paymentTypeRef[i].Stp_main_cat == _itm.Mi_cate_1 && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_cat))
                                        {
                                            //check pb/plevel
                                            if (!string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb) && !!string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb_lvl))
                                            {
                                                if (_paymentTypeRef[i].Stp_pb == _itm.Sad_pbook && _paymentTypeRef[i].Stp_pb == _itm.Sad_pb_lvl)
                                                {
                                                    payTypes.Add(_paymentTypeRef[i].Stp_pay_tp);
                                                    _temPayType.Add(_paymentTypeRef[i]);
                                                    if (_paymentTypeRef[i].Stp_def)
                                                        selctedIndex = i;
                                                    //goto End;
                                                }

                                            }
                                            else if (!string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb))
                                            {
                                                if (_paymentTypeRef[i].Stp_pb == _itm.Sad_pbook)
                                                {
                                                    payTypes.Add(_paymentTypeRef[i].Stp_pay_tp);
                                                    _temPayType.Add(_paymentTypeRef[i]);
                                                    if (_paymentTypeRef[i].Stp_def)
                                                        selctedIndex = i;
                                                    // goto End;
                                                }
                                            }
                                            else
                                            {
                                                payTypes.Add(_paymentTypeRef[i].Stp_pay_tp);
                                                _temPayType.Add(_paymentTypeRef[i]);
                                                if (_paymentTypeRef[i].Stp_def)
                                                    selctedIndex = i;
                                                // goto End;
                                            }
                                        }
                                    }
                                }
                            }

                            //check brand/cat2
                            if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                            {
                                foreach (InvoiceItem _itm in InvoiceItemList)
                                {
                                    {
                                        if (string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pro) && _paymentTypeRef[i].Stp_brd == _itm.Mi_brand && _paymentTypeRef[i].Stp_cat == _itm.Mi_cate_2 && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_main_cat))
                                        {
                                            //check pb/plevel
                                            if (!string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb) && !!string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb_lvl))
                                            {
                                                if (_paymentTypeRef[i].Stp_pb == _itm.Sad_pbook && _paymentTypeRef[i].Stp_pb == _itm.Sad_pb_lvl)
                                                {
                                                    payTypes.Add(_paymentTypeRef[i].Stp_pay_tp);
                                                    _temPayType.Add(_paymentTypeRef[i]);
                                                    if (_paymentTypeRef[i].Stp_def)
                                                        selctedIndex = i;
                                                    //  goto End;
                                                }

                                            }
                                            else if (!string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb))
                                            {
                                                if (_paymentTypeRef[i].Stp_pb == _itm.Sad_pbook)
                                                {
                                                    payTypes.Add(_paymentTypeRef[i].Stp_pay_tp);
                                                    _temPayType.Add(_paymentTypeRef[i]);
                                                    if (_paymentTypeRef[i].Stp_def)
                                                        selctedIndex = i;
                                                    //goto End;
                                                }
                                            }
                                            else
                                            {
                                                payTypes.Add(_paymentTypeRef[i].Stp_pay_tp);
                                                _temPayType.Add(_paymentTypeRef[i]);
                                                if (_paymentTypeRef[i].Stp_def)
                                                    selctedIndex = i;
                                                // goto End;
                                            }
                                        }
                                    }
                                }
                            }


                            //check brand
                            if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                            {
                                foreach (InvoiceItem _itm in InvoiceItemList)
                                {
                                    {
                                        if (string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pro) && _paymentTypeRef[i].Stp_brd == _itm.Mi_brand && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_cat) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_main_cat))
                                        {
                                            //check pb/plevel
                                            if (!string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb) && !!string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb_lvl))
                                            {
                                                if (_paymentTypeRef[i].Stp_pb == _itm.Sad_pbook && _paymentTypeRef[i].Stp_pb == _itm.Sad_pb_lvl)
                                                {
                                                    payTypes.Add(_paymentTypeRef[i].Stp_pay_tp);
                                                    _temPayType.Add(_paymentTypeRef[i]);
                                                    if (_paymentTypeRef[i].Stp_def)
                                                        selctedIndex = i;
                                                    // goto End;
                                                }

                                            }
                                            else if (!string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb))
                                            {
                                                if (_paymentTypeRef[i].Stp_pb == _itm.Sad_pbook)
                                                {
                                                    payTypes.Add(_paymentTypeRef[i].Stp_pay_tp);
                                                    _temPayType.Add(_paymentTypeRef[i]);
                                                    if (_paymentTypeRef[i].Stp_def)
                                                        selctedIndex = i;
                                                    // goto End;
                                                }
                                            }
                                            else
                                            {
                                                payTypes.Add(_paymentTypeRef[i].Stp_pay_tp);
                                                _temPayType.Add(_paymentTypeRef[i]);
                                                if (_paymentTypeRef[i].Stp_def)
                                                    selctedIndex = i;
                                                // goto End;
                                            }
                                        }
                                    }
                                }
                            }

                        }

                        //End:

                        HavePayModes = true;
                    }
                }
                #endregion

                //add loyalty types
                //foreach (PaymentType _type in _temPayType) 
                //{ 
                //    if(_type.Stp_pay_tp=="LORE" && !string.IsNullOrEmpty(_type.Stp_bank))
                //    {
                //        LoyaltyTYpeList.Add(_type.Stp_bank);
                //    }
                //}
                btnPAdv.Enabled = false;
                btnPCash.Enabled = false;
                btnPCC.Enabled = false;
                btnPChq.Enabled = false;
                btnPCN.Enabled = false;
                btnPDC.Enabled = false;
                btnPGV.Enabled = false;
                btnPLoy.Enabled = false;
                btnPSP.Enabled = false;
                btnPMCash.Enabled = false;

                btnCash.Enabled = false;
                btnCC.Enabled = false;
                btnGV.Enabled = false;
                btnCN.Enabled = false;

                //Add by Chamal 02-Jun-2014
                foreach (PayTypeBank _type in _temPayType1)
                {
                    if (_type.PayType == "LORE" && !string.IsNullOrEmpty(_type.PayBank)) LoyaltyTYpeList.Add(_type.PayBank);

                    if (_type.PayType == "ADVAN") btnPAdv.Enabled = true;
                    if (_type.PayType == "CASH") { btnPCash.Enabled = true; btnCash.Enabled = true; }
                    if (_type.PayType == "CRCD") { btnPCC.Enabled = true; btnCC.Enabled = true; }
                    if (_type.PayType == "CHEQUE") btnPChq.Enabled = true;
                    if (_type.PayType == "CRNOTE") { btnPCN.Enabled = true; btnCN.Enabled = true; }
                    if (_type.PayType == "GVO") { btnPGV.Enabled = true; btnGV.Enabled = true; }
                    if (_type.PayType == "LORE") btnPLoy.Enabled = true;
                    if (_type.PayType == "DEBT") btnPDC.Enabled = true;
                    if (_type.PayType == "GVS") btnPGVS.Enabled = true;
                    if (_type.PayType == "STAR_PO") btnPSP.Enabled = true;
                    if (_type.PayType == "MCASH") btnPMCash.Enabled = true;
                }

                payTypes = payTypes.Distinct().ToList<string>();

                //remove pay types
                List<string> _outPayTypes = new List<string>();
                // RemovePayTypes(payTypes, out _outPayTypes);
                // _ddl.DataSource = payTypes;
                if (payTypes.Count > 1)
                {
                    for (int i = 0; i < payTypes.Count; i++)
                    {

                    }
                }
                else
                {
                    btnPAdv.Enabled = false;
                    btnPCash.Enabled = false;
                    btnPCC.Enabled = false;
                    btnPChq.Enabled = false;
                    btnPCN.Enabled = false;
                    btnPDC.Enabled = false;
                    btnPGV.Enabled = false;
                    btnPLoy.Enabled = false;
                    btnPSP.Enabled = false;
                    btnPMCash.Enabled = false;
                }

                comboBoxPayModes_SelectionChangeCommitted();
            }
            catch (Exception Dil)
            {
                MessageBox.Show("Unspecified error occurred in payment section.Please try again." + Dil.Message.ToString(), "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                CHNLSVC.CloseChannel();
            }
        }
        protected void BindAddItem()
        {
            gvInvoiceItem.DataSource = new List<InvoiceItem>();
            gvInvoiceItem.DataSource = _invoiceItemList;

            if (_invoiceItemList == null) AddItemDisableCustomer(false);
            if (_invoiceItemList.Count <= 0) AddItemDisableCustomer(false);
        }

        private void SetDecimalTextBoxForZero(bool _isUnit)
        {
            txtDisRate.Text = FormatToCurrency("0");
            txtDisAmt.Text = FormatToCurrency("0");
            txtQty.Text = FormatToQty("0");
            txtLineTotAmt.Text = FormatToCurrency("0");
            if (_isUnit) txtUnitPrice.Text = FormatToCurrency("0");
            txtTaxAmt.Text = FormatToCurrency("0");
        }

        private void ClearCustomer(bool _isCustomer)
        {
            if (_isCustomer) txtCustomer.Clear();
            txtCusName.Clear();
            ////txtAddress1.Clear();
            ////txtAddress2.Clear();
            txtMobile.Clear();
            txtNIC.Clear();
            chkTaxPayable.Checked = false;
            txtLoyalty.Clear();
        }

        protected void LoadCustomerDetailsByCustomer(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtCustomer.Text)) return;
            try
            {
                this.Cursor = Cursors.WaitCursor;
                ////if (cmbInvType.Text.Trim() == "CRED" && txtCustomer.Text.Trim() == "AST-CASH")
                ////{
                ////    this.Cursor = Cursors.Default;
                ////    using (new CenterWinDialog(this)) { MessageBox.Show("You can not select customer as CASH, because your invoice type is " + cmbInvType.Text, "Credit Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                ////    ClearCustomer(false);
                ////    txtCustomer.Focus();
                ////    return;
                ////}
                _masterBusinessCompany = new MasterBusinessEntity();
                if (!string.IsNullOrEmpty(txtCustomer.Text))
                    //_masterBusinessCompany = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, string.Empty, string.Empty, "C");
                    _masterBusinessCompany = CHNLSVC.Sales.GetCustomerProfileByCom(txtCustomer.Text, null, null, null, null, BaseCls.GlbUserComCode);

                if (_masterBusinessCompany.Mbe_cd != null)
                {
                    if (_masterBusinessCompany.Mbe_act == false)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("This customer already inactive. Please contact Accounts dept.", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        ClearCustomer(true);
                        txtCustomer.Focus();
                        return;
                    }

                    DataTable _table = CHNLSVC.Sales.GetCustomerAllowInvoiceType(BaseCls.GlbUserComCode, txtCustomer.Text.Trim());
                    if (_table != null && _table.Rows.Count > 0)
                    {
                        var _isAvailable = _table.AsEnumerable().Where(x => x.Field<string>("mbsa_sa_tp") == "CS").ToList();
                        if (_isAvailable == null || _isAvailable.Count <= 0)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Customer is not allow for enter transaction under selected invoice type.", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            ClearCustomer(true);
                            txtCustomer.Focus();
                            return;
                        }
                    }
                    ////else if (cmbInvType.Text != "CS")
                    ////{
                    ////    this.Cursor = Cursors.Default;
                    ////    using (new CenterWinDialog(this)) { MessageBox.Show("Selected Customer is not allow for enter transaction under selected invoice type.", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    ////    ClearCustomer(true);
                    ////    txtCustomer.Focus();
                    ////    return;
                    ////}

                    if (_masterBusinessCompany.Mbe_cd == "AST-CASH")
                    {
                        txtCustomer.Text = _masterBusinessCompany.Mbe_cd;
                        SetCustomerAndDeliveryDetails(false, null);
                        //ClearCustomer(false);
                    }
                    else
                    {
                        LoadTaxDetail(_masterBusinessCompany);
                        SetCustomerAndDeliveryDetails(false, null);
                    }

                    ViewCustomerAccountDetail(txtCustomer.Text);
                    if (txtCustomer.Text != "AST-CASH")
                    {
                        txtLoyalty.Text = ReturnLoyaltyNo();
                        //cmbTitle_SelectedIndexChanged(null, null);
                        //txtLoyalty_Leave(null, null);
                    }
                }
                else
                {
                    GroupBussinessEntity _grupProf = GetbyCustCDGrup(txtCustomer.Text.Trim().ToUpper());
                    if (_grupProf.Mbg_cd != null && _grupProf.Mbg_act == true)
                    {
                        SetCustomerAndDeliveryDetailsGroup(_grupProf);
                        _isGroup = true;

                        DataTable _table = CHNLSVC.Sales.GetCustomerAllowInvoiceType(BaseCls.GlbUserComCode, txtCustomer.Text.Trim());
                        if (_table != null && _table.Rows.Count > 0)
                        {
                            var _isAvailable = _table.AsEnumerable().Where(x => x.Field<string>("mbsa_sa_tp") == "CS").ToList();
                            if (_isAvailable == null || _isAvailable.Count <= 0)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Customer is not allow for enter transaction under selected invoice type.", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                ClearCustomer(true);
                                txtCustomer.Focus();
                                return;
                            }
                        }
                        ////else if (cmbInvType.Text != "CS")
                        ////{
                        ////    this.Cursor = Cursors.Default;
                        ////    using (new CenterWinDialog(this)) { MessageBox.Show("Selected Customer is not allow for enter transaction under selected invoice type.", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        ////    ClearCustomer(true);
                        ////    txtCustomer.Focus();
                        ////    return;
                        ////}
                    }
                    else
                    {
                        _isGroup = false;
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid customer", "Customer Detail", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        ClearCustomer(true);
                        txtCustomer.Focus();
                        return;
                    }

                }
                // ViewCustomerAccountDetail(txtCustomer.Text);
                ////    txtLoyalty.Text = ReturnLoyaltyNo();
                //cmbTitle_SelectedIndexChanged(null, null);
                ////   txtLoyalty_Leave(null, null);
                EnableDisableCustomer();
            }
            catch (Exception ex)
            { ClearCustomer(true); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void LoadData()
        {
            //decimal _grandTotal = 0;
            //decimal.TryParse(lblGrndTotalAmount.Text.Trim(), out _grandTotal);

            //decimal _totalTax = 0;
            //decimal.TryParse(lblGrndTax.Text.Trim(), out _totalTax);
            //decimal _totalPay = 0;

            //if (lblSVatStatus.Text == "Available")
            //    _totalPay = _grandTotal - _totalTax;
            //else
            //    _totalPay = _grandTotal;

            //textBoxAmount.Text = Base.FormatToCurrency(_totalPay.ToString());
            //lblbalanceAmo.Text = Base.FormatToCurrency((_totalPay - Convert.ToDecimal(lblPaidAmo.Text)).ToString());

            textBoxAmount.Text = lblGrndTotalAmount.Text;
            lblbalanceAmo.Text = Base.FormatToCurrency((Convert.ToDecimal(lblGrndTotalAmount.Text) - Convert.ToDecimal(lblPaidAmo.Text)).ToString());

            LoadPayModes();
            dataGridViewPayments.AutoGenerateColumns = false;

            btnQC1.Text = (Math.Ceiling(Convert.ToDouble(lblbalanceAmo.Text) / 50.0d) * 50).ToString("0.00");
            btnQC2.Text = (Math.Ceiling(Convert.ToDouble(lblbalanceAmo.Text) / 100.0d) * 100).ToString("0.00");
            btnQC3.Text = (Math.Ceiling(Convert.ToDouble(lblbalanceAmo.Text) / 500.0d) * 500).ToString("0.00");
            btnQC4.Text = (Math.Ceiling(Convert.ToDouble(lblbalanceAmo.Text) / 1000.0d) * 1000).ToString("0.00");
            btnQC5.Text = (Math.Ceiling(Convert.ToDouble(lblbalanceAmo.Text) / 5000.0d) * 5000).ToString("0.00");

            if (btnQC1.Text == btnQC2.Text) btnQC2.Text = FormatToCurrency("0");
            if (btnQC2.Text == btnQC3.Text) btnQC3.Text = FormatToCurrency("0");
            if (btnQC3.Text == btnQC4.Text) btnQC4.Text = FormatToCurrency("0");
            if (btnQC4.Text == btnQC5.Text) btnQC5.Text = FormatToCurrency("0");
        }

        private void SetCustomerAndDeliveryDetails(bool _isRecall, InvoiceHeader _hdr)
        {
            txtCustomer.Text = _masterBusinessCompany.Mbe_cd;
            txtCusName.Text = _masterBusinessCompany.Mbe_name;
            ////txtAddress1.Text = _masterBusinessCompany.Mbe_add1;
            ////txtAddress2.Text = _masterBusinessCompany.Mbe_add2;
            txtMobile.Text = _masterBusinessCompany.Mbe_mob;
            txtNIC.Text = _masterBusinessCompany.Mbe_nic;
            ////cmbTitle.Text = _masterBusinessCompany.MBE_TIT;
            ////ucPayModes1.Customer_Code = txtCustomer.Text.Trim(); xxxx
            ////ucPayModes1.Mobile = txtMobile.Text.Trim();

            if (_isRecall == false)
            {
                /* if (string.IsNullOrEmpty(txtDelAddress1.Text))*/
                txtDelAddress1.Text = _masterBusinessCompany.Mbe_add1;
                /* if (string.IsNullOrEmpty(txtDelAddress2.Text))*/
                txtDelAddress2.Text = _masterBusinessCompany.Mbe_add2;
                /* if (string.IsNullOrEmpty(txtDelCustomer.Text) || txtDelCustomer.Text.Trim() == "AST-CASH")*/
                txtDelCustomer.Text = _masterBusinessCompany.Mbe_cd;
                /* if (string.IsNullOrEmpty(txtDelName.Text))*/
                txtDelName.Text = _masterBusinessCompany.Mbe_name;
            }
            else
            {
                txtCusName.Text = _hdr.Sah_cus_name;
                ////txtAddress1.Text = _hdr.Sah_cus_add1;
                ////txtAddress2.Text = _hdr.Sah_cus_add2;

                txtDelAddress1.Text = _hdr.Sah_d_cust_add1;
                txtDelAddress2.Text = _hdr.Sah_d_cust_add2;
                txtDelCustomer.Text = _hdr.Sah_d_cust_cd;
                txtDelName.Text = _hdr.Sah_d_cust_name;
                txtDelLocation.Text = _hdr.Sah_del_loc;
            }

            if (_isRecall == false)
            {
                if (_masterBusinessCompany.Mbe_is_tax) { chkTaxPayable.Checked = true; chkTaxPayable.Enabled = true; } else { chkTaxPayable.Checked = false; chkTaxPayable.Enabled = false; }
            }

            if (string.IsNullOrEmpty(txtNIC.Text))
            {
                //// cmbTitle.SelectedIndex = 0; 
                return;
            }
            if (IsValidNIC(txtNIC.Text) == false)
            {
                ////  cmbTitle.SelectedIndex = 0;
                return;
            }
            ////  GetNICGender();
            ////if (string.IsNullOrEmpty(txtCusName.Text)) txtCusName.Text = cmbTitle.Text.Trim();
            ////else
            ////{
            string _title = ExtractTitleByCustomerName(txtCusName.Text.Trim());
            ////bool _exist = cmbTitle.Items.Contains(_title);
            ////if (_exist)
            ////    cmbTitle.Text = _title;
            ////}
        }

        private void ViewCustomerAccountDetail(string _customer)
        {
            if (string.IsNullOrEmpty(_customer.Trim())) return;
            if (_customer != "AST-CASH")
            {
                ////CustomerAccountRef _account = CHNLSVC.Sales.GetCustomerAccount(BaseCls.GlbUserComCode, txtCustomer.Text.Trim());
                ////lblAccountBalance.Text = FormatToCurrency(Convert.ToString(_account.Saca_acc_bal));
                ////lblAvailableCredit.Text = FormatToCurrency(Convert.ToString((_account.Saca_crdt_lmt - _account.Saca_ord_bal - _account.Saca_acc_bal)));
            }
        }

        public GroupBussinessEntity GetbyCustCDGrup(string custCD)
        {
            return CHNLSVC.Sales.GetCustomerProfileByGrup(custCD, null, null, null, null, null);
        }

        private void SetCustomerAndDeliveryDetailsGroup(GroupBussinessEntity _cust)
        {
            txtCustomer.Text = _cust.Mbg_cd;
            txtCusName.Text = _cust.Mbg_name;
            ////txtAddress1.Text = _cust.Mbg_add1;
            ////txtAddress2.Text = _cust.Mbg_add2;
            txtMobile.Text = _cust.Mbg_mob;
            txtNIC.Text = _cust.Mbg_nic;
            ////ucPayModes1.Customer_Code = txtCustomer.Text.Trim(); xxxx
            ////ucPayModes1.Mobile = txtMobile.Text.Trim();


            txtDelAddress1.Text = _cust.Mbg_add1;
            txtDelAddress2.Text = _cust.Mbg_add2;
            txtDelCustomer.Text = _cust.Mbg_cd;
            txtDelName.Text = _cust.Mbg_name;


            chkTaxPayable.Checked = false;
            chkTaxPayable.Enabled = false;

            ////   cmbTitle.Text = _cust.Mbg_tit;

        }

        private void LoadTaxDetail(MasterBusinessEntity _entity)
        {
            lblSVatStatus.Text = _entity.Mbe_is_svat ? "Available" : "None";
            lblVatExemptStatus.Text = _entity.Mbe_tax_ex ? "Available" : "None";
        }

        private void EnableDisableCustomer()
        {
            if (txtCustomer.Text == "AST-CASH")
            {
                txtCustomer.Enabled = true;
                txtCusName.ReadOnly = false;
                ////txtAddress1.Enabled = true;
                ////txtAddress2.Enabled = true;
                txtMobile.Enabled = true;
                txtNIC.Enabled = true;

                btnSearch_NIC.Enabled = true;
                btnSearch_Customer.Enabled = true;
                btnSearch_Mobile.Enabled = true;
            }
            else
            {
                //txtCustomer.Enabled = false;
                txtCusName.ReadOnly = true;
                ////txtAddress1.Enabled = false;
                ////txtAddress2.Enabled = false;
                txtMobile.Enabled = false;
                txtNIC.Enabled = false;

                //btnSearch_NIC.Enabled = false;
                //btnSearch_Customer.Enabled = false;
                //btnSearch_Mobile.Enabled = false;
            }
        }

        private void LoadControl()
        {
            ////txtAddress1.GotFocus += txtAddress_GotFocus;
            ////txtAddress2.GotFocus += txtAddress_GotFocus;

            ////txtAddress1.LostFocus += txtAddress_LostFocus;
            ////txtAddress2.LostFocus += txtAddress_LostFocus;
            ////btnAddItem.GotFocus += btnAddItem_GotFocus;
            ////btnAddItem.LostFocus += btnAddItem_LostFocus;
            ////btnAddItem.MouseHover += btnAddItem_GotFocus;
            ////btnAddItem.MouseLeave += btnAddItem_LostFocus;

            ////txtInvoiceNo.DragDrop += new DragEventHandler(txtItem_DragDrop);
            ////txtInvoiceNo.DragOver += new DragEventHandler(txtItem_DragEnter);
        }

        private void CheckPrintStatus()
        {
            ////if (_MasterProfitCenter != null) if (!string.IsNullOrEmpty(_MasterProfitCenter.Mpc_com))
            ////if (_MasterProfitCenter.Mpc_print_payment)
            ////    btnPrint.Visible = true;
            ////else
            ////    btnPrint.Visible = false;
        }


        private void InitializeValuesNDefaultValueSet()
        {
            //updated by akila 
            MasterCompany _masterComp = null;
            _masterComp = CHNLSVC.General.GetCompByCode(BaseCls.GlbUserComCode);
            if (_masterComp != null)
            {
                if (_masterComp.MC_TAX_CALC_MTD == "1") _isStrucBaseTax = true;
            }

            txtExpDate.Text = "01-Jan-0001";
            txtDate.Text = CHNLSVC.Security.GetServerDateTime().Date.ToString("dd/MM/yyyy");
            _serverDt = CHNLSVC.Security.GetServerDateTime().Date;
            VaribleClear();
            VariableInitialization();
            LoadInvoiceProfitCenterDetail();
            LoadPriceDefaultValue();
            //  Load_CC_Type(); //kapila
            LoadCancelPermission();
            SetDecimalTextBoxForZero(true, true, true);
            LoadPayMode();
            LoadControl();
            lblBackDateInfor.Text = string.Empty;
            ResetDeliveryInstructionToOriginalCustomer();
            chkDeliverLater_CheckedChanged(null, null);
            CheckPrintStatus();
            BuyBackItemList = null;
            //// SetDateTopPayMode();
            txtQty.Text = FormatToQty("1");
            ////  txtPromotor.Text = "";
            ////   LoadExecutive();
            ////   LoadPromotor();
            if (string.IsNullOrEmpty(BaseCls.GlbUserDefLoca))
            { chkDeliverLater.Checked = true; chkDeliverLater.Enabled = false; }
            else chkDeliverLater.Enabled = true;
            ////LoadInvoiceType();
            ////if (cmbInvType.Text.Trim() != "CRED")
            ////{
            LoadCustomerDetailsByCustomer(null, null);
            ////  cmbTitle_SelectedIndexChanged(null, null);
            ////} //enable manual textbox

            ////if (_MasterProfitCenter.Mpc_chnl == "AUTO_DEL")
            ////{ txtManualRefNo.Enabled = true;
            ////}
            ////else
            ////{
            ////    txtManualRefNo.Enabled = false;
            ////}

            //set registration mandatory field

            _isRegistrationMandatory = false; //(MasterChannel.Rows[0]["msc_is_registration"].ToString()) == "1" ? true : false;

            txtPromoVouNo.Clear();
            lblPromoVouNo.Text = "";
            lblPromoVouUsedFlag.Text = "";

            txtOpr.Text = BaseCls.GlbUserName;
            txtExpDate.Text = "01-Jan-0001";



            //MasterCompany _masterComp = null;
            //_masterComp = CHNLSVC.General.GetCompByCode(BaseCls.GlbUserComCode);
            //if (_masterComp.MC_TAX_CALC_MTD == "1") _isStrucBaseTax = true;
        }


        private void ResetDeliveryInstructionToOriginalCustomer()
        {
            txtDelLocation.Text = BaseCls.GlbUserDefLoca;
            txtDelCustomer.Text = txtCustomer.Text;
            txtDelName.Text = txtCusName.Text;
            ////txtDelAddress1.Text = txtAddress1.Text;
            ////txtAddress2.Text = txtAddress2.Text;
            chkOpenDelivery.Checked = false;
        }

        private TextBox focusedTextbox = null;

        void textBox_Enter(object sender, EventArgs e)
        {
            focusedTextbox = (TextBox)sender;
        }

        public POSInvoiceTouch()
        {
            InitializeComponent();

            textBoxAmount.Enter += textBox_Enter;
            txtSrchItem.Enter += textBox_Enter;
            txtQty.Enter += textBox_Enter;



            try
            {
                this.Cursor = Cursors.WaitCursor; gvBuyBack.AutoGenerateColumns = false;
                if (string.IsNullOrEmpty(BaseCls.GlbUserDefProf))
                {
                    this.Cursor = Cursors.Default; MessageBox.Show("You do not have assigned a profit center. " + this.Text + " is terminating now!", "Termination", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); this.Close();
                }
                if (string.IsNullOrEmpty(BaseCls.GlbUserDefLoca))
                {
                    this.Cursor = Cursors.Default; MessageBox.Show("You do not have assigned a delivery location. " + this.Text + " is de-activating delivery option now!", "De-activate", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    chkDeliverLater.Enabled = false;
                }
                else chkDeliverLater.Enabled = true;
                LoadCachedObjects();
                SetGridViewAutoColumnGenerate();
                SetPanelSize();
                InitializeValuesNDefaultValueSet(); TextBox _txt = new TextBox();

                //kapila 27/8/2014
                DataTable _dtDepBank = CHNLSVC.General.getSubChannelDet(BaseCls.GlbUserComCode, BaseCls.GlbDefSubChannel);
                if (_dtDepBank.Rows.Count > 0)
                {
                    if (Convert.ToInt32(_dtDepBank.Rows[0]["MSSC_IS_BNK_MAN"]) == 1)
                    {
                        _isDepBanAccMan = true;
                    }
                    _isCustMan = Convert.ToBoolean(_dtDepBank.Rows[0]["MSSC_IS_CUS_MAN"]);
                }
            }
            catch
            { this.Cursor = Cursors.Default; }
            finally { CHNLSVC.CloseAllChannels(); }

            setEnv();
        }

        private bool LoadPriceBook(string _invoiceType)
        {
            bool _isAvailable = false;
            if (_PriceDefinitionRef != null)
                if (_PriceDefinitionRef.Count > 0)
                {
                    _isAvailable = true;
                    var _books = _PriceDefinitionRef.Where(x => x.Sadd_doc_tp == "CS").Select(x => x.Sadd_pb).Distinct().ToList();
                    _books.Add("");
                    cmbBook.DataSource = _books;
                    cmbBook.SelectedIndex = cmbBook.Items.Count - 1;
                    if (!string.IsNullOrEmpty(DefaultBook)) cmbBook.Text = DefaultBook;
                }
                else
                    cmbBook.DataSource = null;
            else
                cmbBook.DataSource = null;

            return _isAvailable;
        }

        private void setEnv()
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                LoadPriceBook("CS");
                LoadPriceLevel("CS", cmbBook.Text.Trim());
                LoadLevelStatus("CS", cmbBook.Text.Trim(), cmbLevel.Text.Trim());
                LoadPayMode();

                #region Clear Customer

                //txtCusName.Clear();
                ////txtAddress1.Clear();
                ////txtAddress2.Clear();
                txtMobile.Clear();
                txtNIC.Clear();
                chkTaxPayable.Checked = false;
                txtCustomer.Clear();
                txtDelAddress1.Clear();
                txtDelAddress2.Clear();
                txtDelCustomer.Clear();
                txtDelName.Clear();
                ////if (cmbInvType.Text.Trim() == "CS")
                txtCustomer.Text = "AST-CASH";

                #endregion Clear Customer
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }

            pnlItem.Hide();
            pnlItem.Size = new System.Drawing.Size(428, 370);
            pnlItem.Location = new System.Drawing.Point(591, 2);

            pnlPay.Hide();
            pnlPay.Size = new System.Drawing.Size(428, 370);
            pnlPay.Location = new System.Drawing.Point(591, 2);

            pnlDisc.Hide();
            pnlDisc.Size = new System.Drawing.Size(428, 186);
            pnlDisc.Location = new System.Drawing.Point(591, 2);

            pnlCust.Hide();
            pnlCust.Size = new System.Drawing.Size(428, 266);
            pnlCust.Location = new System.Drawing.Point(591, 2);

            gvInvoiceItem.ColumnHeadersHeight = 30;
            gvInvoiceItem.ColumnHeadersDefaultCellStyle.Font = new System.Drawing.Font("Calibri", 14F, FontStyle.Regular);

            grvExpDt.ColumnHeadersHeight = 30;
            grvExpDt.ColumnHeadersDefaultCellStyle.Font = new System.Drawing.Font("Calibri", 14F, FontStyle.Regular);

            dataGridViewPayments.ColumnHeadersHeight = 30;
            dataGridViewPayments.ColumnHeadersDefaultCellStyle.Font = new System.Drawing.Font("Calibri", 14F, FontStyle.Regular);

            grvItemSrch.ColumnHeadersHeight = 30;
            grvItemSrch.ColumnHeadersDefaultCellStyle.Font = new System.Drawing.Font("Calibri", 14F, FontStyle.Regular);

            dataGridViewPayments.ColumnHeadersHeight = 30;
            dataGridViewPayments.ColumnHeadersDefaultCellStyle.Font = new System.Drawing.Font("Calibri", 12F, FontStyle.Regular);

        }

        private string SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType _type)
        {
            StringBuilder paramsText = new StringBuilder();
            string seperator = "|";
            paramsText.Append(((int)_type).ToString() + ":");

            switch (_type)
            {
                case CommonUIDefiniton.SearchUserControlType.BankBranch:
                    {
                        if (lblSelPayTp.Text == "CHEQUE")
                        {
                            MasterOutsideParty _bankAccounts = CHNLSVC.Sales.GetOutSidePartyDetailsById(textBoxChqBank.Text.ToUpper().Trim());
                            if (_bankAccounts != null)
                            {
                                paramsText.Append(_bankAccounts.Mbi_cd + seperator);
                            }
                        }
                        if (lblSelPayTp.Text == "CRCD")
                        {
                            MasterOutsideParty _bankAccounts = CHNLSVC.Sales.GetOutSidePartyDetailsById(textBoxCCBank.Text.ToUpper().Trim());
                            if (_bankAccounts != null)
                            {
                                paramsText.Append(_bankAccounts.Mbi_cd + seperator);
                            }
                            // paramsText.Append(textBoxCCBank.Text.Trim() + seperator);
                        }
                        if (lblSelPayTp.Text == "DEBT")
                        {
                            MasterOutsideParty _bankAccounts = CHNLSVC.Sales.GetOutSidePartyDetailsById(textBoxDbBank.Text.ToUpper().Trim());
                            if (_bankAccounts != null)
                            {
                                paramsText.Append(_bankAccounts.Mbi_cd + seperator);
                            }
                            //paramsText.Append(textBoxDbBank.Text.Trim() + seperator);
                        }
                        //paramsText.Append(textBoxCCDepBank.Text.Trim() + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.GiftVoucher:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + 0 + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.BankAccount:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.CreditNote:
                    {
                        paramsText.Append(txtCustomer.Text + seperator + BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.AdvanceRecForCus:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + txtCustomer.Text + seperator + null + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.DepositBank:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + lblSelPayTp.Text + seperator);
                        break;
                    }

                case CommonUIDefiniton.SearchUserControlType.SalesOrder:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + "SO" + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.InvoiceType:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.InvoiceWithDate:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.InvoiceItemUnAssable:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.PriceBook:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + "CS" + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.PriceLevel:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + "CS" + seperator + cmbBook.Text + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.PriceLevelItemStatus:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + cmbBook.Text + seperator + cmbLevel.Text + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.Customer:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.NIC:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.Mobile:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.Currency:
                    {
                        paramsText.Append(seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.Employee_Executive:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + "SEX" + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.InvoiceExecutive:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.Bank:
                    {
                        paramsText.Append(CommonUIDefiniton.BusinessEntityType.BANK.ToString() + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.Receipt:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + CommonUIDefiniton.PayMode.ADVAN.ToString() + seperator);
                        break;
                    }

                case CommonUIDefiniton.SearchUserControlType.ItemAvailableSerial:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefLoca + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.Group_Sale:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + 1 + seperator);
                        break;
                    }

                case CommonUIDefiniton.SearchUserControlType.QuotationForInvoice:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + Convert.ToDateTime(txtDate.Text).ToString("dd/MMM/yyyy") + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.Location:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.UserLocation:
                    {
                        paramsText.Append(BaseCls.GlbUserID + seperator + BaseCls.GlbUserComCode + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.AvailableGiftVoucher:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + "ITEM" + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.SearchLoyaltyCardNo:
                    {
                        paramsText.Append(txtCustomer.Text.Trim() + seperator + Convert.ToDateTime(txtDate.Value.Date).Date.ToString("d") + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.SearchLoyaltyCard:
                    {
                        paramsText.Append(txtCustomer.Text.Trim() + seperator + Convert.ToDateTime(txtDate.Value.Date).Date.ToString("d") + seperator);
                        break;
                    }

                default:
                    break;
            }

            return paramsText.ToString();
        }

        private void btnItems_Click(object sender, EventArgs e)
        {
            pnlItem.Show();
            pnlItem.Size = new System.Drawing.Size(428, 370);
        }

        private void POSInvoice_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Escape)
            {
                pnlItem.Hide();
                pnlPay.Hide();
                pnlCust.Hide();
                pnlDisc.Hide();
            }
            if (e.KeyCode == Keys.F9)
            {
                btnCash_Click(null, null);
                btnEnter_Click(null, null);
            }
            if (e.KeyCode == Keys.F11)
                btnCC_Click(null, null);
            if (e.KeyCode == Keys.End)
                btnSave_Click(null, null);

        }

        private void txtSrchItem_TextChanged(object sender, EventArgs e)
        {
            //if (!string.IsNullOrEmpty(txtSrchItem.Text))
            //    pnlItem.Size = new System.Drawing.Size(428, 370);
            //else
            //    pnlItem.Size = new System.Drawing.Size(428, 186);
        }

        private void addItem()
        {
            string _itemDesc = "";
            txtCashBal.Text = FormatToCurrency("0");

            if (chkQuotation.Checked) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You are not allow to add additional items for the selected quotation.", "Add Item", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
            try
            {
                if (string.IsNullOrEmpty(txtItem.Text)) return;
                if (string.IsNullOrEmpty(txtQty.Text)) return;

                #region Check Customer has promotion voucher avoid the discount :: Chamal 04/Jul/2014

                if (!string.IsNullOrEmpty(txtCustomer.Text))
                {
                    if (txtCustomer.Text != "AST-CASH")
                    {
                        if ((string.IsNullOrEmpty(txtDisRate.Text) && string.IsNullOrEmpty(txtDisAmt.Text)))
                        {
                            CashGeneralEntiryDiscountDef _discVou = CHNLSVC.Sales.CheckCustHaveDiscountPromoVoucher(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtCustomer.Text, txtDate.Value.Date, cmbBook.Text, cmbLevel.Text, txtItem.Text, string.Empty, txtNIC.Text, txtMobile.Text);
                            if (_discVou != null)
                            {
                                using (new CenterWinDialog(this)) { MessageBox.Show("Promotion voucher discount available for this item", "Promotion Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return;
                            }
                        }
                        else
                        {
                            if (Convert.ToDecimal(txtDisRate.Text) <= 0 && Convert.ToDecimal(txtDisAmt.Text) <= 0)
                            {
                                CashGeneralEntiryDiscountDef _discVou = CHNLSVC.Sales.CheckCustHaveDiscountPromoVoucher(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtCustomer.Text, txtDate.Value.Date, cmbBook.Text, cmbLevel.Text, txtItem.Text, string.Empty, txtNIC.Text, txtMobile.Text);
                                if (_discVou != null)
                                {
                                    using (new CenterWinDialog(this)) { MessageBox.Show("Promotion voucher discount available for this item", "Promotion Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    return;
                                }
                            }
                        }
                    }
                }

                #endregion Check Customer has promotion voucher avoid the discount :: Chamal 04/Jul/2014

                if (!string.IsNullOrEmpty(SSPromotionCode))
                {
                    //check promotion qty anr return
                    List<PriceDetailRef> _promoList = CHNLSVC.Sales.GetPriceByPromoCD(SSPromotionCode);
                    if (_promoList == null && _promoList.Count <= 0)
                    {
                        return;
                    }
                    else
                    {
                        decimal qty = _promoList[0].Sapd_qty_to;
                        List<InvoiceItem> _alredyAddList = (from _res in _invoiceItemList
                                                            where _res.Sad_itm_cd == txtItem.Text.Trim() && _res.Sad_itm_stus == cmbStatus.Text
                                                            select _res).ToList<InvoiceItem>();
                        if (_alredyAddList != null)
                        {
                            qty = qty + _alredyAddList.Count;
                        }
                        if (Convert.ToDecimal(txtQty.Text) > qty)
                        {
                            using (new CenterWinDialog(this)) { MessageBox.Show("Invoice qty exceed promotion allow qty.", "Add Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            return;
                        }

                        //free item check
                        //not define the process
                        //sachith 2014/01/29
                    }
                }

                List<MasterItemComponent> _com = CHNLSVC.Inventory.GetItemComponents(txtItem.Text.Trim());
                if (_com != null && _com.Count > 0)
                {
                    foreach (MasterItemComponent _itmCom in _com)
                    {
                        //REGISTRATION PROCESS
                        //ADDED 2013/12/10
                        //REGISTRATION PEOCESS CHECK
                        //ADDED 2013/12/06
                        //CHECK ITEM NEED REGISTRATION OR NOT
                        MasterItem _temItm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _itmCom.ComponentItem.Mi_cd);
                        if (_isRegistrationMandatory)
                        {
                            if (_temItm.Mi_need_reg)
                            {
                                _isNeedRegistrationReciept = true;
                                lnkProcessRegistration.Visible = true;
                            }
                        }
                    }
                }
                else
                {
                    MasterItem _temItm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());
                    if (_isRegistrationMandatory)
                    {
                        if (_temItm.Mi_need_reg)
                        {
                            _isNeedRegistrationReciept = true;
                            lnkProcessRegistration.Visible = true;
                        }
                    }
                }
                //END
                //END

                this.Cursor = Cursors.WaitCursor;
                AddItem(SSPromotionCode == "0" || string.IsNullOrEmpty(SSPromotionCode) ? false : true, string.Empty);
                if (_priceDetailRef != null && _priceDetailRef.Count > 0)
                {
                    if (_priceDetailRef[0].Sapd_customer_cd == txtCustomer.Text.Trim())
                    {
                        txtCustomer.ReadOnly = true;
                        btnSearch_Customer.Enabled = false;
                    }
                }

                decimal _tmpQty = 0;
                decimal.TryParse(txtQty.Text, out _tmpQty);
                if (_tmpQty > 1)
                {
                    txtQty.Text = FormatToQty(_tmpQty.ToString());
                }
                else
                {
                    txtQty.Text = FormatToQty("1");
                }
                //txtQty.Text = FormatToQty("1");

                pnlItem.Hide();
                btnMulti.Text = "OFF";
                btnMulti.BackColor = Color.Bisque;
                txtItem.Focus();
                btnBarcode.Text = "ON";
                btnBarcode.BackColor = Color.LimeGreen;

                cmbBook.Text = DefaultBook;  //
                cmbLevel.Text = DefaultLevel;

                AddItemDisableCustomer(true);
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
            // pnlItem.Size = new System.Drawing.Size(428, 186);
        }

        private void sendToDisplay(Decimal _amt, decimal _tot)
        {
            try
            {
                SerialPort sp = new SerialPort();
                sp.PortName = "COM4";
                sp.BaudRate = 9600;
                sp.Parity = Parity.None;
                sp.DataBits = 8;
                sp.StopBits = StopBits.One;
                sp.Open();
                sp.Write("                    ");
                sp.WriteLine("                    ");

                string _text = "     PRICE";
                _text = _text + _amt.ToString("0.00").PadLeft(10);

                string _text2 = "     TOTAL";
                _text2 = _text2 + _tot.ToString("0.00").PadLeft(10);

                sp.Write(_text + _text2);

                sp.Close();
            }
            catch { }

        }
        private void AddItem(bool _isPromotion, string _originalItem)
        {
            try
            {
                ////if (!string.IsNullOrEmpty(SSPromotionCode) && SSPromotionCode != "N/A") xxxx
                ////    ucPayModes1.ISPromotion = true;

                this.Cursor = Cursors.WaitCursor;
                ReptPickSerials _serLst = null;
                List<ReptPickSerials> _nonserLst = null;
                MasterItem _itm = null;
                string _itemStatus = "";        //kapila 27/11/2015
                _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());
                //!@#$% paste here
                if (_isCombineAdding == false)
                {
                    if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false || (_isRegistrationMandatory))
                    {
                        decimal _pickQty = 0;
                        if (IsPriceLevelAllowDoAnyStatus)
                            _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == txtItem.Text.Trim()).ToList().Select(x => x.Sad_qty).Sum();
                        else
                            _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == txtItem.Text.Trim() && x.Mi_itm_stus == cmbStatus.Text.Trim()).ToList().Select(x => x.Sad_qty).Sum();

                        _pickQty += Convert.ToDecimal(txtQty.Text.Trim());
                        //kapila 6/7/2016
                        MasterCompany _mastercompany = CacheLayer.Get<MasterCompany>(CacheLayer.Key.CompanyInfor.ToString());
                        if (_mastercompany.Mc_alw_minus_bal == 1)
                        {
                            _itemStatus = cmbStatus.Text;
                        }
                        else
                        {
                            //kapila 18/11/2015
                            List<InventoryLocation> _inventoryLocation = null;
                            _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), null);
                            if (_inventoryLocation != null)
                            {
                                if (_inventoryLocation.Count == 1)
                                {
                                    decimal _invBal = _inventoryLocation[0].Inl_qty;
                                    if (_pickQty > _invBal)
                                    {
                                        this.Cursor = Cursors.Default;
                                        using (new CenterWinDialog(this)) { MessageBox.Show(txtItem.Text + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString(_invBal)), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                        return;
                                    }
                                    cmbStatus.Text = _inventoryLocation[0].Inl_itm_stus;
                                    _itemStatus = _inventoryLocation[0].Inl_itm_stus;
                                }
                                else
                                {
                                    _itemStatus = cmbStatus.Text;
                                    _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), _itemStatus);
                                    if (_inventoryLocation != null)
                                    {

                                        if (_inventoryLocation.Count > 0)
                                        {
                                            decimal _invBal = _inventoryLocation[0].Inl_qty;
                                            if (_pickQty > _invBal)
                                            {
                                                this.Cursor = Cursors.Default;
                                                using (new CenterWinDialog(this)) { MessageBox.Show(txtItem.Text + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString(_invBal)), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                                return;
                                            }
                                        }
                                        else
                                        {
                                            this.Cursor = Cursors.Default;
                                            using (new CenterWinDialog(this)) { MessageBox.Show(txtItem.Text + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString("0")), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        this.Cursor = Cursors.Default;
                                        using (new CenterWinDialog(this)) { MessageBox.Show(txtItem.Text + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString("0")), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                        return;
                                    }
                                }
                            }
                            else
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show(txtItem.Text + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString("0")), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return;
                            }
                        }


                        if (_itm.Mi_is_ser1 == 1 && ScanSerialList.Count > 0)
                        {
                            var _serDup = (from _lst in ScanSerialList
                                           where _lst.Tus_ser_1 == txtSerialNo.Text.Trim() && _lst.Tus_itm_cd == txtItem.Text.Trim()
                                           select _lst).ToList();

                            if (_serDup != null)
                                if (_serDup.Count > 0)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("Selected Serial is duplicating.", "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    return;
                                }
                        }
                    }
                }
                else
                    _itemStatus = cmbStatus.Text;

                //kapila check expiry date
                if (_itm.MI_IS_EXP_DT == 1 && txtExpDate.Text == "01-Jan-0001")
                {
                    DataTable _dtBatchExp = CHNLSVC.Inventory.GetBatchwiseExpDates(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text, _itemStatus);
                    if (_dtBatchExp.Rows.Count > 1)
                    {
                        grvExpDt.AutoGenerateColumns = false;
                        grvExpDt.DataSource = _dtBatchExp;
                        pnlExpDt.Visible = true;
                        return;
                    }
                    else
                        txtExpDate.Text = _dtBatchExp.Rows[0]["inb_exp_dt"].ToString();
                }

                #region Gift Voucher Check

                if ((chkPickGV.Checked || IsGiftVoucher(_itemdetail.Mi_itm_tp)) && _isCombineAdding == false)
                {
                    if (gvInvoiceItem.Rows.Count <= 0)
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the selling item before add gift voucher.", "Need Selling Item", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                    if (gvInvoiceItem.Rows.Count > 0)
                    {
                        var _noOfSets = _invoiceItemList.Select(x => x.Sad_job_line).Distinct().ToList();

                        var _giftCount = _invoiceItemList.Where(x => IsGiftVoucher(x.Sad_itm_tp)).Sum(x => x.Sad_qty);
                        var _nonGiftCount = _invoiceItemList.Sum(x => x.Sad_qty) - _giftCount;
                        if (_nonGiftCount < _giftCount + 1)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("You can not add more gift vouchers than selling qty", "Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            return;
                        }
                    }

                    DataTable _giftVoucher = CHNLSVC.Inventory.GetDetailByPageNItem(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, Convert.ToInt32(txtSerialNo.Text.Trim()), txtItem.Text.Trim());
                    if (_giftVoucher != null)
                        if (_giftVoucher.Rows.Count > 0)
                        {
                            _serial2 = Convert.ToString(_giftVoucher.Rows[0].Field<Int64>("gvp_book"));
                            _prefix = Convert.ToString(_giftVoucher.Rows[0].Field<string>("gvp_gv_prefix"));
                        }
                }

                #endregion Gift Voucher Check

                #region Check for Payment

                if (_recieptItem != null)
                    if (_recieptItem.Count > 0)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("You have already payment added!", "Payment", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        return;
                    }

                #endregion Check for Payment

                #region Priority Base Validation

                if (_masterBusinessCompany == null)
                { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the customer code", "No Customer", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                //if (_masterBusinessCompany.Mbe_cd != null && _masterBusinessCompany.Mbe_sub_tp == "C")                //    if ((Convert.ToDecimal(lblAvailableCredit.Text) - Convert.ToDecimal(txtLineTotAmt.Text) - Convert.ToDecimal(lblGrndTotalAmount.Text) < 0) && txtCustomer.Text != "AST-CASH")                //    {                //        this.Cursor = Cursors.Default;                //        using (new CenterWinDialog(this)) { MessageBox.Show("Please check the customer's account balance", "Account Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }                //        return;                //    }
                if (string.IsNullOrEmpty(cmbBook.Text)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the price book", "Price Book", MessageBoxButtons.OK, MessageBoxIcon.Information); } cmbBook.Focus(); return; }
                if (string.IsNullOrEmpty(cmbLevel.Text)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the price level", "Price Level", MessageBoxButtons.OK, MessageBoxIcon.Information); } cmbLevel.Focus(); return; }
                if (string.IsNullOrEmpty(_itemStatus)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the item status", "Item Status", MessageBoxButtons.OK, MessageBoxIcon.Information); } cmbStatus.Focus(); return; }
                ////if (string.IsNullOrEmpty("CS")) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the invoice type", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); } cmbInvType.Focus(); return; }
                if (string.IsNullOrEmpty(txtCustomer.Text)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the customer", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtCustomer.Focus(); return; }
                if (string.IsNullOrEmpty(txtItem.Text)) { if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false) { if (string.IsNullOrEmpty(txtSerialNo.Text)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the serial", "Serial", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtSerialNo.Focus(); return; } else { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the item", "Item", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtItem.Focus(); return; } } else { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the item", "Item", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtItem.Focus(); return; } }
                if (string.IsNullOrEmpty(txtQty.Text)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the qty", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtQty.Focus(); return; }
                else if (IsNumeric(txtQty.Text) == false) { MessageBox.Show("Please select valid qty", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information); return; }
                else if (Convert.ToDecimal(txtQty.Text.Trim()) <= 0) { MessageBox.Show("Please select the valid qty amount.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information); return; }
                if (string.IsNullOrEmpty(txtUnitPrice.Text)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the unit price", "System Price", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtUnitPrice.Focus(); return; }
                if (string.IsNullOrEmpty(txtDisRate.Text))
                { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the discount %", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtDisRate.Focus(); return; }
                if (string.IsNullOrEmpty(txtDisAmt.Text))
                { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the discount amount", "Discount Amount", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtDisAmt.Focus(); return; }
                if (string.IsNullOrEmpty(txtTaxAmt.Text))
                { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the VAT amount", "Tax Amount", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtTaxAmt.Focus(); return; }
                #endregion Priority Base Validation

                #region Virtual Item

                if (_IsVirtualItem && _isCompleteCode == false)
                {
                    bool _isDuplicateItem0 = false;
                    Int32 _duplicateComLine0 = 0;
                    Int32 _duplicateItmLine0 = 0;
                    WarrantyPeriod = 0;
                    CalculateItem();

                    #region Adding Invoice Item

                    //Adding Items to grid goes here ----------------------------------------------------------------------
                    if (_invoiceItemList == null || _invoiceItemList.Count <= 0)
                    //No Records
                    {
                        _isDuplicateItem0 = false;
                        _lineNo += 1;
                        if (!_isCombineAdding) SSCombineLine += 1;//_lineNo;
                        _invoiceItemList.Add(AssignDataToObject(_isPromotion, _itemdetail, _originalItem));
                    }
                    else
                    //Having some records
                    {
                        var _duplicateItem = from _list in _invoiceItemList
                                             where _list.Sad_itm_cd == txtItem.Text && _list.Sad_itm_stus == _itemStatus && _list.Sad_pbook == cmbBook.Text && _list.Sad_pb_lvl == cmbLevel.Text && _list.Sad_unit_rt == Convert.ToDecimal(txtUnitPrice.Text) && _list.Sad_disc_rt == Convert.ToDecimal(txtDisRate.Text.Trim())
                                             select _list;

                        if (_duplicateItem.Count() > 0)
                        //Similar item available
                        {
                            _isDuplicateItem0 = true;
                            foreach (var _similerList in _duplicateItem)
                            {
                                _duplicateComLine0 = _similerList.Sad_job_line;
                                _duplicateItmLine0 = _similerList.Sad_itm_line;
                                _similerList.Sad_disc_amt = Convert.ToDecimal(_similerList.Sad_disc_amt) + Convert.ToDecimal(txtDisAmt.Text);
                                _similerList.Sad_itm_tax_amt = Convert.ToDecimal(_similerList.Sad_itm_tax_amt) + Convert.ToDecimal(txtTaxAmt.Text);
                                _similerList.Sad_qty = Convert.ToDecimal(_similerList.Sad_qty) + Convert.ToDecimal(txtQty.Text);
                                _similerList.Sad_do_qty = _similerList.Sad_qty; //add by akila 2017/10/20
                                _similerList.Sad_tot_amt = Convert.ToDecimal(_similerList.Sad_tot_amt) + Convert.ToDecimal(txtLineTotAmt.Text);
                            }
                        }
                        else
                        //No similar item found
                        {
                            _isDuplicateItem0 = false;
                            _lineNo += 1;
                            if (!_isCombineAdding) SSCombineLine += 1;//_lineNo;
                            _invoiceItemList.Add(AssignDataToObject(_isPromotion, _itemdetail, _originalItem));
                        }
                    }
                    //Adding Items to grid end here ----------------------------------------------------------------------

                    #endregion Adding Invoice Item

                    CalculateGrandTotal(Convert.ToDecimal(txtQty.Text), Convert.ToDecimal(txtUnitPrice.Text), Convert.ToDecimal(txtDisAmt.Text), Convert.ToDecimal(txtTaxAmt.Text), true);
                    _itemdetail = new MasterItem();
                    txtSerialNo.Text = "";
                    ClearAfterAddItem();
                    SSPriceBookSequance = "0";
                    SSPriceBookItemSequance = "0";
                    SSPriceBookPrice = 0;
                    if (_isCombineAdding == false) SSPromotionCode = string.Empty;
                    SSPRomotionType = 0;
                    txtItem.Focus();
                    BindAddItem();
                    SetDecimalTextBoxForZero(true);
                    decimal _tobepays0 = 0;
                    if (lblSVatStatus.Text == "Available")
                        _tobepays0 = FigureRoundUp(Convert.ToDecimal(lblGrndTotalAmount.Text.Trim()) - Convert.ToDecimal(lblGrndTax.Text.Trim()), true);
                    else
                        _tobepays0 = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());
                    ////ucPayModes1.TotalAmount = _tobepays0; xxxx
                    InvoiceItemList = _invoiceItemList;
                    SerialList = InvoiceSerialList;
                    ////ucPayModes1.Amount.Text = FormatToCurrency(Convert.ToString(_tobepays0));
                    if (_loyaltyType != null)
                    {
                        LoyaltyCard = _loyaltyType.Salt_loty_tp;
                    }
                    if (HavePayModes && _isCombineAdding == false)
                        LoadData();

                    LookingForBuyBack();
                    this.Cursor = Cursors.Default;
                    if (_isCombineAdding == false)
                    {
                        this.Cursor = Cursors.Default;
                        if (MessageBox.Show("Do you need to add another item?", "Another Item", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                        {
                            if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                            {
                                pnlItem.Hide();
                                btnMulti.Text = "OFF";
                                btnMulti.BackColor = Color.Bisque;
                                txtItem.Focus();
                            }
                            else
                            {

                                txtItem.Focus();
                            }
                        }
                        else
                        {
                            //// ucPayModes1.button1.Focus(); xxxx
                        }
                    }
                    return;
                }

                // CheckSerialAvailability(null, null);
                if (string.IsNullOrEmpty(txtSerialNo.Text))
                {
                    if (!string.IsNullOrEmpty(txtItem.Text.Trim()))
                    {
                        //Edt0001
                        if (_itm.Mi_is_ser1 == 1 && (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false && _priceBookLevelRef.Sapl_is_serialized))
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Please select the serial no", "Serial No", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            txtSerialNo.Focus();
                            return;
                        }
                    }
                }

                #region sachith check item balance

                if (chkDeliverNow.Checked && _itm.Mi_itm_tp == "M")
                {
                    List<ReptPickSerials> serial_list = new List<ReptPickSerials>();
                    if (_itm.Mi_is_ser1 == 0)
                        serial_list = CHNLSVC.Inventory.Search_serials_for_itemCD(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _itm.Mi_cd, string.Empty, string.Empty).ToList();//.Where(x => x.Tus_itm_stus == cmbStatus.SelectedValue.ToString()).ToList();
                    else if (_itm.Mi_is_ser1 == 1) //serial
                        serial_list = CHNLSVC.Inventory.Search_serials_for_itemCD(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _itm.Mi_cd, string.Empty, string.Empty).ToList();//.Where(x => x.Tus_itm_stus == cmbStatus.SelectedValue.ToString()).ToList();
                    else if (_itm.Mi_is_ser1 == -1)
                        serial_list = CHNLSVC.Inventory.Search_serials_for_itemCD(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _itm.Mi_cd, string.Empty, string.Empty).ToList();//.Where(x => x.Tus_itm_stus == cmbStatus.SelectedValue.ToString()).ToList();

                    if (IsPriceLevelAllowDoAnyStatus)
                    {
                        serial_list = serial_list.Where(x => x.Tus_itm_stus == _itemStatus).ToList();
                    }

                    if (Convert.ToDecimal(txtQty.Text) > serial_list.Count)
                    {
                        if (MessageBox.Show("Inventory has only " + serial_list.Count + " items\n Do you want to proceed?", "Serial Qty", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.No)
                            return;
                        else
                        {
                        }
                    }
                }

                #endregion sachith check item balance

                #endregion Virtual Item

                #region Price Combine Checking Process - Costing Dept.

                if (_isCheckedPriceCombine == false)
                    if (_MainPriceCombinItem != null)
                        if (_MainPriceCombinItem.Count > 0)
                        {
                            string _serialiNotpick = string.Empty;
                            string _serialDuplicate = string.Empty;
                            string _taxNotdefine = string.Empty;
                            string _noInventoryBalance = string.Empty;
                            string _noWarrantySetup = string.Empty;
                            string _mItem = txtItem.Text.Trim();
                            if (CheckBlockItem(_mItem, SSPRomotionType, _isCombineAdding)) { _isCheckedPriceCombine = false; return; }
                            var _dupsMain = ScanSerialList.Where(x => x.Tus_itm_cd == _mItem && x.Tus_ser_1 == ScanSerialNo);
                            if (_dupsMain != null) if (_dupsMain.Count() > 0) { this.Cursor = Cursors.Default; _isCheckedPriceCombine = false; using (new CenterWinDialog(this)) { MessageBox.Show(_mItem + " serial " + ScanSerialNo + " is already picked!", "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                            foreach (PriceCombinedItemRef _ref in _MainPriceCombinItem)
                            {
                                string _item = _ref.Sapc_itm_cd;
                                string _originalItm = _ref.Sapc_itm_cd;
                                decimal _qty = _ref.Sapc_qty;
                                string _status = _ref.Status;
                                string _similerItem = Convert.ToString(_ref.Similer_item);
                                if (!string.IsNullOrEmpty(_similerItem)) _item = _similerItem;
                                if (CheckBlockItem(_item, SSPRomotionType, _isCombineAdding)) { _isCheckedPriceCombine = false; break; }
                                List<MasterItemTax> _taxs = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, _item, _status, string.Empty, string.Empty);
                                if (_taxs.Count <= 0 && _priceBookLevelRef.Sapl_vat_calc == true)
                                { if (string.IsNullOrEmpty(_taxNotdefine)) _taxNotdefine = _item; else _taxNotdefine += "," + _item; }
                                if (CheckItemWarranty(_item, _status))
                                { if (string.IsNullOrEmpty(_noWarrantySetup)) _noWarrantySetup = _item; else _noWarrantySetup += "," + _item; }
                                MasterItem _itmS = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);

                                if ((chkDeliverLater.Checked == false && chkDeliverNow.Checked == false && _isCheckedPriceCombine == false) || IsGiftVoucher(_itmS.Mi_itm_tp))
                                {
                                    _isCheckedPriceCombine = true;
                                    if (_itmS.Mi_is_ser1 == 1)
                                    {
                                        var _exist = PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == _item);
                                        if (_qty > _exist.Count())
                                        { if (string.IsNullOrEmpty(_serialiNotpick)) _serialiNotpick = _item; else _serialiNotpick += "," + _item; }
                                        foreach (ReptPickSerials _p in _exist)
                                        {
                                            string _serial = _p.Tus_ser_1;
                                            var _dup = ScanSerialList.Where(x => x.Tus_ser_1 == _serial);
                                            if (_dup != null)
                                                if (_dup.Count() > 0)
                                                { if (string.IsNullOrEmpty(_serialDuplicate)) _serialDuplicate = _item + "/" + _serial; else _serialDuplicate = "," + _item + "/" + _serial; }
                                        }
                                    }
                                    if (!IsGiftVoucher(_itmS.Mi_itm_tp))
                                    {
                                        decimal _pickQty = 0;
                                        if (IsPriceLevelAllowDoAnyStatus) _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _item).ToList().Select(x => x.Sad_qty).Sum(); else _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _item && x.Mi_itm_stus == _status).ToList().Select(x => x.Sad_qty).Sum();
                                        _pickQty += Convert.ToDecimal(txtQty.Text.Trim());
                                        List<InventoryLocation> _inventoryLocation = null;
                                        if (IsPriceLevelAllowDoAnyStatus) _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, string.Empty); else _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, _status);
                                        if (_inventoryLocation != null)
                                            if (_inventoryLocation.Count > 0)
                                            {
                                                decimal _invBal = _inventoryLocation[0].Inl_qty;
                                                if (_pickQty > _invBal)
                                                { if (string.IsNullOrEmpty(_noInventoryBalance)) _noInventoryBalance = _item; else _noInventoryBalance = "," + _item; }
                                            }
                                            else
                                            { if (string.IsNullOrEmpty(_noInventoryBalance)) _noInventoryBalance = _item; else _noInventoryBalance = "," + _item; }
                                        else
                                        { if (string.IsNullOrEmpty(_noInventoryBalance)) _noInventoryBalance = _item; else _noInventoryBalance = "," + _item; }
                                    }
                                }
                            }
                            if (!string.IsNullOrEmpty(_taxNotdefine))
                            {
                                this.Cursor = Cursors.Default;
                                _isCheckedPriceCombine = false;
                                using (new CenterWinDialog(this)) { MessageBox.Show(_taxNotdefine + " does not have setup tax definition for the selected status. Please contact Inventory dept.", "Tax Setup", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return;
                            }
                            if (!string.IsNullOrEmpty(_serialiNotpick))
                            {
                                this.Cursor = Cursors.Default;
                                _isCheckedPriceCombine = false;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Item Qty and picked serial mismatch for the following item(s) " + _serialiNotpick, "Qty & Serial", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                return;
                            }
                            if (!string.IsNullOrEmpty(_serialDuplicate))
                            {
                                this.Cursor = Cursors.Default;
                                _isCheckedPriceCombine = false;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Serial duplicating for the following item(s) " + _serialDuplicate, "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                return;
                            }
                            if (!string.IsNullOrEmpty(_noInventoryBalance) && !IsGiftVoucher(_itm.Mi_itm_tp))
                            {
                                this.Cursor = Cursors.Default;
                                _isCheckedPriceCombine = false;
                                using (new CenterWinDialog(this)) { MessageBox.Show(_noInventoryBalance + " item(s) does not having inventory balance for release.", "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return;
                            }

                            if (!string.IsNullOrEmpty(_noWarrantySetup))
                            {
                                this.Cursor = Cursors.Default;
                                _isCheckedPriceCombine = false;
                                using (new CenterWinDialog(this)) { MessageBox.Show(_noWarrantySetup + " item(s)'s warranty not define.", "Warranty Setup", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return;
                            }
                            _isFirstPriceComItem = true;
                            _isCheckedPriceCombine = true;
                        }
                if (_isCompleteCode && _isInventoryCombineAdded == false) BindItemComponent(txtItem.Text);
                if (_masterItemComponent != null && _masterItemComponent.Count > 0 && _isInventoryCombineAdded == false)
                {
                    string _combineStatus = string.Empty;
                    decimal _discountRate = -1;
                    decimal _combineQty = 0;
                    string _mainItem = string.Empty;
                    _combineCounter = 0;
                    _isInventoryCombineAdded = true; _isCombineAdding = true;
                    if (string.IsNullOrEmpty(_combineStatus)) _combineStatus = _itemStatus;
                    if (_combineQty == 0) _combineQty = Convert.ToDecimal(txtQty.Text);
                    if (_discountRate == -1) _discountRate = Convert.ToDecimal(txtDisRate.Text);
                    List<MasterItemComponent> _comItem = new List<MasterItemComponent>();
                    var _item_ = (from _n in _masterItemComponent where _n.ComponentItem.Mi_itm_tp == "M" select _n.ComponentItem.Mi_cd).ToList();
                    if (!string.IsNullOrEmpty(_item_[0]))
                    {
                        string _mItem = Convert.ToString(_item_[0]);
                        _mainItem = Convert.ToString(_item_[0]);
                        _priceDetailRef = new List<PriceDetailRef>();
                        _priceDetailRef = CHNLSVC.Sales.GetPrice(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "CS", cmbBook.Text, cmbLevel.Text, txtCustomer.Text, _mItem, _combineQty, Convert.ToDateTime(txtDate.Text));
                        _priceDetailRef = _priceDetailRef.Where(X => X.Sapd_price_type == 0).ToList();
                        if (CheckItemWarranty(_mItem, _itemStatus))
                        { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_mItem + " item's warranty period not setup by the inventory department. Please contact inventory department", "Warranty Setup", MessageBoxButtons.OK, MessageBoxIcon.Information); } _isInventoryCombineAdded = false; return; }

                        if (_priceDetailRef.Count <= 0)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show(_item_[0].ToString() + " does not having price. Please contact IT dept.", "System Price", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                            _isInventoryCombineAdded = false;
                            return;
                        }
                        else
                        {
                            if (CheckBlockItem(_mItem, _priceDetailRef[0].Sapd_price_type, _isCombineAdding))
                            { _isInventoryCombineAdded = false; return; }
                            if (_priceDetailRef.Count == 1 && _priceDetailRef[0].Sapd_price_type != 0 && _priceDetailRef[0].Sapd_price_type != 4)
                            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item_[0].ToString() + " price is available for only promotion. Complete code does not support for promotion", "Available Price", MessageBoxButtons.OK, MessageBoxIcon.Information); } _isInventoryCombineAdded = false; return; }
                        }
                    }
                    foreach (MasterItemComponent _com in _masterItemComponent.Where(X => X.ComponentItem.Mi_cd != _item_[0]))
                    {
                        if (CheckItemWarranty(_com.ComponentItem.Mi_cd, _itemStatus))
                        { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_com.ComponentItem.Mi_cd + " item's warranty period not setup by the inventory department. Please contact inventory department", "Warranty Setup", MessageBoxButtons.OK, MessageBoxIcon.Information); } _isInventoryCombineAdded = false; return; }
                        if (CheckBlockItem(_com.ComponentItem.Mi_cd, _priceDetailRef[0].Sapd_price_type, _isCombineAdding))
                        { _isInventoryCombineAdded = false; return; }
                    }
                    bool _isMainSerialCheck = false;
                    if (ScanSerialList != null && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                    {
                        if (ScanSerialList.Count > 0)
                        {
                            if (_isMainSerialCheck == false)
                            {
                                var _dup = ScanSerialList.Where(x => x.Tus_itm_cd == _item_[0].ToString() && x.Tus_ser_1 == ScanSerialNo);
                                if (_dup != null)
                                    if (_dup.Count() > 0)
                                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item_[0].ToString() + " serial " + ScanSerialNo + " is already picked!", "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } _isInventoryCombineAdded = false; return; } _isMainSerialCheck = true;
                            }
                            foreach (MasterItemComponent _com in _masterItemComponent)
                            {
                                string _serial = InventoryCombinItemSerialList.Where(x => x.Tus_itm_cd == _com.ComponentItem.Mi_cd).Select(y => y.Tus_ser_1).ToString();
                                var _dup = ScanSerialList.Where(x => x.Tus_ser_1 == _serial && x.Tus_itm_cd == _com.ComponentItem.Mi_cd);
                                if (_dup != null)
                                    if (_dup.Count() > 0)
                                    {
                                        this.Cursor = Cursors.Default;
                                        using (new CenterWinDialog(this)) { MessageBox.Show("Item " + _com.ComponentItem.Mi_cd + "," + _serial + " serial is already picked!", "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                        _isInventoryCombineAdded = false;
                                        return;
                                    }
                            }
                        }
                    }
                    if (InventoryCombinItemSerialList.Count == 0)
                    {
                        _isCombineAdding = true;
                        foreach (MasterItemComponent _com in _masterItemComponent)
                        {
                            List<MasterItemTax> _taxs = new List<MasterItemTax>();
                            if (_isStrucBaseTax == true)       //kapila
                            {
                                MasterItem _mstItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _com.ComponentItem.Mi_cd);
                                _taxs = CHNLSVC.Sales.GetItemTax_strucbase(BaseCls.GlbUserComCode, _com.ComponentItem.Mi_cd, _combineStatus, string.Empty, string.Empty, _mstItem.Mi_anal1);
                            }
                            else
                                _taxs = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, _com.ComponentItem.Mi_cd, _combineStatus, string.Empty, string.Empty);

                            if (_taxs.Count <= 0 && _priceBookLevelRef.Sapl_vat_calc == true)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show(_com.ComponentItem.Mi_cd + " does not have setup tax definition for the selected status. Please contact Inventory dept.", "Tax Setup", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                _isInventoryCombineAdded = false;
                                return;
                            }

                            if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                            {
                                decimal _pickQty = 0;
                                if (IsPriceLevelAllowDoAnyStatus) _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _com.ComponentItem.Mi_cd).ToList().Select(x => x.Sad_qty).Sum();
                                else _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _com.ComponentItem.Mi_cd && x.Mi_itm_stus == _itemStatus).ToList().Select(x => x.Sad_qty).Sum();
                                _pickQty += Convert.ToDecimal(txtQty.Text.Trim());
                                List<InventoryLocation> _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _com.ComponentItem.Mi_cd, _itemStatus);
                                if (_inventoryLocation != null)
                                    if (_inventoryLocation.Count > 0)
                                    {
                                        decimal _invBal = _inventoryLocation[0].Inl_qty;
                                        if (_pickQty > _invBal)
                                        {
                                            this.Cursor = Cursors.Default;
                                            using (new CenterWinDialog(this)) { MessageBox.Show(_com.ComponentItem.Mi_cd + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString(_invBal)), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                            _isInventoryCombineAdded = false;
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        this.Cursor = Cursors.Default;
                                        using (new CenterWinDialog(this)) { MessageBox.Show(_com.ComponentItem.Mi_cd + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty("0"), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                        _isInventoryCombineAdded = false;
                                        return;
                                    }
                                else
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show(_com.ComponentItem.Mi_cd + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty("0"), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    _isInventoryCombineAdded = false;
                                    return;
                                }
                            }
                            _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _com.ComponentItem.Mi_cd);

                            if (_itm.Mi_is_ser1 == 1 && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                            {
                                _comItem.Add(_com);
                            }
                        }

                        if (_comItem.Count > 1 && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                        {//hdnItemCode.value
                            ReptPickSerials _pick = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, _mainItem.Trim(), txtSerialNo.Text.Trim());
                            if (_pick != null)
                                if (!string.IsNullOrEmpty(_pick.Tus_itm_cd))
                                {
                                    var _dup = InventoryCombinItemSerialList.Where(x => x.Tus_itm_cd == _pick.Tus_itm_cd && x.Tus_ser_1 == _pick.Tus_ser_1).ToList();
                                    if (_dup != null)
                                        if (_dup.Count <= 0)
                                            InventoryCombinItemSerialList.Add(_pick);
                                }
                            _comItem.ForEach(x => x.Micp_itm_cd = _combineStatus);
                            var _listComItem = (from _one in _comItem where _one.ComponentItem.Mi_itm_tp != "M" select new { Mi_cd = _one.ComponentItem.Mi_cd, Mi_longdesc = _one.ComponentItem.Mi_longdesc, Micp_itm_cd = _one.Micp_itm_cd, Micp_qty = _one.Micp_qty, Mi_itm_tp = _one.ComponentItem.Mi_itm_tp }).ToList();
                            ////gvPopComItem.DataSource = _listComItem;  xxxx
                            ////pnlInventoryCombineSerialPick.Visible = true;
                            ////pnlMain.Enabled = false;
                            _isInventoryCombineAdded = false;
                            this.Cursor = Cursors.Default;
                            return;
                        }
                        else if (_comItem.Count == 1 && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                        {//hdnItemCode.Value
                            ReptPickSerials _pick = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, _mainItem.Trim(), txtSerialNo.Text.Trim());
                            if (_pick != null)
                                if (!string.IsNullOrEmpty(_pick.Tus_itm_cd))
                                { var _dup = InventoryCombinItemSerialList.Where(x => x.Tus_itm_cd == _pick.Tus_itm_cd && x.Tus_ser_1 == _pick.Tus_ser_1).ToList(); if (_dup != null)                                        if (_dup.Count <= 0) InventoryCombinItemSerialList.Add(_pick); }
                        }
                    }
                    SSCombineLine += 1;
                    foreach (MasterItemComponent _com in _masterItemComponent.OrderByDescending(x => x.ComponentItem.Mi_itm_tp))
                    {
                        //If going to deliver now
                        if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false && InventoryCombinItemSerialList.Count > 0)
                        {
                            var _comItemSer = InventoryCombinItemSerialList.Where(x => x.Tus_itm_cd == _com.ComponentItem.Mi_cd).ToList();
                            if (_comItemSer != null)
                                if (_comItemSer.Count > 0)
                                {
                                    foreach (ReptPickSerials _serItm in _comItemSer)
                                    {
                                        txtSerialNo.Text = _serItm.Tus_ser_1; ScanSerialNo = txtSerialNo.Text;
                                        txtSerialNo.Text = ScanSerialNo; txtItem.Text = _com.ComponentItem.Mi_cd;
                                        cmbStatus.Text = _combineStatus; txtQty.Text = FormatToQty("1");
                                        CheckQty(false); txtDisRate.Text = FormatToCurrency(Convert.ToString(_discountRate));
                                        txtDisAmt.Text = FormatToCurrency(Convert.ToString(Convert.ToDecimal(txtUnitPrice.Text) * Convert.ToDecimal(txtQty.Text) * _discountRate / 100));
                                        txtTaxAmt.Text = FormatToCurrency(Convert.ToString(TaxCalculation(txtItem.Text, _itemStatus, Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, Convert.ToDecimal(txtUnitPrice.Text), Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), true)));
                                        txtLineTotAmt.Text = FormatToCurrency("0"); CalculateItem();
                                        AddItem(false, string.Empty); ScanSerialNo = string.Empty;
                                        txtSerialNo.Text = string.Empty; txtSerialNo.Text = string.Empty;
                                    }
                                    _combineCounter += 1;
                                }
                                else
                                {
                                    txtItem.Text = _com.ComponentItem.Mi_cd; _itemStatus = _combineStatus;
                                    txtQty.Text = FormatToQty(Convert.ToString(_com.Micp_qty * _combineQty)); CheckQty(false);
                                    txtDisRate.Text = FormatToCurrency(Convert.ToString(_discountRate)); txtDisAmt.Text = FormatToCurrency(Convert.ToString(Convert.ToDecimal(txtUnitPrice.Text) * Convert.ToDecimal(txtQty.Text) * _discountRate / 100));
                                    txtTaxAmt.Text = FormatToCurrency(Convert.ToString(TaxCalculation(txtItem.Text, _itemStatus, Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, Convert.ToDecimal(txtUnitPrice.Text), Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), true)));
                                    txtLineTotAmt.Text = FormatToCurrency("0"); CalculateItem();
                                    AddItem(false, string.Empty); ScanSerialNo = string.Empty;
                                    txtSerialNo.Text = string.Empty; txtSerialNo.Text = string.Empty; _combineCounter += 1;
                                }
                        }
                        //If deliver later
                        else if ((chkDeliverLater.Checked || chkDeliverNow.Checked) && InventoryCombinItemSerialList.Count == 0)
                        {
                            txtItem.Text = _com.ComponentItem.Mi_cd; LoadItemDetail(txtItem.Text.Trim());
                            cmbStatus.Text = _combineStatus; txtQty.Text = FormatToQty(Convert.ToString(_com.Micp_qty * _combineQty));
                            CheckQty(false); txtDisRate.Text = FormatToCurrency(Convert.ToString(_discountRate));
                            txtDisAmt.Text = FormatToCurrency(Convert.ToString(Convert.ToDecimal(txtUnitPrice.Text) * Convert.ToDecimal(txtQty.Text) * _discountRate / 100));
                            txtTaxAmt.Text = FormatToCurrency(Convert.ToString(TaxCalculation(txtItem.Text, _itemStatus, Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, Convert.ToDecimal(txtUnitPrice.Text), Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), true)));
                            txtLineTotAmt.Text = FormatToCurrency("0"); CalculateItem();
                            AddItem(false, string.Empty); _combineCounter += 1;
                        }
                    }
                    if (_combineCounter == _masterItemComponent.Count)
                    {
                        _masterItemComponent = new List<MasterItemComponent>();
                        _isCompleteCode = false; _isInventoryCombineAdded = false;
                        _isCombineAdding = false; ScanSerialNo = string.Empty;
                        InventoryCombinItemSerialList = new List<ReptPickSerials>();
                        txtSerialNo.Text = string.Empty;
                        if (_isCombineAdding == false)
                        {
                            this.Cursor = Cursors.Default;

                            txtSerialNo.Text = "";
                            ClearAfterAddItem();
                            _combineCounter = 0;
                            SSPriceBookSequance = "0";
                            SSPriceBookItemSequance = "0";
                            SSPriceBookPrice = 0;
                            if (_isCombineAdding == false) SSPromotionCode = string.Empty;
                            SSPRomotionType = 0;

                            txtItem.Focus();
                            BindAddItem();
                            SetDecimalTextBoxForZero(true);

                            decimal _tobepay = 0;
                            if (lblSVatStatus.Text == "Available")
                                _tobepay = FigureRoundUp(Convert.ToDecimal(lblGrndTotalAmount.Text.Trim()) - Convert.ToDecimal(lblGrndTax.Text.Trim()), true);
                            else
                                _tobepay = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());

                            ////  ucPayModes1.TotalAmount = _tobepay; 
                            InvoiceItemList = _invoiceItemList;
                            SerialList = InvoiceSerialList;
                            ////    ucPayModes1.Amount.Text = FormatToCurrency(Convert.ToString(_tobepay));
                            if (_loyaltyType != null)
                            {
                                LoyaltyCard = _loyaltyType.Salt_loty_tp;
                            }
                            if (HavePayModes)
                                LoadData();
                            this.Cursor = Cursors.Default;

                            if (MessageBox.Show("Do you need to add another item?", "Another Item", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                            {
                                if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                                {
                                    pnlItem.Hide();
                                    btnMulti.Text = "OFF";
                                    btnMulti.BackColor = Color.Bisque;
                                    txtItem.Focus();
                                }
                                else
                                {
                                    txtItem.Focus();
                                }
                            }
                            else
                            {
                                ////  ucPayModes1.button1.Focus(); xxxx
                            }
                        } return;
                    }
                }
                bool _isAgePriceLevel = false;
                int _noofDays = 0;
                DateTime _serialpickingdate = txtDate.Value.Date;
                CheckNValidateAgeItem(txtItem.Text.Trim(), _itm.Mi_cate_1, cmbBook.Text.Trim(), cmbLevel.Text.Trim(), _itemStatus, out _isAgePriceLevel, out _noofDays);
                if (_isAgePriceLevel) _serialpickingdate = _serialpickingdate.AddDays(-_noofDays);
                if (_priceBookLevelRef.Sapl_is_serialized)
                {
                    if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false || (_isRegistrationMandatory))
                    {
                        if (_itm.Mi_is_ser1 == 1)
                        {
                            if (string.IsNullOrEmpty(txtSerialNo.Text.Trim())) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the serial no", "Serial No", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtSerialNo.Focus(); return; }
                            _serLst = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, txtItem.Text.Trim(), txtSerialNo.Text.Trim());
                            if (_serLst == null || string.IsNullOrEmpty(_serLst.Tus_com)) { this.Cursor = Cursors.Default; if (_isAgePriceLevel)                                    using (new CenterWinDialog(this)) { MessageBox.Show("There is no serial available for the selected item in a ageing price level.", "No Serial", MessageBoxButtons.OK, MessageBoxIcon.Information); } else                                    using (new CenterWinDialog(this)) { MessageBox.Show("There is no serial available for the selected item.", "No Serial", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                        }
                        else if (_itm.Mi_is_ser1 == 0)
                        {
                            if (IsPriceLevelAllowDoAnyStatus == false) _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), _itemStatus, Convert.ToDecimal(txtQty.Text.Trim()), _serialpickingdate.Date); else _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), string.Empty, Convert.ToDecimal(txtQty.Text.Trim()), _serialpickingdate.Date);
                            if (_nonserLst == null || _nonserLst.Count <= 0) { this.Cursor = Cursors.Default; if (_isAgePriceLevel)                                    using (new CenterWinDialog(this)) { MessageBox.Show("There is no available qty for the selected item in a ageing price level.", "No Available Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } else                                    using (new CenterWinDialog(this)) { MessageBox.Show("There is no available qty for the selected item.", "No Available Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                        }
                        else if (_itm.Mi_is_ser1 == -1)
                        {
                            //if (IsPriceLevelAllowDoAnyStatus == false) _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), _itemStatus, Convert.ToDecimal(txtQty.Text.Trim()), _serialpickingdate.Date); else _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), string.Empty, Convert.ToDecimal(txtQty.Text.Trim()), _serialpickingdate.Date);
                            //if (_nonserLst == null || _nonserLst.Count <= 0) { this.Cursor = Cursors.Default; if (_isAgePriceLevel)                                    using (new CenterWinDialog(this)) { MessageBox.Show("There is no available qty for the selected item in a ageing price level.", "No Available Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } else                                    using (new CenterWinDialog(this)) { MessageBox.Show("There is no available qty for the selected item.", "No Available Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                        }
                    }
                    else
                    {
                        if (_itm.Mi_is_ser1 == 1) _serLst = VirtualSerialLine(txtItem.Text.Trim(), _itemStatus, Convert.ToDecimal(txtQty.Text.Trim()), txtSerialNo.Text.Trim())[0]; else if (_itm.Mi_is_ser1 == 0) _nonserLst = VirtualSerialLine(txtItem.Text.Trim(), _itemStatus, Convert.ToDecimal(txtQty.Text.Trim()), string.Empty);
                    }
                }
                else if ((chkDeliverLater.Checked == false && chkDeliverNow.Checked == false) || IsGiftVoucher(_itm.Mi_itm_tp) || (_isRegistrationMandatory))
                {
                    if (_itm.Mi_is_ser1 == 1)
                    {
                        if (string.IsNullOrEmpty(txtSerialNo.Text.Trim()))
                        { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the serial no", "Serial No", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtSerialNo.Focus(); return; }
                        bool _isGiftVoucher = IsGiftVoucher(_itm.Mi_itm_tp);
                        if (!_isGiftVoucher) _serLst = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, txtItem.Text.Trim(), txtSerialNo.Text.Trim()); else _serLst = CHNLSVC.Inventory.GetGiftVoucherDetail(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtItem.Text.Trim(), Convert.ToInt32(_serial2), Convert.ToInt32(txtSerialNo.Text.Trim()), _prefix);

                        if (_serLst != null && !string.IsNullOrEmpty(_serLst.Tus_com))
                        {
                            if (_serLst.Tus_doc_dt >= _serialpickingdate)
                            {
                                this.Cursor = Cursors.Default;
                                if (_isAgePriceLevel)
                                {
                                    using (new CenterWinDialog(this)) { MessageBox.Show("There is no serial available for the selected item in a ageing price level.", "No Serial", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    return;
                                }
                            }
                            //else using (new CenterWinDialog(this)) { MessageBox.Show("There is no serial available for the selected item.", "No Serial", MessageBoxButtons.OK, MessageBoxIcon.Information); } return;
                        }
                    }
                    else if (_itm.Mi_is_ser1 == 0)
                    {
                        if (IsPriceLevelAllowDoAnyStatus == false) _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), _itemStatus, Convert.ToDecimal(txtQty.Text.Trim()), _serialpickingdate.Date);
                        else _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), string.Empty, Convert.ToDecimal(txtQty.Text.Trim()), _serialpickingdate.Date);
                        if (_nonserLst == null || _nonserLst.Count <= 0)
                        { this.Cursor = Cursors.Default; if (_isAgePriceLevel) using (new CenterWinDialog(this)) { MessageBox.Show("There is no available qty for the selected item in a ageing price level.", "No Available Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } else                                using (new CenterWinDialog(this)) { MessageBox.Show("There is no available qty for the selected item.", "No Available Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                    }
                    else if (_itm.Mi_is_ser1 == -1)
                    {
                        //if (IsPriceLevelAllowDoAnyStatus == false) _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), _itemStatus, Convert.ToDecimal(txtQty.Text.Trim()), _serialpickingdate.Date);
                        //else _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), string.Empty, Convert.ToDecimal(txtQty.Text.Trim()), _serialpickingdate.Date);
                        //if (_nonserLst == null || _nonserLst.Count <= 0)
                        //{ this.Cursor = Cursors.Default; if (_isAgePriceLevel) using (new CenterWinDialog(this)) { MessageBox.Show("There is no available qty for the selected item in a ageing price level.", "No Available Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } else                                using (new CenterWinDialog(this)) { MessageBox.Show("There is no available qty for the selected item.", "No Available Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                    }
                }
                if ((SSPriceBookSequance == "0" || string.IsNullOrEmpty(SSPriceBookSequance)) && !IsGiftVoucher(_itm.Mi_itm_tp) && _MasterProfitCenter.Mpc_without_price == false && _priceBookLevelRef.Sapl_is_without_p == false)
                    if (!_isCombineAdding) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid price", "System Price", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                if (string.IsNullOrEmpty(txtQty.Text.Trim())) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid qty", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                if (Convert.ToDecimal(txtQty.Text) == 0) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid qty", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                if (Convert.ToDecimal(txtQty.Text.Trim()) <= 0) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid qty", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                if (string.IsNullOrEmpty(txtUnitPrice.Text.Trim())) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid unit price", "System Price", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                if (!_isCombineAdding)
                {
                    List<MasterItemTax> _tax = new List<MasterItemTax>();
                    if (_isStrucBaseTax == true)       //kapila
                    {
                        MasterItem _mstItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text);
                        _tax = CHNLSVC.Sales.GetItemTax_strucbase(BaseCls.GlbUserComCode, txtItem.Text.Trim(), _itemStatus, string.Empty, string.Empty, _mstItem.Mi_anal1);
                    }
                    else
                        _tax = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, txtItem.Text.Trim(), _itemStatus, string.Empty, string.Empty);

                    if (_tax.Count <= 0 && _priceBookLevelRef.Sapl_vat_calc == true)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Tax rates not setup for selected item code and item status.Please contact Inventory Department.", "Tax Setup", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        cmbStatus.Focus();
                        return;
                    }
                }
                if (Convert.ToDecimal(txtUnitPrice.Text.Trim()) == 0 && _isCombineAdding == false && !IsGiftVoucher(_itm.Mi_itm_tp) && (SSPriceBookSequance == "0" || string.IsNullOrEmpty(SSPriceBookSequance)))
                {
                    bool _isTerminate = CheckQty(false);
                    if (_isTerminate) { this.Cursor = Cursors.Default; return; }
                }
                if (CheckBlockItem(txtItem.Text.Trim(), SSPRomotionType, _isCombineAdding))
                    return;
                if (_isCombineAdding == false && _MasterProfitCenter.Mpc_without_price == false && _priceBookLevelRef.Sapl_is_without_p == false)
                {
                    PriceDetailRef _lsts = CHNLSVC.Sales.GetPriceDetailByItemLineSeq(txtItem.Text.Trim(), Convert.ToInt32(SSPriceBookItemSequance), Convert.ToInt32(SSPriceBookSequance));
                    if (_lsts != null && _isCombineAdding == false)
                    {
                        if (string.IsNullOrEmpty(_lsts.Sapd_itm_cd))
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show(txtItem.Text + " does not available price. Please contact IT dept.", "System Price", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            return;
                        }
                        else
                        {
                            decimal _tax = 0;
                            if (MainTaxConstant != null && MainTaxConstant.Count > 0)
                            {
                                _tax = MainTaxConstant[0].Mict_tax_rate;
                            }

                            decimal sysUPrice = FigureRoundUp(_lsts.Sapd_itm_price * _tax, true);
                            decimal pickUPrice = Convert.ToDecimal(txtUnitPrice.Text);
                            if (_MasterProfitCenter != null && _priceBookLevelRef != null)
                                if (!string.IsNullOrEmpty(_MasterProfitCenter.Mpc_com) && !string.IsNullOrEmpty(_priceBookLevelRef.Sapl_com_cd))

                                    if (!_MasterProfitCenter.Mpc_without_price && !_priceBookLevelRef.Sapl_is_without_p)
                                        if (!_MasterProfitCenter.Mpc_edit_price)
                                        {
                                            //comment by darshana 23-08-2013
                                            //re-open by chamal 18-Nov-2014
                                            if (Math.Round(_lsts.Sapd_itm_price, 0) != Math.Round(pickUPrice, 0))
                                            {
                                                this.Cursor = Cursors.Default;
                                                using (new CenterWinDialog(this)) { MessageBox.Show("Price Book price and the unit price is different. Please check the price you selected!", "System Price With Edited Price", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                                                return;
                                            }
                                        }
                                        else
                                        {
                                            if (sysUPrice != pickUPrice)
                                                if (sysUPrice > pickUPrice)
                                                {
                                                    decimal sysEditRate = _MasterProfitCenter.Mpc_edit_rate;
                                                    decimal ddUprice = sysUPrice - ((sysUPrice * sysEditRate) / 100);
                                                    if (ddUprice > pickUPrice)
                                                    {
                                                        this.Cursor = Cursors.Default;
                                                        using (new CenterWinDialog(this)) { MessageBox.Show("Price Book price and the unit price is different. Please check the price you selected!", "System Price With Edited Price", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                                                        return;
                                                    }
                                                }
                                        }
                        }
                    }
                    else
                    {
                        if (_isCombineAdding == false && _priceBookLevelRef.Sapl_is_serialized == false && !IsGiftVoucher(_itm.Mi_itm_tp))
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show(txtItem.Text + " does not available price. Please contact IT dept.", "System Price", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            return;
                        }
                    }
                }
                if (_isCombineAdding == false)
                    if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false || (_isRegistrationMandatory))
                    {
                        if (_itm.Mi_is_ser1 == 1)
                        {
                            var _dup = ScanSerialList.Where(x => x.Tus_itm_cd == txtItem.Text && x.Tus_ser_1 == ScanSerialNo).ToList();
                            if (_dup != null)
                                if (_dup.Count > 0)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show(ScanSerialNo + " serial is already picked!", "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                    txtSerialNo.Focus();
                                    return;
                                }
                        }

                        if (!IsPriceLevelAllowDoAnyStatus)
                        {
                            if (_serLst != null)
                                if (string.IsNullOrEmpty(_serLst.Tus_com))
                                {
                                    if (_serLst.Tus_itm_stus != _itemStatus)
                                    {
                                        this.Cursor = Cursors.Default;
                                        using (new CenterWinDialog(this)) { MessageBox.Show(ScanSerialNo + " serial status is not match with the price level status", "Price Level Restriction", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                        txtSerialNo.Focus();
                                        return;
                                    }
                                }
                        }
                    }

                #endregion Price Combine Checking Process - Costing Dept.

                CalculateItem();

                #region Check Inventory Balance if deliver now!

                //cut code from here !@#$%
                List<PriceBookLevelRef> _lvl = _priceBookLevelRefList;
                if (_lvl != null)
                    if (_lvl.Count > 0)
                    {
                        var _lst = (from _l in _lvl where _l.Sapl_itm_stuts == _itemStatus select _l).ToList();
                        if (_lst != null)
                            if (_lst.Count > 0)
                            {
                                DataTable _temWarr = CHNLSVC.Sales.GetPCWara(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtItem.Text.Trim(), _itemStatus, Convert.ToDateTime(txtDate.Text).Date);

                                if (_lst[0].Sapl_set_warr == true)
                                {
                                    WarrantyPeriod = _lst[0].Sapl_warr_period;
                                }
                                else if (_temWarr != null && _temWarr.Rows.Count > 0)
                                {
                                    WarrantyPeriod = Convert.ToInt32(_temWarr.Rows[0]["SPW_WARA_PD"].ToString());
                                    WarrantyRemarks = _temWarr.Rows[0]["SPW_WARA_RMK"].ToString();
                                }
                                else
                                {
                                    MasterItemWarrantyPeriod _period = CHNLSVC.Inventory.GetItemWarrantyDetail(txtItem.Text.Trim(), _itemStatus);
                                    if (_period != null)
                                    {
                                        WarrantyPeriod = _period.Mwp_val;
                                        WarrantyRemarks = _period.Mwp_rmk;
                                    }
                                    else
                                    {
                                        this.Cursor = Cursors.Default;
                                        using (new CenterWinDialog(this)) { MessageBox.Show("Warranty period not setup by the inventory department. Please contact inventory department", "Warranty Setup", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                        return;
                                    }
                                }
                            }
                    }
                bool _isDuplicateItem = false;
                Int32 _duplicateComLine = 0;
                Int32 _duplicateItmLine = 0;
                if (_invoiceItemList == null || _invoiceItemList.Count <= 0)
                {
                    _isDuplicateItem = false;
                    _lineNo += 1;
                    if (!_isCombineAdding) SSCombineLine += 1;
                    _invoiceItemList.Add(AssignDataToObject(_isPromotion, _itm, _originalItem));
                }
                else
                {
                    var _duplicateItem = from _list in _invoiceItemList
                                         where _list.Sad_itm_cd == txtItem.Text && _list.Sad_itm_stus == _itemStatus && _list.Sad_pbook == cmbBook.Text && _list.Sad_pb_lvl == cmbLevel.Text && _list.Sad_unit_rt == Convert.ToDecimal(txtUnitPrice.Text) && _list.Sad_disc_rt == Convert.ToDecimal(txtDisRate.Text.Trim())
                                         select _list;

                    if (_duplicateItem.Count() > 0)
                    {
                        _isDuplicateItem = true;
                        foreach (var _similerList in _duplicateItem)
                        {
                            _duplicateComLine = _similerList.Sad_job_line;
                            _duplicateItmLine = _similerList.Sad_itm_line;
                            _similerList.Sad_disc_amt = Convert.ToDecimal(_similerList.Sad_disc_amt) + Convert.ToDecimal(txtDisAmt.Text);
                            _similerList.Sad_itm_tax_amt = Convert.ToDecimal(_similerList.Sad_itm_tax_amt) + Convert.ToDecimal(txtTaxAmt.Text);
                            _similerList.Sad_qty = Convert.ToDecimal(_similerList.Sad_qty) + Convert.ToDecimal(txtQty.Text);
                            _similerList.Sad_do_qty = _similerList.Sad_qty; //add by akila 2017/10/20
                            _similerList.Sad_unit_amt = Convert.ToDecimal(txtUnitPrice.Text) * _similerList.Sad_qty;
                            _similerList.Sad_tot_amt = Convert.ToDecimal(_similerList.Sad_tot_amt) + Convert.ToDecimal(txtLineTotAmt.Text);
                        }
                    }
                    else
                    {
                        _isDuplicateItem = false;
                        _lineNo += 1;
                        if (!_isCombineAdding) SSCombineLine += 1;
                        _invoiceItemList.Add(AssignDataToObject(_isPromotion, _itm, _originalItem));
                    }
                }
                //Adding Items to grid end here ----------------------------------------------------------------------

                #endregion Check Inventory Balance if deliver now!

                #region Adding Serial/Non Serial items

                //Scan By Serial ----------start----------------------------------
                if ((chkDeliverLater.Checked == false && chkDeliverNow.Checked == false) || _priceBookLevelRef.Sapl_is_serialized || IsGiftVoucher(_itm.Mi_itm_tp) || _isRegistrationMandatory)
                {
                    if (_isFirstPriceComItem)
                        _isCombineAdding = true;
                    if (ScanSequanceNo == 0) ScanSequanceNo = -100;
                    if (_itm.Mi_is_ser1 == 1)
                    {
                        _serLst.Tus_base_doc_no = Convert.ToString(ScanSequanceNo);
                        _serLst.Tus_base_itm_line = _isDuplicateItem == false ? _lineNo : _duplicateItmLine;
                        _serLst.Tus_usrseq_no = ScanSequanceNo;
                        _serLst.Tus_unit_price = Convert.ToDecimal(txtUnitPrice.Text.Trim());
                        _serLst.Tus_serial_id = _isCombineAdding ? Convert.ToString(SSCombineLine) : string.Empty;
                        _serLst.Tus_new_status = _isCombineAdding == true ? "C" : string.Empty;
                        _serLst.ItemType = _itm.Mi_itm_tp;
                        if (_itm.MI_IS_EXP_DT == 1)
                            _serLst.Tus_exp_dt = Convert.ToDateTime(txtExpDate.Text).Date;          //kapila
                        else
                            _serLst.Tus_exp_dt = Convert.ToDateTime("01-Jan-0001").Date;

                        ScanSerialList.Add(_serLst);
                    }
                    if (_itm.Mi_is_ser1 == 0)
                    {
                        if (_nonserLst.Count < Convert.ToDecimal(txtQty.Text.Trim()))
                        {
                            if (_isAgePriceLevel == false)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show(txtItem.Text + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString(_nonserLst.Count)), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                var _partly = _invoiceItemList.Where(x => x.Sad_job_line == SSCombineLine).ToList();
                                foreach (InvoiceItem _one in _partly)
                                    DeleteIfPartlyAdded(_one.Sad_job_line, _one.Sad_itm_cd, _one.Sad_unit_rt, _one.Sad_pbook, _one.Sad_pb_lvl, _one.Sad_qty, _one.Sad_disc_amt, _one.Sad_itm_tax_amt, _one.Sad_itm_line, _one.Sad_itm_line);

                                return;
                            }
                            else
                            {
                                this.Cursor = Cursors.Default;
                                if (gvInvoiceItem.Rows.Count > 0) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("This serial can't select under ageing price level. Please check the ageing status with IT dept.", "Age Price Level", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                                var _partly = _invoiceItemList.Where(x => x.Sad_job_line == SSCombineLine).ToList();
                                foreach (InvoiceItem _one in _partly)
                                    DeleteIfPartlyAdded(_one.Sad_job_line, _one.Sad_itm_cd, _one.Sad_unit_rt, _one.Sad_pbook, _one.Sad_pb_lvl, _one.Sad_qty, _one.Sad_disc_amt, _one.Sad_itm_tax_amt, _one.Sad_itm_line, _one.Sad_itm_line);

                                return;
                            }
                        }
                        _nonserLst.ForEach(x => x.Tus_base_doc_no = Convert.ToString(ScanSequanceNo));
                        _nonserLst.ForEach(x => x.Tus_base_itm_line = _isDuplicateItem == false ? _lineNo : _duplicateItmLine);
                        _nonserLst.ForEach(x => x.Tus_usrseq_no = ScanSequanceNo);
                        _nonserLst.ForEach(x => x.Tus_unit_price = Convert.ToDecimal(txtUnitPrice.Text.Trim()));
                        _nonserLst.ForEach(x => x.Tus_serial_id = _isCombineAdding ? Convert.ToString(SSCombineLine) : string.Empty);
                        _nonserLst.ForEach(x => x.Tus_ser_id = -1);
                        _nonserLst.ForEach(x => x.Tus_new_status = _isCombineAdding == true ? "C" : string.Empty);
                        _nonserLst.ForEach(x => x.ItemType = _itm.Mi_itm_tp);
                        if (_itm.MI_IS_EXP_DT == 1)
                            _nonserLst.ForEach(x => x.Tus_exp_dt = Convert.ToDateTime(txtExpDate.Text).Date);   //kapila
                        else
                            _nonserLst.ForEach(x => x.Tus_exp_dt = Convert.ToDateTime("01-Jan-0001").Date);
                        ScanSerialList.AddRange(_nonserLst);
                    }
                    if (_itm.Mi_is_ser1 == -1)
                    {
                        //if (_nonserLst.Count < Convert.ToDecimal(txtQty.Text.Trim()))
                        //{
                        //    if (_isAgePriceLevel == false)
                        //    {
                        //        this.Cursor = Cursors.Default;
                        //        using (new CenterWinDialog(this)) { MessageBox.Show(txtItem.Text + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString(_nonserLst.Count)), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        //        var _partly = _invoiceItemList.Where(x => x.Sad_job_line == SSCombineLine).ToList();
                        //        foreach (InvoiceItem _one in _partly)
                        //            DeleteIfPartlyAdded(_one.Sad_job_line, _one.Sad_itm_cd, _one.Sad_unit_rt, _one.Sad_pbook, _one.Sad_pb_lvl, _one.Sad_qty, _one.Sad_disc_amt, _one.Sad_itm_tax_amt, _one.Sad_itm_line, _one.Sad_itm_line);

                        //        return;
                        //    }
                        //    else
                        //    {
                        //        this.Cursor = Cursors.Default;
                        //        if (gvInvoiceItem.Rows.Count > 0) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("This serial can't select under ageing price level. Please check the ageing status with IT dept.", "Age Price Level", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                        //        var _partly = _invoiceItemList.Where(x => x.Sad_job_line == SSCombineLine).ToList();
                        //        foreach (InvoiceItem _one in _partly)
                        //            DeleteIfPartlyAdded(_one.Sad_job_line, _one.Sad_itm_cd, _one.Sad_unit_rt, _one.Sad_pbook, _one.Sad_pb_lvl, _one.Sad_qty, _one.Sad_disc_amt, _one.Sad_itm_tax_amt, _one.Sad_itm_line, _one.Sad_itm_line);

                        //        return;
                        //    }
                        //}

                        bool _isUpd = false;
                        //updated by akila 2017/11/10
                        //foreach (var item in ScanSerialList.Where(x => x.Tus_itm_cd.Equals(txtItem.Text) && x.Tus_base_itm_line.Equals(_lineNo)))
                        if (_isDuplicateItem)
                        {
                            ScanSerialList.Where(x => x.Tus_itm_cd.Equals(txtItem.Text) && x.Tus_base_itm_line.Equals(_duplicateItmLine)).ToList().ForEach(x => x.Tus_qty += Convert.ToDecimal(txtQty.Text));
                            //item.Tus_qty = item.Tus_qty + Convert.ToDecimal(txtQty.Text);
                            _isUpd = true;
                        }
                        if (_isUpd == false)
                        {
                            ReptPickSerials _chk = new ReptPickSerials();
                            _chk.Tus_base_doc_no = Convert.ToString(ScanSequanceNo);
                            _chk.Tus_base_itm_line = _isDuplicateItem == false ? _lineNo : _duplicateItmLine;
                            _chk.Tus_usrseq_no = ScanSequanceNo;
                            _chk.Tus_unit_price = Convert.ToDecimal(txtUnitPrice.Text.Trim());
                            _chk.Tus_itm_cd = txtItem.Text.Trim();
                            _chk.Tus_itm_stus = _itemStatus;
                            _chk.Tus_ser_id = 0;
                            _chk.Tus_qty = Convert.ToDecimal(txtQty.Text);
                            _chk.Tus_bin = BaseCls.GlbDefaultBin;
                            _chk.Tus_ser_1 = "N/A";
                            _chk.Tus_ser_2 = "N/A";
                            _chk.Tus_ser_3 = "N/A";
                            _chk.Tus_ser_4 = "N/A";
                            _chk.Tus_ser_id = 0;
                            _chk.Tus_serial_id = "0";
                            _chk.Tus_com = BaseCls.GlbUserComCode;
                            _chk.Tus_loc = BaseCls.GlbUserDefLoca;
                            _chk.ItemType = _itm.Mi_itm_tp;
                            _chk.Tus_cre_by = BaseCls.GlbUserID;
                            _chk.Tus_cre_by = BaseCls.GlbUserID;
                            _chk.Tus_itm_desc = _itm.Mi_shortdesc;
                            _chk.Tus_itm_model = _itm.Mi_model;
                            _chk.Tus_unit_price = Convert.ToDecimal(txtUnitPrice.Text.Trim());
                            if (_itm.MI_IS_EXP_DT == 1)
                                _chk.Tus_exp_dt = Convert.ToDateTime(txtExpDate.Text).Date;          //kapila
                            else
                                _chk.Tus_exp_dt = Convert.ToDateTime("01-Jan-0001").Date;
                            //Add darshana - To get supplier
                            if (_itemStatus == "CONS")
                            {
                                DataTable _Sup = new DataTable();
                                // _Sup = CHNLSVC.Inventory.Get_Sup_Forcons(BaseCls.GlbUserComCode, txtItem.Text.Trim(), _itemStatus);
                                _Sup = CHNLSVC.Inventory.GetSuplierByItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());
                                if (_Sup.Rows.Count <= 0)
                                {
                                    MessageBox.Show("Cannot find consignement supplier.", "Supplier mismatch", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    return;
                                }
                                else
                                {
                                    string _supplier = "";
                                    _supplier = _Sup.Rows[0]["mbii_cd"].ToString();
                                    _chk.Tus_orig_supp = _supplier;

                                    goto L22;

                                }
                            }

                        L22:
                            ScanSerialList.Add(_chk);
                        }
                    }

                    gvPopSerial.DataSource = new List<ReptPickSerials>();
                    gvPopSerial.DataSource = ScanSerialList.Where(x => x.Tus_ser_1 != "N/A" && !IsGiftVoucher(x.ItemType)).ToList();
                    var filenamesList = new BindingList<ReptPickSerials>(ScanSerialList.Where(x => IsGiftVoucher(x.ItemType)).ToList());
                    gvGiftVoucher.DataSource = filenamesList;

                    if (_isFirstPriceComItem)
                    {
                        _isCombineAdding = false;
                        _isFirstPriceComItem = false;
                    }

                    if (IsGiftVoucher(_itm.Mi_itm_tp)) _isCombineAdding = true;
                }

                #endregion Adding Serial/Non Serial items

                bool _isDuplicate = false;
                if (InvoiceSerialList != null)
                    if (InvoiceSerialList.Count > 0)
                    { if (_itm.Mi_is_ser1 == 1) { var _dup = (from _i in InvoiceSerialList where _i.Sap_ser_1 == txtSerialNo.Text.Trim() && _i.Sap_itm_cd == txtItem.Text.Trim() select _i).ToList(); if (_dup != null)                                if (_dup.Count > 0)                                    _isDuplicate = true; } }
                if (_isDuplicate == false)
                {
                    InvoiceSerial _invser = new InvoiceSerial(); _invser.Sap_del_loc = BaseCls.GlbUserDefLoca;
                    _invser.Sap_itm_cd = txtItem.Text.Trim(); _invser.Sap_itm_line = _lineNo;
                    _invser.Sap_remarks = string.Empty; _invser.Sap_seq_no = Convert.ToInt32(SSPriceBookSequance);
                    _invser.Sap_ser_1 = txtSerialNo.Text; _invser.Sap_ser_line = _isCombineAdding ? Convert.ToInt32(SSCombineLine) : 0;
                    InvoiceSerialList.Add(_invser);
                }
                CalculateGrandTotal(Convert.ToDecimal(txtQty.Text), Convert.ToDecimal(txtUnitPrice.Text), Convert.ToDecimal(txtDisAmt.Text), Convert.ToDecimal(txtTaxAmt.Text), true);
                if (_MainPriceCombinItem != null)
                {
                    string _combineStatus = string.Empty;
                    decimal _combineQty = 0;
                    bool _isSingleItemSerializedInCombine = true;
                    if (_MainPriceCombinItem.Count > 0 && _isCombineAdding == false)
                    {
                        _isCombineAdding = true;
                        if (string.IsNullOrEmpty(_combineStatus)) _combineStatus = _itemStatus;
                        if (_combineQty == 0) _combineQty = Convert.ToDecimal(txtQty.Text);
                        if (chkDeliverLater.Checked == true || chkDeliverNow.Checked == true)
                        {
                            foreach (PriceCombinedItemRef _list in _MainPriceCombinItem)
                            {
                                string _originalItm = _list.Sapc_itm_cd; string _similerItem = _list.Similer_item;
                                _combineStatus = _list.Status; if (!string.IsNullOrEmpty(_similerItem)) txtItem.Text = _similerItem; else txtItem.Text = _list.Sapc_itm_cd;
                                if (_priceBookLevelRef.Sapl_is_serialized) txtSerialNo.Text = _list.Sapc_sub_ser;
                                LoadItemDetail(txtItem.Text.Trim());
                                if (IsGiftVoucher(_itemdetail.Mi_itm_tp))
                                {
                                    foreach (ReptPickSerials _lists in PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == txtItem.Text.Trim()).ToList())
                                    {
                                        txtSerialNo.Text = _lists.Tus_ser_1;
                                        ScanSerialNo = _lists.Tus_ser_1;
                                        string _originalItms = _lists.Tus_session_id;
                                        if (string.IsNullOrEmpty(_originalItm))
                                        {
                                            txtItem.Text = _lists.Tus_itm_cd; _serial2 = _lists.Tus_ser_2;
                                            _prefix = _lists.Tus_ser_3; LoadItemDetail(txtItem.Text.Trim());
                                            cmbStatus.Text = _combineStatus; decimal UnitPrice = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_price).Sum();
                                            decimal Qty = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_qty).Sum();
                                            txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice));
                                            if (_list.Sapc_increse) txtQty.Text = FormatToQty(Convert.ToString((Qty * _combineQty))); else txtQty.Text = FormatToQty(Convert.ToString((Qty)));
                                            txtDisRate.Text = FormatToCurrency("0"); txtDisAmt.Text = FormatToCurrency("0");
                                            txtTaxAmt.Text = FormatToCurrency("0"); txtLineTotAmt.Text = FormatToCurrency("0");
                                            CalculateItem(); AddItem(_isPromotion, string.Empty);
                                        }
                                        else
                                        {
                                            txtItem.Text = _lists.Tus_itm_cd; _serial2 = _lists.Tus_ser_2;
                                            _prefix = _lists.Tus_ser_3; LoadItemDetail(txtItem.Text.Trim());
                                            cmbStatus.Text = _combineStatus; decimal UnitPrice = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_price).Sum();
                                            decimal Qty = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_qty).Sum(); txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice));
                                            if (_list.Sapc_increse) txtQty.Text = FormatToQty(Convert.ToString((Qty * _combineQty))); else txtQty.Text = FormatToQty(Convert.ToString((Qty)));
                                            txtDisRate.Text = FormatToCurrency("0"); txtDisAmt.Text = FormatToCurrency("0");
                                            txtTaxAmt.Text = FormatToCurrency("0"); txtLineTotAmt.Text = FormatToCurrency("0");
                                            CalculateItem(); AddItem(_isPromotion, _originalItm);
                                        }
                                        _combineCounter += 1;
                                    }
                                }
                                else
                                {
                                    cmbStatus.Text = _combineStatus; txtUnitPrice.Text = FormatToCurrency(Convert.ToString(_list.Sapc_price));
                                    if (_list.Sapc_increse) txtQty.Text = FormatToQty(Convert.ToString((_list.Sapc_qty /* * _combineQty */))); else txtQty.Text = FormatToQty(Convert.ToString((_list.Sapc_qty)));
                                    txtDisRate.Text = FormatToCurrency("0"); txtDisAmt.Text = FormatToCurrency("0");
                                    txtTaxAmt.Text = FormatToCurrency("0"); txtLineTotAmt.Text = FormatToCurrency("0");
                                    CalculateItem(); AddItem(_isPromotion, _originalItm);
                                    _combineCounter += 1;
                                }
                            }
                        }
                        else
                        {
                            if (PriceCombinItemSerialList == null || PriceCombinItemSerialList.Count == 0) _isSingleItemSerializedInCombine = false;
                            foreach (ReptPickSerials _list in PriceCombinItemSerialList)
                            {
                                txtSerialNo.Text = _list.Tus_ser_1;
                                ScanSerialNo = _list.Tus_ser_1;
                                string _originalItm = _list.Tus_session_id;
                                _combineStatus = _list.Tus_itm_stus;
                                if (string.IsNullOrEmpty(_originalItm))
                                {
                                    txtItem.Text = _list.Tus_itm_cd; _serial2 = _list.Tus_ser_2;
                                    _prefix = _list.Tus_ser_3; LoadItemDetail(txtItem.Text.Trim());
                                    cmbStatus.Text = _combineStatus; decimal UnitPrice = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_price).Sum();
                                    decimal Qty = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_qty).Sum();
                                    txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice)); txtQty.Text = FormatToQty(Convert.ToString((Qty * _combineQty)));
                                    txtDisRate.Text = FormatToCurrency("0"); txtDisAmt.Text = FormatToCurrency("0");
                                    txtTaxAmt.Text = FormatToCurrency("0"); txtLineTotAmt.Text = FormatToCurrency("0");
                                    CalculateItem(); AddItem(_isPromotion, string.Empty);
                                }
                                else
                                {
                                    txtItem.Text = _list.Tus_itm_cd; _serial2 = _list.Tus_ser_2;
                                    _prefix = _list.Tus_ser_3; LoadItemDetail(txtItem.Text.Trim());
                                    cmbStatus.Text = _combineStatus; decimal UnitPrice = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_price).Sum();
                                    decimal Qty = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_qty).Sum();
                                    var _Increaseable = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(x => x.Sapc_increse).Distinct().ToList();
                                    bool _isIncreaseable = Convert.ToBoolean(_Increaseable[0]); txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice));
                                    if (_isIncreaseable) txtQty.Text = FormatToQty(Convert.ToString((Qty * _combineQty))); else txtQty.Text = FormatToQty(Convert.ToString((Qty)));
                                    txtDisRate.Text = FormatToCurrency("0"); txtDisAmt.Text = FormatToCurrency("0");
                                    txtTaxAmt.Text = FormatToCurrency("0"); txtLineTotAmt.Text = FormatToCurrency("0");
                                    CalculateItem(); AddItem(_isPromotion, _originalItm);
                                }
                                _combineCounter += 1;
                            }
                            foreach (PriceCombinedItemRef _list in _MainPriceCombinItem)
                            {
                                MasterItem _i = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _list.Sapc_itm_cd);
                                _combineStatus = _list.Status;
                                if (_i.Mi_is_ser1 != 1)
                                {
                                    string _originalItm = _list.Sapc_itm_cd; string _similerItem = _list.Similer_item;
                                    if (!string.IsNullOrEmpty(_similerItem)) txtItem.Text = _similerItem; else txtItem.Text = _list.Sapc_itm_cd;
                                    LoadItemDetail(txtItem.Text.Trim()); cmbStatus.Text = _combineStatus;
                                    txtUnitPrice.Text = FormatToCurrency(Convert.ToString(_list.Sapc_price));
                                    if (_list.Sapc_increse) txtQty.Text = FormatToQty(Convert.ToString((_list.Sapc_qty * _combineQty))); else txtQty.Text = FormatToQty(Convert.ToString((_list.Sapc_qty)));
                                    txtDisRate.Text = FormatToCurrency("0"); txtDisAmt.Text = FormatToCurrency("0");
                                    txtTaxAmt.Text = FormatToCurrency("0"); txtLineTotAmt.Text = FormatToCurrency("0");
                                    CalculateItem(); AddItem(_isPromotion, _originalItm);
                                    _combineCounter += 1;
                                }
                            }
                        }

                        //updated by akila 2018/02/16
                        if (chkDeliverLater.Checked == true || chkDeliverNow.Checked == true)
                            if (_combineCounter == _MainPriceCombinItem.Count) 
                            { 
                                _MainPriceCombinItem = new List<PriceCombinedItemRef>(); 
                                PriceCombinItemSerialList = new List<ReptPickSerials>(); 
                                _isCombineAdding = false; 
                                SSPromotionCode = string.Empty; 
                                ScanSerialNo = string.Empty; 
                                _serial2 = string.Empty; 
                                _prefix = string.Empty; 
                                txtSerialNo.Text = ""; 
                                txtSerialNo.Text = string.Empty; 
                                SSCombineLine += 1; 
                                _combineCounter = 0; 
                                _isCheckedPriceCombine = false; 
                                if (_isCombineAdding == false) { this.Cursor = Cursors.Default;  } return; 
                            }
                      if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false || (_isRegistrationMandatory))
                        {
                            if (_isSingleItemSerializedInCombine)
                            {
                                if (_combineCounter == PriceCombinItemSerialList.Count)
                                { 
                                    _MainPriceCombinItem = new List<PriceCombinedItemRef>(); 
                                    PriceCombinItemSerialList = new List<ReptPickSerials>(); 
                                    _isCombineAdding = false; 
                                    SSPromotionCode = string.Empty; 
                                    ScanSerialNo = string.Empty; 
                                    _serial2 = string.Empty; 
                                    _prefix = string.Empty; 
                                    txtSerialNo.Text = ""; 
                                    txtSerialNo.Text = string.Empty; 
                                    SSCombineLine += 1; 
                                    _combineCounter = 0; 
                                    _isCheckedPriceCombine = false; 
                                    if (_isCombineAdding == false) 
                                    { 
                                        this.Cursor = Cursors.Default; 
                                    } return; 
                                }
                                else if (_combineCounter == _MainPriceCombinItem.Count) 
                                { 
                                    _MainPriceCombinItem = new List<PriceCombinedItemRef>();
                                    PriceCombinItemSerialList = new List<ReptPickSerials>(); 
                                    _isCombineAdding = false; 
                                    SSPromotionCode = string.Empty; 
                                    ScanSerialNo = string.Empty; 
                                    _serial2 = string.Empty; 
                                    _prefix = string.Empty;
                                    txtSerialNo.Text = ""; 
                                    txtSerialNo.Text = string.Empty; 
                                    SSCombineLine += 1; 
                                    _combineCounter = 0; 
                                    _isCheckedPriceCombine = false; 
                                    if (ucPayModes2.HavePayModes) ucPayModes2.LoadData(); 
                                    if (_isCombineAdding == false) 
                                    { 
                                        this.Cursor = Cursors.Default;                                         
                                    } return; 
                                }
                            }
                            else
                                if (_combineCounter == _MainPriceCombinItem.Count) 
                                { 
                                    _MainPriceCombinItem = new List<PriceCombinedItemRef>(); 
                                    PriceCombinItemSerialList = new List<ReptPickSerials>(); 
                                    _isCombineAdding = false; 
                                    SSPromotionCode = string.Empty; 
                                    ScanSerialNo = string.Empty; 
                                    _serial2 = string.Empty; 
                                    _prefix = string.Empty; 
                                    txtSerialNo.Text = ""; 
                                    txtSerialNo.Text = string.Empty; 
                                    SSCombineLine += 1; 
                                    _combineCounter = 0; 
                                    _isCheckedPriceCombine = false; 
                                    if (_isCombineAdding == false) 
                                    { 
                                        this.Cursor = Cursors.Default; 
                                    } return; 
                                }
                        }


                        //if (chkDeliverLater.Checked == true || chkDeliverNow.Checked == true)
                        //    //// xxxx if (_combineCounter == _MainPriceCombinItem.Count) { _MainPriceCombinItem = new List<PriceCombinedItemRef>(); PriceCombinItemSerialList = new List<ReptPickSerials>(); _isCombineAdding = false; SSPromotionCode = string.Empty; ScanSerialNo = string.Empty; _serial2 = string.Empty; _prefix = string.Empty; txtSerialNo.Text = ""; txtSerialNo.Text = string.Empty; SSCombineLine += 1; _combineCounter = 0; _isCheckedPriceCombine = false; if (ucPayModes1.HavePayModes) ucPayModes1.LoadData(); if (_isCombineAdding == false) { this.Cursor = Cursors.Default; if (MessageBox.Show("Do you need to add another item?", "Another Item", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes) { if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false || (_isRegistrationMandatory)) { txtSerialNo.Focus(); } else { txtItem.Focus(); } } else { ucPayModes1.button1.Focus(); } } return; }//hdnSerialNo.Value = ""
                        //    if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false || (_isRegistrationMandatory))
                        //    {
                        //        if (_isSingleItemSerializedInCombine)
                        //        {
                        //            //// xxxx
                        //            ////if (_combineCounter == PriceCombinItemSerialList.Count)
                        //            ////{ _MainPriceCombinItem = new List<PriceCombinedItemRef>(); PriceCombinItemSerialList = new List<ReptPickSerials>(); _isCombineAdding = false; SSPromotionCode = string.Empty; ScanSerialNo = string.Empty; _serial2 = string.Empty; _prefix = string.Empty; txtSerialNo.Text = ""; txtSerialNo.Text = string.Empty; SSCombineLine += 1; _combineCounter = 0; _isCheckedPriceCombine = false; if (ucPayModes1.HavePayModes)  ucPayModes1.LoadData(); if (_isCombineAdding == false) { this.Cursor = Cursors.Default; if (MessageBox.Show("Do you need to add another item?", "Another Item", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes) { if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false || (_isRegistrationMandatory)) { txtSerialNo.Focus(); } else { txtItem.Focus(); } } else { ucPayModes1.button1.Focus(); } } return; }
                        //            ////else if (_combineCounter == _MainPriceCombinItem.Count) { _MainPriceCombinItem = new List<PriceCombinedItemRef>(); PriceCombinItemSerialList = new List<ReptPickSerials>(); _isCombineAdding = false; SSPromotionCode = string.Empty; ScanSerialNo = string.Empty; _serial2 = string.Empty; _prefix = string.Empty; txtSerialNo.Text = ""; txtSerialNo.Text = string.Empty; SSCombineLine += 1; _combineCounter = 0; _isCheckedPriceCombine = false; if (ucPayModes1.HavePayModes) ucPayModes1.LoadData(); if (_isCombineAdding == false) { this.Cursor = Cursors.Default; if (MessageBox.Show("Do you need to add another item?", "Another Item", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes) { if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false) { txtSerialNo.Focus(); } else { txtItem.Focus(); } } else { ucPayModes1.button1.Focus(); } } return; }
                        //        }
                        //        ////else
                        //        //// xxxx
                        //        ////if (_combineCounter == _MainPriceCombinItem.Count) { _MainPriceCombinItem = new List<PriceCombinedItemRef>(); PriceCombinItemSerialList = new List<ReptPickSerials>(); _isCombineAdding = false; SSPromotionCode = string.Empty; ScanSerialNo = string.Empty; _serial2 = string.Empty; _prefix = string.Empty; txtSerialNo.Text = ""; txtSerialNo.Text = string.Empty; SSCombineLine += 1; _combineCounter = 0; _isCheckedPriceCombine = false; if (ucPayModes1.HavePayModes)  ucPayModes1.LoadData(); if (_isCombineAdding == false) { this.Cursor = Cursors.Default; if (MessageBox.Show("Do you need to add another item?", "Another Item", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes) { if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false) { txtSerialNo.Focus(); } else { txtItem.Focus(); } } else { ucPayModes1.button1.Focus(); } } return; }//hdnSerialNo.Value = ""
                        //    }
                    }
                }


                decimal _u_price = Convert.ToDecimal(txtLineTotAmt.Text);

                txtExpDate.Text = "01-Jan-0001";    //kapila
                txtSerialNo.Text = "";
                ClearAfterAddItem();
                SSPriceBookSequance = "0";
                SSPriceBookItemSequance = "0";
                SSPriceBookPrice = 0;
                if (_isCombineAdding == false) SSPromotionCode = string.Empty;
                SSPRomotionType = 0;
                txtItem.Focus();
                BindAddItem();
                SetDecimalTextBoxForZero(true);
                decimal _tobepays = 0;
                if (lblSVatStatus.Text == "Available")
                {
                    _tobepays = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim()) - Convert.ToDecimal(lblGrndTax.Text.Trim());
                }
                else _tobepays = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());
                ////   ucPayModes1.TotalAmount = _tobepays; xxxx
                InvoiceItemList = _invoiceItemList;
                SerialList = InvoiceSerialList;
                ////  ucPayModes1.Amount.Text = FormatToCurrency(Convert.ToString(_tobepays));
                IsTaxInvoice = chkTaxPayable.Checked;
                if (HavePayModes && _isCombineAdding == false)
                    LoadData();
                else
                    lblbalanceAmo.Text = Base.FormatToCurrency((Convert.ToDecimal(lblGrndTotalAmount.Text) - Convert.ToDecimal(lblPaidAmo.Text)).ToString());

                sendToDisplay(_u_price, Convert.ToDecimal(lblbalanceAmo.Text));   //kapila

                if (_loyaltyType != null)
                {
                    LoyaltyCard = _loyaltyType.Salt_loty_tp;
                }
                LookingForBuyBack();
                this.Cursor = Cursors.Default;
                if (_isCombineAdding == false)
                {
                    this.Cursor = Cursors.Default;
                    //if (MessageBox.Show("Do you need to add another item?", "Another Item", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    //{
                    if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                    {
                        txtSerialNo.Focus();
                    }
                    else
                    {
                        txtItem.Focus();
                    }
                    //kapila
                    txtCNT.Text = _invoiceItemList.Select(x => x.Sad_qty).Sum().ToString("0");

                    //}
                    //else
                    //{
                    //    ////  ucPayModes1.button1.Focus();  xxxx
                    //}
                }
            }
            catch (Exception ex)
            { CHNLSVC.CloseChannel(); this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(ex.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error); } return; }
        }

        private void LookingForBuyBack()
        {
            if (_invoiceItemList != null && _invoiceItemList.Count > 0)
            {
                var _bb = _invoiceItemList.Where(x => x.Sad_merge_itm == "3").ToList();
                if (_bb != null && _bb.Count > 0) { if (gvBuyBack.Rows.Count <= 0)  btnBuyBack.BackColor = Color.Red; else btnBuyBack.BackColor = Color.White; }
                else btnBuyBack.BackColor = Color.White;
            }
            else btnBuyBack.BackColor = Color.White;
        }

        private void ClearAfterAddItem()
        {
            txtItem.Text = "";
            txtSrchItem.Text = "";
            cmbStatus.Text = DefaultItemStatus;
            txtQty.Text = FormatToQty("1");
            LoadItemDetail(string.Empty);
            txtUnitPrice.Text = FormatToCurrency("0");
            txtUnitAmt.Text = FormatToCurrency("0");
            txtDisRate.Text = FormatToCurrency("0");
            txtDisAmt.Text = FormatToCurrency("0");
            txtTaxAmt.Text = FormatToCurrency("0");
            txtLineTotAmt.Text = FormatToCurrency("0");
            txtItem.ReadOnly = false;
        }

        private void AddItemDisableCustomer(bool _disable)
        {
            //Add by Chamal 14-jul-2014
            if (_disable == false)
            {
                txtCustomer.Enabled = true;
                btnSearch_NIC.Enabled = true;
                btnSearch_Customer.Enabled = true;
                btnSearch_Mobile.Enabled = true;
                txtDate.Enabled = true;
                btnCust.Enabled = true;
            }
            else
            {
                //if (txtCustomer.Text.ToString() != "AST-CASH")
                //{
                    txtCustomer.Enabled = false;
                    btnSearch_NIC.Enabled = false;
                    btnSearch_Customer.Enabled = false;
                    btnSearch_Mobile.Enabled = false;
                    btnCust.Enabled = false;
                //}
                txtDate.Enabled = false;
            }
        }

        private void txtQty_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {

                addItem();
            }
        }


        private void txtSrchItem_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
                txtSrchItem_DoubleClick(null, null);
            if (e.KeyCode == Keys.Enter)
            {
                string _item = "";
                //kapila 14/11/2013
                if (txtSrchItem.Text.Length == 16)
                    _item = txtSrchItem.Text.Substring(1, 7);
                else if (txtSrchItem.Text.Length == 15)
                    _item = txtSrchItem.Text.Substring(0, 7);
                //else if (txtSrchItem.Text.Length == 8)
                //    _item = txtSrchItem.Text.Substring(1, 7); -- commented by akila 2018/03/22
                else if (txtSrchItem.Text.Length == 20)
                    _item = txtSrchItem.Text.Substring(0, 12);
                else
                    _item = txtSrchItem.Text;
                txtSrchItem.Text = _item;

                txtItem.Text = txtSrchItem.Text;
                cmbBook.Focus();
            }
            //if (e.KeyCode == Keys.F5)
            //{
            //    if (_srchCriteria == 1)
            //    {
            //        lblSrchDesc.BackColor = Color.DeepSkyBlue;
            //        lblSrchCode.BackColor = Color.LightSteelBlue;
            //        lblSrchModel.BackColor = Color.LightSteelBlue;
            //        lblSrchBrand.BackColor = Color.LightSteelBlue;
            //        _srchCriteria = 2;
            //    }
            //    if (_srchCriteria == 2)
            //    {
            //        lblSrchModel.BackColor = Color.DeepSkyBlue;
            //        lblSrchCode.BackColor = Color.LightSteelBlue;
            //        lblSrchDesc.BackColor = Color.LightSteelBlue;
            //        lblSrchBrand.BackColor = Color.LightSteelBlue;
            //        _srchCriteria = 3;
            //    }
            //    if (_srchCriteria == 3)
            //    {
            //        lblSrchBrand.BackColor = Color.DeepSkyBlue;
            //        lblSrchCode.BackColor = Color.LightSteelBlue;
            //        lblSrchModel.BackColor = Color.LightSteelBlue;
            //        lblSrchDesc.BackColor = Color.LightSteelBlue;
            //        _srchCriteria = 4;
            //    }
            //    if (_srchCriteria == 4)
            //    {
            //        lblSrchCode.BackColor = Color.DeepSkyBlue;
            //        lblSrchDesc.BackColor = Color.LightSteelBlue;
            //        lblSrchModel.BackColor = Color.LightSteelBlue;
            //        lblSrchBrand.BackColor = Color.LightSteelBlue;
            //        _srchCriteria = 1;
            //    }
            //}
        }

        private void btnClose_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("Do you want to close?", "POS", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
                this.Close();
        }

        private void btnClosePay_Click(object sender, EventArgs e)
        {
            pnlPay.Hide();
            txtItem.Focus();
            btnBarcode.Text = "ON";
            btnBarcode.BackColor = Color.LimeGreen;
        }

        private void btnPay_Click(object sender, EventArgs e)
        {
            pnlPay.Show();
            lblSelPayTpDesc.Text = "CASH";
            lblSelPayTp.Text = "CASH";
            textBoxAmount.Text = lblbalanceAmo.Text;
            btnPCash_Click(null, null);

            //    sendToDisplay( Convert.ToDecimal(lblbalanceAmo.Text));   //kapila

        }

        private void btnCloseItm_Click(object sender, EventArgs e)
        {
            pnlItem.Hide();
            txtItem.Focus();
            btnBarcode.Text = "ON";
            btnBarcode.BackColor = Color.LimeGreen;
        }

        private void btnDisc_Click(object sender, EventArgs e)
        {
            pnlDisc.Show();
        }

        private void btnCloseDisc_Click(object sender, EventArgs e)
        {
            pnlDisc.Hide();
        }

        private void btnCloseCust_Click(object sender, EventArgs e)
        {
            pnlCust.Hide();
        }

        private void btnCust_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                General.CustomerCreation _CusCre = new General.CustomerCreation();
                _CusCre._isFromOther = true;
                _CusCre.obj_TragetTextBox = txtCustomer;
                this.Cursor = Cursors.Default;
                _CusCre.ShowDialog();
                txtCustomer.Select();
                if (chkDeliverLater.Checked) txtItem.Focus(); else txtSerialNo.Focus();
            }
            catch (Exception ex)
            { txtCustomer.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnNumClear_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(focusedTextbox.Text))
            {
                focusedTextbox.Text = "";
                focusedTextbox.Focus();
            }
        }

        private void btn1_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(focusedTextbox.Text))
            {
                if (Convert.ToDecimal(focusedTextbox.Text) == 0)
                    focusedTextbox.Text = "";
                focusedTextbox.Text += "1";
            }
        }

        private void btn2_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(focusedTextbox.Text))
            {
                if (Convert.ToDecimal(focusedTextbox.Text) == 0)
                    focusedTextbox.Text = "";
                focusedTextbox.Text += "2";
            }
        }

        private void btn3_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(focusedTextbox.Text))
            {
                if (Convert.ToDecimal(focusedTextbox.Text) == 0)
                    focusedTextbox.Text = "";
                focusedTextbox.Text += "3";
            }
        }

        private void btn4_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(focusedTextbox.Text))
            {
                if (Convert.ToDecimal(focusedTextbox.Text) == 0)
                    focusedTextbox.Text = "";
                focusedTextbox.Text += "4";
            }
        }

        private void btn5_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(focusedTextbox.Text))
            {
                if (Convert.ToDecimal(focusedTextbox.Text) == 0)
                    focusedTextbox.Text = "";
                focusedTextbox.Text += "5";
            }
        }

        private void btn6_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(focusedTextbox.Text))
            {
                if (Convert.ToDecimal(focusedTextbox.Text) == 0)
                    focusedTextbox.Text = "";
                focusedTextbox.Text += "6";
            }
        }

        private void btn7_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(focusedTextbox.Text))
            {
                if (Convert.ToDecimal(focusedTextbox.Text) == 0)
                    focusedTextbox.Text = "";
                focusedTextbox.Text += "7";
            }
        }

        private void btn8_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(focusedTextbox.Text))
            {
                if (Convert.ToDecimal(focusedTextbox.Text) == 0)
                    focusedTextbox.Text = "";
                focusedTextbox.Text += "8";
            }
        }

        private void btn9_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(focusedTextbox.Text))
            {
                if (Convert.ToDecimal(focusedTextbox.Text) == 0)
                    focusedTextbox.Text = "";
                focusedTextbox.Text += "9";
            }
        }

        private void btn0_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(focusedTextbox.Text))
            {
                if (Convert.ToDecimal(focusedTextbox.Text) == 0)
                    focusedTextbox.Text = "";
                focusedTextbox.Text += "0";
            }
        }

        private void btn00_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(focusedTextbox.Text))
            {
                if (Convert.ToDecimal(focusedTextbox.Text) == 0)
                    focusedTextbox.Text = "";
                focusedTextbox.Text += "00";
            }
        }

        private void btnDot_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(focusedTextbox.Text))
            {
                if (Convert.ToDecimal(focusedTextbox.Text) == 0)
                    focusedTextbox.Text = "";
                focusedTextbox.Text += ".";
            }
        }

        private void btnBkSpace_Click(object sender, EventArgs e)
        {
            if (focusedTextbox.TextLength > 0)
            {
                if (!string.IsNullOrEmpty(focusedTextbox.Text))
                {
                    focusedTextbox.Text = focusedTextbox.Text.Substring(0, (focusedTextbox.TextLength - 1));
                }
            }

        }

        private void btnCloseDisc_Click_1(object sender, EventArgs e)
        {
            pnlDisc.Hide();
        }

        private void btnClosePay_Click_1(object sender, EventArgs e)
        {

        }

        private void btnCloseCus_Click(object sender, EventArgs e)
        {
            pnlCust.Hide();
        }

        private void BackDatePermission()
        {
            _isBackDate = false;
            bool _allowCurrentTrans = false;
            IsAllowBackDateForModule(BaseCls.GlbUserComCode, string.Empty, BaseCls.GlbUserDefProf, this.GlbModuleName, txtDate, lblBackDateInfor, string.Empty, out _allowCurrentTrans);
        }

        private void POSInvoiceTouch_Load(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                BackDatePermission();
                LoadPromotor();//Akila 2017/11/28

                //load priority price book
                List<PriceDefinitionRef> tem = (from _res in _PriceDefinitionRef
                                                where _res.Sadd_def_pb
                                                select _res).ToList<PriceDefinitionRef>();
                if (tem != null && tem.Count > 0)
                {
                    _priorityPriceBook = new PriortyPriceBook();
                    _priorityPriceBook.Sppb_pb = tem[0].Sadd_pb;
                    _priorityPriceBook.Sppb_pb_lvl = tem[0].Sadd_p_lvl;
                }

                //change chk value
                if (_MasterProfitCenter.Mpc_is_do_now == 0)
                {
                    chkDeliverLater.Checked = false;
                    chkDeliverNow.Checked = false;
                    chkDeliverLater_CheckedChanged(null, null);
                }
                else if (_MasterProfitCenter.Mpc_is_do_now == 1)
                {
                    chkDeliverNow.Checked = true;
                    chkDeliverLater.Checked = false;
                    chkDeliverNow_CheckedChanged(null, null);
                }
                else
                {
                    chkDeliverLater.Checked = true;
                    chkDeliverNow.Checked = false;
                    chkDeliverLater_CheckedChanged(null, null);
                }
            }
            catch (Exception ex)
            {
                this.Cursor = Cursors.Default; SystemErrorMessage(ex);
            }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnMulti_Click(object sender, EventArgs e)
        {
            if (btnMulti.Text == "OFF")
            {
                btnMulti.Text = "ON";
                btnMulti.BackColor = Color.LimeGreen;
            }
            else
            {
                btnMulti.Text = "OFF";
                btnMulti.BackColor = Color.Bisque;
            }
            txtItem.Focus();
        }

        private class CenterWinDialog : IDisposable
        {
            private int mTries = 0;
            private Form mOwner;

            public CenterWinDialog(Form owner)
            {
                mOwner = owner;
                owner.BeginInvoke(new MethodInvoker(findDialog));
            }

            private void findDialog()
            {
                // Enumerate windows to find the message box
                if (mTries < 0) return;
                EnumThreadWndProc callback = new EnumThreadWndProc(checkWindow);
                if (EnumThreadWindows(GetCurrentThreadId(), callback, IntPtr.Zero))
                {
                    if (++mTries < 10) mOwner.BeginInvoke(new MethodInvoker(findDialog));
                }
            }

            private bool checkWindow(IntPtr hWnd, IntPtr lp)
            {
                // Checks if <hWnd> is a dialog
                StringBuilder sb = new StringBuilder(260);
                GetClassName(hWnd, sb, sb.Capacity);
                if (sb.ToString() != "#32770") return true;
                // Got it
                Rectangle frmRect = new Rectangle(mOwner.Location, mOwner.Size);
                RECT dlgRect;
                GetWindowRect(hWnd, out dlgRect);
                MoveWindow(hWnd,
                    frmRect.Left + (frmRect.Width - dlgRect.Right + dlgRect.Left) / 2,
                    frmRect.Top + (frmRect.Height - dlgRect.Bottom + dlgRect.Top) / 2,
                    dlgRect.Right - dlgRect.Left,
                    dlgRect.Bottom - dlgRect.Top, true);
                return false;
            }

            public void Dispose()
            {
                mTries = -1;
            }

            // P/Invoke declarations
            private delegate bool EnumThreadWndProc(IntPtr hWnd, IntPtr lp);

            [DllImport("user32.dll")]
            private static extern bool EnumThreadWindows(int tid, EnumThreadWndProc callback, IntPtr lp);

            [DllImport("kernel32.dll")]
            private static extern int GetCurrentThreadId();

            [DllImport("user32.dll")]
            private static extern int GetClassName(IntPtr hWnd, StringBuilder buffer, int buflen);

            [DllImport("user32.dll")]
            private static extern bool GetWindowRect(IntPtr hWnd, out RECT rc);

            [DllImport("user32.dll")]
            private static extern bool MoveWindow(IntPtr hWnd, int x, int y, int w, int h, bool repaint);

            private struct RECT { public int Left; public int Top; public int Right; public int Bottom; }
        }


        private bool _isItemChecking = false;
        private void CheckItemCode(object sender, EventArgs e)
        {
            bool _isOK = false;
            string _item = "";
            //kapila 14/11/2013
            if (txtSrchItem.Text.Length == 15)
                _item = txtSrchItem.Text.Substring(0, 7);
            else
                _item = txtSrchItem.Text;
            txtSrchItem.Text = _item;

            txtItem.Text = txtSrchItem.Text;
            if (string.IsNullOrEmpty(txtItem.Text.Trim())) return;
            if (_isItemChecking) { _isItemChecking = false; return; }
            _isItemChecking = true;
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (!LoadItemDetail(txtItem.Text.Trim()))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Item is currently inactivated", "Invalid Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    txtItem.Clear();
                    txtItem.Focus();
                    if (IsPriceLevelAllowDoAnyStatus == false && chkDeliverLater.Checked == false) cmbStatus.Text = DefaultStatus;
                    return;
                }

                if (_itemdetail.Mi_is_ser1 == 1 && IsGiftVoucher(_itemdetail.Mi_itm_tp))
                {
                    if (string.IsNullOrEmpty(txtSerialNo.Text))
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this))
                        {
                            MessageBox.Show("Please select the gift voucher number", "Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        } txtItem.Clear();
                        txtSerialNo.Clear();
                    }

                    return;
                }
                IsVirtual(_itemdetail.Mi_itm_tp);

                if ((_itemdetail.Mi_is_ser1 == 1 && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false && string.IsNullOrEmpty(txtSerialNo.Text.Trim()) && _priceBookLevelRef.Sapl_is_serialized == false))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("You have to select the serial no for the serialized item", "Invalid Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                if ((_itemdetail.Mi_is_ser1 == 1 && chkDeliverLater.Checked == true && chkDeliverNow.Checked == false && string.IsNullOrEmpty(txtSerialNo.Text.Trim()) && _priceBookLevelRef.Sapl_is_serialized == false) && _isRegistrationMandatory)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Registration mandatory items can not save without serial", "Invalid Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }

                //if (IsPriceLevelAllowDoAnyStatus == false && chkDeliverLater.Checked == false) cmbStatus.Text = "";

                //if (string.IsNullOrEmpty(txtSerialNo.Text.Trim()) && _priceBookLevelRef.Sapl_is_serialized == false) txtQty.Text = FormatToQty("0"); else
                if (txtSerialNo.Text != "")
                {
                    txtQty.Text = FormatToQty("1");
                }
                if (_IsVirtualItem)
                {
                    bool block = CheckBlockItem(txtItem.Text.Trim(), 0, false);
                    if (block)
                    {
                        txtItem.Text = "";
                    }
                }
                CheckQty(true);
                ////btnAddItem.Focus();
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); _isItemChecking = false; }
        }

        private bool _isBlocked = false;
        private bool CheckBlockItem(string _item, int _pricetype, bool _isCombineItemAddingNow)
        {
            if (_isCombineItemAddingNow) return false;
            _isBlocked = false;
            if (_priceBookLevelRef.Sapl_is_serialized == false)
            {
                MasterItemBlock _block = CHNLSVC.Inventory.GetBlockedItemByPriceType(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _item, _pricetype);
                if (_block != null)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item already blocked by the Costing Dept.", "Blocked Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    _isBlocked = true;
                }
            }
            return _isBlocked;
        }

        private void SetSSPriceDetailVariable(string _circuler, string _pblineseq, string _pbseqno, string _pbprice, string _promotioncd, string _promotiontype)
        {
            SSCirculerCode = _circuler;
            SSPriceBookItemSequance = _pblineseq;
            SSPriceBookPrice = Convert.ToDecimal(_pbprice);
            SSPriceBookSequance = _pbseqno;
            SSPromotionCode = _promotioncd;
            _promoType = _promotiontype;

            SSPRomotionType = Convert.ToInt32(_promotiontype);
            //if (string.IsNullOrEmpty(_promotioncd) || _promotioncd.Trim().ToUpper() == "N/A") SSPromotionCode = string.Empty;
            //SSPRomotionType = Convert.ToInt32(_promotiontype);
        }

        private bool CheckInventoryCombine()
        {
            bool _IsTerminate = false;
            _isCompleteCode = false;

            if (!string.IsNullOrEmpty(txtItem.Text))
            {
                MasterItem _itemDet = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());
                if (_itemDet.Mi_is_ser1 == 1)
                {
                    txtSerialNo.Enabled = true;
                    btnSearch_Serial.Enabled = true;
                }
                else
                {
                    txtSerialNo.Enabled = false;
                    btnSearch_Serial.Enabled = false;
                }
                if (_itemDet.Mi_itm_tp == "V" && _itemDet.Mi_is_subitem == true)
                    //// _isCompleteCode = BindItemComponent(txtItem.Text.Trim());fcuk

                    if (_isCompleteCode)
                    {
                        if (_masterItemComponent != null)
                        {
                            if (_masterItemComponent.Count > 0)
                            {
                                _isInventoryCombineAdded = false;
                                _isCompleteCode = true;
                                _IsTerminate = false;
                                return _IsTerminate;
                            }
                            else
                            {
                                _isCompleteCode = false;
                                _IsTerminate = true;
                            }
                        }
                        else
                        {
                            _isCompleteCode = false;
                            _IsTerminate = true;
                        }
                    }
            }
            else
            {
                _isCompleteCode = false;
                _IsTerminate = true;
            }

            return _IsTerminate;
        }

        private bool CheckProfitCenterAllowForWithoutPrice()
        {
            bool _isAvailable = false;
            if (_MasterProfitCenter.Mpc_without_price && _priceBookLevelRef.Sapl_is_without_p)
            {
                SetDecimalTextBoxForZero(false, false, false);
                _isAvailable = true;
                return _isAvailable;
            }
            return _isAvailable;
        }

        private bool CheckQtyPriliminaryRequirements()
        {
            bool _IsTerminate = false;
            if (string.IsNullOrEmpty(txtItem.Text))
            {
                _IsTerminate = true; return _IsTerminate;
            }
            if (IsNumeric(txtQty.Text) == false)
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid qty", "Invalid Character", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                _IsTerminate = true;
                txtQty.Focus();
                return _IsTerminate; ;
            }
            if (Convert.ToDecimal(txtQty.Text.Trim()) == 0) { _IsTerminate = true; return _IsTerminate; };

            if (_itemdetail.Mi_is_ser1 == 1 && !string.IsNullOrEmpty(txtSerialNo.Text.Trim()))
                txtQty.Text = FormatToQty("1");
            _MainPriceCombinItem = new List<PriceCombinedItemRef>();
            if (string.IsNullOrEmpty(txtQty.Text)) { CalculateItem(); SSPriceBookItemSequance = "0"; SSPriceBookPrice = 0; SSPriceBookSequance = "0"; WarrantyPeriod = 0; WarrantyRemarks = string.Empty; _IsTerminate = true; return _IsTerminate; }
            if (Convert.ToDecimal(txtQty.Text) <= 0) { CalculateItem(); SSPriceBookItemSequance = "0"; SSPriceBookPrice = 0; SSPriceBookSequance = "0"; WarrantyPeriod = 0; WarrantyRemarks = string.Empty; _IsTerminate = true; return _IsTerminate; }
            if (string.IsNullOrEmpty("CS"))
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the invoice type", "Invalid Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                _IsTerminate = true;
                //// cmbInvType.Focus();
                return _IsTerminate;
            }
            if (string.IsNullOrEmpty(txtCustomer.Text))
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the customer", "Invalid Customer Code", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                _IsTerminate = true;
                txtCustomer.Focus();
                return _IsTerminate;
            }
            if (string.IsNullOrEmpty(txtItem.Text))
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the item", "Invalid Item", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                _IsTerminate = true;
                txtItem.Focus();
                return _IsTerminate;
            }

            if (string.IsNullOrEmpty(cmbBook.Text))
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Price book not select.", "Invalid Book", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                _IsTerminate = true;
                return _IsTerminate;
            }
            if (string.IsNullOrEmpty(cmbLevel.Text))
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the price level", "Invalid Level", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                _IsTerminate = true;
                cmbLevel.Focus();
                return _IsTerminate;
            }
            if (string.IsNullOrEmpty(cmbStatus.Text))
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the item status", "Invalid Status", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                _IsTerminate = true;
                cmbStatus.Focus();
                return _IsTerminate;
            }
            return _IsTerminate;
        }

        private void SetColumnForPriceDetailNPromotion(bool _isSerializedPriceLevel)
        {
            if (_isSerializedPriceLevel)
            {
                NorPrice_Select.Visible = true;

                NorPrice_Serial.DataPropertyName = "sars_ser_no";
                NorPrice_Serial.Visible = true;
                NorPrice_Item.DataPropertyName = "Sars_itm_cd";
                NorPrice_Item.Visible = true;
                NorPrice_UnitPrice.DataPropertyName = "sars_itm_price";
                NorPrice_UnitPrice.Visible = true;
                NorPrice_Circuler.DataPropertyName = "sars_circular_no";
                NorPrice_PriceType.DataPropertyName = "sars_price_type";
                NorPrice_PriceTypeDescription.DataPropertyName = "sars_price_type_desc";
                NorPrice_ValidTill.DataPropertyName = "sars_val_to";
                NorPrice_ValidTill.Visible = true;
                NorPrice_Pb_Seq.DataPropertyName = "sars_pb_seq";
                NorPrice_PbLineSeq.DataPropertyName = "1";
                NorPrice_PromotionCD.DataPropertyName = "sars_promo_cd";
                NorPrice_IsFixQty.DataPropertyName = "sars_is_fix_qty";
                NorPrice_BkpUPrice.DataPropertyName = "sars_cre_by";
                NorPrice_WarrantyRmk.DataPropertyName = "sars_warr_remarks";
                NorPrice_Book.DataPropertyName = "sars_pbook";
                NorPrice_Level.DataPropertyName = "sars_price_lvl";

                PromPrice_Select.Visible = true;

                PromPrice_Serial.DataPropertyName = "sars_ser_no";
                PromPrice_Serial.Visible = true;
                PromPrice_Item.DataPropertyName = "Sars_itm_cd";
                PromPrice_Item.Visible = true;
                PromPrice_UnitPrice.DataPropertyName = "sars_itm_price";
                PromPrice_UnitPrice.Visible = true;
                PromPrice_Circuler.DataPropertyName = "sars_circular_no";
                PromPrice_PriceType.DataPropertyName = "sars_price_type";
                PromPrice_PriceTypeDescription.DataPropertyName = "sars_price_type_desc";
                PromPrice_ValidTill.DataPropertyName = "sars_val_to";
                PromPrice_ValidTill.Visible = true;
                PromPrice_Pb_Seq.DataPropertyName = "sars_pb_seq";
                //PromPrice_PbLineSeq.DataPropertyName = "1";
                PromPrice_PromotionCD.DataPropertyName = "sars_promo_cd";
                PromPrice_IsFixQty.DataPropertyName = "sars_is_fix_qty";
                PromPrice_BkpUPrice.DataPropertyName = "sars_cre_by";
                PromPrice_WarrantyRmk.DataPropertyName = "sars_warr_remarks";
                PromPrice_Book.DataPropertyName = "sars_pbook";
                PromPrice_Level.DataPropertyName = "sars_price_lvl";
            }
            else
            {
                NorPrice_Select.Visible = false;

                NorPrice_Serial.Visible = false;
                NorPrice_Item.DataPropertyName = "sapd_itm_cd";
                NorPrice_Item.Visible = true;
                NorPrice_UnitPrice.DataPropertyName = "Sapd_itm_price";
                NorPrice_UnitPrice.Visible = true;
                NorPrice_Circuler.DataPropertyName = "Sapd_circular_no";
                NorPrice_Circuler.Visible = true;
                NorPrice_PriceType.DataPropertyName = "Sarpt_cd";
                NorPrice_PriceTypeDescription.DataPropertyName = "SARPT_CD";
                NorPrice_ValidTill.DataPropertyName = "Sapd_to_date";
                NorPrice_ValidTill.Visible = true;
                NorPrice_Pb_Seq.DataPropertyName = "sapd_pb_seq";
                NorPrice_PbLineSeq.DataPropertyName = "sapd_seq_no";
                NorPrice_PromotionCD.DataPropertyName = "sapd_promo_cd";
                NorPrice_IsFixQty.DataPropertyName = "sapd_is_fix_qty";
                NorPrice_BkpUPrice.DataPropertyName = "sapd_cre_by";
                NorPrice_WarrantyRmk.DataPropertyName = "sapd_warr_remarks";
                NorPrice_Book.DataPropertyName = "sapd_pb_tp_cd";
                NorPrice_Level.DataPropertyName = "sapd_pbk_lvl_cd";

                PromPrice_Select.Visible = true;

                PromPrice_Serial.Visible = false;
                PromPrice_Item.DataPropertyName = "sapd_itm_cd";
                PromPrice_Item.Visible = true;
                PromPrice_UnitPrice.DataPropertyName = "Sapd_itm_price";
                PromPrice_UnitPrice.Visible = true;
                PromPrice_Circuler.DataPropertyName = "Sapd_circular_no";
                PromPrice_Circuler.Visible = true;
                PromPrice_PriceType.DataPropertyName = "sapd_price_type"; //"Sarpt_cd";
                PromPrice_PriceTypeDescription.DataPropertyName = "Sarpt_cd";
                PromPrice_ValidTill.DataPropertyName = "Sapd_to_date";
                PromPrice_ValidTill.Visible = true;
                PromPrice_Pb_Seq.DataPropertyName = "sapd_pb_seq";
                PromPrice_PbLineSeq.DataPropertyName = "sapd_seq_no";
                PromPrice_PromotionCD.DataPropertyName = "sapd_promo_cd";
                PromPrice_IsFixQty.DataPropertyName = "sapd_is_fix_qty";
                PromPrice_BkpUPrice.DataPropertyName = "sapd_cre_by";
                PromPrice_WarrantyRmk.DataPropertyName = "sapd_warr_remarks";
                PromPrice_Book.DataPropertyName = "sapd_pb_tp_cd";
                PromPrice_Level.DataPropertyName = "sapd_pbk_lvl_cd";
            }
        }

        private bool CheckTaxAvailability()
        {
            bool _IsTerminate = false;
            //Check for tax setup  - under Darshana confirmation on 02/06/2012
            if (!_isCompleteCode)
            {
                //if (txtDate.Value.Date == _serverDt)
                //{
                //commentead by kapila on 8/9/2015 (new tax structure method no way to get the rate for backdate
                List<MasterItemTax> _tax = new List<MasterItemTax>();
                if (_isStrucBaseTax == true)       //kapila
                {
                    MasterItem _mstItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text);
                    _tax = CHNLSVC.Sales.GetItemTax_strucbase(BaseCls.GlbUserComCode, txtItem.Text.Trim(), cmbStatus.Text.Trim(), "VAT", string.Empty, _mstItem.Mi_anal1);
                }
                else
                    _tax = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, txtItem.Text.Trim(), cmbStatus.Text.Trim(), "VAT", string.Empty);

                if (_tax.Count <= 0 && _priceBookLevelRef.Sapl_vat_calc == true)
                    _IsTerminate = true;
                if (_tax.Count <= 0)
                    _IsTerminate = true;
                //}
                //else
                //{
                //List<MasterItemTax> _taxEff = CHNLSVC.Sales.GetItemTaxEffDt(BaseCls.GlbUserComCode, txtItem.Text.Trim(), cmbStatus.Text.Trim(), "VAT", string.Empty, txtDate.Value.Date);
                //if (_taxEff.Count <= 0)
                //{
                //    List<LogMasterItemTax> _tax = CHNLSVC.Sales.GetItemTaxLog(BaseCls.GlbUserComCode, txtItem.Text.Trim(), cmbStatus.Text.Trim(), "VAT", string.Empty, txtDate.Value.Date);
                //    if (_tax.Count <= 0 && _priceBookLevelRef.Sapl_vat_calc == true)
                //        _IsTerminate = true;
                //    if (_tax.Count <= 0)
                //        _IsTerminate = true;
                //}
                //}
            }
            return _IsTerminate;
        }

        private void CheckItemTax(string _item)
        {
            MainTaxConstant = new List<MasterItemTax>();
            if (_priceBookLevelRef.Sapl_vat_calc == true)
            {
                MainTaxConstant = CHNLSVC.Sales.GetTax(BaseCls.GlbUserComCode, _item, cmbStatus.Text.Trim());
            }
        }

        protected void BindConsumableItem(List<InventoryBatchRefN> _consumerpricelist)
        {
            _consumerpricelist.ForEach(x => x.Inb_unit_cost = x.Inb_unit_price * CheckSubItemTax(x.Inb_itm_cd));
            gvPopConsumPricePick.DataSource = _consumerpricelist;
        }

        private decimal CheckSubItemTax(string _item)
        {
            decimal _fraction = 1;
            List<MasterItemTax> TaxConstant = new List<MasterItemTax>();
            if (_priceBookLevelRef.Sapl_vat_calc == true)
            {
                //updated by akila 2018/02/16
                if (_isStrucBaseTax == true) 
                {
                    _fraction = 1;
                }
                else
                {
                    TaxConstant = CHNLSVC.Sales.GetTax(BaseCls.GlbUserComCode, _item, cmbStatus.Text.Trim());

                    if (TaxConstant != null)
                        if (TaxConstant.Count > 0)
                            _fraction = TaxConstant[0].Mict_tax_rate;
                }

                //if (_isStrucBaseTax == true)       //kapila
                //{
                //    MasterItem _mstItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                //    TaxConstant = CHNLSVC.Sales.GetItemTax_strucbase(BaseCls.GlbUserComCode, _item, cmbStatus.Text.Trim(), null, null, _mstItem.Mi_anal1);
                //}
                //else
                //    TaxConstant = CHNLSVC.Sales.GetTax(BaseCls.GlbUserComCode, _item, cmbStatus.Text.Trim());
                //if (TaxConstant != null)
                //    if (TaxConstant.Count > 0)
                //        _fraction = TaxConstant[0].Mict_tax_rate;
            }
            return _fraction;
        }

        private bool ConsumerItemProduct()
        {
            bool _isAvailable = false;
            bool _isMRP = _itemdetail.Mi_anal3;
            if (_isMRP && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
            {
                List<InventoryBatchRefN> _batchRef = new List<InventoryBatchRefN>();
                if (_priceBookLevelRef.Sapl_chk_st_tp) _batchRef = CHNLSVC.Sales.GetConsumerProductPriceList(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), cmbStatus.Text.Trim()); else _batchRef = CHNLSVC.Sales.GetConsumerProductPriceList(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), string.Empty);
                if (_batchRef.Count > 0)
                    if (_batchRef.Count > 1)
                    {
                        //// pnlMain.Enabled = false;
                        pnlConsumerPrice.Visible = true;
                        BindConsumableItem(_batchRef);
                    }
                    else if (_batchRef.Count == 1)
                    {
                        if (_batchRef[0].Inb_free_qty < Convert.ToDecimal(txtQty.Text.Trim()))
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Invoice qty is " + txtQty.Text + " and inventory available qty having only " + _batchRef[0].Inb_free_qty.ToString(), "No Balance", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                            _isAvailable = true;
                            return _isAvailable;
                        }
                        txtUnitPrice.Text = FormatToCurrency(Convert.ToString(Convert.ToDecimal(_batchRef[0].Inb_unit_price * CheckSubItemTax(_batchRef[0].Inb_itm_cd))));
                        txtUnitPrice.Focus();
                        _isAvailable = false;
                    }
                _isEditPrice = false;
                _isEditDiscount = false;
                if (string.IsNullOrEmpty(txtQty.Text)) txtQty.Text = FormatToQty("0");
                decimal val = Convert.ToDecimal(txtQty.Text);
                txtQty.Text = FormatToQty(Convert.ToString(val));
                CalculateItem();
                _isAvailable = true;
            }
            return _isAvailable;
        }

        protected bool CheckQty(bool _isSearchPromotion)
        {
            if (_isPanelMain == false) return true;
            txtDisRate.Text = FormatToCurrency("0");
            txtDisAmt.Text = FormatToCurrency("0");
            WarrantyPeriod = 0;
            WarrantyRemarks = string.Empty;
            bool _IsTerminate = false;
            ManagerDiscount = new Dictionary<decimal, decimal>();
            SSPriceBookSequance = "0";
            SSPriceBookItemSequance = "0";
            SSPriceBookPrice = 0;
            if (_isCompleteCode == false)
                if (CheckInventoryCombine())
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("This compete code does not having a collection. Please contact inventory", "Inventory Combine", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                    _IsTerminate = true;
                    return _IsTerminate;
                }
            if (CheckQtyPriliminaryRequirements()) return true;

            if (_isCombineAdding == false)
                if (CheckTaxAvailability())
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Tax rates not setup for selected item code and item status.Please contact Inventory Department.", "Item Tax", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                    _IsTerminate = true;
                    return _IsTerminate;
                }

            if (_isCombineAdding == false) CheckItemTax(txtItem.Text.Trim());
            if (_isCombineAdding == false)
                if (CheckProfitCenterAllowForWithoutPrice())
                {
                    _IsTerminate = true;
                    return _IsTerminate;
                }
            if (_isCombineAdding == false)
                if (ConsumerItemProduct())
                {
                    _IsTerminate = true;
                    return _IsTerminate;
                }
            if (_isSearchPromotion) if (CheckItemPromotion()) { _IsTerminate = true; return _IsTerminate; }
            if (_isCombineAdding == false && _priceBookLevelRef.Sapl_is_serialized)
                if (CheckSerializedPriceLevelAndLoadSerials(true))
                {
                    _IsTerminate = true;
                    return _IsTerminate;
                }
            if (IsGiftVoucher(_itemdetail.Mi_itm_tp)) return true;
            if (IsVirtual(_itemdetail.Mi_itm_tp) && _isCompleteCode == false)
            {
                txtUnitPrice.ReadOnly = false;
                txtDisRate.ReadOnly = false;
                txtDisAmt.ReadOnly = false;
                txtUnitAmt.ReadOnly = true;
                txtTaxAmt.ReadOnly = true;
                txtLineTotAmt.ReadOnly = true;
                return true;
            }
            else
            {
                txtUnitPrice.ReadOnly = false;
                txtUnitAmt.ReadOnly = true;
                txtTaxAmt.ReadOnly = true;
                txtLineTotAmt.ReadOnly = true;
                if (_itemdetail.Mi_itm_tp == "V")
                {
                    txtDisRate.ReadOnly = true;
                    txtDisAmt.ReadOnly = true;
                }
                else
                {
                    txtDisRate.ReadOnly = false;
                    txtDisAmt.ReadOnly = false;
                }
            }
            _priceDetailRef = new List<PriceDetailRef>();
            _priceDetailRef = CHNLSVC.Sales.GetPrice_01(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "CS", cmbBook.Text, cmbLevel.Text, txtCustomer.Text, txtItem.Text, Convert.ToDecimal(txtQty.Text), Convert.ToDateTime(txtDate.Text));
            if (_priceDetailRef.Count <= 0)
            {
                if (!_isCompleteCode)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("There is no price for the selected item", "No Price", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    SetDecimalTextBoxForZero(true, false, true);
                    _IsTerminate = true;
                    return _IsTerminate;
                }
                else
                {
                    txtUnitPrice.Text = FormatToCurrency("0");
                }
            }
            else
            {
                if (_isCompleteCode)
                {
                    List<PriceDetailRef> _new = _priceDetailRef;
                    _priceDetailRef = new List<PriceDetailRef>();
                    var _p = _new.Where(x => x.Sapd_price_type == 0 || x.Sapd_price_type == 4).ToList();
                    if (_p != null)
                        if (_p.Count > 0)
                        {
                            if (_p.Count > 1) _p = _p.Where(x => x.Sapd_price_type == 0).ToList();
                            _priceDetailRef.Add(_p[0]);
                        }
                }
                if (_priceDetailRef != null && _priceDetailRef.Count > 0)
                {
                    var _isSuspend = _priceDetailRef.Where(x => x.Sapd_price_stus == "S").Count();
                    if (_isSuspend > 0)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Price has been suspended. Please contact IT dept.", "Suspended Price", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        _IsTerminate = true;
                        _isPanelMain = true;
                        return _IsTerminate;
                    }
                }
                if (_priceDetailRef.Count > 1)
                {
                    SetColumnForPriceDetailNPromotion(false);
                    gvNormalPrice.DataSource = new List<PriceDetailRef>();
                    gvPromotionPrice.DataSource = new List<PriceDetailRef>();
                    gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
                    gvPromotionSerial.DataSource = new List<ReptPickSerials>();
                    BindNonSerializedPrice(_priceDetailRef);
                    pnlPriceNPromotion.Visible = true;
                    _IsTerminate = true;
                    _isPanelMain = false;

                    return _IsTerminate;
                }
                else if (_priceDetailRef.Count == 1)
                {
                    var _one = from _itm in _priceDetailRef
                               select _itm;
                    int _priceType = 0;
                    foreach (var _single in _one)
                    {
                        _priceType = _single.Sapd_price_type;
                        PriceTypeRef _promotion = TakePromotion(_priceType);
                        decimal UnitPrice = FigureRoundUp(TaxCalculation(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, _single.Sapd_itm_price, Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), false), true);
                        txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice));
                        WarrantyRemarks = _single.Sapd_warr_remarks;
                        SetSSPriceDetailVariable(_single.Sapd_circular_no, Convert.ToString(_single.Sapd_seq_no), Convert.ToString(_single.Sapd_pb_seq), Convert.ToString(_single.Sapd_itm_price), _single.Sapd_promo_cd, Convert.ToString(_single.Sapd_price_type));
                        Int32 _pbSq = _single.Sapd_pb_seq;
                        Int32 _pbiSq = _single.Sapd_seq_no;
                        string _mItem = _single.Sapd_itm_cd;
                        //if (_promotion.Sarpt_is_com)
                        //{
                        SetColumnForPriceDetailNPromotion(false);
                        gvNormalPrice.DataSource = new List<PriceDetailRef>();
                        gvPromotionPrice.DataSource = new List<PriceDetailRef>();
                        gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
                        gvPromotionSerial.DataSource = new List<ReptPickSerials>();
                        BindNonSerializedPrice(_priceDetailRef);

                        if (gvPromotionPrice.RowCount > 0)
                        {
                            //gvPromotionPrice_CellDoubleClick(0, false, false);
                            //pnlPriceNPromotion.Visible = true;
                            //pnlMain.Enabled = false;
                            //_IsTerminate = true;
                            //return _IsTerminate;
                        }
                        else
                        {
                            if (_isCombineAdding == false) txtUnitPrice.Focus();
                        }

                        //}
                        //else
                        //{
                        //    if (_isCombineAdding == false) txtUnitPrice.Focus();
                        //}
                    }
                }
            }
            _isEditPrice = false;
            _isEditDiscount = false;
            if (string.IsNullOrEmpty(txtQty.Text)) txtQty.Text = FormatToQty("0");
            decimal vals = Convert.ToDecimal(txtQty.Text);
            txtQty.Text = FormatToQty(Convert.ToString(vals));
            CalculateItem();

            //get price for priority pb
            if (_priorityPriceBook != null && cmbBook.SelectedValue != _priorityPriceBook.Sppb_pb && cmbBook.SelectedValue != _priorityPriceBook.Sppb_pb_lvl)
            {
                decimal normalPrice = Convert.ToDecimal(txtLineTotAmt.Text);

                _priceDetailRef = CHNLSVC.Sales.GetPrice_01(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "CS", _priorityPriceBook.Sppb_pb, _priorityPriceBook.Sppb_pb_lvl, txtCustomer.Text, txtItem.Text, Convert.ToDecimal(txtQty.Text), Convert.ToDateTime(txtDate.Text));
                string _unitPrice = "";
                if (_priceDetailRef.Count <= 0)
                {
                    return false;
                }

                if (_priceDetailRef.Count <= 0)
                {
                    if (!_isCompleteCode)
                    {

                        return false;
                    }
                    else
                    {
                        _unitPrice = FormatToCurrency("0");
                    }
                }
                else
                {
                    if (_isCompleteCode)
                    {
                        List<PriceDetailRef> _new = _priceDetailRef;
                        _priceDetailRef = new List<PriceDetailRef>();
                        var _p = _new.Where(x => x.Sapd_price_type == 0 || x.Sapd_price_type == 4).ToList();
                        if (_p != null)
                            if (_p.Count > 0)
                            {
                                if (_p.Count > 1) _p = _p.Where(x => x.Sapd_price_type == 0).ToList();
                                _priceDetailRef.Add(_p[0]);
                            }
                    }
                    if (_priceDetailRef != null && _priceDetailRef.Count > 0)
                    {
                        var _isSuspend = _priceDetailRef.Where(x => x.Sapd_price_stus == "S").Count();
                        if (_isSuspend > 0)
                        {
                            return false;
                        }
                    }
                    if (_priceDetailRef.Count > 1)
                    {

                        return false;
                    }
                    else if (_priceDetailRef.Count == 1)
                    {
                        var _one = from _itm in _priceDetailRef
                                   select _itm;
                        int _priceType = 0;
                        foreach (var _single in _one)
                        {
                            _priceType = _single.Sapd_price_type;
                            PriceTypeRef _promotion = TakePromotion(_priceType);
                            decimal UnitPrice = FigureRoundUp(TaxCalculation(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, _single.Sapd_itm_price, Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), false), true);
                            _unitPrice = FormatToCurrency(Convert.ToString(UnitPrice));
                            WarrantyRemarks = _single.Sapd_warr_remarks;
                            //SetSSPriceDetailVariable(_single.Sapd_circular_no, Convert.ToString(_single.Sapd_seq_no), Convert.ToString(_single.Sapd_pb_seq), Convert.ToString(_single.Sapd_itm_price), _single.Sapd_promo_cd, Convert.ToString(_single.Sapd_price_type));
                            Int32 _pbSq = _single.Sapd_pb_seq;
                            Int32 _pbiSq = _single.Sapd_seq_no;
                            string _mItem = _single.Sapd_itm_cd;
                            //if (_promotion.Sarpt_is_com)
                            //{
                            SetColumnForPriceDetailNPromotion(false);
                            gvNormalPrice.DataSource = new List<PriceDetailRef>();
                            gvPromotionPrice.DataSource = new List<PriceDetailRef>();
                            gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
                            gvPromotionSerial.DataSource = new List<ReptPickSerials>();
                            BindNonSerializedPrice(_priceDetailRef);

                            if (gvPromotionPrice.RowCount > 0)
                            {

                            }
                            else
                            {
                                if (_isCombineAdding == false) txtUnitPrice.Focus();
                            }


                        }
                    }
                }
                _isEditPrice = false;
                _isEditDiscount = false;
                if (string.IsNullOrEmpty(txtQty.Text)) txtQty.Text = FormatToQty("0");
                decimal vals1 = Convert.ToDecimal(txtQty.Text);
                txtQty.Text = FormatToQty(Convert.ToString(vals1));
                decimal otherPrice = 0;
                if (!string.IsNullOrEmpty(txtQty.Text) && !string.IsNullOrEmpty(_unitPrice))
                {
                    decimal _disRate = 0;
                    decimal _disAmt = 0;
                    if (!string.IsNullOrEmpty(txtDisRate.Text))
                    {
                        _disRate = Convert.ToDecimal(txtDisRate.Text);
                    }
                    if (!string.IsNullOrEmpty(txtDisAmt.Text))
                    {
                        _disAmt = Convert.ToDecimal(txtDisAmt.Text);
                    }

                    otherPrice = CalculateItemTem(Convert.ToDecimal(txtQty.Text), Convert.ToDecimal(_unitPrice), _disAmt, _disRate);
                }
                else
                    return false;
                //decimal otherPrice = Convert.ToDecimal(txtLineTotAmt.Text);
                //if price change display message
                if (otherPrice < normalPrice)
                {
                    DialogResult _result = new DialogResult();
                    using (new CenterWinDialog(this)) { _result = MessageBox.Show(_priorityPriceBook.Sppb_pb + " " + _priorityPriceBook.Sppb_pb_lvl + " Price - " + FormatToCurrency(otherPrice.ToString()) + "\nDo you want to select " + _priorityPriceBook.Sppb_pb + " Price?", "Price", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1); }

                    if (_result == DialogResult.Yes)
                    {
                        txtUnitPrice.Text = FormatToCurrency("0");
                        txtUnitAmt.Text = FormatToCurrency("0");
                        txtDisRate.Text = FormatToCurrency("0");
                        txtDisAmt.Text = FormatToCurrency("0");
                        txtTaxAmt.Text = FormatToCurrency("0");
                        txtLineTotAmt.Text = FormatToCurrency("0");
                        cmbBook.Text = _priorityPriceBook.Sppb_pb;
                        cmbLevel.Text = _priorityPriceBook.Sppb_pb_lvl;
                        CheckQty(false);
                    }
                    else
                    {
                        SSPRomotionType = 0;
                        SSPromotionCode = string.Empty;

                    }
                }
            }

            return _IsTerminate;
        }

        private bool _isNewPromotionProcess = false;
        private List<PriceDetailRef> _PriceDetailRefPromo = null;
        private List<PriceSerialRef> _PriceSerialRefPromo = null;
        private List<PriceSerialRef> _PriceSerialRefNormal = null;

        private bool CheckItemPromotion()
        {
            _isNewPromotionProcess = false;
            if (string.IsNullOrEmpty(txtItem.Text))
            { using (new CenterWinDialog(this)) { MessageBox.Show("Please select the item", "Item", MessageBoxButtons.OK, MessageBoxIcon.Information); } return false; }
            _PriceDetailRefPromo = null;
            _PriceSerialRefPromo = null;
            _PriceSerialRefNormal = null;
            CHNLSVC.Sales.GetPromotion(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtItem.Text.Trim(), txtDate.Value.Date, txtCustomer.Text.Trim(), out _PriceDetailRefPromo, out _PriceSerialRefPromo, out _PriceSerialRefNormal);
            if (_PriceDetailRefPromo == null && _PriceSerialRefPromo == null && _PriceSerialRefNormal == null) return false;
            if (_PriceSerialRefNormal != null && _PriceSerialRefNormal.Count > 0 && !string.IsNullOrEmpty(txtSerialNo.Text))
            {
                var _isSerialAvailable = _PriceSerialRefNormal.Where(x => x.Sars_ser_no == txtSerialNo.Text.Trim()).ToList();
                if (_isSerialAvailable != null && _isSerialAvailable.Count > 0)
                {
                    DialogResult _normalSerialized = new DialogResult();
                    using (new CenterWinDialog(this)) { _normalSerialized = MessageBox.Show("This item is having normal serialized price.\nDo you need to select normal serialized price?", "Normal Serialized Price", MessageBoxButtons.YesNo, MessageBoxIcon.Question); }
                    if (_normalSerialized == System.Windows.Forms.DialogResult.Yes)
                    {
                        _isNewPromotionProcess = true;
                        CheckSerializedPriceLevelAndLoadSerials(true);
                        return true;
                    }
                }
                else
                {
                    _isNewPromotionProcess = false;
                    _PriceSerialRefNormal = null;
                }
            }
            else if (_PriceSerialRefNormal != null && _PriceSerialRefNormal.Count > 0 && string.IsNullOrEmpty(txtSerialNo.Text))
            {
                DialogResult _normalSerialized = new System.Windows.Forms.DialogResult();
                using (new CenterWinDialog(this)) { _normalSerialized = MessageBox.Show("This item having normal serialized price. Do you need to continue with normal serialized price?", "Normal Serialized Price", MessageBoxButtons.YesNo, MessageBoxIcon.Question); }
                if (_normalSerialized == System.Windows.Forms.DialogResult.Yes)
                {
                    _isNewPromotionProcess = true;
                    CheckSerializedPriceLevelAndLoadSerials(true);
                    return true;
                }
                else
                {
                    _isNewPromotionProcess = false;
                    _PriceSerialRefNormal = null;
                }
            }
            if (_PriceSerialRefPromo != null && _PriceSerialRefPromo.Count > 0 && !string.IsNullOrEmpty(txtSerialNo.Text))
            {
                var _isSerialPromoAvailable = _PriceSerialRefPromo.Where(x => x.Sars_ser_no == txtSerialNo.Text.Trim()).ToList();
                if (_isSerialPromoAvailable != null && _isSerialPromoAvailable.Count > 0)
                {
                    DialogResult _promoSerialized = new System.Windows.Forms.DialogResult();
                    using (new CenterWinDialog(this)) { _promoSerialized = MessageBox.Show("This item is having promotional serialized price.\nDo you need to select promotional serialized price?", "Promotional Serialized Price", MessageBoxButtons.YesNo, MessageBoxIcon.Question); }
                    if (_promoSerialized == System.Windows.Forms.DialogResult.Yes)
                    {
                        _isNewPromotionProcess = true;
                        CheckSerializedPriceLevelAndLoadSerials(true);
                        return true;
                    }
                    else
                    {
                        _isNewPromotionProcess = false;
                        _PriceSerialRefPromo = null;
                    }
                }
                else if (_PriceSerialRefPromo != null && _PriceSerialRefPromo.Count > 0 && string.IsNullOrEmpty(txtSerialNo.Text))
                {
                    DialogResult _promoSerialized = new System.Windows.Forms.DialogResult();
                    using (new CenterWinDialog(this)) { _promoSerialized = MessageBox.Show("This item is having promotional serialized price.\nDo you need to select promotional serialized price?", "Promotional Serialized Price", MessageBoxButtons.YesNo, MessageBoxIcon.Question); }
                    if (_promoSerialized == System.Windows.Forms.DialogResult.Yes)
                    {
                        _isNewPromotionProcess = true;
                        CheckSerializedPriceLevelAndLoadSerials(true);
                        return true;
                    }
                    else
                    {
                        _isNewPromotionProcess = false;
                        _PriceSerialRefPromo = null;
                    }
                }
            }
            if (_PriceDetailRefPromo != null && _PriceDetailRefPromo.Count > 0)
            {
                DialogResult _promo = new System.Windows.Forms.DialogResult();
                using (new CenterWinDialog(this)) { _promo = MessageBox.Show("This item is having promotions. Do you need to continue with the available promotions?", "Promotion", MessageBoxButtons.YesNo, MessageBoxIcon.Question); }
                if (_promo == System.Windows.Forms.DialogResult.Yes)
                {
                    SetColumnForPriceDetailNPromotion(false);
                    gvNormalPrice.DataSource = new List<PriceDetailRef>();
                    gvPromotionPrice.DataSource = new List<PriceDetailRef>();
                    gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
                    gvPromotionSerial.DataSource = new List<ReptPickSerials>();
                    BindNonSerializedPrice(_PriceDetailRefPromo);
                    pnlPriceNPromotion.Visible = true;
                    _isPanelMain = false;
                    _isNewPromotionProcess = true;
                    return true;
                }
                else
                {
                    _isNewPromotionProcess = false;
                    return false;
                }
            }
            else return false;
        }

        private bool CheckSerializedPriceLevelAndLoadSerials(bool _isSerialized)
        {
            bool _isAvailable = false;
            if (_isSerialized)
            {
                if (string.IsNullOrEmpty(txtSerialNo.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("You are selected a serialized price level, hence you have not select the serial no. Please select the serial no.", "Serialized Price Level", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    _isAvailable = true;
                    return _isAvailable;
                }
                List<PriceSerialRef> _list = null;
                if (_isNewPromotionProcess == false)
                    _list = CHNLSVC.Sales.GetAllPriceSerialFromSerial(cmbBook.Text, cmbLevel.Text, txtItem.Text, Convert.ToDateTime(txtDate.Text), txtCustomer.Text, BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtSerialNo.Text.Trim());
                else if (_PriceSerialRefNormal != null && _PriceSerialRefNormal.Count > 0)
                    _list = _PriceSerialRefNormal;
                else if (_PriceSerialRefPromo != null && _PriceSerialRefPromo.Count > 0)
                    _list = _PriceSerialRefPromo;
                _tempPriceSerial = new List<PriceSerialRef>();
                _tempPriceSerial = _list;
                if (_list != null)
                {
                    if (_list.Count <= 0)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("There are no serials available for the selected item", "Serialized Price", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                        txtQty.Text = FormatToQty("0");
                        _isAvailable = true;
                        txtQty.Focus();
                        return _isAvailable;
                    }
                    var _oneSerial = _list.Where(x => x.Sars_ser_no == txtSerialNo.Text.Trim()).ToList();
                    _list = _oneSerial;
                    if (_list.Count < Convert.ToDecimal(txtQty.Text))
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Selected qty is exceeds available serials at the price definition!", "Serialized Price", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                        txtQty.Text = FormatToQty("0");
                        // IsNoPriceDefinition = true;
                        _isAvailable = true;
                        txtQty.Focus();
                        return _isAvailable;
                    }
                    if (_list.Count == 1)
                    {
                        string _book = _list[0].Sars_pbook;
                        string _level = _list[0].Sars_price_lvl;
                        cmbBook.Text = _book;
                        cmbLevel.Text = _level;
                        if (!_isSerialized)
                            cmbLevel_Leave(null, null);

                        int _priceType = 0;
                        _priceType = _list[0].Sars_price_type;
                        PriceTypeRef _promotion = TakePromotion(_priceType);
                        decimal UnitPrice = TaxCalculation(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, _list[0].Sars_itm_price, Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), false);

                        txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice));
                        WarrantyRemarks = _list[0].Sars_warr_remarks;
                        SetSSPriceDetailVariable(_list[0].Sars_circular_no, "0", Convert.ToString(_list[0].Sars_pb_seq), Convert.ToString(_list[0].Sars_itm_price), _list[0].Sars_promo_cd, Convert.ToString(_list[0].Sars_price_type));

                        Int32 _pbSq = _list[0].Sars_pb_seq;
                        string _mItem = _list[0].Sars_itm_cd;
                        _isAvailable = true;
                        //if (_promotion.Sarpt_is_com)
                        //{
                        SetColumnForPriceDetailNPromotion(true);
                        BindSerializedPrice(_list);

                        if (gvPromotionPrice.RowCount > 0)
                        {
                            gvPromotionPrice_CellDoubleClick(0, false, _isSerialized);
                            pnlPriceNPromotion.Visible = true;
                            ////   pnlMain.Enabled = false;
                            return _isAvailable;
                        }
                        else
                            if (_isCombineAdding == false) txtUnitPrice.Focus();
                        //}
                        //else
                        //    if (_isCombineAdding == false) txtUnitPrice.Focus();
                        return _isAvailable;
                    }
                    if (_list.Count > 1)
                    {
                        SetColumnForPriceDetailNPromotion(true);
                        BindPriceAndPromotion(_list);
                        DisplayAvailableQty(txtItem.Text, lblPriNProAvailableStatusQty, lblPriNProAvailableQty, cmbStatus.Text);
                        //// pnlMain.Enabled = false;
                        pnlPriceNPromotion.Visible = true;
                        _isAvailable = true;
                        return _isAvailable;
                    }
                }
                else
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("There are no serials available for the selected item", "Serialized Price", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                    txtQty.Text = FormatToQty("0");
                    _isAvailable = true;
                    txtQty.Focus();
                    return _isAvailable;
                }
            }
            return _isAvailable;
        }

        protected void BindSerializedPrice(List<PriceSerialRef> _list)
        {
            _list.ForEach(x => x.Sars_cre_by = Convert.ToString(x.Sars_itm_price));
            _list.ForEach(x => x.Sars_itm_price = CheckSubItemTax(x.Sars_itm_cd) * x.Sars_itm_price);
            var _normal = _list.Where(x => x.Sars_price_type == 0).ToList();
            var _promotion = _list.Where(x => x.Sars_price_type != 0).ToList();
            gvNormalPrice.DataSource = _normal;
            gvPromotionPrice.DataSource = _promotion;
        }

        private void DisplayAvailableQty(string _item, Label _withStatus, Label _withoutStatus, string _status)
        {
            List<InventoryLocation> _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item.Trim(), string.Empty);
            if (_inventoryLocation != null)
                if (_inventoryLocation.Count > 0)
                {
                    var _woStatus = _inventoryLocation.Select(x => x.Inl_free_qty).Sum();
                    var _wStatus = _inventoryLocation.Where(x => x.Inl_itm_stus == _status).Select(x => x.Inl_free_qty).Sum();
                    _withStatus.Text = FormatToQty(Convert.ToString(_wStatus));
                    _withoutStatus.Text = FormatToQty(Convert.ToString(_woStatus));
                }
                else { _withStatus.Text = FormatToQty("0"); _withoutStatus.Text = FormatToQty("0"); }
            else { _withoutStatus.Text = FormatToQty("0"); _withStatus.Text = FormatToQty("0"); }
        }

        protected void BindPriceAndPromotion(List<PriceSerialRef> _list)
        {
            _list.ForEach(x => x.Sars_cre_by = Convert.ToString(x.Sars_itm_price));
            _list.ForEach(x => x.Sars_itm_price = x.Sars_itm_price * CheckSubItemTax(x.Sars_itm_cd));
            var _normal = _list.Where(x => x.Sars_price_type == 0).ToList();
            var _promotion = _list.Where(x => x.Sars_price_type != 0).ToList();

            gvNormalPrice.DataSource = _normal;
            gvPromotionPrice.DataSource = _promotion;
        }

        private bool _isCombineAdding = false;
        private int _combineCounter = 0;
        private string _paymodedef = string.Empty;
        private bool _isCheckedPriceCombine = false;
        private bool _isFirstPriceComItem = false;
        private string _serial2 = string.Empty;
        private string _prefix = string.Empty;

        private decimal CalculateItemTem(decimal _qty, decimal _unitPrice, decimal _disAmount, decimal _disRt)
        {
            string unitAmt = FormatToCurrency(Convert.ToString(FigureRoundUp(Convert.ToDecimal(_unitPrice) * Convert.ToDecimal(_qty), true)));

            decimal _vatPortion = FigureRoundUp(TaxCalculation(txtItem.Text.Trim(), cmbStatus.SelectedValue.ToString().Trim(), Convert.ToDecimal(_qty), _priceBookLevelRef, Convert.ToDecimal(_unitPrice), Convert.ToDecimal(_disAmount), Convert.ToDecimal(_disRt), true), true);
            string tax = FormatToCurrency(Convert.ToString(_vatPortion));

            decimal _totalAmount = Convert.ToDecimal(_qty) * Convert.ToDecimal(_unitPrice);
            decimal _disAmt = 0;

            if (_disRt != 0)
            {
                bool _isVATInvoice = false;
                if (chkTaxPayable.Checked || lblVatExemptStatus.Text == "Available") _isVATInvoice = true;
                else _isVATInvoice = false;

                if (_isVATInvoice)
                    _disAmt = FigureRoundUp(_totalAmount * (Convert.ToDecimal(_disRt) / 100), true);
                else
                {
                    _disAmt = FigureRoundUp((_totalAmount + _vatPortion) * (Convert.ToDecimal(_disRt) / 100), true);
                    if (Convert.ToDecimal(txtDisRate.Text) > 0)
                    {

                        List<MasterItemTax> _tax = new List<MasterItemTax>();
                        if (_isStrucBaseTax == true)       //kapila
                        {
                            MasterItem _mstItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text);
                            _tax = CHNLSVC.Sales.GetItemTax_strucbase(BaseCls.GlbUserComCode, txtItem.Text.Trim(), Convert.ToString(cmbStatus.SelectedValue), string.Empty, string.Empty, _mstItem.Mi_anal1);
                        }
                        else
                            _tax = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, txtItem.Text.Trim(), Convert.ToString(cmbStatus.SelectedValue), string.Empty, string.Empty);
                        if (_tax != null && _tax.Count > 0)
                        {
                            decimal _vatval = ((_totalAmount + _vatPortion - _disAmt) * _tax[0].Mict_tax_rate) / (100 + _tax[0].Mict_tax_rate);
                            tax = Convert.ToString(FigureRoundUp(_vatval, true));
                        }
                    }
                }

                FormatToCurrency(Convert.ToString(_disAmt));
            }

            if (!string.IsNullOrEmpty(tax))
            {
                if (Convert.ToDecimal(txtDisRate.Text) > 0)
                    _totalAmount = FigureRoundUp(_totalAmount + _vatPortion - _disAmt, true);
                else
                    _totalAmount = FigureRoundUp(_totalAmount + Convert.ToDecimal(tax) - _disAmt, true);
            }

            return _totalAmount;
        }

        protected PriceTypeRef TakePromotion(Int32 _priceType)
        {
            List<PriceTypeRef> _type = CHNLSVC.Sales.GetAllPriceType(string.Empty);
            var _ptype = from _types in _type
                         where _types.Sarpt_indi == _priceType
                         select _types;
            PriceTypeRef _list = new PriceTypeRef();
            foreach (PriceTypeRef _ones in _ptype)
            {
                _list = _ones;
            }
            return _list;
        }

        private decimal FigureRoundUp(decimal value, bool _isFinal)
        {
            if (IsSaleFigureRoundUp && _isFinal) return RoundUpForPlace(Math.Round(value), 2);
            //else return RoundUpForPlace(value, 2);
            else return Math.Round(value, 2);
        }

        private decimal TaxCalculation(string _item, string _status, decimal _qty, PriceBookLevelRef _level, decimal _pbUnitPrice, decimal _discount, decimal _disRate, bool _isTaxfaction)
        {
            if (_priceBookLevelRef != null)
                if (_priceBookLevelRef.Sapl_vat_calc)
                {
                    bool _isVATInvoice = false;
                    if (chkTaxPayable.Checked || lblVatExemptStatus.Text == "Available") _isVATInvoice = true;
                    else _isVATInvoice = false;

                    if (txtDate.Value.Date == _serverDt)
                    {
                        List<MasterItemTax> _taxs = new List<MasterItemTax>();
                        if (_isTaxfaction == false)
                        {
                            if (_isStrucBaseTax == true)       //kapila
                            {
                                MasterItem _mstItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                                _taxs = CHNLSVC.Sales.GetItemTax_strucbase(BaseCls.GlbUserComCode, _item, _status, null, null, _mstItem.Mi_anal1);
                            }
                            else
                                _taxs = CHNLSVC.Sales.GetTax(BaseCls.GlbUserComCode, _item, _status);
                        }
                        else
                        {
                            if (_isStrucBaseTax == true)       //kapila
                            {
                                MasterItem _mstItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                                _taxs = CHNLSVC.Sales.GetItemTax_strucbase(BaseCls.GlbUserComCode, _item, _status, string.Empty, "VAT", _mstItem.Mi_anal1);
                            }
                            else
                                _taxs = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, _item, _status, string.Empty, "VAT");
                        }

                        var _Tax = from _itm in _taxs
                                   select _itm;
                        foreach (MasterItemTax _one in _Tax)
                        {
                            if (lblVatExemptStatus.Text != "Available")
                            {
                                if (_isTaxfaction == false)
                                    //_pbUnitPrice = _pbUnitPrice * _one.Mict_tax_rate;     //kapila comented on 30/6/2016
                                    _pbUnitPrice = _pbUnitPrice;
                                else
                                    if (_isVATInvoice)
                                    {
                                        _discount = _pbUnitPrice * _qty * _disRate / 100;
                                        _pbUnitPrice = ((_pbUnitPrice - _discount / _qty) * _one.Mict_tax_rate / 100) * _qty;
                                    }
                                    else
                                        _pbUnitPrice = (_pbUnitPrice * _one.Mict_tax_rate / 100) * _qty;
                            }
                            else
                            {
                                if (_isTaxfaction) _pbUnitPrice = 0;
                            }
                        }
                    }
                    else
                    {
                        List<MasterItemTax> _taxs = new List<MasterItemTax>();
                        if (_isTaxfaction == false) _taxs = CHNLSVC.Sales.GetTaxEffDt(BaseCls.GlbUserComCode, _item, _status, txtDate.Value.Date); else _taxs = CHNLSVC.Sales.GetItemTaxEffDt(BaseCls.GlbUserComCode, _item, _status, string.Empty, "VAT", txtDate.Value.Date);
                        var _Tax = from _itm in _taxs
                                   select _itm;
                        if (_taxs.Count > 0)
                        {
                            foreach (MasterItemTax _one in _Tax)
                            {
                                if (lblVatExemptStatus.Text != "Available")
                                {
                                    if (_isTaxfaction == false)
                                        //_pbUnitPrice = _pbUnitPrice * _one.Mict_tax_rate;   //kapila comented on 30/6/2016
                                        _pbUnitPrice = _pbUnitPrice;
                                    else
                                        if (_isVATInvoice)
                                        {
                                            _discount = _pbUnitPrice * _qty * _disRate / 100;
                                            _pbUnitPrice = ((_pbUnitPrice - _discount / _qty) * _one.Mict_tax_rate / 100) * _qty;
                                        }
                                        else
                                            _pbUnitPrice = (_pbUnitPrice * _one.Mict_tax_rate / 100) * _qty;
                                }
                                else
                                {
                                    if (_isTaxfaction) _pbUnitPrice = 0;
                                }
                            }
                        }
                        else
                        {
                            List<LogMasterItemTax> _taxsEffDt = new List<LogMasterItemTax>();
                            if (_isTaxfaction == false) _taxsEffDt = CHNLSVC.Sales.GetTaxLog(BaseCls.GlbUserComCode, _item, _status, txtDate.Value.Date); else _taxsEffDt = CHNLSVC.Sales.GetItemTaxLog(BaseCls.GlbUserComCode, _item, _status, string.Empty, "VAT", txtDate.Value.Date);
                            var _TaxEffDt = from _itm in _taxsEffDt
                                            select _itm;
                            foreach (LogMasterItemTax _one in _TaxEffDt)
                            {
                                if (lblVatExemptStatus.Text != "Available")
                                {
                                    if (_isTaxfaction == false)
                                        if (BaseCls.GlbUserComCode == "ABL" && BaseCls.GlbDefChannel == "ABT" && (BaseCls.GlbDefSubChannel == "ABS" || BaseCls.GlbDefSubChannel == "SKE" || BaseCls.GlbDefSubChannel == "TFS"))    //kapila 17/2/2017
                                            _pbUnitPrice = _pbUnitPrice;
                                        else
                                            _pbUnitPrice = _pbUnitPrice * _one.Lict_tax_rate;

                                    else
                                        if (_isVATInvoice)
                                        {
                                            _discount = _pbUnitPrice * _qty * _disRate / 100;
                                            _pbUnitPrice = ((_pbUnitPrice - _discount / _qty) * _one.Lict_tax_rate / 100) * _qty;
                                        }
                                        else
                                            _pbUnitPrice = (_pbUnitPrice * _one.Lict_tax_rate / 100) * _qty;
                                }
                                else
                                {
                                    if (_isTaxfaction) _pbUnitPrice = 0;
                                }
                            }
                        }
                    }
                }
                else
                    if (_isTaxfaction) _pbUnitPrice = 0;
            return _pbUnitPrice;
        }

        private void CalculateItem()
        {
            if (!string.IsNullOrEmpty(txtQty.Text) && !string.IsNullOrEmpty(txtUnitPrice.Text))
            {
                txtUnitAmt.Text = FormatToCurrency(Convert.ToString(FigureRoundUp(Convert.ToDecimal(txtUnitPrice.Text.Trim()) * Convert.ToDecimal(txtQty.Text.Trim()), true)));

                decimal _vatPortion = FigureRoundUp(TaxCalculation(txtItem.Text.Trim(), cmbStatus.SelectedValue.ToString().Trim(), Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, Convert.ToDecimal(txtUnitPrice.Text.Trim()), Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), true), true);
                txtTaxAmt.Text = FormatToCurrency(Convert.ToString(_vatPortion));

                decimal _totalAmount = Convert.ToDecimal(txtQty.Text) * Convert.ToDecimal(txtUnitPrice.Text);
                decimal _disAmt = 0;

                if (!string.IsNullOrEmpty(txtDisRate.Text))
                {
                    bool _isVATInvoice = false;
                    if (chkTaxPayable.Checked || lblVatExemptStatus.Text == "Available") _isVATInvoice = true;
                    else _isVATInvoice = false;

                    if (_isVATInvoice)
                        _disAmt = FigureRoundUp(_totalAmount * (Convert.ToDecimal(txtDisRate.Text) / 100), true);
                    else
                    {
                        _disAmt = FigureRoundUp((_totalAmount + _vatPortion) * (Convert.ToDecimal(txtDisRate.Text) / 100), true);
                        if (Convert.ToDecimal(txtDisRate.Text) > 0)
                        {
                            List<MasterItemTax> _tax = new List<MasterItemTax>();
                            if (_isStrucBaseTax == true)    //kapila
                            {
                                MasterItem _mstItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text);
                                _tax = CHNLSVC.Sales.GetItemTax_strucbase(BaseCls.GlbUserComCode, txtItem.Text.Trim(), Convert.ToString(cmbStatus.SelectedValue), string.Empty, string.Empty, _mstItem.Mi_anal1);
                            }
                            else
                                _tax = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, txtItem.Text.Trim(), Convert.ToString(cmbStatus.SelectedValue), string.Empty, string.Empty);
                            if (_tax != null && _tax.Count > 0)
                            {
                                decimal _vatval = ((_totalAmount + _vatPortion - _disAmt) * _tax[0].Mict_tax_rate) / (100 + _tax[0].Mict_tax_rate);
                                txtTaxAmt.Text = Convert.ToString(FigureRoundUp(_vatval, true));
                            }
                        }
                    }

                    txtDisAmt.Text = FormatToCurrency(Convert.ToString(_disAmt));
                }

                if (!string.IsNullOrEmpty(txtTaxAmt.Text))
                {
                    if (Convert.ToDecimal(txtDisRate.Text) > 0)
                        _totalAmount = FigureRoundUp(_totalAmount + _vatPortion - _disAmt, true);
                    else
                        _totalAmount = FigureRoundUp(_totalAmount + Convert.ToDecimal(txtTaxAmt.Text) - _disAmt, true);
                }

                txtLineTotAmt.Text = FormatToCurrency(Convert.ToString(_totalAmount));
            }
        }

        private bool IsGiftVoucher(string _type)
        {
            if (_type == "G")
                return true;
            else
                return false;
        }

        private bool IsVirtual(string _type)
        { if (_type == "V") { _IsVirtualItem = true; return true; } else { _IsVirtualItem = false; return false; } }

        private bool LoadItemDetail(string _item)
        {
            lblItemDescription.Text = "Description : " + string.Empty;
            lblItemModel.Text = "Model : " + string.Empty;
            lblItemBrand.Text = "Brand : " + string.Empty;
            lblItemSerialStatus.Text = "Serial Status : " + string.Empty;
            _itemdetail = new MasterItem();

            bool _isValid = false;


            if (!string.IsNullOrEmpty(_item)) _itemdetail = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
            if (_itemdetail != null && !string.IsNullOrEmpty(_itemdetail.Mi_cd))
            {
                _isValid = true;
                string _description = _itemdetail.Mi_longdesc;
                string _model = _itemdetail.Mi_model;
                string _brand = _itemdetail.Mi_brand;
                string _serialstatus = _itemdetail.Mi_is_ser1 == 1 ? "Available" : "Non";

                lblItemDescription.Text = "Description : " + _description;
                lblItemModel.Text = "Model : " + _model;
                lblItemBrand.Text = "Brand : " + _brand;
                lblItemSerialStatus.Text = "Serial Status : " + _serialstatus;
            }
            else _isValid = false;
            return _isValid;
        }

        private Point muPricePoint = new Point();
        private void pnlPriceNPromotion_MouseDown(object sender, MouseEventArgs e)
        {
            muPricePoint.X = e.X;
            muPricePoint.Y = e.Y;
        }

        private void pnlPriceNPromotion_MouseUp(object sender, MouseEventArgs e)
        {
            pnlPriceNPromotion.Location = new Point(e.X - muPricePoint.X + pnlPriceNPromotion.Location.X, e.Y - muPricePoint.Y + pnlPriceNPromotion.Location.Y);
        }

        protected void BindNonSerializedPrice(List<PriceDetailRef> _list)
        {
            _list.ForEach(x => x.Sapd_cre_by = Convert.ToString(x.Sapd_itm_price));
            //  _list.ForEach(x => x.Sapd_itm_price = CheckSubItemTax(x.Sapd_itm_cd) * x.Sapd_itm_price);
            _list.ForEach(x => x.Sapd_itm_price = 1 * x.Sapd_itm_price);

            var _normal = _list.Where(x => x.Sapd_price_type == 0).ToList();
            var _promotion = _list.Where(x => x.Sapd_price_type != 0).ToList();

            gvNormalPrice.DataSource = _normal;
            gvPromotionPrice.DataSource = _promotion;
        }

        private void gvPromotionPrice_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            {
                try
                {
                    this.Cursor = Cursors.WaitCursor;
                    if (gvPromotionPrice.RowCount > 0)
                    {
                        Int32 _row = e.RowIndex;
                        if (_row != -1)
                        {
                            string _book = gvPromotionPrice.Rows[_row].Cells["PromPrice_Book"].Value.ToString();
                            string _level = gvPromotionPrice.Rows[_row].Cells["PromPrice_Level"].Value.ToString();
                            cmbBook.Text = _book;
                            cmbBook_Leave(null, null);
                            cmbLevel.Text = _level;
                            cmbLevel_Leave(null, null);
                            gvPromotionPrice_CellDoubleClick(_row, false, _priceBookLevelRef.Sapl_is_serialized);
                        }
                    }
                }
                catch (Exception ex)
                { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
                finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
            }


        }

        private void gvPromotionPrice_DoubleClick(object sender, EventArgs e)
        {

        }

        private bool LoadPriceLevel(string _invoiceType, string _book)
        {
            bool _isAvailable = false;
            if (_PriceDefinitionRef != null)
                if (_PriceDefinitionRef.Count > 0)
                {
                    _isAvailable = true;
                    var _levels = _PriceDefinitionRef.Where(x => x.Sadd_doc_tp == "CS" && x.Sadd_pb == _book).Select(y => y.Sadd_p_lvl).Distinct().ToList();
                    _levels.Add("");
                    cmbLevel.DataSource = _levels;
                    cmbLevel.SelectedIndex = cmbLevel.Items.Count - 1;
                    if (!string.IsNullOrEmpty(DefaultLevel) && !string.IsNullOrEmpty(cmbBook.Text)) cmbLevel.Text = DefaultLevel;
                    _priceBookLevelRefList = CHNLSVC.Sales.GetPriceLevelList(BaseCls.GlbUserComCode, _book.Trim(), cmbLevel.Text.Trim());
                    LoadPriceLevelMessage();
                }
                else
                    cmbLevel.DataSource = null;
            else cmbLevel.DataSource = null;

            return _isAvailable;
        }

        private void ClearPriceTextBox()
        {
            txtUnitPrice.Text = FormatToCurrency("0");
            txtUnitAmt.Text = FormatToCurrency("0");
            txtDisRate.Text = FormatToCurrency("0");
            txtDisAmt.Text = FormatToCurrency("0");
            txtTaxAmt.Text = FormatToCurrency("0");
            txtLineTotAmt.Text = FormatToCurrency("0");
        }

        private void cmbBook_Leave(object sender, EventArgs e)
        {
            if (chkPickGV.Checked) return;
            try
            {
                this.Cursor = Cursors.WaitCursor;
                LoadPriceLevel("CS", cmbBook.Text);
                LoadLevelStatus("CS", cmbBook.Text.Trim(), cmbLevel.Text.Trim());
                CheckPriceLevelStatusForDoAllow(cmbLevel.Text.Trim(), cmbBook.Text.Trim());
                ClearPriceTextBox();
            }
            catch (Exception ex)
            { ClearPriceTextBox(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void gvPromotionPrice_CellDoubleClick(Int32 _row, bool _isValidate, bool _IsSerializedPriceLevel)
        {
            if (_IsSerializedPriceLevel)
            {
                DataGridViewCheckBoxCell _chk = gvPromotionPrice.Rows[_row].Cells["PromPrice_Select"] as DataGridViewCheckBoxCell;
                bool _isSelected = false;
                if (Convert.ToBoolean(_chk.Value)) _isSelected = true;
                UncheckNormalPriceOrPromotionPrice(true, false);
                string _mainItem = gvPromotionPrice.Rows[_row].Cells["PromPrice_Item"].Value.ToString();
                string _mainSerial = gvPromotionPrice.Rows[_row].Cells["PromPrice_Serial"].Value.ToString();
                string _pbseq = gvPromotionPrice.Rows[_row].Cells["PromPrice_Pb_Seq"].Value.ToString();
                string _priceType = gvPromotionPrice.Rows[_row].Cells["PromPrice_PriceType"].Value.ToString();
                BindPriceCombineItem(Convert.ToInt32(_pbseq), 1, Convert.ToInt32(_priceType), _mainItem, _mainSerial);
                if (_isValidate)
                {
                    if (_isSelected) _chk.Value = false; else _chk.Value = true;
                    decimal _count = (from DataGridViewRow row in gvNormalPrice.Rows
                                      where Convert.ToBoolean(((DataGridViewCheckBoxCell)row.Cells[0]).Value) == true
                                      select row).Count();
                    if (_count > Convert.ToDecimal(txtQty.Text.Trim()))
                    {
                        _chk.Value = false; this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials are mismatch.", "Serial and Qty", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                        return;
                    }
                }
                if (_isSelected) _chk.Value = false; else _chk.Value = true;
            }
            else
            {
                DataGridViewCheckBoxCell chk = gvPromotionPrice.Rows[_row].Cells["PromPrice_Select"] as DataGridViewCheckBoxCell;
                bool _isSelected = false;
                if (Convert.ToBoolean(chk.Value)) _isSelected = true;
                UncheckNormalPriceOrPromotionPrice(false, true);
                BindingSource _source = new BindingSource();
                _source.DataSource = new List<PriceCombinedItemRef>();
                gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
                if (_isSelected) chk.Value = false;
                else
                {
                    string _mainItem = gvPromotionPrice.Rows[_row].Cells["PromPrice_Item"].Value.ToString();
                    string _pbseq = gvPromotionPrice.Rows[_row].Cells["PromPrice_Pb_Seq"].Value.ToString();
                    string _priceType = gvPromotionPrice.Rows[_row].Cells["PromPrice_PriceType"].Value.ToString();
                    string _pblineseq = gvPromotionPrice.Rows[_row].Cells["PromPrice_PbLineSeq"].Value.ToString();
                    BindPriceCombineItem(Convert.ToInt32(_pbseq), Convert.ToInt32(_pblineseq), Convert.ToInt32(_priceType), _mainItem, string.Empty);
                    chk.Value = true;
                }
            }
        }

        private void UncheckNormalPriceOrPromotionPrice(bool _isNormal, bool _isPromotion)
        {
            if (_isNormal)
                if (gvNormalPrice.RowCount > 0)
                {
                    foreach (DataGridViewRow _r in gvNormalPrice.Rows)
                    {
                        DataGridViewCheckBoxCell _chk = (DataGridViewCheckBoxCell)_r.Cells[0];
                        if (Convert.ToBoolean(_chk.Value) == true)
                        {
                            _chk.Value = false;
                        }
                    }
                }

            if (_isPromotion)
                if (gvPromotionPrice.RowCount > 0)
                    foreach (DataGridViewRow row in gvPromotionPrice.Rows)
                    {
                        DataGridViewCheckBoxCell chk = row.Cells[0] as DataGridViewCheckBoxCell;
                        if (Convert.ToBoolean(chk.Value) == true)
                        {
                            chk.Value = false;
                        }
                    }
        }

        private void HangGridComboBoxStatus()
        {
            if (_levelStatus == null || _levelStatus.Rows.Count <= 0) return;
            var _types = _levelStatus.AsEnumerable().Select(x => x.Field<string>("Code")).Distinct().ToList();
            _types.Add("");
            PromItm_Status.DataSource = _types;
            foreach (DataGridViewRow r in gvPromotionItem.Rows)
                r.Cells["PromItm_Status"].Value = cmbStatus.Text;
        }

        private void BindPriceCombineItem(Int32 _pbseq, Int32 _pblineseq, Int32 _priceType, string _mainItem, string _mainSerial)
        {
            _tempPriceCombinItem = new List<PriceCombinedItemRef>();
            gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
            //PriceTypeRef _list = TakePromotion(_priceType);
            //if (_list.Sarpt_is_com)
            if (_priceBookLevelRef.Sapl_is_serialized)
            {
                _tempPriceCombinItem = CHNLSVC.Sales.GetPriceCombinedItem(_pbseq, _mainItem, _mainSerial);
                PromItm_Serial.Visible = true;
            }
            else
            {
                _tempPriceCombinItem = CHNLSVC.Sales.GetPriceCombinedItemLine(_pbseq, _pblineseq, _mainItem, string.Empty);
                PromItm_Serial.Visible = false;
            }
            if (_tempPriceCombinItem != null && _tempPriceCombinItem.Count > 0)
            {
                _tempPriceCombinItem.ForEach(x => x.Mi_cre_by = Convert.ToString(x.Mi_std_price));
                _tempPriceCombinItem.Where(x => x.Sapc_increse).ToList().ForEach(x => x.Sapc_qty = x.Sapc_qty * Convert.ToDecimal(txtQty.Text.Trim()));
                _tempPriceCombinItem.ForEach(x => x.Sapc_price = x.Sapc_price * CheckSubItemTax(x.Sapc_itm_cd));
                _tempPriceCombinItem.Where(x => !string.IsNullOrEmpty(x.Sapc_sub_ser)).ToList().ForEach(x => x.Sapc_increse = true);
                gvPromotionItem.DataSource = _tempPriceCombinItem;
                HangGridComboBoxStatus();
            }
        }

        private void cmbLevel_Leave(object sender, EventArgs e)
        {
            if (chkPickGV.Checked) return;
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _priceBookLevelRefList = CHNLSVC.Sales.GetPriceLevelList(BaseCls.GlbUserComCode, cmbBook.Text.Trim(), cmbLevel.Text.Trim());
                LoadLevelStatus("CS", cmbBook.Text.Trim(), cmbLevel.Text.Trim());
                CheckPriceLevelStatusForDoAllow(cmbLevel.Text.Trim(), cmbBook.Text.Trim());
                SetColumnForPriceDetailNPromotion(_priceBookLevelRef.Sapl_is_serialized);
                if (_priceBookLevelRef.Sapl_is_serialized && string.IsNullOrEmpty(txtSerialNo.Text.Trim()))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("You are going to select a serialized price level without serial\n.Please select the serial", "Serialized Price", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    txtSerialNo.Clear();
                    return;
                }
                CheckQty(false);
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private DataTable _levelStatus = null;
        private bool LoadLevelStatus(string _invType, string _book, string _level)
        {
            _levelStatus = null;
            bool _isAvailable = false;
            string _initPara = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.PriceLevelItemStatus);
            _levelStatus = CHNLSVC.CommonSearch.GetPriceLevelItemStatusData(_initPara, null, null);
            if (_levelStatus != null)
                if (_levelStatus.Rows.Count > 0)
                {
                    _isAvailable = true;
                    var _types = _levelStatus.AsEnumerable().Select(x => x.Field<string>("Code")).Distinct().ToList();
                    _types.Add("");
                    cmbStatus.DataSource = _types;
                    cmbStatus.SelectedIndex = cmbStatus.Items.Count - 1;
                    if (!string.IsNullOrEmpty(DefaultInvoiceType)) cmbStatus.Text = DefaultStatus;
                    //Load Level definition
                    _priceBookLevelRef = CHNLSVC.Sales.GetPriceLevel(BaseCls.GlbUserComCode, cmbBook.Text, cmbLevel.Text);
                    LoadPriceLevelMessage();
                }
                else
                    cmbStatus.DataSource = null;
            else
                cmbStatus.DataSource = null;
            return _isAvailable;
        }

        private void LoadPriceLevelMessage()
        {
            DataTable _msg = CHNLSVC.Sales.GetPriceLevelMessage(BaseCls.GlbUserComCode, cmbBook.Text, cmbLevel.Text);
            if (_msg != null && _msg.Rows.Count > 0) lblLvlMsg.Text = _msg.Rows[0].Field<string>("Sapl_spmsg");
            else lblLvlMsg.Text = string.Empty;
        }

        private void CheckPriceLevelStatusForDoAllow(string _level, string _book)
        {
            if (!string.IsNullOrEmpty(_level.Trim()) && !string.IsNullOrEmpty(_book.Trim()))
            {
                List<PriceBookLevelRef> _lvl = _priceBookLevelRefList;
                if (_lvl != null)
                    if (_lvl.Count > 0)
                    {
                        var _bool = (from _l in _lvl where _l.Sapl_chk_st_tp == true select _l.Sapl_chk_st_tp).ToList();
                        if (_bool != null && _bool.Count() > 0) IsPriceLevelAllowDoAnyStatus = false; else IsPriceLevelAllowDoAnyStatus = true;
                    }
            }
            else
                IsPriceLevelAllowDoAnyStatus = true;
        }

        private void gvPromotionPrice_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvPromotionPrice.RowCount > 0)
                {
                    Int32 _row = e.RowIndex;
                    if (_row != -1)
                        gvPromotionPrice_CellDoubleClick(_row, true, _priceBookLevelRef.Sapl_is_serialized);
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnBarcode_Click(object sender, EventArgs e)
        {
            if (btnBarcode.Text == "OFF")
            {
                btnBarcode.Text = "ON";
                btnBarcode.BackColor = Color.LimeGreen;
                txtItem.Focus();
            }
            else
            {
                //btnBarcode.Text = "OFF";
                //btnBarcode.BackColor = Color.Bisque;
            }
        }

        private void txtItem_Leave(object sender, EventArgs e)
        {
            btnBarcode.Text = "OFF";
            btnBarcode.BackColor = Color.Bisque;
        }

        private void txtItem_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter | e.KeyCode.Equals(Keys.Tab))
            {
                if (string.IsNullOrEmpty(txtItem.Text.Trim())) return;
                if (_isItemChecking) { _isItemChecking = false; return; }
                _isItemChecking = true;
                try
                {
                    this.Cursor = Cursors.WaitCursor;
                    string _item = "";
                    //kapila 14/11/2013
                    if (txtItem.Text.Length == 16)
                        _item = txtItem.Text.Substring(1, 7);
                    else if (txtItem.Text.Length == 15)
                        _item = txtItem.Text.Substring(0, 7);
                    //else if (txtItem.Text.Length == 8) -- commented by akila
                    //    _item = txtItem.Text.Substring(1, 7);
                    else if (txtSrchItem.Text.Length == 20)
                        _item = txtSrchItem.Text.Substring(0, 12);
                    else
                        _item = txtItem.Text;

                    txtItem.Text = _item;

                    if (!LoadItemDetail(txtItem.Text.Trim()))
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please check the item code", "Invalid Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtItem.Clear();
                        txtItem.Focus();
                        if (IsPriceLevelAllowDoAnyStatus == false && chkDeliverLater.Checked == false) cmbStatus.Text = DefaultStatus;
                        return;
                    }

                    if (_itemdetail.Mi_is_ser1 == 1 && IsGiftVoucher(_itemdetail.Mi_itm_tp))
                    {
                        if (string.IsNullOrEmpty(txtSerialNo.Text))
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this))
                            {
                                MessageBox.Show("Please select the gift voucher number", "Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            } txtItem.Clear();
                            txtSerialNo.Clear();
                        }

                        return;
                    }
                    IsVirtual(_itemdetail.Mi_itm_tp);

                    txtSrchItem.Text = txtItem.Text;

                    if ((_itemdetail.Mi_is_ser1 == 1 && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false && string.IsNullOrEmpty(txtSerialNo.Text.Trim()) && _priceBookLevelRef.Sapl_is_serialized == false))
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this))
                        {
                            ////MessageBox.Show("You have to select the serial no for the serialized item", "Invalid Item", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            pnlItem.Show();
                            txtSerialNo.Focus();
                        }
                        return;
                    }
                    if ((_itemdetail.Mi_is_ser1 == 1 && chkDeliverLater.Checked == true && chkDeliverNow.Checked == false && string.IsNullOrEmpty(txtSerialNo.Text.Trim()) && _priceBookLevelRef.Sapl_is_serialized == false) && _isRegistrationMandatory)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Registration mandatory items can not save without serial", "Invalid Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        return;
                    }

                    //if (IsPriceLevelAllowDoAnyStatus == false && chkDeliverLater.Checked == false) cmbStatus.Text = "";

                    //if (string.IsNullOrEmpty(txtSerialNo.Text.Trim()) && _priceBookLevelRef.Sapl_is_serialized == false) txtQty.Text = FormatToQty("0"); else
                    if (txtSerialNo.Text != "")
                    {
                        txtQty.Text = FormatToQty("1");
                    }
                    if (_IsVirtualItem)
                    {
                        bool block = CheckBlockItem(txtItem.Text.Trim(), 0, false);
                        if (block)
                        {
                            MessageBox.Show("You have selected a virtual item !", "Invalid Item", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                            txtSrchItem.Text = "";
                            txtItem.Text = "";
                            return;
                        }
                    }
                    bool _isItmOk = CheckQty(true);

                    if (_isItmOk == false)
                        if (btnMulti.Text == "ON")
                        {
                            pnlItem.Show();
                            txtQty.Select();
                        }
                        else
                        {
                            addItem();
                        }


                }
                catch (Exception ex)
                { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
                finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); _isItemChecking = false; }



            }


        }

        private void btnSearch_Customer_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _commonSearch = new CommonSearch.CommonSearch();
                _commonSearch.ReturnIndex = 0;
                _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.Customer);
                DataTable _result = CHNLSVC.CommonSearch.GetCustomerGenaral(_commonSearch.SearchParams, null, null, CommonUIDefiniton.SearchUserControlCustomerType.MBE_CD.ToString(), CommonUIDefiniton.ReturnCustomerSearchDisplay(CommonUIDefiniton.SearchUserControlCustomerType.MBE_CD));
                _commonSearch.dvResult.DataSource = _result;
                _commonSearch.BindUCtrlDDLData(_result);
                _commonSearch.obj_TragetTextBox = txtCustomer;
                _commonSearch.IsSearchEnter = true; //Add by Chamal 10/Aug/2013
                this.Cursor = Cursors.Default;
                _commonSearch.ShowDialog();
                txtCustomer.Select();
                LoadCustomerDetailsByCustomer(null, null);
            }
            catch (Exception ex) { txtCustomer.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void CalculateGrandTotal(decimal _qty, decimal _uprice, decimal _discount, decimal _tax, bool _isAddition)
        {
            if (_isAddition)//++
            {
                GrndSubTotal = GrndSubTotal + Convert.ToDecimal(_qty) * Convert.ToDecimal(_uprice);
                GrndDiscount = GrndDiscount + Convert.ToDecimal(_discount);
                GrndTax = GrndTax + Convert.ToDecimal(_tax);

                lblGrndSubTotal.Text = FormatToCurrency(Convert.ToString(GrndSubTotal));
                lblGrndDiscount.Text = FormatToCurrency(Convert.ToString(GrndDiscount));
                lblGrndTax.Text = FormatToCurrency(Convert.ToString(GrndTax));
            }
            else//--
            {
                GrndSubTotal = GrndSubTotal - Convert.ToDecimal(_qty) * Convert.ToDecimal(_uprice);
                GrndDiscount = GrndDiscount - Convert.ToDecimal(_discount);
                GrndTax = GrndTax - Convert.ToDecimal(_tax);

                lblGrndSubTotal.Text = FormatToCurrency(Convert.ToString(GrndSubTotal));
                lblGrndDiscount.Text = FormatToCurrency(Convert.ToString(GrndDiscount));
                lblGrndTax.Text = FormatToCurrency(Convert.ToString(GrndTax));
            }

            lblGrndAfterDiscount.Text = FormatToCurrency(Convert.ToString(GrndSubTotal - GrndDiscount));
            //lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString(FigureRoundUp(GrndSubTotal - GrndDiscount + GrndTax, true,false)));
            if (_invoiceItemList != null || _invoiceItemList.Count > 0) lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString(_invoiceItemList.Sum(x => x.Sad_tot_amt))); else lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString("0"));

        }

        private List<ReptPickSerials> VirtualSerialLine(string _item, string _status, decimal _qty, string _serialno)
        {
            List<ReptPickSerials> _ser = new List<ReptPickSerials>();
            if (!string.IsNullOrEmpty(_serialno))
            {
                ReptPickSerials _one = new ReptPickSerials();
                _one.Tus_com = BaseCls.GlbUserComCode;
                _one.Tus_itm_cd = _item;
                _one.Tus_itm_stus = _status;
                _one.Tus_loc = BaseCls.GlbUserDefLoca;
                _one.Tus_qty = Convert.ToDecimal(_qty);
                _one.Tus_ser_1 = _serialno;
                _one.Tus_ser_2 = "N/A";
                _one.Tus_ser_3 = "N/A";
                _one.Tus_ser_4 = "N/A";
                _one.Tus_ser_id = VirtualCounter + 1;
                _one.Tus_ser_line = 1;
                _ser.Add(_one);
            }
            else
            {
                for (int i = 0; i < Convert.ToInt32(_qty); i++)
                {
                    ReptPickSerials _one = new ReptPickSerials();
                    _one.Tus_com = BaseCls.GlbUserComCode;
                    _one.Tus_itm_cd = _item;
                    _one.Tus_itm_stus = _status;
                    _one.Tus_loc = BaseCls.GlbUserDefLoca;
                    _one.Tus_qty = 1;
                    _one.Tus_ser_1 = "N/A";
                    _one.Tus_ser_2 = "N/A";
                    _one.Tus_ser_3 = "N/A";
                    _one.Tus_ser_4 = "N/A";
                    _one.Tus_ser_id = VirtualCounter + 1;
                    _one.Tus_ser_line = 1;
                    _ser.Add(_one);
                }
            }
            return _ser;
        }

        private void CheckNValidateAgeItem(string _itemc, string _itemcategory, string _bookc, string _levelc, string _status, out bool IsAgePriceLevel, out int AgeDays)
        {
            bool _isAgePriceLevel = false;
            int _ageingDays = -1;
            MasterItem _item = null;
            if (string.IsNullOrEmpty(_itemcategory))
            { _item = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _itemc); if (_item != null) _itemcategory = _item.Mi_cate_1; }
            List<PriceBookLevelRef> _level = _priceBookLevelRefList;
            if (_level != null)
                if (_level.Count > 0)
                {
                    var _lvl = _level.Where(x => x.Sapl_isage && x.Sapl_itm_stuts == _status).ToList();
                    if (_lvl != null) if (_lvl.Count() > 0)
                            _isAgePriceLevel = true;
                }
            if (_isAgePriceLevel)
            {
                DataTable _categoryDet = CHNLSVC.General.GetMainCategoryDetail(_itemcategory);
                if (_categoryDet != null && _categoryDet.Rows.Count > 0)
                {
                    if (_categoryDet.Rows[0]["ric1_age"] != DBNull.Value)
                        _ageingDays = Convert.ToInt32(_categoryDet.Rows[0].Field<Int16>("ric1_age"));
                    else _ageingDays = 0;
                }
            }

            IsAgePriceLevel = _isAgePriceLevel;
            AgeDays = _ageingDays;
        }

        private bool CheckItemWarranty(string _item, string _status)
        {
            bool _isNoWarranty = false;
            List<PriceBookLevelRef> _lvl = _priceBookLevelRefList;
            if (_lvl != null)
                if (_lvl.Count > 0)
                {
                    var _lst = (from _l in _lvl where _l.Sapl_itm_stuts == _status.Trim() select _l).ToList();
                    if (_lst != null)
                        if (_lst.Count > 0)
                        {
                            DataTable _temWarr = CHNLSVC.Sales.GetPCWara(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _item.Trim(), _status.Trim(), Convert.ToDateTime(txtDate.Text).Date);

                            if (_lst[0].Sapl_set_warr == true)
                            {
                                WarrantyPeriod = _lst[0].Sapl_warr_period;

                            }
                            else if (_temWarr != null && _temWarr.Rows.Count > 0)
                            {
                                WarrantyPeriod = Convert.ToInt32(_temWarr.Rows[0]["SPW_WARA_PD"].ToString());
                                WarrantyRemarks = _temWarr.Rows[0]["SPW_WARA_RMK"].ToString();
                            }
                            else
                            {
                                MasterItemWarrantyPeriod _period = CHNLSVC.Inventory.GetItemWarrantyDetail(_item.Trim(), _status.Trim()); if (_period != null) { WarrantyPeriod = _period.Mwp_val; WarrantyRemarks = _period.Mwp_rmk; }
                                else { _isNoWarranty = true; }
                            }
                        }
                }
            return _isNoWarranty;
        }

        private bool BindItemComponent(string _item)
        {
            _masterItemComponent = CHNLSVC.Inventory.GetItemComponents(_item);
            if (_masterItemComponent != null)
            {
                if (_masterItemComponent.Count > 0)
                {
                    _masterItemComponent.ForEach(X => X.Micp_must_scan = false);
                    if (_masterItemComponent != null)
                    {
                        if (_masterItemComponent.Count > 0)
                            return true;
                        else
                            return false;
                    }
                    else
                        return false;
                }
                else return false;
            }
            else return false;
        }

        private InvoiceItem AssignDataToObject(bool _isPromotion, MasterItem _item, string _originalItem)
        {
            InvoiceItem _tempItem = new InvoiceItem();
            IsVirtual(_item.Mi_itm_tp);
            _tempItem.Sad_alt_itm_cd = "";
            _tempItem.Sad_alt_itm_desc = "";
            _tempItem.Sad_comm_amt = 0;
            _tempItem.Sad_disc_amt = Convert.ToDecimal(txtDisAmt.Text);
            _tempItem.Sad_disc_rt = Convert.ToDecimal(txtDisRate.Text);
            //kapila
            if (_item.Mi_is_ser1 == -1)
                _tempItem.Sad_do_qty = Convert.ToDecimal(txtQty.Text);
            else
                _tempItem.Sad_do_qty = (IsGiftVoucher(_item.Mi_itm_tp) || _IsVirtualItem) ? Convert.ToDecimal(txtQty.Text) : 0;


            _tempItem.Sad_inv_no = "";
            _tempItem.Sad_is_promo = _isPromotion;
            _tempItem.Sad_itm_cd = txtItem.Text;
            _tempItem.Sad_itm_line = _lineNo;
            _tempItem.Sad_itm_seq = Convert.ToInt32(SSPriceBookItemSequance);
            _tempItem.Sad_itm_stus = cmbStatus.Text;
            _tempItem.Sad_itm_tax_amt = Convert.ToDecimal(txtTaxAmt.Text);
            _tempItem.Sad_itm_tp = _item.Mi_itm_tp;
            _tempItem.Sad_job_no = "";
            _tempItem.Sad_res_line_no = 0;
            _tempItem.Sad_res_no = "";
            if (_proVouInvcItem == txtItem.Text.ToString())
            {
                if (string.IsNullOrEmpty(lblPromoVouUsedFlag.Text))
                {
                    lblPromoVouUsedFlag.Text = "U";
                    _proVouInvcLine = _lineNo;
                    _tempItem.Sad_res_line_no = Convert.ToInt32(lblPromoVouNo.Text.ToString());
                    _tempItem.Sad_res_no = "PROMO_VOU";
                }
            }
            _tempItem.Sad_merge_itm = "";
            _tempItem.Sad_pb_lvl = cmbLevel.Text;
            _tempItem.Sad_pb_price = Convert.ToDecimal(SSPriceBookPrice);
            _tempItem.Sad_pbook = cmbBook.Text;
            _tempItem.Sad_print_stus = false;
            _tempItem.Sad_promo_cd = SSPromotionCode;
            _tempItem.Sad_qty = Convert.ToDecimal(txtQty.Text);
            _tempItem.Sad_do_qty = _tempItem.Sad_qty; //add by akila 2017/10/20
            _tempItem.Sad_seq = Convert.ToInt32(SSPriceBookSequance);
            _tempItem.Sad_seq_no = 0;
            _tempItem.Sad_srn_qty = 0;
            _tempItem.Sad_tot_amt = Convert.ToDecimal(txtLineTotAmt.Text);
            _tempItem.Sad_unit_amt = Convert.ToDecimal(txtUnitPrice.Text) * Convert.ToDecimal(txtQty.Text);
            _tempItem.Sad_unit_rt = Convert.ToDecimal(txtUnitPrice.Text);
            _tempItem.Sad_uom = "";
            _tempItem.Sad_warr_based = false;
            _tempItem.Mi_longdesc = _item.Mi_longdesc;
            _tempItem.Mi_itm_tp = _item.Mi_itm_tp;
            _tempItem.Mi_brand = _item.Mi_brand;
            _tempItem.Mi_cate_1 = _item.Mi_cate_1;
            _tempItem.Mi_cate_2 = _item.Mi_cate_2;
            _tempItem.Sad_job_line = Convert.ToInt32(SSCombineLine);
            _tempItem.Sad_warr_period = WarrantyPeriod;
            _tempItem.Sad_warr_remarks = WarrantyRemarks;
            _tempItem.Sad_sim_itm_cd = _originalItem;
            _tempItem.Sad_merge_itm = _item.Mi_itm_tp != "M" ? "0" : Convert.ToString(SSPRomotionType);
            //kapila 29/12/2016
            _tempItem.Sad_conf_no = _promoType;
            if (!string.IsNullOrEmpty(txtDisRate.Text.Trim()) && IsNumeric(txtDisRate.Text.Trim())) if (Convert.ToDecimal(txtDisRate.Text.Trim()) > 0 && GeneralDiscount != null) { _tempItem.Sad_dis_type = "M"; _tempItem.Sad_dis_seq = GeneralDiscount.Sgdd_seq; _tempItem.Sad_dis_line = 0; }
            return _tempItem;
        }

        private void DeleteIfPartlyAdded(int _joblineno, string _itemc, decimal _unitratec, string _bookc, string _levelc, decimal _qtyc, decimal _discountamt, decimal _taxamt, int _itmlineno, int _rowidx)
        {
            Int32 _combineLine = _joblineno;
            if (_MainPriceSerial != null)
                if (_MainPriceSerial.Count > 0)
                {
                    string _item = _itemc;
                    decimal _uRate = _unitratec;
                    string _pbook = _bookc;
                    string _level = _levelc;

                    List<PriceSerialRef> _tempSerial = _MainPriceSerial;
                    var _remove = from _list in _tempSerial
                                  where _list.Sars_itm_cd == _item && _list.Sars_itm_price == _uRate && _list.Sars_pbook == _pbook && _list.Sars_price_lvl == _level
                                  select _list;
                    foreach (PriceSerialRef _single in _remove)
                    {
                        _tempSerial.Remove(_single);
                    }

                    _MainPriceSerial = _tempSerial;
                }

            List<InvoiceItem> _tempList = _invoiceItemList;
            var _promo = (from _pro in _invoiceItemList
                          where _pro.Sad_job_line == _combineLine
                          select _pro).ToList();

            if (_promo.Count() > 0)
            {
                foreach (InvoiceItem code in _promo)
                {
                    CalculateGrandTotal(Convert.ToDecimal(code.Sad_qty), (decimal)code.Sad_unit_rt, (decimal)code.Sad_disc_amt, (decimal)code.Sad_itm_tax_amt, false);
                    ScanSerialList.RemoveAll(x => x.Tus_base_itm_line == code.Sad_itm_line);
                    InvoiceSerialList.RemoveAll(x => x.Sap_itm_line == code.Sad_itm_line);
                }
                if (_tempList != null && _tempList.Count > 0)
                    _tempList.RemoveAll(x => x.Sad_job_line == _combineLine);
            }
            else
            {
                CalculateGrandTotal(_qtyc, _unitratec, _discountamt, _taxamt, false);
                InvoiceSerialList.RemoveAll(x => x.Sap_itm_line == _itmlineno);
                if (_tempList != null && _tempList.Count > 0)
                    try
                    {
                        _tempList.RemoveAt(_rowidx);
                    }
                    catch
                    {
                    }
            }

            _invoiceItemList = _tempList;
            if (_invoiceItemList != null || _invoiceItemList.Count > 0) lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString(_invoiceItemList.Sum(x => x.Sad_tot_amt))); else lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString("0"));

            Int32 _newLine = 1;
            List<InvoiceItem> _tempLists = _invoiceItemList;
            if (_tempLists != null)
                if (_tempLists.Count > 0)
                {
                    foreach (InvoiceItem _itm in _tempLists)
                    {
                        Int32 _line = _itm.Sad_itm_line;
                        _invoiceItemList.Where(Y => Y.Sad_itm_line == _line).ToList().ForEach(x => x.Sad_itm_line = _newLine);
                        InvoiceSerialList.Where(y => y.Sap_itm_line == _line).ToList().ForEach(x => x.Sap_itm_line = _newLine);
                        ScanSerialList.Where(y => y.Tus_base_itm_line == _line).ToList().ForEach(x => x.Tus_base_itm_line = _newLine);
                        _newLine += 1;
                    }
                    _lineNo = _newLine - 1;
                }
                else
                {
                    _lineNo = 0;
                }
            else
            {
                _lineNo = 0;
            }
            BindAddItem();
            gvPopSerial.DataSource = new List<ReptPickSerials>();
            gvPopSerial.DataSource = ScanSerialList.Where(x => x.Tus_ser_1 != "N/A" && !IsGiftVoucher(x.ItemType)).ToList();
            gvGiftVoucher.DataSource = new List<ReptPickSerials>();
            gvGiftVoucher.DataSource = ScanSerialList.Where(x => IsGiftVoucher(x.ItemType)).ToList();
            TotalAmount = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());
            textBoxAmount.Text = FormatToCurrency(lblGrndTotalAmount.Text.Trim());
            LoadData();
        }

        private void txtNIC_KeyDown(object sender, KeyEventArgs e)
        {

        }

        protected void LoadCustomerDetailsByMobile(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtMobile.Text)) return;
            _masterBusinessCompany = new MasterBusinessEntity();
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (!string.IsNullOrEmpty(txtMobile.Text))
                {
                    if (!IsValidMobileOrLandNo(txtMobile.Text))
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid mobile", "Customer Mobile", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtMobile.Text = ""; return;
                    }
                    List<MasterBusinessEntity> _custList = CHNLSVC.Sales.GetActiveCustomerDetailList(BaseCls.GlbUserComCode, string.Empty, string.Empty, txtMobile.Text, "C");
                    if (_custList != null && _custList.Count > 0)
                    {
                        if (_custList.Count > 1)
                        {
                            //Tempory removed by Chamal 26-04-2014
                            //if (string.IsNullOrEmpty(txtCustomer.Text) || txtCustomer.Text.Trim() == "AST-CASH") MessageBox.Show("There are " + _custList.Count + " number of customers are available for the selected mobile.", "Customers", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); txtMobile.Clear(); txtMobile.Focus(); return;
                        }
                    }

                    if (!string.IsNullOrEmpty(txtCustomer.Text) && txtCustomer.Text.Trim() != "AST-CASH")
                        _masterBusinessCompany = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text.Trim(), string.Empty, txtMobile.Text, "C");
                    else
                        _masterBusinessCompany = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, string.Empty, string.Empty, txtMobile.Text, "C");
                    ////ucPayModes1.Mobile = txtMobile.Text.Trim();

                }
                //if (!string.IsNullOrEmpty(_masterBusinessCompany.Mbe_cd) && txtCustomer.Text != "AST-CASH")
                if (!string.IsNullOrEmpty(_masterBusinessCompany.Mbe_cd))
                {
                    if (_masterBusinessCompany.Mbe_act == true)
                    {
                        LoadTaxDetail(_masterBusinessCompany);
                        SetCustomerAndDeliveryDetails(false, null);
                        ViewCustomerAccountDetail(txtCustomer.Text);
                    }
                    else
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("This customer already inactive. Please contact accounts dept.", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        ClearCustomer(true);
                        txtCustomer.Focus();
                        return;
                    }
                }
                else
                {
                    GroupBussinessEntity _grupProf = GetbyMobGrup(txtMobile.Text.Trim().ToUpper());
                    if (_grupProf.Mbg_cd != null && _grupProf.Mbg_act == true)
                    {
                        SetCustomerAndDeliveryDetailsGroup(_grupProf);
                        _isGroup = true;
                        DataTable _table = CHNLSVC.Sales.GetCustomerAllowInvoiceType(BaseCls.GlbUserComCode, txtCustomer.Text.Trim());
                        if (_table != null && _table.Rows.Count > 0)
                        {
                            var _isAvailable = _table.AsEnumerable().Where(x => x.Field<string>("mbsa_sa_tp") == "CS").ToList();
                            if (_isAvailable == null || _isAvailable.Count <= 0)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Customer is not allow for enter transaction under selected invoice type.", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                ClearCustomer(true);
                                txtCustomer.Focus();
                                return;
                            }
                        }
                        //else if (cmbInvType.Text != "CS")
                        //{
                        //    this.Cursor = Cursors.Default;
                        //    using (new CenterWinDialog(this)) { MessageBox.Show("Selected Customer is not allow for enter transaction under selected invoice type.", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        //    ClearCustomer(true);
                        //    txtCustomer.Focus();
                        //    return;
                        //}
                    }
                    else
                    {
                        _isGroup = false;
                    }
                }

                txtSPMob.Text = txtMobile.Text.Trim();
                txtLoyalty.Text = ReturnLoyaltyNo();
                txtLoyalty_Leave(null, null);
                EnableDisableCustomer();
            }
            catch (Exception ex)
            { ClearCustomer(true); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        public GroupBussinessEntity GetbyMobGrup(string mobNo)
        {
            return CHNLSVC.Sales.GetCustomerProfileByGrup(null, null, null, null, null, mobNo);
        }

        private void LoadCustomerDetailsByNIC(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtNIC.Text)) { return; }
            _masterBusinessCompany = new MasterBusinessEntity();
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (!string.IsNullOrEmpty(txtNIC.Text))
                {
                    if (!IsValidNIC(txtNIC.Text))
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid NIC", "Customer NIC", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtNIC.Text = ""; return;
                    }
                    List<MasterBusinessEntity> _custList = CHNLSVC.Sales.GetActiveCustomerDetailList(BaseCls.GlbUserComCode, string.Empty, txtNIC.Text, string.Empty, "C");
                    if (_custList != null && _custList.Count > 0)
                    {
                        if (_custList.Count > 1)
                        {
                            //Tempory removed by Chamal 26-04-2014
                            //if (string.IsNullOrEmpty(txtCustomer.Text) || txtCustomer.Text.Trim() == "AST-CASH") MessageBox.Show("There are " + _custList.Count + " number of active customers are available for the selected NIC.\nPlease contact Accounts Dept.", "Customers", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); txtNIC.Clear(); txtNIC.Focus(); return;
                        }
                    }

                    ////if (cmbInvType.Text.Trim() == "CRED")
                    ////{
                    ////    if (_custList != null && _custList.Count > 0) { foreach (MasterBusinessEntity _cust in _custList) { if (_cust.Mbe_is_suspend == true) { MessageBox.Show("Customer suspend!\n[" + _cust.Mbe_cd + " | " + _cust.Mbe_name + "]\nFor more information, please contact Accounts Dept.", "Customers", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); txtNIC.Clear(); txtNIC.Focus(); return; } } }
                    ////}

                    //_masterBusinessCompany = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, string.Empty, txtNIC.Text, string.Empty, "C");
                    _masterBusinessCompany = CHNLSVC.Sales.GetCustomerProfileByCom(null, txtNIC.Text, null, null, null, BaseCls.GlbUserComCode);
                }
                if (!string.IsNullOrEmpty(_masterBusinessCompany.Mbe_cd))
                {
                    if (_masterBusinessCompany.Mbe_act == true)
                    {
                        LoadTaxDetail(_masterBusinessCompany);
                        SetCustomerAndDeliveryDetails(false, null);
                        ViewCustomerAccountDetail(txtCustomer.Text);
                        GetNICGender();
                    }
                    else
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("This customer already inactive. Please contact accounts dept.", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        ClearCustomer(true);
                        txtCustomer.Focus();
                        return;
                    }
                }
                else
                {

                    GroupBussinessEntity _grupProf = GetbyNICGrup(txtNIC.Text.Trim().ToUpper());
                    if (_grupProf.Mbg_cd != null && _grupProf.Mbg_act == true)
                    {
                        GetNICGender();
                        SetCustomerAndDeliveryDetailsGroup(_grupProf);
                        _isGroup = true;

                        DataTable _table = CHNLSVC.Sales.GetCustomerAllowInvoiceType(BaseCls.GlbUserComCode, txtCustomer.Text.Trim());
                        if (_table != null && _table.Rows.Count > 0)
                        {
                            var _isAvailable = _table.AsEnumerable().Where(x => x.Field<string>("mbsa_sa_tp") == "CS").ToList();
                            if (_isAvailable == null || _isAvailable.Count <= 0)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Customer is not allow for enter transaction under selected invoice type.", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                ClearCustomer(true);
                                txtCustomer.Focus();
                                return;
                            }
                        }
                        ////else if (cmbInvType.Text != "CS")
                        ////{
                        ////    this.Cursor = Cursors.Default;
                        ////    using (new CenterWinDialog(this)) { MessageBox.Show("Selected Customer is not allow for enter transaction under selected invoice type.", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        ////    ClearCustomer(true);
                        ////    txtCustomer.Focus();
                        ////    return;
                        ////}
                    }

                }

                txtLoyalty.Text = ReturnLoyaltyNo();
                txtLoyalty_Leave(null, null);
                EnableDisableCustomer();
                txtMobile.Focus();
            }
            catch (Exception ex)
            { ClearCustomer(true); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        public GroupBussinessEntity GetbyNICGrup(string nic)
        {
            return CHNLSVC.Sales.GetCustomerProfileByGrup(null, nic, null, null, null, null);
        }

        private string ReturnLoyaltyNo()
        {
            string _no = string.Empty;
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _commonSearch = new CommonSearch.CommonSearch();
                _commonSearch.ReturnIndex = 0;
                _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.SearchLoyaltyCardNo);
                DataTable _result = CHNLSVC.CommonSearch.SearchLoyaltyCardNo(_commonSearch.SearchParams, null, null);
                if (_result != null && _result.Rows.Count > 0)
                {
                    if (_result.Rows.Count > 1)
                    {
                        MessageBox.Show("Customer having multiple loyalty cards. Please select one of them.", "Loyalty Card", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtLoyalty.BackColor = Color.SteelBlue;
                        return _no;
                    }
                    _no = _result.Rows[0].Field<string>("Card No");
                    txtLoyalty.BackColor = Color.Red;
                }
                else txtLoyalty.BackColor = Color.SteelBlue;
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
            return _no;
        }

        private void GetNICGender()
        {
            String nic_ = txtNIC.Text.Trim().ToUpper();
            char[] nicarray = nic_.ToCharArray();
            string thirdNum = (nicarray[2]).ToString();
            if (thirdNum == "5" || thirdNum == "6" || thirdNum == "7" || thirdNum == "8" || thirdNum == "9")
            {
                ////    cmbTitle.Text = "MS.";
            }
            else
            {
                ////  cmbTitle.Text = "MR.";
            }
        }

        private void txtNIC_MouseDoubleClick(object sender, MouseEventArgs e)
        {

        }

        private void chkDeliverLater_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (_isGiftVoucherCheckBoxClick) return;
                txtDelLocation.Text = BaseCls.GlbUserDefLoca;
                chkOpenDelivery.Checked = false;
                if (chkDeliverLater.Checked)
                { chkOpenDelivery.Enabled = true; txtDelLocation.Enabled = true; btnSearchDelLocation.Enabled = true; chkDeliverLater.Enabled = false; chkDeliverNow.Enabled = false; chkDeliverNow.Checked = false; }
                else { chkOpenDelivery.Enabled = false; txtDelLocation.Enabled = false; btnSearchDelLocation.Enabled = false; chkDeliverNow.Enabled = true; chkDeliverNow.Checked = false; }
                chkGiftVoucher.Checked = false; chkPickGV.Checked = false; chkPickGV.Enabled = false;

            }
            catch (Exception ex) { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void chkDeliverNow_CheckedChanged(object sender, EventArgs e)
        {
            chkOpenDelivery.Checked = false;
            if (chkDeliverNow.Checked)
            { chkOpenDelivery.Enabled = true; txtDelLocation.Enabled = true; btnSearchDelLocation.Enabled = true; chkDeliverLater.Enabled = false; chkDeliverLater.Enabled = false; chkDeliverLater.Checked = false; chkDeliverNow.Enabled = false; }
            else { chkOpenDelivery.Enabled = false; txtDelLocation.Enabled = false; btnSearchDelLocation.Enabled = false; chkDeliverLater.Enabled = true; chkDeliverLater.Checked = false; }
            chkGiftVoucher.Checked = false; chkPickGV.Checked = false; chkPickGV.Enabled = false;
            //if (_MasterProfitCenter.Mpc_max_fwdsale <= _MasterProfitCenter.MPC_NUM_FWDSALE)
        }

        private void btnSearch_Executive_Click(object sender, EventArgs e)
        {
            _commonSearch = new CommonSearch.CommonSearch();
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _commonSearch.ReturnIndex = 0;
                _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.InvoiceExecutive);
                DataTable _result = CHNLSVC.CommonSearch.SearchEmployeeAssignToProfitCenter(_commonSearch.SearchParams, null, null);
                if (_result == null || _result.Rows.Count <= 0)
                {
                    _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.Employee_Executive);
                    _result = CHNLSVC.CommonSearch.GetEmployeeData(_commonSearch.SearchParams, null, null);
                }
                _commonSearch.dvResult.DataSource = _result;
                _commonSearch.BindUCtrlDDLData(_result);
                _commonSearch.obj_TragetTextBox = txtExecutive;
                this.Cursor = Cursors.Default;
                _commonSearch.ShowDialog();
                txtExecutive.Select();
            }
            catch (Exception ex)
            { txtExecutive.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void txtVal_TextChanged(object sender, EventArgs e)
        {

        }

        private void gvInvoiceItem_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvInvoiceItem.ColumnCount > 0)
                {
                    Int32 _rowIndex = e.RowIndex;
                    Int32 _colIndex = e.ColumnIndex;
                    if (_rowIndex != -1)
                    {
                        #region Deleting Row

                        if (_colIndex == 0)
                        {
                            if (!string.IsNullOrEmpty(txtInvoiceNo.Text))
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("You cannot remove item from a finished invoice !", "Payment", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return;
                            }
                            if (MessageBox.Show("Do you want to remove?", "Removing...", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                            {
                                return;
                            }
                            if (_recieptItem != null)
                                if (_recieptItem.Count > 0)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("You have already payment added!", "Payment", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    return;
                                }
                            int _combineLine = Convert.ToInt32(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_JobLine"].Value);
                            string _resNo = (string)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_ResNo"].Value;//Add by Chamal 6-Jul-2014
                            int _resLine = Convert.ToInt32(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_ResLine"].Value);//Add by Chamal 6-Jul-2014
                            if (_MainPriceSerial != null)
                                if (_MainPriceSerial.Count > 0)
                                {
                                    string _item = (string)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Item"].Value;
                                    decimal _uRate = (decimal)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_UPrice"].Value;
                                    string _pbook = (string)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Book"].Value;
                                    string _level = (string)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Level"].Value;

                                    List<PriceSerialRef> _tempSerial = _MainPriceSerial;
                                    var _remove = from _list in _tempSerial
                                                  where _list.Sars_itm_cd == _item && _list.Sars_itm_price == _uRate && _list.Sars_pbook == _pbook && _list.Sars_price_lvl == _level
                                                  select _list;

                                    foreach (PriceSerialRef _single in _remove)
                                    {
                                        _tempSerial.Remove(_single);
                                    }

                                    _MainPriceSerial = _tempSerial;
                                }
                            List<InvoiceItem> _tempList = _invoiceItemList;
                            var _promo = (from _pro in _invoiceItemList
                                          where _pro.Sad_job_line == _combineLine
                                          select _pro).ToList();
                            if (_promo.Count() > 0)
                            {
                                foreach (InvoiceItem code in _promo)
                                {
                                    CalculateGrandTotal(Convert.ToDecimal(code.Sad_qty), (decimal)code.Sad_unit_rt, (decimal)code.Sad_disc_amt, (decimal)code.Sad_itm_tax_amt, false);
                                    ScanSerialList.RemoveAll(x => x.Tus_base_itm_line == code.Sad_itm_line);
                                    InvoiceSerialList.RemoveAll(x => x.Sap_itm_line == code.Sad_itm_line);
                                }
                                _tempList.RemoveAll(x => x.Sad_job_line == _combineLine);
                            }
                            else
                            {
                                CalculateGrandTotal(Convert.ToDecimal(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Qty"].Value), (decimal)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_UPrice"].Value, (decimal)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_DisAmt"].Value, (decimal)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_TaxAmt"].Value, false);
                                InvoiceSerialList.RemoveAll(x => x.Sap_itm_line == _tempList[_rowIndex].Sad_itm_line);
                                _tempList.RemoveAt(_rowIndex);
                            }
                            _invoiceItemList = _tempList;

                            if (_resNo == "PROMO_VOU" && _resLine == Convert.ToInt32(lblPromoVouNo.Text.ToString()))
                            {
                                //Add by Chamal 6-Jul-2014
                                lblPromoVouUsedFlag.Text = "";
                                lblPromoVouNo.Text = "";
                                _proVouInvcItem = "";
                                _proVouInvcLine = 0;
                            }

                            int _newLine = 1;
                            List<InvoiceItem> _tempLists = _invoiceItemList;
                            if (_tempLists != null)
                                if (_tempLists.Count > 0)
                                {
                                    foreach (InvoiceItem _itm in _tempLists)
                                    {
                                        Int32 _line = _itm.Sad_itm_line;
                                        _invoiceItemList.Where(Y => Y.Sad_itm_line == _line).ToList().ForEach(x => x.Sad_itm_line = _newLine);
                                        InvoiceSerialList.Where(y => y.Sap_itm_line == _line).ToList().ForEach(x => x.Sap_itm_line = _newLine);
                                        ScanSerialList.Where(y => y.Tus_base_itm_line == _line).ToList().ForEach(x => x.Tus_base_itm_line = _newLine);

                                        _newLine += 1;
                                    }
                                    _lineNo = _newLine - 1;
                                }
                                else _lineNo = 0;
                            else _lineNo = 0;
                            BindAddItem();
                            if (_invoiceItemList != null || _invoiceItemList.Count > 0) lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString(_invoiceItemList.Sum(x => x.Sad_tot_amt))); else lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString("0"));
                            gvPopSerial.DataSource = new List<ReptPickSerials>();
                            gvPopSerial.DataSource = ScanSerialList.Where(x => x.Tus_ser_1 != "N/A" && !IsGiftVoucher(x.ItemType)).ToList();
                            gvGiftVoucher.DataSource = new List<ReptPickSerials>();
                            gvGiftVoucher.DataSource = ScanSerialList.Where(x => IsGiftVoucher(x.ItemType)).ToList();

                            //update promotion
                            //update promotion
                            List<InvoiceItem> _temItems = (from _invItm in _invoiceItemList
                                                           where !string.IsNullOrEmpty(_invItm.Sad_promo_cd)
                                                           select _invItm).ToList<InvoiceItem>();
                            if (_temItems != null && _temItems.Count > 0)
                                ISPromotion = true;
                            else
                                ISPromotion = false;

                            TotalAmount = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());
                            textBoxAmount.Text = FormatToCurrency(lblGrndTotalAmount.Text.Trim());
                            txtCNT.Text = _invoiceItemList.Select(x => x.Sad_qty).Sum().ToString("0");
                            LoadData();
                            LookingForBuyBack();

                            //REGISTRATION PROCESS
                            //ADDED 2013/12/06
                            //search invoice item list if registration item not found set visibility
                            if (_isRegistrationMandatory && _isNeedRegistrationReciept)
                            {
                                bool _isHaveReg = false;
                                if (_invoiceItemList != null && _invoiceItemList.Count > 0)
                                {
                                    foreach (InvoiceItem _invItm in _invoiceItemList)
                                    {
                                        //check item need registration
                                        MasterItem _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());
                                        if (_itm != null)
                                        {
                                            if (_itm.Mi_need_reg)
                                            {
                                                _isHaveReg = true;
                                                break;
                                            }
                                        }
                                    }
                                }

                                if (!_isHaveReg)
                                {
                                    _isNeedRegistrationReciept = false;
                                    lnkProcessRegistration.Visible = false;
                                }
                            }
                            //END

                            return;
                        }
                        if (_colIndex == 1)
                        {
                            return;
                        }
                        if (_colIndex == 2 && chkDeliverLater.Checked == false)
                        {
                            string _item = (string)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Item"].Value;
                            string _status = (string)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Status"].Value;
                            int _itemLineNo = Convert.ToInt32(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_No"].Value.ToString());
                            decimal _invoiceQty = Convert.ToDecimal(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Qty"].Value.ToString());
                            decimal _doQty = 0;
                            decimal _scanQty = 0;
                            if (ScanSerialList != null) _scanQty = ScanSerialList.Where(x => x.Tus_base_itm_line == _itemLineNo).Sum(x => x.Tus_qty);
                            string _priceBook = gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Book"].Value.ToString();
                            string _priceLevel = gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Level"].Value.ToString();
                            int pbCount = CHNLSVC.Sales.GetDOPbCount(BaseCls.GlbUserComCode, _priceBook, _priceLevel);
                            string _promotioncd = Convert.ToString(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_PromoCd"].Value);
                            bool _isAgePriceLevel = false;
                            int _ageingDays = -1;
                            MasterItem _itemM = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                            if (_itemM.Mi_is_ser1 == -1 || _itemM.Mi_is_ser1 == 0) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You do not need to pick non-serialized item.", "Non-Serialized", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                            DataTable _categoryDet = CHNLSVC.General.GetMainCategoryDetail(_itemM.Mi_cate_1);
                            List<PriceBookLevelRef> _level = CHNLSVC.Sales.GetPriceLevelList(BaseCls.GlbUserComCode, _priceBook, _priceLevel);
                            if (_level != null)
                                if (_level.Count > 0)
                                {
                                    var _lvl = _level.Where(x => x.Sapl_isage).ToList();
                                    if (_lvl != null) if (_lvl.Count() > 0)
                                            _isAgePriceLevel = true;
                                }

                            if (_categoryDet != null && _isAgePriceLevel)
                                if (_categoryDet.Rows.Count > 0)
                                {
                                    if (_categoryDet.Rows[0]["ric1_age"] != DBNull.Value)
                                        _ageingDays = Convert.ToInt32(_categoryDet.Rows[0].Field<Int16>("ric1_age"));
                                    else _ageingDays = 0;
                                }
                            if ((_invoiceQty - _doQty) <= 0) return;
                            if ((_invoiceQty - _doQty) <= _scanQty) return;
                            _commonOutScan = new CommonSearch.CommonOutScan();
                            _commonOutScan._isWriteToTemporaryTable = false;
                            _commonOutScan.ModuleTypeNo = 1;
                            _commonOutScan.ScanDocument = "N/A";
                            _commonOutScan.DocumentType = "DO";
                            _commonOutScan.PopupItemCode = _item;
                            _commonOutScan.ItemStatus = _status;
                            _commonOutScan.ItemLineNo = _itemLineNo;
                            _commonOutScan.PopupQty = _invoiceQty - _doQty;
                            _commonOutScan.ApprovedQty = _doQty;
                            _commonOutScan.ScanQty = _scanQty;
                            _commonOutScan.IsAgePriceLevel = _isAgePriceLevel;
                            _commonOutScan.DocumentDate = txtDate.Value.Date;
                            _commonOutScan.NoOfDays = _ageingDays;
                            if (pbCount <= 0) _commonOutScan.IsCheckStatus = false;
                            else _commonOutScan.IsCheckStatus = true;
                            _commonOutScan.AddSerialClick += new EventHandler(CommonOutScan_AddSerialClick);
                            _commonOutScan.Location = new Point(((this.Width - _commonOutScan.Width) / 2), ((this.Height - _commonOutScan.Height) / 2) + 50);
                            _commonOutScan.ShowDialog();
                            return;
                        }
                        if (_colIndex == 10 && _isEditPrice == false)
                        {
                            decimal _prevousDisRate = Convert.ToDecimal(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_DisRate"].Value);
                            int _lineno0 = Convert.ToInt32(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_No"].Value);
                            string _book = Convert.ToString(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Book"].Value);
                            string _level = Convert.ToString(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Level"].Value);
                            string _item = Convert.ToString(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Item"].Value);
                            string _status = Convert.ToString(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Status"].Value);
                            bool _isSerialized = false;

                        xy:
                            string _userDisRate = Microsoft.VisualBasic.Interaction.InputBox("Enter the discount rate", "Discount", Convert.ToString(_prevousDisRate), this.Width / 2, this.Height / 2);
                            if (string.IsNullOrEmpty(_userDisRate))
                                return;
                            if (IsNumeric(_userDisRate) == false || Convert.ToDecimal(_userDisRate) > 100 || Convert.ToDecimal(_userDisRate) < 0)
                            {
                                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid discount rate", "Invalid Discount", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                goto xy;
                            }
                            decimal _disRate = Convert.ToDecimal(_userDisRate);

                            if (GeneralDiscount == null) GeneralDiscount = new CashGeneralEntiryDiscountDef();
                            GeneralDiscount = CHNLSVC.Sales.GetGeneralDiscountDefinition(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, Convert.ToDateTime(txtDate.Text.Trim()).Date, _book, _level, txtCustomer.Text.Trim(), _item, _isSerialized, false);
                            if (GeneralDiscount != null)
                            {
                                decimal vals = GeneralDiscount.Sgdd_disc_val;
                                decimal rates = GeneralDiscount.Sgdd_disc_rt;

                                if (rates < _disRate)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("You can not discount price more than " + rates + "%.", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    return;
                                }
                            }
                            else
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("You are not allow for apply discount", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return;
                            }

                            var _itm = _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList();
                            if (_item != null && _item.Count() > 0) foreach (InvoiceItem _one in _itm)
                                {
                                    CalculateGrandTotal(_one.Sad_qty, _one.Sad_unit_rt, _one.Sad_disc_amt, _one.Sad_itm_tax_amt, false);
                                    decimal _unitRate = _one.Sad_unit_rt;
                                    decimal _unitAmt = _one.Sad_unit_amt;
                                    decimal _disVal = 0;
                                    decimal _vatPortion = 0;
                                    decimal _lineamount = 0;
                                    decimal _newvatval = 0;

                                    bool _isTaxDiscount = chkTaxPayable.Checked ? true : (lblSVatStatus.Text == "Available") ? true : false;

                                    if (_isTaxDiscount)
                                    {
                                        _vatPortion = FigureRoundUp(TaxCalculation(_item, _status, _one.Sad_qty, _priceBookLevelRef, _unitRate, _disVal, _disRate, true), true);
                                        _disVal = FigureRoundUp(_unitAmt * _disRate / 100, true);
                                        _lineamount = FigureRoundUp(_unitRate * _one.Sad_qty + _vatPortion - _disVal, true);
                                    }
                                    else
                                    {
                                        _vatPortion = FigureRoundUp(TaxCalculation(_item, _status, _one.Sad_qty, _priceBookLevelRef, _unitRate, _disVal, _disRate, true), true);
                                        _disVal = FigureRoundUp((_unitAmt + _vatPortion) * _disRate / 100, true);

                                        if (_disRate > 0)
                                        {
                                            List<MasterItemTax> _tax = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, _item, _status, string.Empty, string.Empty);
                                            if (_tax != null && _tax.Count > 0)
                                            {
                                                _newvatval = ((_unitRate * _one.Sad_qty + _vatPortion - _disVal) * _tax[0].Mict_tax_rate) / (100 + _tax[0].Mict_tax_rate);
                                            }
                                        }
                                        if (_disRate > 0)
                                        {
                                            _lineamount = FigureRoundUp(_unitRate * _one.Sad_qty + _vatPortion - _disVal, true);
                                            _vatPortion = FigureRoundUp(_newvatval, true);
                                        }
                                        else
                                        {
                                            _lineamount = FigureRoundUp(_unitRate * _one.Sad_qty + _vatPortion - _disVal, true);
                                        }
                                    }
                                    _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList().ForEach(x => x.Sad_disc_rt = _disRate);
                                    _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList().ForEach(x => x.Sad_disc_amt = _disVal);
                                    _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList().ForEach(x => x.Sad_itm_tax_amt = _vatPortion);
                                    _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList().ForEach(x => x.Sad_tot_amt = FigureRoundUp(_lineamount, true));
                                    BindAddItem();
                                    CalculateGrandTotal(_one.Sad_qty, _unitRate, _disVal, _vatPortion, true);
                                    decimal _tobepays = 0;
                                    if (lblSVatStatus.Text == "Available") 
                                        _tobepays = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim()) - Convert.ToDecimal(lblGrndTax.Text.Trim()); 
                                    else 
                                        _tobepays = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());
                                    ////ucPayModes1.TotalAmount = _tobepays; xxxx
                                    //update promotion
                                    List<InvoiceItem> _temItems = (from _invItm in _invoiceItemList
                                                                   where !string.IsNullOrEmpty(_invItm.Sad_promo_cd)
                                                                   select _invItm).ToList<InvoiceItem>();
                                    if (_temItems != null && _temItems.Count > 0)
                                    {
                                        ISPromotion = true;
                                    }
                                    else
                                        ISPromotion = false;
                                    InvoiceItemList = _invoiceItemList;
                                    SerialList = InvoiceSerialList;
                                    textBoxAmount.Text = FormatToCurrency(Convert.ToString(_tobepays));
                                    if (HavePayModes && _isCombineAdding == false)
                                        LoadData();
                                }
                        }

                        #endregion Deleting Row
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void CommonOutScan_AddSerialClick(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                List<ReptPickSerials> _ser = _commonOutScan.SelectedItemList;
                if (_ser != null && _ser.Count > 0)
                {
                    if (ScanSerialList != null && ScanSerialList.Count > 0)
                    {
                        string _dupsLst = string.Empty;
                        Parallel.ForEach(_ser, x => { var _dups = ScanSerialList.Where(y => y.Tus_ser_1 == x.Tus_ser_1 && y.Tus_itm_cd == x.Tus_itm_cd).Count(); if (_dups != 0) if (string.IsNullOrEmpty(_dupsLst)) _dupsLst = "Item : " + x.Tus_itm_cd + "/Serial : " + x.Tus_ser_1; else _dupsLst += ", Item : " + x.Tus_itm_cd + "/Serial : " + x.Tus_ser_1; });
                        if (!string.IsNullOrEmpty(_dupsLst))
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Following Item/Serial(s) is duplicating!\n" + _dupsLst, "Duplicates", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            _commonOutScan._DoClose = false;
                            _commonOutScan.SelectedItemList = new List<ReptPickSerials>();
                            return;
                        }
                        else
                            ScanSerialList.AddRange(_ser);
                    }
                    else
                        ScanSerialList.AddRange(_ser);

                    _commonOutScan._DoClose = true;
                    gvPopSerial.DataSource = new List<ReptPickSerials>();
                    gvPopSerial.DataSource = ScanSerialList.Where(x => x.Tus_ser_1 != "N/A" && !IsGiftVoucher(x.ItemType)).ToList();
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnAddItem_Click(object sender, EventArgs e)
        {
            if (chkQuotation.Checked) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You are not allow to add additional items for the selected quotation.", "Add Item", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
            try
            {
                if (string.IsNullOrEmpty(txtSrchItem.Text))
                {
                    MessageBox.Show("Please select the item", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                if (string.IsNullOrEmpty(txtQty.Text)) return;

                MasterItem _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtSrchItem.Text);
                if (_itm != null)
                    if (_itm.Mi_is_ser1 == 1)
                        if (string.IsNullOrEmpty(txtSerialNo.Text))
                        {
                            MessageBox.Show("Please select the serial", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                #region Check Customer has promotion voucher avoid the discount :: Chamal 04/Jul/2014

                if (!string.IsNullOrEmpty(txtCustomer.Text))
                {
                    if (txtCustomer.Text != "AST-CASH")
                    {
                        if ((string.IsNullOrEmpty(txtDisRate.Text) && string.IsNullOrEmpty(txtDisAmt.Text)))
                        {
                            CashGeneralEntiryDiscountDef _discVou = CHNLSVC.Sales.CheckCustHaveDiscountPromoVoucher(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtCustomer.Text, txtDate.Value.Date, cmbBook.Text, cmbLevel.Text, txtSrchItem.Text, string.Empty, txtNIC.Text, txtMobile.Text);
                            if (_discVou != null)
                            {
                                using (new CenterWinDialog(this)) { MessageBox.Show("Promotion voucher discount available for this item", "Promotion Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return;
                            }
                        }
                        else
                        {
                            if (Convert.ToDecimal(txtDisRate.Text) <= 0 && Convert.ToDecimal(txtDisAmt.Text) <= 0)
                            {
                                CashGeneralEntiryDiscountDef _discVou = CHNLSVC.Sales.CheckCustHaveDiscountPromoVoucher(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtCustomer.Text, txtDate.Value.Date, cmbBook.Text, cmbLevel.Text, txtSrchItem.Text, string.Empty, txtNIC.Text, txtMobile.Text);
                                if (_discVou != null)
                                {
                                    using (new CenterWinDialog(this)) { MessageBox.Show("Promotion voucher discount available for this item", "Promotion Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    return;
                                }
                            }
                        }
                    }
                }

                #endregion Check Customer has promotion voucher avoid the discount :: Chamal 04/Jul/2014

                if (!string.IsNullOrEmpty(SSPromotionCode))
                {
                    //check promotion qty anr return
                    List<PriceDetailRef> _promoList = CHNLSVC.Sales.GetPriceByPromoCD(SSPromotionCode);
                    if (_promoList == null && _promoList.Count <= 0)
                    {
                        return;
                    }
                    else
                    {
                        decimal qty = _promoList[0].Sapd_qty_to;
                        List<InvoiceItem> _alredyAddList = (from _res in _invoiceItemList
                                                            where _res.Sad_itm_cd == txtSrchItem.Text.Trim() && _res.Sad_itm_stus == cmbStatus.Text
                                                            select _res).ToList<InvoiceItem>();
                        if (_alredyAddList != null)
                        {
                            qty = qty + _alredyAddList.Count;
                        }
                        if (Convert.ToDecimal(txtQty.Text) > qty)
                        {
                            using (new CenterWinDialog(this)) { MessageBox.Show("Invoice qty exceed promotion allow qty.", "Add Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            return;
                        }

                        //free item check
                        //not define the process
                        //sachith 2014/01/29
                    }
                }

                List<MasterItemComponent> _com = CHNLSVC.Inventory.GetItemComponents(txtSrchItem.Text.Trim());
                if (_com != null && _com.Count > 0)
                {
                    foreach (MasterItemComponent _itmCom in _com)
                    {
                        //REGISTRATION PROCESS
                        //ADDED 2013/12/10
                        //REGISTRATION PEOCESS CHECK
                        //ADDED 2013/12/06
                        //CHECK ITEM NEED REGISTRATION OR NOT
                        MasterItem _temItm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _itmCom.ComponentItem.Mi_cd);
                        if (_isRegistrationMandatory)
                        {
                            if (_temItm.Mi_need_reg)
                            {
                                _isNeedRegistrationReciept = true;
                                lnkProcessRegistration.Visible = true;
                            }
                        }
                    }
                }
                else
                {
                    MasterItem _temItm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtSrchItem.Text.Trim());
                    if (_isRegistrationMandatory)
                    {
                        if (_temItm.Mi_need_reg)
                        {
                            _isNeedRegistrationReciept = true;
                            lnkProcessRegistration.Visible = true;
                        }
                    }
                }
                //END
                //END

                this.Cursor = Cursors.WaitCursor;
                AddItem(SSPromotionCode == "0" || string.IsNullOrEmpty(SSPromotionCode) ? false : true, string.Empty);
                if (_priceDetailRef != null && _priceDetailRef.Count > 0)
                {
                    if (_priceDetailRef[0].Sapd_customer_cd == txtCustomer.Text.Trim())
                    {
                        txtCustomer.ReadOnly = true;
                        btnSearch_Customer.Enabled = false;
                    }
                }
                txtQty.Text = FormatToQty("1");

                //   pnlItem.Hide();
                btnMulti.Text = "OFF";
                btnMulti.BackColor = Color.Bisque;
                txtItem.Focus();
                btnBarcode.Text = "ON";
                btnBarcode.BackColor = Color.LimeGreen;
                cmbBook.Text = DefaultBook;
                cmbLevel.Text = DefaultLevel;

                AddItemDisableCustomer(true);
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private bool _stopit = false;

        private void CheckSerialAvailability(object sender, EventArgs e)
        {
            if (_stopit) return;
            // if (pnlMain.Enabled == false) return;
            if (string.IsNullOrEmpty(txtSerialNo.Text.Trim())) return;
            if (txtSerialNo.Text.Trim().ToUpper() == "N/A" || txtSerialNo.Text.Trim().ToUpper() == "NA")
            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Selected serial no is invalid or not available in your location.\nPlease check your inventory.", "Invalid Serial", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } txtSerialNo.Clear(); txtItem.Clear(); return; }

            txtSrchItem.Text = string.Empty;
            lblItemDescription.Text = "Description : " + string.Empty;
            lblItemModel.Text = "Model : " + string.Empty;
            lblItemBrand.Text = "Brand : " + string.Empty;

            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (chkPickGV.Checked)
                {
                    if (IsNumeric(txtSerialNo.Text.Trim()) == false)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please check the gift voucher", "Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtSerialNo.Clear();
                        txtSerialNo.Focus();
                        return;
                    }

                    DataTable _giftVoucher = CHNLSVC.Inventory.GetDetailByGiftVoucher(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, Convert.ToInt32(txtSerialNo.Text.Trim()), "ITEM");
                    if (_giftVoucher == null || _giftVoucher.Rows.Count <= 0)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("There is no such gift voucher. Please check the gift voucher inventory", "Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtSerialNo.Clear();
                        txtSerialNo.Focus();
                        return;
                    }

                    if (_giftVoucher.Rows.Count > 1)
                    {
                        PrepareMultiItemGrid(true);
                        ////  pnlMain.Enabled = false;
                        pnlMultipleItem.Visible = true;
                        gvMultipleItem.DataSource = _giftVoucher;
                        return;
                    }

                    string _item = _giftVoucher.Rows[0].Field<string>("gvp_gv_cd");
                    LoadItemDetail(_item); txtItem.Text = _item; txtSrchItem.Text = _item; txtQty.Text = FormatToQty("1");
                    btnAddItem.Focus();
                }
                else
                {
                    DataTable _multiItemforSerial = CHNLSVC.Inventory.GetMultipleItemforOneSerial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, txtSerialNo.Text.Trim(), string.Empty);
                    Int32 _isAvailable = _multiItemforSerial.Rows.Count;

                    if (_isAvailable <= 0)
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Selected serial no is invalid or not available in your location.\nPlease check your inventory.", "Invalid Serial", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } txtSerialNo.Clear(); txtItem.Clear(); return; }

                    if (_isAvailable > 1)
                    {
                        PrepareMultiItemGrid(false);
                        ////pnlMain.Enabled = false; 
                        pnlMultipleItem.Visible = true; gvMultipleItem.DataSource = _multiItemforSerial; return;
                    }

                    string _item = _multiItemforSerial.Rows[0].Field<string>("Item");
                    List<ReptPickSerials> _one = CHNLSVC.Inventory.Search_by_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, string.Empty, txtSerialNo.Text.Trim(), string.Empty);
                    if (!string.IsNullOrEmpty(Convert.ToString(cmbLevel.Text)) && !string.IsNullOrEmpty(Convert.ToString(cmbBook.Text)))
                    {
                        bool _isAgeLevel = false;
                        int _noofday = 0;
                        CheckNValidateAgeItem(_item, string.Empty, cmbBook.Text, cmbLevel.Text, cmbStatus.Text, out _isAgeLevel, out _noofday);
                        if (_isAgeLevel)
                            _one = GetAgeItemList(Convert.ToDateTime(txtDate.Value.Date).Date, _isAgeLevel, _noofday, _one);
                        if (_one == null || _one.Count <= 0)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("This serial can't select under ageing price level. Please check the ageing status with IT dept.", "Age Price Level", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            txtSerialNo.Clear();
                            txtItem.Clear();
                            txtSerialNo.Focus();
                            return;
                        }
                    }
                    //
                    if (_one != null && _one.Count > 0 && IsPriceLevelAllowDoAnyStatus == false)
                    {
                        string _serialstatus = _one[0].Tus_itm_stus;
                        if (!cmbStatus.Items.Contains(_serialstatus))
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Selected serial item inventory status not available in price level status collection. Please contact IT dept.", "Inventory Item Status", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            txtSerialNo.Clear();
                            txtItem.Clear();
                            txtSerialNo.Focus();
                            return;
                        }
                        else
                            cmbStatus.SelectedItem = _serialstatus;
                    }

                    if (LoadMultiCombinItem(_item) == false)
                    { LoadItemDetail(_item); txtItem.Text = _item; txtSrchItem.Text = _item; txtQty.Text = FormatToQty("1"); _stopit = true; CheckQty(true); btnAddItem.Focus(); }
                }
            }
            catch (Exception ex)
            { txtSerialNo.Clear(); txtItem.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { _stopit = false; this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private List<ReptPickSerials> GetAgeItemList(DateTime _date, bool _isAgePriceLevel, int _noOfDays, List<ReptPickSerials> _referance)
        {
            List<ReptPickSerials> _ageLst = new List<ReptPickSerials>();
            if (_isAgePriceLevel)
                _ageLst = _referance.Where(x => x.Tus_exist_grndt <= _date.AddDays(-_noOfDays)).ToList();
            else
                _ageLst = _referance;
            return _ageLst;
        }

        private void PrepareMultiItemGrid(bool _isGiftVoucher)
        {
            if (_isGiftVoucher)
            {
                MuItm_Item.DataPropertyName = "gvp_gv_cd";
                MuItm_Description.DataPropertyName = "mi_longdesc";
                MuItm_Model.DataPropertyName = "mi_model";
                MuItm_Brand.DataPropertyName = "mi_brand";
                MuItm_Serial.DataPropertyName = "gvp_book";
                MuItm_Serial.HeaderText = "Page";
                MuItm_Warranty.DataPropertyName = "gvp_book";
                MuItm_Warranty.HeaderText = "Book";
            }
            else
            {
                MuItm_Item.DataPropertyName = "Item";
                MuItm_Description.DataPropertyName = "Description";
                MuItm_Model.DataPropertyName = "Model";
                MuItm_Brand.DataPropertyName = "Brand";
                MuItm_Serial.DataPropertyName = "Serial";
                MuItm_Serial.HeaderText = "Serial";
                MuItm_Warranty.DataPropertyName = "Warranty";
                MuItm_Warranty.HeaderText = "Warranty";
            }
        }

        private bool LoadMultiCombinItem(string _item)
        {
            bool _isManyItem = false;
            if (LoadMultiCombineItem(_item))
            {
                _isManyItem = true;
            }
            return _isManyItem;
        }

        private bool LoadMultiCombineItem(string _item)
        {
            bool _isMultiCom = false;
            DataTable _invnetoryCombinAnalalize = CHNLSVC.Inventory.GetCompeleteItemfromAssambleItem(_item);
            if (_invnetoryCombinAnalalize != null)
                if (_invnetoryCombinAnalalize.Rows.Count > 0)
                {
                    gvMultiCombineItem.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
                    gvMultiCombineItem.DataSource = _invnetoryCombinAnalalize;
                    _isMultiCom = true;
                    ////   pnlMain.Enabled = false;
                    pnlMultiCombine.Visible = true;
                    gvMultiCombineItem.Focus();
                }
            return _isMultiCom;
        }

        private void txtSerialNo_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (chkPickGV.Checked)
            {
                IsDecimalAllow(false, sender, e);
            }
        }

        private void txtSerialNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
                btnSearch_Serial_Click(null, null);
            if (e.KeyCode == Keys.Enter)
                txtItem.Focus();
        }

        private void btnSearch_Serial_Click(object sender, EventArgs e)
        {
            try
            {
                if (!chkPickGV.Checked)
                {
                    this.Cursor = Cursors.WaitCursor;
                    _commonSearch = new CommonSearch.CommonSearch();
                    _commonSearch.ReturnIndex = 0;
                    _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.ItemAvailableSerial);
                    DataTable _result = CHNLSVC.CommonSearch.SearchAvlbleSerial4Invoice(_commonSearch.SearchParams, null, null);
                    _commonSearch.dvResult.DataSource = _result;
                    _commonSearch.BindUCtrlDDLData(_result);
                    _commonSearch.obj_TragetTextBox = txtSerialNo;
                    _commonSearch.IsSearchEnter = true;
                    this.Cursor = Cursors.Default;
                    _commonSearch.ShowDialog();
                    txtSerialNo.Select();
                }
                else
                {
                    this.Cursor = Cursors.WaitCursor;
                    _commonSearch = new CommonSearch.CommonSearch();
                    _commonSearch.ReturnIndex = 0;
                    _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.AvailableGiftVoucher);
                    DataTable _result = CHNLSVC.CommonSearch.SearchAvailableGiftVoucher(_commonSearch.SearchParams, null, null);
                    _commonSearch.dvResult.DataSource = _result;
                    _commonSearch.BindUCtrlDDLData(_result);
                    _commonSearch.obj_TragetTextBox = txtSerialNo;
                    this.Cursor = Cursors.Default;
                    _commonSearch.ShowDialog();
                    string[] _selectedText = null;
                    if (!string.IsNullOrEmpty(_commonSearch.obj_AllResult.Text))
                        _selectedText = _commonSearch.obj_AllResult.Text.Split('|');
                    txtSerialNo.Select();
                }
            }
            catch (Exception ex)
            { txtSerialNo.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnCash_Click(object sender, EventArgs e)
        {
            lblSelPayTpDesc.Text = "CASH";
            lblSelPayTp.Text = "CASH";

            textBoxAmount.Text = lblbalanceAmo.Text;

            if (btnPAdv.Enabled == false && btnPCC.Enabled == false && btnPChq.Enabled == false && btnPCN.Enabled == false && btnPDC.Enabled == false && btnPGV.Enabled == false && btnPLoy.Enabled == false && btnCC.Enabled == false && btnGV.Enabled == false && btnCN.Enabled == false)
                btnEnter_Click(null, null);
            else
                textBoxAmount.Focus();
        }

        private void btnCC_Click(object sender, EventArgs e)
        {
            pnlPay.Show();

            panelPermotion.Visible = true;
            pnlBankSlip.Visible = false;
            pnlCC.Visible = true;
            pnlCheque.Visible = false;
            pnlDebit.Visible = false;
            pnlOthers.Visible = false;
            pnlCash.Visible = false;
            pnlGiftVoucher.Visible = false;
            pnlGV.Visible = false;
            pnlLoyalty.Visible = false;
            pnlStar.Visible = false;

            panelPermotion.Visible = false;
            if (IsDutyFree)
            {
                textBoxCCBank.Text = "OTH";
                textBoxCCBank_Leave(null, null);
                LoadCardType(textBoxCCBank.Text);
            }
            //kapila 25/8/2014
            DataTable _DT1 = CHNLSVC.Sales.get_Def_dep_Bank(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "CRCD");
            if (_DT1.Rows.Count > 0)
                textBoxCCDepBank.Text = _DT1.Rows[0]["mpb_sun_ac"].ToString();

            lblSelPayTpDesc.Text = "CREDIT CARD";
            lblSelPayTp.Text = "CRCD";
            textBoxAmount.Text = lblbalanceAmo.Text;
            textBoxCCCardNo.Focus();
        }


        public void LoadRecieptGrid()
        {

            DataTable dt = new DataTable();
            dt.Columns.Add("SARD_PAY_TP");
            dt.Columns.Add("SARD_INV_NO");
            dt.Columns.Add("sard_chq_bank_cd");
            dt.Columns.Add("sard_chq_branch");
            dt.Columns.Add("sard_cc_tp");
            dt.Columns.Add("sard_anal_3");
            dt.Columns.Add("sard_settle_amt", typeof(decimal));
            dt.Columns.Add("Sard_ref_no");
            dt.Columns.Add("sard_anal_1");
            dt.Columns.Add("sard_anal_4");
            dt.Columns.Add("Sard_cc_period");
            foreach (RecieptItem ri in RecieptItemList)
            {
                DataRow dr = dt.NewRow();
                if (ri.Sard_pay_tp == CommonUIDefiniton.PayMode.CHEQUE.ToString())
                {

                    dr[0] = ri.Sard_pay_tp;
                    dr[1] = ri.Sard_inv_no;
                    dr[2] = ri.Sard_chq_bank_cd;
                    dr[3] = ri.Sard_chq_branch;
                    dr[4] = ri.Sard_cc_tp;
                    dr[5] = ri.Sard_anal_3;
                    dr[6] = ri.Sard_settle_amt;
                    dr[7] = ri.Sard_ref_no;
                    dr[8] = ri.Sard_anal_1;
                    dr[9] = ri.Sard_anal_4;
                }
                else if (ri.Sard_pay_tp == CommonUIDefiniton.PayMode.CRCD.ToString())
                {
                    dr[0] = ri.Sard_pay_tp;
                    dr[1] = ri.Sard_inv_no;
                    dr[2] = ri.Sard_credit_card_bank;
                    dr[3] = ri.Sard_chq_branch;
                    dr[4] = ri.Sard_cc_tp;
                    dr[5] = ri.Sard_anal_3;
                    dr[6] = ri.Sard_settle_amt;
                    dr[7] = ri.Sard_ref_no;
                    dr[8] = ri.Sard_anal_1;
                    dr[9] = ri.Sard_anal_4;
                    dr[10] = ri.Sard_cc_period;
                }
                else
                {
                    dr[0] = ri.Sard_pay_tp;
                    dr[1] = ri.Sard_inv_no;
                    dr[2] = ri.Sard_chq_bank_cd;
                    dr[3] = ri.Sard_chq_branch;
                    dr[4] = ri.Sard_cc_tp;
                    dr[5] = ri.Sard_anal_3;
                    dr[6] = ri.Sard_settle_amt;
                    dr[7] = ri.Sard_ref_no;
                    dr[8] = ri.Sard_anal_1;
                    dr[9] = ri.Sard_anal_4;
                }
                dt.Rows.Add(dr);
            }

            dataGridViewPayments.AutoGenerateColumns = false;
            dataGridViewPayments.DataSource = dt;

        }

        private bool CheckBank(string bank, Label lbl)
        {
            MasterOutsideParty _bankAccounts = new MasterOutsideParty();
            if (!string.IsNullOrEmpty(bank))
            {
                _bankAccounts = CHNLSVC.Sales.GetOutSidePartyDetailsById(bank.ToUpper().Trim());

                if (_bankAccounts.Mbi_cd != null)
                {
                    if (_paymentTypeRef == null)
                    {
                        List<PaymentType> _paymentTypeRef1 = CHNLSVC.Sales.GetPossiblePaymentTypes_new(BaseCls.GlbUserComCode, BaseCls.GlbDefSubChannel, BaseCls.GlbUserDefProf, InvoiceType, DateTime.Now.Date, 1);
                        _paymentTypeRef = _paymentTypeRef1;
                    }
                    if (_paymentTypeRef.Count <= 0)
                    {
                        List<PaymentType> _paymentTypeRef1 = CHNLSVC.Sales.GetPossiblePaymentTypes_new(BaseCls.GlbUserComCode, BaseCls.GlbDefSubChannel, BaseCls.GlbUserDefProf, InvoiceType, DateTime.Now.Date, 1);
                        _paymentTypeRef = _paymentTypeRef1;
                    }

                    var _promo = (from _prom in _paymentTypeRef
                                  where _prom.Stp_pay_tp == lblSelPayTp.Text
                                  select _prom).ToList();

                    foreach (PaymentType _type in _promo)
                    {
                        if (_type.Stp_pd != null && _type.Stp_pd > 0 && _type.Stp_bank == textBoxCCBank.Text && _type.Stp_from_dt.Date <= DateTime.Now.Date && _type.Stp_to_dt.Date >= DateTime.Now.Date)
                        {
                            panelPermotion.Visible = true;
                            chkIsPromo.Checked = false;

                        }

                    }
                    lbl.Text = _bankAccounts.Mbi_desc;
                    return true;
                }
                else
                {
                    MessageBox.Show("Please select the valid bank.", "Invild Bank", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return false;
                }
            }
            return false;

        }

        private bool CheckBankBranch(string bank, string branch)
        {
            if (!string.IsNullOrEmpty(branch))
            {
                MasterOutsideParty _bankAccounts = CHNLSVC.Sales.GetOutSidePartyDetailsById(bank.ToUpper().Trim());
                if (_bankAccounts != null)
                {
                    bool valid = CHNLSVC.Sales.validateBank_and_Branch(_bankAccounts.Mbi_cd, branch, "BANK");
                    MessageBox.Show("Bank and Branch code mismatch", "Invild Bank", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return valid;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }

        private List<PaymentType> GetBankChgPAyTypes(List<PaymentType> _paymentTypeRef)
        {
            try
            {
                /*
                 * 01.get pay modes which have bank chg rate >0 or bank chg val>0
                 * 02.check for bank
                 * 03.check item serial
                 * 04.check promo
                 * 05.check item
                 * 06.check brand cat1,cat 3
                 * 07.cehck brand cat1
                 * 07.check brand cat2
                 * 08.check brand
                 * 09.chk pb plvel
                 * 
                 */
                //GET PAYTYPES WHICH HAVE BANK CHG>0
                int _promo;
                bool isMatchFound = false;
                int _maxPeriod = 0;
                try
                {
                    _promo = Convert.ToInt32(txtPromo.Text);
                }
                catch (Exception) { _promo = 0; }

                //_paymentTypeRef = (from _res in _paymentTypeRef
                //                   where _res.Stp_bank_chg_rt > 0 || _res.Stp_bank_chg_val > 0
                //                   orderby _res.Stp_pd
                //                   select _res).ToList<PaymentType>();

                if (_paymentTypeRef != null && _paymentTypeRef.Count > 0)
                {
                    /*
                    //IF ANY PAYMODE DO NOT HAVE BANK,ITEM,SERIAL,PROMOTION RETURN ALL
                   List<PaymentType> _temp = (from _res in _paymentTypeRef
                                       where !string.IsNullOrEmpty(_res.Stp_bank) || !string.IsNullOrEmpty(_res.Stp_brd) || !string.IsNullOrEmpty(_res.Stp_main_cat) ||
                                       !string.IsNullOrEmpty(_res.Stp_cat) || !string.IsNullOrEmpty(_res.Stp_itm) || !string.IsNullOrEmpty(_res.Stp_pro) ||
                                       !string.IsNullOrEmpty(_res.Stp_ser) || !string.IsNullOrEmpty(_res.Stp_pb) || !string.IsNullOrEmpty(_res.Stp_pb_lvl)
                                       select _res).ToList<PaymentType>();

                   if (_temp != null && _temp.Count > 0)
                   {
                       _paymentTypeRef = _temp;
                   }
                   else {
                       return _paymentTypeRef;
                   }
                    */



                }
                else
                {
                    return _paymentTypeRef;
                }

                #region Check payment type LINQ method
                if (_LINQ_METHOD == true)
                {
                    if (_paymentTypeRef != null && _paymentTypeRef.Count > 0)
                    {
                        List<PaymentType> _tem = new List<PaymentType>();
                        //check item/serail
                        if (SerialList != null && SerialList.Count > 0)
                        {
                            if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                            {
                                _tem = new List<PaymentType>();
                                var _promo1 = (from p in _paymentTypeRef
                                               from i in InvoiceItemList
                                               from s in SerialList
                                               where (p.Stp_bank == null || p.Stp_bank == textBoxCCBank.Text.ToString()) &&
                                               (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_cat == null || p.Stp_cat == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                                               (p.Stp_pb == i.Sad_pbook || p.Stp_pb == null || p.Stp_pb == "") &&
                                               (p.Stp_pb_lvl == i.Sad_pb_lvl || p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                               (p.Stp_itm == i.Sad_itm_cd) && (p.Stp_itm == s.Sap_itm_cd) && (s.Sap_itm_cd != null) && (s.Sap_itm_cd != "") &&
                                               (p.Stp_ser == s.Sap_ser_1) && (s.Sap_ser_1 != null) && (s.Sap_ser_1 != "") && (s.Sap_ser_1 != "N/A") && (p.Stp_pro == null || p.Stp_pro == "")
                                               select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                                foreach (var _type in _promo1)
                                {
                                    isMatchFound = true;
                                    _maxPeriod = _type.Stp_pd;
                                    if (_type.Stp_pd == _promo) _tem.Add(_type);
                                }
                                if (_tem != null && _tem.Count > 0) return _tem;
                            }
                        }

                        //check promo
                        if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                        {
                            _tem = new List<PaymentType>();
                            var _promo1 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_bank == null || p.Stp_bank == textBoxCCBank.Text.ToString()) &&
                                           (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_cat == null || p.Stp_cat == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                                           (p.Stp_pb == i.Sad_pbook || p.Stp_pb == null || p.Stp_pb == "") &&
                                           (p.Stp_pb_lvl == i.Sad_pb_lvl || p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                           (p.Stp_pro == i.Sad_promo_cd) && (p.Stp_pro != null) && (p.Stp_pro != "")
                                           select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                            foreach (var _type in _promo1)
                            {
                                isMatchFound = true;
                                _maxPeriod = _type.Stp_pd;
                                if (_type.Stp_pd == _promo) _tem.Add(_type);
                            }
                            if (_tem != null && _tem.Count > 0) return _tem;
                        }

                        //check item + Specify bank
                        if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                        {
                            _tem = new List<PaymentType>();
                            var _promo1 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_bank == textBoxCCBank.Text.ToString()) &&
                                           (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_cat == null || p.Stp_cat == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                                           (p.Stp_pb == i.Sad_pbook || p.Stp_pb == null || p.Stp_pb == "") &&
                                           (p.Stp_pb_lvl == i.Sad_pb_lvl || p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                           (p.Stp_itm == i.Sad_itm_cd) && (p.Stp_itm != null) && (p.Stp_itm != "") && (p.Stp_pro == null || p.Stp_pro == "") && (i.Sad_is_promo == false)
                                           select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                            foreach (var _type in _promo1)
                            {
                                isMatchFound = true;
                                _maxPeriod = _type.Stp_pd;
                                if (_type.Stp_pd == _promo) _tem.Add(_type);
                            }
                            if (_tem != null && _tem.Count > 0) return _tem;
                        }

                        //check item
                        if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                        {
                            _tem = new List<PaymentType>();
                            var _promo1 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_bank == null || p.Stp_bank == "") &&
                                           (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_cat == null || p.Stp_cat == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                                           (p.Stp_pb == i.Sad_pbook || p.Stp_pb == null || p.Stp_pb == "") &&
                                           (p.Stp_pb_lvl == i.Sad_pb_lvl || p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                           (p.Stp_itm == i.Sad_itm_cd) && (p.Stp_itm != null) && (p.Stp_itm != "") && (p.Stp_pro == null || p.Stp_pro == "") && (i.Sad_is_promo == false)
                                           select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                            foreach (var _type in _promo1)
                            {
                                isMatchFound = true;
                                _maxPeriod = _type.Stp_pd;
                                if (_type.Stp_pd == _promo) _tem.Add(_type);
                            }
                            if (_tem != null && _tem.Count > 0) return _tem;
                        }

                        //check brand/cat1/cat2
                        if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                        {
                            _tem = new List<PaymentType>();
                            //check brand/cat1/cat2
                            var _promo1 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_bank == null || p.Stp_bank == textBoxCCBank.Text.ToString() || p.Stp_bank == "") && (p.Stp_pro == null || p.Stp_pro == "") &&
                                           (p.Stp_pb == i.Sad_pbook || p.Stp_pb == null || p.Stp_pb == "") &&
                                           (p.Stp_pb_lvl == i.Sad_pb_lvl || p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                           (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "") &&
                                           (p.Stp_main_cat == i.Mi_cate_1) && (p.Stp_main_cat != null) && (p.Stp_main_cat != "") &&
                                           (p.Stp_cat == i.Mi_cate_2) && (p.Stp_cat != null) && (p.Stp_cat != "") && (i.Sad_is_promo == false)
                                           select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                            foreach (var _type in _promo1)
                            {
                                isMatchFound = true;
                                _maxPeriod = _type.Stp_pd;
                                if (_type.Stp_pd == _promo) _tem.Add(_type);
                            }
                            if (_tem != null && _tem.Count > 0) return _tem;

                            _tem = new List<PaymentType>();
                            //check brand/cat1
                            var _promo2 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_bank == null || p.Stp_bank == textBoxCCBank.Text.ToString() || p.Stp_bank == "") && (p.Stp_pro == null || p.Stp_pro == "") &&
                                           (p.Stp_cat == null || p.Stp_cat == "") &&
                                           (p.Stp_pb == i.Sad_pbook || p.Stp_pb == null || p.Stp_pb == "") &&
                                           (p.Stp_pb_lvl == i.Sad_pb_lvl || p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                           (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "") &&
                                           (p.Stp_main_cat == i.Mi_cate_1) && (p.Stp_main_cat != null) && (p.Stp_main_cat != "") && (i.Sad_is_promo == false)
                                           select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                            foreach (var _type in _promo2)
                            {
                                isMatchFound = true;
                                _maxPeriod = _type.Stp_pd;
                                if (_type.Stp_pd == _promo) _tem.Add(_type);
                            }
                            if (_tem != null && _tem.Count > 0) return _tem;

                            _tem = new List<PaymentType>();
                            //check brand/cat2
                            var _promo3 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_bank == null || p.Stp_bank == textBoxCCBank.Text.ToString()) && (p.Stp_pro == null || p.Stp_pro == "") &&
                                           (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                                           (p.Stp_pb == i.Sad_pbook || p.Stp_pb == null || p.Stp_pb == "") &&
                                           (p.Stp_pb_lvl == i.Sad_pb_lvl || p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                           (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "") &&
                                           (p.Stp_cat == i.Mi_cate_2) && (p.Stp_cat != null) && (p.Stp_cat != "") && (i.Sad_is_promo == false)
                                           select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                            foreach (var _type in _promo3)
                            {
                                isMatchFound = true;
                                _maxPeriod = _type.Stp_pd;
                                if (_type.Stp_pd == _promo) _tem.Add(_type);
                            }
                            if (_tem != null && _tem.Count > 0) return _tem;

                            _tem = new List<PaymentType>();
                            //check brand
                            var _promo4 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_bank == null || p.Stp_bank == textBoxCCBank.Text.ToString()) && (p.Stp_pro == null || p.Stp_pro == "") &&
                                           (p.Stp_main_cat == null || p.Stp_main_cat == "") && (p.Stp_cat == null || p.Stp_cat == "") &&
                                           (p.Stp_pb == i.Sad_pbook || p.Stp_pb == null || p.Stp_pb == "") &&
                                           (p.Stp_pb_lvl == i.Sad_pb_lvl || p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                           (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "") && (i.Sad_is_promo == false)
                                           select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                            foreach (var _type in _promo4)
                            {
                                isMatchFound = true;
                                _maxPeriod = _type.Stp_pd;
                                if (_type.Stp_pd == _promo) _tem.Add(_type);
                            }
                            if (_tem != null && _tem.Count > 0) return _tem;


                            _tem = new List<PaymentType>();
                            //check cat1 WITH bank and pb and level
                            var _promo10 = (from p in _paymentTypeRef
                                            from i in InvoiceItemList
                                            where (p.Stp_bank == textBoxCCBank.Text.ToString()) && (p.Stp_pro == null || p.Stp_pro == "") &&
                                            (p.Stp_cat == null || p.Stp_cat == "") &&
                                            (p.Stp_pb == i.Sad_pbook) &&
                                            (p.Stp_pb_lvl == i.Sad_pb_lvl) &&
                                            (p.Stp_brd != null || p.Stp_brd != "") &&
                                            (p.Stp_main_cat == i.Mi_cate_1) && (i.Sad_is_promo == false)
                                            select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                            foreach (var _type in _promo10)
                            {
                                isMatchFound = true;
                                _maxPeriod = _type.Stp_pd;
                                if (_type.Stp_pd == _promo) _tem.Add(_type);
                            }
                            if (_tem != null && _tem.Count > 0) return _tem;

                            _tem = new List<PaymentType>();
                            //check cat1 WITH OUT bank and pb and level :: Chamal 14-Nov-2014 
                            var _promo11 = (from p in _paymentTypeRef
                                            from i in InvoiceItemList
                                            where (p.Stp_bank == null || p.Stp_bank == "") && (p.Stp_pro == null || p.Stp_pro == "") &&
                                           (p.Stp_cat == null || p.Stp_cat == "") &&
                                           (p.Stp_pb == i.Sad_pbook) &&
                                           (p.Stp_pb_lvl == i.Sad_pb_lvl) &&
                                           (p.Stp_brd != null || p.Stp_brd != "") &&
                                           (p.Stp_main_cat == i.Mi_cate_1) && (i.Sad_is_promo == false)
                                            select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                            foreach (var _type in _promo10)
                            {
                                isMatchFound = true;
                                _maxPeriod = _type.Stp_pd;
                                if (_type.Stp_pd == _promo) _tem.Add(_type);
                            }
                            if (_tem != null && _tem.Count > 0) return _tem;

                            _tem = new List<PaymentType>();
                            //check cat1/cat2 + BANK
                            var _promo50 = (from p in _paymentTypeRef
                                            from i in InvoiceItemList
                                            where (p.Stp_bank == textBoxCCBank.Text.ToString()) && (p.Stp_pro == null || p.Stp_pro == "") &&
                                            (p.Stp_pb == i.Sad_pbook) &&
                                            (p.Stp_pb_lvl == i.Sad_pb_lvl) &&
                                            (p.Stp_brd == null || p.Stp_brd == "") &&
                                            (p.Stp_main_cat == i.Mi_cate_1) && (p.Stp_main_cat != null || p.Stp_main_cat != "") &&
                                            (p.Stp_cat == i.Mi_cate_2) && (p.Stp_cat != null || p.Stp_cat != "") && (i.Sad_is_promo == false)
                                            select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                            foreach (var _type in _promo50)
                            {
                                isMatchFound = true;
                                _maxPeriod = _type.Stp_pd;
                                if (_type.Stp_pd == _promo) _tem.Add(_type);
                            }
                            if (_tem != null && _tem.Count > 0) return _tem;


                            _tem = new List<PaymentType>();
                            //check cat1/cat2 WITH OUT BRAND
                            var _promo52 = (from p in _paymentTypeRef
                                            from i in InvoiceItemList
                                            where (p.Stp_bank == null || p.Stp_bank == textBoxCCBank.Text.ToString() || p.Stp_bank == "") && (p.Stp_pro == null || p.Stp_pro == "") &&
                                            (p.Stp_pb == i.Sad_pbook || p.Stp_pb == null || p.Stp_pb == "") &&
                                            (p.Stp_pb_lvl == i.Sad_pb_lvl || p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                            (p.Stp_brd == null || p.Stp_brd == "") &&
                                            (p.Stp_main_cat == i.Mi_cate_1) && (p.Stp_main_cat != null) && (p.Stp_main_cat != "") &&
                                            (p.Stp_cat == i.Mi_cate_2) && (p.Stp_cat != null) && (p.Stp_cat != "") && (i.Sad_is_promo == false)
                                            select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                            foreach (var _type in _promo52)
                            {
                                isMatchFound = true;
                                _maxPeriod = _type.Stp_pd;
                                if (_type.Stp_pd == _promo) _tem.Add(_type);
                            }
                            if (_tem != null && _tem.Count > 0) return _tem;

                            _tem = new List<PaymentType>();
                            //check cat1 + WITH OUT BANK + PRICE BOOK + LEVEL
                            var _promo53 = (from p in _paymentTypeRef
                                            from i in InvoiceItemList
                                            where (p.Stp_bank == null || p.Stp_bank == textBoxCCBank.Text.ToString() || p.Stp_bank == "") && (p.Stp_pro == null || p.Stp_pro == "") &&
                                            (p.Stp_pb == i.Sad_pbook || p.Stp_pb == null || p.Stp_pb == "") &&
                                            (p.Stp_pb_lvl == i.Sad_pb_lvl || p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                            (p.Stp_brd == null || p.Stp_brd == "") &&
                                            (p.Stp_main_cat == i.Mi_cate_1) && (p.Stp_main_cat != null) && (p.Stp_main_cat != "") &&
                                            (p.Stp_cat == null || p.Stp_cat == "") && (i.Sad_is_promo == false)
                                            select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                            foreach (var _type in _promo53)
                            {
                                isMatchFound = true;
                                _maxPeriod = _type.Stp_pd;
                                if (_type.Stp_pd == _promo) _tem.Add(_type);
                            }
                            if (_tem != null && _tem.Count > 0) return _tem;
                        }



                        //check pb plvel with bank
                        if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                        {
                            _tem = new List<PaymentType>();
                            var _promo1 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_bank == textBoxCCBank.Text.ToString()) && (p.Stp_pro == null || p.Stp_pro == "") &&
                                           (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_cat == null || p.Stp_cat == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                                           (p.Stp_itm == null || p.Stp_itm == "") && (p.Stp_ser == null || p.Stp_ser == "") &&
                                           (p.Stp_pb == i.Sad_pbook || p.Stp_pb == null || p.Stp_pb == "") &&
                                           (p.Stp_pb_lvl == i.Sad_pb_lvl || p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") && (i.Sad_is_promo == false)
                                           select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                            foreach (var _type in _promo1)
                            {
                                isMatchFound = true;
                                _maxPeriod = _type.Stp_pd;
                                if (_type.Stp_pd == _promo) _tem.Add(_type);
                            }
                            if (_tem != null && _tem.Count > 0) return _tem;
                        }

                        //check pb plvel 
                        if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                        {
                            _tem = new List<PaymentType>();
                            var _promo1 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_bank == null || p.Stp_bank == "") && (p.Stp_pro == null || p.Stp_pro == "") &&
                                           (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_cat == null || p.Stp_cat == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                                           (p.Stp_itm == null || p.Stp_itm == "") && (p.Stp_ser == null || p.Stp_ser == "") &&
                                           (p.Stp_pb == i.Sad_pbook) &&
                                           (p.Stp_pb_lvl == i.Sad_pb_lvl) && (i.Sad_is_promo == false)
                                           select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                            foreach (var _type in _promo1)
                            {
                                isMatchFound = true;
                                _maxPeriod = _type.Stp_pd;
                                if (_type.Stp_pd == _promo) _tem.Add(_type);
                            }
                            if (_tem != null && _tem.Count > 0) return _tem;
                        }

                        //check promo for any bank
                        if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                        {
                            _tem = new List<PaymentType>();
                            var _promo1 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_bank == null || p.Stp_bank == "") &&
                                           (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_cat == null || p.Stp_cat == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                                           (p.Stp_pb == i.Sad_pbook) &&
                                           (p.Stp_pb_lvl == i.Sad_pb_lvl) &&
                                           (p.Stp_pro == i.Sad_promo_cd) && (p.Stp_pro != null) && (p.Stp_pro != "")
                                           select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                            foreach (var _type in _promo1)
                            {
                                isMatchFound = true;
                                _maxPeriod = _type.Stp_pd;
                                if (_type.Stp_pd == _promo) _tem.Add(_type);
                            }
                            if (_tem != null && _tem.Count > 0) return _tem;
                        }


                        //check common - Add by Darshana 17-07-2014, remove by Chamal 17-07-2014
                        //if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                        //{
                        //    _tem = new List<PaymentType>();
                        //    var _promo1 = (from p in _paymentTypeRef
                        //                   from i in InvoiceItemList
                        //                   where (p.Stp_bank == null || p.Stp_bank == "") && (p.Stp_pro == null || p.Stp_pro == "") &&
                        //                   (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_cat == null || p.Stp_cat == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                        //                   (p.Stp_itm == null || p.Stp_itm == "") && (p.Stp_ser == null || p.Stp_ser == "") &&
                        //                   (p.Stp_pb == null || p.Stp_pb == "") &&
                        //                   (p.Stp_pb_lvl == null || p.Stp_pb_lvl == "")
                        //                   select p).ToList().Distinct();
                        //    foreach (var _type in _promo1)
                        //    {
                        //        isMatchFound = true;
                        //        _maxPeriod = _type.Stp_pd;
                        //        if (_type.Stp_pd == _promo) _tem.Add(_type);
                        //    }
                        //    if (_tem != null && _tem.Count > 0) return _tem;
                        //}

                    }
                }
                #endregion

                #region Check payment type looping method
                if (_LINQ_METHOD == false)
                {
                    for (int i = 0; i < _paymentTypeRef.Count; i++)
                    {
                        //CHECK for Bank
                        if (_paymentTypeRef[i].Stp_bank == textBoxCCBank.Text || string.IsNullOrEmpty(_paymentTypeRef[i].Stp_bank))
                        {

                            //check item/serail
                            if (SerialList != null) if (SerialList.Count > 0)
                                    if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                                        foreach (InvoiceItem _itm in InvoiceItemList)
                                        {
                                            var seriallist = SerialList.Where(x => x.Sap_itm_cd == _itm.Sad_itm_cd && x.Sap_ser_1 != "N/A" && !string.IsNullOrEmpty(x.Sap_ser_1)).ToList();
                                            foreach (InvoiceSerial _serial in seriallist)
                                            {
                                                {
                                                    if (!string.IsNullOrEmpty(_paymentTypeRef[i].Stp_ser) && !string.IsNullOrEmpty(_paymentTypeRef[i].Stp_itm) && (string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb) || _paymentTypeRef[i].Stp_pb == _itm.Sad_pbook) && (string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb_lvl) || _paymentTypeRef[i].Stp_pb_lvl == _itm.Sad_pb_lvl) && _paymentTypeRef[i].Stp_ser == _serial.Sap_ser_1 && _paymentTypeRef[i].Stp_itm == _itm.Sad_itm_cd && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_brd) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_main_cat) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_cat))
                                                    {
                                                        isMatchFound = true;
                                                        _maxPeriod = _paymentTypeRef[i].Stp_pd;

                                                        if (_paymentTypeRef[i].Stp_pd == _promo)
                                                        {
                                                            List<PaymentType> _tem = new List<PaymentType>();
                                                            _tem.Add(_paymentTypeRef[i]);
                                                            return _tem;
                                                        }

                                                    }
                                                }

                                            }
                                        }
                            //check promo
                            if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                            {
                                foreach (InvoiceItem _itm in InvoiceItemList)
                                {
                                    {
                                        if ((string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb) || _paymentTypeRef[i].Stp_pb == _itm.Sad_pbook) && (string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb_lvl) || _paymentTypeRef[i].Stp_pb_lvl == _itm.Sad_pb_lvl) && !string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pro) && _paymentTypeRef[i].Stp_pro == _itm.Sad_promo_cd && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_brd) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_main_cat) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_cat))
                                        {
                                            isMatchFound = true;
                                            _maxPeriod = _paymentTypeRef[i].Stp_pd;
                                            if (_paymentTypeRef[i].Stp_pd == _promo)
                                            {
                                                List<PaymentType> _tem = new List<PaymentType>();
                                                _tem.Add(_paymentTypeRef[i]);
                                                return _tem;
                                            }
                                        }
                                    }
                                }
                            }

                            //check item
                            if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                            {
                                foreach (InvoiceItem _itm in InvoiceItemList)
                                {
                                    {
                                        if ((string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb) || _paymentTypeRef[i].Stp_pb == _itm.Sad_pbook) && (string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb_lvl) || _paymentTypeRef[i].Stp_pb_lvl == _itm.Sad_pb_lvl) && !string.IsNullOrEmpty(_paymentTypeRef[i].Stp_itm) && _paymentTypeRef[i].Stp_itm == _itm.Sad_itm_cd && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_brd) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_main_cat) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_cat))
                                        {
                                            isMatchFound = true;
                                            _maxPeriod = _paymentTypeRef[i].Stp_pd;
                                            if (_paymentTypeRef[i].Stp_pd == _promo)
                                            {
                                                List<PaymentType> _tem = new List<PaymentType>();
                                                _tem.Add(_paymentTypeRef[i]);
                                                return _tem;
                                            }
                                        }
                                    }
                                }
                            }
                            //check brand/cat1/cat 2
                            if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                            {
                                foreach (InvoiceItem _itm in InvoiceItemList)
                                {
                                    {
                                        MasterItem _ii = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _itm.Sad_itm_cd);
                                        if (_ii == null)
                                            return null;

                                        if ((string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb) || _paymentTypeRef[i].Stp_pb == _itm.Sad_pbook) && (string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb_lvl) || _paymentTypeRef[i].Stp_pb_lvl == _itm.Sad_pb_lvl) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pro) && _paymentTypeRef[i].Stp_brd == _ii.Mi_brand && _paymentTypeRef[i].Stp_main_cat == _ii.Mi_cate_1 && _paymentTypeRef[i].Stp_cat == _itm.Mi_cate_2)
                                        {
                                            isMatchFound = true;
                                            _maxPeriod = _paymentTypeRef[i].Stp_pd;
                                            if (_paymentTypeRef[i].Stp_pd == _promo)
                                            {
                                                List<PaymentType> _tem = new List<PaymentType>();
                                                _tem.Add(_paymentTypeRef[i]);
                                                return _tem;
                                            }
                                        }
                                        if ((string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb) || _paymentTypeRef[i].Stp_pb == _itm.Sad_pbook) && (string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb_lvl) || _paymentTypeRef[i].Stp_pb_lvl == _itm.Sad_pb_lvl) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pro) && _paymentTypeRef[i].Stp_brd == _ii.Mi_brand && _paymentTypeRef[i].Stp_main_cat == _ii.Mi_cate_1 && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_cat))
                                        {
                                            isMatchFound = true;
                                            _maxPeriod = _paymentTypeRef[i].Stp_pd;
                                            if (_paymentTypeRef[i].Stp_pd == _promo)
                                            {
                                                List<PaymentType> _tem = new List<PaymentType>();
                                                _tem.Add(_paymentTypeRef[i]);
                                                return _tem;
                                            }
                                        }
                                        //check brand/cat2
                                        if ((string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb) || _paymentTypeRef[i].Stp_pb == _itm.Sad_pbook) && (string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb_lvl) || _paymentTypeRef[i].Stp_pb_lvl == _itm.Sad_pb_lvl) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pro) && _paymentTypeRef[i].Stp_brd == _ii.Mi_brand && _paymentTypeRef[i].Stp_cat == _ii.Mi_cate_2 && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_main_cat))
                                        {
                                            isMatchFound = true;
                                            _maxPeriod = _paymentTypeRef[i].Stp_pd;
                                            if (_paymentTypeRef[i].Stp_pd == _promo)
                                            {
                                                List<PaymentType> _tem = new List<PaymentType>();
                                                _tem.Add(_paymentTypeRef[i]);
                                                return _tem;
                                            }
                                        }
                                        //check brand
                                        if ((string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb) || _paymentTypeRef[i].Stp_pb == _itm.Sad_pbook) && (string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pb_lvl) || _paymentTypeRef[i].Stp_pb_lvl == _itm.Sad_pb_lvl) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pro) && _paymentTypeRef[i].Stp_brd == _ii.Mi_brand && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_cat) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_main_cat))
                                        {
                                            isMatchFound = true;
                                            _maxPeriod = _paymentTypeRef[i].Stp_pd;
                                            if (_paymentTypeRef[i].Stp_pd == _promo)
                                            {
                                                List<PaymentType> _tem = new List<PaymentType>();
                                                _tem.Add(_paymentTypeRef[i]);
                                                return _tem;
                                            }
                                        }
                                    }
                                }
                            }
                            //pb plvel
                            if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                            {
                                foreach (InvoiceItem _itm in InvoiceItemList)
                                {
                                    {

                                        if (string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pro) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_brd) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_cat) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_main_cat)
                                            && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_itm) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_ser) && _paymentTypeRef[i].Stp_pb == _itm.Sad_pbook && _paymentTypeRef[i].Stp_pb_lvl == _itm.Sad_pb_lvl)
                                        {
                                            isMatchFound = true;
                                            _maxPeriod = _paymentTypeRef[i].Stp_pd;
                                            if (_paymentTypeRef[i].Stp_pd == _promo)
                                            {
                                                List<PaymentType> _tem = new List<PaymentType>();
                                                _tem.Add(_paymentTypeRef[i]);
                                                return _tem;
                                            }
                                        }
                                    }

                                }
                            }
                        }
                    }
                }
                #endregion

                if (isMatchFound)
                {
                    List<PaymentType> _temp1 = (from _res in _paymentTypeRef
                                                where string.IsNullOrEmpty(_res.Stp_bank) && string.IsNullOrEmpty(_res.Stp_brd) && string.IsNullOrEmpty(_res.Stp_main_cat) &&
                                                string.IsNullOrEmpty(_res.Stp_cat) && string.IsNullOrEmpty(_res.Stp_itm) && string.IsNullOrEmpty(_res.Stp_pro) &&
                                                string.IsNullOrEmpty(_res.Stp_ser) && string.IsNullOrEmpty(_res.Stp_pb) && string.IsNullOrEmpty(_res.Stp_pb_lvl)
                                                select _res).ToList<PaymentType>();

                    if (_temp1 != null && _temp1.Count > 0)
                    {
                        foreach (PaymentType pay in _temp1)
                        {
                            if (pay.Stp_pd == _promo)
                            {
                                List<PaymentType> _tem = new List<PaymentType>();
                                _tem.Add(pay);
                                return _tem;
                            }
                        }
                        return null;
                    }
                    else
                    {
                        return null;
                    }
                }
                else
                {
                    if (_promo == 0)
                    {
                        List<PaymentType> _temp = (from _res in _paymentTypeRef
                                                   where string.IsNullOrEmpty(_res.Stp_bank) && string.IsNullOrEmpty(_res.Stp_brd) && string.IsNullOrEmpty(_res.Stp_main_cat) &&
                                                   string.IsNullOrEmpty(_res.Stp_cat) && string.IsNullOrEmpty(_res.Stp_itm) && string.IsNullOrEmpty(_res.Stp_pro) &&
                                                   string.IsNullOrEmpty(_res.Stp_ser) && string.IsNullOrEmpty(_res.Stp_pb) && string.IsNullOrEmpty(_res.Stp_pb_lvl) && (Convert.ToString(_res.Stp_pd) == null || Convert.ToString(_res.Stp_pd) == "" || _res.Stp_pd == 0)
                                                   select _res).ToList<PaymentType>();
                        return _temp;
                    }
                    else
                    {
                        List<PaymentType> _temp1 = (from _res in _paymentTypeRef
                                                    where string.IsNullOrEmpty(_res.Stp_bank) && string.IsNullOrEmpty(_res.Stp_brd) && string.IsNullOrEmpty(_res.Stp_main_cat) &&
                                                    string.IsNullOrEmpty(_res.Stp_cat) && string.IsNullOrEmpty(_res.Stp_itm) && string.IsNullOrEmpty(_res.Stp_pro) &&
                                                    string.IsNullOrEmpty(_res.Stp_ser) && string.IsNullOrEmpty(_res.Stp_pb) && string.IsNullOrEmpty(_res.Stp_pb_lvl) && (_res.Stp_pd == _promo)
                                                    select _res).ToList<PaymentType>();
                        return _temp1;
                    }


                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error); CHNLSVC.CloseChannel();
                return _paymentTypeRef;
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void btnEnter_Click(object sender, EventArgs e)
        {
            try
            {


                //DateTime _date=CHNLSVC.Security.GetServerDateTime();
                //return if no amount
                if (Convert.ToDecimal(lblGrndTotalAmount.Text) == 0 && !IsZeroAllow)
                {
                    return;
                }
                decimal factor = 1;
                Int32 _period = 0;
                if (chkIsPromo.Checked)
                {

                    try
                    {
                        if (Convert.ToInt32(comboBoxPermotion.SelectedItem) <= 0)
                        {
                            MessageBox.Show("Please select the valid period", "Payment period", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                    }
                    catch
                    {
                        _period = 0;
                    }
                }

                //get deposit bank mandatory
                bool _depMandatory = false;
                DataTable MasterChannel = CacheLayer.Get<DataTable>(CacheLayer.Key.ChannelDefinition.ToString());
                if (MasterChannel != null)
                {
                    if (MasterChannel.Rows.Count > 0)
                    {
                        if (!IsZeroAllow)
                        {
                            _depMandatory = (MasterChannel.Rows[0]["MSC_IS_DEPOSIT_MAN"].ToString()) == "1" ? true : false;
                        }
                    }

                }

                decimal _payAmount = 0;
                decimal _balGiven = 0;
                if (RecieptItemList == null || RecieptItemList.Count == 0)
                {
                    RecieptItemList = new List<RecieptItem>();
                }

                if (string.IsNullOrEmpty(lblSelPayTp.Text)) { MessageBox.Show("Please select the valid payment type", "Payment type", MessageBoxButtons.OK, MessageBoxIcon.Information); return; }
                if (string.IsNullOrEmpty(textBoxAmount.Text)) { MessageBox.Show("Please select the valid pay amount", "Payment amount", MessageBoxButtons.OK, MessageBoxIcon.Information); return; }
                try
                {
                    if (!IsZeroAllow)
                    {
                        if (Convert.ToDecimal(textBoxAmount.Text) <= 0)
                        { MessageBox.Show("Please select the valid pay amount", "Payment amount", MessageBoxButtons.OK, MessageBoxIcon.Information); return; }
                    }
                    else
                    {
                        if (Convert.ToDecimal(textBoxAmount.Text) < 0)
                        { MessageBox.Show("Please select the valid pay amount", "Payment amount", MessageBoxButtons.OK, MessageBoxIcon.Information); return; }
                    }
                }
                catch (Exception)
                {
                    MessageBox.Show("Please select the valid pay amount", "Payment amount", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                if (lblSelPayTp.Text == "BANK_SLIP")
                {
                    if (textBoxAccNo.Text == "")
                    {
                        MessageBox.Show("Please enter account number", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }

                }
                if (lblSelPayTp.Text == "GVS")
                {
                    if (string.IsNullOrEmpty(txtGVRef.Text))
                    {
                        MessageBox.Show("Please select ref no", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }
                }


                if (lblSelPayTp.Text == "CHEQUE")
                {
                    if (string.IsNullOrEmpty(textBoxChequeNo.Text))
                    {
                        if (lblSelPayTp.Text == "CRCD")
                            MessageBox.Show("Please enter the card no", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        else
                            MessageBox.Show("Please enter the cheque no", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        textBoxChequeNo.Focus(); return;
                    }
                    if (string.IsNullOrEmpty(textBoxChqBank.Text)) { MessageBox.Show("Please enter the valid bank"); textBoxChqBank.Focus(); return; }

                    //if (string.IsNullOrEmpty(txtPayCrCardType.Text) && ddlPayMode.SelectedValue.ToString() == CommonUIDefiniton.PayMode.CRCD.ToString()) { MasterMsgInfoUCtrl.SetMessage(CommonUIDefiniton.MessageType.warning, "Please select the card type"); txtPayCrCardType.Focus(); return; }


                    if (!CheckBank(textBoxChqBank.Text, lblChqBank))
                    {
                        MessageBox.Show("Invalid Bank Code", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                    if (textBoxChqBranch.Text != "" && !CheckBankBranch(textBoxChqBank.Text, textBoxChqBranch.Text))
                    {
                        MessageBox.Show("Cheque Bank and Branch not match", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                    if (Convert.ToDateTime(dateTimePickerExpire.Text) < Convert.ToDateTime(DateTime.Now.Date))
                    {
                        MessageBox.Show("Invalid cheque date", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                    //kapila 25/8/2014
                    if (_isDepBanAccMan == true)
                    {
                        DataTable BankName = CHNLSVC.Sales.get_Dep_Bank_Name(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "CHEQUE", textBoxChqDepBank.Text);
                        if (BankName.Rows.Count == 0)
                        {
                            MessageBox.Show("Invalid deposit bank account !", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                            textBoxChqDepBank.Focus();
                            return;
                        }
                    }

                    //blacklist customer warning message
                    BlackListCustomers _cus = CHNLSVC.Sales.GetBlackListCustomerDetails(txtCustomer.Text, 1);
                    if (_cus != null)
                    {
                        MessageBox.Show("This Customer is Blacklist Customer", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);

                    }
                }

                if (lblSelPayTp.Text == "CRCD")
                {

                    if (string.IsNullOrEmpty(textBoxCCCardNo.Text)) { if (lblSelPayTp.Text == "CRCD")MessageBox.Show("Please enter the card no", "Card No", MessageBoxButtons.OK, MessageBoxIcon.Warning); else  MessageBox.Show("Please enter the cheq no", "Cheq No", MessageBoxButtons.OK, MessageBoxIcon.Warning); textBoxCCCardNo.Focus(); return; }
                    if (string.IsNullOrEmpty(textBoxCCBank.Text)) { MessageBox.Show("Please select the valid bank", "Information", MessageBoxButtons.OK, MessageBoxIcon.Warning); textBoxCCBank.Focus(); return; }

                    if (!CheckBank(textBoxCCBank.Text, lblBank))
                    {
                        MessageBox.Show("Invalid Bank Code", "Information", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        textBoxCCBank.Focus();
                        return;
                    }
                    if (comboBoxCardType.SelectedValue == null)
                    {
                        MessageBox.Show("Please select card type", "Card type", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        comboBoxCardType.Focus();
                        return;
                    }
                    if (dateTimePickerCCExpire.Value.Date < Convert.ToDateTime(DateTime.Now.Date))
                    {
                        MessageBox.Show("Invalid expiry date", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        comboBoxCardType.Focus();
                        return;
                    }
                    //kapila 25/8/2014
                    //if (_isDepBanAccMan == true)
                    //{
                    //    DataTable BankName = CHNLSVC.Sales.get_Dep_Bank_Name(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "CRCD", textBoxCCDepBank.Text);
                    //    if (BankName.Rows.Count == 0)
                    //    {
                    //        MessageBox.Show("Invalid deposit bank account !", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    //        textBoxCCDepBank.Focus();
                    //        return;
                    //    }
                    //}

                    //if (dateTimePickerCCExpire.Value < DateTime.Now)
                    //{
                    //    MessageBox.Show("Expire date has to be greater than today");
                    //    dateTimePickerCCExpire.Focus();
                    //    return;
                    //}

                    //blacklist customer warning message
                    BlackListCustomers _cus = CHNLSVC.Sales.GetBlackListCustomerDetails(txtCustomer.Text, 1);
                    if (_cus != null)
                    {
                        MessageBox.Show("This Customer is Blacklist Customer", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }

                }
                if (lblSelPayTp.Text == "ADVAN" || lblSelPayTp.Text == "CRNOTE")
                {
                    if (string.IsNullOrEmpty(textBoxRefNo.Text)) { MessageBox.Show("Please select the document no", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); textBoxRefNo.Focus(); return; }
                    if (lblSelPayTp.Text == "CRNOTE")
                    {

                        InvoiceHeader _invoice = CHNLSVC.Sales.GetInvoiceHeaderDetails(textBoxRefNo.Text);
                        if (_invoice != null)
                        {
                            //validate
                            if (_invoice.Sah_direct)
                            {
                                MessageBox.Show("Invalid Credit note no", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }
                            if (_invoice.Sah_stus == "C")
                            {
                                MessageBox.Show("Cancelled Credit note", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }
                            if (_invoice.Sah_cus_cd != txtCustomer.Text)
                            {
                                MessageBox.Show("Credit note customer mismatch", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }
                            if (!IsZeroAllow)
                            {
                                if (((_invoice.Sah_anal_7 - _invoice.Sah_anal_8) * _invoice.Sah_ex_rt) < Convert.ToDecimal(textBoxAmount.Text))
                                {
                                    MessageBox.Show("Amount larger than credit note amount", "Amount", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    return;
                                }
                            }

                            //PROMOTIONAL DISCOUNT PROCESS
                            // send credit note base invoice pay modes to discount process
                            //if discount found apply it
                            // IMPORTANT - In paymodes discount apply only if discounted price equal to total invoice price

                            //get credit note discount details
                            List<InvoiceItem> li = CHNLSVC.Sales.GetInvoiceItems(textBoxRefNo.Text);

                            //apply discount to original invoice
                            List<InvoiceItem> _promotionList = (from _res in li
                                                                where _res.Sad_dis_type == "P"
                                                                select _res).ToList<InvoiceItem>();
                            if (_promotionList != null && _promotionList.Count > 0)
                            {
                                List<InvoiceItem> _invoiceItemListWithDiscount = new List<InvoiceItem>();
                                List<InvoiceItem> _discounted = null;
                                bool _isDifferent = false;
                                decimal _tobepay = 0;
                                InvoiceHeader _hdr = new InvoiceHeader();
                                _hdr.Sah_tax_inv = IsTaxInvoice;
                                _hdr.Sah_pc = BaseCls.GlbUserDefProf;
                                Int32 _timeno1 = Convert.ToInt32(DateTime.Now.ToString("HHmmss"));
                                string _error;
                                CHNLSVC.Sales.GetGeneralPromotionDiscountCreditNote(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, InvoiceType, _timeno1, Convert.ToDateTime(Date).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(Date), InvoiceItemList, out _discounted, out _isDifferent, out _tobepay, _hdr, _promotionList, RecieptItemList, out _error);
                                if (!string.IsNullOrEmpty(_error))
                                {
                                    MessageBox.Show("Error occured while processing\nPlease contact IT dept.\nTECHNICAL INFO\nPlease check sat_itm table discount seq and discount type", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    return;
                                }
                                _invoiceItemListWithDiscount = _discounted;
                                if (_isDifferent)
                                {
                                    if (Convert.ToDecimal(textBoxAmount.Text) == _tobepay)
                                    {
                                        textBoxAmount.Text = lblGrndTotalAmount.Text.ToString();
                                        IsDiscounted = true;
                                        DiscountedValue = _tobepay;
                                        DiscountedInvoiceItem = _invoiceItemListWithDiscount;
                                    }
                                    else
                                    {
                                        //IsDiscounted = true;
                                        //DiscountedValue = _tobepay;
                                        //DiscountedInvoiceItem = _invoiceItemListWithDiscount;
                                    }

                                }
                            }
                        }
                        else
                        {
                            return;
                        }
                    }
                    if (lblSelPayTp.Text == "ADVAN")
                    {
                        DataTable _dt = CHNLSVC.Sales.GetReceipt(textBoxRefNo.Text);
                        if (_dt != null && _dt.Rows.Count > 0)
                        {
                            if (Convert.ToDecimal(textBoxAmount.Text) > (Convert.ToDecimal(_dt.Rows[0]["SAR_TOT_SETTLE_AMT"]) - Convert.ToDecimal(_dt.Rows[0]["sar_used_amt"])))
                            {
                                MessageBox.Show("Invalid Advanced Receipt Amount", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }

                            if (_dt.Rows[0]["sar_debtor_cd"].ToString() != "AST-CASH")
                            {
                                if (txtCustomer.Text != "AST-CASH")
                                {
                                    if (_dt.Rows[0]["sar_debtor_cd"].ToString() != txtCustomer.Text)
                                    {
                                        MessageBox.Show("Advance receipt customer mismatch", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                        return;
                                    }
                                }
                            }

                            DateTime dte = Convert.ToDateTime(_dt.Rows[0]["SAR_VALID_TO"]);

                            if (dte < txtDate.Value.Date)
                            {
                                MessageBox.Show("Advance receipt is expire. Pls. contact accounts dept.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }

                            if (CHNLSVC.Sales.IsAdvanAmtExceed(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, textBoxRefNo.Text.Trim(), Convert.ToDecimal(textBoxAmount.Text)))
                            {
                                this.Cursor = Cursors.Default;
                                MessageBox.Show("Advance receipt amount exceed. Cannot use this advance receipt.", "Advance Amount", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }

                            //PROMOTIONAL DISCOUNT PROCESS
                            // send advanced reciept pay modes to discount process
                            //if discount found apply it
                            // IMPORTANT - In paymodes discount apply only if discounted price equal to total invoice price

                            List<InvoiceItem> _invoiceItemListWithDiscount = new List<InvoiceItem>();
                            List<InvoiceItem> _discounted = null;
                            bool _isDifferent = false;
                            decimal _tobepay = 0;
                            InvoiceHeader _hdr = new InvoiceHeader();

                            _hdr.Sah_tax_inv = IsTaxInvoice;
                            _hdr.Sah_pc = BaseCls.GlbUserDefProf;
                            Int32 _timeno1 = Convert.ToInt32(DateTime.Now.ToString("HHmmss"));
                            List<RecieptItem> _recieptItems = CHNLSVC.Sales.GetAllReceiptItems(textBoxRefNo.Text);
                            CHNLSVC.Sales.GetGeneralPromotionDiscount(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, InvoiceType, _timeno1, Convert.ToDateTime(Date).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(Date), InvoiceItemList, _recieptItems, out _discounted, out _isDifferent, out _tobepay, _hdr);
                            _invoiceItemListWithDiscount = _discounted;
                            if (_isDifferent)
                            {
                                if (Convert.ToDecimal(textBoxAmount.Text) == _tobepay)
                                {
                                    textBoxAmount.Text = lblGrndTotalAmount.Text.ToString();
                                    IsDiscounted = true;
                                    DiscountedValue = _tobepay;
                                    DiscountedInvoiceItem = _invoiceItemListWithDiscount;
                                }
                                else
                                {
                                    //IsDiscounted = true;
                                    //DiscountedValue = _tobepay;
                                    //DiscountedInvoiceItem = _invoiceItemListWithDiscount;
                                }
                            }

                            //if (Convert.ToDateTime(_dt.Rows[0]["SAR_RECEIPT_DATE"]).AddMonths(3) > Date) {
                            //    MessageBox.Show("Advanced Receipt expire after 3 month", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            //    return;
                            //}
                        }
                        else
                        {
                            MessageBox.Show("Invalid Advanced Receipt No", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            return;
                        }

                    }
                }

                //loyalty redeem
                if (lblSelPayTp.Text == "LORE")
                {
                    if (txtLoyaltyCardNo.Text == "")
                    {
                        MessageBox.Show("Please select valid card number", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }

                    if (lblPointValue.Text == "")
                    {
                        MessageBox.Show("No redeem definition found", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }
                    else
                    {
                        if (Convert.ToDecimal(lblGrndTotalAmount.Text) - Convert.ToDecimal(lblPaidAmo.Text) - (Convert.ToDecimal(textBoxAmount.Text) * Convert.ToDecimal(lblPointValue.Text)) < 0)
                        {
                            MessageBox.Show("Please select the valid pay amount", "Amount", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            return;
                        }
                        if (Convert.ToDecimal(textBoxAmount.Text) > Convert.ToDecimal(lblLoyaltyBalance.Text))
                        {
                            MessageBox.Show("You can redeem only " + lblLoyaltyBalance.Text + " points", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            return;
                        }
                        factor = Convert.ToDecimal(lblPointValue.Text);

                    }


                }



                //gift voucher
                if (lblSelPayTp.Text == "GVO")
                {
                    //txtGiftVoucher_Leave(null, null);
                    int val;
                    if (txtGiftVoucher.Text == "")
                    {
                        MessageBox.Show("Gift voucher number can not be empty", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }
                    if (!int.TryParse(txtGiftVoucher.Text, out val))
                    {
                        MessageBox.Show("Gift voucher number has to be number", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }
                    if (string.IsNullOrEmpty(lblBook.Text))
                    {
                        MessageBox.Show("Gift voucher book not found", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }
                    if (string.IsNullOrEmpty(lblPrefix.Text))
                    {
                        MessageBox.Show("Gift voucher pefix not found", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }
                    if (string.IsNullOrEmpty(lblCd.Text))
                    {
                        MessageBox.Show("Gift voucher code not found", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }

                    //List<GiftVoucherPages> _gift = new List<GiftVoucherPages>();
                    //List<GiftVoucherPages> _Allgv = CHNLSVC.Inventory.GetGiftVoucherPages(null, Convert.ToInt32(txtGiftVoucher.Text));
                    List<GiftVoucherPages> _gift = CHNLSVC.Inventory.GetGiftVoucherPages(BaseCls.GlbUserComCode, Convert.ToInt32(txtGiftVoucher.Text));

                    //if (_Allgv != null)
                    //{
                    //    foreach (GiftVoucherPages _tmp in _Allgv)
                    //    {
                    //        DataTable _allCom = CHNLSVC.Inventory.GetGVAlwCom(BaseCls.GlbUserComCode, _tmp.Gvp_gv_cd, 1);
                    //        if (_allCom.Rows.Count > 0)
                    //        {
                    //            _gift.Add(_tmp);
                    //        }

                    //    }
                    //}

                    if (_gift != null && _gift.Count > 0)
                    {
                        if (_gift.Count == 1)
                        {
                            if (Convert.ToDecimal(textBoxAmount.Text) > _gift[0].Gvp_bal_amt)
                            {
                                MessageBox.Show("Gift voucher amount to be greater than pay amount", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }
                            if (_gift[0].Gvp_stus != "A")
                            {
                                MessageBox.Show("Gift voucher is not Active", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }
                            if (_gift[0].Gvp_gv_tp != "VALUE")
                            {
                                MessageBox.Show("Gift voucher type is invalid", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }

                            Date = DateTime.Now.Date;
                            if (!(_gift[0].Gvp_valid_from <= txtDate.Value.Date && _gift[0].Gvp_valid_to >= txtDate.Value.Date))
                            {
                                MessageBox.Show("This gift voucher has been expired\nFrom Date - " + _gift[0].Gvp_valid_from.ToString("dd/MMM/yyyy") + "\nTo Date - " + _gift[0].Gvp_valid_to.ToString("dd/MMM/yyyy"), "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }
                            if (!_gift[0].Gvp_is_allow_promo && ISPromotion)
                            {
                                MessageBox.Show("Promotional Invoices cannot pay with normal gift vouchers", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }
                            GVLOC = _gift[0].Gvp_pc;
                            GVISSUEDATE = _gift[0].Gvp_issue_dt;
                            GVCOM = _gift[0].Gvp_com;
                        }
                        else
                        {

                            if (lblBook.Text != "")
                            {
                                GiftVoucherPages _giftPage = CHNLSVC.Inventory.GetGiftVoucherPage(BaseCls.GlbUserComCode, "%", lblPrefix.Text, Convert.ToInt32(lblBook.Text), Convert.ToInt32(txtGiftVoucher.Text), lblCd.Text);

                                if (_giftPage == null)
                                {
                                    MessageBox.Show("Please select gift voucher page from grid", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    return;
                                }
                                if (Convert.ToDecimal(textBoxAmount.Text) > _giftPage.Gvp_bal_amt)
                                {
                                    MessageBox.Show("Gift voucher amount to be greater than pay amount", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    return;
                                }
                                if (_giftPage.Gvp_stus != "A")
                                {
                                    MessageBox.Show("Gift voucher is not Active", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    return;
                                }
                                if (_giftPage.Gvp_gv_tp != "VALUE")
                                {
                                    MessageBox.Show("Gift voucher type is invalid", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    return;
                                }
                                if (!(_giftPage.Gvp_valid_from <= txtDate.Value.Date && _giftPage.Gvp_valid_to >= txtDate.Value.Date))
                                {
                                    MessageBox.Show("This gift voucher has been expired\nFrom Date - " + _giftPage.Gvp_valid_from.ToString("dd/MMM/yyyy") + "\nTo Date - " + _giftPage.Gvp_valid_to.ToString("dd/MMM/yyyy"), "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    return;
                                }
                                if (!_giftPage.Gvp_is_allow_promo && ISPromotion)
                                {
                                    MessageBox.Show("Promotional Invoices cannot pay with normal gift vouchers", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    return;
                                }
                                GVLOC = _giftPage.Gvp_pc;
                                GVISSUEDATE = _giftPage.Gvp_issue_dt;
                                GVCOM = _giftPage.Gvp_com;
                            }
                            else
                            {
                                MessageBox.Show("Please select gift voucher page from grid", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }

                        }
                    }
                    else
                    {
                        MessageBox.Show("Invalid Gift Voucher number", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }
                }

                //star point
                if (lblSelPayTp.Text == "STAR_PO")
                {
                    if (string.IsNullOrEmpty(txtSPMob.Text))
                    {
                        MessageBox.Show("Customer need mobile number", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }
                    string mobilePt = txtSPMob.Text.Trim().Substring(0, 3);
                    if (mobilePt != "077")
                    {
                        MessageBox.Show("Mobile no has to be dialog number", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }

                }


                Decimal BankOrOtherCharge_ = 0;
                Decimal BankOrOther_Charges = 0;
                if (lblSelPayTp.Text == "CRCD")
                {
                    decimal _selectAmt = Convert.ToDecimal(textBoxAmount.Text);

                    if (_paymentTypeRef == null)
                    {
                        List<PaymentType> _paymentTypeRef1 = CHNLSVC.Sales.GetPossiblePaymentTypes_new(BaseCls.GlbUserComCode, BaseCls.GlbDefSubChannel, BaseCls.GlbUserDefProf, InvoiceType, DateTime.Now.Date, 1);
                        _paymentTypeRef = _paymentTypeRef1;
                    }
                    if (_paymentTypeRef.Count <= 0)
                    {
                        List<PaymentType> _paymentTypeRef1 = CHNLSVC.Sales.GetPossiblePaymentTypes_new(BaseCls.GlbUserComCode, BaseCls.GlbDefSubChannel, BaseCls.GlbUserDefProf, InvoiceType, DateTime.Now.Date, 1);
                        _paymentTypeRef = _paymentTypeRef1;
                    }

                    _paymentTypeRef = GetBankChgPAyTypes(_paymentTypeRef);
                    if (_paymentTypeRef != null)
                    {
                        foreach (PaymentType pt in _paymentTypeRef)
                        {
                            if (lblSelPayTp.Text == pt.Stp_pay_tp)
                            {
                                //if (((Convert.ToDecimal(lblPaidAmo.Text)+Convert.ToDecimal(textBoxAmount.Text))-TotalAmount) <= 0)
                                //{
                                //    Decimal BCV = Convert.ToDecimal(pt.Stp_bank_chg_val);
                                //    Decimal BCR = Convert.ToDecimal(pt.Stp_bank_chg_rt);
                                //    BankOrOtherCharge_ = ((Convert.ToDecimal(textBoxAmount.Text)-Convert.ToDecimal(lblPaidAmo.Text)) - BCV) * BCR / (BCR + 100);
                                //    BankOrOtherCharge_ = BankOrOtherCharge_ + BCV;
                                //    BankOrOther_Charges = BankOrOtherCharge_;
                                //    textBoxAmount.Text = Convert.ToString(_selectAmt - BankOrOther_Charges);
                                //}
                                //else
                                //{

                                Decimal BCV = Convert.ToDecimal(pt.Stp_bank_chg_val);
                                Decimal BCR = Convert.ToDecimal(pt.Stp_bank_chg_rt);
                                BankOrOtherCharge_ = Math.Round((Convert.ToDecimal(textBoxAmount.Text) - BCV) * BCR / (BCR + 100), 2);
                                BankOrOtherCharge_ = BankOrOtherCharge_ + BCV;
                                BankOrOther_Charges = BankOrOtherCharge_;
                                textBoxAmount.Text = Convert.ToString(_selectAmt - BankOrOther_Charges);
                                break;
                                // }
                            }
                        }
                    }
                    if (_paymentTypeRef == null || _paymentTypeRef.Count <= 0)
                    {
                        List<int> _proList = new List<int>();
                        try
                        {
                            _proList = (List<int>)comboBoxPermotion.DataSource;

                            if (_proList == null)
                            {
                                MessageBox.Show("Invalid promotion period.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }

                            _proList = _proList.Distinct().ToList<int>();
                        }
                        catch (Exception) { }
                        string _promo = "";
                        foreach (int ii in _proList)
                        {
                            _promo = _promo + ii + ",";
                        }
                        _promo = _promo.Substring(0, _promo.Length - 1);
                        //MessageBox.Show("Please make sure Promotion period selected properly\nAvailable Promotion Period - " + _promo, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        MessageBox.Show("Please make sure Promotion period selected properly.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }
                }
                //// if (!IsDutyFree && !Allow_Plus_balance)
                if (lblSelPayTp.Text != "CASH")
                {
                    //if (!IsZeroAllow)
                    // {
                    if (Convert.ToDecimal(lblGrndTotalAmount.Text) + BankOrOther_Charges + -Convert.ToDecimal(lblPaidAmo.Text) - (Convert.ToDecimal(textBoxAmount.Text) * factor) < 0)
                    {
                        MessageBox.Show("Please select the valid pay amount", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }
                    //  }
                }



                if (string.IsNullOrEmpty(textBoxAmount.Text))
                {
                    MessageBox.Show("Please select the valid pay amount", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
                else
                {
                    try
                    {
                        if (!IsZeroAllow)
                        {
                            if (Convert.ToDecimal(textBoxAmount.Text) <= 0)
                            {
                                MessageBox.Show("Please select the valid pay amount", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }
                        }
                    }
                    catch
                    {
                        MessageBox.Show("Pay amount has to be a number", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        _payAmount = 0;
                    }
                }

                if (lblSelPayTp.Text == "CASH")
                {
                    if (Convert.ToDecimal(lblGrndTotalAmount.Text) + BankOrOther_Charges + -Convert.ToDecimal(lblPaidAmo.Text) - (Convert.ToDecimal(textBoxAmount.Text) * factor) < 0)
                    {
                        _payAmount = Convert.ToDecimal(lblGrndTotalAmount.Text) + BankOrOther_Charges + -Convert.ToDecimal(lblPaidAmo.Text) * factor;
                        _balGiven = Convert.ToDecimal(textBoxAmount.Text) - _payAmount;
                        txtCashBal.Text = _balGiven.ToString("0.00");

                    }
                    else
                        _payAmount = Convert.ToDecimal(textBoxAmount.Text) * factor;
                }
                else
                    _payAmount = Convert.ToDecimal(textBoxAmount.Text) * factor;


                if (RecieptItemList.Count <= 0)
                {
                    RecieptItem _item = new RecieptItem();
                    if (!string.IsNullOrEmpty(dateTimePickerCCExpire.Value.ToString()))
                    { _item.Sard_cc_expiry_dt = Convert.ToDateTime(dateTimePickerCCExpire.Value).Date; }

                    string _cardno = string.Empty;
                    //if (comboBoxPayModes.SelectedValue.ToString() == "CRCD" || comboBoxPayModes.SelectedValue.ToString() == "CHEQUE" || comboBoxPayModes.SelectedValue.ToString() == "DEBT") _cardno = textBoxChequeNo.Text;
                    //if (comboBoxPayModes.SelectedValue.ToString() == "ADVAN" || comboBoxPayModes.SelectedValue.ToString() == "LORE" || comboBoxPayModes.SelectedValue.ToString() == "CRNOTE" || comboBoxPayModes.SelectedValue.ToString() == "GVO" || comboBoxPayModes.SelectedValue.ToString() == "GVS")
                    //{
                    //    _cardno = textBoxRefNo.Text;
                    //    checkBoxPromotion.Checked = false;
                    //    _period = 0;
                    //    comboBoxCardType.SelectedIndex = -1;
                    //    textBoxBranch.Text = string.Empty;
                    //    textBoxBank.Text = string.Empty;
                    //}


                    if (lblSelPayTp.Text == "CRCD")
                    {
                        int val;
                        if (comboBoxCardType.SelectedValue == null)
                        {
                            MessageBox.Show("Please select card type", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            return;
                        }
                        //if (lblmidcode.Text == "No MID code")
                        //{
                        //    MessageBox.Show("No MID code,Please contact accounts department");
                        //    return;
                        //}

                        if (panelPermotion.Visible)
                        {
                            _item.Sard_cc_is_promo = true;
                            _item.Sard_cc_period = Convert.ToInt32(comboBoxPermotion.SelectedValue);
                        }
                        else
                        {
                            _item.Sard_cc_is_promo = false;
                            _item.Sard_cc_period = 0;
                        }
                        MasterOutsideParty _bankAccounts = CHNLSVC.Sales.GetOutSidePartyDetailsById(textBoxCCBank.Text.ToUpper().Trim());
                        if (_bankAccounts == null)
                        {
                            MessageBox.Show("Bank not found for code", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            return;
                        }
                        //ADDED 2013/03/18
                        _item.Sard_chq_bank_cd = _bankAccounts.Mbi_cd;
                        //END
                        _item.Sard_cc_tp = comboBoxCardType.SelectedValue.ToString();
                        _item.Sard_cc_batch = textBoxBatch.Text;
                        _item.Sard_chq_bank_cd = "";

                        //ref no validation
                        //added 2013/12/28
                        string _refNo = "";
                        try
                        {
                            if (textBoxCCCardNo.Text.Length > 4)
                            {
                                string _last = textBoxCCCardNo.Text.Substring(textBoxCCCardNo.Text.Length - 4, 4);
                                string _first = "";
                                for (int i = 0; i < textBoxCCCardNo.Text.Length - 4; i++)
                                {
                                    _first = _first + "*";
                                }
                                _refNo = _first + _last;
                            }
                            else
                            {
                                _refNo = textBoxCCCardNo.Text;
                            }
                        }
                        catch (Exception) { _refNo = textBoxCCCardNo.Text; }
                        _item.Sard_ref_no = _refNo;
                        _item.Sard_cc_expiry_dt = dateTimePickerCCExpire.Value.Date;
                        //_item.Sard_chq_branch = comboBoxCCBranch.SelectedValue.ToString();
                        _item.Sard_chq_branch = lblmidcode.Text.Trim();//Assign by shalika 30/09/2014
                        _item.Sard_credit_card_bank = _bankAccounts.Mbi_cd;// comboBoxCCBank.SelectedValue.ToString();
                        _item.Sard_deposit_bank_cd = textBoxCCDepBank.Text;
                        _item.Sard_deposit_branch = textBoxCCDepBranch.Text;
                        _item.Sard_settle_amt = Convert.ToDecimal(_payAmount);
                        _item.Sard_anal_3 = Math.Round(BankOrOther_Charges, 2);
                        _item.Sard_anal_4 = _balGiven;

                        _item.Sard_cc_is_promo = chkPromo.Checked;
                        if (chkPromo.Checked)
                        {
                            try
                            {
                                _item.Sard_cc_period = Convert.ToInt32(txtPromo.Text);
                            }
                            catch (Exception) { }
                        }


                    }
                    else if (lblSelPayTp.Text == "CHEQUE" || lblSelPayTp.Text == "TR_CHEQUE")
                    {
                        MasterOutsideParty _bankAccounts = CHNLSVC.Sales.GetOutSidePartyDetailsById(textBoxChqBank.Text.ToUpper().Trim());
                        if (_bankAccounts == null)
                        {
                            MessageBox.Show("Bank not found for code", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            return;
                        }

                        if (lblSelPayTp.Text == "CHEQUE")
                        {
                            if (string.IsNullOrEmpty(textBoxChqBranch.Text))
                            {
                                MessageBox.Show("Please enter cheque branch", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                textBoxChqBranch.Focus();
                                return;
                            }

                            if (textBoxChequeNo.Text.Length != 6)
                            {
                                MessageBox.Show("Please enter correct cheque number. [Cheque number should be 6 numbers.]", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                textBoxChequeNo.Focus();
                                return;
                            }
                        }

                        _item.Sard_chq_dt = dateTimePickerExpire.Value.Date;
                        _item.Sard_chq_bank_cd = _bankAccounts.Mbi_cd; //comboBoxChqBank.SelectedValue.ToString();
                        _item.Sard_chq_branch = textBoxChqBranch.Text;//comboBoxChqBranch.SelectedValue.ToString();
                        _item.Sard_deposit_bank_cd = textBoxChqDepBank.Text;//comboBoxChqDepositBank.SelectedValue.ToString();
                        _item.Sard_deposit_branch = textBoxChqDepBranch.Text;
                        _item.Sard_ref_no = _bankAccounts.Mbi_cd + textBoxChqBranch.Text + textBoxChequeNo.Text;
                        _item.Sard_anal_5 = dateTimePickerExpire.Value.Date;

                        bank = textBoxChqBank.Text;
                        branch = textBoxChqBranch.Text;
                        depBank = textBoxChqDepBank.Text; ;
                        depBranch = textBoxChqDepBranch.Text;
                        chqNo = textBoxChequeNo.Text;
                        chqExpire = dateTimePickerExpire.Value.Date;
                        //NEED CHEQUE DATE

                        //_item.Sard_chq_branch = comboBoxChqBranch.SelectedValue.ToString();
                        //SARD_CHQ_DT NOT IN BO

                    }
                    else if (lblSelPayTp.Text == "DEBT")
                    {
                        MasterOutsideParty _bankAccounts = CHNLSVC.Sales.GetOutSidePartyDetailsById(textBoxDbBank.Text.ToUpper().Trim());
                        if (_bankAccounts == null)
                        {
                            MessageBox.Show("Bank not found for code", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            return;
                        }

                        _item.Sard_chq_bank_cd = _bankAccounts.Mbi_cd;
                        _item.Sard_ref_no = textBoxDbCardNo.Text;
                        _item.Sard_deposit_bank_cd = textBoxDBDepositBank.Text;
                        _item.Sard_deposit_branch = textBoxDBDepositBranch.Text;
                        //_item.Sard_chq_bank_cd = textBoxDbBank.Text;
                        //CARED NO/BANK
                    }
                    else if (lblSelPayTp.Text == "ADVAN" || lblSelPayTp.Text == "CRNOTE")
                    {
                        _item.Sard_ref_no = textBoxRefNo.Text;
                        _item.Sard_deposit_bank_cd = textBoxOthDepBank.Text;
                        _item.Sard_deposit_branch = textBoxOthDepBranch.Text;

                    }
                    else if (lblSelPayTp.Text == "GVS")
                    {
                        _item.Sard_ref_no = txtGVRef.Text;
                    }
                    else if (lblSelPayTp.Text == "GVO")
                    {
                        _item.Sard_ref_no = txtGiftVoucher.Text;
                        _item.Sard_sim_ser = lblBook.Text;
                        _item.Sard_anal_2 = lblPrefix.Text;
                        _item.Sard_deposit_bank_cd = txtGVDepBank.Text;
                        _item.Sard_deposit_branch = txtGVDepBank.Text;
                        _item.Sard_cc_tp = lblCd.Text;
                        _item.Sard_gv_issue_loc = GVLOC;
                        _item.Sard_gv_issue_dt = GVISSUEDATE;
                        _item.Sard_anal_1 = GVCOM;
                    }
                    else if (lblSelPayTp.Text == "LORE")
                    {
                        _item.Sard_ref_no = txtLoyaltyCardNo.Text;
                        _item.Sard_deposit_bank_cd = txtLoyaltyDepBank.Text;
                        _item.Sard_deposit_branch = txtLoyaltyDepBranch.Text;
                        _item.Sard_anal_4 = Convert.ToDecimal(textBoxAmount.Text);
                    }

                    else if (lblSelPayTp.Text == "BANK_SLIP")
                    {
                        //if mandatory validate
                        if (_depMandatory)
                        {
                            if (string.IsNullOrEmpty(textBoxDepostiBank.Text))
                            {
                                MessageBox.Show("Depostit bank mandatory for channel", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }
                            if (string.IsNullOrEmpty(textBoxAccNo.Text))
                            {
                                MessageBox.Show("BAnk-slip account number mandatory for channel", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }
                        }


                        _item.Sard_ref_no = textBoxAccNo.Text;
                        _item.Sard_deposit_bank_cd = textBoxDepostiBank.Text;
                        _item.Sard_deposit_branch = textBoxDepositBranch.Text;
                        //_item.Sard_deposit_bank_cd = TEXT
                        //DEPOSIT DATE/BANK ACC NO

                    }
                    else if (lblSelPayTp.Text == "CASH")
                    {
                        //if mandatory validate
                        if (_depMandatory)
                        {
                            if (string.IsNullOrEmpty(txtCashDepostBank.Text))
                            {
                                MessageBox.Show("Depostit bank mandatory for channel", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }

                        }

                        _item.Sard_deposit_bank_cd = txtCashDepostBank.Text;
                        _item.Sard_deposit_branch = txtCahsDepBranch.Text;
                    }
                    else if (lblSelPayTp.Text == "BANK_SLIP")
                    {
                        _item.Sard_ref_no = textBoxAccNo.Text;
                        _item.Sard_deposit_bank_cd = txtCashDepostBank.Text;
                        _item.Sard_deposit_branch = txtCahsDepBranch.Text;
                    }
                    else if (lblSelPayTp.Text == "STAR_PO")
                    {
                        _item.Sard_ref_no = Mobile;
                    }

                    _paidAmount += _payAmount;
                    _item.Sard_inv_no = InvoiceNo;
                    _item.Sard_pay_tp = lblSelPayTp.Text;
                    _item.Sard_settle_amt = Math.Round(Convert.ToDecimal(_payAmount), 4);
                    //   _item.Sard_rmk = textBoxRemark.Text;
                    _item.Sard_anal_4 = _balGiven;
                    if (IsDutyFree)
                    {
                        _item.Sard_anal_1 = CurrancyCode;
                        //_item.Sard_anal_3 = CurrancyAmount;
                        _item.Sard_anal_4 = ExchangeRate;
                    }

                    RecieptItemList.Add(_item);
                }

                else
                {
                    bool _isDuplicate = false;

                    var _duplicate = from _dup in RecieptItemList
                                     where _dup.Sard_pay_tp == lblSelPayTp.Text
                                     select _dup;

                    if (_duplicate.Count() <= 0) _isDuplicate = false; else _isDuplicate = true;

                    if (lblSelPayTp.Text == "CRCD")
                    {
                        var _dup_crcd = from _dup in _duplicate
                                        where _dup.Sard_cc_tp == comboBoxCardType.SelectedValue.ToString() && _dup.Sard_ref_no == textBoxCCCardNo.Text && _dup.Sard_inv_no == invoiceNo
                                        select _dup;
                        if (IsDutyFree)
                        {
                            _dup_crcd = from _dup in _duplicate
                                        where _dup.Sard_cc_tp == comboBoxCardType.SelectedValue.ToString() && _dup.Sard_ref_no == textBoxCCCardNo.Text && _dup.Sard_inv_no == invoiceNo && _dup.Sard_anal_1 == CurrancyCode
                                        select _dup;
                        }


                        if (_dup_crcd.Count() <= 0) _isDuplicate = false; else _isDuplicate = true;
                    }
                    if (lblSelPayTp.Text == "CHEQUE" || lblSelPayTp.Text == "TR_CHEQUE")
                    {
                        var _dup_chq = from _dup in _duplicate
                                       where _dup.Sard_chq_bank_cd == textBoxChqBank.Text && _dup.Sard_ref_no == textBoxChequeNo.Text && _dup.Sard_inv_no == invoiceNo
                                       select _dup;
                        if (IsDutyFree)
                        {
                            _dup_chq = from _dup in _duplicate
                                       where _dup.Sard_chq_bank_cd == textBoxChqBank.Text && _dup.Sard_ref_no == textBoxChequeNo.Text && _dup.Sard_inv_no == invoiceNo && _dup.Sard_anal_1 == CurrancyCode
                                       select _dup;
                        }

                        if (_dup_chq.Count() <= 0) _isDuplicate = false; else _isDuplicate = true;
                    }

                    if (lblSelPayTp.Text == "ADVAN")
                    {
                        var _dup_adv = from _dup in _duplicate
                                       where _dup.Sard_ref_no == textBoxRefNo.Text && _dup.Sard_inv_no == invoiceNo
                                       select _dup;
                        if (IsDutyFree)
                        {
                            _dup_adv = from _dup in _duplicate
                                       where _dup.Sard_ref_no == textBoxRefNo.Text && _dup.Sard_inv_no == invoiceNo && _dup.Sard_anal_1 == CurrancyCode
                                       select _dup;
                        }

                        if (_dup_adv.Count() <= 0) _isDuplicate = false; else _isDuplicate = true;
                    }

                    if (lblSelPayTp.Text == "CRNOTE")
                    {
                        var _dup_adv = from _dup in _duplicate
                                       where _dup.Sard_ref_no == textBoxRefNo.Text && _dup.Sard_inv_no == invoiceNo
                                       select _dup;
                        if (IsDutyFree)
                        {
                            _dup_adv = from _dup in _duplicate
                                       where _dup.Sard_ref_no == textBoxRefNo.Text && _dup.Sard_inv_no == invoiceNo && _dup.Sard_anal_1 == CurrancyCode
                                       select _dup;
                        }

                        if (_dup_adv.Count() <= 0) _isDuplicate = false; else _isDuplicate = true;
                    }

                    if (lblSelPayTp.Text == "DEBT")
                    {
                        var _dup_adv = from _dup in _duplicate
                                       where _dup.Sard_ref_no == textBoxDbCardNo.Text && _dup.Sard_chq_bank_cd == textBoxDbBank.Text
                                       select _dup;
                        if (IsDutyFree)
                        {
                            _dup_adv = from _dup in _duplicate
                                       where _dup.Sard_ref_no == textBoxDbCardNo.Text && _dup.Sard_chq_bank_cd == textBoxDbBank.Text && _dup.Sard_anal_1 == CurrancyCode
                                       select _dup;
                        }

                        if (_dup_adv.Count() <= 0) _isDuplicate = false; else _isDuplicate = true;
                    }

                    if (lblSelPayTp.Text == "GVO" || lblSelPayTp.Text == "GVS")
                    {
                        var _dup_adv = from _dup in _duplicate
                                       where _dup.Sard_ref_no == textBoxRefNo.Text && _dup.Sard_inv_no == invoiceNo
                                       select _dup;
                        if (IsDutyFree)
                        {
                            _dup_adv = from _dup in _duplicate
                                       where _dup.Sard_ref_no == textBoxRefNo.Text && _dup.Sard_inv_no == invoiceNo && _dup.Sard_anal_1 == CurrancyCode
                                       select _dup;
                        }

                        if (_dup_adv.Count() <= 0) _isDuplicate = false; else _isDuplicate = true;
                    }

                    if (lblSelPayTp.Text == "GVO")
                    {
                        var _dup_adv = from _dup in _duplicate
                                       where _dup.Sard_ref_no == txtGiftVoucher.Text && _dup.Sard_sim_ser == lblBook.Text && _dup.Sard_anal_2 == lblPrefix.Text && _dup.Sard_cc_tp == lblCd.Text && _dup.Sard_inv_no == invoiceNo
                                       select _dup;

                        if (_dup_adv.Count() <= 0) _isDuplicate = false; else _isDuplicate = true;
                    }
                    if (lblSelPayTp.Text == "LORE")
                    {
                        var _dup_adv = from _dup in _duplicate
                                       where _dup.Sard_ref_no == txtLoyaltyCardNo.Text
                                       select _dup;

                        if (_dup_adv.Count() <= 0) _isDuplicate = false; else _isDuplicate = true;
                    }

                    if (lblSelPayTp.Text == "CASH")
                    {
                        var _dup_adv = from _dup in _duplicate
                                       where _dup.Sard_inv_no == invoiceNo
                                       select _dup;
                        if (IsDutyFree)
                        {
                            _dup_adv = from _dup in _duplicate
                                       where _dup.Sard_inv_no == invoiceNo && _dup.Sard_anal_1 == CurrancyCode
                                       select _dup;
                        }

                        if (_dup_adv.Count() <= 0) _isDuplicate = false; else _isDuplicate = true;
                    }
                    if (lblSelPayTp.Text == "STAR_PO")
                    {
                        var _dup_adv = from _dup in _duplicate
                                       where _dup.Sard_ref_no == txtMobile.Text
                                       select _dup;

                        if (_dup_adv.Count() <= 0) _isDuplicate = false; else _isDuplicate = true;
                    }

                    if (_isDuplicate == false)
                    {
                        //No Duplicates
                        RecieptItem _item = new RecieptItem();
                        if (!string.IsNullOrEmpty(dateTimePickerCCExpire.Value.ToString()))
                        { _item.Sard_cc_expiry_dt = Convert.ToDateTime(dateTimePickerCCExpire.Value).Date; }



                        //if (comboBoxPayModes.SelectedValue.ToString() == "ADVAN" || comboBoxPayModes.SelectedValue.ToString() == "LORE" || comboBoxPayModes.SelectedValue.ToString() == "CRNOTE" || comboBoxPayModes.SelectedValue.ToString() == "GVO" || comboBoxPayModes.SelectedValue.ToString() == "GVS")
                        //{
                        //    checkBoxPromotion.Checked = false;
                        //    _period = 0;
                        //    comboBoxCardType.SelectedIndex = -1;
                        //    textBoxBranch.Text = string.Empty;
                        //    textBoxBank.Text = string.Empty;
                        //}

                        if (lblSelPayTp.Text == "CRCD")
                        {
                            int val;
                            if (comboBoxCardType.SelectedValue == null)
                            {
                                MessageBox.Show("Please select card type", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }


                            if (panelPermotion.Visible)
                            {
                                _item.Sard_cc_is_promo = true;
                                _item.Sard_cc_period = Convert.ToInt32(comboBoxPermotion.SelectedValue);
                            }
                            else
                            {
                                _item.Sard_cc_is_promo = false;
                                _item.Sard_cc_period = Convert.ToInt32(comboBoxPermotion.SelectedValue);
                            }
                            //ADDED 2013/03/18
                            _item.Sard_chq_bank_cd = textBoxCCBank.Text;
                            //END

                            MasterOutsideParty _bankAccounts = CHNLSVC.Sales.GetOutSidePartyDetailsById(textBoxCCBank.Text.ToUpper().Trim());
                            if (_bankAccounts == null)
                            {
                                MessageBox.Show("Bank not found for code", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }
                            _item.Sard_cc_batch = textBoxBatch.Text;
                            _item.Sard_cc_period = _period;
                            _item.Sard_cc_tp = comboBoxCardType.SelectedValue.ToString();
                            _item.Sard_chq_bank_cd = "";
                            //ref no validation
                            //added 2013/12/28
                            string _refNo = "";
                            try
                            {
                                if (textBoxCCCardNo.Text.Length > 4)
                                {
                                    string _last = textBoxCCCardNo.Text.Substring(textBoxCCCardNo.Text.Length - 4, 4);
                                    string _first = "";
                                    for (int i = 0; i < textBoxCCCardNo.Text.Length - 4; i++)
                                    {
                                        _first = _first + "*";
                                    }
                                    _refNo = _first + _last;
                                }
                                else
                                {
                                    _refNo = textBoxCCCardNo.Text;
                                }
                            }
                            catch (Exception) { _refNo = textBoxCCCardNo.Text; }
                            _item.Sard_ref_no = _refNo;
                            //_item.Sard_chq_branch = comboBoxCCBranch.SelectedValue.ToString();
                            _item.Sard_chq_branch = lblmidcode.Text.Trim();//Assign by shalika 30/09/2014
                            _item.Sard_credit_card_bank = _bankAccounts.Mbi_cd;//comboBoxCCBank.SelectedValue.ToString();
                            _item.Sard_deposit_bank_cd = textBoxCCDepBank.Text;//comboBoxCCDepositBank.SelectedValue.ToString();
                            _item.Sard_deposit_branch = textBoxCCDepBranch.Text; //comboBoxCCDepositBranch.SelectedValue.ToString();
                            _item.Sard_settle_amt = Convert.ToDecimal(_payAmount);
                            _item.Sard_anal_3 = Math.Round(BankOrOther_Charges, 2);

                            _item.Sard_cc_is_promo = chkPromo.Checked;
                            if (chkPromo.Checked)
                            {
                                try
                                {
                                    _item.Sard_cc_period = Convert.ToInt32(txtPromo.Text);
                                }
                                catch (Exception) { }
                            }
                        }
                        else if (lblSelPayTp.Text == "CHEQUE" || lblSelPayTp.Text == "TR_CHEQUE")
                        {
                            MasterOutsideParty _bankAccounts = CHNLSVC.Sales.GetOutSidePartyDetailsById(textBoxChqBank.Text.ToUpper().Trim());
                            if (_bankAccounts == null)
                            {
                                MessageBox.Show("Bank not found for code", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }

                            if (lblSelPayTp.Text == "CHEQUE")
                            {
                                if (string.IsNullOrEmpty(textBoxChqBranch.Text))
                                {
                                    MessageBox.Show("Please enter cheque branch", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    textBoxChqBranch.Focus();
                                    return;
                                }

                                if (textBoxChequeNo.Text.Length != 6)
                                {
                                    MessageBox.Show("Please enter correct cheque number. [Cheque number should be 6 numbers.]", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    textBoxChequeNo.Focus();
                                    return;
                                }
                            }

                            _item.Sard_chq_dt = dateTimePickerExpire.Value.Date;
                            _item.Sard_chq_bank_cd = _bankAccounts.Mbi_cd;//comboBoxChqBank.SelectedValue.ToString();
                            _item.Sard_chq_branch = textBoxChqBranch.Text;//comboBoxChqBranch.SelectedValue.ToString();
                            _item.Sard_deposit_bank_cd = textBoxChqDepBank.Text;//comboBoxChqDepositBank.SelectedValue.ToString();
                            _item.Sard_deposit_branch = textBoxChqDepBranch.Text;//comboBoxChqDepositBranch.SelectedValue.ToString();
                            //_item.Sard_ref_no = textBoxChequeNo.Text;

                            _item.Sard_ref_no = _bankAccounts.Mbi_cd + textBoxChqBranch.Text + textBoxChequeNo.Text;


                            //if (comboBoxPayModes.SelectedValue.ToString() == CommonUIDefiniton.PayMode.CHEQUE.ToString() || comboBoxPayModes.SelectedValue.ToString() == CommonUIDefiniton.PayMode.TR_CHEQUE.ToString())
                            //{
                            //    var _dup_chq = from _dup in _duplicate
                            //                   where _dup.Sard_chq_bank_cd == textBoxChqBank.Text && _dup.Sard_ref_no == textBoxChequeNo.Text && _dup.Sard_inv_no == invoiceNo
                            //                   select _dup;
                            //    if (IsDutyFree)
                            //    {
                            //        _dup_chq = from _dup in _duplicate
                            //                   where _dup.Sard_chq_bank_cd == textBoxChqBank.Text && _dup.Sard_ref_no == textBoxChequeNo.Text && _dup.Sard_inv_no == invoiceNo && _dup.Sard_anal_1 == CurrancyCode
                            //                   select _dup;
                            //    }

                            //    if (_dup_chq.Count() <= 0) _isDuplicate = false; else _isDuplicate = true;
                            //}

                            bank = textBoxChqBank.Text;
                            branch = textBoxChqBranch.Text;
                            depBank = textBoxChqDepBank.Text; ;
                            depBranch = textBoxChqDepBranch.Text;
                            chqNo = textBoxChequeNo.Text;
                            chqExpire = dateTimePickerExpire.Value.Date;

                            //_item.Sard_chq_branch = comboBoxChqBranch.SelectedValue.ToString();
                            //SARD_CHQ_DT NOT IN BO

                        }
                        else if (lblSelPayTp.Text == "DEBT")
                        {

                            MasterOutsideParty _bankAccounts = CHNLSVC.Sales.GetOutSidePartyDetailsById(textBoxDbBank.Text.ToUpper().Trim());
                            if (_bankAccounts == null)
                            {
                                MessageBox.Show("Bank not found for code", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }

                            _item.Sard_chq_bank_cd = _bankAccounts.Mbi_cd;
                            _item.Sard_ref_no = textBoxDbCardNo.Text;
                            _item.Sard_deposit_bank_cd = textBoxDBDepositBank.Text;
                            _item.Sard_deposit_branch = textBoxDBDepositBranch.Text;

                        }
                        else if (lblSelPayTp.Text == "ADVAN" || lblSelPayTp.Text == "CRNOTE")
                        {
                            _item.Sard_ref_no = textBoxRefNo.Text;
                            _item.Sard_deposit_bank_cd = textBoxOthDepBank.Text;
                            _item.Sard_deposit_branch = textBoxOthDepBranch.Text;

                        }
                        else if (lblSelPayTp.Text == "GVS")
                        {
                            _item.Sard_ref_no = txtGVRef.Text;
                        }
                        else if (lblSelPayTp.Text == "GVO")
                        {
                            _item.Sard_ref_no = txtGiftVoucher.Text;
                            _item.Sard_sim_ser = lblBook.Text;
                            _item.Sard_anal_2 = lblPrefix.Text;
                            _item.Sard_deposit_bank_cd = txtGVDepBank.Text;
                            _item.Sard_deposit_branch = txtGVDepBank.Text;
                            _item.Sard_cc_tp = lblCd.Text;
                            _item.Sard_gv_issue_loc = GVLOC;
                            _item.Sard_gv_issue_dt = GVISSUEDATE;
                            _item.Sard_anal_1 = GVCOM;
                            //_item.Sard_cc_batch = BaseCls.GlbUserDefProf;
                        }
                        else if (lblSelPayTp.Text == "LORE")
                        {
                            _item.Sard_ref_no = txtLoyaltyCardNo.Text;
                            _item.Sard_deposit_bank_cd = txtLoyaltyDepBank.Text;
                            _item.Sard_deposit_branch = txtLoyaltyDepBranch.Text;
                            _item.Sard_anal_4 = Convert.ToDecimal(textBoxAmount.Text);
                        }
                        else if (lblSelPayTp.Text == "BANK_SLIP")
                        {

                            _item.Sard_ref_no = textBoxAccNo.Text;
                            _item.Sard_deposit_bank_cd = textBoxDepostiBank.Text;
                            _item.Sard_deposit_branch = textBoxDepositBranch.Text;

                        }
                        else if (lblSelPayTp.Text == "CASH")
                        {
                            _item.Sard_deposit_bank_cd = txtCashDepostBank.Text;
                            _item.Sard_deposit_branch = txtCahsDepBranch.Text;
                        }
                        else if (lblSelPayTp.Text == "STAR_PO")
                        {
                            _item.Sard_ref_no = Mobile;
                        }
                        _item.Sard_inv_no = InvoiceNo;
                        _item.Sard_pay_tp = lblSelPayTp.Text;
                        _item.Sard_settle_amt = Math.Round(Convert.ToDecimal(_payAmount), 4);
                        _paidAmount += Math.Round(_payAmount, 4);
                        //  _item.Sard_rmk = textBoxRemark.Text;

                        if (IsDutyFree)
                        {
                            _item.Sard_anal_1 = CurrancyCode;
                            // _item.Sard_anal_3 = CurrancyAmount;
                            _item.Sard_anal_4 = ExchangeRate;
                        }

                        RecieptItemList.Add(_item);
                    }
                    else
                    {
                        //duplicates
                        MessageBox.Show("You can not add duplicate payments", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;

                    }
                }

                // var source = new BindingSource();
                //source.DataSource = RecieptItemList;
                // dataGridViewPayments.DataSource = source;
                LoadRecieptGrid();

                if (!IsDutyFree)
                {
                    lblPaidAmo.Text = Base.FormatToCurrency(Convert.ToString(_paidAmount));
                    _paidAmount = Convert.ToDecimal(lblPaidAmo.Text);
                    lblbalanceAmo.Text = Base.FormatToCurrency(Convert.ToString((Convert.ToDecimal(lblGrndTotalAmount.Text) - Convert.ToDecimal(_paidAmount))));
                    textBoxAmount.Text = Base.FormatToCurrency(Convert.ToString((Convert.ToDecimal(lblGrndTotalAmount.Text) - Convert.ToDecimal(_paidAmount))));
                }
                else
                {
                    lblPaidAmo.Text = (Convert.ToString(_paidAmount));
                    _paidAmount = Convert.ToDecimal(lblPaidAmo.Text);
                    lblbalanceAmo.Text = (Convert.ToString((Convert.ToDecimal(lblGrndTotalAmount.Text) - Convert.ToDecimal(_paidAmount))));
                    textBoxAmount.Text = (Convert.ToString((Convert.ToDecimal(lblGrndTotalAmount.Text) - Convert.ToDecimal(_paidAmount))));
                }
                //////ResetControls(pnlCheque.Controls);
                //////ResetControls(pnlBankSlip.Controls);
                //////ResetControls(pnlCC.Controls);
                //////ResetControls(pnlDebit.Controls);
                //////ResetControls(pnlOthers.Controls);
                //////ResetControls(pnlCash.Controls);


                //  BindPaymentType(comboBoxPayModes);
                panelPermotion.Visible = false;

                // comboBoxPayModes.Focus();

                comboBoxPayModes_SelectionChangeCommitted();

                //    ItemAdded(sender, e);

                //  textBoxRemark.Text = "";
                lblSelPayTp.Text = "";
                txtGVRef.Text = "";
                txtGiftVoucher.Text = "";
                lblCd.Text = "";
                lblCusCode.Text = "";
                lblCusName.Text = "";
                lblPrefix.Text = "";
                lblMobile.Text = "";
                lblAdd1.Text = "";
                lblBook.Text = "";
                lblChqBank.Text = "";
                lblBank.Text = "";
                //loyalty
                lblPointValue.Text = "";
                lblLoyaltyType.Text = "";
                lblLoyaltyCustomer.Text = "";
                lblLoyaltyBalance.Text = "";
                gvMultipleItem.DataSource = null;
                calculateBankChg = false;
                pnlPay.Visible = false; //kapila
                clear_chq();
                txtSPMob.Text = "";
                txtGVRef.Text = "";
                textBoxDbCardNo.Text = "";
                textBoxDbBank.Text = "";
                textBoxDBDepositBank.Text = "";
                textBoxCCCardNo.Text = "";
                textBoxCCBank.Text = "";
                textBoxCCDepBank.Text = "";


                //kapila 23/6/2015 check payment is complete if then complete the sale
                _recieptItem = RecieptItemList;
                if (Convert.ToDecimal(lblbalanceAmo.Text) == 0)
                {
                    if (MessageBox.Show("Do you to complete the bill now ?", "Confirm", MessageBoxButtons.YesNo, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1) == DialogResult.Yes)
                    {
                        ProcessInvoice();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }



        private void comboBoxPayModes_SelectionChangeCommitted()
        {
            try
            {
                if (Convert.ToDecimal(lblGrndTotalAmount.Text) == 0)
                {
                    return;
                }

                if (string.IsNullOrEmpty(lblSelPayTp.Text)) { pnlCheque.Visible = false; pnlOthers.Visible = false; return; }

                List<PaymentTypeRef> _case = CHNLSVC.Sales.GetAllPaymentType(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, lblSelPayTp.Text);
                PaymentTypeRef _type = null;
                if (_case != null)
                {
                    if (_case.Count > 0)
                        _type = _case[0];
                }
                else
                {
                    MessageBox.Show("Payment types are not properly setup!", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                if (_type.Sapt_cd == null) { MessageBox.Show("Please select the valid payment type", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information); return; }
                //If the selected paymode having bank settlement.

                //kapila 1/2/2015
                buttonChqDepBankSearch.Enabled = true;
                textBoxChqDepBank.ReadOnly = false;

                if (_type.Sapt_is_settle_bank == true)
                {
                    pnlCheque.Visible = true; pnlOthers.Visible = false;

                    if (_type.Sapt_cd == CommonUIDefiniton.PayMode.CRCD.ToString())
                    {
                        panelPermotion.Visible = true;
                        pnlBankSlip.Visible = false;
                        pnlCC.Visible = true;
                        pnlCheque.Visible = false;
                        pnlDebit.Visible = false;
                        pnlOthers.Visible = false;
                        pnlCash.Visible = false;
                        pnlGiftVoucher.Visible = false;
                        pnlGV.Visible = false;
                        pnlLoyalty.Visible = false;
                        pnlStar.Visible = false;
                        //// LoadBanks(comboBoxCCBank);

                        ////  LoadBanks(comboBoxCCDepositBank);
                        ////    LoadBranches(comboBoxCCDepositBank, comboBoxCCDepositBranch);

                        panelPermotion.Visible = false;
                        if (IsDutyFree)
                        {
                            textBoxCCBank.Text = "OTH";
                            textBoxCCBank_Leave(null, null);
                            LoadCardType(textBoxCCBank.Text);
                        }
                        //kapila 25/8/2014
                        DataTable _DT1 = CHNLSVC.Sales.get_Def_dep_Bank(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "CRCD");
                        if (_DT1.Rows.Count > 0)
                            textBoxCCDepBank.Text = _DT1.Rows[0]["mpb_sun_ac"].ToString();
                        //load banks

                        //load card types

                        //txtPayCrCardType.Enabled = true;
                        //txtPayCrExpiryDate.Enabled = true;
                        //chkPayCrPromotion.Enabled = true;
                    }
                    if (_type.Sapt_cd == CommonUIDefiniton.PayMode.DEBT.ToString())
                    {

                        pnlBankSlip.Visible = false;
                        pnlCC.Visible = false;
                        pnlCheque.Visible = false;
                        pnlDebit.Visible = true;
                        pnlOthers.Visible = false;
                        pnlCash.Visible = false;
                        pnlGiftVoucher.Visible = false;
                        pnlGV.Visible = false;
                        pnlLoyalty.Visible = false;
                        pnlStar.Visible = false;
                    }
                    if (_type.Sapt_cd == CommonUIDefiniton.PayMode.CHEQUE.ToString())
                    {
                        pnlBankSlip.Visible = false;
                        pnlCC.Visible = false;
                        pnlCheque.Visible = true;
                        pnlDebit.Visible = false;
                        pnlOthers.Visible = false;
                        pnlCash.Visible = false;
                        pnlGiftVoucher.Visible = false;
                        pnlGV.Visible = false;
                        pnlLoyalty.Visible = false;
                        pnlStar.Visible = false;



                        //kapila 25/8/2014
                        DataTable _DT1 = CHNLSVC.Sales.get_Def_dep_Bank(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "CHEQUE");
                        if (_DT1.Rows.Count > 0)
                        {
                            textBoxChqDepBank.Text = _DT1.Rows[0]["mpb_sun_ac"].ToString();
                            //kapila 1/2/2015
                            buttonChqDepBankSearch.Enabled = false;
                            textBoxChqDepBank.ReadOnly = true;
                        }
                    }
                    if (_type.Sapt_cd == CommonUIDefiniton.PayMode.TR_CHEQUE.ToString())
                    {
                        pnlBankSlip.Visible = false;
                        pnlCC.Visible = false;
                        pnlCheque.Visible = true;
                        pnlDebit.Visible = false;
                        pnlOthers.Visible = false;
                        pnlCash.Visible = false;
                        pnlGiftVoucher.Visible = false;
                        pnlGV.Visible = false;
                        pnlLoyalty.Visible = false;
                        pnlStar.Visible = false;


                    }
                }
                if (_type.Sapt_cd == CommonUIDefiniton.PayMode.ADVAN.ToString() || _type.Sapt_cd == CommonUIDefiniton.PayMode.CRNOTE.ToString())
                {
                    pnlBankSlip.Visible = false;
                    pnlCC.Visible = false;
                    pnlCheque.Visible = false;
                    pnlDebit.Visible = false;
                    pnlOthers.Visible = true;
                    pnlCash.Visible = false;
                    pnlGiftVoucher.Visible = false;
                    pnlGV.Visible = false;
                    pnlLoyalty.Visible = false;
                    pnlStar.Visible = false;

                    //if (_type.Sapt_cd == CommonUIDefiniton.PayMode.CRNOTE.ToString()) {

                    //    lblRef.Visible = false;
                    //    textBoxRefAmo.Visible = false;
                    //}
                }
                else if (_type.Sapt_cd == CommonUIDefiniton.PayMode.CASH.ToString())
                {
                    pnlBankSlip.Visible = false;
                    pnlCC.Visible = false;
                    pnlCheque.Visible = false;
                    pnlDebit.Visible = false;
                    pnlOthers.Visible = false;
                    pnlCash.Visible = true;
                    pnlGiftVoucher.Visible = false;
                    pnlGV.Visible = false;
                    pnlLoyalty.Visible = false;
                    pnlStar.Visible = false;
                }

                else if (_type.Sapt_cd == CommonUIDefiniton.PayMode.GVO.ToString())
                {
                    pnlBankSlip.Visible = false;
                    pnlCC.Visible = false;
                    pnlCheque.Visible = false;
                    pnlDebit.Visible = false;
                    pnlOthers.Visible = false;
                    pnlCash.Visible = false;
                    pnlGiftVoucher.Visible = true;
                    pnlGV.Visible = false;
                    pnlLoyalty.Visible = false;
                    pnlStar.Visible = false;
                }
                else if (_type.Sapt_cd == CommonUIDefiniton.PayMode.GVS.ToString())
                {
                    pnlBankSlip.Visible = false;
                    pnlCC.Visible = false;
                    pnlCheque.Visible = false;
                    pnlDebit.Visible = false;
                    pnlOthers.Visible = false;
                    pnlCash.Visible = false;
                    pnlGiftVoucher.Visible = false;
                    pnlGV.Visible = true;
                    pnlLoyalty.Visible = false;
                    pnlStar.Visible = false;

                }
                else if (_type.Sapt_cd == CommonUIDefiniton.PayMode.LORE.ToString())
                {
                    pnlBankSlip.Visible = false;
                    pnlCC.Visible = false;
                    pnlCheque.Visible = false;
                    pnlDebit.Visible = false;
                    pnlOthers.Visible = false;
                    pnlCash.Visible = false;
                    pnlGiftVoucher.Visible = false;
                    pnlGV.Visible = false;
                    pnlLoyalty.Visible = true;
                    pnlStar.Visible = false;
                }
                else if (_type.Sapt_cd == CommonUIDefiniton.PayMode.STAR_PO.ToString())
                {
                    pnlBankSlip.Visible = false;
                    pnlCC.Visible = false;
                    pnlCheque.Visible = false;
                    pnlDebit.Visible = false;
                    pnlOthers.Visible = false;
                    pnlCash.Visible = false;
                    pnlGiftVoucher.Visible = false;
                    pnlGV.Visible = false;
                    pnlLoyalty.Visible = false;
                    pnlStar.Visible = true;
                }
                else if (_type.Sapt_cd == CommonUIDefiniton.PayMode.BANK_SLIP.ToString())
                {
                    pnlBankSlip.Visible = true;
                    pnlCC.Visible = false;
                    pnlCheque.Visible = false;
                    pnlDebit.Visible = false;
                    pnlOthers.Visible = false;
                    pnlCash.Visible = false;
                    pnlGiftVoucher.Visible = false;
                    pnlGV.Visible = false;
                    pnlLoyalty.Visible = false;
                    pnlStar.Visible = false;
                }

                if (!string.IsNullOrEmpty(textBoxAmount.Text))
                {
                    if (_paymentTypeRef == null)
                    {
                        List<PaymentType> _paymentTypeRef1 = CHNLSVC.Sales.GetPossiblePaymentTypes_new(BaseCls.GlbUserComCode, BaseCls.GlbDefSubChannel, BaseCls.GlbUserDefProf, InvoiceType, DateTime.Now.Date, 1);
                        _paymentTypeRef = _paymentTypeRef1;
                    }
                    if (_paymentTypeRef.Count <= 0)
                    {
                        List<PaymentType> _paymentTypeRef1 = CHNLSVC.Sales.GetPossiblePaymentTypes_new(BaseCls.GlbUserComCode, BaseCls.GlbDefSubChannel, BaseCls.GlbUserDefProf, InvoiceType, DateTime.Now.Date, 1);
                        _paymentTypeRef = _paymentTypeRef1;
                    }

                    // _paymentTypeRef = _paymentTypeRef.GroupBy(x => x.Stp_pay_tp).Select(x => x.First()).ToList<PaymentType>();
                    _paymentTypeRef = GetBankChgPAyTypes(_paymentTypeRef);
                    Decimal BankOrOtherCharge = 0;
                    Decimal BankOrOther_Charges = 0;

                    if (_paymentTypeRef != null)
                    {
                        foreach (PaymentType pt in _paymentTypeRef)
                        {
                            if (lblSelPayTp.Text == pt.Stp_pay_tp)
                            {
                                Decimal BCR = Convert.ToDecimal(pt.Stp_bank_chg_rt);
                                BankOrOtherCharge = Math.Round((Convert.ToDecimal(lblbalanceAmo.Text.Trim()) * BCR / 100), 2);

                                Decimal BCV = Convert.ToDecimal(pt.Stp_bank_chg_val);
                                BankOrOtherCharge = BankOrOtherCharge + BCV;

                                BankOrOther_Charges = BankOrOtherCharge;
                                break;
                            }
                        }
                        if (BankOrOther_Charges > 0)
                        {
                            textBoxAmount.Text = Base.FormatToCurrency((Math.Round(BankOrOther_Charges + Convert.ToDecimal(textBoxAmount.Text), 2)).ToString());
                            calculateBankChg = true;
                        }
                        else
                        {
                            textBoxAmount.Text = Base.FormatToCurrency(Convert.ToString((Convert.ToDecimal(lblGrndTotalAmount.Text) - Convert.ToDecimal(_paidAmount))));
                        }
                    }
                }
                textBoxAmount.Focus();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        protected void LoadCardType(string bank)
        {
            MasterOutsideParty _bankAccounts = CHNLSVC.Sales.GetOutSidePartyDetailsById(bank.ToUpper().Trim());
            if (_bankAccounts != null)
            {
                DataTable _dt = CHNLSVC.Sales.GetBankCC(_bankAccounts.Mbi_cd);
                if (_dt.Rows.Count > 0)
                {
                    comboBoxCardType.DataSource = _dt;
                    comboBoxCardType.DisplayMember = "mbct_cc_tp";
                    comboBoxCardType.ValueMember = "mbct_cc_tp";
                }
                else
                {
                    comboBoxCardType.DataSource = null;
                }

                var dr = _dt.AsEnumerable().Where(x => x["MBCT_CC_TP"].ToString() == "VISA");

                if (dr.Count() > 0)
                    comboBoxCardType.SelectedValue = "VISA";
            }
        }

        private void ResetControls(ControlCollection controlCollection)
        {
            foreach (Control contl in controlCollection)
            {
                var strCntName = (contl.GetType()).Name; switch (strCntName)
                {
                    case "TextBox":
                        var txtSource = (TextBox)contl;
                        txtSource.ResetText();
                        break;
                    case "CheckBox":
                        var chkSource = (CheckBox)contl;
                        chkSource.Checked = false;
                        break;
                    case "ComboBox":
                        var comboSource = (ComboBox)contl;
                        comboSource.DataSource = null;
                        break;

                } ////ResetControls(contl.Controls);
            }
        }

        private void textBoxCCBank_Leave(object sender, EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(textBoxCCBank.Text))
                {
                    if (!CheckBank(textBoxCCBank.Text, lblBank))
                    {
                        textBoxCCBank.Clear();
                        textBoxCCBank.Focus();
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(textBoxAmount.Text))
                        {
                            //LoadBankChg();
                            LoadCardType(textBoxCCBank.Text);
                            //PROMOTION
                            LoadPromotions();
                            // comboBoxPayModes_SelectionChangeCommitted(null, null);
                        }
                    }
                }
                //LoadBankChg();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void LoadPromotions()
        {
            //REMOVE COMMENT
            if (InvoiceItemList == null)
            {
                return;
            }
            else
            {
                List<int> period = new List<int>();

                if (_paymentTypeRef == null)
                {
                    List<PaymentType> _paymentTypeRef1 = CHNLSVC.Sales.GetPossiblePaymentTypes_new(BaseCls.GlbUserComCode, BaseCls.GlbDefSubChannel, BaseCls.GlbUserDefProf, InvoiceType, DateTime.Now.Date, 1);
                    _paymentTypeRef = _paymentTypeRef1;
                }
                if (_paymentTypeRef.Count <= 0)
                {
                    List<PaymentType> _paymentTypeRef1 = CHNLSVC.Sales.GetPossiblePaymentTypes_new(BaseCls.GlbUserComCode, BaseCls.GlbDefSubChannel, BaseCls.GlbUserDefProf, InvoiceType, DateTime.Now.Date, 1);
                    _paymentTypeRef = _paymentTypeRef1;
                }
                _paymentTypeRef = (from ii in _paymentTypeRef where ii.Stp_pay_tp == "CRCD" select ii).ToList<PaymentType>();

                #region Old Method
                if (_LINQ_METHOD == false)
                {
                    if (_paymentTypeRef != null && _paymentTypeRef.Count > 0)
                    {
                        for (int i = 0; i < _paymentTypeRef.Count; i++)
                        {
                            //CHECK for Bank
                            if (_paymentTypeRef[i].Stp_bank == textBoxCCBank.Text || string.IsNullOrEmpty(_paymentTypeRef[i].Stp_bank))
                            {

                                //check item/serail
                                if (SerialList != null) if (SerialList.Count > 0)
                                        if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                                            foreach (InvoiceItem _itm in InvoiceItemList)
                                            {
                                                var seriallist = SerialList.Where(x => x.Sap_itm_cd == _itm.Sad_itm_cd && x.Sap_ser_1 != "N/A" && !string.IsNullOrEmpty(x.Sap_ser_1)).ToList();
                                                foreach (InvoiceSerial _serial in seriallist)
                                                {
                                                    {
                                                        if (_paymentTypeRef[i].Stp_ser == _serial.Sap_ser_1 && _paymentTypeRef[i].Stp_itm == _itm.Sad_itm_cd && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_brd) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_main_cat) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_cat))
                                                        {
                                                            period.Add(_paymentTypeRef[i].Stp_pd);
                                                            goto END;

                                                        }
                                                    }

                                                }
                                            }
                                //check promo
                                if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                                {
                                    foreach (InvoiceItem _itm in InvoiceItemList)
                                    {
                                        {
                                            if (_paymentTypeRef[i].Stp_pro == _itm.Sad_promo_cd && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_brd) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_main_cat) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_cat))
                                            {
                                                period.Add(_paymentTypeRef[i].Stp_pd);
                                                goto END;
                                            }
                                        }
                                    }
                                }

                                //check item
                                if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                                {
                                    foreach (InvoiceItem _itm in InvoiceItemList)
                                    {
                                        {
                                            if (_paymentTypeRef[i].Stp_pro == _itm.Sad_promo_cd && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_brd) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_main_cat) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_cat))
                                            {
                                                period.Add(_paymentTypeRef[i].Stp_pd);
                                                goto END;
                                            }
                                        }
                                    }
                                }
                                //check brand/cat1/cat 2
                                if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                                {
                                    foreach (InvoiceItem _itm in InvoiceItemList)
                                    {
                                        {
                                            MasterItem _ii = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _itm.Sad_itm_cd);
                                            if (_ii == null)
                                                return;

                                            if (string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pro) && _paymentTypeRef[i].Stp_brd == _ii.Mi_brand && _paymentTypeRef[i].Stp_main_cat == _ii.Mi_cate_1 && _paymentTypeRef[i].Stp_cat == _itm.Mi_cate_2)
                                            {
                                                period.Add(_paymentTypeRef[i].Stp_pd);
                                                goto END;
                                            }
                                        }
                                    }
                                }


                                if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                                {
                                    foreach (InvoiceItem _itm in InvoiceItemList)
                                    {
                                        {
                                            MasterItem _ii = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _itm.Sad_itm_cd);
                                            if (_ii == null)
                                                return;

                                            if (string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pro) && _paymentTypeRef[i].Stp_brd == _ii.Mi_brand && _paymentTypeRef[i].Stp_main_cat == _ii.Mi_cate_1 && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_cat))
                                            {
                                                period.Add(_paymentTypeRef[i].Stp_pd);
                                                goto END;
                                            }
                                        }
                                    }
                                }
                                //check brand/cat2
                                if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                                {
                                    foreach (InvoiceItem _itm in InvoiceItemList)
                                    {
                                        {
                                            MasterItem _ii = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _itm.Sad_itm_cd);
                                            if (_ii == null)
                                                return;

                                            if (string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pro) && _paymentTypeRef[i].Stp_brd == _ii.Mi_brand && _paymentTypeRef[i].Stp_cat == _ii.Mi_cate_2 && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_main_cat))
                                            {
                                                period.Add(_paymentTypeRef[i].Stp_pd);
                                                goto END;
                                            }
                                        }
                                    }
                                }

                                //check brand
                                if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                                {
                                    foreach (InvoiceItem _itm in InvoiceItemList)
                                    {
                                        {
                                            MasterItem _ii = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _itm.Sad_itm_cd);
                                            if (_ii == null)
                                                return;
                                            if (string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pro) && _paymentTypeRef[i].Stp_brd == _ii.Mi_brand && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_cat) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_main_cat))
                                            {
                                                period.Add(_paymentTypeRef[i].Stp_pd);
                                                goto END;
                                            }
                                        }

                                    }
                                }

                                //pb plvl
                                if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                                {
                                    foreach (InvoiceItem _itm in InvoiceItemList)
                                    {
                                        {

                                            if (string.IsNullOrEmpty(_paymentTypeRef[i].Stp_pro) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_brd) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_cat) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_main_cat)
                                                && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_itm) && string.IsNullOrEmpty(_paymentTypeRef[i].Stp_ser) && _paymentTypeRef[i].Stp_pb == _itm.Sad_pbook && _paymentTypeRef[i].Stp_pb_lvl == _itm.Sad_pb_lvl)
                                            {
                                                period.Add(_paymentTypeRef[i].Stp_pd);
                                                goto END;
                                            }
                                        }

                                    }
                                }
                            }
                        END:
                            ;

                        }

                    }
                }
                #endregion

                #region New Method :: Done by Chamal 22/07/2014
                if (_LINQ_METHOD == true)
                {
                    if (_paymentTypeRef != null && _paymentTypeRef.Count > 0)
                    {
                        //check item/serail
                        if (SerialList != null && SerialList.Count > 0)
                        {
                            if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                            {
                                var _promo1 = (from p in _paymentTypeRef
                                               from i in InvoiceItemList
                                               from s in SerialList
                                               where (p.Stp_bank == null || p.Stp_bank == textBoxCCBank.Text.ToString()) &&
                                               (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_cat == null || p.Stp_cat == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                                               (p.Stp_pb == i.Sad_pbook || p.Stp_pb == null || p.Stp_pb == "") &&
                                               (p.Stp_pb_lvl == i.Sad_pb_lvl || p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                               (p.Stp_itm == i.Sad_itm_cd) && (p.Stp_itm == s.Sap_itm_cd) && (s.Sap_itm_cd != null) && (s.Sap_itm_cd != "") &&
                                               (p.Stp_ser == s.Sap_ser_1) && (s.Sap_ser_1 != null) && (s.Sap_ser_1 != "") && (s.Sap_ser_1 != "N/A")
                                               select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                                foreach (var _type in _promo1)
                                {
                                    period.Add(_type.Stp_pd);
                                    //goto END;
                                }
                            }
                        }

                        //check promo
                        if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                        {
                            var _promo1 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_bank == null || p.Stp_bank == textBoxCCBank.Text.ToString()) &&
                                           (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_cat == null || p.Stp_cat == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                                           (p.Stp_pb == i.Sad_pbook || p.Stp_pb == null || p.Stp_pb == "") &&
                                           (p.Stp_pb_lvl == i.Sad_pb_lvl || p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                           (p.Stp_pro == i.Sad_promo_cd) && (p.Stp_pro != null) && (p.Stp_pro != "")
                                           select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                            foreach (var _type in _promo1)
                            {
                                period.Add(_type.Stp_pd);
                                //goto END;
                            }
                        }

                        //check item + Specify bank
                        if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                        {
                            var _promo1 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_bank == textBoxCCBank.Text.ToString()) &&
                                           (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_cat == null || p.Stp_cat == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                                           (p.Stp_pb == i.Sad_pbook || p.Stp_pb == null || p.Stp_pb == "") &&
                                           (p.Stp_pb_lvl == i.Sad_pb_lvl || p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                           (p.Stp_itm == i.Sad_itm_cd) && (p.Stp_itm != null) && (p.Stp_itm != "")
                                           select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                            foreach (var _type in _promo1)
                            {
                                period.Add(_type.Stp_pd);
                                //goto END;
                            }
                        }

                        //check item
                        if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                        {
                            var _promo1 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_bank == null || p.Stp_bank == "") &&
                                           (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_cat == null || p.Stp_cat == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                                           (p.Stp_pb == i.Sad_pbook || p.Stp_pb == null || p.Stp_pb == "") &&
                                           (p.Stp_pb_lvl == i.Sad_pb_lvl || p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                           (p.Stp_itm == i.Sad_itm_cd) && (p.Stp_itm != null) && (p.Stp_itm != "")
                                           select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                            foreach (var _type in _promo1)
                            {
                                period.Add(_type.Stp_pd);
                                //goto END;
                            }
                        }

                        //check brand/cat1/cat2
                        if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                        {
                            //check brand/cat1/cat2
                            var _promo1 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_bank == null || p.Stp_bank == textBoxCCBank.Text.ToString()) && (p.Stp_pro == null || p.Stp_pro == "") &&
                                           (p.Stp_pb == i.Sad_pbook || p.Stp_pb == null || p.Stp_pb == "") &&
                                           (p.Stp_pb_lvl == i.Sad_pb_lvl || p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                           (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "") &&
                                           (p.Stp_main_cat == i.Mi_cate_1) && (p.Stp_main_cat != null) && (p.Stp_main_cat != "") &&
                                           (p.Stp_cat == i.Mi_cate_2) && (p.Stp_cat != null) && (p.Stp_cat != "")
                                           select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                            foreach (var _type in _promo1)
                            {
                                period.Add(_type.Stp_pd);
                                //goto END;
                            }

                            //check brand/cat1
                            var _promo2 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_bank == null || p.Stp_bank == textBoxCCBank.Text.ToString()) && (p.Stp_pro == null || p.Stp_pro == "") &&
                                           (p.Stp_cat == null || p.Stp_cat == "") &&
                                           (p.Stp_pb == i.Sad_pbook || p.Stp_pb == null || p.Stp_pb == "") &&
                                           (p.Stp_pb_lvl == i.Sad_pb_lvl || p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                           (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "") &&
                                           (p.Stp_main_cat == i.Mi_cate_1) && (p.Stp_main_cat != null) && (p.Stp_main_cat != "")
                                           select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                            foreach (var _type in _promo2)
                            {
                                period.Add(_type.Stp_pd);
                                //goto END;
                            }

                            //check brand/cat2
                            var _promo3 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_bank == null || p.Stp_bank == textBoxCCBank.Text.ToString()) && (p.Stp_pro == null || p.Stp_pro == "") &&
                                           (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                                           (p.Stp_pb == i.Sad_pbook || p.Stp_pb == null || p.Stp_pb == "") &&
                                           (p.Stp_pb_lvl == i.Sad_pb_lvl || p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                           (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "") &&
                                           (p.Stp_cat == i.Mi_cate_2) && (p.Stp_cat != null) && (p.Stp_cat != "")
                                           select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                            foreach (var _type in _promo3)
                            {
                                period.Add(_type.Stp_pd);
                                //goto END;
                            }

                            //check brand
                            var _promo4 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_bank == null || p.Stp_bank == textBoxCCBank.Text.ToString()) && (p.Stp_pro == null || p.Stp_pro == "") &&
                                           (p.Stp_main_cat == null || p.Stp_main_cat == "") && (p.Stp_cat == null || p.Stp_cat == "") &&
                                           (p.Stp_pb == i.Sad_pbook || p.Stp_pb == null || p.Stp_pb == "") &&
                                           (p.Stp_pb_lvl == i.Sad_pb_lvl || p.Stp_pb_lvl == null || p.Stp_pb_lvl == "") &&
                                           (p.Stp_brd == i.Mi_brand) && (p.Stp_brd != null) && (p.Stp_brd != "")
                                           select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                            foreach (var _type in _promo4)
                            {
                                period.Add(_type.Stp_pd);
                                //goto END;
                            }
                        }

                        //check pb plvel with bank
                        if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                        {
                            var _promo1 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_bank == textBoxCCBank.Text.ToString()) && (p.Stp_pro == null || p.Stp_pro == "") &&
                                           (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_cat == null || p.Stp_cat == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                                           (p.Stp_itm == null || p.Stp_itm == "") && (p.Stp_ser == null || p.Stp_ser == "") &&
                                           (p.Stp_pb == i.Sad_pbook || p.Stp_pb == null || p.Stp_pb == "") &&
                                           (p.Stp_pb_lvl == i.Sad_pb_lvl || p.Stp_pb_lvl == null || p.Stp_pb_lvl == "")
                                           select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                            foreach (var _type in _promo1)
                            {
                                period.Add(_type.Stp_pd);
                                //goto END;
                            }
                        }

                        //check pb plvel 
                        if (InvoiceItemList != null && InvoiceItemList.Count > 0)
                        {
                            var _promo1 = (from p in _paymentTypeRef
                                           from i in InvoiceItemList
                                           where (p.Stp_bank == null || p.Stp_bank == "") && (p.Stp_pro == null || p.Stp_pro == "") &&
                                           (p.Stp_brd == null || p.Stp_brd == "") && (p.Stp_cat == null || p.Stp_cat == "") && (p.Stp_main_cat == null || p.Stp_main_cat == "") &&
                                           (p.Stp_itm == null || p.Stp_itm == "") && (p.Stp_ser == null || p.Stp_ser == "") &&
                                           (p.Stp_pb == i.Sad_pbook) &&
                                           (p.Stp_pb_lvl == i.Sad_pb_lvl)
                                           select p).ToList().Distinct().OrderByDescending(o => o.Stp_seq);
                            foreach (var _type in _promo1)
                            {
                                period.Add(_type.Stp_pd);
                                //goto END;
                            }
                        }
                    }
                    //END:;
                }
                #endregion

                if (period.Count > 0)
                {

                    //set period visible
                    period.Sort();
                    panelPermotion.Visible = true;
                    comboBoxPermotion.DataSource = period;
                }
            }
        }

        private void dataGridViewPayments_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (e.ColumnIndex == 0 && e.RowIndex != -1)
                {

                    if (MessageBox.Show("Do you want to remove selected payment ?", "Confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1) == DialogResult.Yes)
                    {
                        RecieptItemList.RemoveAt(e.RowIndex);

                        _paidAmount = 0;
                        foreach (RecieptItem _list in RecieptItemList)
                        {
                            _paidAmount += _list.Sard_settle_amt;
                        }

                        lblPaidAmo.Text = Convert.ToString(_paidAmount);
                        lblbalanceAmo.Text = (Convert.ToString((Convert.ToDecimal(lblGrndTotalAmount.Text) - Convert.ToDecimal(_paidAmount))));
                        textBoxAmount.Text = lblbalanceAmo.Text;
                        txtCashBal.Text = FormatToCurrency("0");

                        if (RecieptItemList.Count > 0)
                        {
                            LoadRecieptGrid();
                        }
                        else
                        {
                            LoadRecieptGrid();
                        }

                        //   ItemAdded(sender, e);
                        calculateBankChg = false;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void CollectBusinessEntity()
        {
            _businessEntity = new MasterBusinessEntity();
            _businessEntity.Mbe_act = true;
            //// _businessEntity.Mbe_add1 = txtAddress1.Text;
            //// _businessEntity.Mbe_add2 = txtAddress2.Text;
            _businessEntity.Mbe_cd = "c1";
            _businessEntity.Mbe_com = BaseCls.GlbUserComCode;
            _businessEntity.Mbe_contact = string.Empty;
            _businessEntity.Mbe_email = string.Empty;
            _businessEntity.Mbe_fax = string.Empty;
            _businessEntity.Mbe_is_tax = false;
            _businessEntity.Mbe_mob = txtMobile.Text;
            _businessEntity.Mbe_name = txtCusName.Text;
            _businessEntity.Mbe_nic = txtNIC.Text;
            _businessEntity.Mbe_tax_no = string.Empty;
            _businessEntity.Mbe_tel = string.Empty;
            _businessEntity.Mbe_tp = "C";
            _businessEntity.Mbe_pc_stus = "GOOD";
            _businessEntity.Mbe_ho_stus = "GOOD";
            ////_businessEntity.MBE_TIT = cmbTitle.Text;
            _businessEntity.Mbe_cate = "INDIVIDUAL";
        }

        public static string FormatDiscoutnItem(int Indent, string Value)
        {
            return new string('\t', Indent) + Value;
        }

        private bool CheckItemWarrantyNew(string _item, string _status, Int32 _pbSeq, Int32 _itmSeq, string _pb, string _pbLvl, Boolean _isPbWara, decimal _unitPrice, Int32 _pbWarrPd)
        {
            bool _isNoWarranty = false;
            MasterItemWarrantyPeriod _period = new MasterItemWarrantyPeriod();
            LogMasterItemWarranty _periodLog = new LogMasterItemWarranty();
            //List<PriceBookLevelRef> _lvl = _priceBookLevelRefList;
            //if (_lvl != null)
            //    if (_lvl.Count > 0)
            //    {
            //        var _lst = (from _l in _lvl where _l.Sapl_itm_stuts == _status.Trim() select _l).ToList();
            //        if (_lst != null)
            //if (_lst.Count > 0)
            //{
            DataTable _temWarr = CHNLSVC.Sales.GetPCWara(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _item.Trim(), _status.Trim(), Convert.ToDateTime(txtDate.Text).Date);

            if (_isPbWara == true && _unitPrice > 0)
            {
                WarrantyPeriod = _pbWarrPd;
                PriceDetailRef _lsts = CHNLSVC.Sales.GetPriceDetailByItemLineSeq(_item, _itmSeq, _pbSeq);
                if (_lsts != null)
                {
                    WarrantyRemarks = _lsts.Sapd_warr_remarks;
                }

            }
            else if (_temWarr != null && _temWarr.Rows.Count > 0)
            {
                WarrantyPeriod = Convert.ToInt32(_temWarr.Rows[0]["SPW_WARA_PD"].ToString());
                WarrantyRemarks = _temWarr.Rows[0]["SPW_WARA_RMK"].ToString();
            }
            else if (txtDate.Value.Date != _serverDt)
            {
                _period = new MasterItemWarrantyPeriod();
                _period = CHNLSVC.Sales.GetItemWarrEffDt(_item, _status, 1, txtDate.Value.Date);
                if (_period.Mwp_itm_cd != null)
                {
                    WarrantyPeriod = _period.Mwp_val;
                    WarrantyRemarks = _period.Mwp_rmk;
                }
                else
                {
                    _periodLog = new LogMasterItemWarranty();
                    _periodLog = CHNLSVC.Sales.GetItemWarrEffDtLog(_item.Trim(), _status.Trim(), 1, txtDate.Value.Date); if (_periodLog.Lmwp_itm_cd != null) { WarrantyPeriod = _periodLog.Lmwp_val; WarrantyRemarks = _periodLog.Lmwp_rmk; }
                    else { _isNoWarranty = true; }
                }
            }
            else
            {
                _period = new MasterItemWarrantyPeriod();
                _period = CHNLSVC.Inventory.GetItemWarrantyDetail(_item.Trim(), _status.Trim()); if (_period.Mwp_itm_cd != null) { WarrantyPeriod = _period.Mwp_val; WarrantyRemarks = _period.Mwp_rmk; }
                else { _isNoWarranty = true; }
            }
            //}
            //}
            return _isNoWarranty;

        }

        private bool CheckGeneralDiscount()
        {
            string _cusCode = txtCustomer.Text.Trim();
            foreach (InvoiceItem _invItm in _invoiceItemList)
            {
                if (_invItm.Sad_dis_type == "M" && _invItm.Sad_disc_rt > 0)
                {
                    //get discount line
                    //validate data
                    CashGeneralEntiryDiscountDef _def = CHNLSVC.Sales.GetGeneralDiscountDefinitionBySequence(_invItm.Sad_dis_seq);
                    if (_def == null)
                    {
                        //using (new CenterWinDialog(this)) { MessageBox.Show("Item - " + _invItm.Sad_itm_cd + "\nGeneral Discount not found\nPlease contact IT Dept.", "General Discount", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        return true;
                    }
                    else
                    {
                        //Add by Chamal 22-Dec-2014
                        if (_def.Sgdd_stus == true && _def.Sgdd_from_dt.Date <= txtDate.Value.Date && _def.Sgdd_to_dt.Date >= txtDate.Value.Date && _def.Sgdd_com == BaseCls.GlbUserComCode)
                        {
                            if (txtCustomer.Text.Trim() != _def.Sgdd_cust_cd && !string.IsNullOrEmpty(_def.Sgdd_cust_cd))
                            {
                                using (new CenterWinDialog(this)) { MessageBox.Show("Item - " + _invItm.Sad_itm_cd + "\nGeneral Discount definition customer and invoice customer mismatch\nDefinition Customer - " + _def.Sgdd_cust_cd + "\nPlease contact IT Dept.", "General Discount", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return false;
                            }
                            if (!string.IsNullOrEmpty(_def.Sgdd_itm) && (_invItm.Sad_itm_cd != _def.Sgdd_itm))
                            {
                                using (new CenterWinDialog(this)) { MessageBox.Show("Item - " + _invItm.Sad_itm_cd + "\nGeneral Discount definition item and invoice item mismatch\nDefinition item - " + _def.Sgdd_itm + "\nPlease contact IT Dept.", "General Discount", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return false;
                            }
                        }
                    }
                }
            }
            return true;
        }

        private string PaymentBalanceConfirmation(string Msg, decimal _cashamount)
        {
            string _cashGiven = Microsoft.VisualBasic.Interaction.InputBox(Msg + "\nPlease enter customer tender amount.", "Balance", FormatToCurrency(Convert.ToString(_cashamount)), -1, -1);
            if (!string.IsNullOrEmpty(_cashGiven))
            {
                if (IsNumeric(_cashGiven) == false)
                {
                    Msg = "Invalid amount. ";
                    PaymentBalanceConfirmation(Msg, _cashamount);
                }

                if (Convert.ToDecimal(_cashGiven) < _cashamount)
                {
                    Msg = "Invalid amount. ";
                    PaymentBalanceConfirmation(Msg, _cashamount);
                }
            }

            return _cashGiven;
        }

        private void HideConsumerPricePanel()
        {
            pnlConsumerPrice.Visible = false;
            // pnlMain.Enabled = true;
        }

        private void HideDeliveryInstructionPanel()
        {
            pnlDeliveryInstruction.Visible = false;
            // pnlMain.Enabled = true;
        }

        private void HideInventoryCombineSerialPickPanel()
        {
            pnlInventoryCombineSerialPick.Visible = false;
            // pnlMain.Enabled = true;
        }

        private void HideMultiCombinePanel()
        {
            pnlMultiCombine.Visible = false;
            // pnlMain.Enabled = true;
        }

        private void HideMultipleItemPanel()
        {
            pnlMultipleItem.Visible = false;
            // pnlMain.Enabled = true;
        }

        private void HidePriceNPromotionPanel()
        {
            pnlPriceNPromotion.Visible = false;
            _isPanelMain = true;
        }

        private void HideRePaymentPanel()
        {
            pnlRePay.Visible = false;
            // pnlMain.Enabled = true;
        }

        private void Clear()
        {
            string _promoVoucherTp = string.Empty;
            decimal _promoVoucherDiscount = 0;
            decimal _promoVoucherDiscBalance = 0;
            string _promoVoucherCode = string.Empty;

            pnlPromoVouNo.Visible = false;
            gvgvo.Visible = false;
            txtPromoVouNo.Text = string.Empty;

            btnCust.Enabled = true;
            Promoter = string.Empty;
            LoadItemDetail(string.Empty);
            LoadBuyBackItemDetail(string.Empty);
            ClearVariable();
            clear_CRCD();
            ClearTop1p0();
            ClearTop2p0();
            ClearTop2p1();
            ClearTop2p2(); ClearRight1p0(); ClearMiddle1p0(); ClearRight1p1(); ClearPayMode(); ClearConsumablePanle(); ClearDeliveryInstructionPanel();
            ClearInventoryCombineSerialPickPanel(); ClearMultiCombinePanel(); ClearMultiItemPanel(); ClearPriceNPromotionPanel();
            HideConsumerPricePanel(); HideDeliveryInstructionPanel(); HideInventoryCombineSerialPickPanel(); HideMultiCombinePanel(); HideMultipleItemPanel(); HidePriceNPromotionPanel(); HideRePaymentPanel();
            InitializeValuesNDefaultValueSet();
            BackDatePermission(); //Add Chamal 02/04/2013
            gvAddBuyBack.Rows.Clear();
            gvBuyBack.DataSource = null;
            gvRePayment.DataSource = null;
            txtBBItem.Clear();
            txtBBQty.Clear();
            txtBBSerial1.Clear();
            txtBBSerial2.Clear();
            txtBBWarranty.Clear();
            btnBuyBack.BackColor = Color.White;
            pnlTokenItem.Visible = false;
            chkDeliverLater.Checked = false;
            txtRemarks.Clear();
            CHNLSVC.CloseAllChannels();
            btnSave.Enabled = true;
            txtItem.Enabled = true;
            txtSerialNo.Enabled = true;
            btnAddItem.Enabled = true;
            chkDeliverLater.Enabled = true;
            ////txtPoNo.Clear();
            _isCompleteCode = false;
            _IsVirtualItem = false;
            ////txtPromotor.Text = "";
            ////LoadExecutive();
            ////LoadPromotor();
            ////ucPayModes1.ClearControls();
            TotalAmount = 0;
            InvoiceItemList = null;
            SerialList = null;
            textBoxAmount.Text = "0";
            txtCNT.Text = "0";
            Mobile = string.Empty;
            Customer_Code = txtCustomer.Text.Trim();
            LoadData();
            txtLoyalty.BackColor = Color.SteelBlue;
            CHNLSVC.CloseAllChannels();
            pnlDoNowItems.Visible = false;
            btnDoConfirm.Enabled = true;
            gvDiscount.DataSource = null;
            pnlDiscount.Visible = false;
            txtCustomer.ReadOnly = false;
            btnSearch_Customer.Enabled = true;
            lnkProcessRegistration.Visible = false;
            pnlRegistration.Visible = false;
            ucPayModes2.ClearControls();
            ucPayModes2.TotalAmount = 0;
            ucPayModes2.InvoiceItemList = null;
            ucPayModes2.SerialList = null;
            ucPayModes2.Amount.Text = "0";
            ucPayModes2.Mobile = string.Empty;
            ucPayModes2.Customer_Code = txtCustomer.Text.Trim();
            ucPayModes2.LoadData();
            gvRegistrationItems.DataSource = null;

            txtCusName.ReadOnly = false;
            ////txtAddress1.Enabled = true;
            ////txtAddress2.Enabled = true;
            txtMobile.Enabled = true;
            txtNIC.Enabled = true;
            ClearAfterAddItem();

            btnMulti.Text = "OFF";
            btnMulti.BackColor = Color.Bisque;
            txtItem.Focus();
            btnBarcode.Text = "ON";
            btnBarcode.BackColor = Color.LimeGreen;

            //kapila
            gvInvoiceItem.Enabled = true;
            dataGridViewPayments.Enabled = true;
            btnEnter.Enabled = true;
            btnHold.Enabled = true;
            sendToDisplay(0, 0);
            IsInvoiceCompleted = false;
        }

        private void ClearControls()
        {
            ////////ResetControls(pnlCheque.Controls);
            ////////ResetControls(pnlBankSlip.Controls);
            ////////ResetControls(pnlCC.Controls);
            ////////ResetControls(pnlDebit.Controls);
            ////////ResetControls(pnlOthers.Controls);
            ////////ResetControls(pnlCash.Controls);
            ////////ResetControls(pnlGV.Controls);
            ////////ResetControls(pnlGiftVoucher.Controls);
            ////////ResetControls(pnlLoyalty.Controls);
            gvMultipleItem.DataSource = null;
            RecieptItemList = new List<RecieptItem>();
            var source = new BindingSource();
            source.DataSource = RecieptItemList;
            dataGridViewPayments.AutoGenerateColumns = false;
            dataGridViewPayments.DataSource = source;
            TotalAmount = 0;
            lblbalanceAmo.Text = "0.00";
            lblPaidAmo.Text = "0.00";
            _paidAmount = 0;
            textBoxAmount.Text = "0.00";
            ////comboBoxPayModes.DataSource = null;
            HavePayModes = true;
            textBoxAmount.Enabled = true;
            button1.Visible = true;
            LoyaltyTYpeList = new List<string>();
            Customer_Code = "";
            InvoiceItemList = new List<InvoiceItem>();
            SerialList = new List<InvoiceSerial>();
            lblLoyaltyBalance.Text = "";
            lblLoyaltyCustomer.Text = "";
            lblLoyaltyType.Text = "";
            lblbalanceAmo.Text = "";
            lblCd.Text = "";
            lblBook.Text = "";
            lblPrefix.Text = "";
            lblCusCode.Text = "";
            lblCusName.Text = "";
            lblMobile.Text = "";
            lblPointValue.Text = "";
            //// textBoxRemark.Text = "";
            IsZeroAllow = false;
            ////  textBoxRemark.Text = "";
            txtGVRef.Text = "";
            txtGiftVoucher.Text = "";
            lblCd.Text = "";
            lblCusCode.Text = "";
            lblCusName.Text = "";
            lblPrefix.Text = "";
            lblMobile.Text = "";
            lblAdd1.Text = "";
            lblBook.Text = "";
            textBoxAmount.Text = "0.00";
            gvMultipleItem.DataSource = null;

            panelPermotion.Visible = false;
            pnlBankSlip.Visible = false;
            pnlCC.Visible = false;
            pnlCheque.Visible = false;
            pnlDebit.Visible = false;
            pnlOthers.Visible = false;
            pnlCash.Visible = false;
            pnlGiftVoucher.Visible = false;
            pnlGV.Visible = false;
            pnlLoyalty.Visible = false;
            pnlStar.Visible = false;
            IsTaxInvoice = false;
            ISPromotion = false;
            IsDiscounted = false;
            DiscountedInvoiceItem = new List<InvoiceItem>();
            GVLOC = "";
            GVISSUEDATE = DateTime.MinValue; ;
            GVCOM = "";
            calculateBankChg = false;
            LoyaltyCard = "";


            HpSystemParameters _SystemPara = new HpSystemParameters();
            _SystemPara = CHNLSVC.Sales.GetSystemParameter("COM", BaseCls.GlbUserComCode, "PAYMDLINQ", DateTime.Now.Date);
            if (_SystemPara == null)
            { _LINQ_METHOD = true; }
            else
            {
                if (_SystemPara.Hsy_seq == 0) _LINQ_METHOD = true;
            }
        }


        private void ClearTop1p0()
        {
            txtDate.Text = DateTime.Today.Date.ToString("dd/MM/yyyy");
            ////cmbInvType.Text = string.Empty;
            ////txtDocRefNo.Clear();
            txtInvoiceNo.Text = ""; ;
            lblCurrency.Text = "LKR - Sri Lankan Rupees";
            btnCust.Enabled = true;
        }

        private void ClearTop2p0()
        {
            txtCustomer.Clear();
            txtNIC.Clear();
            txtMobile.Clear();
            txtLoyalty.Clear();
            txtCusName.Clear();
            ////txtAddress1.Clear();
            ////txtAddress2.Clear();
        }

        private void ClearTop2p1()
        {
            chkTaxPayable.Checked = false;
            lblSVatStatus.Text = string.Empty;
            lblVatExemptStatus.Text = string.Empty;
        }

        private void ClearTop2p2()
        {
            ////lblAccountBalance.Text = FormatToCurrency("0");
            ////lblAvailableCredit.Text = FormatToCurrency("0");
        }

        private void ClearRight1p0()
        {
            txtExecutive.Clear();
            ////txtPromotor.Clear();
            ////txtManualRefNo.Clear();
            ////chkManualRef.Checked = false;
            technicianCode = string.Empty;
        }

        private void ClearMiddle1p0()
        {
            txtSerialNo.Clear();
            txtItem.Clear();
            cmbBook.Text = string.Empty;
            cmbLevel.Text = string.Empty;
            cmbStatus.Text = DefaultStatus;
            txtQty.Text = FormatToQty("0");
            txtUnitPrice.Text = FormatToCurrency("0");
            txtUnitAmt.Text = FormatToCurrency("0");
            txtDisRate.Text = FormatToCurrency("0");
            txtDisAmt.Text = FormatToCurrency("0");
            txtTaxAmt.Text = FormatToCurrency("0");
            txtLineTotAmt.Text = FormatToCurrency("0");
            gvInvoiceItem.DataSource = new List<InvoiceItem>();
            gvPopSerial.DataSource = new List<ReptPickSerials>();
            gvGiftVoucher.DataSource = new List<ReptPickSerials>();
            lblLvlMsg.Text = string.Empty;
        }

        private void ClearRight1p1()
        {
            lblGrndSubTotal.Text = FormatToCurrency("0");
            lblGrndDiscount.Text = FormatToCurrency("0");
            lblGrndAfterDiscount.Text = FormatToCurrency("0");
            lblGrndTax.Text = FormatToCurrency("0");
            lblGrndTotalAmount.Text = FormatToCurrency("0");
        }

        private void ClearPayMode()
        {
            ClearControls();
        }

        private void ClearConsumablePanle()
        {
            gvPopConsumPricePick.DataSource = new List<InventoryBatchRefN>();
        }

        private void ClearDeliveryInstructionPanel()
        {
            txtDelLocation.Clear();
            chkOpenDelivery.Checked = false;
            txtDelCustomer.Clear();
            txtDelName.Clear();
            txtDelAddress1.Clear();
            txtDelAddress2.Clear();
        }

        private void ClearInventoryCombineSerialPickPanel()
        {
            gvPopComItem.DataSource = new List<MasterItemComponent>();
            gvPopComItemSerial.DataSource = new List<ReptPickSerials>();
            txtInvComSerSearch.Clear();
        }

        private void ClearMultiCombinePanel()
        {
            gvMultiCombineItem.DataSource = new DataTable();
        }

        private void ClearMultiItemPanel()
        {
            gvMultipleItem.DataSource = new DataTable();
        }

        private void ClearPriceNPromotionPanel()
        {
            gvNormalPrice.DataSource = new List<PriceDetailRef>();
            gvPromotionPrice.DataSource = new List<PriceDetailRef>();
            gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
            gvPromotionSerial.DataSource = new List<ReptPickSerials>();
            txtPriNProSerialSearch.Clear();
            lblPriNProAvailableQty.Text = FormatToQty("0");
            lblPriNProAvailableStatusQty.Text = FormatToQty("0");
        }

        private bool LoadBuyBackItemDetail(string _item)
        {
            lblBBDescription.Text = "Description : " + string.Empty;
            lblBBModel.Text = "Model : " + string.Empty;
            lblBBBrand.Text = "Brand : " + string.Empty;
            _itemdetail = new MasterItem();

            bool _isValid = false;

            if (!string.IsNullOrEmpty(_item)) _itemdetail = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
            if (_itemdetail != null)
                if (!string.IsNullOrEmpty(_itemdetail.Mi_cd))
                {
                    _isValid = true;
                    string _description = _itemdetail.Mi_longdesc;
                    string _model = _itemdetail.Mi_model;
                    string _brand = _itemdetail.Mi_brand;
                    string _serialstatus = _itemdetail.Mi_is_ser1 == 1 ? "Available" : "Non";

                    lblBBDescription.Text = "Description : " + _description;
                    lblBBModel.Text = "Model : " + _model;
                    lblBBBrand.Text = "Brand : " + _brand;
                }
            if (!_item.Contains("BUY BACK"))
                _isValid = false;

            return _isValid;
        }

        private void ClearVariable()
        {
            btnSave.Enabled = true;
            txtInvoiceNo.Enabled = true;
            WarrantyRemarks = string.Empty;
            WarrantyPeriod = 0;
            ScanSequanceNo = 0;
            ScanSerialNo = string.Empty;
            SSPriceBookSequance = "0";
            SSPriceBookItemSequance = "0";
            SSPriceBookPrice = 0;
            _recieptItem = new List<RecieptItem>();
            ScanSerialList = new List<ReptPickSerials>();
            InventoryCombinItemSerialList = new List<ReptPickSerials>();
            ManagerDiscount = new Dictionary<decimal, decimal>();
            _invoiceItemList = new List<InvoiceItem>();
            InvoiceSerialList = new List<InvoiceSerial>();
            PriceCombinItemSerialList = new List<ReptPickSerials>();
            MainTaxConstant = new List<MasterItemTax>();
            _priceBookLevelRefList = new List<PriceBookLevelRef>();
            _lineNo = 1;
            _isEditPrice = false;
            _isEditDiscount = false;
            GrndSubTotal = 0;
            GrndDiscount = 0;
            GrndTax = 0;
            SSCombineLine = 1;
            _isCompleteCode = false;
            _serialMatch = true;
            _processMinusBalance = false;
            dvDOSerials.DataSource = null;
            dvDOItems.DataSource = null;
            _discountSequence = 0;
            _isRegistrationMandatory = false;
            _isNeedRegistrationReciept = false;
            _totalRegistration = 0;
            ////List<RegistrationList> _List = new List<RegistrationList>();
            _loyaltyType = null;
        }

        private void btnChq_Click(object sender, EventArgs e)
        {


        }

        private void btnGV_Click(object sender, EventArgs e)
        {
            pnlPay.Show();

            ////pnlBankSlip.Visible = false;
            pnlCC.Visible = false;
            pnlCheque.Visible = false;
            pnlDebit.Visible = false;
            pnlOthers.Visible = false;
            pnlCash.Visible = false;
            pnlGiftVoucher.Visible = true;
            pnlGV.Visible = false;
            pnlLoyalty.Visible = false;
            pnlStar.Visible = false;


            lblSelPayTpDesc.Text = "GIFT VOUCHER-COMPANY";
            lblSelPayTp.Text = "GVO";
            textBoxAmount.Text = lblbalanceAmo.Text;
        }

        private void buttonCCBankSearch_Click(object sender, EventArgs e)
        {
            try
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.Bank);
                DataTable _result = CHNLSVC.CommonSearch.GetBusinessCompany(_CommonSearch.SearchParams, null, null);
                _CommonSearch.IsSearchEnter = true;
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = textBoxCCBank;
                _CommonSearch.ShowDialog();
                textBoxCCBank.Select();
                LoadCardType(textBoxCCBank.Text);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void buttonDepBankSearch_Click(object sender, EventArgs e)
        {
            try
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
                _CommonSearch.ReturnIndex = 3;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.DepositBank);
                DataTable _result = CHNLSVC.CommonSearch.searchDepositBankCode(_CommonSearch.SearchParams, null, null);
                _CommonSearch.IsSearchEnter = true;
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = textBoxCCDepBank;
                _CommonSearch.ShowDialog();
                textBoxCCDepBank.Select();


            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void LoadAdvancedReciept()
        {
            DataTable _dt = CHNLSVC.Sales.GetReceipt(textBoxRefNo.Text);
            if (_dt != null && _dt.Rows.Count > 0)
            {
                textBoxRefAmo.Text = (Convert.ToDecimal(_dt.Rows[0]["SAR_TOT_SETTLE_AMT"]) - Convert.ToDecimal(_dt.Rows[0]["sar_used_amt"])).ToString();
            }
            else
            {
                MessageBox.Show("Invalid Advanced Receipt No", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
        }

        private void buttonRef_Click(object sender, EventArgs e)
        {
            try
            {
                if (lblSelPayTp.Text == "ADVAN")
                {
                    CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
                    _CommonSearch.ReturnIndex = 0;
                    _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.AdvanceRecForCus);
                    DataTable _result = CHNLSVC.CommonSearch.GetAdvancedRecieptForCus(_CommonSearch.SearchParams, null, null);
                    _CommonSearch.IsSearchEnter = true;
                    _CommonSearch.dvResult.DataSource = _result;
                    _CommonSearch.BindUCtrlDDLData(_result);
                    _CommonSearch.obj_TragetTextBox = textBoxRefNo;
                    _CommonSearch.ShowDialog();
                    textBoxRefNo.Select();
                    if (textBoxRefNo.Text != "")
                    {
                        LoadAdvancedReciept();
                    }
                }
                else if (lblSelPayTp.Text == "CRNOTE")
                {
                    CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
                    _CommonSearch.ReturnIndex = 0;
                    _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.CreditNote);
                    DataTable _result = CHNLSVC.CommonSearch.GetCreditNote(_CommonSearch.SearchParams, null, null);
                    _CommonSearch.IsSearchEnter = true;
                    _CommonSearch.dvResult.DataSource = _result;
                    _CommonSearch.BindUCtrlDDLData(_result);
                    _CommonSearch.obj_TragetTextBox = textBoxRefNo;
                    _CommonSearch.ShowDialog();
                    textBoxRefNo.Select();
                    if (textBoxRefNo.Text != "")
                    {
                        LoadCreditNote();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void LoadCreditNote()
        {
            if (!chkSCM.Checked)
            {
                InvoiceHeader _invoice = CHNLSVC.Sales.GetInvoiceHeaderDetails(textBoxRefNo.Text);
                if (_invoice != null)
                {
                    //validate
                    if (_invoice.Sah_direct)
                    {
                        return;
                    }
                    if (_invoice.Sah_stus == "C")
                    {
                        return;
                    }
                    if (_invoice.Sah_cus_cd != txtCustomer.Text)
                    {
                        return;
                    }
                    if ((_invoice.Sah_anal_7 - _invoice.Sah_anal_8) * _invoice.Sah_ex_rt <= 0)
                    {
                        MessageBox.Show("No credit note balance", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        textBoxRefNo.Text = "";
                        return;
                    }
                    textBoxRefAmo.Text = ((_invoice.Sah_anal_7 - _invoice.Sah_anal_8) * _invoice.Sah_ex_rt).ToString();
                    textBoxAmount.Text = textBoxRefAmo.Text;
                }
                else
                {
                    return;
                }
            }
            else
            {
                DataTable _inv = CHNLSVC.General.GetSCMCreditNote(textBoxRefNo.Text.Trim().ToString(), txtCustomer.Text);
                if (_inv != null && _inv.Rows.Count > 0)
                {
                    textBoxRefAmo.Text = (Convert.ToDecimal(_inv.Rows[0]["balance_settle_amount"]) - Convert.ToDecimal(_inv.Rows[0]["SETTLE_AMOUNT"])).ToString();
                }
            }
        }

        private void buttonSearchOthDep_Click(object sender, EventArgs e)
        {
            try
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.BankAccount);
                DataTable _result = CHNLSVC.CommonSearch.GetBankAccounts(_CommonSearch.SearchParams, null, null);
                _CommonSearch.IsSearchEnter = true;
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = textBoxOthDepBank;
                _CommonSearch.ShowDialog();
                textBoxOthDepBank.Select();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void textBoxRefNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                textBoxRefAmo.Focus();
            }
            if (e.KeyCode == Keys.F2)
            {
                buttonRef_Click(null, null);
            }
        }

        private void textBoxOthDepBank_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
            {
                buttonSearchOthDep_Click(null, null);
            }
        }

        private void textBoxRefNo_Leave(object sender, EventArgs e)
        {
            try
            {
                if (lblSelPayTp.Text == "ADVAN")
                {

                    if (textBoxRefNo.Text != "")
                    {
                        LoadAdvancedReciept();
                    }
                }
                else if (lblSelPayTp.Text == "CRNOTE")
                {

                    if (textBoxRefNo.Text != "")
                    {
                        if (txtCustomer.Text == "")
                        {
                            MessageBox.Show("Can not Process credit note\nTechnical Info: NO CUSTOMER CODE", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            return;
                        }
                        LoadCreditNote();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void btnGiftVoucher_Click(object sender, EventArgs e)
        {
            try
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.GiftVoucher);
                DataTable _result = CHNLSVC.Inventory.SearchGiftVoucher(_CommonSearch.SearchParams, null, null);
                _CommonSearch.IsSearchEnter = true;
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtGiftVoucher;
                _CommonSearch.ShowDialog();
                txtGiftVoucher.Select();
                if (txtGiftVoucher.Text != "")
                    LoadGiftVoucher(txtGiftVoucher.Text);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void LoadGiftVoucher(string p)
        {
            Int32 val;

            if (!int.TryParse(p, out val))
                return;

            //List<GiftVoucherPages> _gift = new List<GiftVoucherPages>();
            //List<GiftVoucherPages> _Allgv = CHNLSVC.Inventory.GetGiftVoucherPages(null, Convert.ToInt32(p));
            List<GiftVoucherPages> _gift = CHNLSVC.Inventory.GetGiftVoucherPages(BaseCls.GlbUserComCode, Convert.ToInt32(p));


            //if (_gift.Count > 1)
            //{

            //    _gift = _gift.Where(c => c.Gvp_pc == BaseCls.GlbUserDefProf).ToList();
            //}
            //if (_Allgv != null)
            //{
            //    foreach (GiftVoucherPages _tmp in _Allgv)
            //    {
            //        DataTable _allCom = CHNLSVC.Inventory.GetGVAlwCom(BaseCls.GlbUserComCode, _tmp.Gvp_gv_cd, 1);
            //        if (_allCom.Rows.Count > 0)
            //        {
            //            _gift.Add(_tmp);
            //        }

            //    }
            //}


            if (_gift != null)
            {
                if (_gift.Count == 1)
                {
                    lblAdd1.Text = _gift[0].Gvp_cus_add1;

                    lblCusCode.Text = _gift[0].Gvp_cus_cd;
                    lblCusName.Text = _gift[0].Gvp_cus_name;
                    lblMobile.Text = _gift[0].Gvp_cus_mob;
                    textBoxAmount.Text = _gift[0].Gvp_bal_amt.ToString();

                    lblBook.Text = _gift[0].Gvp_book.ToString();
                    lblPrefix.Text = _gift[0].Gvp_gv_cd;
                    lblCd.Text = _gift[0].Gvp_gv_prefix;
                    GVLOC = _gift[0].Gvp_pc;
                    GVISSUEDATE = _gift[0].Gvp_issue_dt;
                    GVCOM = _gift[0].Gvp_com;
                }
                else
                {
                    grdGvoList.AutoGenerateColumns = false; // add  by tharanga 2017/10/21
                    pnlGvo.Visible = true;
                    grdGvoList.DataSource = _gift;
                    //gvMultipleItem.AutoGenerateColumns = false;
                    //gvMultipleItem.Visible = true;
                    //gvMultipleItem.DataSource = _gift;
                }
            }
        }

        private void txtGiftVoucher_DoubleClick(object sender, EventArgs e)
        {
            btnGiftVoucher_Click(null, null);
        }

        private void txtGiftVoucher_Leave(object sender, EventArgs e)
        {
            try
            {
                if (txtGiftVoucher.Text != "")
                    LoadGiftVoucher(txtGiftVoucher.Text);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void txtGiftVoucher_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                //btnEnter_Click(null, null);
                txtGiftVoucher_Leave(null, null);
            }
            if (e.KeyCode == Keys.F2)
            {
                btnGiftVoucher_Click(null, null);
            }
        }

        private void btnGVDepositBank_Click(object sender, EventArgs e)
        {
            try
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.BankAccount);
                DataTable _result = CHNLSVC.CommonSearch.GetBankAccounts(_CommonSearch.SearchParams, null, null);
                _CommonSearch.IsSearchEnter = true;
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtGVDepBank;
                _CommonSearch.ShowDialog();
                txtGVDepBank.Select();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void txtGVDepBank_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
            {
                btnGVDepositBank_Click(null, null);
            }
        }

        private void dataGridView2_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (e.RowIndex != -1 && e.ColumnIndex == 0)
                {
                    int book = Convert.ToInt32(gvMultipleItem.Rows[e.RowIndex].Cells[1].Value);
                    int page = Convert.ToInt32(gvMultipleItem.Rows[e.RowIndex].Cells[2].Value);
                    string code = gvMultipleItem.Rows[e.RowIndex].Cells[4].Value.ToString();
                    string prefix = gvMultipleItem.Rows[e.RowIndex].Cells[5].Value.ToString();


                    //GiftVoucherPages _gift = CHNLSVC.Inventory.GetGiftVoucherPage(null, "%", code, book, page, prefix);
                    //DataTable _allCom = CHNLSVC.Inventory.GetGVAlwCom(BaseCls.GlbUserComCode, code, 1);
                    GiftVoucherPages _gift = CHNLSVC.Inventory.GetGiftVoucherPage(BaseCls.GlbUserComCode, "%", code, book, page, prefix);

                    //if (_allCom != null)
                    //{
                    if (_gift != null)
                    {
                        //validation
                        //DateTime _date = CHNLSVC.Security.GetServerDateTime();
                        if (_gift.Gvp_stus != "A")
                        {
                            MessageBox.Show("Gift voucher is not Active", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            return;
                        }
                        if (_gift.Gvp_gv_tp != "VALUE")
                        {
                            MessageBox.Show("Gift voucher type is invalid", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            return;
                        }
                        if (!(_gift.Gvp_valid_from <= txtDate.Value.Date && _gift.Gvp_valid_to >= txtDate.Value.Date))
                        {
                            MessageBox.Show("This gift voucher has been expired\nFrom Date - " + _gift.Gvp_valid_from.ToString("dd/MMM/yyyy") + "\nTo Date - " + _gift.Gvp_valid_to.ToString("dd/MMM/yyyy"), "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            return;
                        }
                        txtGiftVoucher.Text = _gift.Gvp_page.ToString();

                        lblCusCode.Text = _gift.Gvp_cus_cd;
                        lblCusName.Text = lblCusName.Text;
                        lblAdd1.Text = _gift.Gvp_cus_add1;

                        lblBook.Text = _gift.Gvp_book.ToString();
                        lblPrefix.Text = _gift.Gvp_gv_cd;
                        lblCd.Text = _gift.Gvp_gv_prefix;
                        textBoxAmount.Text = _gift.Gvp_bal_amt.ToString();
                    }
                    else
                    {
                        MessageBox.Show("Invalid gift voucher.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }
                    //}
                    //else
                    //{
                    //    MessageBox.Show("Gift voucher not allow to redeem this company", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    //    return;
                    //}
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void textBoxChequeNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                textBoxChqBank.Focus();
            }
            if (e.KeyCode == Keys.F3)
            {
                if (!string.IsNullOrEmpty(bank))
                {
                    textBoxChqBank.Text = bank;
                    textBoxChqBranch.Text = branch;
                    textBoxChqDepBank.Text = depBank;
                    textBoxChqDepBranch.Text = depBranch;
                    textBoxChequeNo.Text = chqNo;
                    dateTimePickerExpire.Value = chqExpire;
                }

            }
        }

        private void textBoxChqBank_Leave(object sender, EventArgs e)
        {
            try
            {
                if (!CheckBank(textBoxChqBank.Text, lblChqBank))
                    textBoxChqBank.Text = "";
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void textBoxChqBank_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                textBoxChqBranch.Focus();
            }
            if (e.KeyCode == Keys.F2)
            {
                buttonChqBankSearch_Click(null, null);
            }
        }

        private void buttonChqBankSearch_Click(object sender, EventArgs e)
        {
            try
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.Bank);
                DataTable _result = CHNLSVC.CommonSearch.GetBusinessCompany(_CommonSearch.SearchParams, null, null);
                _CommonSearch.IsSearchEnter = true;
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = textBoxChqBank;
                _CommonSearch.IsSearchEnter = true;
                _CommonSearch.ShowDialog();
                textBoxChqBank.Select();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void textBoxChqBranch_Leave(object sender, EventArgs e)
        {
            try
            {
                if (!CheckBankBranch(textBoxChqBank.Text, textBoxChqBranch.Text))
                    textBoxChqBranch.Text = "";
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void textBoxChqBranch_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                dateTimePickerExpire.Focus();
                SendKeys.Send("%{DOWN}");
            }
            if (e.KeyCode == Keys.F2)
            {
                buttonChqBranchSearch_Click(null, null);
            }
        }

        private void textBoxChqDepBank_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                button1.Focus();
            }
            if (e.KeyCode == Keys.F2)
            {
                buttonChqDepBankSearch_Click(null, null);
            }
        }

        private void buttonChqDepBankSearch_Click(object sender, EventArgs e)
        {
            try
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
                _CommonSearch.ReturnIndex = 3;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.DepositBank);
                DataTable _result = CHNLSVC.CommonSearch.searchDepositBankCode(_CommonSearch.SearchParams, null, null);
                _CommonSearch.IsSearchEnter = true;
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = textBoxChqDepBank;
                _CommonSearch.ShowDialog();
                textBoxChqDepBank.Select();


            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void textBoxChqDepBranch_Leave(object sender, EventArgs e)
        {
            //{
            //    try
            //    {
            //        if (!CheckBankBranch(textBoxChqDepBank.Text, textBoxChqDepBranch.Text))
            //        { textBoxChqDepBranch.Text = ""; }
            //    }
            //    catch (Exception ex)
            //    {
            //        MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            //    }
            //    finally
            //    {
            //        CHNLSVC.CloseAllChannels();
            //    }
            //}

        }

        private void textBoxChqDepBranch_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                btnEnter_Click(null, null);
            }

        }

        private void txtLoyaltyCardNo_Leave(object sender, EventArgs e)
        {
            try
            {
                if (txtLoyaltyCardNo.Text != "")
                {
                    List<LoyaltyMemeber> _loyalty = null;
                    List<LoyaltyMemeber> _temloyalty = CHNLSVC.Sales.GetCustomerLoyality(txtCustomer.Text, txtLoyaltyCardNo.Text, txtDate.Value.Date);
                    if (_temloyalty == null || _temloyalty.Count <= 0)
                    {
                        MessageBox.Show("Invalid loyalty card number. Please check card number and re-enter", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtLoyaltyCardNo.Text = "";
                        return;
                    }
                    if (LoyaltyTYpeList == null || LoyaltyTYpeList.Count <= 0)
                    {
                        _loyalty = _temloyalty;
                    }
                    else
                    {
                        foreach (string st in LoyaltyTYpeList)
                        {
                            _loyalty = (from _res in _temloyalty
                                        where _res.Salcm_loty_tp == st
                                        select _res).ToList<LoyaltyMemeber>();

                            if (_loyalty != null && _loyalty.Count > 0)
                                break;
                        }
                    }
                    if (_loyalty != null && _loyalty.Count > 0)
                    {
                        MasterBusinessEntity _entity = CHNLSVC.Sales.GetBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, null, null, "C");
                        if (_entity.Mbe_cd != null)
                            lblLoyaltyCustomer.Text = _entity.Mbe_name;
                        lblLoyaltyBalance.Text = _loyalty[0].Salcm_bal_pt.ToString();
                        lblLoyaltyType.Text = _loyalty[0].Salcm_loty_tp;


                        List<MasterSalesPriorityHierarchy> _hierarchy = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "PC_PRIT_HIERARCHY", "PC");
                        if (_hierarchy == null || _hierarchy.Count <= 0)
                        {
                            return;
                        }
                        LoyaltyPointRedeemDefinition _definition = null;
                        foreach (MasterSalesPriorityHierarchy _zero in _hierarchy)
                        {

                            _definition = CHNLSVC.Sales.GetLoyaltyRedeemDefinition(_zero.Mpi_cd, _zero.Mpi_val, txtDate.Value.Date, lblLoyaltyType.Text);
                            if (_definition != null)
                                break;

                        }
                        if (_definition != null)
                        {
                            lblPointValue.Text = _definition.Salre_pt_value.ToString();
                        }


                    }
                    else
                    {
                        MessageBox.Show("Invalid Loyalty Type or Loyalty Card number", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtLoyaltyCardNo.Text = "";
                        return;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void txtLoyaltyCardNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                txtLoyaltyDepBank.Focus();
            if (e.KeyCode == Keys.F2)
            {
                btnLoyalty_Click(null, null);
            }
        }

        private void btnLoyalty_Click(object sender, EventArgs e)
        {
            try
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.SearchLoyaltyCard);
                DataTable _result = CHNLSVC.CommonSearch.SearchLoyaltyCard(_CommonSearch.SearchParams, null, null);
                _CommonSearch.IsSearchEnter = true;
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtLoyaltyCardNo;
                _CommonSearch.ShowDialog();
                txtLoyaltyCardNo.Select();
                if (txtLoyaltyCardNo.Text != "")
                    txtLoyaltyCardNo_Leave(null, null);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void txtLoyaltyDepBank_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                txtLoyaltyDepBranch.Focus();
            if (e.KeyCode == Keys.F2)
                btnLoyaltyDepBank_Click(null, null);
        }

        private void textBoxDbCardNo_KeyDown(object sender, KeyEventArgs e)
        {

            if (e.KeyCode == Keys.Enter)
            {
                textBoxDbBank.Focus();
            }
        }

        private void textBoxDbBank_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                btnEnter_Click(null, null);
            }
            else if (e.KeyCode == Keys.F2)
            {
                button12_Click(null, null);
            }
        }

        private void button12_Click(object sender, EventArgs e)
        {
            try
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.Bank);
                DataTable _result = CHNLSVC.CommonSearch.GetBusinessCompany(_CommonSearch.SearchParams, null, null);
                _CommonSearch.IsSearchEnter = true;
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = textBoxDbBank;
                _CommonSearch.ShowDialog();
                textBoxDbBank.Select();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void textBoxDBDepositBank_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
            {
                buttonSearchDBDep_Click(null, null);
            }
        }

        private bool CheckBankAcc(string code)
        {
            MasterBankAccount account = CHNLSVC.Sales.GetBankDetails(BaseCls.GlbUserComCode, null, code);
            if (account == null || account.Msba_com == null || account.Msba_com == "")
            {
                return false;
            }
            else
                return true;
        }

        private void textBoxDBDepositBank_Leave(object sender, EventArgs e)
        {
            try
            {
                if (textBoxDBDepositBank.Text != "")
                {
                    if (!CheckBankAcc(textBoxDBDepositBank.Text))
                    {
                        MessageBox.Show("Invalid Deposit bank account No", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        textBoxDBDepositBank.Text = "";
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void buttonSearchDBDep_Click(object sender, EventArgs e)
        {
            try
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.BankAccount);
                DataTable _result = CHNLSVC.CommonSearch.GetBankAccounts(_CommonSearch.SearchParams, null, null);
                _CommonSearch.IsSearchEnter = true;
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = textBoxDBDepositBank;
                _CommonSearch.ShowDialog();
                textBoxDBDepositBank.Select();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void textBoxCCCardNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                textBoxCCBank.Focus();
            }
        }

        private void textBoxCCBank_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyCode == Keys.Enter)
                {
                    LoadCardType(textBoxCCBank.Text);
                    //PROMOTION
                    LoadPromotions();
                    textBoxBatch.Focus();
                }
                if (e.KeyCode == Keys.F2)
                {
                    buttonCCBankSearch_Click(null, null);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void textBoxCCBank_TextChanged(object sender, EventArgs e)
        {
            LoadMIDno();
        }

        private void LoadMIDno()
        {
            int mode = 0;
            lblmidcode.ForeColor = Color.Black;
            string branch_code = "";
            string pc = BaseCls.GlbUserDefProf;
            //string MIDcode = "";
            int period = 0;
            if (rdooffline.Checked == true) mode = 0;
            if (rdoonline.Checked == true) mode = 1;
            if (textBoxCCBank.Text.Length > 0) branch_code = textBoxCCBank.Text;
            if (txtPromo.Text.Length > 0) period = Convert.ToInt32(txtPromo.Text);
            DataTable MID = CHNLSVC.Sales.get_bank_mid_code(branch_code, pc, mode, period, Convert.ToDateTime(Convert.ToDateTime(txtDate.Text)).Date, BaseCls.GlbUserComCode);
            if (MID.Rows.Count > 0)
            {
                DataRow dr;

                dr = MID.Rows[0];
                lblmidcode.Text = dr["MPM_MID_NO"].ToString();
                label55.Visible = true;
            }
            else
            {
                label55.Visible = false;
                lblmidcode.Text = "";
                lblmidcode.Text = "No MID code";
                lblmidcode.ForeColor = Color.Red;
            }
        }

        private void buttonChqBranchSearch_Click(object sender, EventArgs e)
        {
            try
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.BankBranch);
                DataTable _result = CHNLSVC.CommonSearch.SearchBankBranchData(_CommonSearch.SearchParams, null, null);
                _CommonSearch.IsSearchEnter = true;
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = textBoxChqBranch;
                _CommonSearch.ShowDialog();
                textBoxChqBranch.Select();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void btnReprint_Click(object sender, EventArgs e)
        {
            try
            {
                if (BaseCls.GlbUserID == "ADMIN")
                {
                    clsSalesRep obj = new clsSalesRep();
                    BaseCls.GlbReportDoc = "RJAE-CS-02261";
                    obj.HugPOSInvoiceDirectPrint();

                    return;
                }
                if (string.IsNullOrEmpty(txtInvoiceNo.Text))
                {
                    MessageBox.Show("Please select the Bill number", "Information", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return;
                }

                clsSalesRep obj1 = new clsSalesRep();
                BaseCls.GlbReportDoc = txtInvoiceNo.Text;
                BaseCls.GlbReportIsCostPrmission = 1;

                DataTable _dt = CHNLSVC.Sales.GetSalesHdr(txtInvoiceNo.Text);
                if (_dt.Rows.Count > 0)
                    if (Convert.ToInt32(_dt.Rows[0]["sah_direct"]) == 1)
                        if (BaseCls.GlbDefSubChannel == "HUG")  //kapila 11/3/2017
                            obj1.HugPOSInvoiceDirectPrint();
                        else
                            obj1.POSInvoiceDirectPrint();
                    else
                        obj1.POSCredNoteDirectPrint();

                ////Reports.Sales.ReportViewer _view = new Reports.Sales.ReportViewer();
                ////clsSalesRep objSale = new clsSalesRep();

                ////BaseCls.GlbReportDoc = txtInvoiceNo.Text;
                ////string _repname = string.Empty;
                ////string _papersize = string.Empty;
                ////BaseCls.GlbReportName = "InvoicePOSPrint.rpt";
                ////BaseCls.GlbReportTp = "POS";

                ////objSale.InvociePOSPrint();
                ////Reports.Sales.ReportViewer _viewsale = new Reports.Sales.ReportViewer();
                ////objSale._invPosPrint.PrintOptions.PrinterName = _viewsale.GetDefaultPrinter();
                //////MessageBox.Show("Please check whether printer load the Job documents and press ok!\n", "Load Documents.", MessageBoxButtons.OK, MessageBoxIcon.Information);
                ////objSale._invPosPrint.PrintToPrinter(1, false, 0, 0);
                //////ReportViewer _view = new ReportViewer();
                //////BaseCls.GlbReportTp = "POS";
                //////_view.GlbReportName = "InvoicePOSPrint.rpt";
                //////_view.GlbReportDoc = txtInvoiceNo.Text;
                //////BaseCls.GlbReportName = "InvoicePOSPrint.rpt";
                //////_view.Show();
                //////_view = null;
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnHold_Click(object sender, EventArgs e)
        {
            if (CheckServerDateTime() == false) return;
            if (MessageBox.Show("Do you want to hold?", "Holding...", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No) return;
            Hold();
        }

        private void Hold()
        {
            if (IsBackDateOk(false, false) == false) return;
            //if (chkDeliverLater.Checked == false)
            //{ this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Deliver Now is not allow for holding an invoice", "Hold Invoice", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
            //if (string.IsNullOrEmpty(cmbInvType.Text))
            //{ this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the invoice type", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); } cmbInvType.Focus(); return; }
            if (string.IsNullOrEmpty(txtCustomer.Text))
            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the customer", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtCustomer.Focus(); return; }
            if (string.IsNullOrEmpty(txtCusName.Text))
            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please enter the customer name", "Customer Name", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
            ////if (string.IsNullOrEmpty(txtAddress1.Text) && string.IsNullOrEmpty(txtAddress2.Text))
            ////{ this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please enter the customer address", "Customer Address", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
            if (_invoiceItemList.Count <= 0)
            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the items for invoice", "Invoice Item", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
            bool _isExeMust = false;
            if (MasterChannel != null && MasterChannel.Rows.Count > 0)
                _isExeMust = Convert.ToBoolean(MasterChannel.Rows[0].Field<Int16>("msc_needsalexe"));
            if (string.IsNullOrEmpty(txtExecutive.Text))
            {
                if (_isExeMust)
                { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the executive code", "Executive", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtExecutive.Focus(); return; }
                else txtExecutive.Text = "N/A";
            }
            if (!string.IsNullOrEmpty(txtExecutive.Text) && _isExeMust)
            {
                if (txtExecutive.Text.Trim().ToUpper() == "N/A" || txtExecutive.Text.Trim().ToUpper() == "NA")
                { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Sales executive is mandatory to this channel", "Sales Executive", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtExecutive.Clear(); txtExecutive.Focus(); }
            }
            if (string.IsNullOrEmpty(lblCurrency.Text))
            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the currency code", "Currency", MessageBoxButtons.OK, MessageBoxIcon.Information); } lblCurrency.Focus(); return; }
            if (_recieptItem.Count > 0)
            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please remove the payment details.", "Payments", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
            Int32 _count = 1;
            _invoiceItemList.OrderBy(x => x.Sad_itm_line);
            InvoiceSerialList.OrderBy(x => x.Sap_itm_line);

            //System.IO.StreamWriter _file1 = new System.IO.StreamWriter(@"C:\text1.txt", true);
            //foreach (InvoiceItem _ser in _invoiceItemList)
            //{
            //    _file1.WriteLine(_ser.Sad_itm_line + "/t" + _ser.Sad_itm_cd);
            //}
            //_file1.Close(); 

            //System.IO.StreamWriter _file2 = new System.IO.StreamWriter(@"C:\text2.txt", true);
            //foreach (InvoiceSerial _ser in InvoiceSerialList)
            //{
            //    _file2.WriteLine(_ser.Sap_itm_line + "/t" + _ser.Sap_itm_cd);
            //}
            //_file2.Close(); 


            //_recieptItem.ForEach(x => x.Sard_line_no = _count++);
            //_count = 1;
            //_invoiceItemList.ForEach(x => x.Sad_itm_line = _count++);

            foreach (InvoiceItem _oneItm in _invoiceItemList)
            {
                Int32 _currentLine = _oneItm.Sad_itm_line;

                if (InvoiceSerialList != null)
                    if (InvoiceSerialList.Count > 0)
                        InvoiceSerialList.Where(x => x.Sap_itm_line == _currentLine).ToList().ForEach(x => x.Sap_itm_line = _count);

                _recieptItem.Where(x => x.Sard_line_no == _currentLine).ToList().ForEach(x => x.Sard_line_no = _count);
                _oneItm.Sad_itm_line = _currentLine;
                _count++;
            }

            InvoiceHeader _invheader = new InvoiceHeader();
            RecieptHeader _recHeader = new RecieptHeader();
            MasterBusinessEntity _entity = new MasterBusinessEntity();
            bool _isCustomerHasCompany = false;
            string _customerCompany = string.Empty;
            string _customerLocation = string.Empty;
            _entity = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, string.Empty, string.Empty, "C");
            if (_entity != null)
                if (_entity.Mbe_cd != null)
                    if (!string.IsNullOrEmpty(_entity.Mbe_cust_com) && !string.IsNullOrEmpty(_entity.Mbe_cust_loc))
                    { _isCustomerHasCompany = true; _customerCompany = _entity.Mbe_cust_com; _customerLocation = _entity.Mbe_cust_loc; }
            InvoiceHeader _hdr;
            _hdr = CHNLSVC.Sales.GetInvoiceHeaderDetails(txtInvoiceNo.Text.Trim());
            if (_hdr == null) _hdr = new InvoiceHeader();
            if (_hdr.Sah_pc != null)
            {
                if (_hdr.Sah_dt.Date != Convert.ToDateTime(txtDate.Text.Trim()).Date)
                { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Hold invoice can only re-hold with in the date" + _hdr.Sah_dt.Date.ToShortDateString(), "Holding...", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                if (_hdr.Sah_stus != "H")
                { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You can not hold the invoice which already " + _hdr.Sah_stus == "C" ? "canceled." : _hdr.Sah_stus == "A" ? "approved." : _hdr.Sah_stus == "D" ? "delivered." : ".", "Hold Invoice", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
            }
            _invheader.Sah_com = BaseCls.GlbUserComCode;
            _invheader.Sah_cre_by = BaseCls.GlbUserID;
            _invheader.Sah_cre_when = DateTime.Now;
            _invheader.Sah_currency = "LKR";
            ////_invheader.Sah_cus_add1 = txtAddress1.Text.Trim();
            ////_invheader.Sah_cus_add2 = txtAddress2.Text.Trim();
            _invheader.Sah_cus_cd = txtCustomer.Text.Trim();
            _invheader.Sah_cus_name = txtCusName.Text.Trim();
            ////_invheader.Sah_d_cust_add1 = string.IsNullOrEmpty(txtDelAddress1.Text.Trim()) ? txtAddress1.Text.Trim() : txtDelAddress1.Text.Trim();
            ////_invheader.Sah_d_cust_add2 = string.IsNullOrEmpty(txtDelAddress2.Text.Trim()) ? txtAddress2.Text.Trim() : txtDelAddress2.Text.Trim();
            _invheader.Sah_d_cust_cd = txtDelCustomer.Text.Trim();
            _invheader.Sah_d_cust_name = string.IsNullOrEmpty(txtDelName.Text.Trim()) ? txtCusName.Text.Trim() : txtDelName.Text.Trim();
            _invheader.Sah_direct = true;
            _invheader.Sah_dt = Convert.ToDateTime(txtDate.Text);
            _invheader.Sah_epf_rt = 0;
            _invheader.Sah_esd_rt = 0;
            _invheader.Sah_ex_rt = 1;
            _invheader.Sah_inv_no = _hdr.Sah_pc != null ? Convert.ToString(_hdr.Sah_seq_no) : Convert.ToString(CHNLSVC.Inventory.GetSerialID());
            _invheader.Sah_inv_sub_tp = "SA";
            _invheader.Sah_inv_tp = "CS";
            _invheader.Sah_is_acc_upload = false;
            _invheader.Sah_man_cd = "";
            _invheader.Sah_man_ref = "";
            _invheader.Sah_manual = false;
            _invheader.Sah_mod_by = BaseCls.GlbUserID;
            _invheader.Sah_mod_when = DateTime.Now;
            _invheader.Sah_pc = BaseCls.GlbUserDefProf;
            _invheader.Sah_pdi_req = 0;
            _invheader.Sah_ref_doc = "";  // txtManualRefNo.Text;
            _invheader.Sah_remarks = "";
            _invheader.Sah_sales_chn_cd = "";
            _invheader.Sah_sales_chn_man = "";
            _invheader.Sah_sales_ex_cd = txtExecutive.Text.Trim();
            _invheader.Sah_sales_region_cd = "";
            _invheader.Sah_sales_region_man = "";
            _invheader.Sah_sales_sbu_cd = "";
            _invheader.Sah_sales_sbu_man = "";
            _invheader.Sah_sales_str_cd = "";
            _invheader.Sah_sales_zone_cd = "";
            _invheader.Sah_sales_zone_man = "";
            _invheader.Sah_seq_no = Convert.ToInt32(_invheader.Sah_inv_no);
            _invheader.Sah_session_id = BaseCls.GlbUserSessionID;
            _invheader.Sah_structure_seq = ""; // txtQuotation.Text.Trim();
            _invheader.Sah_stus = "H";
            _invheader.Sah_town_cd = "";
            _invheader.Sah_tp = "INV";
            _invheader.Sah_wht_rt = 0;
            _invheader.Sah_direct = true;
            //_invheader.Sah_anal_1 = BaseCls.GlbUserDefLoca;
            _invheader.Sah_tax_inv = chkTaxPayable.Checked ? true : false;
            _invheader.Sah_anal_11 = chkDeliverLater.Checked ? 0 : 1;
            _invheader.Sah_del_loc = chkDeliverLater.Checked == false ? BaseCls.GlbUserDefLoca : !string.IsNullOrEmpty(txtDelLocation.Text) ? txtDelLocation.Text : string.Empty;
            _invheader.Sah_grn_com = _customerCompany;
            _invheader.Sah_grn_loc = _customerLocation;
            _invheader.Sah_is_grn = _isCustomerHasCompany;
            _invheader.Sah_grup_cd = string.IsNullOrEmpty(txtGroup.Text.Trim()) ? string.Empty : txtGroup.Text.Trim();
            _invheader.Sah_is_svat = lblSVatStatus.Text == "Available" ? true : false;
            _invheader.Sah_tax_exempted = lblVatExemptStatus.Text == "Available" ? true : false;
            _invheader.Sah_anal_4 = ""; // txtPoNo.Text.Trim();
            _invheader.Sah_anal_6 = ""; // txtLoyalty.Text.Trim();
            _invheader.Sah_man_cd = _MasterProfitCenter.Mpc_man;
            _invheader.Sah_is_dayend = 0;
            _invheader.Sah_remarks = txtRemarks.Text.Trim();

            _invheader.Sah_anal_1 = Promoter;
           // _invheader.Sah_anal_1 = ""; // txtPromotor.Text;

            //if (string.IsNullOrEmpty(Convert.ToString(cmbTechnician.SelectedValue))) _invheader.Sah_anal_1 = string.Empty;
            //else _invheader.Sah_anal_1 = Convert.ToString(cmbTechnician.SelectedValue);
            _invheader.Sah_grup_cd = string.IsNullOrEmpty(txtGroup.Text.Trim()) ? string.Empty : txtGroup.Text.Trim();
            MasterAutoNumber _invoiceAuto = new MasterAutoNumber();
            MasterAutoNumber _receiptAuto = new MasterAutoNumber();
            CollectBusinessEntity();
            string _invoiceNo = "";
            string _receiptNo = "";
            string _deliveryOrderNo = "";
            InventoryHeader _hdrs = new InventoryHeader();
            _hdrs.Ith_loc = BaseCls.GlbUserDefLoca;
            _hdrs.Ith_com = BaseCls.GlbUserComCode;
            //foreach (InvoiceItem _item in _invoiceItemList)
            //{
            //    Int32 _currentLine = _item.Sad_itm_line;

            //    if (InvoiceSerialList != null)
            //        if (InvoiceSerialList.Count > 0)
            //            InvoiceSerialList.Where(x => x.Sap_itm_line == _currentLine).ToList().ForEach(x => x.Sap_itm_line = _count);
            //}
            try
            {
                btnSave.Enabled = false;
                string _error = string.Empty;
                string _buybackno = string.Empty;
                int effect = CHNLSVC.Sales.SaveInvoiceDuplicateWithTransaction01(_invheader, _invoiceItemList, InvoiceSerialList, _recHeader, _recieptItem, _hdrs, null, null, _invoiceAuto, _receiptAuto, null, false, out _invoiceNo, out _receiptNo, out _deliveryOrderNo, _businessEntity, true, false, out _error, null, null, null, null, out _buybackno, ref IsInvoiceCompleted);
                if (string.IsNullOrEmpty(_error))
                {
                    btnHold.Enabled = true;
                    btnSave.Enabled = true;
                    string Msg = "Successfully Hold! Token No : " + _invoiceNo + ".";
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show(Msg, "Hold", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    Clear();
                }
                else
                {
                    this.Cursor = Cursors.Default;
                    CHNLSVC.CloseChannel();
                    using (new CenterWinDialog(this)) { MessageBox.Show(_error, "Sever Not Responding", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
            }
            catch (Exception ex)
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show(ex.Message); }
                CHNLSVC.CloseChannel();
                return;
            }
            finally
            {
                btnHold.Enabled = true;
                btnSave.Enabled = true;
                CHNLSVC.CloseAllChannels();
            }
        }

        private void btn_srch_Inv_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                CommonSearch.CommonSearchDate _CommonSearch = new CommonSearch.CommonSearchDate();
                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.InvoiceWithDate);
                DataTable _result = CHNLSVC.CommonSearch.SearchInvoice(_CommonSearch.SearchParams, null, null, txtDate.Value.Date.AddMonths(-1), txtDate.Value.Date);
                _result.DefaultView.Sort = "Invoice No desc";
                _CommonSearch.dtpFrom.Value = txtDate.Value.Date;
                _CommonSearch.dtpTo.Value = txtDate.Value.Date;
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtInvoiceNo;
                //_commonSearch.IsSearchEnter = true;
                this.Cursor = Cursors.Default;
                _CommonSearch.IsSearchEnter = true;
                _CommonSearch.ShowDialog();
                txtInvoiceNo.Select();

                txtInvoiceNo_Leave(null, null);
            }
            catch (Exception ex)
            { txtInvoiceNo.Text = ""; this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            //SerialPort sp = new SerialPort();

            //sp.PortName = "COM1";
            //sp.BaudRate = 9600;
            //sp.Parity = Parity.None;
            //sp.DataBits = 8;
            //sp.StopBits = StopBits.One;
            //sp.Open();
            //sp.WriteLine("                                        ");
            //sp.WriteLine("Hi welocme here");

            //sp.Close();
            //sp.Dispose();
            //sp = null;
            ProcessInvoice();
        }

        private void txtDisRate_Leave(object sender, EventArgs e)
        {
            if (IsNumeric(txtDisRate.Text.ToString()) == false)
            {
                MessageBox.Show("Invalid Discount Rate !", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            CheckDiscountRate();
        }

        protected void CheckDiscountRate()
        {
            if (chkPickGV.Checked) return;
            if (_IsVirtualItem)
            {
                txtDisRate.Clear();
                txtDisAmt.Clear();
                txtDisAmt.Text = FormatToCurrency("0");
                txtDisRate.Text = FormatToCurrency("0");
                return;
            }
            try
            {
                if (Convert.ToDecimal(txtDisRate.Text.Trim()) < 0)
                {
                    //MessageBox.Show("Discount rate should be positive value.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    //txtDisRate.Clear();
                    //txtDisRate.Text = FormatToQty("0");
                    //return;
                }

                this.Cursor = Cursors.WaitCursor;
                if (string.IsNullOrEmpty(lblPromoVouNo.Text))
                {
                    if (_isCompleteCode && _MasterProfitCenter.Mpc_edit_price && Convert.ToDecimal(txtDisRate.Text.Trim()) > 0)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("You are not allow discount for com codes!", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtDisRate.Clear();
                        txtDisRate.Text = FormatToQty("0");
                        return;
                    }
                }
                else
                {
                    if (Convert.ToDecimal(txtQty.Text) != 1)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Promotion voucher allow for only one(1) item!", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtDisRate.Clear();
                        txtDisRate.Text = FormatToQty("0");
                        return;
                    }
                }
                CheckNewDiscountRate();
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        protected void CheckDiscountAmount(object sender, EventArgs e)
        {
            if (chkPickGV.Checked) return;
            if (_IsVirtualItem)
            {
                txtDisRate.Clear();
                txtDisAmt.Clear();
                txtDisAmt.Text = FormatToCurrency("0");
                txtDisRate.Text = FormatToCurrency("0");
                return;
            }
            try
            {
                if (string.IsNullOrEmpty(txtDisAmt.Text)) return;
                this.Cursor = Cursors.WaitCursor;
                if (Convert.ToDecimal(txtDisAmt.Text) < 0)
                {
                    //MessageBox.Show("Discount amount should be positive value.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    //txtDisAmt.Clear();
                    //txtDisAmt.Text = FormatToQty("0");
                    //return;
                }
                CheckNewDiscountAmount();
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private bool CheckNewDiscountAmount()
        {
            if (string.IsNullOrEmpty(txtItem.Text)) return false;
            if (IsNumeric(txtQty.Text) == false)
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid qty", "Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                return false;
            }
            if (Convert.ToDecimal(txtQty.Text.Trim()) == 0) return false;
            if (!string.IsNullOrEmpty(txtDisAmt.Text) && _isEditPrice == false && !string.IsNullOrEmpty(txtQty.Text))
            {
                decimal _disAmt = Convert.ToDecimal(txtDisAmt.Text);
                decimal _uRate = Convert.ToDecimal(txtUnitPrice.Text);
                decimal _qty = Convert.ToDecimal(txtQty.Text);
                decimal _totAmt = _uRate * _qty;
                decimal _percent = _totAmt != 0 ? (_disAmt / _totAmt) * 100 : 0;

                if (_disAmt > 0)
                {
                    if (GeneralDiscount != null)
                    {
                        decimal vals = GeneralDiscount.Sgdd_disc_val;
                        decimal rates = GeneralDiscount.Sgdd_disc_rt;

                        //updated by akila 2018/01/30  - check voucher discount
                        if (!string.IsNullOrEmpty(lblPromoVouNo.Text))
                        {
                            if (_promoVoucherTp == "VALUE")
                            {
                                if (Math.Round(_disAmt) > Math.Round(_promoVoucherDiscBalance))
                                {
                                    this.Cursor = Cursors.Default;
                                    MessageBox.Show("Voucher discount amount exceed the allowed discount amount ", "Discount Amount", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); 
                                    txtDisAmt.Text = FormatToCurrency("0");
                                    txtDisRate.Text = FormatToCurrency("0");
                                    _isEditDiscount = false;
                                    return false;
                                }
                            }
                        }

                        if (vals < _disAmt && rates == 0)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("You can not discount price more than " + vals + ".", "Discount Amount", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            txtDisAmt.Text = FormatToCurrency("0");
                            txtDisRate.Text = FormatToCurrency("0");
                            _isEditDiscount = false;
                            return false;
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(txtDisRate.Text) && Convert.ToDecimal(txtDisRate.Text) == 0) txtDisRate.Text = "0";
                            CalculateItem();
                            if (!string.IsNullOrEmpty(txtDisRate.Text) && Convert.ToDecimal(txtDisRate.Text) == 0) _percent = _totAmt != 0 ? (_disAmt / Convert.ToDecimal(txtLineTotAmt.Text)) * 100 : 0;
                            if (!string.IsNullOrEmpty(txtDisRate.Text) && Convert.ToDecimal(txtDisRate.Text) == 0) txtDisRate.Text = FormatToCurrency(Convert.ToString(_percent));
                            CalculateItem();
                            CheckNewDiscountRate();
                            _isEditDiscount = true;
                        }
                    }
                    else
                    {
                        if (GeneralDiscount == null) GeneralDiscount = new CashGeneralEntiryDiscountDef();
                        bool _IsPromoVou = false;
                        if (string.IsNullOrEmpty(lblPromoVouNo.Text))
                        {
                            GeneralDiscount = CHNLSVC.Sales.GetGeneralDiscountDefinition(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, Convert.ToDateTime(txtDate.Text.Trim()).Date, cmbBook.Text.Trim(), cmbLevel.Text.Trim(), txtCustomer.Text.Trim(), txtItem.Text.Trim(), _priceBookLevelRef.Sapl_is_serialized ? true : false, false);
                        }
                        else
                        {
                            GeneralDiscount = CHNLSVC.Sales.GetPromoVoucherNoDefinition(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtCustomer.Text.Trim(), Convert.ToDateTime(txtDate.Text.Trim()).Date, cmbBook.Text.Trim(), cmbLevel.Text.Trim(), txtItem.Text.Trim(), lblPromoVouNo.Text.Trim(), _promoVoucherCode);
                            if (GeneralDiscount != null)
                            {
                                _IsPromoVou = true;
                                GeneralDiscount.Sgdd_seq = Convert.ToInt32(lblPromoVouNo.Text);
                            }
                        }

                        if (GeneralDiscount != null)
                        {
                            decimal vals = GeneralDiscount.Sgdd_disc_val;
                            decimal rates = GeneralDiscount.Sgdd_disc_rt;

                            if (_IsPromoVou == true)
                            {
                                if (_promoVoucherTp == "VALUE")
                                {
                                    if (Math.Round(_disAmt) > Math.Round(_promoVoucherDiscBalance))
                                    {
                                        this.Cursor = Cursors.Default;
                                        MessageBox.Show("Voucher discount amount exceed the allowed discount amount ", "Discount Amount", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                        txtDisAmt.Text = FormatToCurrency("0");
                                        txtDisRate.Text = FormatToCurrency("0");
                                        _isEditDiscount = false;
                                        return false;
                                    }
                                }

                                if (vals < _disAmt && rates == 0)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("Voucher discount amount should be " + vals + "!./nNot allowed discount amount " + _disAmt + " discounted price is " + txtLineTotAmt.Text, "Discount Amount", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                    txtDisAmt.Text = FormatToCurrency("0");
                                    txtDisRate.Text = FormatToCurrency("0");
                                    _isEditDiscount = false;
                                    return false;
                                }
                            }

                            if (vals < _disAmt && rates == 0)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("You can not discount price more than " + vals + ".", "Discount Amount", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                txtDisAmt.Text = FormatToCurrency("0");
                                txtDisRate.Text = FormatToCurrency("0");
                                _isEditDiscount = false;
                                return false;
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(txtDisRate.Text) && Convert.ToDecimal(txtDisRate.Text) == 0) txtDisRate.Text = "0";
                                CalculateItem();
                                if (!string.IsNullOrEmpty(txtDisRate.Text) && Convert.ToDecimal(txtDisRate.Text) == 0) _percent = _totAmt != 0 ? (_disAmt / _totAmt) * 100 : 0;
                                if (!string.IsNullOrEmpty(txtDisRate.Text) && Convert.ToDecimal(txtDisRate.Text) == 0) txtDisRate.Text = FormatToCurrency(Convert.ToString(_percent));
                                CalculateItem();
                                CheckNewDiscountRate();
                                _isEditDiscount = true;
                            }
                        }
                        else
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("You are not allow for discount", "Discount Amount", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            txtDisAmt.Text = FormatToCurrency("0");
                            txtDisRate.Text = FormatToCurrency("0");
                            _isEditDiscount = false;
                            return false;
                        }
                    }
                }
                else
                    _isEditDiscount = false;
            }
            else if (_isEditPrice)
            {
                txtDisAmt.Text = FormatToCurrency("0");
                txtDisRate.Text = FormatToCurrency("0");
            }

            if (string.IsNullOrEmpty(txtDisAmt.Text)) txtDisAmt.Text = FormatToCurrency("0");
            decimal val = Convert.ToDecimal(txtDisAmt.Text);
            txtDisAmt.Text = FormatToCurrency(Convert.ToString(val));
            CalculateItem();
            return true;
        }


        protected bool CheckNewDiscountRate()
        {
            if (string.IsNullOrEmpty(txtItem.Text)) return false;
            if (IsNumeric(txtQty.Text) == false)
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid qty", "Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                return false;
            }
            if (Convert.ToDecimal(txtQty.Text.Trim()) == 0) return false;

            if (!string.IsNullOrEmpty(txtDisRate.Text) && _isEditPrice == false)
            {
                decimal _disRate = Convert.ToDecimal(txtDisRate.Text);
                bool _IsPromoVou = false;
                if (_disRate > 0)
                {
                    if (GeneralDiscount == null) GeneralDiscount = new CashGeneralEntiryDiscountDef();
                    if (string.IsNullOrEmpty(lblPromoVouNo.Text))
                    {
                        GeneralDiscount = CHNLSVC.Sales.GetGeneralDiscountDefinition(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, Convert.ToDateTime(txtDate.Text.Trim()).Date, cmbBook.Text.Trim(), cmbLevel.Text.Trim(), txtCustomer.Text.Trim(), txtItem.Text.Trim(), _priceBookLevelRef.Sapl_is_serialized ? true : false, false);
                    }
                    else
                    {
                        GeneralDiscount = CHNLSVC.Sales.GetPromoVoucherNoDefinition(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtCustomer.Text.Trim(), Convert.ToDateTime(txtDate.Text.Trim()).Date, cmbBook.Text.Trim(), cmbLevel.Text.Trim(), txtItem.Text.Trim(), lblPromoVouNo.Text.Trim(), _promoVoucherCode);
                        if (GeneralDiscount != null)
                        {
                            _IsPromoVou = true;
                            GeneralDiscount.Sgdd_seq = Convert.ToInt32(lblPromoVouNo.Text);
                        }
                    }
                    if (GeneralDiscount != null)
                    {
                        decimal vals = GeneralDiscount.Sgdd_disc_val;
                        decimal rates = GeneralDiscount.Sgdd_disc_rt;

                        if (lblPromoVouUsedFlag.Text.Contains("U") == true)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Voucher already used!", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            txtDisRate.Text = FormatToCurrency("0");
                            _isEditDiscount = false;
                            return false;
                        }

                        if (_IsPromoVou == true)
                        {
                            if (rates == 0 && vals > 0)
                            {
                                CalculateItem();
                                if (Convert.ToDecimal(txtDisAmt.Text) > vals)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("Voucher discount amount should be " + vals + ".\nNot allowed discount rate " + _disRate + "%", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                    txtDisRate.Text = FormatToCurrency("0");
                                    CalculateItem();
                                    _isEditDiscount = false;
                                    return false;
                                }
                            }
                            else
                            {
                                if (rates != _disRate)
                                {
                                    CalculateItem();
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("Voucher discount rate should be " + rates + "% !.\nNot allowed discount rate " + _disRate + "% discounted price is " + txtLineTotAmt.Text, "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                    txtDisRate.Text = FormatToCurrency("0");
                                    CalculateItem();
                                    _isEditDiscount = false;
                                    return false;
                                }
                            }
                        }
                        else
                        {
                            if (rates < _disRate)
                            {
                                CalculateItem();
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Exceeds maximum discount allowed " + rates + "% !.\n" + _disRate + "% discounted price is " + txtLineTotAmt.Text, "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                txtDisRate.Text = FormatToCurrency("0");
                                CalculateItem();
                                _isEditDiscount = false;
                                return false;
                            }
                            else
                            {
                                _isEditDiscount = true;
                            }
                        }
                    }
                    else
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("You are not allow for apply discount", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtDisRate.Text = FormatToCurrency("0");
                        _isEditDiscount = false;
                        return false;
                    }

                    if (_isEditDiscount == true)
                    {
                        if (_IsPromoVou == true)
                        {
                            //lblPromoVouUsedFlag.Text = "U";
                            _proVouInvcItem = txtItem.Text.ToUpper().ToString();
                        }
                    }
                }
                else
                    _isEditDiscount = false;
            }
            else if (_isEditPrice)
            {
                txtDisRate.Text = FormatToCurrency("0");
            }
            if (string.IsNullOrEmpty(txtDisRate.Text)) txtDisRate.Text = FormatToCurrency("0");
            decimal val = Convert.ToDecimal(txtDisRate.Text);
            txtDisRate.Text = FormatToCurrency(Convert.ToString(val));
            CalculateItem();
            btnAddItem.Focus();
            return true;
        }


        private void RecallInvoice()
        {
            if (string.IsNullOrEmpty(txtInvoiceNo.Text)) return;
            InvoiceHeader _hdr = CHNLSVC.Sales.GetInvoiceHeaderDetails(txtInvoiceNo.Text);
            if (_hdr == null) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid invoice", "Invalid Invoice", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtInvoiceNo.Text = string.Empty; return; }
            //Add by Chamal 20-07-2014
            if (_hdr.Sah_pc != BaseCls.GlbUserDefProf.ToString()) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid invoice", "Invalid Profit Center", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtInvoiceNo.Text = string.Empty; return; }
            //Add by Chamal 25-08-2014
            if (_hdr.Sah_tp != "INV") { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid invoice", "Invalid Invoice Category", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtInvoiceNo.Text = string.Empty; return; }
            if (_hdr.Sah_inv_tp == "CS")
            {
                this.Cursor = Cursors.WaitCursor;
            }
            else if (_hdr.Sah_inv_tp == "CRED")
            {
                this.Cursor = Cursors.WaitCursor;
            }
            else
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this))
                { MessageBox.Show("Please select the valid invoice", "Invalid Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtInvoiceNo.Text = string.Empty; return;
            }

            this.Cursor = Cursors.Default;

            //kapila
            if (_hdr.Sah_stus == "C")
            {
                lblStatus.Text = "CANCELLED";
                lblStatus.ForeColor = Color.Red;
            }
            else
            {
                lblStatus.Text = "FINISHED";
                lblStatus.ForeColor = Color.Black;
            }

            AssignInvoiceHeaderDetail(_hdr);
            List<InvoiceItem> _list = CHNLSVC.Sales.GetInvoiceDetailByInvoice(txtInvoiceNo.Text.Trim());
            _invoiceItemList = _list;
            GrndSubTotal = 0;
            GrndDiscount = 0;
            GrndTax = 0;
            InvoiceSerialList = new List<InvoiceSerial>();
            ScanSerialList = new List<ReptPickSerials>();
            InvoiceSerialList = CHNLSVC.Sales.GetInvoiceSerial(txtInvoiceNo.Text.Trim());
            foreach (InvoiceItem itm in _list)
            {
                CalculateGrandTotal(itm.Sad_qty, itm.Sad_unit_rt, itm.Sad_disc_amt, itm.Sad_itm_tax_amt, true);
                _lineNo += 1; SSCombineLine += 1;

                //----- added by kapila 17/2/2016
                MasterItem _itm1 = null;
                _itm1 = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, itm.Sad_itm_cd);
                if (_itm1.Mi_is_ser1 == -1)
                {
                    ReptPickSerials _chk = new ReptPickSerials();
                    _chk.Tus_base_doc_no = Convert.ToString(-100);
                    _chk.Tus_base_itm_line = itm.Sad_itm_line;
                    _chk.Tus_usrseq_no = -100;
                    _chk.Tus_unit_price = Convert.ToDecimal(itm.Sad_unit_rt);
                    _chk.Tus_itm_cd = itm.Sad_itm_cd;
                    _chk.Tus_itm_stus = itm.Sad_itm_stus;
                    _chk.Tus_ser_id = 0;
                    _chk.Tus_qty = Convert.ToDecimal(itm.Sad_qty);
                    _chk.Tus_bin = BaseCls.GlbDefaultBin;
                    _chk.Tus_ser_1 = "N/A";
                    _chk.Tus_ser_2 = "N/A";
                    _chk.Tus_ser_3 = "N/A";
                    _chk.Tus_ser_4 = "N/A";
                    _chk.Tus_ser_id = 0;
                    _chk.Tus_serial_id = "0";
                    _chk.Tus_com = BaseCls.GlbUserComCode;
                    _chk.Tus_loc = BaseCls.GlbUserDefLoca;
                    _chk.ItemType = _itm1.Mi_itm_tp;
                    _chk.Tus_cre_by = BaseCls.GlbUserID;
                    _chk.Tus_cre_by = BaseCls.GlbUserID;
                    _chk.Tus_itm_desc = _itm1.Mi_shortdesc;
                    _chk.Tus_itm_model = _itm1.Mi_model;
                    _chk.Tus_unit_price = Convert.ToDecimal(itm.Sad_unit_rt);
                    if (_itm1.MI_IS_EXP_DT == 1)
                        _chk.Tus_exp_dt = Convert.ToDateTime(txtExpDate.Text).Date;          //kapila
                    else
                        _chk.Tus_exp_dt = Convert.ToDateTime("01-Jan-0001").Date;
                    if (itm.Sad_itm_stus == "CONS")
                    {
                        DataTable _Sup = new DataTable();
                        _Sup = CHNLSVC.Inventory.GetSuplierByItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());
                        if (_Sup.Rows.Count <= 0)
                        {
                            MessageBox.Show("Cannot find consignement supplier.", "Supplier mismatch", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                        else
                        {
                            string _supplier = "";
                            _supplier = _Sup.Rows[0]["mbii_cd"].ToString();
                            _chk.Tus_orig_supp = _supplier;

                            goto L22;

                        }
                    }

                L22:
                    ScanSerialList.Add(_chk);
                }
                //----

            }
            if (InvoiceSerialList == null)
                InvoiceSerialList = new List<InvoiceSerial>();
            gvInvoiceItem.DataSource = _list;

            //load invoice serials
            if (InvoiceSerialList != null && InvoiceSerialList.Count > 0)
            {
                foreach (InvoiceSerial invSer in InvoiceSerialList)
                {
                    //kapila  18/12/2015
                    MasterItem _itm = null;
                    _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, invSer.Sap_itm_cd);
                    if (_itm.Mi_is_ser1 == 1)
                    {
                        ReptPickSerials _rept = CHNLSVC.Inventory.GetAvailableSerIDInformation(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, invSer.Sap_itm_cd, invSer.Sap_ser_1, "N/A", "");
                        if (_rept != null)
                        {
                            List<InvoiceItem> _item = (from _res in _invoiceItemList
                                                       where _res.Sad_itm_cd == invSer.Sap_itm_cd &&
                                                       _res.Sad_itm_line == invSer.Sap_itm_line
                                                       select _res).ToList<InvoiceItem>();
                            if (_item == null || _item.Count <= 0)
                            {
                                MessageBox.Show("Error occurred while recalling invoice\nItem - " + invSer.Sap_itm_cd + " not found on item list", "Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }
                            _rept.Tus_base_doc_no = Convert.ToString(ScanSequanceNo);
                            _rept.Tus_base_itm_line = _item[0].Sad_itm_line;
                            _rept.Tus_usrseq_no = -100;
                            _rept.Tus_unit_price = _rept.Tus_unit_price;
                            MasterItem msitem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, invSer.Sap_itm_cd);
                            //get item status

                            _rept.Tus_new_status = _item[0].Mi_itm_stus;
                            _rept.ItemType = msitem.Mi_itm_tp;
                            ScanSerialList.Add(_rept);
                        }
                    }
                }
            }
            gvPopSerial.AutoGenerateColumns = false;
            gvPopSerial.DataSource = ScanSerialList;

            //end load invoice serials

            List<RecieptItem> _itms = CHNLSVC.Sales.GetReceiptItemList(txtInvoiceNo.Text.Trim());
            RecieptItemList = _itms;
            _recieptItem = _itms;
            LoadRecieptGrid();

            TotalAmount = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());
            LoadData();
            if (_hdr.Sah_stus != "H")
            {
                btnSave.Enabled = false;
                txtItem.Enabled = false;
                txtSerialNo.Enabled = false;
                btnAddItem.Enabled = false;
            }
            else
            {
                btnSave.Enabled = true;
                txtItem.Enabled = true;
                txtSerialNo.Enabled = true;
                btnAddItem.Enabled = true;
            }

            //kapila
            //  gvInvoiceItem.Enabled = false;
            dataGridViewPayments.Enabled = false;
            btnEnter.Enabled = false;
            btnHold.Enabled = false;
        }

        private void AssignInvoiceHeaderDetail(InvoiceHeader _hdr)
        {
            ////  cmbInvType.Text = _hdr.Sah_inv_tp;
            txtDate.Text = _hdr.Sah_dt.ToString("dd/MM/yyyy"); ;
            txtCustomer.Text = _hdr.Sah_cus_cd;
            txtLoyalty.Text = _hdr.Sah_anal_6;
            _masterBusinessCompany = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, string.Empty, string.Empty, "C");
            SetCustomerAndDeliveryDetails(true, _hdr);
            ViewCustomerAccountDetail(txtCustomer.Text);
            txtExecutive.Text = _hdr.Sah_sales_ex_cd;
            DataTable _recallemp = CHNLSVC.Sales.GetinvEmp(BaseCls.GlbUserComCode, _hdr.Sah_sales_ex_cd);
            string _name = string.Empty;
            string _code = "";
            if (_recallemp != null && _recallemp.Rows.Count > 0)
            {
                _name = _recallemp.Rows[0].Field<string>("esep_first_name");
                _code = _recallemp.Rows[0].Field<string>("esep_epf");
            }
            //cmbExecutive.DataSource = null;
            //cmbExecutive.Items.Clear();
            //cmbExecutive.Items.Add(_name);
            ////  cmbExecutive.SelectedValue = _code;
            lblCurrency.Text = _hdr.Sah_currency;
            ////  txtManualRefNo.Text = _hdr.Sah_man_ref;
            chkTaxPayable.Checked = _hdr.Sah_tax_inv ? true : false;
            ////  txtManualRefNo.Text = _hdr.Sah_man_ref;
            ////  txtDocRefNo.Text = _hdr.Sah_ref_doc;
            ////  txtPoNo.Text = _hdr.Sah_anal_4;
            txtRemarks.Text = _hdr.Sah_remarks;
        }
        private void txtDisRate_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && e.KeyChar != '.')
            {
                e.Handled = true;
            }

            // only allow one decimal point
            if (e.KeyChar == '.'
                && (sender as TextBox).Text.IndexOf('.') > -1)
            {
                e.Handled = true;
            }
        }

        private void txtInvoiceNo_Leave(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtInvoiceNo.Text))
            {
                Clear();
                return;
            }
            try
            {
                if (IsToken)
                {
                    this.Cursor = Cursors.WaitCursor;
                    if (IsNumeric(txtInvoiceNo.Text.Trim()) == false)
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Token should be consist of numeric only", "Token", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtInvoiceNo.Clear(); txtInvoiceNo.Focus(); return; }
                    DataTable _token = CHNLSVC.Inventory.GetAvailableToken(DateTime.Now.Date, BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, Convert.ToInt32(txtInvoiceNo.Text.Trim()));
                    if (_token == null || _token.Rows.Count <= 0)
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Select token is not valid or incorrect. Please check the no", "Token", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtInvoiceNo.Clear(); txtInvoiceNo.Focus(); return; }
                    return;
                }

                // DecideTokenInvoice();
                RecallInvoice();
            }
            catch (Exception ex)
            { txtInvoiceNo.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            // if (pnlMain.Enabled == false) return;
            var _returns = _invoiceItemList.Where(x => x.Sad_srn_qty > 0).ToList();
            if (_returns != null && _returns.Count > 0)
            {
                MessageBox.Show("This invoice already reversed. You can not cancel this invoice.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            if (CheckServerDateTime() == false) return;

            if (MessageBox.Show("Do you want to cancel?", "Canceling...", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
            {
                return;
            }

            //Added by Prabhath on 25/11/2013
            DataTable _chk = CHNLSVC.Sales.CheckTheDocument(BaseCls.GlbUserComCode, txtInvoiceNo.Text.Trim());
            if (_chk != null && _chk.Rows.Count > 0)
            {
                string _refDocument = _chk.Rows[0].Field<string>("itr_req_no");
                MessageBox.Show("This invoice is already picked for a inter-transfer. You are not allow to cancel this invoice until " + _refDocument + " inter-transfer settled.", "Picked Document", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            RecallInvoice();
            Cancel();
        }

        private void Cancel()
        {
            if (IsBackDateOk(true, false) == false) return;
            if (string.IsNullOrEmpty(txtInvoiceNo.Text))
            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the invoice no", "Cancel", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtInvoiceNo.Focus(); return; }
            List<InvoiceHeader> _header = CHNLSVC.Sales.GetPendingInvoices(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, string.Empty, txtInvoiceNo.Text.Trim(), "C", DateTime.MinValue.ToString(), DateTime.MinValue.ToString());
            if (_header.Count <= 0)
            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Selected invoice no already canceled or invalid.", "Invalid Invoice no", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
            if ((_header[0].Sah_stus == "A" || _header[0].Sah_stus == "H"))
            { if (!IsFwdSaleCancelAllowUser) { MessageBox.Show("You are not allow to cancel this forward sale. Please make a request for the forward sale cancelation. Permission code | 10002", "Permission", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); return; } }
            if (_header[0].Sah_stus == "D")
            { if (!IsDlvSaleCancelAllowUser) { MessageBox.Show("You are not allow to cancel delivered sale. Please make a request for the delivered sale cancelation. Permission code | 10042", "Permission", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); return; } }
            if (_header[0].Sah_inv_sub_tp.Contains("CC"))
            { MessageBox.Show("Selected invoice belongs to a cash conversion. You cannot cancel  this invoice.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Information); return; }
            Int32 _isRegistered = CHNLSVC.Sales.CheckforInvoiceRegistration(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtInvoiceNo.Text.Trim());
            if (_isRegistered != 1)
            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("This invoice already registered!. You are not allow for cancelation.", "Registration Progress", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
            Int32 _isInsured = CHNLSVC.Sales.CheckforInvoiceInsurance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtInvoiceNo.Text.Trim());
            if (_isInsured != 1)
            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("This invoice already insured!. You are not allow for cancelation.", "Insurance Progress", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
            //:: Chamal 7-Jul-2014 | :: If promotion voucher no generated invoice, refer for another invoice
            bool _isPromoVou = CHNLSVC.Sales.CheckPromoVoucherInvoiceUsed(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtInvoiceNo.Text.Trim());
            if (_isPromoVou == true)
            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("This invoice already used for promotion voucher invoice!. You are not allow for cancelation.", "Promotion Voucher Used", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
            try
            {
                DataTable _buybackdoc = CHNLSVC.Inventory.GetBuyBackInventoryDocument(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtInvoiceNo.Text.Trim());
                if (_buybackdoc != null)
                    if (_buybackdoc.Rows.Count > 0)
                    {
                        string _adjno = Convert.ToString(_buybackdoc.Rows[0].Field<string>("ith_doc_no"));
                        string _buybackloc = Convert.ToString(_buybackdoc.Rows[0].Field<string>("ith_loc"));
                        if (!string.IsNullOrEmpty(_adjno))
                        {
                            _header[0].Sah_del_loc = _buybackloc;
                            DataTable _referdoc = CHNLSVC.Inventory.CheckInwardDocumentUseStatus(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _adjno);
                            if (_referdoc != null)
                                if (_referdoc.Rows.Count > 0)
                                {
                                    this.Cursor = Cursors.Default;
                                    string _referno = Convert.ToString(_referdoc.Rows[0].Field<string>("ith_doc_no"));
                                    using (new CenterWinDialog(this)) { MessageBox.Show("The invoice having buy back return item which already out from the location refer document " + _referno + ", buy back inventory no " + _adjno, "No Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    return;
                                }
                        }
                    }
            }
            catch (Exception ex)
            {
                SystemErrorMessage(ex);
            }
            List<InventoryHeader> _cancelDocument = null;
            try
            {
                DataTable _consignDocument = CHNLSVC.Inventory.GetConsginmentDocumentByInvoice(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtInvoiceNo.Text.Trim());
                if (_consignDocument != null)
                    if (_consignDocument.Rows.Count > 0)
                    {
                        foreach (DataRow _r in _consignDocument.Rows)
                        {
                            InventoryHeader _one = new InventoryHeader();
                            if (_cancelDocument == null) _cancelDocument = new List<InventoryHeader>();
                            string _type = _r["ith_doc_tp"] == DBNull.Value ? string.Empty : Convert.ToString(_r["ith_doc_tp"]);
                            string _document = _r["ith_doc_no"] == DBNull.Value ? string.Empty : Convert.ToString(_r["ith_doc_no"]);
                            bool _direction = _r["ith_direct"] == DBNull.Value ? false : Convert.ToBoolean(_r["ith_direct"]);
                            _one.Ith_doc_no = _document;
                            _one.Ith_doc_tp = _type;
                            _one.Ith_direct = _direction;
                            _cancelDocument.Add(_one);
                        }
                    }
            }
            catch (Exception ex)
            {
                SystemErrorMessage(ex);
            }
            try
            {
                this.Cursor = Cursors.WaitCursor;
                string _msg = "";
                Int32 _effect = CHNLSVC.Sales.InvoiceCancelation(_header[0], out _msg, _cancelDocument);
                this.Cursor = Cursors.Default;
                if (_effect == 1)
                {
                    _msg = "Successfully Canceled!";
                    using (new CenterWinDialog(this)) { MessageBox.Show(_msg, "Canceled", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                }
                else
                {
                    using (new CenterWinDialog(this)) { MessageBox.Show(_msg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error); }
                }
                this.Cursor = Cursors.Default;

                Clear();
            }
            catch (Exception ex)
            {
                CHNLSVC.CloseChannel();
                SystemErrorMessage(ex);
            }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnClear_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("Do you want to clear the screen?", "Question", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
            {
                Clear();
            }
        }

        private void txtSrchItem_DoubleClick(object sender, EventArgs e)
        {
            _commonSearch = new CommonSearch.CommonSearch();
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _commonSearch.ReturnIndex = 0;
                _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.InvoiceItemUnAssable);
                DataTable _result = CHNLSVC.CommonSearch.GetItemforInvoiceSearchData(_commonSearch.SearchParams, null, null);
                _commonSearch.dvResult.DataSource = _result;
                _commonSearch.BindUCtrlDDLData(_result);
                _commonSearch.obj_TragetTextBox = txtSrchItem;
                _commonSearch.IsSearchEnter = true;
                this.Cursor = Cursors.Default;
                _commonSearch.ShowDialog();
                txtItem.Text = txtSrchItem.Text;
                txtSrchItem.Select();

            }
            catch (Exception ex)
            { txtItem.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnPCC_Click(object sender, EventArgs e)
        {
            panelPermotion.Visible = true;
            pnlBankSlip.Visible = false;
            pnlCC.Visible = true;
            pnlCheque.Visible = false;
            pnlDebit.Visible = false;
            pnlOthers.Visible = false;
            pnlCash.Visible = false;
            pnlGiftVoucher.Visible = false;
            pnlGV.Visible = false;
            pnlLoyalty.Visible = false;
            pnlStar.Visible = false;

            panelPermotion.Visible = false;
            if (IsDutyFree)
            {
                textBoxCCBank.Text = "OTH";
                textBoxCCBank_Leave(null, null);
                LoadCardType(textBoxCCBank.Text);
            }
            //kapila 25/8/2014
            DataTable _DT1 = CHNLSVC.Sales.get_Def_dep_Bank(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "CRCD");
            if (_DT1.Rows.Count > 0)
                textBoxCCDepBank.Text = _DT1.Rows[0]["mpb_sun_ac"].ToString();

            lblSelPayTpDesc.Text = "CREDIT CARD";
            lblSelPayTp.Text = "CRCD";
            textBoxChequeNo.Text = "";
            textBoxChqDepBank.Text = "";
            textBoxAmount.Text = lblbalanceAmo.Text;
        }

        private void clear_chq()
        {
            textBoxChqBank.Text = "";
            textBoxChqBranch.Text = "";
            textBoxChqDepBank.Text = "";
            textBoxChqDepBranch.Text = "";
            textBoxChequeNo.Text = "";
            // dateTimePickerExpire.Value = "";
        }
        private void btnPChq_Click(object sender, EventArgs e)
        {

            pnlBankSlip.Visible = false;
            pnlCC.Visible = false;
            pnlCheque.Visible = true;
            pnlDebit.Visible = false;
            pnlOthers.Visible = false;
            pnlCash.Visible = false;
            pnlGiftVoucher.Visible = false;
            pnlGV.Visible = false;
            pnlLoyalty.Visible = false;
            pnlStar.Visible = false;


            lblSelPayTpDesc.Text = "CHEQUE";
            lblSelPayTp.Text = "CHEQUE";
            textBoxAmount.Text = lblbalanceAmo.Text;
        }

        private void btnPGV_Click(object sender, EventArgs e)
        {
            pnlCC.Visible = false;
            pnlCheque.Visible = false;
            pnlDebit.Visible = false;
            pnlOthers.Visible = false;
            pnlCash.Visible = false;
            pnlGiftVoucher.Visible = true;
            pnlGV.Visible = false;
            pnlLoyalty.Visible = false;
            pnlStar.Visible = false;


            lblSelPayTpDesc.Text = "GIFT VOUCHER-COMPANY";
            lblSelPayTp.Text = "GVO";
            textBoxAmount.Text = lblbalanceAmo.Text;
        }

        private void btnPAdv_Click(object sender, EventArgs e)
        {
            pnlBankSlip.Visible = false;
            pnlCC.Visible = false;
            pnlCheque.Visible = false;
            pnlDebit.Visible = false;
            pnlOthers.Visible = true;
            pnlCash.Visible = false;
            pnlGiftVoucher.Visible = false;
            pnlGV.Visible = false;
            pnlLoyalty.Visible = false;
            pnlStar.Visible = false;

            lblSelPayTpDesc.Text = "ADVANCE RECEIPT";
            lblSelPayTp.Text = "ADVAN";
            textBoxAmount.Text = lblbalanceAmo.Text;
        }

        private void btnPCN_Click(object sender, EventArgs e)
        {
            pnlBankSlip.Visible = false;
            pnlCC.Visible = false;
            pnlCheque.Visible = false;
            pnlDebit.Visible = false;
            pnlOthers.Visible = true;
            pnlCash.Visible = false;
            pnlGiftVoucher.Visible = false;
            pnlGV.Visible = false;
            pnlLoyalty.Visible = false;
            pnlStar.Visible = false;

            lblSelPayTpDesc.Text = "CREDIT NOTE";
            lblSelPayTp.Text = "CRNOTE";
            textBoxAmount.Text = lblbalanceAmo.Text;
        }

        private void btnPLoy_Click(object sender, EventArgs e)
        {
            pnlBankSlip.Visible = false;
            pnlCC.Visible = false;
            pnlCheque.Visible = false;
            pnlDebit.Visible = false;
            pnlOthers.Visible = false;
            pnlCash.Visible = false;
            pnlGiftVoucher.Visible = false;
            pnlGV.Visible = false;
            pnlLoyalty.Visible = true;
            pnlStar.Visible = false;

            lblSelPayTpDesc.Text = "LOYALITY REEDIM";
            lblSelPayTp.Text = "LORE";
            textBoxAmount.Text = lblbalanceAmo.Text;
        }

        private void btnPDC_Click(object sender, EventArgs e)
        {
            pnlBankSlip.Visible = false;
            pnlCC.Visible = false;
            pnlCheque.Visible = false;
            pnlDebit.Visible = true;
            pnlOthers.Visible = false;
            pnlCash.Visible = false;
            pnlGiftVoucher.Visible = false;
            pnlGV.Visible = false;
            pnlLoyalty.Visible = false;
            pnlStar.Visible = false;

            lblSelPayTpDesc.Text = "DEBIT CARD";
            lblSelPayTp.Text = "DEBT";
            textBoxAmount.Text = lblbalanceAmo.Text;
        }

        private void btnPCash_Click(object sender, EventArgs e)
        {
            pnlBankSlip.Visible = false;
            pnlCC.Visible = false;
            pnlCheque.Visible = false;
            pnlDebit.Visible = false;
            pnlOthers.Visible = false;
            pnlCash.Visible = true;
            pnlGiftVoucher.Visible = false;
            pnlGV.Visible = false;
            pnlLoyalty.Visible = false;
            pnlStar.Visible = false;
            lblSelPayTpDesc.Text = "CASH";
            lblSelPayTp.Text = "CASH";
            textBoxAmount.Text = lblbalanceAmo.Text;
        }

        private void txtQty_Leave(object sender, EventArgs e)
        {
            try
            {
            if (IsNumeric(txtQty.Text.ToString()) == false)
            {
                MessageBox.Show("Invalid Qty !", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            if (chkPickGV.Checked) { txtQty.Text = FormatToQty("1"); return; }
            if (_IsVirtualItem) return;
      
                if (Convert.ToDecimal(txtQty.Text.Trim()) < 0)
                {
                    MessageBox.Show("Quantity should be positive value.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                this.Cursor = Cursors.WaitCursor;
                CheckQty(false);
            }
            catch (Exception ex)
            { txtQty.Text = FormatToQty("1"); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void button10_Click(object sender, EventArgs e)
        {
            MessageBox.Show("", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
        }

        private void buttonSearchDep_Click(object sender, EventArgs e)
        {
            try
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
                _CommonSearch.ReturnIndex = 3;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.DepositBank);
                DataTable _result = CHNLSVC.CommonSearch.searchDepositBankCode(_CommonSearch.SearchParams, null, null);
                _CommonSearch.IsSearchEnter = true;
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = textBoxDepostiBank;
                _CommonSearch.ShowDialog();
                textBoxDepostiBank.Select();


            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void buttonSearchCashDeposit_Click(object sender, EventArgs e)
        {
            try
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
                _CommonSearch.ReturnIndex = 3;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.DepositBank);
                DataTable _result = CHNLSVC.CommonSearch.searchDepositBankCode(_CommonSearch.SearchParams, null, null);
                _CommonSearch.IsSearchEnter = true;
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtCashDepostBank;
                _CommonSearch.ShowDialog();
                txtCashDepostBank.Select();


            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void btnClrItm_Click(object sender, EventArgs e)
        {
            txtSrchItem.Text = "";
            txtSerialNo.Text = "";
            txtQty.Text = "1";
            txtUnitAmt.Text = "0.00";
            txtUnitPrice.Text = "0.00";
            txtDisRate.Text = "";
            txtDisAmt.Text = "0.00";
            txtTaxAmt.Text = "0.00";
            txtLineTotAmt.Text = "";

        }

        private void textBoxDBDepositBank_DoubleClick(object sender, EventArgs e)
        {
            buttonSearchDBDep_Click(null, null);
        }

        private void textBoxDbBank_DoubleClick(object sender, EventArgs e)
        {
            button12_Click(null, null);
        }

        private void textBoxCCBank_DoubleClick(object sender, EventArgs e)
        {
            buttonCCBankSearch_Click(null, null);
        }

        private void textBoxCCDepBank_DoubleClick(object sender, EventArgs e)
        {
            buttonDepBankSearch_Click(null, null);
        }

        private void textBoxCCDepBank_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
                buttonDepBankSearch_Click(null, null);
            if (e.KeyCode == Keys.Enter)
                textBoxCCDepBranch.Focus();
        }

        private void textBoxOthDepBank_DoubleClick(object sender, EventArgs e)
        {
            buttonSearchOthDep_Click(null, null);
        }

        private void txtGVDepBank_DoubleClick(object sender, EventArgs e)
        {
            btnGVDepositBank_Click(null, null);
        }

        private void textBoxChqBank_DoubleClick(object sender, EventArgs e)
        {
            buttonChqBankSearch_Click(null, null);
        }

        private void btnLoyaltyDepBank_Click(object sender, EventArgs e)
        {
            try
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.Bank);
                DataTable _result = CHNLSVC.CommonSearch.GetBusinessCompany(_CommonSearch.SearchParams, null, null);
                _CommonSearch.IsSearchEnter = true;
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtLoyaltyDepBank;
                _CommonSearch.IsSearchEnter = true;
                _CommonSearch.ShowDialog();
                txtLoyaltyDepBank.Select();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void txtLoyaltyDepBank_DoubleClick(object sender, EventArgs e)
        {
            btnLoyaltyDepBank_Click(null, null);
        }

        private void textBoxCCCardNo_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && e.KeyChar != '.')
            {
                e.Handled = true;
            }

            // only allow one decimal point
            if (e.KeyChar == '.'
                && (sender as TextBox).Text.IndexOf('.') > -1)
            {
                e.Handled = true;
            }
        }

        private void txtGiftVoucher_KeyPress(object sender, KeyPressEventArgs e)
        {
                if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && e.KeyChar != '.')
            {
                e.Handled = true;
            }

            // only allow one decimal point
            if (e.KeyChar == '.'
                && (sender as TextBox).Text.IndexOf('.') > -1)
            {
                e.Handled = true;
            }

        }

        private void txtInvoiceNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                txtInvoiceNo_Leave(null, null);
        }

        private void gvInvoiceItem_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            txtItem.Focus();
            btnBarcode.Text = "ON";
            btnBarcode.BackColor = Color.LimeGreen;
        }

        private void dataGridViewPayments_Click(object sender, EventArgs e)
        {
            txtItem.Focus();
            btnBarcode.Text = "ON";
            btnBarcode.BackColor = Color.LimeGreen;
        }

        private void gvInvoiceItem_Click(object sender, EventArgs e)
        {
            txtItem.Focus();
            btnBarcode.Text = "ON";
            btnBarcode.BackColor = Color.LimeGreen;
        }

        private void txtQty_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && e.KeyChar != '.')
            {
                e.Handled = true;
            }

            // only allow one decimal point
            if (e.KeyChar == '.'
                && (sender as TextBox).Text.IndexOf('.') > -1)
            {
                e.Handled = true;
            }
        }

        private void textBoxChequeNo_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '-')
            {
                e.Handled = true;
            }

            // only allow one decimal point
            if (e.KeyChar == '.'
                && (sender as TextBox).Text.IndexOf('.') > -1)
            {
                e.Handled = true;
            }
        }

        private void txtLoyaltyCardNo_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '-')
            {
                e.Handled = true;
            }

            // only allow one decimal point
            if (e.KeyChar == '.'
                && (sender as TextBox).Text.IndexOf('.') > -1)
            {
                e.Handled = true;
            }
        }

        private void textBoxDbCardNo_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && e.KeyChar != '.' && e.KeyChar != '-')
            {
                e.Handled = true;
            }

            // only allow one decimal point
            if (e.KeyChar == '.'
                && (sender as TextBox).Text.IndexOf('.') > -1)
            {
                e.Handled = true;
            }
        }

        private void btnCloseForm_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void btnRePayCancel_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("Do you need to cancel this invoice save process?", "Cancel", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
            {
                // pnlMain.Enabled = true;
                pnlRePay.Visible = false;
                btnClear_Click(null, null);
            }
        }

        private bool CheckItemAndSerials()
        {
            bool result = false;
            if (_invoiceItemList == null || _invoiceItemList.Count <= 0)
            {
                result = false;
            }
            else
            {
                foreach (InvoiceItem itm in _invoiceItemList)
                {
                    List<ReptPickSerials> _serials = (from _ser in ScanSerialList
                                                      where _ser.Tus_itm_cd == itm.Sad_itm_cd && _ser.Tus_itm_stus == itm.Sad_itm_stus
                                                      select _ser).ToList<ReptPickSerials>();

                    if (_serials != null && _serials.Count > 0)
                    {
                        if (itm.Sad_qty == _serials.Count)
                        {
                            result = false;
                        }
                        else
                        {
                            result = true;
                        }
                    }
                    else
                    {
                        result = true;
                    }
                }
            }
            return result;
        }


        private void SaveWithoutSerial()
        {
            button1.Focus();
            _serialMatch = true;
            try
            {
                if (CheckServerDateTime() == false) return;

                if (chkDeliverLater.Checked)
                {
                    if (CHNLSVC.Sales.IsForwardSaleExceed(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf))
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("No of forward sales are restricted. Please contact inventory dept.", "Max. Forward Sale", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        return;
                    }
                }
                ////if (cmbInvType.Text.Trim() == "CRED" && txtCustomer.Text.Trim() == "AST-CASH")
                ////{
                ////    this.Cursor = Cursors.Default;
                ////    using (new CenterWinDialog(this)) { MessageBox.Show("You can not select customer as CASH, because your invoice type is " + cmbInvType.Text, "Credit Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                ////    txtCustomer.Clear();
                ////    txtCustomer.Focus();
                ////    return;
                ////}
                ////if (chkManualRef.Checked && string.IsNullOrEmpty(txtManualRefNo.Text))
                ////{
                ////    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the manual no", "Manual No", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                ////    return;
                ////}
                ////if (cmbInvType.Text.Trim() == "CRED")
                ////    if (string.IsNullOrEmpty(txtPoNo.Text))
                ////    {
                ////        this.Cursor = Cursors.Default;
                ////        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the PO number", "Purchase Order Number", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                ////        txtPoNo.Clear();
                ////        txtPoNo.Focus();
                ////        return;
                ////    }
                ////    else if (txtPoNo.Text.Trim() == "N/A" || txtPoNo.Text.Trim() == "NA" || txtPoNo.Text.Trim() == ".")
                ////    {
                ////        this.Cursor = Cursors.Default;
                ////        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid PO number", "Purchase Order Number", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                ////        txtPoNo.Clear();
                ////        txtPoNo.Focus();
                ////        return;
                ////    }
                bool IsBuyBackItemAvailable = false;
                var _bbQty = _invoiceItemList.Where(x => x.Sad_merge_itm == "3").Sum(x => x.Sad_qty);
                if (_bbQty > 0)
                {
                    if (BuyBackItemList == null || BuyBackItemList.Count <= 0)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the buy back item", "Buy Back Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        pnlBuyBack.Visible = true;
                        IsBuyBackItemAvailable = false;
                        return;
                    }
                    else
                    {
                        var _purBB = BuyBackItemList.Sum(x => x.Tus_qty);
                        if (_purBB != _bbQty)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Please select " + _bbQty.ToString() + " buy back item(s)", "Buy Back Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            pnlBuyBack.Visible = true;
                            IsBuyBackItemAvailable = false;
                            return;
                        }
                    }
                }
                else if (_bbQty <= 0 && BuyBackItemList != null)
                {
                    if (BuyBackItemList.Count > 0)
                    {
                        tabControl1.SelectedTab = tabPage4;
                        if (MessageBox.Show("There is no buy back promotion selected, but buy back return item already available. Do you need to remove selected return buy-back item and continue?", "Return Item - Buy Back", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                        {
                            BuyBackItemList = null;
                        }
                        else
                        {
                            tabControl1.SelectedTab = tabPage4;
                            IsBuyBackItemAvailable = false;
                            return;
                        }

                        IsBuyBackItemAvailable = true;
                    }
                    else IsBuyBackItemAvailable = false;
                }
                else if (_bbQty > 0 && BuyBackItemList != null) if (BuyBackItemList.Count > 0) IsBuyBackItemAvailable = true;
                if (chkGiftVoucher.Checked)
                {
                    var _isExistGv = _invoiceItemList.Where(x => IsGiftVoucher(x.Sad_itm_tp)).Count();
                    if (_isExistGv <= 0)
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You can't process without gift vouchers", "Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                    string _notMapped = string.Empty;
                    var _gvitm = (from DataGridViewRow _row in gvGiftVoucher.Rows where _row.Index != -1 select _row).ToList();
                    Parallel.ForEach(_gvitm, _row => { var _isPromotion = _invoiceItemList.Where(x => x.Sad_itm_line == Convert.ToInt32(_row.Cells["gf_baseItemLine"].Value) && !string.IsNullOrEmpty(x.Sad_promo_cd)).Select(x => x.Sad_promo_cd).Count(); if (_isPromotion <= 0) { string _mappedItem = Convert.ToString(_row.Cells[7].EditedFormattedValue); string _gvNo = Convert.ToString(_row.Cells["gf_serial1"].EditedFormattedValue); if (string.IsNullOrEmpty(_mappedItem)) if (string.IsNullOrEmpty(_notMapped)) _notMapped = _gvNo; else _notMapped += ", " + _gvNo; } });
                    if (!string.IsNullOrEmpty(_notMapped))
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please attach the issuing item to the gift voucher for the following gift voucher(s). " + _notMapped + ".", "Attach Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); } tabControl1.SelectedTab = tabPage3; return; }
                }
                ////  if (pnlMain.Enabled == false) return;
                if (IsBackDateOk(chkDeliverLater.Checked, IsBuyBackItemAvailable) == false) return;
                bool _isHoldInvoiceProcess = false;
                InvoiceHeader _hdr = new InvoiceHeader();
                if (!string.IsNullOrEmpty(txtInvoiceNo.Text.Trim()))
                {
                    _hdr = CHNLSVC.Sales.GetInvoiceHeaderDetails(txtInvoiceNo.Text.Trim());
                    if (_hdr != null)
                        if (_hdr.Sah_stus != "H")
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("You can not edit already saved invoice", "Invoice Re-call", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                            return;
                        }
                }
                if (_hdr != null && _hdr.Sah_stus == "H") _isHoldInvoiceProcess = true;
                if (_isHoldInvoiceProcess && chkDeliverLater.Checked == false)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("You can not use 'Deliver Now!' option for hold invoice", "Invoice Hold", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                ////if (string.IsNullOrEmpty(cmbInvType.Text))
                ////{
                ////    this.Cursor = Cursors.Default;
                ////    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the invoice type", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                ////    cmbInvType.Focus();
                ////    return;
                ////}
                if (string.IsNullOrEmpty(txtCustomer.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the customer", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    txtCustomer.Focus();
                    return;
                }
                if (string.IsNullOrEmpty(cmbBook.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the price book", "Price Book", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    cmbBook.Focus();
                    return;
                }
                if (string.IsNullOrEmpty(cmbLevel.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the price level", "Price Level", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    cmbLevel.Focus();
                    return;
                }
                if (_invoiceItemList.Count <= 0)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the items for invoice", "Invoice item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                bool _isExeMust = false;
                if (MasterChannel != null && MasterChannel.Rows.Count > 0)
                    _isExeMust = Convert.ToBoolean(MasterChannel.Rows[0].Field<Int16>("msc_needsalexe"));

                //Oracle SQL Fine Tuning
                if (string.IsNullOrEmpty(txtExecutive.Text))
                {
                    if (_isExeMust)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the executive code", "Executive", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtExecutive.Focus();
                        return;
                    }
                    else txtExecutive.Text = "";
                }
                if (!string.IsNullOrEmpty(txtExecutive.Text) && _isExeMust)
                {
                    if (txtExecutive.Text.Trim().ToUpper() == "N/A" || txtExecutive.Text.Trim().ToUpper() == "NA")
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Sales executive is mandatory to this channel", "Sales Executive", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtExecutive.Clear();
                        txtExecutive.Focus();
                        ////   cmbExecutive.Focus();
                        return;
                    }
                }
                if (string.IsNullOrEmpty(lblCurrency.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the currency code", "Currency", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    lblCurrency.Focus();
                    return;
                }
                if (_MasterProfitCenter.Mpc_check_pay && _recieptItem.Count <= 0)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("This profit center is not allow for raise invoice without payment. Please enter the payment detail", "Payments", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                if (string.IsNullOrEmpty(txtCusName.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please enter the customer name", "Customer Name", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                ////if (string.IsNullOrEmpty(txtAddress1.Text) && string.IsNullOrEmpty(txtAddress2.Text))
                ////{
                ////    this.Cursor = Cursors.Default;
                ////    using (new CenterWinDialog(this)) { MessageBox.Show("Please enter the customer address", "Customer Address", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                ////    return;
                ////}

                #region Check for payment if the invoice type is cash

                ////  if (cmbInvType.Text == "CS")
                if (_recieptItem == null)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please enter the payment detail", "Payments", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                    return;
                }

                ////     if (cmbInvType.Text == "CS")
                if (_recieptItem != null)
                    if (_recieptItem.Count <= 0)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please enter the payment detail", "Payments", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                        return;
                    }
                ////     if (cmbInvType.Text == "CS")
                if (_recieptItem != null)
                    if (_recieptItem.Count >= 0)
                    {
                        decimal _realPay = 0;
                        if (lblSVatStatus.Text == "Available")
                            _realPay = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim()) - Convert.ToDecimal(lblGrndTax.Text.Trim());
                        else
                            _realPay = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());

                        decimal _totlaPay = _recieptItem.Sum(x => x.Sard_settle_amt);
                        //if (_totlaPay != Convert.ToDecimal(lblGrndTotalAmount.Text))
                        if (_totlaPay != _realPay)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Please enter the payment detail", "Payments", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                            return;
                        }
                    }

                #endregion Check for payment if the invoice type is cash

                #region Check for availability of the invoice prefix

                string _invoicePrefix = CHNLSVC.Sales.GetInvoicePrefix(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "CS");

                if (string.IsNullOrEmpty(_invoicePrefix))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Selected invoice no does not having a invoice prefix to generate invoice no. Please contact accounts department.", "Invoice Prefix", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                Int32 _count = 1;
                if (_recieptItem != null)
                    if (_recieptItem.Count > 0)
                        _recieptItem.ForEach(x => x.Sard_line_no = _count++);
                _count = 1;
                List<InvoiceItem> _linedInvoiceItem = new List<InvoiceItem>();
                foreach (InvoiceItem _item in _invoiceItemList)
                {
                    Int32 _currentLine = _item.Sad_itm_line;
                    if (ScanSerialList != null)
                        if (ScanSerialList.Count > 0)
                            ScanSerialList.Where(x => x.Tus_base_itm_line == _currentLine).ToList().ForEach(x => x.Tus_base_itm_line = _count);
                    if (InvoiceSerialList != null)
                        if (InvoiceSerialList.Count > 0)
                            InvoiceSerialList.Where(x => x.Sap_itm_line == _currentLine).ToList().ForEach(x => x.Sap_itm_line = _count);
                    _item.Sad_itm_line = _count;
                    _linedInvoiceItem.Add(_item);
                    _count += 1;
                }

                _linedInvoiceItem.ForEach(x => x.Sad_isapp = true);
                _linedInvoiceItem.ForEach(x => x.Sad_iscovernote = true);
                _invoiceItemList = new List<InvoiceItem>();
                _invoiceItemList = _linedInvoiceItem;

                if (chkDeliverLater.Checked == false && IsReferancedDocDateAppropriate(ScanSerialList, Convert.ToDateTime(txtDate.Text).Date) == false)
                    return;

                if (chkDeliverLater.Checked == false)
                {
                    string _itmList = string.Empty;
                    bool _isqtyNserialOk = IsInvoiceItemNSerialListTally(out _itmList);

                    if (_isqtyNserialOk == false)
                    {
                        if (chkDeliverNow.Checked)
                        {
                            _processMinusBalance = true;
                            if (MessageBox.Show("Below items qty and serial qty do not match\n" + _itmList + "\nDo you want to proceed?", "Question", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.No)
                            {
                                pnlDoNowItems.Visible = true;
                                ////          pnlMain.Enabled = false;
                                return;
                            }
                        }
                    }
                }
                if (chkDeliverLater.Checked == false && chkDeliverNow.Checked)
                {
                    //add by darshana on 12-Mar-2014 - To Gold operation totally operate as consignment base and no need to generate grn.
                    MasterCompany _masterComp = new MasterCompany();
                    _masterComp = CHNLSVC.General.GetCompByCode(BaseCls.GlbUserComCode);

                    if (_masterComp.Mc_anal13 == 0)
                    {
                        #region Check Consignment Item has Quotation(s) :: Chamal 18-Sep-2013

                        string documntNo = string.Empty;
                        if ((chkDeliverLater.Checked == false || chkDeliverNow.Checked) && ScanSerialList != null && ScanSerialList.Count > 0)
                            if (CHNLSVC.Inventory.Check_Cons_Item_has_Quo(BaseCls.GlbUserComCode, txtDate.Value.Date, ScanSerialList, out documntNo) < 0)
                            {
                                Cursor.Current = Cursors.Default;
                                MessageBox.Show(documntNo, "Quotation not define", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }

                        #endregion Check Consignment Item has Quotation(s) :: Chamal 18-Sep-2013
                    }

                    //check invoice item and serial count match
                    decimal itemCount = _invoiceItemList.Sum(x => x.Sad_qty);
                    decimal serialCount = ScanSerialList.Count;
                    if (serialCount > itemCount)
                    {
                        MessageBox.Show("Serial Count exceeds item count\nSerial - " + serialCount + " " + " Item - " + itemCount + "\nPlease select Serials again", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        ScanSerialList = new List<ReptPickSerials>();

                        dvDOSerials.AutoGenerateColumns = false;
                        BindingSource _source = new BindingSource();
                        _source.DataSource = ScanSerialList;
                        dvDOSerials.DataSource = _source;
                        _invoiceItemList.ForEach(x => x.Sad_srn_qty = 0);
                        pnlDoNowItems.Visible = true;
                        ////          pnlMain.Enabled = false;
                        return;
                    }
                }
                if (chkDeliverLater.Checked == false)
                {
                    string _nottallylist = string.Empty;
                    bool _isTallywithinventory = IsInventoryBalanceNInvoiceItemTally(out _nottallylist);

                    if (_isTallywithinventory == false)
                    {
                        if (chkDeliverNow.Checked)
                        {
                            _processMinusBalance = true;
                        }
                    }
                }
                if (chkDeliverNow.Checked)
                {
                    _processMinusBalance = CheckItemAndSerials();
                }

                if (ScanSerialList == null || ScanSerialList.Count <= 0)
                {
                    MessageBox.Show("Please select atleast one serial before save or select deliver later option", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                #endregion Check for availability of the invoice prefix

                MasterBusinessEntity _entity = new MasterBusinessEntity();
                InvoiceHeader _invheader = new InvoiceHeader();
                RecieptHeader _recHeader = new RecieptHeader();
                InventoryHeader invHdr = new InventoryHeader();
                InventoryHeader _buybackheader = new InventoryHeader();
                MasterAutoNumber _buybackAuto = new MasterAutoNumber();

                #region Showroom manager having a company, and its to take the company to GRN in the DO stage

                bool _isCustomerHasCompany = false;
                string _customerCompany = string.Empty;
                string _customerLocation = string.Empty;

                _entity = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, string.Empty, string.Empty, "C");
                if (_entity != null)
                    if (_entity.Mbe_cd != null)
                        if (!string.IsNullOrEmpty(_entity.Mbe_cust_com) && !string.IsNullOrEmpty(_entity.Mbe_cust_loc))
                        { _isCustomerHasCompany = true; _customerCompany = _entity.Mbe_cust_com; _customerLocation = _entity.Mbe_cust_loc; }

                #endregion Showroom manager having a company, and its to take the company to GRN in the DO stage

                #region Inventory Header Value Assign

                invHdr.Ith_loc = BaseCls.GlbUserDefLoca;
                invHdr.Ith_com = BaseCls.GlbUserComCode;
                invHdr.Ith_doc_tp = "DO";
                invHdr.Ith_doc_date = Convert.ToDateTime(txtDate.Text).Date;
                invHdr.Ith_doc_year = Convert.ToDateTime(txtDate.Text).Year;
                //invHdr.Ith_cate_tp = "DPS";
                invHdr.Ith_cate_tp = "CS";
                invHdr.Ith_sub_tp = "DPS";
                invHdr.Ith_bus_entity = txtCustomer.Text.Trim();
                invHdr.Ith_del_add1 = txtDelAddress1.Text.Trim();
                invHdr.Ith_del_add1 = txtDelAddress2.Text.Trim();
                invHdr.Ith_is_manual = false;
                invHdr.Ith_stus = "A";
                invHdr.Ith_cre_by = BaseCls.GlbUserID;
                invHdr.Ith_mod_by = BaseCls.GlbUserID;
                invHdr.Ith_direct = false;
                invHdr.Ith_session_id = BaseCls.GlbUserSessionID;
                invHdr.Ith_manual_ref = "";
                invHdr.Ith_vehi_no = string.Empty;
                invHdr.Ith_remarks = string.Empty;
                invHdr.Ith_entry_tp = "DWS";
                MasterAutoNumber _masterAutoDo = new MasterAutoNumber();
                _masterAutoDo.Aut_cate_cd = BaseCls.GlbUserDefLoca;
                _masterAutoDo.Aut_cate_tp = "LOC";
                _masterAutoDo.Aut_direction = 0;
                _masterAutoDo.Aut_moduleid = "DO";
                _masterAutoDo.Aut_start_char = "DO";
                _masterAutoDo.Aut_year = Convert.ToDateTime(txtDate.Text).Year;
                _invheader.Sah_com = BaseCls.GlbUserComCode;
                _invheader.Sah_cre_by = BaseCls.GlbUserID;
                _invheader.Sah_cre_when = DateTime.Now;
                _invheader.Sah_currency = "LKR";//Currency.Text;
                ////   _invheader.Sah_cus_add1 = txtAddress1.Text.Trim();
                ////   _invheader.Sah_cus_add2 = txtAddress2.Text.Trim();
                _invheader.Sah_cus_cd = txtCustomer.Text.Trim();
                _invheader.Sah_cus_name = txtCusName.Text.Trim();
                _invheader.Sah_d_cust_add1 = txtDelAddress1.Text.Trim();
                _invheader.Sah_d_cust_add2 = txtDelAddress2.Text.Trim();
                _invheader.Sah_d_cust_cd = txtDelCustomer.Text.Trim();
                _invheader.Sah_d_cust_name = txtDelName.Text.Trim();
                _invheader.Sah_direct = true;
                _invheader.Sah_dt = Convert.ToDateTime(txtDate.Text);
                _invheader.Sah_epf_rt = 0;
                _invheader.Sah_esd_rt = 0;
                _invheader.Sah_ex_rt = 1;
                _invheader.Sah_inv_no = "na";
                _invheader.Sah_inv_sub_tp = "SA";
                _invheader.Sah_inv_tp = "CS";
                _invheader.Sah_is_acc_upload = false;
                _invheader.Sah_man_ref = "";
                _invheader.Sah_manual = false;
                _invheader.Sah_mod_by = BaseCls.GlbUserID;
                _invheader.Sah_mod_when = DateTime.Now;
                _invheader.Sah_pc = BaseCls.GlbUserDefProf;
                _invheader.Sah_pdi_req = 0;
                _invheader.Sah_ref_doc = ""; //// txtDocRefNo.Text;
                _invheader.Sah_remarks = "";
                _invheader.Sah_sales_chn_cd = "";
                _invheader.Sah_sales_chn_man = "";
                _invheader.Sah_sales_ex_cd = txtExecutive.Text.Trim();
                _invheader.Sah_sales_region_cd = "";
                _invheader.Sah_sales_region_man = "";
                _invheader.Sah_sales_sbu_cd = "";
                _invheader.Sah_sales_sbu_man = "";
                _invheader.Sah_sales_str_cd = "";
                _invheader.Sah_sales_zone_cd = "";
                _invheader.Sah_sales_zone_man = "";
                _invheader.Sah_seq_no = 1;
                _invheader.Sah_session_id = BaseCls.GlbUserSessionID;
                ////       _invheader.Sah_structure_seq = txtQuotation.Text.Trim();
                _invheader.Sah_stus = "A";
                //if ((chkDeliverLater.Checked == false || chkDeliverNow.Checked) && !_processMinusBalance) _invheader.Sah_stus = "D";
                _invheader.Sah_town_cd = "";
                _invheader.Sah_tp = "INV";
                _invheader.Sah_wht_rt = 0;
                _invheader.Sah_direct = true;
                _invheader.Sah_tax_inv = chkTaxPayable.Checked ? true : false;
                _invheader.Sah_anal_11 = 0;
                //if ((chkDeliverLater.Checked == false || chkDeliverNow.Checked) && !_processMinusBalance) _invheader.Sah_anal_11 = 1;
                //if (chkDeliverLater.Checked)
                //{
                //    _invheader.Sah_anal_11 = 0;
                //}
                //else if ((chkDeliverLater.Checked == false || chkDeliverNow.Checked) && !_processMinusBalance) {
                //    _invheader.Sah_anal_11 = 1;
                //}
                //else if ((chkDeliverLater.Checked == false || chkDeliverNow.Checked) && _processMinusBalance) {
                //    _invheader.Sah_anal_11 = 0;
                //}
                //else if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                //{
                //    _invheader.Sah_anal_11 = 1;
                //}
                _invheader.Sah_del_loc = ((chkDeliverLater.Checked == false || chkDeliverNow.Checked) && !_processMinusBalance) ? BaseCls.GlbUserDefLoca : !string.IsNullOrEmpty(txtDelLocation.Text) ? txtDelLocation.Text : string.Empty;
                _invheader.Sah_grn_com = _customerCompany;
                _invheader.Sah_grn_loc = _customerLocation;
                _invheader.Sah_is_grn = _isCustomerHasCompany;

                _invheader.Sah_grup_cd = string.IsNullOrEmpty(txtGroup.Text.Trim()) ? string.Empty : txtGroup.Text.Trim();
                _invheader.Sah_is_svat = lblSVatStatus.Text == "Available" ? true : false;
                _invheader.Sah_tax_exempted = lblVatExemptStatus.Text == "Available" ? true : false;
                ////        _invheader.Sah_anal_4 = txtPoNo.Text.Trim();
                _invheader.Sah_anal_6 = txtLoyalty.Text.Trim();
                _invheader.Sah_man_cd = _MasterProfitCenter.Mpc_man;
                _invheader.Sah_is_dayend = 0;
                _invheader.Sah_remarks = txtRemarks.Text.Trim();

                _invheader.Sah_anal_1 = Promoter;
                ////        _invheader.Sah_anal_1 = txtPromotor.Text;
                //if (string.IsNullOrEmpty(Convert.ToString(cmbTechnician.SelectedValue))) _invheader.Sah_anal_1 = string.Empty;
                //else _invheader.Sah_anal_1 = Convert.ToString(cmbTechnician.SelectedValue);

                if (_isHoldInvoiceProcess) _invheader.Sah_seq_no = Convert.ToInt32(txtInvoiceNo.Text.Trim());
                _recHeader.Sar_acc_no = "";
                _recHeader.Sar_act = true;
                _recHeader.Sar_com_cd = BaseCls.GlbUserComCode;
                _recHeader.Sar_comm_amt = 0;
                _recHeader.Sar_create_by = BaseCls.GlbUserID;
                _recHeader.Sar_create_when = DateTime.Now;
                _recHeader.Sar_currency_cd = "LKR";//txtCurrency.Text;
                ////   _recHeader.Sar_debtor_add_1 = txtAddress1.Text;
                ////    _recHeader.Sar_debtor_add_2 = txtAddress2.Text;
                _recHeader.Sar_debtor_cd = txtCustomer.Text;
                _recHeader.Sar_debtor_name = txtCusName.Text;
                _recHeader.Sar_direct = true;
                _recHeader.Sar_direct_deposit_bank_cd = "";
                _recHeader.Sar_direct_deposit_branch = "";
                _recHeader.Sar_epf_rate = 0;
                _recHeader.Sar_esd_rate = 0;
                _recHeader.Sar_is_mgr_iss = false;
                _recHeader.Sar_is_oth_shop = false;
                _recHeader.Sar_is_used = false;
                _recHeader.Sar_manual_ref_no = "";
                _recHeader.Sar_mob_no = txtMobile.Text;
                _recHeader.Sar_mod_by = BaseCls.GlbUserID;
                _recHeader.Sar_mod_when = DateTime.Now;
                _recHeader.Sar_nic_no = txtNIC.Text;
                _recHeader.Sar_oth_sr = "";
                _recHeader.Sar_prefix = "";
                _recHeader.Sar_profit_center_cd = BaseCls.GlbUserDefProf;
                _recHeader.Sar_receipt_date = Convert.ToDateTime(txtDate.Text);
                _recHeader.Sar_receipt_no = "na";
                _recHeader.Sar_receipt_type = "CS" == "CRED" ? "DEBT" : "DIR";
                _recHeader.Sar_ref_doc = "";
                _recHeader.Sar_remarks = string.Empty;// txtPayRemarks.Text;
                _recHeader.Sar_seq_no = 1;
                _recHeader.Sar_ser_job_no = "";
                _recHeader.Sar_session_id = BaseCls.GlbUserSessionID;
                _recHeader.Sar_tel_no = txtMobile.Text;
                _recHeader.Sar_tot_settle_amt = 0;
                _recHeader.Sar_uploaded_to_finance = false;
                _recHeader.Sar_used_amt = 0;
                _recHeader.Sar_wht_rate = 0;
                MasterAutoNumber _invoiceAuto = new MasterAutoNumber();
                _invoiceAuto.Aut_cate_cd = BaseCls.GlbUserDefProf;
                _invoiceAuto.Aut_cate_tp = "PRO";
                _invoiceAuto.Aut_direction = 1;
                _invoiceAuto.Aut_modify_dt = null;
                _invoiceAuto.Aut_moduleid = "CS";
                _invoiceAuto.Aut_number = 0;
                _invoiceAuto.Aut_start_char = _invoicePrefix;
                _invoiceAuto.Aut_year = Convert.ToDateTime(txtDate.Text).Year;
                MasterAutoNumber _receiptAuto = null;
                if (_recieptItem != null)
                    if (_recieptItem.Count > 0)
                    {
                        _receiptAuto = new MasterAutoNumber();
                        _receiptAuto.Aut_cate_cd = BaseCls.GlbUserDefProf;
                        _receiptAuto.Aut_cate_tp = "PRO";
                        _receiptAuto.Aut_direction = 1;
                        _receiptAuto.Aut_modify_dt = null;
                        _receiptAuto.Aut_moduleid = "RECEIPT";
                        _receiptAuto.Aut_number = 0;
                        _receiptAuto.Aut_start_char = "DIR";
                        _receiptAuto.Aut_year = Convert.ToDateTime(txtDate.Text).Year;
                    }
                DataTable dt_location = CHNLSVC.Inventory.Get_location_by_code(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca);
                foreach (DataRow r in dt_location.Rows)
                {
                    // Get the value of the wanted column and cast it to string
                    _buybackheader.Ith_sbu = (string)r["ML_OPE_CD"];
                    if (System.DBNull.Value != r["ML_CATE_2"])
                    {
                        _buybackheader.Ith_channel = (string)r["ML_CATE_2"];
                    }
                    else
                    {
                        _buybackheader.Ith_channel = string.Empty;
                    }
                }
                _buybackheader.Ith_acc_no = "BB_INVC";
                _buybackheader.Ith_anal_1 = "";
                _buybackheader.Ith_anal_2 = "";
                _buybackheader.Ith_anal_3 = "";
                _buybackheader.Ith_anal_4 = "";
                _buybackheader.Ith_anal_5 = "";
                _buybackheader.Ith_anal_6 = 0;
                _buybackheader.Ith_anal_7 = 0;
                _buybackheader.Ith_anal_8 = DateTime.MinValue;
                _buybackheader.Ith_anal_9 = DateTime.MinValue;
                _buybackheader.Ith_anal_10 = false;
                _buybackheader.Ith_anal_11 = false;
                _buybackheader.Ith_anal_12 = false;
                _buybackheader.Ith_bus_entity = "";
                _buybackheader.Ith_cate_tp = "NOR";
                _buybackheader.Ith_com = BaseCls.GlbUserComCode;
                _buybackheader.Ith_com_docno = "";
                _buybackheader.Ith_cre_by = BaseCls.GlbUserID;
                _buybackheader.Ith_cre_when = DateTime.Now;
                _buybackheader.Ith_del_add1 = "";
                _buybackheader.Ith_del_add2 = "";
                _buybackheader.Ith_del_code = "";
                _buybackheader.Ith_del_party = "";
                _buybackheader.Ith_del_town = "";
                _buybackheader.Ith_direct = true;
                _buybackheader.Ith_doc_date = txtDate.Value.Date;
                _buybackheader.Ith_doc_no = string.Empty;
                _buybackheader.Ith_doc_tp = "ADJ";
                _buybackheader.Ith_doc_year = txtDate.Value.Date.Year;
                _buybackheader.Ith_entry_no = string.Empty;
                _buybackheader.Ith_entry_tp = "NOR";
                _buybackheader.Ith_git_close = true;
                _buybackheader.Ith_git_close_date = DateTime.MinValue;
                _buybackheader.Ith_git_close_doc = string.Empty;
                _buybackheader.Ith_isprinted = false;
                _buybackheader.Ith_is_manual = false;
                _buybackheader.Ith_job_no = string.Empty;
                _buybackheader.Ith_loading_point = string.Empty;
                _buybackheader.Ith_loading_user = string.Empty;
                _buybackheader.Ith_loc = BaseCls.GlbUserDefLoca;
                _buybackheader.Ith_manual_ref = string.Empty;
                _buybackheader.Ith_mod_by = BaseCls.GlbUserID;
                _buybackheader.Ith_mod_when = DateTime.Now;
                _buybackheader.Ith_noofcopies = 0;
                _buybackheader.Ith_oth_loc = string.Empty;
                _buybackheader.Ith_oth_docno = "N/A";
                _buybackheader.Ith_remarks = string.Empty;
                _buybackheader.Ith_session_id = BaseCls.GlbUserSessionID;
                _buybackheader.Ith_stus = "A";
                _buybackheader.Ith_sub_tp = "NOR";
                _buybackheader.Ith_vehi_no = string.Empty;
                _buybackAuto.Aut_cate_cd = BaseCls.GlbUserDefLoca;
                _buybackAuto.Aut_cate_tp = "LOC";
                _buybackAuto.Aut_direction = null;
                _buybackAuto.Aut_modify_dt = null;
                _buybackAuto.Aut_moduleid = "ADJ";
                _buybackAuto.Aut_number = 5;//what is Aut_number
                _buybackAuto.Aut_start_char = "ADJ";
                _buybackAuto.Aut_year = null;
                _count = 1;
                string _bin = CHNLSVC.Inventory.GetDefaultBinCode(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca);
                if (BuyBackItemList != null) if (BuyBackItemList.Count > 0)
                    {
                        BuyBackItemList.ForEach(X => X.Tus_bin = _bin);
                        BuyBackItemList.ForEach(X => X.Tus_itm_line = _count++);
                        BuyBackItemList.ForEach(X => X.Tus_serial_id = "N/A");
                        BuyBackItemList.ForEach(x => x.Tus_exist_grndt = Convert.ToDateTime(txtDate.Value).Date);
                        BuyBackItemList.ForEach(x => x.Tus_orig_grndt = Convert.ToDateTime(txtDate.Value).Date);
                    }
                if (txtCustomer.Text.Trim() != "AST-CASH")
                {
                    MasterBusinessEntity _en = CHNLSVC.Sales.GetCustomerProfile(txtCustomer.Text.Trim(), string.Empty, string.Empty, string.Empty, string.Empty);
                    if (_en != null)
                        if (string.IsNullOrEmpty(_en.Mbe_com))
                        {
                            _invheader.Sah_tax_exempted = _en.Mbe_tax_ex;
                            _invheader.Sah_is_svat = _en.Mbe_is_svat;
                        }
                }
                CollectBusinessEntity();
                string _invoiceNo = "";
                string _receiptNo = "";
                string _deliveryOrderNo = "";
                _invoiceItemListWithDiscount = new List<InvoiceItem>();
                List<InvoiceItem> _discounted = null;
                bool _isDifferent = false;
                decimal _tobepay = 0;
                decimal _tobepay1 = 0;
                bool _canSaveWithoutDiscount = false;
                try
                {
                    // Int32 _timeno = Convert.ToInt32(DateTime.Now.ToString("HHmmss"));
                    // CHNLSVC.Sales.GetGeneralPromotionDiscount(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _invoiceItemList, _recieptItem, out _discounted, out _isDifferent, out _tobepay, _invheader);
                    //_invoiceItemListWithDiscount = _discounted;
                    Int32 _timeno = Convert.ToInt32(DateTime.Now.ToString("HHmmss"));
                    if (_discountSequence == 0)
                    {
                        foreach (InvoiceItem itm in _invoiceItemList)
                        {
                            bool isMulti;
                            int seq;
                            List<InvoiceItem> _item = new List<InvoiceItem>();
                            _item.Add(itm);
                            DataTable _discount = CHNLSVC.Sales.GetPromotionalDiscountSequences(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "CS", _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _item, _recieptItem, _invheader, out isMulti, out seq);
                            //show pop up
                            if (_discount == null)
                            {
                                _discountSequence = seq;
                                if (isMulti)
                                {
                                    _isDifferent = false;
                                    _discountSequence = -9999;
                                }
                                else
                                {
                                    if (_discountSequence != -9999 && _discountSequence != 0)
                                    {
                                        //if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                                        //  {
                                        _isDifferent = true;
                                        _discountSequence = seq;
                                        CHNLSVC.Sales.GetGeneralPromotionProcess(_discountSequence, BaseCls.GlbUserComCode, _item, out _discounted, out _isDifferent, out _tobepay1, _invheader);
                                        _invoiceItemListWithDiscount.AddRange(_discounted);
                                        CashPromotionDiscountHeader _discountHdr = CHNLSVC.General.GetPromotionalDiscountBySeq(seq);
                                        if (_discountHdr != null)
                                        {
                                            _canSaveWithoutDiscount = _discountHdr.Spdh_is_alw_normal;
                                        }
                                        // }
                                    }
                                    else
                                    {
                                        if (!IsDiscounted)
                                        {
                                            _isDifferent = false;
                                            _discountSequence = -9999;
                                            // if (MessageBox.Show("There is no specific discount promotion available. Do you want to save?", "Saving...", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                                            //  {
                                            //   _discountSequence = 0;
                                            // return;
                                            //  }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                // if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                                //  {
                                //show popup
                                pnlDiscount.Visible = true;
                                ////     pnlMain.Enabled = false;
                                gvDiscount.DataSource = _discount;
                                return;
                                //   }
                                //else
                                //{
                                //    _isDifferent = false;
                                //    _discountSequence = -9999;
                                //}
                            }
                        }
                    }
                    else if (_discountSequence != -9999)
                    {
                        //Int32 _timeno = Convert.ToInt32(DateTime.Now.ToString("HHmmss"));
                        CHNLSVC.Sales.GetGeneralPromotionProcess(_discountSequence, BaseCls.GlbUserComCode, _invoiceItemList, out _discounted, out _isDifferent, out _tobepay, _invheader);
                        _invoiceItemListWithDiscount = _discounted;
                    }
                    if (_invoiceItemListWithDiscount != null && _invoiceItemListWithDiscount.Count > 0)
                    {
                        _isDifferent = true;
                        foreach (InvoiceItem invItm in _invoiceItemList)
                        {
                            List<InvoiceItem> _itmList = (from _res in _invoiceItemListWithDiscount
                                                          where _res.Mi_itm_stus == invItm.Mi_itm_stus && _res.Sad_itm_cd == invItm.Sad_itm_cd
                                                          select _res).ToList<InvoiceItem>();
                            if (_itmList == null || _itmList.Count <= 0)
                            {
                                _invoiceItemListWithDiscount.Add(invItm);
                            }
                        }
                        _tobepay = _invoiceItemListWithDiscount.Select(X => X.Sad_tot_amt).Sum();
                    }
                    //if ((_discountSequence == -9999 && _isDifferent) || (_discountSequence == -9999 && ucPayModes1.IsDiscounted)) {
                    //    if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    //    {
                    //    }
                    //    else
                    //    {
                    //        _isDifferent = false;
                    //        _discountSequence = 0;
                    //    }
                    //}
                    //if (_discountSequence == -9999)
                    //{
                    //    CHNLSVC.Sales.GetGeneralPromotionDiscount(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _invoiceItemList, _recieptItem, out _discounted, out _isDifferent, out _tobepay, _invheader);
                    //    _invoiceItemListWithDiscount = _discounted;

                    //    if (_isDifferent)
                    //    {
                    //        if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    //        {
                    //            _isDifferent = false;
                    //        }
                    //    }

                    //}
                    //added sachith
                    //2013/09/04
                    if (!_isDifferent && !IsDiscounted)
                    {
                        //credit note discount (if invoice pay mode has credit note and invoice don't have discount)
                        List<RecieptItem> _creditNote = (from _res in _recieptItem
                                                         where _res.Sard_pay_tp == "CRNOTE" || _res.Sard_pay_tp == "ADVAN"
                                                         select _res).ToList<RecieptItem>();
                        if (_creditNote != null && _creditNote.Count > 0)
                        {
                            Int32 _timeno1 = Convert.ToInt32(DateTime.Now.ToString("HHmmss"));
                            CHNLSVC.Sales.GetGeneralPromotionDiscountAdvanCredit(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "CS", _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _invoiceItemList, _recieptItem, out _discounted, out _isDifferent, out _tobepay, _invheader);
                            _invoiceItemListWithDiscount = _discounted;
                            foreach (InvoiceItem _invItm in _invoiceItemListWithDiscount)
                            {
                                if (_invItm.Sad_dis_type == "P")
                                {
                                    CashPromotionDiscountHeader _discountHdr = CHNLSVC.General.GetPromotionalDiscountBySeq(_invItm.Sad_dis_seq);
                                    if (_discountHdr != null)
                                    {
                                        _canSaveWithoutDiscount = _discountHdr.Spdh_is_alw_normal;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception exs)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show(exs.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    CHNLSVC.CloseChannel();
                    return;
                }
                if (_isDifferent || IsDiscounted)
                {
                    if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                    }
                    else
                    {
                        if (_canSaveWithoutDiscount)
                        {
                            if (MessageBox.Show("Invoice will save without Discount", "Question", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                            {
                                _isDifferent = false;
                                _discountSequence = 0;
                            }
                            else
                            {
                                _isDifferent = false;
                                _discountSequence = 0;
                                return;
                            }
                        }
                        else
                        {
                            MessageBox.Show("Can not process invoice because discount circular not allow to process without discount", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            _isDifferent = false;
                            _discountSequence = 0;
                            return;
                        }
                    }
                }
                else
                {
                    if (MessageBox.Show("There is no specific discount promotion available. Do you want to save?", "Saving...", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    {
                        _discountSequence = 0;
                        return;
                    }
                }

                if (_isDifferent)
                {
                    string _discountItem = FormatDiscoutnItem(0, "Item") + FormatDiscoutnItem(2, "Unit Amount") + FormatDiscoutnItem(2, "Dis. Rate") + FormatDiscoutnItem(2, "Dis. Amount") + FormatDiscoutnItem(2, "Total Amount") + "\n";
                    foreach (InvoiceItem i in _invoiceItemList)//.Where(x => x.Sad_disc_rt > 0).ToList()
                        _discountItem += FormatDiscoutnItem(0, i.Sad_itm_cd) + FormatDiscoutnItem(2, i.Sad_unit_amt.ToString()) + FormatDiscoutnItem(2, i.Sad_disc_rt.ToString()) + FormatDiscoutnItem(2, i.Sad_disc_amt.ToString()) + FormatDiscoutnItem(2, i.Sad_tot_amt.ToString()) + "\n";

                    // if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    // {
                    if (lblSVatStatus.Text.Trim() == "Available" || lblVatExemptStatus.Text.Trim() == "Available")
                    {
                        decimal Vatsum = _invoiceItemListWithDiscount.Sum(x => x.Sad_itm_tax_amt);
                        _tobepay -= Vatsum;
                    }
                    lblRePayToBePay.Text = FormatToCurrency(_tobepay.ToString());
                    if (_recieptItem != null) if (_recieptItem.Count > 0)
                            if (_recieptItem.Count == 1)
                                if (_recieptItem[0].Sard_pay_tp != "CRNOTE")
                                {
                                    _recieptItem.ForEach(x => x.Newpayment = Math.Round(_tobepay, 2));
                                }
                                else
                                {
                                    _recieptItem.ForEach(x => x.Newpayment = Math.Round(x.Sard_settle_amt, 2));
                                }
                            else
                                _recieptItem.ForEach(x => x.Newpayment = Math.Round(x.Sard_settle_amt, 2));
                    DataTable _tbl = _recieptItem.ToDataTable();
                    gvRePayment.DataSource = _tbl;
                    _toBePayNewAmount = _tobepay;
                    //bool creditnote=false;
                    //foreach (DataGridViewRow grv in gvRePayment.Rows) {
                    //    string paytp = grv.Cells["repy_paymenttype"].Value.ToString();
                    //    if (paytp == "CRNOTE")
                    //    {
                    //        creditnote = true;
                    //        grv.ReadOnly = true;
                    //        gvRePayment.BeginEdit(true);
                    //    }

                    //}

                    pnlRePay.Visible = true;
                    ////       pnlMain.Enabled = false;

                    // }

                    return;
                }
                if (IsDiscounted)
                {
                    _invoiceItemListWithDiscount = DiscountedInvoiceItem;
                    string _discountItem = FormatDiscoutnItem(0, "Item") + FormatDiscoutnItem(2, "Unit Amount") + FormatDiscoutnItem(2, "Dis. Rate") + FormatDiscoutnItem(2, "Dis. Amount") + FormatDiscoutnItem(2, "Total Amount") + "\n";
                    foreach (InvoiceItem i in _invoiceItemList)//.Where(x => x.Sad_disc_rt > 0).ToList()
                        _discountItem += FormatDiscoutnItem(0, i.Sad_itm_cd) + FormatDiscoutnItem(2, i.Sad_unit_amt.ToString()) + FormatDiscoutnItem(2, i.Sad_disc_rt.ToString()) + FormatDiscoutnItem(2, i.Sad_disc_amt.ToString()) + FormatDiscoutnItem(2, i.Sad_tot_amt.ToString()) + "\n";

                    // if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    // {
                    if (lblSVatStatus.Text.Trim() == "Available" || lblVatExemptStatus.Text.Trim() == "Available")
                    {
                        decimal Vatsum = DiscountedInvoiceItem.Sum(x => x.Sad_itm_tax_amt);
                        _tobepay = DiscountedValue - Vatsum;
                    }
                    else
                    {
                        _tobepay = DiscountedValue;
                    }
                    lblRePayToBePay.Text = FormatToCurrency(_tobepay.ToString());
                    if (_recieptItem != null) if (_recieptItem.Count > 0)
                            if (_recieptItem.Count == 1)
                                if (_recieptItem[0].Sard_pay_tp != "CRNOTE")
                                {
                                    _recieptItem.ForEach(x => x.Newpayment = Math.Round(_tobepay, 2));
                                }
                                else
                                {
                                    _recieptItem.ForEach(x => x.Newpayment = Math.Round(x.Sard_settle_amt, 2));
                                }
                            else
                                _recieptItem.ForEach(x => x.Newpayment = Math.Round(x.Sard_settle_amt, 2));
                    DataTable _tbl = _recieptItem.ToDataTable();
                    gvRePayment.DataSource = _tbl;
                    _toBePayNewAmount = _tobepay;
                    //bool creditnote=false;
                    //foreach (DataGridViewRow grv in gvRePayment.Rows) {
                    //    string paytp = grv.Cells["repy_paymenttype"].Value.ToString();
                    //    if (paytp == "CRNOTE")
                    //    {
                    //        creditnote = true;
                    //        grv.ReadOnly = true;
                    //        gvRePayment.BeginEdit(true);
                    //    }

                    //}

                    pnlRePay.Visible = true;
                    ////      pnlMain.Enabled = false;

                    // }

                    return;
                }
                else
                {
                }

                #endregion Inventory Header Value Assign

                #region Gift Voucher - Parser

                List<InvoiceVoucher> _giftVoucher = null;
                List<ReptPickSerials> _giftVoucherSerial = null;
                List<ReptPickSerials> _gvLst = ScanSerialList.Where(x => IsGiftVoucher(x.ItemType)).ToList();
                if (_gvLst != null)
                    if (_gvLst.Count > 0)
                    {
                        _giftVoucher = new List<InvoiceVoucher>();
                        Parallel.ForEach(_gvLst, _one =>
                        {
                            string _attachedItem = string.Empty;
                            if (gf_assignItem.Visible)
                            {
                                _attachedItem = (from DataGridViewRow _row in gvGiftVoucher.Rows where Convert.ToString(_row.Cells["gf_serial1"].Value) == _one.Tus_ser_1 && Convert.ToString(_row.Cells["gf_serial2"].Value) == _one.Tus_ser_2 && Convert.ToString(_row.Cells["gf_item"].Value) == _one.Tus_itm_cd select Convert.ToString(_row.Cells[7].Value)).ToList()[0];
                                if (string.IsNullOrEmpty(_attachedItem))
                                    _attachedItem = _invoiceItemList.Where(y => y.Sad_job_line == (_invoiceItemList.Where(x => x.Sad_itm_line == _one.Tus_base_itm_line).ToList()[0].Sad_job_line) && y.Sad_itm_tp == "M").Select(y => y.Sad_itm_cd).Distinct().ToList()[0];
                            }
                            else
                                _attachedItem = _invoiceItemList.Where(y => y.Sad_job_line == (_invoiceItemList.Where(x => x.Sad_itm_line == _one.Tus_base_itm_line).ToList()[0].Sad_job_line) && y.Sad_itm_tp == "M").Select(y => y.Sad_itm_cd).Distinct().ToList()[0];

                            InvoiceVoucher _gift = new InvoiceVoucher();
                            _gift.Stvo_bookno = Convert.ToInt32(_one.Tus_ser_2);
                            _gift.Stvo_cre_by = BaseCls.GlbUserID;
                            _gift.Stvo_cre_when = DateTime.Now;
                            _gift.Stvo_gv_itm = _one.Tus_itm_cd;
                            _gift.Stvo_inv_no = string.Empty;
                            _gift.Stvo_itm_cd = _attachedItem;
                            _gift.Stvo_pageno = Convert.ToInt32(_one.Tus_ser_1);
                            _gift.Stvo_prefix = _one.Tus_ser_3;
                            _gift.Stvo_price = _one.Tus_unit_price;
                            _giftVoucher.Add(_gift);
                            if (_giftVoucherSerial == null) _giftVoucherSerial = new List<ReptPickSerials>();
                            _giftVoucherSerial.Add(_one);
                            ScanSerialList.Remove(_one);
                        });
                    }

                #endregion Gift Voucher - Parser

                int effect = -1;
                string _error = string.Empty;
                string _buybackadj = string.Empty;
                try
                {
                    btnSave.Enabled = false;
                    //update srn qty
                    _invoiceItemList.ForEach(x => x.Sad_srn_qty = 0);
                    List<RecieptItem> _registrationReciept = new List<RecieptItem>();
                    _registrationReciept = ucPayModes2.RecieptItemList;
                    List<VehicalRegistration> _registrationList = new List<VehicalRegistration>();
                    //2013/12/10
                    //ADDED REGISTRATION PROCESS

                    if (_isNeedRegistrationReciept)
                    {
                        //reciept auto number
                        MasterAutoNumber masterAutoRecTp = new MasterAutoNumber();
                        masterAutoRecTp.Aut_cate_cd = BaseCls.GlbUserDefProf;
                        masterAutoRecTp.Aut_cate_tp = "PC";
                        masterAutoRecTp.Aut_direction = null;
                        masterAutoRecTp.Aut_modify_dt = null;
                        masterAutoRecTp.Aut_moduleid = "RECEIPT";
                        masterAutoRecTp.Aut_number = 5;//what is Aut_number
                        masterAutoRecTp.Aut_start_char = "VHREG";
                        masterAutoRecTp.Aut_year = null;

                        RecieptHeader _ReceiptHeader = new RecieptHeader();
                        _ReceiptHeader.Sar_seq_no = -1; //CHNLSVC.Inventory.Generate_new_seq_num(GlbUserName, "RECEIPT", 1, BaseCls.GlbUserComCode);
                        _ReceiptHeader.Sar_com_cd = BaseCls.GlbUserComCode;
                        _ReceiptHeader.Sar_receipt_type = "VHREG";
                        // _ReceiptHeader.Sar_receipt_no = txtRecNo.Text.Trim();

                        MasterReceiptDivision _RecDiv = new MasterReceiptDivision();
                        _RecDiv = CHNLSVC.Sales.GetDefRecDivision(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf);
                        if (_RecDiv.Msrd_cd != null)
                        {
                            _ReceiptHeader.Sar_prefix = _RecDiv.Msrd_cd;
                        }
                        else
                        {
                            _ReceiptHeader.Sar_prefix = "";
                        }
                        //_ReceiptHeader.Sar_prefix = txtDivision.Text.Trim();
                        // _ReceiptHeader.Sar_manual_ref_no = txtManual.Text.Trim();
                        _ReceiptHeader.Sar_receipt_date = Convert.ToDateTime(txtDate.Value).Date;
                        _ReceiptHeader.Sar_direct = true;
                        _ReceiptHeader.Sar_acc_no = "";
                        _ReceiptHeader.Sar_is_oth_shop = false;
                        _ReceiptHeader.Sar_oth_sr = "";
                        _ReceiptHeader.Sar_profit_center_cd = BaseCls.GlbUserDefProf;
                        _ReceiptHeader.Sar_debtor_cd = txtCustomer.Text.Trim();
                        _ReceiptHeader.Sar_debtor_name = txtCusName.Text.Trim();
                        ////     _ReceiptHeader.Sar_debtor_add_1 = txtAddress1.Text.Trim();
                        ////   _ReceiptHeader.Sar_debtor_add_2 = txtAddress2.Text.Trim();
                        _ReceiptHeader.Sar_tel_no = "";
                        _ReceiptHeader.Sar_mob_no = txtMobile.Text.Trim();
                        _ReceiptHeader.Sar_nic_no = txtNIC.Text.Trim();
                        _ReceiptHeader.Sar_tot_settle_amt = ucPayModes2.RecieptItemList.Sum(x => x.Sard_settle_amt);
                        _ReceiptHeader.Sar_comm_amt = 0;
                        _ReceiptHeader.Sar_is_mgr_iss = false;
                        _ReceiptHeader.Sar_esd_rate = 0;
                        _ReceiptHeader.Sar_wht_rate = 0;
                        _ReceiptHeader.Sar_epf_rate = 0;
                        _ReceiptHeader.Sar_currency_cd = "LKR";
                        _ReceiptHeader.Sar_uploaded_to_finance = false;
                        _ReceiptHeader.Sar_act = true;
                        _ReceiptHeader.Sar_direct_deposit_bank_cd = "";
                        _ReceiptHeader.Sar_direct_deposit_branch = "";
                        // _ReceiptHeader.Sar_remarks = txtNote.Text.Trim();
                        _ReceiptHeader.Sar_is_used = false;
                        _ReceiptHeader.Sar_ref_doc = "";
                        _ReceiptHeader.Sar_ser_job_no = "";
                        _ReceiptHeader.Sar_used_amt = 0;
                        _ReceiptHeader.Sar_create_by = BaseCls.GlbUserID;
                        _ReceiptHeader.Sar_mod_by = BaseCls.GlbUserID;
                        _ReceiptHeader.Sar_session_id = BaseCls.GlbUserSessionID;
                        _ReceiptHeader.Sar_anal_1 = cmbDistrict.Text;
                        _ReceiptHeader.Sar_anal_2 = txtProvince.Text.Trim();
                        if (string.IsNullOrEmpty(_businessEntity.Mbe_distric_cd))
                            _businessEntity.Mbe_distric_cd = cmbDistrict.Text;
                        if (string.IsNullOrEmpty(_businessEntity.Mbe_province_cd))
                            _businessEntity.Mbe_province_cd = txtProvince.Text;

                        if (cmbDistrict.SelectedValue != null)
                            _masterBusinessCompany.Mbe_distric_cd = cmbDistrict.SelectedValue.ToString();
                        _masterBusinessCompany.Mbe_province_cd = txtProvince.Text;

                        ReptPickHeader _SerHeader = new ReptPickHeader();
                        _SerHeader.Tuh_usrseq_no = -1;
                        _SerHeader.Tuh_usr_id = BaseCls.GlbUserID;
                        _SerHeader.Tuh_usr_com = BaseCls.GlbUserComCode;
                        _SerHeader.Tuh_session_id = BaseCls.GlbUserSessionID;
                        _SerHeader.Tuh_cre_dt = Convert.ToDateTime(txtDate.Value).Date;
                        _SerHeader.Tuh_doc_tp = "INV";
                        _SerHeader.Tuh_direct = false;
                        _SerHeader.Tuh_ischek_itmstus = true;
                        _SerHeader.Tuh_ischek_simitm = true;
                        _SerHeader.Tuh_ischek_reqqty = true;
                        _SerHeader.Tuh_doc_no = null;

                        // vehical regitration list
                        ////foreach (RegistrationList _reg in _List)
                        ////{
                        ////    //get serials
                        ////    List<ReptPickSerials> _serList = (from res in ScanSerialList
                        ////                                      where res.Tus_itm_cd == _reg.Item && res.Tus_itm_stus == _reg.Stus
                        ////                                      select res).ToList<ReptPickSerials>();
                        ////    foreach (ReptPickSerials _serial in _serList)
                        ////    {
                        ////        VehicalRegistration _tem = AssingRegDetails(_reg.Item, _reg.Item_reg, _reg.Item_claim, _serial.Tus_ser_1, _serial.Tus_ser_2);
                        ////        _registrationList.Add(_tem);
                        ////    }
                        ////}
                        //save invoice with registration
                        string _registration;
                        effect = CHNLSVC.Sales.SaveInvoiceDuplicateWithTransactionRegistration(_invheader, _invoiceItemList, InvoiceSerialList, _recHeader, _recieptItem, invHdr, ScanSerialList, null, _invoiceAuto, _receiptAuto, _masterAutoDo, (chkDeliverLater.Checked == false || chkDeliverNow.Checked) ? true : false, out _invoiceNo, out _receiptNo, out _deliveryOrderNo, _businessEntity, false, _isHoldInvoiceProcess, out _error, _giftVoucher, _buybackheader, _buybackAuto, BuyBackItemList, out _buybackadj, _ReceiptHeader, masterAutoRecTp, _registrationList, _registrationReciept, _SerHeader, out _registration, ref IsInvoiceCompleted);

                        //if (effect == -1) {
                        //    MessageBox.Show("Error occured while processing !!\n" + _error, "Error");
                        //    return;

                        //}
                    }
                    //END
                    else
                    {
                        //ADDED 2014/02/26
                        bool _sucess = CheckGeneralDiscount();
                        if (_sucess == false)
                        {
                            return;
                        }
                        //

                        effect = CHNLSVC.Sales.SaveInvoiceDuplicateWithTransaction01(_invheader, _invoiceItemList, InvoiceSerialList, _recHeader, _recieptItem, invHdr, ScanSerialList, null, _invoiceAuto, _receiptAuto, _masterAutoDo, (chkDeliverLater.Checked == false || chkDeliverNow.Checked) ? true : false, out _invoiceNo, out _receiptNo, out _deliveryOrderNo, _businessEntity, false, _isHoldInvoiceProcess, out _error, _giftVoucher, _buybackheader, _buybackAuto, BuyBackItemList, out _buybackadj, ref IsInvoiceCompleted);
                    }
                }
                catch (Exception ex)
                {
                    if (_giftVoucher != null && _giftVoucher.Count > 0) { _giftVoucher = new List<InvoiceVoucher>(); ScanSerialList.AddRange(_giftVoucherSerial); _giftVoucherSerial = new List<ReptPickSerials>(); }
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show(ex.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
                    CHNLSVC.CloseChannel();
                    return;
                }
                finally
                {
                    string Msg = string.Empty;
                    btnSave.Enabled = true;

                    if (effect != -1)
                    {
                        if (chkDeliverLater.Checked == false || chkDeliverNow.Checked)
                        {
                            Msg = "Successfully Saved! Document No : " + _invoiceNo + " with Delivery Order :" + _deliveryOrderNo + ". ";
                        }
                        else
                        {
                            Msg = "Successfully Saved! Document No : " + _invoiceNo + ". ";
                        }

                        ////if (cmbInvType.Text.Trim() == "CS")
                        ////{
                        var _isCashPaymentExsit = _recieptItem.Where(x => x.Sard_pay_tp == "CASH").ToList();
                        if (_isCashPaymentExsit != null)
                            if (_isCashPaymentExsit.Count > 0)
                            {
                                decimal _cashamt = _isCashPaymentExsit.Sum(x => x.Sard_settle_amt);
                                string _customerGiven = PaymentBalanceConfirmation(Msg, _cashamt);
                                if (!string.IsNullOrEmpty(_customerGiven))
                                {
                                    this.Cursor = Cursors.Default;
                                    string BalanceToGive = FormatToCurrency(Convert.ToString(Convert.ToDecimal(_customerGiven) - _cashamt));
                                    using (new CenterWinDialog(this)) { MessageBox.Show("You have to give back as balance " + BalanceToGive + "\n in " + lblCurrency.Text + ".", "Balance To Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                }
                            }
                        ////}
                        ////else
                        ////{ 
                        ////    this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) 
                        ////    { 
                        ////        MessageBox.Show(Msg, "Saved Documents", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        ////    } 
                        ////}

                        BaseCls.GlbReportName = string.Empty;
                        GlbReportName = string.Empty;
                        MasterBusinessEntity _itm = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, string.Empty, string.Empty, "C");
                        bool _isAskDO = false;
                        if (MasterChannel != null) if (MasterChannel.Rows.Count > 0) if (MasterChannel.Rows[0].Field<Int16>("msc_isprint_do") == 1) _isAskDO = true; else _isAskDO = false;
                        ////            if (chkManualRef.Checked == false)
                        ////         {
                        bool _isPrintElite = false;
                        if (!string.IsNullOrEmpty(_MasterProfitCenter.Mpc_chnl))
                        {
                            if (_MasterProfitCenter.Mpc_chnl.Trim() == "ELITE" || _MasterProfitCenter.Mpc_chnl.Trim() == "RRC1" || _MasterProfitCenter.Mpc_chnl.Trim() == "RRE2")
                            {
                                clsSalesRep obj = new clsSalesRep();
                                BaseCls.GlbReportDoc = _invoiceNo;
                                BaseCls.GlbReportIsCostPrmission = 0;

                                obj.POSInvoiceDirectPrint();
                                //ReportViewer _view = new ReportViewer();
                                //BaseCls.GlbReportName = string.Empty;
                                //GlbReportName = string.Empty;
                                //_view.GlbReportName = string.Empty;
                                //BaseCls.GlbReportTp = "INV";
                                //_view.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "InvoiceHalfPrints.rpt" : BaseCls.GlbUserComCode == "GCL" ? "InvoicePrints_Gold.rpt" : "InvoiceHalfPrints.rpt";
                                //_view.GlbReportDoc = _invoiceNo; _view.Show(); _view = null; _isPrintElite = true;
                            }
                        }
                        //AUTO_DEL
                        //get permission
                        bool _permission = CHNLSVC.Security.Is_OptionPerimitted(BaseCls.GlbUserComCode, BaseCls.GlbUserID, 11055);
                        if (!_permission)
                        {
                            { if (_MasterProfitCenter.Mpc_chnl.Trim() == "AUTO_DEL") { ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; _view.GlbReportName = "DealerInvoicePrints.rpt"; BaseCls.GlbReportName = "DealerInvoicePrints.rpt"; _view.GlbReportDoc = _invoiceNo; BaseCls.GlbReportDoc = _invoiceNo; _view.Show(); _view = null; _isPrintElite = true; } }
                        }
                        if (_isPrintElite == false)
                        {
                            if (_itm.Mbe_sub_tp != "C.")
                            {
                                //Showroom
                                //========================= INVOCIE  CASH/CREDIT/ HIRE
                                if (chkTaxPayable.Checked == false)
                                { ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; BaseCls.GlbReportTp = "INV"; _view.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "InvoiceHalfPrints.rpt" : "InvoiceHalfPrints.rpt"; _view.GlbReportDoc = _invoiceNo; _view.Show(); _view = null; }
                                else
                                {
                                    //Add Code by Chamal 27/04/2013
                                    //====================  TAX INVOICE
                                    ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; BaseCls.GlbReportTp = "INV"; _view.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "InvoiceHalfPrints.rpt" : BaseCls.GlbUserComCode == "GCL" ? "InvoicePrints_Gold.rpt" : "InvoiceHalfPrints.rpt"; _view.GlbReportDoc = _invoiceNo; _view.Show(); _view = null;
                                    if (_recieptItem != null) if (_recieptItem.Count > 0) if (_itm.Mbe_cate == "LEASE") { ReportViewer _viewt = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; _viewt.GlbReportName = "InvoicePrintTax_insus.rpt"; _viewt.GlbReportDoc = _invoiceNo; _viewt.Show(); _viewt = null; }
                                    //====================  TAX INVOICE
                                }
                            }
                            else
                            {
                                //Dealer
                                ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; BaseCls.GlbReportTp = "INV"; _view.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "InvoiceHalfPrints.rpt" : BaseCls.GlbUserComCode == "GCL" ? "InvoicePrints_Gold.rpt" : "InvoicePrintTax.rpt"; _view.GlbReportDoc = _invoiceNo; _view.Show(); _view = null;
                                if (_recieptItem != null) if (_recieptItem.Count > 0) if (_itm.Mbe_cate == "LEASE") { ReportViewer _viewt = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; _viewt.GlbReportName = "InvoicePrint_insus.rpt"; _viewt.GlbReportDoc = _invoiceNo; _viewt.Show(); _viewt = null; }
                            }
                            ////           }

                            if (BuyBackItemList != null)
                                if (BuyBackItemList.Count > 0)
                                {
                                    Reports.Inventory.ReportViewerInventory _viewBB = new Reports.Inventory.ReportViewerInventory();

                                    BaseCls.GlbReportName = string.Empty;
                                    GlbReportName = string.Empty;
                                    _viewBB.GlbReportName = string.Empty;
                                    BaseCls.GlbReportTp = "INWARD";
                                    _viewBB.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "Inward_Docs.rpt" : BaseCls.GlbDefChannel == "AUTO_DEL" ? "Dealer_Inward_Docs.rpt" : "Inward_Docs.rpt";
                                    _viewBB.GlbReportDoc = _buybackadj;
                                    _viewBB.Show();
                                    _viewBB = null;
                                }
                        }

                        //=========================DO
                        if (chkDeliverLater.Checked == false || chkDeliverNow.Checked)
                        {
                            ////if (_isAskDO)
                            ////{
                            ////    if (MessageBox.Show("Do you need to print delivery order now?", "Print", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                            ////    { ReportViewerInventory _views = new ReportViewerInventory(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; BaseCls.GlbReportTp = "OUTWARD"; _views.GlbReportName = string.Empty; _views.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "Outward_Docs.rpt" : BaseCls.GlbDefChannel == "AUTO_DEL" ? "Dealer_Outward_Docs.rpt" : "Outward_Docs.rpt"; _views.GlbReportDoc = _deliveryOrderNo; _views.Show(); _views = null; }
                            ////}
                            ////else
                            ////{ ReportViewerInventory _views = new ReportViewerInventory(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; BaseCls.GlbReportTp = "OUTWARD"; _views.GlbReportName = string.Empty; _views.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "Outward_Docs.rpt" : BaseCls.GlbDefChannel == "AUTO_DEL" ? "Dealer_Outward_Docs.rpt" : "Outward_Docs.rpt"; _views.GlbReportDoc = _deliveryOrderNo; _views.Show(); _views = null; }
                        }
                        btnClear_Click(null, null);
                        //change chk value
                        if (_MasterProfitCenter.Mpc_is_do_now == 0)
                        {
                            chkDeliverLater.Checked = false;
                            chkDeliverNow.Checked = false;
                            chkDeliverLater_CheckedChanged(null, null);
                        }
                        else if (_MasterProfitCenter.Mpc_is_do_now == 1)
                        {
                            chkDeliverNow.Checked = true;
                            chkDeliverLater.Checked = false;
                            chkDeliverNow_CheckedChanged(null, null);
                        }
                        else
                        {
                            chkDeliverLater.Checked = true;
                            chkDeliverNow.Checked = false;
                            chkDeliverLater_CheckedChanged(null, null);
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(_error))
                        { if (_giftVoucher != null && _giftVoucher.Count > 0) { _giftVoucher = new List<InvoiceVoucher>(); ScanSerialList.AddRange(_giftVoucherSerial); _giftVoucherSerial = new List<ReptPickSerials>(); } this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Generating Invoice is terminated due to following reason, " + _error, "Generated Error", MessageBoxButtons.OK, MessageBoxIcon.Hand); } }
                        CHNLSVC.CloseChannel();
                    }
                    CHNLSVC.CloseAllChannels();
                }
            }
            catch
            {
                this.Cursor = Cursors.Default;
                CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }


        private void btnRePayConfirm_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                btnConfirm_CheckUserNewPaymentAmount();
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        protected void btnConfirm_CheckUserNewPaymentAmount()
        {
            if (chkDeliverNow.Checked)
                SaveWithoutSerial();

            decimal _gridTotal = 0;
            this.Cursor = Cursors.WaitCursor;

            #region Deliver Now! - Check for serialied item qty with it's scan serial count

            if (chkDeliverLater.Checked == false)
            {
                string _itmList = string.Empty;
                bool _isqtyNserialOk = IsInvoiceItemNSerialListTally(out _itmList);
                if (_isqtyNserialOk == false)
                {
                    if (!chkDeliverNow.Checked)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Invoice qty and no. of serials are mismatched. Please check the following item for its serials and qty.\nItem List : " + _itmList, "Qty & Serial", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                        _serialMatch = false;
                        return;
                    }
                    else
                    {
                        _serialMatch = false;
                    }
                }
            }

            if (chkDeliverLater.Checked == false)
            {
                string _nottallylist = string.Empty;
                bool _isTallywithinventory = IsInventoryBalanceNInvoiceItemTally(out _nottallylist);

                if (_isTallywithinventory == false)
                {
                    if (!chkDeliverNow.Checked)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Following item does not having inventory balance for raise delivery order; " + _nottallylist, "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                        _serialMatch = false;
                        return;
                    }
                    else
                    {
                        _serialMatch = false;
                    }
                }
            }

            if (chkGiftVoucher.Checked)
            {
                var _isExistGv = _invoiceItemList.Where(x => IsGiftVoucher(x.Sad_itm_tp)).Count();
                if (_isExistGv <= 0)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("You can't process without gift vouchers", "Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                string _notMapped = string.Empty;
                foreach (DataGridViewRow _row in gvGiftVoucher.Rows)
                {
                    var _isPromotion = _invoiceItemList.Where(x => x.Sad_itm_line == Convert.ToInt32(_row.Cells["gf_baseItemLine"].Value) && !string.IsNullOrEmpty(x.Sad_promo_cd)).Select(x => x.Sad_promo_cd).Count();
                    if (_isPromotion <= 0)
                    {
                        string _mappedItem = Convert.ToString(_row.Cells[7].EditedFormattedValue);
                        string _gvNo = Convert.ToString(_row.Cells["gf_serial1"].EditedFormattedValue);
                        if (string.IsNullOrEmpty(_mappedItem)) if (string.IsNullOrEmpty(_notMapped)) _notMapped = _gvNo; else _notMapped += ", " + _gvNo;
                    }
                }
                if (!string.IsNullOrEmpty(_notMapped))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please attach the issuing item to the gift voucher for the following gift voucher(s). " + _notMapped + ".", "Attach Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    tabControl1.SelectedTab = tabPage3;
                    return;
                }
            }
            List<InvoiceVoucher> _giftVoucher = null;
            List<ReptPickSerials> _gvLst = ScanSerialList.Where(x => IsGiftVoucher(x.ItemType)).ToList();
            if (_gvLst != null)
                if (_gvLst.Count > 0)
                {
                    _giftVoucher = new List<InvoiceVoucher>();
                    foreach (ReptPickSerials _one in _gvLst)
                    {
                        string _attachedItem = string.Empty;
                        if (gf_assignItem.Visible)
                        {
                            _attachedItem = (from DataGridViewRow _row in gvGiftVoucher.Rows where Convert.ToString(_row.Cells["gf_serial1"].Value) == _one.Tus_ser_1 && Convert.ToString(_row.Cells["gf_serial2"].Value) == _one.Tus_ser_2 && Convert.ToString(_row.Cells["gf_item"].Value) == _one.Tus_itm_cd select Convert.ToString(_row.Cells[7].Value)).ToList()[0];
                            if (string.IsNullOrEmpty(_attachedItem))
                                _attachedItem = _invoiceItemList.Where(y => y.Sad_job_line == (_invoiceItemList.Where(x => x.Sad_itm_line == _one.Tus_base_itm_line).ToList()[0].Sad_job_line) && y.Sad_itm_tp == "M").Select(y => y.Sad_itm_cd).Distinct().ToList()[0];
                        }
                        else
                            _attachedItem = _invoiceItemList.Where(y => y.Sad_job_line == (_invoiceItemList.Where(x => x.Sad_itm_line == _one.Tus_base_itm_line).ToList()[0].Sad_job_line) && y.Sad_itm_tp == "M").Select(y => y.Sad_itm_cd).Distinct().ToList()[0];
                        InvoiceVoucher _gift = new InvoiceVoucher();
                        _gift.Stvo_bookno = Convert.ToInt32(_one.Tus_ser_2);
                        _gift.Stvo_cre_by = BaseCls.GlbUserID;
                        _gift.Stvo_cre_when = DateTime.Now;
                        _gift.Stvo_gv_itm = _one.Tus_itm_cd;
                        _gift.Stvo_inv_no = string.Empty;
                        _gift.Stvo_itm_cd = _attachedItem;
                        _gift.Stvo_pageno = Convert.ToInt32(_one.Tus_ser_1);
                        _gift.Stvo_prefix = _one.Tus_ser_3;
                        _gift.Stvo_price = _one.Tus_unit_price;
                        _giftVoucher.Add(_gift);
                        ScanSerialList.Remove(_one);
                    }
                }
            bool _isHoldInvoiceProcess = false;
            InvoiceHeader _hdr = new InvoiceHeader();
            if (!string.IsNullOrEmpty(txtInvoiceNo.Text.Trim()))
            {
                _hdr = CHNLSVC.Sales.GetInvoiceHeaderDetails(txtInvoiceNo.Text.Trim());
                if (_hdr != null)
                    if (_hdr.Sah_stus != "H")
                    {
                        this.Cursor = Cursors.Default;
                        MessageBox.Show("You can not edit already saved invoice", "Invoice Re-call", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return;
                    }
            }
            if (_hdr != null && _hdr.Sah_stus == "H") _isHoldInvoiceProcess = true;
            if (_isHoldInvoiceProcess && chkDeliverLater.Checked == false)
            {
                this.Cursor = Cursors.Default;
                MessageBox.Show("You can not use 'Deliver Now!' option for hold invoice", "Invoice Hold", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            #endregion Deliver Now! - Check for serialied item qty with it's scan serial count

            string _value = string.Empty;
            string paytp = "";
            if (gvRePayment.Rows.Count > 0)
            {
                foreach (DataGridViewRow _r in gvRePayment.Rows)
                {
                    _value = Convert.ToString(_r.Cells["repy_collectamt"].Value);
                    decimal amount = Convert.ToDecimal(_r.Cells["repy_settleamt"].Value);
                    paytp = _r.Cells["repy_paymenttype"].Value.ToString();
                    int _lineno = Convert.ToInt32(_r.Cells["repy_lineno"].Value);
                    if (string.IsNullOrEmpty(_value)) { pnlRePay.Visible = true; continue; }
                    if (!IsNumeric(_value))
                    { this.Cursor = Cursors.Default; MessageBox.Show("Please select the valid amount!", "Re-Payment", MessageBoxButtons.OK, MessageBoxIcon.Information); _value = string.Empty; pnlRePay.Visible = true; break; }
                    if (paytp == "CRNOTE" && Convert.ToDecimal(_value) > amount)
                    { MessageBox.Show("You can not exceed credit note value", "Re-Settle", MessageBoxButtons.OK, MessageBoxIcon.Warning); return; }
                    _gridTotal += Convert.ToDecimal(_value);
                }

                if (_gridTotal == 0) { pnlRePay.Visible = true; return; }
                if (_gridTotal > 0 && _toBePayNewAmount > 0)
                {
                    if (Math.Round(_gridTotal, 2) < Math.Round(_toBePayNewAmount, 2))
                    {
                        this.Cursor = Cursors.Default;
                        if (paytp != "CRNOTE")
                        { MessageBox.Show("Still need to pay - " + FormatToCurrency(Convert.ToString(Math.Round(_toBePayNewAmount, 2) - Math.Round(_gridTotal, 2))), "Re-Payment", MessageBoxButtons.OK, MessageBoxIcon.Information); pnlRePay.Visible = true; return; }
                        else
                        { MessageBox.Show("Still need to pay - " + FormatToCurrency(Convert.ToString(Math.Round(_toBePayNewAmount, 2) - Math.Round(_gridTotal, 2))) + "\n Please add payments to settle full amount.", "Re-Payment", MessageBoxButtons.OK, MessageBoxIcon.Information); pnlRePay.Visible = true; return; }
                    }
                    foreach (DataGridViewRow _r in gvRePayment.Rows)
                    { _value = Convert.ToString(_r.Cells["repy_collectamt"].Value); int _lineno = Convert.ToInt32(_r.Cells["repy_lineno"].Value); _recieptItem.Where(x => x.Sard_line_no == Convert.ToInt32(_lineno)).ToList().ForEach(x => x.Sard_settle_amt = Convert.ToDecimal(_value)); }
                    if (Math.Round(_gridTotal, 2) > Math.Round(_toBePayNewAmount, 2)) { this.Cursor = Cursors.Default; MessageBox.Show("To be paid amount exceed the current payment", "Re-Payment", MessageBoxButtons.OK, MessageBoxIcon.Information); pnlRePay.Visible = true; _value = string.Empty; return; }
                    if (Math.Round(_gridTotal, 2) == Math.Round(_toBePayNewAmount, 2))
                    {
                        _invoiceItemList = _invoiceItemListWithDiscount;
                        string _invoicePrefix = CHNLSVC.Sales.GetInvoicePrefix(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "CS");
                        if (string.IsNullOrEmpty(_invoicePrefix))
                        { this.Cursor = Cursors.Default; MessageBox.Show("Selected invoice no does not having a invoice prefix to generate invoice no. Please contact accounts dept.", "Re-Payment", MessageBoxButtons.OK, MessageBoxIcon.Information); return; }
                        InvoiceHeader _invheader = new InvoiceHeader();
                        RecieptHeader _recHeader = new RecieptHeader();
                        InventoryHeader invHdr = new InventoryHeader();
                        MasterBusinessEntity _entity = new MasterBusinessEntity();
                        InventoryHeader _buybackheader = new InventoryHeader();
                        MasterAutoNumber _buybackAuto = new MasterAutoNumber();
                        bool _isCustomerHasCompany = false;
                        string _customerCompany = string.Empty;
                        string _customerLocation = string.Empty;
                        _entity = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, string.Empty, string.Empty, "C");
                        if (_entity != null)
                            if (_entity.Mbe_cd != null)
                                if (!string.IsNullOrEmpty(_entity.Mbe_cust_com) && !string.IsNullOrEmpty(_entity.Mbe_cust_loc))
                                { _isCustomerHasCompany = true; _customerCompany = _entity.Mbe_cust_com; _customerLocation = _entity.Mbe_cust_loc; }
                        invHdr.Ith_loc = BaseCls.GlbUserDefLoca;
                        invHdr.Ith_com = BaseCls.GlbUserComCode;
                        invHdr.Ith_doc_tp = "DO";
                        invHdr.Ith_doc_date = Convert.ToDateTime(txtDate.Text).Date;
                        invHdr.Ith_doc_year = Convert.ToDateTime(txtDate.Text).Year;
                        invHdr.Ith_cate_tp = "CS";
                        invHdr.Ith_sub_tp = "DPS";
                        invHdr.Ith_bus_entity = txtCustomer.Text.Trim();
                        invHdr.Ith_del_add1 = txtDelAddress1.Text.Trim();
                        invHdr.Ith_del_add1 = txtDelAddress2.Text.Trim();
                        invHdr.Ith_is_manual = false;
                        invHdr.Ith_stus = "A";
                        invHdr.Ith_cre_by = BaseCls.GlbUserID;
                        invHdr.Ith_mod_by = BaseCls.GlbUserID;
                        invHdr.Ith_direct = false;
                        invHdr.Ith_session_id = BaseCls.GlbUserSessionID;
                        invHdr.Ith_manual_ref = "";   // txtManualRefNo.Text;
                        invHdr.Ith_vehi_no = string.Empty;
                        invHdr.Ith_remarks = string.Empty;
                        MasterAutoNumber _masterAutoDo = new MasterAutoNumber();
                        _masterAutoDo.Aut_cate_cd = BaseCls.GlbUserDefLoca;
                        _masterAutoDo.Aut_cate_tp = "LOC";
                        _masterAutoDo.Aut_direction = 0;
                        _masterAutoDo.Aut_moduleid = "DO";
                        _masterAutoDo.Aut_start_char = "DO";
                        _masterAutoDo.Aut_year = Convert.ToDateTime(txtDate.Text).Year;
                        _invheader.Sah_com = BaseCls.GlbUserComCode;
                        _invheader.Sah_cre_by = BaseCls.GlbUserID;
                        _invheader.Sah_cre_when = DateTime.Now;
                        _invheader.Sah_currency = "LKR";//Currency.Text;
                        ////     _invheader.Sah_cus_add1 = txtAddress1.Text.Trim();
                        ////    _invheader.Sah_cus_add2 = txtAddress2.Text.Trim();
                        _invheader.Sah_cus_cd = txtCustomer.Text.Trim();
                        _invheader.Sah_cus_name = txtCusName.Text.Trim();
                        _invheader.Sah_d_cust_add1 = txtDelAddress1.Text.Trim();
                        _invheader.Sah_d_cust_add2 = txtDelAddress2.Text.Trim();
                        _invheader.Sah_d_cust_cd = txtDelCustomer.Text.Trim();
                        _invheader.Sah_d_cust_name = txtDelName.Text.Trim();
                        _invheader.Sah_direct = true;
                        _invheader.Sah_dt = Convert.ToDateTime(txtDate.Text);
                        _invheader.Sah_epf_rt = 0;
                        _invheader.Sah_esd_rt = 0;
                        _invheader.Sah_ex_rt = 1;
                        _invheader.Sah_inv_no = string.Empty;
                        _invheader.Sah_inv_sub_tp = "SA";
                        _invheader.Sah_inv_tp = "CS";
                        _invheader.Sah_is_acc_upload = false;
                        _invheader.Sah_man_cd = "";
                        _invheader.Sah_man_ref = "";  //// txtManualRefNo.Text;
                        _invheader.Sah_manual = false;
                        _invheader.Sah_mod_by = BaseCls.GlbUserID;
                        _invheader.Sah_mod_when = DateTime.Now;
                        _invheader.Sah_pc = BaseCls.GlbUserDefProf;
                        _invheader.Sah_pdi_req = 0;
                        _invheader.Sah_ref_doc = ""; //// txtDocRefNo.Text;
                        _invheader.Sah_remarks = "";
                        _invheader.Sah_sales_chn_cd = "";
                        _invheader.Sah_sales_chn_man = "";
                        _invheader.Sah_sales_ex_cd = txtExecutive.Text.Trim();
                        _invheader.Sah_sales_region_cd = "";
                        _invheader.Sah_sales_region_man = "";
                        _invheader.Sah_sales_sbu_cd = "";
                        _invheader.Sah_sales_sbu_man = "";
                        _invheader.Sah_sales_str_cd = "";
                        _invheader.Sah_sales_zone_cd = "";
                        _invheader.Sah_sales_zone_man = "";
                        _invheader.Sah_seq_no = 1;
                        _invheader.Sah_session_id = BaseCls.GlbUserSessionID;
                        ////      _invheader.Sah_structure_seq = txtQuotation.Text.Trim();
                        _invheader.Sah_stus = "A";
                        //if ((chkDeliverLater.Checked == false || chkDeliverNow.Checked) && !_processMinusBalance) _invheader.Sah_stus = "D";
                        _invheader.Sah_town_cd = "";
                        _invheader.Sah_tp = "INV";
                        _invheader.Sah_wht_rt = 0;
                        _invheader.Sah_direct = true;
                        _invheader.Sah_tax_inv = chkTaxPayable.Checked ? true : false;
                        _invheader.Sah_anal_11 = chkDeliverLater.Checked ? 0 : 1;
                        _invheader.Sah_del_loc = chkDeliverLater.Checked == false ? BaseCls.GlbUserDefLoca : !string.IsNullOrEmpty(txtDelLocation.Text) ? txtDelLocation.Text : string.Empty;
                        _invheader.Sah_grn_com = _customerCompany;
                        _invheader.Sah_grn_loc = _customerLocation;
                        _invheader.Sah_is_grn = _isCustomerHasCompany;
                        _invheader.Sah_grup_cd = string.IsNullOrEmpty(txtGroup.Text.Trim()) ? string.Empty : txtGroup.Text.Trim();
                        _invheader.Sah_is_svat = lblSVatStatus.Text == "Available" ? true : false;
                        _invheader.Sah_tax_exempted = lblVatExemptStatus.Text == "Available" ? true : false;
                        ////      _invheader.Sah_anal_4 = txtPoNo.Text.Trim();
                        _invheader.Sah_anal_6 = txtLoyalty.Text.Trim();
                        _invheader.Sah_remarks = txtRemarks.Text.Trim();
                        _invheader.Sah_man_cd = _MasterProfitCenter.Mpc_man;
                        _invheader.Sah_is_dayend = 0;
                        _invheader.Sah_remarks = txtRemarks.Text.Trim();

                        _invheader.Sah_anal_1 = Promoter;
                        ////      _invheader.Sah_anal_1 = txtPromotor.Text;
                        //if (string.IsNullOrEmpty(Convert.ToString(cmbTechnician.SelectedValue))) _invheader.Sah_anal_1 = string.Empty;
                        //else _invheader.Sah_anal_1 = Convert.ToString(cmbTechnician.SelectedValue);

                        if (_isHoldInvoiceProcess) _invheader.Sah_seq_no = Convert.ToInt32(txtInvoiceNo.Text.Trim());
                        _recHeader.Sar_acc_no = "";
                        _recHeader.Sar_act = true;
                        _recHeader.Sar_com_cd = BaseCls.GlbUserComCode;
                        _recHeader.Sar_comm_amt = 0;
                        _recHeader.Sar_create_by = BaseCls.GlbUserID;
                        _recHeader.Sar_create_when = DateTime.Now;
                        _recHeader.Sar_currency_cd = "LKR";
                        ////_recHeader.Sar_debtor_add_1 = txtAddress1.Text;
                        ////_recHeader.Sar_debtor_add_2 = txtAddress2.Text;
                        _recHeader.Sar_debtor_cd = txtCustomer.Text;
                        _recHeader.Sar_debtor_name = txtCusName.Text;
                        _recHeader.Sar_direct = true;
                        _recHeader.Sar_direct_deposit_bank_cd = "";
                        _recHeader.Sar_direct_deposit_branch = "";
                        _recHeader.Sar_epf_rate = 0;
                        _recHeader.Sar_esd_rate = 0;
                        _recHeader.Sar_is_mgr_iss = false;
                        _recHeader.Sar_is_oth_shop = false;
                        _recHeader.Sar_is_used = false;
                        _recHeader.Sar_manual_ref_no = "";   // txtManualRefNo.Text;
                        _recHeader.Sar_mob_no = txtMobile.Text;
                        _recHeader.Sar_mod_by = BaseCls.GlbUserID;
                        _recHeader.Sar_mod_when = DateTime.Now;
                        _recHeader.Sar_nic_no = txtNIC.Text;
                        _recHeader.Sar_oth_sr = "";
                        _recHeader.Sar_prefix = "";
                        _recHeader.Sar_profit_center_cd = BaseCls.GlbUserDefProf;
                        _recHeader.Sar_receipt_date = Convert.ToDateTime(txtDate.Text);
                        _recHeader.Sar_receipt_no = "na";
                        _recHeader.Sar_receipt_type = "DIR";
                        _recHeader.Sar_ref_doc = "";
                        _recHeader.Sar_remarks = "";
                        _recHeader.Sar_seq_no = 1;
                        _recHeader.Sar_ser_job_no = "";
                        _recHeader.Sar_session_id = BaseCls.GlbUserSessionID;
                        _recHeader.Sar_tel_no = txtMobile.Text;
                        _recHeader.Sar_tot_settle_amt = 0;
                        _recHeader.Sar_uploaded_to_finance = false;
                        _recHeader.Sar_used_amt = 0;
                        _recHeader.Sar_wht_rate = 0;
                        MasterAutoNumber _invoiceAuto = new MasterAutoNumber();
                        _invoiceAuto.Aut_cate_cd = BaseCls.GlbUserDefProf;
                        _invoiceAuto.Aut_cate_tp = "PRO";
                        _invoiceAuto.Aut_direction = 1;
                        _invoiceAuto.Aut_modify_dt = null;
                        _invoiceAuto.Aut_moduleid = "CS";
                        _invoiceAuto.Aut_number = 0;
                        _invoiceAuto.Aut_start_char = _invoicePrefix;
                        _invoiceAuto.Aut_year = Convert.ToDateTime(txtDate.Text).Year;
                        MasterAutoNumber _receiptAuto = new MasterAutoNumber();
                        _receiptAuto.Aut_cate_cd = BaseCls.GlbUserDefProf;
                        _receiptAuto.Aut_cate_tp = "PRO";
                        _receiptAuto.Aut_direction = 1;
                        _receiptAuto.Aut_modify_dt = null;
                        _receiptAuto.Aut_moduleid = "RECEIPT";
                        _receiptAuto.Aut_number = 0;
                        _receiptAuto.Aut_start_char = "DIR";
                        _receiptAuto.Aut_year = Convert.ToDateTime(txtDate.Text).Year;
                        DataTable dt_location = CHNLSVC.Inventory.Get_location_by_code(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca);
                        foreach (DataRow r in dt_location.Rows)
                        { _buybackheader.Ith_sbu = (string)r["ML_OPE_CD"]; if (System.DBNull.Value != r["ML_CATE_2"]) { _buybackheader.Ith_channel = (string)r["ML_CATE_2"]; } else { _buybackheader.Ith_channel = string.Empty; } }
                        _buybackheader.Ith_acc_no = "BB_ADJ";
                        _buybackheader.Ith_anal_1 = "";
                        _buybackheader.Ith_anal_2 = "";
                        _buybackheader.Ith_anal_3 = "";
                        _buybackheader.Ith_anal_4 = "";
                        _buybackheader.Ith_anal_5 = "";
                        _buybackheader.Ith_anal_6 = 0;
                        _buybackheader.Ith_anal_7 = 0;
                        _buybackheader.Ith_anal_8 = DateTime.MinValue;
                        _buybackheader.Ith_anal_9 = DateTime.MinValue;
                        _buybackheader.Ith_anal_10 = false;
                        _buybackheader.Ith_anal_11 = false;
                        _buybackheader.Ith_anal_12 = false;
                        _buybackheader.Ith_bus_entity = "";
                        _buybackheader.Ith_cate_tp = "NOR";
                        _buybackheader.Ith_com = BaseCls.GlbUserComCode;
                        _buybackheader.Ith_com_docno = "";
                        _buybackheader.Ith_cre_by = BaseCls.GlbUserID;
                        _buybackheader.Ith_cre_when = DateTime.Now;
                        _buybackheader.Ith_del_add1 = "";
                        _buybackheader.Ith_del_add2 = "";
                        _buybackheader.Ith_del_code = "";
                        _buybackheader.Ith_del_party = "";
                        _buybackheader.Ith_del_town = "";
                        _buybackheader.Ith_direct = true;
                        _buybackheader.Ith_doc_date = txtDate.Value.Date;
                        _buybackheader.Ith_doc_no = string.Empty;
                        _buybackheader.Ith_doc_tp = "ADJ";
                        _buybackheader.Ith_doc_year = txtDate.Value.Date.Year;
                        _buybackheader.Ith_entry_no = string.Empty;
                        _buybackheader.Ith_entry_tp = "NOR";
                        _buybackheader.Ith_git_close = true;
                        _buybackheader.Ith_git_close_date = DateTime.MinValue;
                        _buybackheader.Ith_git_close_doc = string.Empty;
                        _buybackheader.Ith_isprinted = false;
                        _buybackheader.Ith_is_manual = false;
                        _buybackheader.Ith_job_no = string.Empty;
                        _buybackheader.Ith_loading_point = string.Empty;
                        _buybackheader.Ith_loading_user = string.Empty;
                        _buybackheader.Ith_loc = BaseCls.GlbUserDefLoca;
                        _buybackheader.Ith_manual_ref = string.Empty;
                        _buybackheader.Ith_mod_by = BaseCls.GlbUserID;
                        _buybackheader.Ith_mod_when = DateTime.Now;
                        _buybackheader.Ith_noofcopies = 0;
                        _buybackheader.Ith_oth_loc = string.Empty;
                        _buybackheader.Ith_oth_docno = "N/A";
                        _buybackheader.Ith_remarks = string.Empty;
                        _buybackheader.Ith_session_id = BaseCls.GlbUserSessionID;
                        _buybackheader.Ith_stus = "A";
                        _buybackheader.Ith_sub_tp = "NOR";
                        _buybackheader.Ith_vehi_no = string.Empty;
                        _buybackAuto.Aut_cate_cd = BaseCls.GlbUserDefLoca;
                        _buybackAuto.Aut_cate_tp = "LOC";
                        _buybackAuto.Aut_direction = null;
                        _buybackAuto.Aut_modify_dt = null;
                        _buybackAuto.Aut_moduleid = "ADJ";
                        _buybackAuto.Aut_number = 5;
                        _buybackAuto.Aut_start_char = "ADJ";
                        _buybackAuto.Aut_year = null;
                        CollectBusinessEntity();
                        string _invoiceNo = "";
                        string _receiptNo = "";
                        string _deliveryOrderNo = "";
                        int effect = 0;
                        string _error = string.Empty;
                        string _buybackadj = string.Empty;
                        _invoiceItemList.ForEach(X => X.Sad_isapp = true);
                        _invoiceItemList.ForEach(X => X.Sad_iscovernote = true);
                        try
                        {
                            btnRePayConfirm.Enabled = false;
                            _invoiceItemList.ForEach(x => x.Sad_srn_qty = 0);
                            List<RecieptItem> _registrationReciept = new List<RecieptItem>();
                            _registrationReciept = ucPayModes2.RecieptItemList;
                            List<VehicalRegistration> _registrationList = new List<VehicalRegistration>();
                            //2013/12/10
                            //ADDED REGISTRATION PROCESS

                            if (_isNeedRegistrationReciept)
                            {
                                //reciept auto number
                                MasterAutoNumber masterAutoRecTp = new MasterAutoNumber();
                                masterAutoRecTp.Aut_cate_cd = BaseCls.GlbUserDefProf;
                                masterAutoRecTp.Aut_cate_tp = "PC";
                                masterAutoRecTp.Aut_direction = null;
                                masterAutoRecTp.Aut_modify_dt = null;
                                masterAutoRecTp.Aut_moduleid = "RECEIPT";
                                masterAutoRecTp.Aut_number = 5;//what is Aut_number
                                masterAutoRecTp.Aut_start_char = "VHREG";
                                masterAutoRecTp.Aut_year = null;

                                RecieptHeader _ReceiptHeader = new RecieptHeader();
                                _ReceiptHeader.Sar_seq_no = -1; //CHNLSVC.Inventory.Generate_new_seq_num(GlbUserName, "RECEIPT", 1, BaseCls.GlbUserComCode);
                                _ReceiptHeader.Sar_com_cd = BaseCls.GlbUserComCode;
                                _ReceiptHeader.Sar_receipt_type = "VHREG";
                                // _ReceiptHeader.Sar_receipt_no = txtRecNo.Text.Trim();

                                MasterReceiptDivision _RecDiv = new MasterReceiptDivision();
                                _RecDiv = CHNLSVC.Sales.GetDefRecDivision(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf);
                                if (_RecDiv.Msrd_cd != null)
                                {
                                    _ReceiptHeader.Sar_prefix = _RecDiv.Msrd_cd;
                                }
                                else
                                {
                                    _ReceiptHeader.Sar_prefix = "";
                                }
                                //_ReceiptHeader.Sar_prefix = txtDivision.Text.Trim();
                                // _ReceiptHeader.Sar_manual_ref_no = txtManual.Text.Trim();
                                _ReceiptHeader.Sar_receipt_date = Convert.ToDateTime(txtDate.Value).Date;
                                _ReceiptHeader.Sar_direct = true;
                                _ReceiptHeader.Sar_acc_no = "";
                                _ReceiptHeader.Sar_is_oth_shop = false;
                                _ReceiptHeader.Sar_oth_sr = "";
                                _ReceiptHeader.Sar_profit_center_cd = BaseCls.GlbUserDefProf;
                                _ReceiptHeader.Sar_debtor_cd = txtCustomer.Text.Trim();
                                _ReceiptHeader.Sar_debtor_name = txtCusName.Text.Trim();
                                ////      _ReceiptHeader.Sar_debtor_add_1 = txtAddress1.Text.Trim();
                                ////     _ReceiptHeader.Sar_debtor_add_2 = txtAddress2.Text.Trim();
                                _ReceiptHeader.Sar_tel_no = "";
                                _ReceiptHeader.Sar_mob_no = txtMobile.Text.Trim();
                                _ReceiptHeader.Sar_nic_no = txtNIC.Text.Trim();
                                _ReceiptHeader.Sar_tot_settle_amt = ucPayModes2.RecieptItemList.Sum(x => x.Sard_settle_amt);
                                _ReceiptHeader.Sar_comm_amt = 0;
                                _ReceiptHeader.Sar_is_mgr_iss = false;
                                _ReceiptHeader.Sar_esd_rate = 0;
                                _ReceiptHeader.Sar_wht_rate = 0;
                                _ReceiptHeader.Sar_epf_rate = 0;
                                _ReceiptHeader.Sar_currency_cd = "LKR";
                                _ReceiptHeader.Sar_uploaded_to_finance = false;
                                _ReceiptHeader.Sar_act = true;
                                _ReceiptHeader.Sar_direct_deposit_bank_cd = "";
                                _ReceiptHeader.Sar_direct_deposit_branch = "";
                                // _ReceiptHeader.Sar_remarks = txtNote.Text.Trim();
                                _ReceiptHeader.Sar_is_used = false;
                                _ReceiptHeader.Sar_ref_doc = "";
                                _ReceiptHeader.Sar_ser_job_no = "";
                                _ReceiptHeader.Sar_used_amt = 0;
                                _ReceiptHeader.Sar_create_by = BaseCls.GlbUserID;
                                _ReceiptHeader.Sar_mod_by = BaseCls.GlbUserID;
                                _ReceiptHeader.Sar_session_id = BaseCls.GlbUserSessionID;
                                _ReceiptHeader.Sar_anal_1 = cmbDistrict.Text;
                                _ReceiptHeader.Sar_anal_2 = txtProvince.Text.Trim();
                                if (string.IsNullOrEmpty(_businessEntity.Mbe_distric_cd))
                                    _businessEntity.Mbe_distric_cd = cmbDistrict.Text;
                                if (string.IsNullOrEmpty(_businessEntity.Mbe_province_cd))
                                    _businessEntity.Mbe_province_cd = txtProvince.Text;

                                if (cmbDistrict.SelectedValue != null)
                                    _masterBusinessCompany.Mbe_distric_cd = cmbDistrict.SelectedValue.ToString();
                                _masterBusinessCompany.Mbe_province_cd = txtProvince.Text;

                                ReptPickHeader _SerHeader = new ReptPickHeader();
                                _SerHeader.Tuh_usrseq_no = -1;
                                _SerHeader.Tuh_usr_id = BaseCls.GlbUserID;
                                _SerHeader.Tuh_usr_com = BaseCls.GlbUserComCode;
                                _SerHeader.Tuh_session_id = BaseCls.GlbUserSessionID;
                                _SerHeader.Tuh_cre_dt = Convert.ToDateTime(txtDate.Value).Date;
                                _SerHeader.Tuh_doc_tp = "INV";
                                _SerHeader.Tuh_direct = false;
                                _SerHeader.Tuh_ischek_itmstus = true;
                                _SerHeader.Tuh_ischek_simitm = true;
                                _SerHeader.Tuh_ischek_reqqty = true;
                                _SerHeader.Tuh_doc_no = null;

                                // vehical regitration list
                                ////foreach (RegistrationList _reg in _List)
                                ////{
                                ////    //get serials
                                ////    List<ReptPickSerials> _serList = (from res in ScanSerialList
                                ////                                      where res.Tus_itm_cd == _reg.Item && res.Tus_itm_stus == _reg.Stus
                                ////                                      select res).ToList<ReptPickSerials>();
                                ////    foreach (ReptPickSerials _serial in _serList)
                                ////    {
                                ////        VehicalRegistration _tem = AssingRegDetails(_reg.Item, _reg.Item_reg, _reg.Item_claim, _serial.Tus_ser_1, _serial.Tus_ser_2);
                                ////        _registrationList.Add(_tem);
                                ////    }
                                ////}
                                //save invoice with registration
                                string _registration;
                                effect = CHNLSVC.Sales.SaveInvoiceDuplicateWithTransactionRegistration(_invheader, _invoiceItemList, InvoiceSerialList, _recHeader, _recieptItem, invHdr, ScanSerialList, null, _invoiceAuto, _receiptAuto, _masterAutoDo, (chkDeliverLater.Checked == false || chkDeliverNow.Checked) ? true : false, out _invoiceNo, out _receiptNo, out _deliveryOrderNo, _businessEntity, false, _isHoldInvoiceProcess, out _error, _giftVoucher, _buybackheader, _buybackAuto, BuyBackItemList, out _buybackadj, _ReceiptHeader, masterAutoRecTp, _registrationList, _registrationReciept, _SerHeader, out _registration, ref IsInvoiceCompleted);

                                //if (effect == -1) {
                                //    MessageBox.Show("Error occured while processing !!\n" + _error, "Error");
                                //    return;

                                //}
                            }
                            //END
                            else
                            {
                                //ADDED 2014/02/26
                                bool _sucess = CheckGeneralDiscount();
                                if (_sucess == false)
                                {
                                    return;
                                }
                                //
                                foreach (InvoiceItem _itm01 in _invoiceItemList)    //kapila 26/4/2016
                                {
                                    decimal _doQty = 0;
                                    List<ReptPickSerials> _temp = ScanSerialList.Where(x => x.Tus_base_itm_line == _itm01.Sad_itm_line).ToList<ReptPickSerials>();
                                    _doQty = _temp.Sum(p => p.Tus_qty);
                                    if (_itm01.Sad_qty != _doQty)
                                    {
                                        this.Cursor = Cursors.Default;
                                        MessageBox.Show("Error: Item Qty not match with DO Qty. Contact IT Dept.", "Invoice", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                        return;
                                    }
                                }
                                effect = CHNLSVC.Sales.SaveInvoiceDuplicateWithTransaction01(_invheader, _invoiceItemList, InvoiceSerialList, _recHeader, _recieptItem, invHdr, ScanSerialList, null, _invoiceAuto, _receiptAuto, _masterAutoDo, chkDeliverLater.Checked == false ? true : false, out _invoiceNo, out _receiptNo, out _deliveryOrderNo, _businessEntity, false, _isHoldInvoiceProcess, out _error, null, _buybackheader, _buybackAuto, BuyBackItemList, out _buybackadj, ref IsInvoiceCompleted);
                            }
                        }
                        catch (Exception ex)
                        {
                            this.Cursor = Cursors.Default;
                            MessageBox.Show(ex.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            CHNLSVC.CloseChannel();
                            btnRePayConfirm.Enabled = true;
                            return;
                        }
                        finally
                        {
                            string Msg = string.Empty;
                            btnRePayConfirm.Enabled = true;
                            this.Cursor = Cursors.Default;

                            if (effect != -1)
                            {
                                if (chkDeliverLater.Checked == false) Msg = "Successfully Saved! Document No : " + _invoiceNo + " with Delivery Order :" + _deliveryOrderNo + ". ";
                                else Msg = "Successfully Saved! Document No : " + _invoiceNo + ". ";
                                ////if (cmbInvType.Text.Trim() == "CS")
                                ////{
                                var _isCashPaymentExsit = _recieptItem.Where(x => x.Sard_pay_tp == "CASH").ToList();
                                if (_isCashPaymentExsit != null)
                                    if (_isCashPaymentExsit.Count > 0)
                                    {
                                        decimal _cashamt = _isCashPaymentExsit.Sum(x => x.Sard_settle_amt);
                                        string _customerGiven = PaymentBalanceConfirmation(Msg, _cashamt);
                                        if (!string.IsNullOrEmpty(_customerGiven))
                                        {
                                            string BalanceToGive = FormatToCurrency(Convert.ToString(Convert.ToDecimal(_customerGiven) - _cashamt));
                                            this.Cursor = Cursors.Default;
                                            MessageBox.Show("You have to give back as balance " + BalanceToGive + "\n in " + lblCurrency.Text + ".", "Balance To Customer", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        }
                                    }
                                ////}
                                ////else
                                ////{
                                ////    this.Cursor = Cursors.Default;
                                ////    MessageBox.Show(Msg, "Saved Documents", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                ////}
                                BaseCls.GlbReportName = string.Empty;
                                GlbReportName = string.Empty;
                                MasterBusinessEntity _itm = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, string.Empty, string.Empty, "C");
                                bool _isAskDO = false;
                                if (MasterChannel != null) if (MasterChannel.Rows.Count > 0) if (MasterChannel.Rows[0].Field<Int16>("msc_isprint_do") == 1) _isAskDO = true; else _isAskDO = false;
                                ////if (chkManualRef.Checked == false)
                                ////{
                                bool _isPrintElite = false;
                                if (!string.IsNullOrEmpty(_MasterProfitCenter.Mpc_chnl))
                                {
                                    if (_MasterProfitCenter.Mpc_chnl.Trim() == "ELITE")
                                    {
                                        ReportViewer _view = new ReportViewer();
                                        BaseCls.GlbReportName = string.Empty;
                                        GlbReportName = string.Empty;
                                        _view.GlbReportName = string.Empty;
                                        BaseCls.GlbReportTp = "INV";
                                        _view.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "InvoiceHalfPrints.rpt" : BaseCls.GlbUserComCode == "GCL" ? "InvoicePrints_Gold.rpt" : "InvoiceHalfPrints.rpt"; _view.GlbReportDoc = _invoiceNo; _view.Show(); _view = null; _isPrintElite = true;
                                    }
                                }
                                //AUTO_DEL
                                //get permission
                                bool _permission = CHNLSVC.Security.Is_OptionPerimitted(BaseCls.GlbUserComCode, BaseCls.GlbUserID, 11055);
                                if (!_permission)
                                {
                                    { if (_MasterProfitCenter.Mpc_chnl.Trim() == "AUTO_DEL") { ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; _view.GlbReportName = "DealerInvoicePrints.rpt"; BaseCls.GlbReportName = "DealerInvoicePrints.rpt"; _view.GlbReportDoc = _invoiceNo; BaseCls.GlbReportDoc = _invoiceNo; _view.Show(); _view = null; _isPrintElite = true; } }
                                }
                                if (_isPrintElite == false)
                                {
                                    if (_itm.Mbe_sub_tp != "C.")
                                    {
                                        //Showroom
                                        //========================= INVOCIE  CASH/CREDIT/ HIRE
                                        if (chkTaxPayable.Checked == false)
                                        {
                                            clsSalesRep obj = new clsSalesRep();
                                            BaseCls.GlbReportDoc = _invoiceNo;
                                            BaseCls.GlbReportIsCostPrmission = 0;

                                            obj.POSInvoiceDirectPrint();
                                        }
                                        else
                                        {
                                            //Add Code by Chamal 27/04/2013
                                            //====================  TAX INVOICE
                                            clsSalesRep obj = new clsSalesRep();
                                            BaseCls.GlbReportDoc = _invoiceNo;
                                            BaseCls.GlbReportIsCostPrmission = 0;

                                            obj.POSInvoiceDirectPrint();
                                            if (_recieptItem != null) if (_recieptItem.Count > 0) if (_itm.Mbe_cate == "LEASE")
                                                    {
                                                        ReportViewer _viewt = new ReportViewer();
                                                        BaseCls.GlbReportName = string.Empty;
                                                        GlbReportName = string.Empty;
                                                        _viewt.GlbReportName = string.Empty;
                                                        _viewt.GlbReportName = "InvoicePrintTax_insus.rpt";
                                                        _viewt.GlbReportDoc = _invoiceNo;
                                                        _viewt.Show();
                                                        _viewt = null;
                                                    }
                                            //====================  TAX INVOICE
                                        }
                                    }
                                    else
                                    {
                                        //Dealer
                                        ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; _view.GlbReportName = "InvoicePrints.rpt"; _view.GlbReportDoc = _invoiceNo; _view.Show(); _view = null;
                                        if (_recieptItem != null) if (_recieptItem.Count > 0) if (_itm.Mbe_cate == "LEASE") { ReportViewer _viewt = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; _viewt.GlbReportName = "InvoicePrint_insus.rpt"; _viewt.GlbReportDoc = _invoiceNo; _viewt.Show(); _viewt = null; }
                                    }
                                }
                                //Buyback Print
                                if (BuyBackItemList != null) if (BuyBackItemList.Count > 0) { Reports.Inventory.ReportViewerInventory _viewBB = new Reports.Inventory.ReportViewerInventory(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _viewBB.GlbReportName = string.Empty; BaseCls.GlbReportTp = "INWARD"; _viewBB.GlbReportName = BaseCls.GlbUserComCode.Contains("SGL") ? "Inward_Docs.rpt" : BaseCls.GlbDefChannel == "AUTO_DEL" ? "Dealer_Inward_Docs.rpt" : "Inward_Docs.rpt"; _viewBB.GlbReportDoc = _buybackadj; _viewBB.Show(); _viewBB = null; }
                                ////}

                                //=========================DO
                                ////if (chkDeliverLater.Checked == false)
                                ////{
                                ////    if (_isAskDO)
                                ////    { if (MessageBox.Show("Do you need to print delivery order now?", "Print", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes) { ReportViewerInventory _views = new ReportViewerInventory(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; BaseCls.GlbReportTp = "OUTWARD"; _views.GlbReportName = string.Empty; _views.GlbReportName = BaseCls.GlbUserComCode.Contains("SGL") ? "Outward_Docs.rpt" : BaseCls.GlbDefChannel == "AUTO_DEL" ? "Dealer_Outward_Docs.rpt" : "Outward_Docs.rpt"; _views.GlbReportDoc = _deliveryOrderNo; _views.Show(); _views = null; } }
                                ////    else { ReportViewerInventory _views = new ReportViewerInventory(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _views.GlbReportName = string.Empty; BaseCls.GlbReportTp = "OUTWARD"; _views.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "Outward_Docs.rpt" : BaseCls.GlbDefChannel == "AUTO_DEL" ? "Dealer_Outward_Docs.rpt" : "Outward_Docs.rpt"; _views.GlbReportDoc = _deliveryOrderNo; _views.Show(); _views = null; }
                                ////}
                                //btnClear_Click(null, null);
                                Clear();
                                pnlRePay.Visible = false;
                                //change chk value
                                if (_MasterProfitCenter.Mpc_is_do_now == 0)
                                {
                                    chkDeliverLater.Checked = false;
                                    chkDeliverNow.Checked = false;
                                    chkDeliverLater_CheckedChanged(null, null);
                                }
                                else if (_MasterProfitCenter.Mpc_is_do_now == 1)
                                {
                                    chkDeliverNow.Checked = true;
                                    chkDeliverLater.Checked = false;
                                    chkDeliverNow_CheckedChanged(null, null);
                                }
                                else
                                {
                                    chkDeliverLater.Checked = true;
                                    chkDeliverNow.Checked = false;
                                    chkDeliverLater_CheckedChanged(null, null);
                                }
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(_error))
                                { this.Cursor = Cursors.Default; MessageBox.Show("Generating Invoice is terminated due to following reason, " + _error, "Generated Error", MessageBoxButtons.OK, MessageBoxIcon.Hand); }
                                CHNLSVC.CloseChannel();
                            }
                        }
                    }
                }
            }
        }

        private void btnPGVS_Click(object sender, EventArgs e)
        {
            pnlCC.Visible = false;
            pnlCheque.Visible = false;
            pnlDebit.Visible = false;
            pnlOthers.Visible = false;
            pnlCash.Visible = false;
            pnlGiftVoucher.Visible = false;
            pnlGV.Visible = true;
            pnlLoyalty.Visible = false;
            pnlStar.Visible = false;


            lblSelPayTpDesc.Text = "GIFT VOUCHER-OTHER";
            lblSelPayTp.Text = "GVS";
            textBoxAmount.Text = lblbalanceAmo.Text;
        }

        private void txtDisAmt_Leave(object sender, EventArgs e)
        {

        }

        private void clear_CRCD()
        {
            textBoxCCBank.Text = "";
            textBoxCCCardNo.Text = "";
            textBoxCCDepBank.Text = "";
            textBoxCCDepBranch.Text = "";
            textBoxBatch.Text = "";

        }



        private void btnCloseExp_Click(object sender, EventArgs e)
        {
            pnlExpDt.Visible = false;
            txtExpDate.Text = "01-Jan-0001";
        }

        private void grvExpDt_CellContentDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            txtExpDate.Text = grvExpDt.Rows[e.RowIndex].Cells["inb_exp_dt"].Value.ToString();

            decimal _selectedQty = 0;
            decimal.TryParse(grvExpDt.Rows[e.RowIndex].Cells["inb_free_qty"].Value.ToString(), out  _selectedQty);

            decimal _currentQty = 0;
            decimal.TryParse(txtQty.Text, out _currentQty);

            if (_selectedQty < _currentQty)
            {
                txtQty.Text = FormatToQty(_selectedQty.ToString());
            }
            

            pnlExpDt.Visible = false;
            addItem();
        }

        private void btnCN_Click(object sender, EventArgs e)
        {
            pnlPay.Show();

            pnlBankSlip.Visible = false;
            pnlCC.Visible = false;
            pnlCheque.Visible = false;
            pnlDebit.Visible = false;
            pnlOthers.Visible = true;
            pnlCash.Visible = false;
            pnlGiftVoucher.Visible = false;
            pnlGV.Visible = false;
            pnlLoyalty.Visible = false;
            pnlStar.Visible = false;

            lblSelPayTpDesc.Text = "CREDIT NOTE";
            lblSelPayTp.Text = "CRNOTE";
            textBoxAmount.Text = lblbalanceAmo.Text;
        }

        private void textBoxAmount_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                btnEnter_Click(null, null);
        }

        private void btnQC1_Click(object sender, EventArgs e)
        {
            textBoxAmount.Text = FormatToCurrency(btnQC1.Text);
            btnEnter_Click(null, null);
        }

        private void btnQC2_Click(object sender, EventArgs e)
        {
            textBoxAmount.Text = FormatToCurrency(btnQC2.Text);
            btnEnter_Click(null, null);
        }

        private void btnQC3_Click(object sender, EventArgs e)
        {
            textBoxAmount.Text = FormatToCurrency(btnQC3.Text);
            btnEnter_Click(null, null);
        }

        private void btnQC4_Click(object sender, EventArgs e)
        {
            textBoxAmount.Text = FormatToCurrency(btnQC4.Text);
            btnEnter_Click(null, null);
        }

        private void btnQC5_Click(object sender, EventArgs e)
        {
            textBoxAmount.Text = FormatToCurrency(btnQC5.Text);
            btnEnter_Click(null, null);
        }

        private void btnPromoVoucher_Click(object sender, EventArgs e)
        {
            if (txtCusName.Enabled == true && txtCustomer.Text != "CASH" && string.IsNullOrEmpty(txtCustomer.Text))
            {
                MessageBox.Show("Please select the customer", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            if (!string.IsNullOrEmpty(lblPromoVouNo.Text))
            {
                MessageBox.Show("Voucher no already select!", "Voucher No", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            if (lblPromoVouUsedFlag.Text.Contains("U") == true)
            {
                MessageBox.Show("Voucher no already used!", "Voucher No", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (pnlPromoVouNo.Visible)
            {
                pnlPromoVouNo.Visible = false;

            }
            else
            {
                pnlPromoVouNo.Visible = true;

                txtPromoVouNo.Focus();
                txtPromoVouNo.Clear();
            }
        }

        private void txtPromoVouNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (!string.IsNullOrEmpty(txtPromoVouNo.Text))
                {
                    btnPromoVou.Focus();
                }
            }
        }

        private void btnPromoVou_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtPromoVouNo.Text))
            {
                int val;
                if (!int.TryParse(txtPromoVouNo.Text, out val))
                {
                    MessageBox.Show("Invalid Voucher No", "Voucher No", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtPromoVouNo.Clear();
                    txtPromoVouNo.Focus();
                    return;
                }

                string _vouMsg = string.Empty;

                //updated by akila 2018/01/25
                DataTable _gvDetails = new DataTable();
                _gvDetails = CHNLSVC.Sales.GetPromoVoucherNo(BaseCls.GlbUserComCode, txtCustomer.Text, txtNIC.Text, txtMobile.Text, txtDate.Value.Date, Convert.ToInt32(txtPromoVouNo.Text));
                if (_gvDetails.Rows.Count < 1)
                {
                    MessageBox.Show("Voucher details not found !", "Voucher No", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    gvgvo.DataSource = new DataTable();
                    gvgvo.Visible = false; 
                    txtPromoVouNo.Clear();
                    txtPromoVouNo.Focus();
                }
                else if (_gvDetails.Rows.Count == 1)
                {
                    gvgvo.DataSource = new DataTable();
                    gvgvo.Visible = false; 
                    lblPromoVouNo.Text = txtPromoVouNo.Text;
                    btnPromoVouClose_Click(null, null);
                }
                else if (_gvDetails.Rows.Count > 1)
                {
                    gvgvo.AutoGenerateColumns = false;
                    gvgvo.DataSource = _gvDetails;
                    gvgvo.Visible = true;   
                }

                //if (CHNLSVC.Sales.CheckPromoVoucherNo(BaseCls.GlbUserComCode, txtCustomer.Text, txtNIC.Text, txtMobile.Text, txtDate.Value.Date, Convert.ToInt32(txtPromoVouNo.Text), out _vouMsg) == false)
                //{
                //    MessageBox.Show(_vouMsg, "Voucher No", MessageBoxButtons.OK, MessageBoxIcon.Information);
                //    txtPromoVouNo.Clear();
                //    txtPromoVouNo.Focus();
                //}
                //else
                //{
                //    lblPromoVouNo.Text = txtPromoVouNo.Text;
                //    btnPromoVouClose_Click(null, null);
                //}
            }
            else
            {
                MessageBox.Show("Please enter the promotion voucher no", "Voucher No", MessageBoxButtons.OK, MessageBoxIcon.Information);
                txtPromoVouNo.Focus();
            }
        }

        private void btnPromoVouClose_Click(object sender, EventArgs e)
        {
            if (pnlPromoVouNo.Visible)
            {
                pnlPromoVouNo.Visible = false;
            }
            else
            {
                pnlPromoVouNo.Visible = true;
                txtPromoVouNo.Focus();
                txtPromoVouNo.Clear();
            }
        }

        private void btnSearch_Mobile_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _commonSearch = new CommonSearch.CommonSearch();
                _commonSearch.ReturnIndex = 0;
                _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.Mobile);
                DataTable _result = CHNLSVC.CommonSearch.GetCustomerGenaral(_commonSearch.SearchParams, null, null, CommonUIDefiniton.SearchUserControlCustomerType.MBE_MOB.ToString(), CommonUIDefiniton.ReturnCustomerSearchDisplay(CommonUIDefiniton.SearchUserControlCustomerType.MBE_MOB));
                _commonSearch.dvResult.DataSource = _result;
                _commonSearch.BindUCtrlDDLData(_result);
                _commonSearch.obj_TragetTextBox = txtMobile;
                _commonSearch.IsSearchEnter = true;
                this.Cursor = Cursors.Default;
                _commonSearch.ShowDialog();
                txtMobile.Select();
                if (_commonSearch.GlbSelectData == null) return;
                string[] args = _commonSearch.GlbSelectData.Split('|');
                string _cuscode = args[4];
                if (string.IsNullOrEmpty(txtCustomer.Text) || txtCustomer.Text.Trim() == "AST-CASH") txtCustomer.Text = _cuscode;
                else if (txtCustomer.Text.Trim() != _cuscode && txtCustomer.Text.Trim() != "AST-CASH")
                {
                    DialogResult _res = MessageBox.Show("Currently selected customer code " + txtCustomer.Text + " is differ which selected (" + _cuscode + ") from here. Do you need to change current customer code from selected customer", "Invoice", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (_res == System.Windows.Forms.DialogResult.Yes)
                    {
                        txtCustomer.Text = _cuscode;
                        txtCustomer.Focus();
                        txtCusName.Focus();
                    }
                }
            }
            catch (Exception ex)
            { txtExecutive.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnSearch_NIC_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _commonSearch = new CommonSearch.CommonSearch();
                _commonSearch.ReturnIndex = 0;
                _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.NIC);
                DataTable _result = CHNLSVC.CommonSearch.GetCustomerGenaral(_commonSearch.SearchParams, null, null, CommonUIDefiniton.SearchUserControlCustomerType.MBE_NIC.ToString(), CommonUIDefiniton.ReturnCustomerSearchDisplay(CommonUIDefiniton.SearchUserControlCustomerType.MBE_NIC));
                _commonSearch.dvResult.DataSource = _result;
                _commonSearch.BindUCtrlDDLData(_result);
                _commonSearch.obj_TragetTextBox = txtNIC;
                _commonSearch.IsSearchEnter = true;
                this.Cursor = Cursors.Default;
                _commonSearch.ShowDialog();
                txtNIC.Select();
            }
            catch (Exception ex)
            { txtNIC.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void txtNIC_KeyDown_1(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
                btnSearch_NIC_Click(null, null);
            if (e.KeyCode == Keys.Enter)
                txtMobile.Focus();
        }

        private void txtLoyalty_Leave(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtLoyalty.Text)) return;
            try
            {
                this.Cursor = Cursors.WaitCursor;
                //_commonSearch = new CommonSearch.CommonSearch();
                //_commonSearch.ReturnIndex = 0;
                //_commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.SearchLoyaltyCardNo);
                //DataTable _result = CHNLSVC.CommonSearch.SearchLoyaltyCardNo(_commonSearch.SearchParams, null, null);
                //if (_result != null) if (_result.Rows.Count > 0)
                //    {
                DataTable _results = CHNLSVC.Sales.GetLoyaltyMemberByCardNo(txtLoyalty.Text);
                if (_results.Rows.Count == 0)
                {
                    this.Cursor = Cursors.Default;
                    MessageBox.Show("Please check the loyalty card", "Invalid Card", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtLoyalty.BackColor = Color.SteelBlue;
                    txtLoyalty.Clear();
                    txtLoyalty.Focus();
                    return;
                }
                else
                {
                    string _tem = _results.Rows[0]["salcm_loty_tp"].ToString();
                    _loyaltyType = CHNLSVC.Sales.GetLoyaltyType(_tem);
                    if (_loyaltyType == null)
                    {
                        MessageBox.Show("Loyalty Card Type not found", "Invalid Card", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtLoyalty.BackColor = Color.SteelBlue;
                        txtLoyalty.Clear();
                    }
                    else
                    {
                        LoyaltyCard = _loyaltyType.Salt_loty_tp;
                        string _custCd = _results.AsEnumerable().Select(x => x.Field<string>("SALCM_CUS_CD")).ToList()[0];
                        txtCustomer.Text = _custCd;
                        txtLoyalty.BackColor = Color.Red;
                        LoadCustomerDetailsByCustomer(null, null);
                    }
                }
                //}
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnCustomer_Click(object sender, EventArgs e)
        {

        }

        private void btnViewDisc_Click(object sender, EventArgs e)
        {
            if (pnlViewDisc.Visible == true)
            {
                pnlViewDisc.Visible = false;
                btnViewDisc.Text = "View Discount";
            }
            else
            {
                view_Discount();
                pnlViewDisc.Visible = true;
                btnViewDisc.Text = "Close Discount";

            }
        }

        private void view_Discount()
        {
            InvoiceHeader _invheader = new InvoiceHeader();
            //   RecieptHeader _recHeader = new RecieptHeader();
            //  InventoryHeader invHdr = new InventoryHeader();

            bool _isCustomerHasCompany = false;
            string _customerCompany = string.Empty;
            string _customerLocation = string.Empty;
            //_entity = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, string.Empty, string.Empty, "C");
            //if (_entity != null)
            //    if (_entity.Mbe_cd != null)
            //        if (!string.IsNullOrEmpty(_entity.Mbe_cust_com) && !string.IsNullOrEmpty(_entity.Mbe_cust_loc))
            //        { _isCustomerHasCompany = true; _customerCompany = _entity.Mbe_cust_com; _customerLocation = _entity.Mbe_cust_loc; }

            _invheader.Sah_com = BaseCls.GlbUserComCode;
            _invheader.Sah_cre_by = BaseCls.GlbUserID;
            _invheader.Sah_cre_when = DateTime.Now;
            _invheader.Sah_currency = "LKR";
            //// _invheader.Sah_cus_add1 = txtAddress1.Text.Trim();
            //// _invheader.Sah_cus_add2 = txtAddress2.Text.Trim();
            _invheader.Sah_cus_cd = txtCustomer.Text.Trim();
            _invheader.Sah_cus_name = txtCusName.Text.Trim();
            _invheader.Sah_d_cust_add1 = txtDelAddress1.Text.Trim();
            _invheader.Sah_d_cust_add2 = txtDelAddress2.Text.Trim();
            _invheader.Sah_d_cust_cd = txtDelCustomer.Text.Trim();
            _invheader.Sah_d_cust_name = txtDelName.Text.Trim();
            _invheader.Sah_direct = true;
            _invheader.Sah_dt = Convert.ToDateTime(txtDate.Text);
            _invheader.Sah_epf_rt = 0;
            _invheader.Sah_esd_rt = 0;
            _invheader.Sah_ex_rt = 1;
            _invheader.Sah_inv_no = "na";
            _invheader.Sah_inv_sub_tp = "SA";
            _invheader.Sah_inv_tp = "CS";  //// cmbInvType.Text.Trim();
            _invheader.Sah_is_acc_upload = false;
            _invheader.Sah_man_ref = "";  //// txtManualRefNo.Text;
            _invheader.Sah_manual = false; //// chkManualRef.Checked ? true : false;
            _invheader.Sah_mod_by = BaseCls.GlbUserID;
            _invheader.Sah_mod_when = DateTime.Now;
            _invheader.Sah_pc = BaseCls.GlbUserDefProf;
            _invheader.Sah_pdi_req = 0;
            _invheader.Sah_ref_doc = ""; //// txtDocRefNo.Text;
            _invheader.Sah_remarks = "";
            _invheader.Sah_sales_chn_cd = "";
            _invheader.Sah_sales_chn_man = "";
            _invheader.Sah_sales_ex_cd = txtExecutive.Text.Trim();
            _invheader.Sah_sales_region_cd = "";
            _invheader.Sah_sales_region_man = "";
            _invheader.Sah_sales_sbu_cd = "";
            _invheader.Sah_sales_sbu_man = "";
            _invheader.Sah_sales_str_cd = "";
            _invheader.Sah_sales_zone_cd = "";
            _invheader.Sah_sales_zone_man = "";
            _invheader.Sah_seq_no = 1;
            _invheader.Sah_session_id = BaseCls.GlbUserSessionID;
            _invheader.Sah_structure_seq = ""; //// txtQuotation.Text.Trim();
            _invheader.Sah_stus = "A";
            if (chkDeliverLater.Checked == false || chkDeliverNow.Checked) _invheader.Sah_stus = "D";
            _invheader.Sah_town_cd = "";
            _invheader.Sah_tp = "INV";
            _invheader.Sah_wht_rt = 0;
            _invheader.Sah_direct = true;
            _invheader.Sah_tax_inv = chkTaxPayable.Checked ? true : false;
            _invheader.Sah_anal_11 = (chkDeliverLater.Checked || chkDeliverNow.Checked) ? 0 : 1;
            _invheader.Sah_del_loc = (chkDeliverLater.Checked == false || chkDeliverNow.Checked) ? BaseCls.GlbUserDefLoca : !string.IsNullOrEmpty(txtDelLocation.Text) ? txtDelLocation.Text : string.Empty;
            _invheader.Sah_grn_com = _customerCompany;
            _invheader.Sah_grn_loc = _customerLocation;
            _invheader.Sah_is_grn = _isCustomerHasCompany;
            _invheader.Sah_grup_cd = string.IsNullOrEmpty(txtGroup.Text.Trim()) ? string.Empty : txtGroup.Text.Trim();
            _invheader.Sah_is_svat = lblSVatStatus.Text == "Available" ? true : false;
            _invheader.Sah_tax_exempted = lblVatExemptStatus.Text == "Available" ? true : false;
            _invheader.Sah_anal_4 = ""; //// txtPoNo.Text.Trim();
            _invheader.Sah_anal_6 = txtLoyalty.Text.Trim();
            _invheader.Sah_man_cd = _MasterProfitCenter.Mpc_man;
            _invheader.Sah_is_dayend = 0;
            _invheader.Sah_remarks = "";

            string _invoiceNo = "";
            string _receiptNo = "";
            string _deliveryOrderNo = "";
            _invoiceItemListWithDiscount = new List<InvoiceItem>();
            List<InvoiceItem> _discounted = null;
            bool _isDifferent = false;
            decimal _tobepay = 0;
            decimal _tobepay1 = 0;
            bool _canSaveWithoutDiscount = false;
            _discountSequence = 0;

            Int32 _timeno1 = Convert.ToInt32(DateTime.Now.ToString("HHmmss"));

            Int32 _timeno = Convert.ToInt32(DateTime.Now.ToString("HHmmss"));
            if (_discountSequence == 0)
            {
                foreach (InvoiceItem itm in _invoiceItemList)
                {
                    bool isMulti;
                    int seq;
                    List<InvoiceItem> _item = new List<InvoiceItem>();
                    _item.Add(itm);
                    DataTable _discount = CHNLSVC.Sales.GetPromotionalDiscountSequences(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "CS", _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _item, _recieptItem, _invheader, out isMulti, out seq);
                    //show pop up
                    if (_discount == null)
                    {
                        _discountSequence = seq;
                        if (isMulti)
                        {
                            _isDifferent = false;
                            _discountSequence = -9999;
                        }
                        else
                        {
                            if (_discountSequence != -9999 && _discountSequence != 0)
                            {
                                // if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                                //  {
                                _isDifferent = true;
                                _discountSequence = seq;
                                CHNLSVC.Sales.GetGeneralPromotionProcess(_discountSequence, BaseCls.GlbUserComCode, _item, out _discounted, out _isDifferent, out _tobepay1, _invheader);
                                // _tobepay = _tobepay + _tobepay1;
                                _invoiceItemListWithDiscount.AddRange(_discounted);
                                CashPromotionDiscountHeader _discountHdr = CHNLSVC.General.GetPromotionalDiscountBySeq(seq);
                                if (_discountHdr != null)
                                {
                                    _canSaveWithoutDiscount = _discountHdr.Spdh_is_alw_normal;
                                }
                                //    }
                            }
                            else
                            {
                                if (IsDiscounted)
                                {
                                    _isDifferent = false;
                                    _discountSequence = -9999;
                                    //       if (MessageBox.Show("There is no specific discount promotion available. Do you want to save?", "Saving...", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                                    //       {
                                    // _discountSequence = 0;
                                    //  return;

                                    //    }
                                }
                            }
                        }
                    }
                    else
                    {
                        //  if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                        //   {
                        if (_discount.Rows.Count > 0)
                        {
                            //show popup
                            pnlDiscount.Visible = true;
                            ////  pnlMain.Enabled = false;
                            gvDiscount.DataSource = _discount;
                            return;
                        }
                        //      }
                        else
                        {
                            _isDifferent = false;
                            _discountSequence = -9999;
                        }
                    }
                }
            }
            else if (_discountSequence != -9999)
            {
                //Int32 _timeno = Convert.ToInt32(DateTime.Now.ToString("HHmmss"));
                CHNLSVC.Sales.GetGeneralPromotionProcess(_discountSequence, BaseCls.GlbUserComCode, _invoiceItemList, out _discounted, out _isDifferent, out _tobepay, _invheader);

                _invoiceItemListWithDiscount = _discounted;
            }
            if (_invoiceItemListWithDiscount != null && _invoiceItemListWithDiscount.Count > 0)
            {
                _isDifferent = true;
                foreach (InvoiceItem invItm in _invoiceItemList)
                {
                    List<InvoiceItem> _itmList = (from _res in _invoiceItemListWithDiscount
                                                  where _res.Mi_itm_stus == invItm.Mi_itm_stus && _res.Sad_itm_cd == invItm.Sad_itm_cd
                                                  select _res).ToList<InvoiceItem>();
                    if (_itmList == null || _itmList.Count <= 0)
                    {
                        _invoiceItemListWithDiscount.Add(invItm);
                    }
                }
                _tobepay = _invoiceItemListWithDiscount.Select(X => X.Sad_tot_amt).Sum();
            }

            //if ((_discountSequence == -9999 && _isDifferent) || (_discountSequence == -9999 && IsDiscounted))
            //{
            //    if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            //    {
            //    }
            //    else
            //    {
            //        _isDifferent = false;
            //        _discountSequence = 0;
            //    }
            //}

            //if (_discountSequence == -9999) {
            //    CHNLSVC.Sales.GetGeneralPromotionDiscount(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _invoiceItemList, _recieptItem, out _discounted, out _isDifferent, out _tobepay, _invheader);
            //    _invoiceItemListWithDiscount = _discounted;

            //    if (_isDifferent) {
            //        if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
            //        {
            //            _isDifferent = false;
            //        }
            //    }

            //}

            //added sachith
            //2013/09/04

            if (!_isDifferent && !IsDiscounted)
            {
                //credit note discount (if invoice pay mode has credit note and invoice don't have discount)
                List<RecieptItem> _creditNote = (from _res in _recieptItem
                                                 where _res.Sard_pay_tp == "CRNOTE" || _res.Sard_pay_tp == "ADVAN"
                                                 select _res).ToList<RecieptItem>();
                if (_creditNote != null && _creditNote.Count > 0)
                {

                    CHNLSVC.Sales.GetGeneralPromotionDiscountAdvanCredit(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "CS", _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _invoiceItemList, _recieptItem, out _discounted, out _isDifferent, out _tobepay, _invheader);
                    _invoiceItemListWithDiscount = _discounted;
                    foreach (InvoiceItem _invItm in _invoiceItemListWithDiscount)
                    {
                        if (_invItm.Sad_dis_type == "P")
                        {
                            CashPromotionDiscountHeader _discountHdr = CHNLSVC.General.GetPromotionalDiscountBySeq(_invItm.Sad_dis_seq);
                            if (_discountHdr != null)
                            {
                                _canSaveWithoutDiscount = _discountHdr.Spdh_is_alw_normal;
                            }
                        }
                    }
                }
            }
            if (lblSVatStatus.Text.Trim() == "Available" || lblVatExemptStatus.Text.Trim() == "Available")
            {
                decimal Vatsum = _invoiceItemListWithDiscount.Sum(x => x.Sad_itm_tax_amt);
                _tobepay -= Vatsum;
            }

            lblToBePay.Text = FormatToCurrency(Convert.ToString(_tobepay));
            grvViewDisc.AutoGenerateColumns = false;
            grvViewDisc.DataSource = _invoiceItemListWithDiscount;
        }

        private void textBoxBatch_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                comboBoxCardType.Focus();
        }

        private void dateTimePickerCCExpire_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                textBoxCCDepBank.Focus();
        }

        private void comboBoxCardType_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                dateTimePickerCCExpire.Focus();
        }

        private void textBoxCCDepBranch_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                btnClosePay_Click(null, null);
                btnEnter_Click(null, null);
            }
        }

        private void txtDisRate_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                txtDisRate_Leave(null, null);
        }

        private void btnPSP_Click(object sender, EventArgs e)
        {
            pnlBankSlip.Visible = false;
            pnlCC.Visible = false;
            pnlCheque.Visible = false;
            pnlDebit.Visible = false;
            pnlOthers.Visible = false;
            pnlCash.Visible = false;
            pnlGiftVoucher.Visible = false;
            pnlGV.Visible = false;
            pnlLoyalty.Visible = false;
            pnlStar.Visible = true;
            lblSelPayTpDesc.Text = "STAR POINT-DIALOG";
            lblSelPayTp.Text = "STAR_PO";
            textBoxAmount.Text = lblbalanceAmo.Text;
            txtSPMob.Focus();
        }

        private void btnPMCash_Click(object sender, EventArgs e)
        {
            pnlCC.Visible = false;
            pnlCheque.Visible = false;
            pnlDebit.Visible = false;
            pnlOthers.Visible = false;
            pnlCash.Visible = false;
            pnlGiftVoucher.Visible = false;
            pnlGV.Visible = false;
            pnlLoyalty.Visible = false;
            pnlStar.Visible = false;
            lblSelPayTpDesc.Text = "MCASH-MOBITEL";
            lblSelPayTp.Text = "MCASH";
            textBoxAmount.Text = lblbalanceAmo.Text;
        }

        protected void CheckUnitPrice(object sender, EventArgs e)
        {
            if (txtUnitPrice.ReadOnly) return;

            if (chkPickGV.Checked) return;
            if (_IsVirtualItem) { CalculateItem(); return; }
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (_isCompleteCode && _MasterProfitCenter.Mpc_edit_price && Convert.ToDecimal(txtUnitPrice.Text.Trim()) > 0)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Not allow price edit for com codes!", "Price Edit", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                    return;
                }

                if (string.IsNullOrEmpty(txtItem.Text)) return;
                if (IsNumeric(txtQty.Text) == false)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select valid qty", "Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                if (Convert.ToDecimal(txtQty.Text.Trim()) == 0) return;

                if (_MasterProfitCenter.Mpc_without_price && _priceBookLevelRef.Sapl_is_without_p)
                {
                    if (string.IsNullOrEmpty(txtUnitPrice.Text)) txtUnitPrice.Text = FormatToCurrency("0");
                    decimal vals = Convert.ToDecimal(txtUnitPrice.Text);
                    txtUnitPrice.Text = FormatToCurrency(Convert.ToString(vals));
                    CalculateItem();
                    return;
                }
                if (!_isCompleteCode)
                {
                    //check minus unit price validation
                    decimal _unitAmt = 0;
                    bool _isUnitAmt = Decimal.TryParse(txtUnitPrice.Text, out _unitAmt);
                    if (!_isUnitAmt)
                    {
                        using (new CenterWinDialog(this)) { MessageBox.Show("Unit Price has to be number!", "Price Edit", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                        return;
                    }
                    if (_unitAmt <= 0)
                    {
                        using (new CenterWinDialog(this)) { MessageBox.Show("Unit Price has to be greater than 0!", "Price Edit", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                        return;
                    }

                    if (!string.IsNullOrEmpty(txtUnitPrice.Text) && _isEditDiscount == false)
                    {
                        decimal _pb_price;
                        if (SSPriceBookPrice == 0)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Price not define. Please check the system updated price.", "System Price", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            txtUnitPrice.Text = FormatToCurrency("0");
                            return;
                        }
                        _pb_price = SSPriceBookPrice;
                        decimal _txtUprice = Convert.ToDecimal(txtUnitPrice.Text);
                        if (_MasterProfitCenter.Mpc_edit_price)
                        {
                            if (_pb_price > _txtUprice)
                            {
                                decimal _diffPecentage = ((_pb_price - _txtUprice) / _pb_price) * 100;
                                if (_diffPecentage > _MasterProfitCenter.Mpc_edit_rate)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("You can not deduct price more than " + _MasterProfitCenter.Mpc_edit_rate + "% from the price book price.", "Price Edit", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    txtUnitPrice.Text = FormatToCurrency(Convert.ToString(_pb_price));
                                    _isEditPrice = false;
                                    return;
                                }
                                else
                                {
                                    _isEditPrice = true;
                                }
                            }
                        }
                        else
                        {
                            txtUnitPrice.Text = FormatToCurrency(Convert.ToString(_pb_price));
                            _isEditPrice = false;
                        }
                    }
                }
                if (string.IsNullOrEmpty(txtUnitPrice.Text)) txtUnitPrice.Text = FormatToCurrency("0");
                decimal val = Convert.ToDecimal(txtUnitPrice.Text);
                txtUnitPrice.Text = FormatToCurrency(Convert.ToString(val));
                CalculateItem();
            }
            catch (Exception ex)
            { txtUnitPrice.Text = FormatToCurrency("0"); CalculateItem(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void gvRePayment_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (gvRePayment.Rows.Count > 0) if (e.RowIndex != -1) if (e.ColumnIndex == 5)
                    {
                        gvRePayment.ReadOnly = false;
                        repy_collectamt.ReadOnly = false;
                        gvRePayment.CurrentCellChanged += delegate
                        {
                            DataGridViewRow row = gvRePayment.CurrentRow;
                            bool readOnly = row == null || row.Index != gvRePayment.NewRowIndex;
                            gvRePayment.ReadOnly = readOnly;
                        };
                    }
        }

        private void btnPriNProConfirm_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (_tempPriceCombinItem != null && _tempPriceCombinItem.Count > 0)
                { foreach (DataGridViewRow r in gvPromotionItem.Rows) _tempPriceCombinItem.Where(x => x.Sapc_itm_cd == Convert.ToString(r.Cells["PromItm_Item"].Value)).ToList().ForEach(x => x.Status = Convert.ToString(r.Cells["PromItm_Status"].Value)); }

                if (_priceBookLevelRef.Sapl_is_serialized)
                {
                    int _normalCount = (from DataGridViewRow row in gvNormalPrice.Rows where Convert.ToBoolean(((DataGridViewCheckBoxCell)row.Cells[0]).Value) == true select row).Count();
                    int _promoCount = (from DataGridViewRow row in gvPromotionPrice.Rows where Convert.ToBoolean(((DataGridViewCheckBoxCell)row.Cells[0]).Value) == true select row).Count();
                    int _totalPickedSerial = _normalCount + _promoCount;
                    if (_totalPickedSerial == 0)
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the price from normal or promotion", "Normal Or Promotion Price", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                    if (_totalPickedSerial > 1)
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You have selected more than one selection.", "Qty And Selection Mismatch", MessageBoxButtons.YesNo, MessageBoxIcon.Information); } return; }
                    if (_normalCount > 0)
                    {
                        var _normalRow = from DataGridViewRow row in gvNormalPrice.Rows where Convert.ToBoolean(((DataGridViewCheckBoxCell)row.Cells[0]).Value) == true select row;
                        if (_normalRow != null)
                        {
                            foreach (var _row in _normalRow)
                            {
                                string _unitPrice = _row.Cells["NorPrice_UnitPrice"].Value.ToString();
                                string _bkpPrice = _row.Cells["NorPrice_BkpUPrice"].Value.ToString();
                                string _pbseq = _row.Cells["NorPrice_Pb_Seq"].Value.ToString();
                                string _pblineseq = string.Empty;
                                if (string.IsNullOrEmpty(Convert.ToString(_row.Cells["NorPrice_PbLineSeq"].Value))) _pblineseq = "1";
                                else _pblineseq = _row.Cells["NorPrice_PbLineSeq"].Value.ToString();
                                string _warrantyrmk = _row.Cells["NorPrice_WarrantyRmk"].Value.ToString();
                                if (!string.IsNullOrEmpty(_unitPrice))
                                {
                                    txtUnitPrice.Text = FormatToCurrency(_unitPrice);
                                    SSPriceBookPrice = Convert.ToDecimal(_bkpPrice);
                                    SSPriceBookSequance = _pbseq;
                                    SSPriceBookItemSequance = _pblineseq;
                                    WarrantyRemarks = _warrantyrmk;
                                    CalculateItem();
                                    _isPanelMain = true;
                                    pnlPriceNPromotion.Visible = false;
                                }
                            }
                        }
                        return;
                    }
                    if (_promoCount > 0)
                    {
                        var _promoRow = from DataGridViewRow row in gvPromotionPrice.Rows where Convert.ToBoolean(((DataGridViewCheckBoxCell)row.Cells[0]).Value) == true select row;
                        if (_promoRow != null)
                        {
                            foreach (var _row in _promoRow)
                            {
                                string _mainItem = _row.Cells["PromPrice_Item"].Value.ToString();
                                string _pbSeq = _row.Cells["PromPrice_Pb_Seq"].Value.ToString();
                                string _pbLineSeq = "0";
                                if (Convert.ToString(_row.Cells["PromPrice_PbLineSeq"].Value) == string.Empty) _pbLineSeq = "0"; else _pbLineSeq = Convert.ToString(_row.Cells["PromPrice_PbLineSeq"].Value);
                                string _pbWarranty = _row.Cells["PromPrice_WarrantyRmk"].Value.ToString();
                                string _unitprice = _row.Cells["PromPrice_UnitPrice"].Value.ToString();
                                string _promotioncode = _row.Cells["PromPrice_PromotionCD"].Value.ToString();
                                string _circulerncode = _row.Cells["PromPrice_Circuler"].Value.ToString();
                                string _promotiontype = _row.Cells["PromPrice_PriceType"].Value.ToString();
                                string _pbPrice = _row.Cells["PromPrice_BkpUPrice"].Value.ToString();
                                bool _isSingleItemSerialized = false;

                                PriceDetailRestriction _restriction = CHNLSVC.Sales.GetPromotionRestriction(BaseCls.GlbUserComCode, _promotioncode);

                                if (_restriction != null)
                                {
                                    //show message
                                    if (!string.IsNullOrEmpty(_restriction.Spr_msg))
                                    {
                                        MessageBox.Show(_restriction.Spr_msg, "Promotion Message", MessageBoxButtons.OK);

                                        bool nic = false;
                                        bool mob = false;
                                        bool cus = false;

                                        if (_restriction.Spr_need_cus && (string.IsNullOrEmpty(txtCustomer.Text) || txtCustomer.Text.ToUpper() == "AST-CASH"))
                                        {
                                            cus = true;
                                        }
                                        if (_restriction.Spr_need_mob && string.IsNullOrEmpty(txtMobile.Text))
                                        {
                                            mob = true;
                                        }
                                        if (_restriction.Spr_need_nic && string.IsNullOrEmpty(txtNIC.Text))
                                        {
                                            nic = true;
                                        }

                                        string _message = "";
                                        if (cus)
                                        {
                                            _message = _message + "This promotion need Customer code, Please enter customer code\n";
                                        }
                                        if (nic)
                                        {
                                            _message = _message + "This promotion need ID Number, Please enter ID Number\n";
                                        }
                                        if (mob)
                                        {
                                            _message = _message + "This promotion need Mobile Number, Please enter  Mobile Number\n";
                                        }
                                        if (cus || nic || mob)
                                        {
                                            MessageBox.Show(_message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                            return;
                                        }
                                    }
                                }

                                foreach (PriceCombinedItemRef _ref in _tempPriceCombinItem)
                                {
                                    string _item = _ref.Sapc_itm_cd;
                                    string _originalItem = _ref.Sapc_itm_cd;
                                    string _similerItem = Convert.ToString(_ref.Similer_item);
                                    if (!string.IsNullOrEmpty(_similerItem)) _item = _similerItem;
                                    string _status = _ref.Status; //cmbStatus.Text.Trim();
                                    string _qty = Convert.ToString(_ref.Sapc_qty);
                                    bool _haveSerial = Convert.ToBoolean(_ref.Sapc_increse);
                                    string _serialno = Convert.ToString(_ref.Sapc_sub_ser);

                                    MasterItem _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                                    if (_itm.Mi_is_ser1 == 1) _isSingleItemSerialized = true;
                                    if (_haveSerial && _itm.Mi_is_ser1 == 1)
                                    {
                                        if (!string.IsNullOrEmpty(_serialno) && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                                        {
                                            List<InventorySerialRefN> _refs = CHNLSVC.Inventory.GetItemDetailBySerial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _serialno);
                                            if (_ref != null)
                                                if (_refs.Count > 0)
                                                {
                                                    var _available = _refs.Where(x => x.Ins_itm_cd == _item).ToList();
                                                    if (_available == null || _available.Count <= 0)
                                                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item, " + _serialno + " serial  does not available in the current inventory stock.", "No Stock", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                                                }
                                        }
                                        else if (string.IsNullOrEmpty(_serialno) && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                                        {
                                            decimal _serialcount = PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == _item).Select(y => y.Tus_qty).Count();
                                            if (_serialcount != Convert.ToDecimal(_qty))
                                            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials mismatch in " + _item, "Serial & Qty", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                                        }
                                        else if (_itm.Mi_is_ser1 == 1 && chkDeliverLater.Checked && chkDeliverNow.Checked == false)
                                        {
                                            ReptPickSerials _one = new ReptPickSerials();
                                            if (!string.IsNullOrEmpty(_serialno)) PriceCombinItemSerialList.Add(VirtualSerialLine(_item, _status, Convert.ToDecimal(_qty), _serialno)[0]);
                                        }
                                    }
                                    else if (_haveSerial == false && _itm.Mi_is_ser1 == 1 && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                                    {
                                        decimal _serialcount = PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == _item).Select(y => y.Tus_qty).Count();
                                        if (_serialcount != Convert.ToDecimal(_qty))
                                        { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials mismatch in " + _item, "Serial & Qty", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                                    }
                                    else if (_haveSerial == false && (_itm.Mi_is_ser1 == 0 || _itm.Mi_is_ser1 == -1) && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                                    {
                                        decimal _pickQty = 0;
                                        if (IsPriceLevelAllowDoAnyStatus) _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _item).ToList().Select(x => x.Sad_qty).Sum(); else _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _item && x.Mi_itm_stus == _status).ToList().Select(x => x.Sad_qty).Sum();
                                        _pickQty += Convert.ToDecimal(txtQty.Text.Trim());
                                        List<InventoryLocation> _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, _status);
                                        if (_inventoryLocation != null)
                                            if (_inventoryLocation.Count > 0)
                                            {
                                                decimal _invBal = _inventoryLocation[0].Inl_qty;
                                                if (_pickQty > _invBal)
                                                { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString(_invBal)), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                                            }
                                            else
                                            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString("0")), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                                        else
                                        { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString("0")), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                                    }
                                    else if (_itm.Mi_is_ser1 == 1 && (chkDeliverLater.Checked || chkDeliverNow.Checked))
                                    {
                                        ReptPickSerials _one = new ReptPickSerials();
                                        if (!string.IsNullOrEmpty(_serialno))
                                        {
                                            _one.Tus_com = BaseCls.GlbUserComCode;
                                            _one.Tus_itm_cd = _item;
                                            _one.Tus_itm_stus = _status;
                                            _one.Tus_loc = BaseCls.GlbUserDefLoca;
                                            _one.Tus_qty = Convert.ToDecimal(_qty);
                                            _one.Tus_ser_1 = _serialno;
                                            _one.Tus_ser_2 = "N/A";
                                            _one.Tus_ser_3 = "N/A";
                                            _one.Tus_ser_4 = "N/A";
                                            _one.Tus_ser_id = -100;
                                            _one.Tus_ser_line = 1;
                                            PriceCombinItemSerialList.Add(_one);
                                        }
                                    }
                                }

                                if (chkDeliverLater.Checked == false && _isSingleItemSerialized && chkDeliverNow.Checked == false)
                                    if (PriceCombinItemSerialList == null)
                                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You have to select the serial for the promotion items", "Promotion Item", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                                if (chkDeliverLater.Checked == false && _isSingleItemSerialized && chkDeliverNow.Checked == false)
                                    if (PriceCombinItemSerialList.Count <= 0)
                                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You have to select the serial for the promotion items", "Promotion Item", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                                SetSSPriceDetailVariable(_circulerncode, _pbLineSeq, _pbSeq, _pbPrice, _promotioncode, _promotiontype);
                                _MainPriceCombinItem = _tempPriceCombinItem;
                                txtUnitPrice.Text = FormatToCurrency(_unitprice);
                                txtTaxAmt.Text = FormatToCurrency(Convert.ToString(TaxCalculation(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text.Trim()), _priceBookLevelRef, Convert.ToDecimal(txtUnitPrice.Text.Trim()), Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), false)));
                                CalculateItem();
                                pnlPriceNPromotion.Visible = false;
                                _isPanelMain = true;
                                btnAddItem_Click(null, null);
                            }
                        }
                        return;
                    }
                }
                else
                {
                    bool _isSelect = false;
                    DataGridViewRow _pickedRow = new DataGridViewRow();
                    foreach (DataGridViewRow _row in gvPromotionPrice.Rows)
                    {
                        if (Convert.ToBoolean(_row.Cells["PromPrice_Select"].Value) == true)
                        { _isSelect = true; _pickedRow = _row; break; }
                    }
                    //bool _isHavingSubItem = false;
                    //if (_pickedRow.Index == -1) _isHavingSubItem = false; else _isHavingSubItem = IsPromotionHavingSubItem(_pickedRow);
                    if (!_isSelect)
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You have to select a promotion.", "No Selection", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                    if (_tempPriceCombinItem == null)
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You have to select a promotion items.", "No Promotion item", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                    //if (_tempPriceCombinItem.Count <= 0 && _isHavingSubItem)
                    //{ this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You have to select a promotion items.", "No Promotion item", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                    if (_isSelect)
                    {
                        string _mainItem = _pickedRow.Cells["PromPrice_Item"].Value.ToString();
                        string _pbSeq = _pickedRow.Cells["PromPrice_Pb_Seq"].Value.ToString();
                        string _pbLineSeq = _pickedRow.Cells["PromPrice_PbLineSeq"].Value.ToString();
                        string _pbWarranty = _pickedRow.Cells["PromPrice_WarrantyRmk"].Value.ToString();
                        string _unitprice = Convert.ToString(FigureRoundUp(Convert.ToDecimal(_pickedRow.Cells["PromPrice_UnitPrice"].Value.ToString()), true));
                        string _promotioncode = _pickedRow.Cells["PromPrice_PromotionCD"].Value.ToString();
                        string _circulerncode = _pickedRow.Cells["PromPrice_Circuler"].Value.ToString();
                        string _promotiontype = _pickedRow.Cells["PromPrice_PriceType"].Value.ToString();
                        string _pbPrice = _pickedRow.Cells["PromPrice_BkpUPrice"].Value.ToString();
                        bool _isSingleItemSerialized = false;

                        PriceDetailRestriction _restriction = CHNLSVC.Sales.GetPromotionRestriction(BaseCls.GlbUserComCode, _promotioncode);

                        if (_restriction != null)
                        {
                            //show message
                            if (!string.IsNullOrEmpty(_restriction.Spr_msg))
                            {
                                MessageBox.Show(_restriction.Spr_msg, "Promotion Message", MessageBoxButtons.OK);

                                bool nic = false;
                                bool mob = false;
                                bool cus = false;

                                if (_restriction.Spr_need_cus && (string.IsNullOrEmpty(txtCustomer.Text) || txtCustomer.Text.ToUpper() == "AST-CASH"))
                                {
                                    cus = true;
                                }
                                if (_restriction.Spr_need_mob && string.IsNullOrEmpty(txtMobile.Text))
                                {
                                    mob = true;
                                }
                                if (_restriction.Spr_need_nic && string.IsNullOrEmpty(txtNIC.Text))
                                {
                                    nic = true;
                                }

                                string _message = "";
                                if (cus)
                                {
                                    _message = _message + "This promotion need Customer code, Please enter customer code\n";
                                }
                                if (nic)
                                {
                                    _message = _message + "This promotion need ID Number, Please enter ID Number\n";
                                }
                                if (mob)
                                {
                                    _message = _message + "This promotion need Mobile Number, Please enter  Mobile Number\n";
                                }
                                if (cus || nic || mob)
                                {
                                    MessageBox.Show(_message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    return;
                                }
                            }
                        }

                        if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                            foreach (PriceCombinedItemRef _ref in _tempPriceCombinItem)
                            {
                                string _item = _ref.Sapc_itm_cd;
                                string _originalItem = _ref.Sapc_itm_cd;
                                string _similerItem = Convert.ToString(_ref.Similer_item);
                                if (!string.IsNullOrEmpty(_similerItem)) _item = _similerItem;
                                string _status = _ref.Status;
                                string _qty = Convert.ToString(_ref.Sapc_qty);
                                MasterItem _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                                if (_itm.Mi_is_ser1 == 1)
                                {
                                    _isSingleItemSerialized = true;
                                    decimal _serialcount = PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == _item).Select(y => y.Tus_qty).Count();
                                    if (_serialcount != Convert.ToDecimal(_qty)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials mismatch in " + _item, "Serial & Qty", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                                }
                                else if (_itm.Mi_is_ser1 == 0 || _itm.Mi_is_ser1 == -1)
                                {
                                    decimal _pickQty = 0;
                                    if (IsPriceLevelAllowDoAnyStatus) _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _item).ToList().Select(x => x.Sad_qty).Sum(); else _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _item && x.Mi_itm_stus == _status).ToList().Select(x => x.Sad_qty).Sum();
                                    _pickQty += Convert.ToDecimal(txtQty.Text.Trim());
                                    List<InventoryLocation> _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, _status);
                                    if (_inventoryLocation != null)
                                        if (_inventoryLocation.Count > 0)
                                        {
                                            decimal _invBal = _inventoryLocation[0].Inl_qty;
                                            if (_pickQty > _invBal)
                                            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString(_invBal)), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                                        }
                                        else
                                        { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString("0")), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                                    else
                                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString("0")), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                                }
                            }
                        if (chkDeliverLater.Checked || chkDeliverNow.Checked)
                        {
                            foreach (PriceCombinedItemRef _ref in _tempPriceCombinItem)
                            {
                                string _item = _ref.Sapc_itm_cd;
                                string _originalItem = _ref.Sapc_itm_cd;
                                string _similerItem = Convert.ToString(_ref.Similer_item);
                                if (!string.IsNullOrEmpty(_similerItem)) _item = _similerItem;
                                string _status = _ref.Status;
                                string _qty = Convert.ToString(_ref.Sapc_qty);
                                MasterItem _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                                if (IsGiftVoucher(_itm.Mi_itm_tp))
                                {
                                    _isSingleItemSerialized = true;
                                    decimal _serialcount = PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == _item).Select(y => y.Tus_qty).Count();
                                    if (_serialcount != Convert.ToDecimal(_qty))
                                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials mismatch in " + _item, "Serial & Qty", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                                }
                            }
                        }
                        if (chkDeliverLater.Checked == false && _isSingleItemSerialized && chkDeliverNow.Checked == false)
                            if (PriceCombinItemSerialList == null)
                            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You have to select the serial for the promotion items", "Promotion Item", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                        if (chkDeliverLater.Checked == false && _isSingleItemSerialized && chkDeliverNow.Checked == false)
                            if (PriceCombinItemSerialList.Count <= 0)
                            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You have to select the serial for the promotion items", "Promotion Item", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                        SetSSPriceDetailVariable(_circulerncode, _pbLineSeq, _pbSeq, _pbPrice, _promotioncode, _promotiontype);
                        _MainPriceCombinItem = _tempPriceCombinItem;
                        txtUnitPrice.Text = FormatToCurrency(_unitprice);
                        txtTaxAmt.Text = FormatToCurrency(Convert.ToString(TaxCalculation(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text.Trim()), _priceBookLevelRef, Convert.ToDecimal(txtUnitPrice.Text.Trim()), Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), false)));
                        CalculateItem();
                        pnlPriceNPromotion.Visible = false;
                        _isPanelMain = true;
                        if(_isSelect)
                        btnAddItem_Click(null, null);
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnPriNProCancel_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                PriceCombinItemSerialList = new List<ReptPickSerials>();
                _tempPriceCombinItem = new List<PriceCombinedItemRef>();
                _promotionSerial = new List<ReptPickSerials>();
                _promotionSerialTemp = new List<ReptPickSerials>();
                txtUnitPrice.Text = FormatToCurrency("0");
                CalculateItem();
                pnlPriceNPromotion.Visible = false;
                _isPanelMain = true;
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; }
        }

        private void gvPromotionSerial_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvPromotionSerial.ColumnCount > 0)
                {
                    Int32 _rowindex = e.RowIndex;
                    if (_rowindex != -1)
                    {
                        for (int index = e.RowIndex; index <= e.RowIndex + e.RowCount - 1; index++)
                        {
                            string _item = gvPromotionSerial.Rows[index].Cells["ProSer_Item"].Value.ToString();
                            string _serialID = gvPromotionSerial.Rows[index].Cells["ProSer_SerialID"].Value.ToString();
                            DataGridViewCheckBoxCell _check = gvPromotionSerial.Rows[index].Cells["ProSer_Select"] as DataGridViewCheckBoxCell;

                            string _selectedid = string.Empty;
                            if (PriceCombinItemSerialList != null)
                                if (PriceCombinItemSerialList != null)
                                    if (PriceCombinItemSerialList.Count > 0)
                                    {
                                        var _id = PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == _item && x.Tus_ser_id == Convert.ToInt32(_serialID)).Select(y => y.Tus_ser_id);
                                        if (_id != null)
                                            if (_id.Count() > 0)
                                            {
                                                foreach (var f in _id)
                                                    if (!string.IsNullOrEmpty(Convert.ToString(f)))
                                                        _check.Value = true;
                                            }
                                    }
                        }
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void gvPromotionSerial_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvPromotionSerial.ColumnCount > 0)
                {
                    Int32 _row = e.RowIndex;
                    if (_row != -1)
                    {
                        DataGridViewCheckBoxCell _cell = gvPromotionSerial.Rows[_row].Cells["ProSer_Select"] as DataGridViewCheckBoxCell;
                        string _id = gvPromotionSerial.Rows[_row].Cells["ProSer_SerialID"].Value.ToString();
                        if (Convert.ToBoolean(_cell.Value) == true)
                        {
                            _cell.Value = false;
                            PriceCombinItemSerialList.RemoveAll(x => x.Tus_ser_id == Convert.ToInt32(_id));
                        }
                        else
                        {
                            _cell.Value = true;
                            var _n = _promotionSerial.Where(x => x.Tus_ser_id == Convert.ToInt32(_id)).ToList();
                            _promotionSerialTemp.AddRange(_n);
                        }
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void gvNormalPrice_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvNormalPrice.ColumnCount > 0)
                {
                    Int32 _row = e.RowIndex;
                    if (_row != -1)
                    {
                        //Added by Prabhath on stop to change status
                        string _oldStatus = Convert.ToString(cmbStatus.SelectedValue);
                        string _book = gvNormalPrice.Rows[_row].Cells["NorPrice_Book"].Value.ToString();
                        string _level = gvNormalPrice.Rows[_row].Cells["NorPrice_Level"].Value.ToString();
                        cmbBook.Text = _book;
                        cmbLevel.Text = _level;
                        cmbLevel_Leave(null, null);
                        //Added by Prabhath on stop double click
                        gvNormalPrice_CellDoubleClick(sender, e);
                        if (_priceBookLevelRef.Sapl_is_serialized == false)
                        {
                            string _unitPrice = gvNormalPrice.Rows[_row].Cells["NorPrice_UnitPrice"].Value.ToString();
                            string _bkpPrice = gvNormalPrice.Rows[_row].Cells["NorPrice_BkpUPrice"].Value.ToString();
                            string _pbseq = gvNormalPrice.Rows[_row].Cells["NorPrice_Pb_Seq"].Value.ToString();
                            string _pblineseq = gvNormalPrice.Rows[_row].Cells["NorPrice_PbLineSeq"].Value.ToString();
                            string _warrantyrmk = gvNormalPrice.Rows[_row].Cells["NorPrice_WarrantyRmk"].Value.ToString();
                            if (!string.IsNullOrEmpty(_unitPrice))
                            {
                                txtUnitPrice.Text = FormatToCurrency(_unitPrice);
                                SSPriceBookPrice = Convert.ToDecimal(_bkpPrice);
                                SSPriceBookSequance = _pbseq;
                                SSPriceBookItemSequance = _pblineseq;
                                WarrantyRemarks = _warrantyrmk;

                                CalculateItem();
                                _isPanelMain = true;
                                pnlPriceNPromotion.Visible = false;
                            }
                        }
                        else
                        {   //Added by Prabhath on stop to change status
                            cmbStatus.Text = _oldStatus;
                        }
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void gvNormalPrice_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvNormalPrice.ColumnCount > 0)
                {
                    Int32 _row = e.RowIndex;
                    if (_row != -1)
                        if (_priceBookLevelRef.Sapl_is_serialized)
                        {
                            UncheckNormalPriceOrPromotionPrice(false, true);
                            DataGridViewCheckBoxCell _chk = (DataGridViewCheckBoxCell)gvNormalPrice.Rows[_row].Cells[0];
                            if (Convert.ToBoolean(_chk.Value)) _chk.Value = false; else _chk.Value = true;
                            decimal _count = (from DataGridViewRow row in gvNormalPrice.Rows
                                              where Convert.ToBoolean(((DataGridViewCheckBoxCell)row.Cells[0]).Value) == true
                                              select row).Count();
                            if (_count > Convert.ToDecimal(txtQty.Text.Trim()))
                            {
                                _chk.Value = false; this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials are mismatch.", "Serial and Qty", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                return;
                            }
                        }
                        else
                        {
                            //string _unitPrice = gvNormalPrice.Rows[_row].Cells["NorPrice_UnitPrice"].Value.ToString();
                            //string _bkpPrice = gvNormalPrice.Rows[_row].Cells["NorPrice_BkpUPrice"].Value.ToString();
                            //string _pbseq = gvNormalPrice.Rows[_row].Cells["NorPrice_Pb_Seq"].Value.ToString();
                            //string _pblineseq = gvNormalPrice.Rows[_row].Cells["NorPrice_PbLineSeq"].Value.ToString();
                            //string _warrantyrmk = gvNormalPrice.Rows[_row].Cells["NorPrice_WarrantyRmk"].Value.ToString();
                            //if (!string.IsNullOrEmpty(_unitPrice))
                            //{
                            //    txtUnitPrice.Text = _unitPrice;

                            //    SSPriceBookPrice = Convert.ToDecimal(_bkpPrice);
                            //    SSPriceBookSequance = _pbseq;
                            //    SSPriceBookItemSequance = _pblineseq;
                            //    WarrantyRemarks = _warrantyrmk;
                            //    CalculateItem();
                            //    pnlMain.Enabled = true;
                            //    pnlPriceNPromotion.Visible = false;
                            //}
                        }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void LoadSelectedItemSerialForPriceComItemSerialGv(string _item, string _status, decimal _qty, bool _isPromotion, int _isStatusCol)
        {
            List<ReptPickSerials> _lst = null;
            _promotionSerial = new List<ReptPickSerials>();
            _promotionSerialTemp = new List<ReptPickSerials>();
            MasterItem _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
            if (_itm.Mi_is_ser1 == 1)
            {
                if (IsPriceLevelAllowDoAnyStatus)
                    _lst = CHNLSVC.Inventory.GetNonSerializedItemInTopOrder(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, _item.Trim().ToUpper(), string.Empty, _qty);
                else
                    _lst = CHNLSVC.Inventory.GetNonSerializedItemInTopOrder(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, _item.Trim().ToUpper(), _status, _qty);

                if (IsPriceLevelAllowDoAnyStatus == false && (_lst == null || _lst.Count <= 0))
                {
                    if (cmbStatus.Items.Contains("CONS"))
                    {
                        _status = "CONS";
                        _lst = CHNLSVC.Inventory.GetNonSerializedItemInTopOrder(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, _item.Trim().ToUpper(), _status, _qty);
                    }
                }
                foreach (ReptPickSerials _ser in ScanSerialList.Where(x => x.Tus_itm_cd == _item.Trim()))
                    _lst.RemoveAll(x => x.Tus_ser_1 == _ser.Tus_ser_1);

                _lst.RemoveAll(x => x.Tus_ser_1 == txtSerialNo.Text);

                #region Age Price level - serial pick

                bool _isAgePriceLevel = false;
                int _noOfDays = 0;
                CheckNValidateAgeItem(_item.Trim(), _itm.Mi_cate_1, cmbBook.Text.Trim(), cmbLevel.Text.Trim(), _status, out _isAgePriceLevel, out _noOfDays);
                List<ReptPickSerials> _newlist = GetAgeItemList(Convert.ToDateTime(txtDate.Value.Date).Date, _isAgePriceLevel, _noOfDays, _lst);

                #endregion Age Price level - serial pick

                gvPromotionSerial.DataSource = new List<ReptPickSerials>();
                BindingSource _source = new BindingSource();
                var _list = new BindingList<ReptPickSerials>(_newlist);
                if (_isPromotion)
                {
                    _source.DataSource = _lst;
                    gvPromotionSerial.DataSource = _list;
                }
                else
                {
                    _source.DataSource = _lst;
                    gvPopComItemSerial.DataSource = _list;
                }
                _promotionSerial = _lst;
            }
            else
            {
                if (_isStatusCol == 7) return;
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("No need to pick non serialized item", "Non Serialized Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                return;
            }
        }
        private void LoadGiftVoucherBalance(string _item, Label _withStatus, Label _withoutStatus, out List<ReptPickSerials> GiftVoucher)
        {
            List<ReptPickSerials> _gifVoucher = CHNLSVC.Inventory.GetAvailableGiftVoucher(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _item);
            if (_gifVoucher == null || _gifVoucher.Count <= 0)
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("There is no gift vouchers available.", "Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                _withStatus.Text = string.Empty;
                _withoutStatus.Text = string.Empty;
                GiftVoucher = _gifVoucher;
                return;
            }
            int _count = _gifVoucher.AsEnumerable().Count();
            _withStatus.Text = FormatToQty(Convert.ToString(_count));
            _withoutStatus.Text = FormatToQty(Convert.ToString(_count));
            var _list = _gifVoucher.AsEnumerable().Where(x => x.Tus_itm_cd == _item).ToList();
            GiftVoucher = _list;
        }

        private void gvPromotionItem_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvPromotionItem.RowCount > 0)
                {
                    int _col = e.ColumnIndex;
                    Int32 _row = e.RowIndex;
                    if (_row != -1)
                    {
                        string _originalItem = gvPromotionItem.Rows[_row].Cells["PromItm_Item"].Value.ToString();
                        string _item = gvPromotionItem.Rows[_row].Cells["PromItm_Item"].Value.ToString();
                        string _similerItem = Convert.ToString(gvPromotionItem.Rows[_row].Cells["PromItm_SimilerItem"].Value);
                        string _status = Convert.ToString(gvPromotionItem.Rows[_row].Cells["PromItm_Status"].Value); //cmbStatus.Text.Trim();
                        string _qty = gvPromotionItem.Rows[_row].Cells["PromItm_Qty"].Value.ToString();
                        string _serial = gvPromotionItem.Rows[_row].Cells["PromItm_Serial"].Value.ToString();
                        bool _haveSerial = Convert.ToBoolean(gvPromotionItem.Rows[_row].Cells["PromItm_increse"].Value.ToString());
                        string _PromotionCD = Convert.ToString(gvPromotionPrice.SelectedRows[0].Cells["PromPrice_PromotionCD"].Value);
                        List<ReptPickSerials> _giftVoucher = new List<ReptPickSerials>();

                        if (!string.IsNullOrEmpty(_similerItem))
                            _item = _similerItem;
                        bool _isGiftVoucher = IsGiftVoucher(CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item).Mi_itm_tp);

                        if (!_isGiftVoucher) DisplayAvailableQty(_item, lblPriNProAvailableStatusQty, lblPriNProAvailableQty, _status);
                        else LoadGiftVoucherBalance(_item, lblPriNProAvailableStatusQty, lblPriNProAvailableQty, out _giftVoucher);
                        if (gvPromotionItem.Columns[e.ColumnIndex].Name != "PromItm_SelectSimilerItem")
                        {
                            if (_isGiftVoucher)
                            {
                                List<ReptPickSerials> _lst = new List<ReptPickSerials>();
                                _promotionSerial = new List<ReptPickSerials>();
                                _promotionSerialTemp = new List<ReptPickSerials>();
                                if (_giftVoucher != null)
                                    if (_giftVoucher.Count > 0)
                                        _lst.AddRange(_giftVoucher);
                                _promotionSerial = _lst;
                                gvPopComItemSerial.DataSource = new List<ReptPickSerials>();
                                gvPopComItemSerial.DataSource = _lst;
                                txtPriNProSerialSearch.Text = ".";
                                txtPriNProSerialSearch.Text = string.Empty;
                            }
                            else if (_priceBookLevelRef.Sapl_is_serialized)
                            {
                                if (_haveSerial == false && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                                    LoadSelectedItemSerialForPriceComItemSerialGv(_item, _status, Convert.ToDecimal(_qty), true, _col);
                                else if (_haveSerial == true && !string.IsNullOrEmpty(_similerItem) && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                                    LoadSelectedItemSerialForPriceComItemSerialGv(_item, _status, Convert.ToDecimal(_qty), true, _col);
                                else if (_haveSerial == true && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                                {
                                    List<InventorySerialRefN> _ref = CHNLSVC.Inventory.GetItemDetailBySerial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _serial);
                                    if (_ref != null)
                                        if (_ref.Count > 0)
                                        {
                                            var _available = _ref.Where(x => x.Ins_itm_cd == _item).ToList();
                                            if (_available == null || _available.Count <= 0)
                                            {
                                                this.Cursor = Cursors.Default;
                                                using (new CenterWinDialog(this)) { MessageBox.Show("Selected item does not available in the current inventory", "No Stock", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                                return;
                                            }
                                        }
                                }
                            }
                            else if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                            {
                                LoadSelectedItemSerialForPriceComItemSerialGv(_item, _status, Convert.ToDecimal(_qty), true, _col);
                            }
                            else
                            {
                                var _list = new BindingList<ReptPickSerials>(new List<ReptPickSerials>());
                                gvPromotionSerial.DataSource = _list;
                            }
                        }

                        #region Similar Item Call

                        if (!_isGiftVoucher)
                            if (gvPromotionItem.Columns[e.ColumnIndex].Name == "PromItm_SelectSimilerItem" && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                            {
                                DataTable _dtTable = CHNLSVC.Inventory.GetItemInventoryBalanceStatus(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, string.Empty);
                                if (_dtTable != null)
                                    if (_dtTable.Rows.Count > 0)
                                    {
                                        this.Cursor = Cursors.Default;
                                        using (new CenterWinDialog(this)) { MessageBox.Show("Stock balance is available for the promotion item. No need to pick similar item here!.", "Similar Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                        return;
                                    }

                                TextBox _box = new TextBox();
                                CommonSearch.SearchSimilarItems _similarItems = new CommonSearch.SearchSimilarItems();
                                _similarItems.DocumentType = "S";
                                _similarItems.ItemCode = _item;
                                _similarItems.FunctionDate = txtDate.Value.Date;
                                _similarItems.DocumentNo = string.Empty;
                                _similarItems.PromotionCode = _PromotionCD;
                                _similarItems.obj_TragetTextBox = _box;
                                _similarItems.ShowDialog();
                                if (!string.IsNullOrEmpty(_box.Text))
                                {
                                    _tempPriceCombinItem.Where(x => x.Sapc_itm_cd == _originalItem).ToList().ForEach(x => x.Similer_item = _box.Text);
                                    _tempPriceCombinItem.Where(x => x.Sapc_itm_cd == _originalItem).ToList().ForEach(x => x.Sapc_increse = false);
                                    _tempPriceCombinItem.Where(x => x.Sapc_itm_cd == _originalItem).ToList().ForEach(x => x.Sapc_sub_ser = string.Empty);
                                    BindingSource _source = new BindingSource();
                                    _source.DataSource = _tempPriceCombinItem;
                                    gvPromotionItem.DataSource = _source;
                                    _box.Clear();
                                }
                            }
                            else if ((gvPromotionItem.Columns[e.ColumnIndex].Name == "PromItm_SelectSimilerItem" && chkDeliverLater.Checked == true && chkDeliverNow.Checked == false))
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("You can not pick similar item unless you have deliver now!", "Similar Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return;
                            }

                        #endregion Similar Item Call
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnPriNProSerConfirm_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                txtPriNProSerialSearch.Text = string.Empty;
                decimal _serialcount = 0;
                decimal _promotionItemQty = Convert.ToDecimal(gvPromotionItem.SelectedRows[0].Cells["PromItm_Qty"].Value);
                string _promotionItem = gvPromotionItem.SelectedRows[0].Cells["PromItm_Item"].Value.ToString();
                string _promotionOriginalItem = gvPromotionItem.SelectedRows[0].Cells["PromItm_Item"].Value.ToString();
                string _SimilerItem = Convert.ToString(gvPromotionItem.SelectedRows[0].Cells["PromItm_SimilerItem"].Value);
                if (!string.IsNullOrEmpty(_SimilerItem)) _promotionItem = _SimilerItem;
                foreach (DataGridViewRow _row in gvPromotionSerial.Rows)
                {
                    if (Convert.ToBoolean(_row.Cells["ProSer_Select"].Value) == true)
                        _serialcount += 1;
                }
                if (_serialcount != _promotionItemQty)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials mismatch. Item Qty - " + _promotionItemQty.ToString() + "but serials - " + _serialcount.ToString(), "Qty & Serial", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                    return;
                }
                if (_serialcount > _promotionItemQty)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials mismatch. Item Qty - " + _promotionItemQty.ToString() + "but serials - " + _serialcount.ToString(), "Qty & Serial", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                    return;
                }
                if (PriceCombinItemSerialList != null)
                    if (PriceCombinItemSerialList.Count > 0)
                    {
                        decimal _count = PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == _promotionItem).Count();
                        if (_count >= _promotionItemQty)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("You already pick serials for the item", "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                            return;
                        }
                    }
                foreach (DataGridViewRow _r in gvPromotionSerial.Rows)
                {
                    if (Convert.ToBoolean(_r.Cells["ProSer_Select"].Value) == true)
                    {
                        string _item = Convert.ToString(_r.Cells["ProSer_Item"].Value);
                        string _serial = Convert.ToString(_r.Cells["ProSer_Serial1"].Value);
                        string _serial2 = Convert.ToString(_r.Cells["ProSer_Serial2"].Value);
                        MasterItem _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                        string _prefix = Convert.ToString(_r.Cells["ProSer_Serial3"].Value);
                        bool _isGiftVoucher = IsGiftVoucher(_itm.Mi_itm_tp);
                        ReptPickSerials _serLst = null;
                        if (!_isGiftVoucher) _serLst = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, _item, _serial); else _serLst = CHNLSVC.Inventory.GetGiftVoucherDetail(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _item, Convert.ToInt32(_serial2), Convert.ToInt32(_serial), _prefix);
                        _serLst.Tus_session_id = _promotionOriginalItem;
                        if (_serLst != null)
                            if (_serLst.Tus_ser_1 != null || !string.IsNullOrEmpty(_serLst.Tus_ser_1))
                            {
                                if (PriceCombinItemSerialList != null)
                                    if (PriceCombinItemSerialList.Count > 0)
                                    {
                                        var _dup = PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == _serLst.Tus_itm_cd && x.Tus_ser_1 == _serLst.Tus_ser_1).ToList();
                                        if (_dup != null)
                                            if (_dup.Count > 0)
                                            {
                                                this.Cursor = Cursors.Default;
                                                using (new CenterWinDialog(this)) { MessageBox.Show(_serLst.Tus_ser_1 + "Serial duplicating!", "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                                return;
                                            }
                                            else
                                                PriceCombinItemSerialList.Add(_serLst);
                                        else
                                            PriceCombinItemSerialList.Add(_serLst);
                                    }
                                    else
                                    {
                                        PriceCombinItemSerialList.Add(_serLst);
                                    }
                                else
                                {
                                    PriceCombinItemSerialList.Add(_serLst);
                                }
                            }
                    }
                }
                List<ReptPickSerials> _lst = new List<ReptPickSerials>();
                gvPromotionSerial.DataSource = _lst;
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnSearch_Loyalty_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtCustomer.Text)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the customer code.", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtCustomer.Clear(); txtCustomer.Focus(); return; }
            try
            {
                _commonSearch = new CommonSearch.CommonSearch();
                this.Cursor = Cursors.WaitCursor;
                _commonSearch.ReturnIndex = 0;
                _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.SearchLoyaltyCardNo);
                DataTable _result = CHNLSVC.CommonSearch.SearchLoyaltyCardNo(_commonSearch.SearchParams, null, null);
                _commonSearch.dvResult.DataSource = _result;
                _commonSearch.BindUCtrlDDLData(_result);
                _commonSearch.obj_TragetTextBox = txtLoyalty;
                _commonSearch.IsSearchEnter = true;
                this.Cursor = Cursors.Default;
                _commonSearch.ShowDialog();
                txtLoyalty.Select();
            }
            catch (Exception ex)
            { txtLoyalty.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void txtLoyalty_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                txtLoyalty_Leave(null, null);
        }

        private void txtItem_TextChanged(object sender, EventArgs e)
        {

        }

        private void cmbStatus_Leave(object sender, EventArgs e)
        {
            if (chkPickGV.Checked) return;
            try
            {
                this.Cursor = Cursors.WaitCursor;
                CheckLevelStatusWithInventoryStatus();
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void CheckLevelStatusWithInventoryStatus()
        {
            if (IsPriceLevelAllowDoAnyStatus == false)
            {
                string _invoiceStatus = cmbStatus.Text.Trim();
                string _inventoryStatus = string.Empty;
                if (chkDeliverLater.Checked == false)
                    if (string.IsNullOrEmpty(txtSerialNo.Text.Trim()))
                    {
                        //pick inventory status
                        if (!string.IsNullOrEmpty(txtItem.Text.Trim()))
                        {
                            List<InventoryLocation> _balance = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), _invoiceStatus);
                            if (_balance == null)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Selected price level restricted to deliver with the same item status in the invoice. There is no available qty for this status.", "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                cmbStatus.Text = "";
                                return;
                            }
                            if (_balance.Count <= 0)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Selected price level restricted to deliver with the same item status in the invoice. There is no available qty for this status.", "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                cmbStatus.Text = "";
                                return;
                            }
                        }
                    }
                    else
                    {
                        //pick serial status
                        DataTable _serialstatus = CHNLSVC.Inventory.GetAvailableItemStatus(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, DefaultBin, txtItem.Text.Trim(), txtSerialNo.Text.Trim());
                        if (_serialstatus != null)
                            if (_serialstatus.Rows.Count > 0)
                            {
                                _inventoryStatus = _serialstatus.Rows[0].Field<string>("ins_itm_stus");

                                if (_levelStatus != null)
                                    if (_levelStatus.Rows.Count > 0)
                                    {
                                        var _exist = _levelStatus.AsEnumerable().Where(x => x.Field<string>("Code") == _invoiceStatus).Select(y => y.Field<string>("Code")).ToList();
                                        if (_exist != null)
                                            if (_exist.Count > 0)
                                            {
                                                string _code = Convert.ToString(_exist[0]);
                                                cmbStatus.Text = _code;
                                                return;
                                            }
                                    }

                                if (!string.IsNullOrEmpty(_inventoryStatus))
                                    if (!_inventoryStatus.Equals(_invoiceStatus))
                                    {
                                        this.Cursor = Cursors.Default;
                                        using (new CenterWinDialog(this)) { MessageBox.Show("Selected price level restricted to deliver with the same item status in the invoice. There is no available qty for this status.", "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                        cmbStatus.Text = "";
                                        return;
                                    }
                            }
                    }
                txtQty_Leave(null, null);
            }
        }

        private void pnlgvo_close_Click(object sender, EventArgs e)
        {
            if (pnlGvo.Visible)
            {
                pnlGvo.Visible = false;
            }
            else
            {
                pnlGvo.Visible = true;
             
            }
        }

        private void grdGvoList_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (grdGvoList.ColumnCount > 0)
                {
                    Int32 _row = e.RowIndex;
                    if (_row != -1)
                    {
                        ////Added by Prabhath on stop to change status
                        //string _oldStatus = Convert.ToString(cmbStatus.SelectedValue);
                        //string _book = gvNormalPrice.Rows[_row].Cells["NorPrice_Book"].Value.ToString();
                        //string _level = gvNormalPrice.Rows[_row].Cells["NorPrice_Level"].Value.ToString();
                        //cmbBook.Text = _book;
                        //cmbLevel.Text = _level;
                        //cmbLevel_Leave(null, null);
                        ////Added by Prabhath on stop double click
                        //gvNormalPrice_CellDoubleClick(sender, e);

                        lblAdd1.Text = grdGvoList.Rows[_row].Cells["Gvp_cus_add1"].Value.ToString();



                        lblCusCode.Text = grdGvoList.Rows[_row].Cells["Gvp_cus_cd"].Value.ToString();
                        lblCusName.Text = grdGvoList.Rows[_row].Cells["Gvp_cus_name"].Value.ToString();
                        lblMobile.Text = grdGvoList.Rows[_row].Cells["Gvp_cus_mob"].Value.ToString();
                        textBoxAmount.Text = grdGvoList.Rows[_row].Cells["Gvp_bal_amt"].Value.ToString();

                        lblBook.Text = grdGvoList.Rows[_row].Cells["Gvp_book"].Value.ToString();
                        lblPrefix.Text = grdGvoList.Rows[_row].Cells["Gvp_gv_cd"].Value.ToString();
                        lblCd.Text = grdGvoList.Rows[_row].Cells["Gvp_gv_prefix"].Value.ToString();
                        GVLOC = grdGvoList.Rows[_row].Cells["Gvp_pc"].Value.ToString();
                        GVISSUEDATE = Convert.ToDateTime( grdGvoList.Rows[_row].Cells["Gvp_issue_dt"].Value.ToString());
                        GVCOM = grdGvoList.Rows[_row].Cells["Gvp_com"].Value.ToString();
                        pnlGvo.Visible = false;
                      
                     
                    }
                }
            }
            catch (Exception ex)
            { 
                this.Cursor = Cursors.Default; 
                SystemErrorMessage(ex); 
            }
            finally 
            { 
                this.Cursor = Cursors.Default; 
                CHNLSVC.CloseAllChannels(); 
            }
        }

        private void cmbPromotor_SelectedIndexChanged(object sender, EventArgs e)
        {
            Promoter = string.Empty;
            if (cmbPromotor.Items.Count > 0)
            {
                Promoter = cmbPromotor.SelectedValue == null ? string.Empty : cmbPromotor.SelectedValue.ToString();
            }
        }

        //Add by akila 2017/11/27
        private void LoadPromotor()
        {
            cmbPromotor.DataSource = null;
            DataTable _tblPromotor = new DataTable();

            try
            {
                _tblPromotor = CHNLSVC.General.GetProfitCenterAllocatedPromotors(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf);

                if (_tblPromotor.Rows.Count > 0)
                {
                    AutoCompleteStringCollection _string0 = new AutoCompleteStringCollection();
                    var _lst0 = _tblPromotor.AsEnumerable().ToList();
                    cmbPromotor.ValueMember = "mpp_promo_cd";
                    cmbPromotor.DisplayMember = "mpp_promo_name";

                    cmbPromotor.DropDownWidth = 200;
                    if (_lst0 != null && _lst0.Count > 0)
                    {
                        cmbPromotor.DataSource = _lst0.CopyToDataTable();

                        Parallel.ForEach(_lst0, x => _string0.Add(x.Field<string>("mpp_promo_name")));
                        cmbPromotor.AutoCompleteSource = AutoCompleteSource.CustomSource;
                        cmbPromotor.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                        cmbPromotor.AutoCompleteCustomSource = _string0;
                    }
                    cmbPromotor.SelectedIndex = -1;
                }
            }
            catch (Exception ex)
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("An error occurred while loading promoter details !" + Environment.NewLine + ex.Message, "Select Promoter", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
            }
        }

        private void gvgvo_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (gvgvo.ColumnCount > 0)
                {
                    Int32 _rowIndex = e.RowIndex;
                    Int32 _colIndex = e.ColumnIndex;
                    if (_rowIndex != -1)
                    {
                        if (_colIndex == 0)
                        {

                            string gv_code = gvgvo.Rows[_rowIndex].Cells["gv_code"].Value == null ? string.Empty : gvgvo.Rows[_rowIndex].Cells["gv_code"].Value.ToString();
                            Int32 page_no = 0;
                            Int32.TryParse(gvgvo.Rows[_rowIndex].Cells["page_no"].Value.ToString(), out page_no);

                            DataTable _dtVou = new DataTable();
                            _dtVou = CHNLSVC.Sales.GetPromoVoucherNo(BaseCls.GlbUserComCode, txtCustomer.Text, txtNIC.Text, txtMobile.Text, txtDate.Value.Date, page_no, gv_code);

                            if (_dtVou.Rows.Count > 0)
                            {
                                _promoVoucherCode = _dtVou.Rows[0]["gvp_gv_cd"] == DBNull.Value ? string.Empty : _dtVou.Rows[0]["gvp_gv_cd"].ToString();
                                _promoVoucherTp = _dtVou.Rows[0]["gvp_gv_tp"] == DBNull.Value? string.Empty : _dtVou.Rows[0]["gvp_gv_tp"].ToString();
                                lblPromoVouNo.Text = _dtVou.Rows[0]["gvp_page"] == DBNull.Value ? string.Empty : _dtVou.Rows[0]["gvp_page"].ToString();

                                if (_promoVoucherTp == "RATE")
                                {
                                    decimal.TryParse(_dtVou.Rows[0]["gvp_amt"].ToString(), out _promoVoucherDiscount);
                                }
                                else
                                {
                                    decimal.TryParse(_dtVou.Rows[0]["gvp_amt"].ToString(), out _promoVoucherDiscount);
                                    decimal.TryParse(_dtVou.Rows[0]["gvp_bal_amt"].ToString(), out _promoVoucherDiscBalance);
                                }

                                gvgvo.DataSource = null;
                                btnPromoVouClose_Click(null, null);
                            }
                            else
                            {
                                MessageBox.Show("Couldn't find gift voucher details !", "Select GV - Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                Cursor = DefaultCursor;
                            }
                        }
                    }
                }
            }
            catch (Exception)
            {
                MessageBox.Show("An error occurred while validating gift voucher details !", "Select GV - Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Cursor = DefaultCursor;
            }
        }

    }
}
using FF.BusinessObjects;
using FF.BusinessObjects.General;
using FF.BusinessObjects.InventoryNew;
using FF.BusinessObjects.MessagePortal;
using FF.BusinessObjects.ReptObj;
using FF.DataAccessLayer;
using FF.Interfaces;
using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net.Mail;
using System.Reflection;
using System.ServiceModel;
using System.Text;
using System.Text.RegularExpressions;

namespace FF.BusinessLogicLayer
{
    [ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)]
    public class MsgPortalBLL : IMsgPortal
    {
        public CustServiceDAL _custServiceDAL = null;
        public CommonSearchDAL _commonSearchDAL = null;
        public InventoryDAL _inventoryDAL = null;
        public GeneralDAL _generalDAL = null;
        public SalesDAL _salesDAL = null;
        public SecurityDAL _securityDAL = null;
        public FinancialDAL _financialDAL = null;
        public ReptCommonDAL _reportDAL = null;
        public STNCommonDAL _STNCommonDAL = null;
        //HASITH
        public FMS_InventoryDAL _FMSinventoryDAL = null;
        public FIXA_InventoryDAL _fIXAInventoryDAL = null;

        public DataTable HPMobileIntIncomeReport(string _user, DateTime _from, DateTime _to, string _item, string _cate, string _brand, string _group, string _com, string _pc)
        {
            _salesDAL = new SalesDAL();
            _reportDAL = new ReptCommonDAL();
            if (_securityDAL.Is_Report_DR("HPMobileIntIncome") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.HPMobileIntIncomeReport(_user, _from, _to, _item, _cate, _brand, _group, _com, _pc);
        }

        public DataTable getValuationDetails_Insu_new(DateTime _fromDate, DateTime _toDate, string _ItemClasif, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _Cat4, string _Cat5, string _Stktype, string _Group, string _CostOrValue, string _Com, string _User, Int32 withsts, out string _err)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();
            if (_securityDAL.Is_Report_DR("ValuationDetail") == true) _financialDAL.ConnectionOpen_DR();

            //  _err = string.Empty;
            string _err1 = string.Empty;
            string _filePath = string.Empty;
            _err = string.Empty;

            int i = 0;
            Boolean _bValu = false;

            DataTable _dtResults = new DataTable();
            DataTable _dtValuation = new DataTable("valudata");
            DataTable _period = new DataTable();
            DataTable _opbal = new DataTable();
            DataTable _closebal = new DataTable();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            if (tmp_user_pc.Rows.Count > 0)
            {
                DateTime runStrtDt = new DateTime(_fromDate.Year, _fromDate.Month, 1);
                Int32 in_seq = 123;// _reportDAL.getNearestBalanceSeqNo(_Com, runStrtDt.AddDays(-1));

                Int32 close_seq = 456;

                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    //update TEMP_BMT_INV_BAL_INSU                  
                    _bValu = valuationProcess_Insu(_fromDate, _toDate, _toDate, drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), true, _User, null, in_seq, close_seq, out _err1, false, false);
                    if (_bValu == true)
                    {
                        i = i + 1;

                        _dtResults = _financialDAL.getValuationDetails_Insu(_fromDate, _toDate, _ItemClasif, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _Stktype, drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), _User, in_seq, close_seq, withsts);
                        if (_dtResults.Rows.Count == 0)
                        {
                            break;
                        }
                        if (_CostOrValue == "QTY")
                        {
                            if (_Group == "ITM")
                            {
                                var valuation = from b in _dtResults.AsEnumerable()
                                                group b by new { Itemcode = b.Field<string>("ITEM_CODE"), Itemdesc = b.Field<string>("ITEM_DESC") } into g
                                                select new
                                                {
                                                    ITEM_CODE = g.Key.Itemcode,
                                                    ITEM_DESCRIPTION = g.Key.Itemdesc,
                                                    OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                    //OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                    OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                    //OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                    GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                    //GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                    SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                    //SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                    AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                    //AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                    ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                    TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                    //TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                    DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                    //DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                    PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                    //PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                    AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                    //AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                    ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                    TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                    //TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                    GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                    //GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                    CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                };

                                DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                                _dtValuation.Merge(_dtValuation1);
                            }

                            if (_Group == "LOC")
                            {
                                var valuation = from b in _dtResults.AsEnumerable()
                                                group b by new { LocCode = b.Field<string>("LOC_CODE"), LocDesc = b.Field<string>("LOC_DESC") } into g
                                                select new
                                                {
                                                    LOC_CODE = g.Key.LocCode,
                                                    LOC_DESCRIPTION = g.Key.LocDesc,
                                                    OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                    //OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                    OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                    //OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                    GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                    //GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                    SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                    //SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                    AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                    //AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                    ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),

                                                    TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                    //TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                    DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                    //DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                    PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                    //PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                    AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                    //AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                    ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                    TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                    //TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                    GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                    //GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                    CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),

                                                };

                                DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                                _dtValuation.Merge(_dtValuation1);
                            }

                            if (_Group == "CAT1")
                            {
                                var valuation = from b in _dtResults.AsEnumerable()
                                                group b by new { Cat1 = b.Field<string>("ITEM_CAT1"), Cat1Desc = b.Field<string>("ITEM_CAT1_DESC") } into g
                                                select new
                                                {
                                                    ITEM_CODE = g.Key.Cat1,
                                                    ITEM_DESCRIPTION = g.Key.Cat1Desc,
                                                    OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                    //OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                    OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                    //OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                    GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                    //GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                    SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                    //SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                    AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                    //AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                    ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                    TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                    //TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                    DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                    //DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                    PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                    //PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                    AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                    //AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                    ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                    TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                    //TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                    GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                    //GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                    CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),

                                                };

                                DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                                _dtValuation.Merge(_dtValuation1);
                            }
                        }

                        if (_CostOrValue == "VAL")
                        {
                            if (_Group == "ITM")
                            {
                                var valuation = from b in _dtResults.AsEnumerable()
                                                group b by new { Itemcode = b.Field<string>("ITEM_CODE"), Itemdesc = b.Field<string>("ITEM_DESC") } into g
                                                select new
                                                {
                                                    ITEM_CODE = g.Key.Itemcode,
                                                    ITEM_DESCRIPTION = g.Key.Itemdesc,
                                                    //OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                    OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                    //OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                    OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                    //GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                    GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                    //SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                    SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                    //AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                    AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                    //ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                    ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                    //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                    //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                    //TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                    TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                    //DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                    DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                    //PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                    PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                    //AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                    AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                    //ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                    ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                    //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                    //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                    //TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                    TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                    //GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                    GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                    //CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                    CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))

                                                };

                                DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                                _dtValuation.Merge(_dtValuation1);
                            }

                            if (_Group == "LOC")
                            {
                                var valuation = from b in _dtResults.AsEnumerable()
                                                group b by new { LocCode = b.Field<string>("LOC_CODE"), LocDesc = b.Field<string>("LOC_DESC") } into g
                                                select new
                                                {
                                                    LOC_CODE = g.Key.LocCode,
                                                    LOC_DESCRIPTION = g.Key.LocDesc,
                                                    //OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                    OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                    //OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                    OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                    //GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                    GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                    //SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                    SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                    //AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                    AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                    //ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                    ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                    //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                    //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                    //TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                    TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                    //DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                    DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                    //PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                    PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                    //AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                    AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                    //ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                    ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                    //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                    //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                    //TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                    TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                    //GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                    GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                    //CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                    CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))

                                                };

                                DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                                _dtValuation.Merge(_dtValuation1);
                            }

                            if (_Group == "CAT1")
                            {
                                var valuation = from b in _dtResults.AsEnumerable()
                                                group b by new { Cat1 = b.Field<string>("ITEM_CAT1"), Cat1Desc = b.Field<string>("ITEM_CAT1_DESC") } into g
                                                select new
                                                {
                                                    ITEM_CODE = g.Key.Cat1,
                                                    ITEM_DESCRIPTION = g.Key.Cat1Desc,
                                                    //OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                    OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                    //OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                    OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                    //GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                    GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                    //SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                    SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                    //AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                    AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                    //ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                    ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                    //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                    //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                    //TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                    TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                    //DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                    DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                    //PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                    PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                    //AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                    AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                    //ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                    ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                    //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                    //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                    //TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                    TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                    //GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                    GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                    //CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                    CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))

                                                };

                                DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                                _dtValuation.Merge(_dtValuation1);
                            }
                        }

                        if (_CostOrValue == "BOTH")
                        {
                            if (_Group == "ITM")
                            {
                                var valuation = from b in _dtResults.AsEnumerable()
                                                group b by new { Itemcode = b.Field<string>("ITEM_CODE"), Itemdesc = b.Field<string>("ITEM_DESC") } into g
                                                select new
                                                {
                                                    ITEM_CODE = g.Key.Itemcode,
                                                    ITEM_DESC = g.Key.Itemdesc,
                                                    OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                    OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                    OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                    OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                    GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                    GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                    SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                    SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                    AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                    AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                    ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                    ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                    //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                    //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                    TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                    TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                    DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                    DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                    PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                    PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                    AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                    AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                    ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                    ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                    //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                    //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                    TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                    TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                    GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                    GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                    CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                    CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))

                                                };

                                DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                                _dtValuation.Merge(_dtValuation1);
                            }

                            if (_Group == "LOC")
                            {
                                var valuation = from b in _dtResults.AsEnumerable()
                                                group b by new { LocCode = b.Field<string>("LOC_CODE"), LocDesc = b.Field<string>("LOC_DESC") } into g
                                                select new
                                                {
                                                    LOC_CODE = g.Key.LocCode,
                                                    LOC_DESCRIPTION = g.Key.LocDesc,
                                                    OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                    OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                    OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                    OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                    GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                    GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                    SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                    SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                    AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                    AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                    ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                    ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                    //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                    //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                    TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                    TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                    DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                    DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                    PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                    PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                    AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                    AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                    ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                    ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                    //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                    //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                    TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                    TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                    GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                    GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                    CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                    CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))

                                                };

                                DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                                _dtValuation.Merge(_dtValuation1);
                            }

                            if (_Group == "CAT1")
                            {
                                var valuation = from b in _dtResults.AsEnumerable()
                                                group b by new { Cat1 = b.Field<string>("ITEM_CAT1"), Cat1Desc = b.Field<string>("ITEM_CAT1_DESC") } into g
                                                select new
                                                {
                                                    ITEM_CODE = g.Key.Cat1,
                                                    ITEM_DESCRIPTION = g.Key.Cat1Desc,
                                                    OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                    OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                    OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                    OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                    GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                    GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                    SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                    SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                    AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                    AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                    ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                    ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                    TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                    TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                    DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                    DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                    PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                    PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                    AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                    AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                    ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                    ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                    TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                    TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                    GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                    GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                    CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                    CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))

                                                };

                                DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                                _dtValuation.Merge(_dtValuation1);
                            }
                        }
                    }

                }

                _dtValuation.TableName = "sss";
                if (_dtResults.Rows.Count == 0)
                {
                    _err = "No Records Found.";
                    _dtResults.TableName = "ss";
                    return _dtResults;

                }
                else
                {
                    _err = "";
                }
            }

            return _dtValuation;
        }

        private bool updateBalanaceTable_Insu(String com, Int32 seq, string userid, string location, ReptCommonDAL _reportDAL, DateTime monthEndDt, bool mnthEnd)
        {
            try
            {
                DataTable getInDocs = _reportDAL.getTemporyInBalanceDocument(com, userid, location);
                if (getInDocs.Rows.Count > 0)
                {
                    //   seq = 123;
                    foreach (DataRow row in getInDocs.Rows)
                    {
                        Int32 eff = _reportDAL.addToBalanceTableStock_Insu(row, seq, userid);
                    }
                    //DateTime monthEnd = new DateTime(asAtDate.Year, asAtDate.Month, 1);
                    Int32 eff1 = _reportDAL.updateAgingDetails_Insu(seq, monthEndDt, location, userid);
                     eff1 = _reportDAL.updateAgingDetails_AgeM(seq, monthEndDt, location, userid);
                    
                }
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string getValuationDetails_Insu(DateTime _fromDate, DateTime _toDate, string _ItemClasif, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _Cat4, string _Cat5, string _Stktype, string _Group, string _CostOrValue, string _Com, string _User, out string _err, Int32 withsts = 0)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();
            if (_securityDAL.Is_Report_DR("ValuationDetail") == true) _financialDAL.ConnectionOpen_DR();

            _err = string.Empty;
            string _err1 = string.Empty;
            string _filePath = string.Empty;
            int i = 0;
            Boolean _bValu = false;

            DataTable _dtResults = new DataTable();
            DataTable _dtValuation = new DataTable();
            DataTable _period = new DataTable();
            DataTable _opbal = new DataTable();
            DataTable _closebal = new DataTable();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            if (tmp_user_pc.Rows.Count > 0)
            {
                DateTime runStrtDt = new DateTime(_fromDate.Year, _fromDate.Month, 1);
                Int32 in_seq = 123;// _reportDAL.getNearestBalanceSeqNo(_Com, runStrtDt.AddDays(-1));

                Int32 close_seq = 456;

                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    //update TEMP_BMT_INV_BAL_INSU
                    _bValu = valuationProcess_Insu(_fromDate, _toDate, _toDate, _Com, drow["tpl_pc"].ToString(), true, _User, null, in_seq, close_seq, out _err1, false, false);
                    if (_bValu == true)
                    {
                        i = i + 1;

                        _dtResults = _financialDAL.getValuationDetails_Insu(_fromDate, _toDate, _ItemClasif, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _Stktype, drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), _User, in_seq, close_seq, 1);

                        if (_CostOrValue == "QTY")
                        {
                            if (_Group == "ITM")
                            {
                                var valuation = from b in _dtResults.AsEnumerable()
                                                group b by new { Itemcode = b.Field<string>("ITEM_CODE"), Itemdesc = b.Field<string>("ITEM_DESC") } into g
                                                select new
                                                {
                                                    ITEM_CODE = g.Key.Itemcode,
                                                    ITEM_DESCRIPTION = g.Key.Itemdesc,
                                                    OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                    //OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                    OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                    //OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                    GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                    //GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                    SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                    //SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                    AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                    //AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                    ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                    TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                    //TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                    DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                    //DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                    PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                    //PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                    AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                    //AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                    ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                    TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                    //TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                    GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                    //GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                    CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                };

                                DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                                _dtValuation.Merge(_dtValuation1);
                            }

                            if (_Group == "LOC")
                            {
                                var valuation = from b in _dtResults.AsEnumerable()
                                                group b by new { LocCode = b.Field<string>("LOC_CODE"), LocDesc = b.Field<string>("LOC_DESC") } into g
                                                select new
                                                {
                                                    LOC_CODE = g.Key.LocCode,
                                                    LOC_DESCRIPTION = g.Key.LocDesc,
                                                    OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                    //OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                    OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                    //OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                    GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                    //GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                    SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                    //SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                    AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                    //AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                    ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),

                                                    TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                    //TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                    DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                    //DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                    PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                    //PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                    AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                    //AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                    ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                    TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                    //TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                    GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                    //GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                    CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),

                                                };

                                DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                                _dtValuation.Merge(_dtValuation1);
                            }

                            if (_Group == "CAT1")
                            {
                                var valuation = from b in _dtResults.AsEnumerable()
                                                group b by new { Cat1 = b.Field<string>("ITEM_CAT1"), Cat1Desc = b.Field<string>("ITEM_CAT1_DESC") } into g
                                                select new
                                                {
                                                    ITEM_CODE = g.Key.Cat1,
                                                    ITEM_DESCRIPTION = g.Key.Cat1Desc,
                                                    OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                    //OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                    OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                    //OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                    GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                    //GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                    SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                    //SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                    AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                    //AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                    ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                    TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                    //TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                    DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                    //DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                    PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                    //PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                    AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                    //AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                    ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                    TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                    //TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                    GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                    //GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                    CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),

                                                };

                                DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                                _dtValuation.Merge(_dtValuation1);
                            }
                        }

                        if (_CostOrValue == "VAL")
                        {
                            if (_Group == "ITM")
                            {
                                var valuation = from b in _dtResults.AsEnumerable()
                                                group b by new { Itemcode = b.Field<string>("ITEM_CODE"), Itemdesc = b.Field<string>("ITEM_DESC") } into g
                                                select new
                                                {
                                                    ITEM_CODE = g.Key.Itemcode,

                                                    ITEM_DESCRIPTION = g.Key.Itemdesc,
                                                    //OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                    OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                    //OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                    OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                    //GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                    GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                    //SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                    SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                    //AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                    AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                    //ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                    ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                    //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                    //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                    //TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                    TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                    //DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                    DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                    //PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                    PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                    //AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                    AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                    //ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                    ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                    //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                    //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                    //TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                    TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                    //GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                    GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                    //CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                    CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))

                                                };

                                DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                                _dtValuation.Merge(_dtValuation1);
                            }

                            if (_Group == "LOC")
                            {
                                var valuation = from b in _dtResults.AsEnumerable()
                                                group b by new { LocCode = b.Field<string>("LOC_CODE"), LocDesc = b.Field<string>("LOC_DESC") } into g
                                                select new
                                                {
                                                    LOC_CODE = g.Key.LocCode,
                                                    LOC_DESCRIPTION = g.Key.LocDesc,
                                                    //OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                    OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                    //OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                    OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                    //GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                    GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                    //SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                    SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                    //AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                    AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                    //ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                    ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                    //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                    //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                    //TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                    TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                    //DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                    DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                    //PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                    PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                    //AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                    AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                    //ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                    ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                    //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                    //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                    //TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                    TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                    //GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                    GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                    //CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                    CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))

                                                };

                                DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                                _dtValuation.Merge(_dtValuation1);
                            }

                            if (_Group == "CAT1")
                            {
                                var valuation = from b in _dtResults.AsEnumerable()
                                                group b by new { Cat1 = b.Field<string>("ITEM_CAT1"), Cat1Desc = b.Field<string>("ITEM_CAT1_DESC") } into g
                                                select new
                                                {
                                                    ITEM_CODE = g.Key.Cat1,
                                                    ITEM_DESCRIPTION = g.Key.Cat1Desc,
                                                    //OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                    OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                    //OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                    OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                    //GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                    GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                    //SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                    SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                    //AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                    AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                    //ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                    ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                    //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                    //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                    //TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                    TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                    //DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                    DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                    //PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                    PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                    //AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                    AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                    //ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                    ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                    //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                    //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                    //TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                    TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                    //GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                    GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                    //CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                    CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))

                                                };

                                DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                                _dtValuation.Merge(_dtValuation1);
                            }
                        }
                        if (withsts == 1)
                        {

                            if (_CostOrValue == "BOTH")
                            {
                                if (_Group == "ITM")
                                {

                                    var valuation = from b in _dtResults.AsEnumerable()
                                                    group b by new { Itemcode = b.Field<string>("ITEM_CODE"), Itemdesc = b.Field<string>("ITEM_DESC"), ITEMS_STATUS = b.Field<string>("ITEMS_STATUS") } into g
                                                    select new
                                                    {
                                                        ITEM_CODE = g.Key.Itemcode,
                                                        ITEMS_STATUS = g.Key.ITEMS_STATUS,
                                                        ITEM_DESCRIPTION = g.Key.Itemdesc,
                                                        OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                        OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                        OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                        OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                        GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                        GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                        SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                        SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                        AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                        AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                        ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                        ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                        //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                        //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                        TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                        TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                        DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                        DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                        PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                        PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                        AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                        AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                        ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                        ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                        //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                        //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                        TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                        TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                        GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                        GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                        CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                        CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))


                                                    };

                                    DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                                    _dtValuation.Merge(_dtValuation1);
                                }

                                if (_Group == "LOC")
                                {
                                    var valuation = from b in _dtResults.AsEnumerable()
                                                    group b by new { LocCode = b.Field<string>("LOC_CODE"), LocDesc = b.Field<string>("LOC_DESC"), ITEMS_STATUS = b.Field<string>("ITEMS_STATUS") } into g
                                                    select new
                                                    {
                                                        LOC_CODE = g.Key.LocCode,
                                                        LOC_DESCRIPTION = g.Key.LocDesc,

                                                        OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                        OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                        OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                        OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                        GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                        GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                        SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                        SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                        AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                        AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                        ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                        ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                        //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                        //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                        TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                        TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                        DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                        DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                        PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                        PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                        AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                        AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                        ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                        ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                        //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                        //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                        TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                        TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                        GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                        GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                        CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                        CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))



                                                    };

                                    DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                                    _dtValuation.Merge(_dtValuation1);
                                }

                                if (_Group == "CAT1")
                                {
                                    var valuation = from b in _dtResults.AsEnumerable()
                                                    group b by new { Cat1 = b.Field<string>("ITEM_CAT1"), Cat1Desc = b.Field<string>("ITEM_CAT1_DESC") } into g
                                                    select new
                                                    {
                                                        ITEM_CODE = g.Key.Cat1,
                                                        ITEM_DESCRIPTION = g.Key.Cat1Desc,
                                                        OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                        OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                        OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                        OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                        GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                        GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                        SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                        SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                        AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                        AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                        ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                        ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                        TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                        TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                        DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                        DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                        PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                        PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                        AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                        AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                        ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                        ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                        TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                        TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                        GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                        GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                        CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                        CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))

                                                    };

                                    DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                                    _dtValuation.Merge(_dtValuation1);
                                }
                            }
                        }
                        else
                        {
                            if (_CostOrValue == "BOTH")
                            {
                                if (_Group == "ITM")
                                {

                                    var valuation = from b in _dtResults.AsEnumerable()
                                                    group b by new { Itemcode = b.Field<string>("ITEM_CODE"), Itemdesc = b.Field<string>("ITEM_DESC") } into g
                                                    select new
                                                    {
                                                        ITEM_CODE = g.Key.Itemcode,

                                                        ITEM_DESCRIPTION = g.Key.Itemdesc,
                                                        OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                        OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                        OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                        OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                        GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                        GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                        SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                        SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                        AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                        AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                        ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                        ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                        //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                        //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                        TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                        TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                        DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                        DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                        PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                        PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                        AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                        AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                        ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                        ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                        //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                        //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                        TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                        TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                        GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                        GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                        CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                        CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))


                                                    };

                                    DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                                    _dtValuation.Merge(_dtValuation1);
                                }

                                if (_Group == "LOC")
                                {
                                    var valuation = from b in _dtResults.AsEnumerable()
                                                    group b by new { LocCode = b.Field<string>("LOC_CODE"), LocDesc = b.Field<string>("LOC_DESC"), ITEMS_STATUS = b.Field<string>("ITEMS_STATUS") } into g
                                                    select new
                                                    {
                                                        LOC_CODE = g.Key.LocCode,
                                                        LOC_DESCRIPTION = g.Key.LocDesc,

                                                        OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                        OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                        OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                        OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                        GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                        GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                        SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                        SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                        AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                        AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                        ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                        ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                        //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                        //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                        TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                        TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                        DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                        DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                        PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                        PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                        AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                        AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                        ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                        ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                        //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                        //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                        TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                        TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                        GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                        GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                        CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                        CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))



                                                    };

                                    DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                                    _dtValuation.Merge(_dtValuation1);
                                }

                                if (_Group == "CAT1")
                                {
                                    var valuation = from b in _dtResults.AsEnumerable()
                                                    group b by new { Cat1 = b.Field<string>("ITEM_CAT1"), Cat1Desc = b.Field<string>("ITEM_CAT1_DESC") } into g
                                                    select new
                                                    {
                                                        ITEM_CODE = g.Key.Cat1,
                                                        ITEM_DESCRIPTION = g.Key.Cat1Desc,
                                                        OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                        OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                        OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                        OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                        GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                        GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                        SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                        SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                        AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                        AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                        ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                        ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                        TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                        TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                        DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                        DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                        PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                        PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                        AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                        AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                        ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                        ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                        TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                        TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                        GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                        GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                        CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                        CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))

                                                    };

                                    DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                                    _dtValuation.Merge(_dtValuation1);
                                }
                            }
                        }


                    }

                }
            }
            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Valuation Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");



            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, TitleData, _dtValuation, out _err);

            if (_dtValuation.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        //kapila
        public bool valuationProcess_Insu(DateTime _fromdate, DateTime _todate, DateTime asAtDate, string company, string location, bool mnthEnd, string userid, string adminteam, Int32 _inSeq, Int32 _outSeq, out string error, bool isAgemonitor, bool isAgemonitor_com, bool unComPath = false)
        {
            error = string.Empty;
            bool err = false;
            try
            {
                Int32 seq = 0;
                _reportDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _reportDAL.ConnectionOpen();
                //  _reportDAL.BeginTransaction();
                Int32 direction = -1;
                // _fromdate = 10/apr/2017
                // _todate = 20/apr/2017
                DateTime runStrtDt = new DateTime(_fromdate.Year, _fromdate.Month, 1);  // 01/apr/2017
                DateTime runEndDt = _fromdate.Date.AddDays(-1);     // 9/apr/2017

                Int32 _delEf = _reportDAL.Deletetemp_bmt_inv_bal_insu(userid);
                DataTable ageSlt = _reportDAL.getTempGetAgeSlot(userid);
                //_reportDAL.TransactionCommit();
                //_reportDAL.ConnectionClose();               
                for (int _i = 0; _i < 2; _i++)
                {
                    //_reportDAL = new ReptCommonDAL();
                    //_reportDAL.ConnectionOpen();
                    //_reportDAL.BeginTransaction();

                    _delEf = _reportDAL.DeleteTempValBal(userid);
                    _delEf = _reportDAL.DeleteTempValBalOut(userid);
                    //_reportDAL.TransactionCommit();
                    //_reportDAL.ConnectionClose();

                    if (_i == 0)
                    {
                        //_reportDAL = new ReptCommonDAL();
                        //_reportDAL.ConnectionOpen();
                        //_reportDAL.BeginTransaction();
                        seq = _reportDAL.getNearestBalanceSeqNo(company, runStrtDt.AddDays(-1));
                        //_reportDAL.TransactionCommit();
                        //_reportDAL.ConnectionClose();
                    }
                    else
                    {
                        seq = 123;
                        runStrtDt = _fromdate.Date;  // 10/apr/2017
                        runEndDt = _todate.Date;    //20/apr/2017
                    }
                   
                    if (seq <= 0)
                    {
                        error = "No balance details for this month and company.";
                        err = true;
                        // goto A;
                        //_reportDAL.TransactionRollback();
                        //_reportDAL.ConnectionClose();
                        return false;
                    }
                    else
                    {
                        //_reportDAL = new ReptCommonDAL();
                        //_reportDAL.ConnectionOpen();
                        //_reportDAL.BeginTransaction();

                        DataTable dtLoc = _reportDAL.getCompanyLocations(company, location, adminteam);
                        //_reportDAL.TransactionCommit();
                        //_reportDAL.ConnectionClose();
                        Int32 l = 0;
                        foreach (DataRow row in dtLoc.Rows)
                        {

                            //_reportDAL = new ReptCommonDAL();
                            //_reportDAL.ConnectionOpen();
                            //_reportDAL.BeginTransaction();
                            location = row["ML_LOC_CD"].ToString().Trim();

                            l++;
                            direction = 0;
                            Int32 outEff = _reportDAL.updateAllOutDocuments(runStrtDt, runEndDt, company, location, direction, userid);
                            direction = 1;

                            Int32 inEff = 0;
                            if (_i == 0)
                                inEff = _reportDAL.updateAllInDocuments(runStrtDt, runEndDt, company, location, direction, seq, userid);
                            else
                                inEff = _reportDAL.updateAllInDocuments_Insu(runStrtDt, runEndDt, company, location, direction, _inSeq, userid);

                            //_reportDAL.TransactionCommit();
                            //_reportDAL.ConnectionClose();


                            //_reportDAL = new ReptCommonDAL();
                            //_reportDAL.ConnectionOpen();
                            //_reportDAL.BeginTransaction();

                            bool process = AsAtBalanceProcess(company, 0, userid, location, _reportDAL, unComPath);

                            if (process == true)
                            {
                                //_reportDAL.TransactionCommit();
                                //_reportDAL.ConnectionClose();
                                error = "Successfully updated.";
                                err = false;
                            }
                            else
                            {
                                error = "Balance Process error.";
                                err = true;
                                //_reportDAL.TransactionRollback();
                                //_reportDAL.ConnectionClose();
                                //goto A;
                            }
                            //_reportDAL = new ReptCommonDAL();
                            //_reportDAL.ConnectionOpen();
                            //_reportDAL.BeginTransaction();
                            bool update = false;
                            if (_i == 0)
                                update = updateBalanaceTable_Insu(company, _inSeq, userid, location, _reportDAL, runEndDt, mnthEnd);
                            else
                                update = updateBalanaceTable_Insu(company, _outSeq, userid, location, _reportDAL, runEndDt, mnthEnd);

                            ////Wimal @ 05/Oct/2018
                            //if (isAgemonitor == true)
                            //{
                             //   inEff = _inventoryDAL.update_age_monitoring(userid, 1);
                            //}
                            //_reportDAL.TransactionCommit();
                            //_reportDAL.ConnectionClose();


                            ////_reportDAL = new ReptCommonDAL();
                            ////_reportDAL.ConnectionOpen();
                            ////_reportDAL.BeginTransaction();

                            if (isAgemonitor == true && isAgemonitor_com == true)
                            {
                               // bool ageDet = updateAgeDetails_ageMonitor(seq, company, location, _reportDAL, asAtDate, runEndDt, out error);
                                bool ageDet = updateAgeDetails(seq, company, location, _reportDAL, asAtDate, runEndDt, out error);
                            }
                            

                            ////_reportDAL.TransactionCommit();
                            ////_reportDAL.ConnectionClose();

                            ////_reportDAL = new ReptCommonDAL();
                            ////_reportDAL.ConnectionOpen();
                            ////_reportDAL.BeginTransaction();
                            ////bool ageDetGit = updateAgeDetailsGit(seq, company, location, _reportDAL, asAtDate, runEndDt, out error);
                            ////_reportDAL.TransactionCommit();
                            ////_reportDAL.ConnectionClose();
                        }
                        // A:
                    }
                }
                //Wimal @ 05/Oct/2018
                if (isAgemonitor == true)
                {
                    Int32 inEff = _inventoryDAL.update_age_monitoring(userid, 1);
                }
               // _reportDAL.TransactionCommit();
                //_reportDAL.ConnectionClose();
                return true;

            }
            catch (Exception ex)
            {
                //_reportDAL.TransactionRollback();
                _reportDAL.ConnectionClose();
                error = ex.Message.ToString();
                return false;
            }
        }
        //kapila
        public string Get_Cash_Comm_Summ(DateTime _from, DateTime _to, string _com, string _user, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            _reportDAL = new ReptCommonDAL();
            _inventoryDAL = new InventoryDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB(_com, _user);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CashCommSummary") == true) _salesDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.Get_Cash_Comm_Summ(_from, _to, _com, drow["tpl_pc"].ToString(), _user);

                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            MasterCompany _mstComp = _inventoryDAL.GetCompByCode(_com);

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = _mstComp.Mc_desc; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Cash Commission Summary Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _from.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _to.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }
        //kapila
        public string Get_ClosedAccountsDet(DateTime _fromDate, DateTime _toDate, string _com, string _user, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            _reportDAL = new ReptCommonDAL();
            _inventoryDAL = new InventoryDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB(_com, _user);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ClosedAccDet") == true) _salesDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.Get_ClosedAccountsDet(_fromDate, _toDate, _com, drow["tpl_pc"].ToString(), _user);

                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            MasterCompany _mstComp = _inventoryDAL.GetCompByCode(_com);

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = _mstComp.Mc_desc; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Closed Accounts Details Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }
        //kapila
        public string Get_CIH_Summary(DateTime _asatdate, string _com, string _user, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            _reportDAL = new ReptCommonDAL();
            _inventoryDAL = new InventoryDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB(_com, _user);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CIH Summary") == true) _salesDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.Get_CIH_Summary(_asatdate, _com, drow["tpl_pc"].ToString(), _user);

                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            MasterCompany _mstComp = _inventoryDAL.GetCompByCode(_com);

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = _mstComp.Mc_desc; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Cash In Hand Summary Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date :"; dataRow["c2"] = _asatdate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }
        public string GetCreditNoteDetails(DateTime _fromDate, DateTime _toDate, string _com, string _User, string _doctp, out string _err)
        {   // kapila
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _reportDAL = new ReptCommonDAL();
            DataTable GLOB_DataTable = new DataTable();

            //DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB(_com, _User);
            //if (tmp_user_pc.Rows.Count > 0)
            //{
            //    foreach (DataRow drow in tmp_user_pc.Rows)
            //    {
            _dtResults = _financialDAL.GetCreditNoteDetails(_fromDate, _toDate, _com, _doctp, _User);
            GLOB_DataTable.Merge(_dtResults);
            //    }
            //}

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _User, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        //kapila
        public string GetSOSReconcilation(DateTime _fromDate, DateTime _toDate, string _com, string _pc, string _user, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            _reportDAL = new ReptCommonDAL();
            _inventoryDAL = new InventoryDAL();
            DataTable GLOB_DataTable = new DataTable();



            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB(_com, _user);
            //DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_user);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("SOSRecon") == true) _salesDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.GetSOSReconcilation(_fromDate, _toDate, _com, drow["tpl_pc"].ToString(), _user);

                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            MasterCompany _mstComp = _inventoryDAL.GetCompByCode(_com);

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = _mstComp.Mc_desc; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "SOS Reconcilation Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }
        public string Get_Discount_Details(string _com, string in_Itemcode, string in_Brand, string in_Model, string in_Itemcat1,
string in_Itemcat2, string in_Itemcat3, string in_cust, string in_exec, DateTime _in_from, DateTime in_to, int in_fromdisc, int in_todisc, string _user, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _salesDAL = new SalesDAL();



            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("DiscountReport") == true) _salesDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.GetDiscountReportDetails(_com, drow["tpl_pc"].ToString(), in_Itemcode, in_Itemcat1, in_Itemcat2, in_Itemcat3, in_Brand, in_Model, in_cust, in_exec, _in_from, in_to, in_fromdisc, in_todisc, _user);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }
        public DataTable GetLoyalityDiscountDetails(DateTime _fdate, DateTime _tdate, string _Com, string _Pc, string _Loytp, string _custtp, string _userid)
        {//Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetLoyalityDiscountDetails(_fdate, _tdate, _Com, _Pc, _Loytp, _custtp, _userid);
        }
        public DataTable GetASalesDetails(DateTime _fromDate, DateTime _toDate, string _User, string _com, string _Pc)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetASalesDetails(_fromDate, _toDate, _User, _com, _Pc);
        }
        public DataTable GetSalesFiguresDetails(DateTime _fromDate, DateTime _toDate, string _User, string _Pc)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSalesFiguresDetails(_fromDate, _toDate, _User, _Pc);
        }
        public DataTable GetPriceLocationDetails1(int in_seq, string in_promo)
        {   // Sanjeewa
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();
            if (_securityDAL.Is_Report_DR("PriceDetails") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetPriceLocationDetails1(in_seq, in_promo);
        }
        public DataTable GetPriceCombineDetails1(string in_item, int in_seq, int in_line)
        {   // Sanjeewa
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();
            if (_securityDAL.Is_Report_DR("PriceDetails") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetPriceCombineDetails1(in_item, in_seq, in_line);
        }
        public DataTable GetPriceDetails1(string _circular, string _promocode, string _pricetp, string _pb, string _pblevel, DateTime _dtfrom, DateTime _dtto, DateTime _dtasat,
    string _customer, string _itemcode, string _brand, string _model, string _itemcat1, string _itemcat2, string _itemcat3, string _user, string _reptp)
        {
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();
            if (_securityDAL.Is_Report_DR("PriceDetails") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetPriceDetails1(_circular, _promocode, _pricetp, _pb, _pblevel, _dtfrom, _dtto, _dtasat,
            _customer, _itemcode, _brand, _model, _itemcat1, _itemcat2, _itemcat3, _user, _reptp);
        }
        public DataTable GetForwardSalesDetails(DateTime _asAtDate, string _User, string _brand, string _model, string _itemcode, string _itemcat1, string _itemcat2, string _itemcat3, string _agetp, decimal _age, string _com, string _pc, string _latestcost, string _otherloc, string _customer)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ForwardSales") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetForwardSalesDetails(_asAtDate, _User, _brand, _model, _itemcode, _itemcat1, _itemcat2, _itemcat3, _agetp, _age, _com, _pc, _latestcost, _otherloc, _customer);
        }
        public DataTable GetHireSalesCancelDetails(DateTime _fromDate, DateTime _toDate, string _User, string _pc)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("HireSaleSum") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetHireSalesCancelDetails(_fromDate, _toDate, _User, _pc);
        }
        public DataTable GetHireSalesDetails(DateTime _fromDate, DateTime _toDate, string _DocSubTp, string _PCenter, string _User, string _RepType)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("HireSaleSum") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetHireSalesDetails(_fromDate, _toDate, _DocSubTp, _PCenter, _User, _RepType);
        }
        public DataTable GetCashSalesAccountDetails(DateTime _fromDate, DateTime _toDate, string _DocSubTp, string _PCenter, string _User, string _RepType)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CashSaleSum") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetCashSalesAccountDetails(_fromDate, _toDate, _DocSubTp, _PCenter, _User, _RepType);
        }
        public DataTable GetCashSalesDODetails(DateTime _fromDate, DateTime _toDate, string _DocSubTp, string _PCenter, string _User, string _RepType)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CashSaleSum") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetCashSalesDODetails(_fromDate, _toDate, _DocSubTp, _PCenter, _User, _RepType);
        }
        public DataTable GetCashSalesCommissionDetails(DateTime _fromDate, DateTime _toDate, string _DocSubTp, string _PCenter, string _User, string _RepType)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CashSaleSum") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetCashSalesCommissionDetails(_fromDate, _toDate, _DocSubTp, _PCenter, _User, _RepType);
        }
        public DataTable GetCashSalesSummaryDetails(DateTime _fromDate, DateTime _toDate, string _DocSubTp, string _PCenter, string _User, string _RepType)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CashSaleSum") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetCashSalesSummaryDetails(_fromDate, _toDate, _DocSubTp, _PCenter, _User, _RepType);
        }
        //kapila 18/2/2013
        public DataTable Get_Receipts_Rem_Det(string _com, string _pc, string _user, DateTime _from, DateTime _to)
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();   //kapila add to logical stand by 3/12/2015
            _financialDAL = new FinancialDAL(); //kapila 20/2/2016
            List<DayEnd> _list = new List<DayEnd>();
            if (_securityDAL.Is_Report_DR("RemittanceDetail") == true && _to.Date < DateTime.Now.Date)
            {
                _list = _financialDAL.GetDayEnds(_com, _pc, _to, _to);       //kapila 1/12/2015
                foreach (DayEnd day in _list)
                {
                    if (Convert.ToDateTime(day.Upd_cre_dt).Date < DateTime.Now.Date)
                        _salesDAL.ConnectionOpen_DR();
                }
            }
            return _salesDAL.Get_Receipts_Rem_Det(_com, _pc, _user, _from, _to);
        }
        public DataTable GetLoc_from_Hierachy_withOpteam(string com, string channel, string subChannel, string area, string region, string zone, string pc_code, string opteam)
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("LocHeirarchySearch") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetLoc_from_Hierachy_withOpteam(com, channel, subChannel, area, region, zone, pc_code, opteam);
        }
        public Boolean ActivePromotionDetails(string _com, string _circular, string _promocode, string _pricebook, string _pblevel, string _status, string _paytp, string _isasatdate, DateTime _fDate, DateTime _tDate, DateTime _asatDate, string _User, string _isallloc, out string _err, out string _filePath)
        {   // Sanjeewa

            DataTable _dtResults;
            Boolean _isDataAvailable;
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("promo_det_rep") == true) _salesDAL.ConnectionOpen_DR();
            _dtResults = _salesDAL.ActivePromotionDetails(_com, _circular, _promocode, _pricebook, _pblevel, _status, _paytp, _isasatdate, _fDate, _tDate, _asatDate, _User, _isallloc);

            _isDataAvailable = true;
            if (_dtResults.Rows.Count > 0)
            { _isDataAvailable = true; }
            else
            { _isDataAvailable = false; }

            _err = "";
            _filePath = "";

            _filePath = ExportExcel2007(_com, _User, _dtResults, out _err);

            if (_dtResults.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
            return _isDataAvailable;
        }
        public DataTable BOCCustomersPrint(string _com, string _loc, string _batch, DateTime _fromDate, DateTime _toDate, string _user)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.BOCCustomersPrint(_com, _loc, _batch, _fromDate, _toDate, _user);
        }
        public DataTable BOCCustReceipt(string _com, string _loc, string _ser)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.BOCCustReceipt(_com, _loc, _ser);
        }
        public DataTable GetDeliveryCustomerPendingDetails(DateTime _fdate, DateTime _tdate, string _Com, string _Pc, string _cat1, string _cat2, string _cat3, string _item, string _brand, string _model, string _customer, string _userid, Int16 _cost)
        {//Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("DCNPending") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetDeliveryCustomerPendingDetails(_fdate, _tdate, _Com, _Pc, _cat1, _cat2, _cat3, _item, _brand, _model, _customer, _userid, _cost);
        }
        public DataTable GetSalesPromoterDetails(DateTime _fDate, DateTime _tDate, string _Com, string _Pc)
        {   // Wimal 
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("salePromoterDetails") == true) _salesDAL.ConnectionOpen_DR();

            return _salesDAL.GetSalesPromoterDetails(_fDate, _tDate, _Com, _Pc);
        }
        //kapila
        public DataTable GetPricebyCircular(string _cir, string _promo)
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("PricebyCircular") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetPricebyCircular(_cir, _promo);
        }
        public DataTable GetSalesTargetAchievementDetails(DateTime _fromDate, DateTime _toDate, string _brand, string _Com, string _Pc, string _User)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("SalesTargetAchievementDetails") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetSalesTargetAchievementDetails(_fromDate, _toDate, _brand, _Com, _Pc, _User);
        }
        public DataTable PrintTempIssueItems(string _com, string _loc, DateTime _fromDate, DateTime _toDate)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.PrintTempIssueItems(_com, _loc, _fromDate, _toDate);
        }
        public DataTable GetSerialCompanyLocationAge(string _user, string _company, string _location)
        {
            //Wimal @ 14/08/2013
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("SerialCompanyLocationAge") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetSerialCompanyLocationAge(_user, _company, _location);
        }
        //Written By Nadeeka on 28/02/2013
        public DataTable ProcessMovementAuditTrial(DateTime in_FromDate, DateTime in_ToDate, string in_DocType, string in_Location_code, string in_Company, string in_Brand, string in_Model, string in_Itemcode, string in_Itemcat1, string in_Itemcat2, string in_Itemcat3, string in_direc, string in_user, string in_subType, string _docno)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("MovementAuditTrial") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.ProcessMovementAuditTrial(in_FromDate, in_ToDate, in_DocType, in_Location_code, in_Company, in_Brand, in_Model, in_Itemcode, in_Itemcat1, in_Itemcat2, in_Itemcat3, in_direc, in_user, in_subType, _docno);
        }

        public DataTable ProcessMovementAuditTrial_ARL(DateTime in_FromDate, DateTime in_ToDate, string in_DocType, string in_Location_code, string in_Oth_Location_code, string in_Company, string in_Brand, string in_Model, string in_Itemcode, string in_Itemcat1, string in_Itemcat2, string in_Itemcat3, string in_direc, string in_user, string in_subType, string _docno)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("MovementAuditTrial") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.ProcessMovementAuditTrial_ARL(in_FromDate, in_ToDate, in_DocType, in_Location_code, in_Oth_Location_code, in_Company, in_Brand, in_Model, in_Itemcode, in_Itemcat1, in_Itemcat2, in_Itemcat3, in_direc, in_user, in_subType, _docno);
        }

        public DataTable GetSerialBalance_Curr(string _com, string _loc, string _item, string _itemstatus, string _withRCC)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("SubLocationStock") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetSerialBalance_Curr(_com, _loc, _item, _itemstatus, _withRCC);
        }
        public DataTable GetSerialBalance()
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("GetSerialBalance") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetSerialBalance();
        }
        public DataTable GetInsuredStockDetails(string _user, string _com, string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("InsuredStockDetails") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetInsuredStockDetails(_user, _com, _loc);
        }
        public DataTable ProcessBOCReservedSerials(DateTime in_FromDate, DateTime in_ToDate, string in_DocType, string in_Location_code, string in_Company, string in_Brand, string in_Model, string in_Itemcode, string in_Itemcat1, string in_Itemcat2, string in_Itemcat3, string in_direc, string in_user, string in_subType)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("BOCReservedSerials") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.ProcessBOCReservedSerials(in_FromDate, in_ToDate, in_DocType, in_Location_code, in_Company, in_Brand, in_Model, in_Itemcode, in_Itemcat1, in_Itemcat2, in_Itemcat3, in_direc, in_user, in_subType);
        }
        public DataTable getSubLocationStock(string _com, string _mloc, string _sloc, Int32 _isOpr, DateTime _endDate, string _user, Int32 _isRep)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("SubLocationStock") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.getSubLocationStock(_com, _mloc, _sloc, _isOpr, _endDate, _user, _isRep);
        }
        //Lakshan 2016-10-05
        public DataTable StockBalanceSearchNew(DateTime _from, DateTime _to, string _item, string _loc, string _com, bool isStatus, string _doctype = null)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("Stock_ledger_form") == true)
            {
                _inventoryDAL.ConnectionOpen_DR();
            }
            return _inventoryDAL.StockBalanceSearchNew(_from, _to, _item, _loc, _com, isStatus, _doctype);
        }
        //Lakshika 2016-10-04
        public DataTable GetPurchaseReturnDetails(DateTime _fromDate, DateTime _toDate, string _com, string _loc, string _channel, string _supplier, string _user)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("PurchaseReturnReport") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetPurchaseReturnDetails(_fromDate, _toDate, _com, _loc, _channel, _supplier, _user);
        }
        //Add by Lakshan 03 Oct 2016
        public DataTable GetInventoryBalanceAsAt(
           string _userr, string _chnl, string _brand, string _model, string _item, bool _itemSts, string _itmCat1, string _itmCat2, string _itmCat3,
           Int32 _withCost, DateTime _asAtDate, Int32 _withSer, Int32 _status, string _com, string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("Stock_ledger_form") == true)
            {
                _inventoryDAL.ConnectionOpen_DR();
            }
            return _inventoryDAL.GetInventoryBalanceAsAt(
             _userr, _chnl, _brand, _model, _item, _itemSts, _itmCat1, _itmCat2, _itmCat3,
             _withCost, _asAtDate, _withSer, _status, _com, _loc);
        }
        public DataTable ProcessPSI(DateTime in_FromDate, DateTime in_ToDate, string in_user_id, string in_Location_code, string in_Company, string in_Brand, string in_Model, string in_Itemcode, string in_Itemcat1, string in_Itemcat2, string in_Itemcat3)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("InventoryStatement") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.ProcessPSI(in_FromDate, in_ToDate, in_user_id, in_Location_code, in_Company, in_Brand, in_Model, in_Itemcode, in_Itemcat1, in_Itemcat2, in_Itemcat3);
        }
        //Lakshika 2016-09-05
        public DataTable Get_INR_SER_DATA_ADVANCED(InventorySerialN _ser)
        {

            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            _financialDAL = new FinancialDAL();
            if (_securityDAL.Is_Report_DR("SerialNoAdvanced") == true) _financialDAL.ConnectionOpen_DR();
            return _inventoryDAL.Get_INR_SER_DATA_ADVANCED(_ser);
        }
        public string Get_GIT_Details(DateTime _asat, string _com, string in_Itemcode, string in_Brand, string in_Model, string in_Itemcat1,
    string in_Itemcat2, string in_Itemcat3, string in_Itemcat4, string in_Itemcat5, string _user, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _inventoryDAL = new InventoryDAL();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("GITReport") == true) _inventoryDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _inventoryDAL.Get_GIT_Details(_asat, _com, drow["tpl_pc"].ToString(), in_Itemcode, in_Brand, in_Model, in_Itemcat1, in_Itemcat2, in_Itemcat3, in_Itemcat4, in_Itemcat5, _user);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }
        //modified by kelum 2016-May-11
        public DataTable StockBalanceSearch1(DateTime _from, DateTime _to, string _item, string _loc, string _com, bool isStatus, string _doctype = null)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("StockLedger") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.StockBalanceSearch1(_from, _to, _item, _loc, _com, isStatus, _doctype);
        }
        //modified b kelum on 2016-May-11
        public DataTable SerialBalanceSearch1(DateTime _from, DateTime _to, string _item, string _loc, string _com, string _serial = null)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("StockLedger") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.SerialBalanceSearch1(_from, _to, _item, _loc, _com, _serial);
        }
        public DataTable GetSIntrDetails(string _user, DateTime _fromDate, DateTime _toDate, string _brand, string _model, string _itemcode, string _itemcat1, string _itemcat2, string _itemcat3, string _doctype, string _reptpdesc, string _com, string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("InterTransferDtl") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetSIntrDetails(_user, _fromDate, _toDate, _brand, _model, _itemcode, _itemcat1, _itemcat2, _itemcat3, _doctype, _reptpdesc, _com, _loc);
        }
        public DataTable GetReservedSerialDetails(DateTime _fromDate, DateTime _toDate, string _user, string _com, string _pc)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ReservedSerialtoCust") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetReservedSerialDetails(_fromDate, _toDate, _user, _com, _pc);
        }

        public DataTable GetStockBalanceCurrent(string _user, string _channel, string _brand, string _model, string _itemcode, string _Itemstatus,
            string _itemcat1, string _itemcat2, string _itemcat3, Int16 _withcost, Int16 _serialrep, string _com, string _loc, string _withGIT, string _withRCC, string _withJob, Int16 _discontinue)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CurrentInvBal") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetStockBalanceCurrent(_user, _channel, _brand, _model, _itemcode, _Itemstatus, _itemcat1, _itemcat2, _itemcat3, _withcost, _serialrep, _com, _loc, _withGIT, _withRCC, _withJob, _discontinue);
        }

        public DataTable GetStockBalanceCurrent_Expiry(string _user, string _channel, string _brand, string _model, string _itemcode, string _Itemstatus,
           string _itemcat1, string _itemcat2, string _itemcat3, Int16 _withcost, Int16 _serialrep, string _com, string _loc, string _withGIT, string _withRCC, string _withJob, Int16 _discontinue)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CurrentInvBal") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetStockBalanceCurrent_Expiry(_user, _channel, _brand, _model, _itemcode, _Itemstatus, _itemcat1, _itemcat2, _itemcat3, _withcost, _serialrep, _com, _loc, _withGIT, _withRCC, _withJob, _discontinue);
        }
        public DataTable GetSGRANDetails(string _user, DateTime _fromDate, DateTime _toDate, string _brand, string _model, string _itemcode, string _itemcat1, string _itemcat2, string _itemcat3, string _doctype, string _reptpdesc)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("GRANDtl") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetSGRANDetails(_user, _fromDate, _toDate, _brand, _model, _itemcode, _itemcat1, _itemcat2, _itemcat3, _doctype, _reptpdesc);
        }
        public DataTable GetStockBalanceWithSerial_Asat(string _user, string _channel, string _brand, string _model, string _itemcode, string _Itemstatus,
    string _itemcat1, string _itemcat2, string _itemcat3, Int16 _withcost, DateTime _asatdate, Int16 _serialrep, Int16 _status, string _Loc, string _Com)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("InvAsatBalwithSerial") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetStockBalanceWithSerial_Asat(_user, _channel, _brand, _model, _itemcode, _Itemstatus, _itemcat1, _itemcat2, _itemcat3, _withcost, _asatdate, _serialrep, _status, _Loc, _Com);
        }
        public DataTable GetStockBalanceWithSerial(string _user, string _channel, string _brand, string _model, string _itemcode, string _Itemstatus,
   string _itemcat1, string _itemcat2, string _itemcat3, Int16 _withcost, DateTime _asatdate, Int16 _serialrep, Int16 _status)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("InvAsatBalwithSerial") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetStockBalanceWithSerial(_user, _channel, _brand, _model, _itemcode, _Itemstatus, _itemcat1, _itemcat2, _itemcat3, _withcost, _asatdate, _serialrep, _status);
        }
        public DataTable GetStockBalanceWithCost(string _user, string _channel, string _brand, string _model, string _itemcode, string _Itemstatus,
   string _itemcat1, string _itemcat2, string _itemcat3, Int16 _withcost, DateTime _asatdate, Int16 _serialrep, Int16 _status, string _Loc, string _Com, string _color, string _size)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("InvAsatBalwithCost") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetStockBalanceWithCost(_user, _channel, _brand, _model, _itemcode, _Itemstatus, _itemcat1, _itemcat2, _itemcat3, _withcost, _asatdate, _serialrep, _status, _Loc, _Com, _color, _size);
        }
        public DataTable GetFATDetails1(DateTime _fromDate, DateTime _toDate, string _User, string _com, string _pc, string _docType)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("FATDetails") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetFATDetails1(_fromDate, _toDate, _User, _com, _pc, _docType);
        }
        public DataTable GetOtherShopDO(DateTime _fromDate, DateTime _toDate, string _Cust, string _brand, string _model, string _itemcode,
    string _itemcat1, string _itemcat2, string _itemcat3, string _User, string _InvNo, Int16 _isExport)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("OtherShopDO") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetOtherShopDO(_fromDate, _toDate, _Cust, _brand, _model, _itemcode, _itemcat1, _itemcat2, _itemcat3, _User, _InvNo, _isExport);
        }
        public DataTable GetStockBalance(string _user, string _channel, string _brand, string _model, string _itemcode, string _Itemstatus,
    string _itemcat1, string _itemcat2, string _itemcat3, Int16 _withcost, DateTime _asatdate, Int16 _serialrep, Int16 _discontinue)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CurrInvBal") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetStockBalance(_user, _channel, _brand, _model, _itemcode, _Itemstatus, _itemcat1, _itemcat2, _itemcat3, _withcost, _asatdate, _serialrep, _discontinue);
        }
        public DataTable GetFIFONotFollowedDetails1(string _user, string _brand, string _model, string _itemcode, string _Itemstatus,
    string _itemcat1, string _itemcat2, string _itemcat3, DateTime _asatdate, string _com, string _loc, DateTime _fromDate, DateTime _toDate, Int16 _fifo)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("FIFONotFollow") == true) _inventoryDAL.ConnectionOpen_DR();  //kapila 6/9/2016
            return _inventoryDAL.GetFIFONotFollowedDetails1(_user, _brand, _model, _itemcode, _Itemstatus, _itemcat1, _itemcat2, _itemcat3, _asatdate, _com, _loc, _fromDate, _toDate, _fifo);
        }
        public DataTable GetRCCSerialSearchData_Stock(string _com, string _loc, int _isSameLoc, int _isStockItem, string _searchText, string _searchCriteria)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();   //30/8/2016
            if (_securityDAL.Is_Report_DR("RCCSerialSearch") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetRCCSerialSearchData(_com, _loc, _isSameLoc, _isStockItem, _searchText, _searchCriteria);
        }
        //Written By Nadeeka on 27/02/2013
        public DataTable ProcessMovementAuditTrialWithSerial(DateTime in_FromDate, DateTime in_ToDate, string in_DocType, string in_Location_code, string in_Company, string in_Brand, string in_Model, string in_Itemcode, string in_Itemcat1, string in_Itemcat2, string in_Itemcat3, string in_direc, string in_user, string in_subType)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("MovementAuditTrial") == true) _inventoryDAL.ConnectionOpen_DR(); //added kapila 3/10/2016
            return _inventoryDAL.ProcessMovementAuditTrialWithSerial(in_FromDate, in_ToDate, in_DocType, in_Location_code, in_Company, in_Brand, in_Model, in_Itemcode, in_Itemcat1, in_Itemcat2, in_Itemcat3, in_direc, in_user, in_subType);
        }
        //Written By Nadeeka on 23/02/2013
        public DataTable ProcessInventoryStatement(DateTime in_FromDate, DateTime in_ToDate, string in_user_id, string in_Location_code, string in_Company, string in_Brand, string in_Model, string in_Itemcode, string in_Itemcat1, string in_Itemcat2, string in_Itemcat3)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("InventoryStatement") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.ProcessInventoryStatement(in_FromDate, in_ToDate, in_user_id, in_Location_code, in_Company, in_Brand, in_Model, in_Itemcode, in_Itemcat1, in_Itemcat2, in_Itemcat3);
        }
        public DataTable ProcessMovementListing(DateTime in_FromDate, DateTime in_ToDate, string in_user_id, string in_Location_code, string in_Company, string in_Brand, string in_Model, string in_Itemcode, string in_Itemcat1, string in_Itemcat2, string in_Itemcat3)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("InventoryStatement") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.ProcessMovementListing(in_FromDate, in_ToDate, in_user_id, in_Location_code, in_Company, in_Brand, in_Model, in_Itemcode, in_Itemcat1, in_Itemcat2, in_Itemcat3);
        }
        //Written By Nadeeka on 01/01/2013
        public DataTable SerialAgeReport(DateTime in_AsatDate, string in_user_id, string in_Company, string in_item, string in_Brand, string in_cat1, string in_cat2, string in_cat3, string in_model, string in_itemsStatus, string in_loc, Int32 in_fromage, Int32 in_toage, Int32 in_iscomage)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("SerialAgeReport") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.SerialAgeReport(in_AsatDate, in_user_id, in_Company, in_item, in_Brand, in_cat1, in_cat2, in_cat3, in_model, in_itemsStatus, in_loc, in_fromage, in_toage, in_iscomage);
        }
        //Written By Nadeeka on 01/01/2013
        public DataTable NonMovingReport(DateTime in_FromDate, DateTime in_ToDate, string in_user_id, string in_Company, string in_item, string in_Brand, string in_cat1, string in_cat2, string in_cat3, string in_model, Int16 in_AllCompany)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("NonMoving") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.NonMovingReport(in_FromDate, in_ToDate, in_user_id, in_Company, in_item, in_Brand, in_cat1, in_cat2, in_cat3, in_model, in_AllCompany);
        }
        //Written By Nadeeka on 01/01/2013
        public DataTable FastMovingReport(DateTime in_FromDate, DateTime in_ToDate, string in_user_id, string in_Company, string in_item, string in_Brand, string in_cat1, string in_cat2, string in_cat3, string in_model, Int16 in_AllCompany, Int16 in_isFast, string in_pc)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("FastMoving") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.FastMovingReport(in_FromDate, in_ToDate, in_user_id, in_Company, in_item, in_Brand, in_cat1, in_cat2, in_cat3, in_model, in_AllCompany, in_isFast, in_pc);
        }
        public DataTable GetCurrBalancewithPriceDetails(string _user, string _com, string _loc, string _supplier, string in_Brand, string in_Model, string in_Itemcode, string in_Itemcat1, string in_Itemcat2, string in_Itemcat3)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CurrBalwithPrice") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetCurrBalancewithPriceDetails(_user, _com, _loc, _supplier, in_Brand, in_Model, in_Itemcode, in_Itemcat1, in_Itemcat2, in_Itemcat3);
        }

        public DataTable GetpoSummary(string _com, string _type, string _supplier, string _item, string _cat1, string _cat2, string _cat3, string _brand, String _model, DateTime _fdate, DateTime _tdate)
        {   // Nadeeka

            _securityDAL = new SecurityDAL();
            InventoryDAL _inventoryDAL = new InventoryDAL();
            if (_securityDAL.Is_Report_DR("POSummary") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetpoSummary(_com, _type, _supplier, _item, _cat1, _cat2, _cat3, _brand, _model, _fdate, _tdate);
        }
        public DataTable GetPendingMyAbansDocs()
        {
            _generalDAL = new GeneralDAL();
            return _generalDAL.GetPendingMyAbansDocs();
        }
        public string inventoryBalance_Asat(string _user, string _channel, string _brand, string _model, string _itemcode, string _Itemstatus,
string _itemcat1, string _itemcat2, string _itemcat3, string _itemcat4, string _itemcat5, Int16 _withcost, DateTime _asatdate, Int16 _serialrep, string _com, string _loc, string _withRCC, string _withJob, string _withGIT, out string _err)
        {
            string _filePath = string.Empty;
            string _err1 = "";
            try
            {
                _err = string.Empty;


                DataTable _dtResults;
                _securityDAL = new SecurityDAL();
                _reportDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();

                if (_securityDAL.Is_Report_DR("InvAsatBalwithCost") == true) _inventoryDAL.ConnectionOpen_DR();

                DataTable GLOB_DataTable = new DataTable();

                DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_user);
                if (tmp_user_pc.Rows.Count > 0)
                {
                    foreach (DataRow drow in tmp_user_pc.Rows)
                    {
                        _dtResults = _inventoryDAL.GetStockBalanceWithCost_SCM(_user, _channel, _brand, _model, _itemcode, _Itemstatus, _itemcat1, _itemcat2, _itemcat3, _withcost, _asatdate, _serialrep, 0, drow["tpl_pc"].ToString(), drow["tpl_com"].ToString());
                        GLOB_DataTable.Merge(_dtResults);
                    }
                }

                DataTable TitleData = new DataTable();
                DataRow dataRow;
                DataColumn dataCol = new DataColumn();
                dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
                dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
                dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
                dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
                dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
                dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
                dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
                dataRow = TitleData.NewRow(); dataRow["c6"] = "INVENTORY BALANCE AS AT DATE (ITEMS)"; TitleData.Rows.Add(dataRow);
                dataRow = TitleData.NewRow();


                _err1 = _err1 + "before TitleData" + _user;
                System.IO.File.WriteAllText(@"C:\SUN\error.txt", _err1);
                TitleData.Rows.Add(dataRow);

                //  _err = "";

                _filePath = "";

                _err1 = _err1 + "before export" + _user;
                System.IO.File.WriteAllText(@"C:\SUN\error.txt", _err1);

                _filePath = ExportExcel2007(_com, _user, TitleData, GLOB_DataTable, out _err);

                _err1 = _err1 + "after export" + " " + _err + _user;
                System.IO.File.WriteAllText(@"C:\SUN\error.txt", _err1);

                if (GLOB_DataTable.Rows.Count == 0)
                {
                    _err = "No Records Found.";
                }
            }
            catch (Exception ex)
            {
                _err = ex.Message;
                System.IO.File.WriteAllText(@"C:\SUN\error.txt", _err);

            }
            finally
            {
                _err1 = _err1 + "finalized" + _user;
                System.IO.File.WriteAllText(@"C:\SUN\error.txt", _err1);
            }
            return _filePath;
        }

        public DataTable ProcessInventoryStatement_SCM(DateTime in_FromDate, DateTime in_ToDate, string in_user_id, string in_Location_code, string in_Company, string in_Brand, string in_Model, string in_Itemcode, string in_Itemcat1, string in_Itemcat2, string in_Itemcat3)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("InventoryStatement") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.ProcessInventoryStatement_SCM(in_FromDate, in_ToDate, in_user_id, in_Location_code, in_Company, in_Brand, in_Model, in_Itemcode, in_Itemcat1, in_Itemcat2, in_Itemcat3);
        }

        public string ConsignDetailsReport(DateTime _fromDate, DateTime _toDate, string _com, string _user, string _pb, string _pblvl, out string _err)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();
            if (_securityDAL.Is_Report_DR("ConsignDetail") == true) _inventoryDAL.ConnectionOpen_DR();

            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults = new DataTable(); ;
            DataTable _dtDispatch = new DataTable();

            _dtResults = _inventoryDAL.ConsignDetailsReport(_fromDate, _toDate, _com, _user, _pb, _pblvl);
            _dtDispatch.Merge(_dtResults);


            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Consignment Details Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, TitleData, _dtDispatch, out _err);

            if (_dtDispatch.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public string getItemListDetails(string _cat, string _cat1, string _com, string _user, out string _err)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();
            if (_securityDAL.Is_Report_DR("ItemList") == true) _inventoryDAL.ConnectionOpen_DR();

            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults = new DataTable(); ;
            DataTable _dtDispatch = new DataTable();

            _dtResults = _inventoryDAL.getItemListDetails(_cat, _cat1);
            _dtDispatch.Merge(_dtResults);

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = _com; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Item Listing Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "";
            dataRow["c4"] = "";
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, TitleData, _dtDispatch, out _err);

            if (_dtDispatch.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public string SRMRNStatusReport(DateTime _fromtDate, DateTime _totDate, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _Cat4, string _Cat5, string _Com, string _OtherLoc, string _User, out string _err)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();
            if (_securityDAL.Is_Report_DR("MRNStatus") == true) _inventoryDAL.ConnectionOpen_DR();

            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults = new DataTable(); ;
            DataTable _dtDispatch = new DataTable();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _inventoryDAL.SRMRNStatusReport(_fromtDate, _totDate, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _Com, drow["tpl_pc"].ToString(), _OtherLoc, _User);
                    _dtDispatch.Merge(_dtResults);
                }
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Showroom Request Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromtDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _totDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, TitleData, _dtDispatch, out _err);

            if (_dtDispatch.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }
        public DataTable CusDecEntryRequest(string in_user, string in_Company, DateTime in_fromdate, DateTime in_todate, string in_subtp, Int32 _in_isall)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CusDecEntryRequest") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.CusDecEntryRequest(in_user, in_Company, in_fromdate, in_todate, in_subtp, _in_isall);
        }
        //dilshan on 22/03/2018
        public DataTable TRNoteRequest(string in_user, string in_Company, DateTime in_fromdate, DateTime in_todate, string in_subtp, Int32 _in_isall, string in_docno, string entry01, string entry02)
        {//Modified By Dulaj 2018/May/28 added entry 01 and 02
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("TRNoteRequest") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.TRNoteRequest(in_user, in_Company, in_fromdate, in_todate, in_subtp, _in_isall, in_docno, entry01, entry02);
        }
        //kapila
        public DataTable ReservationReport(string in_user, string in_Company, string in_loc, DateTime in_fromdate, DateTime in_todate, DateTime in_expdate, string in_item, string in_Brand, string in_cat1, string in_cat2, string in_cat3, string in_cat4, string in_cat5, string in_model)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ReservationReport") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.ReservationReport(in_user, in_Company, in_loc, in_fromdate, in_todate, in_expdate, in_item, in_Brand, in_cat1, in_cat2, in_cat3, in_cat4, in_cat5, in_model);

        }
        //kapila
        public DataTable MRNStatusReport(string in_user, string in_Company, string in_loc, string in_to, DateTime in_fromdate, DateTime in_todate, string in_item, string in_Brand, string in_cat1, string in_cat2, string in_cat3, string in_cat4, string in_cat5, string in_model)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("MRNStatus") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.MRNStatusReport(in_user, in_Company, in_loc, in_to, in_fromdate, in_todate, in_item, in_Brand, in_cat1, in_cat2, in_cat3, in_cat4, in_cat5, in_model);
        }
        //kapila
        public DataTable ToBondStatusReport(DateTime _fromdate, DateTime _todate, string _tobondno, string _grnno, string _reqno, string in_user_id, string in_Company, string in_item, string in_Brand, string in_cat1, string in_cat2, string in_cat3, string in_cat4, string in_cat5, string in_model, string in_loc)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("TobondStatus") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.ToBondStatusReport(_fromdate, _todate, _tobondno, _grnno, _reqno, in_user_id, in_Company, in_item, in_Brand, in_cat1, in_cat2, in_cat3, in_cat4, in_cat5, in_model, in_loc);
        }
        //Sanjeewa
        public DataTable ImportScheduleReport(DateTime _fromdate, DateTime _todate, string in_Company, string _adminteam, string in_user_id)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ImportSchedule") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.ImportScheduleReport(_fromdate, _todate, in_Company, _adminteam, in_user_id);
        }
        //sube
        public DataTable ImportScheduleSun(DateTime _fromdate, DateTime _todate, string in_Company, string _adminteam, string in_user_id)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ImportSchedule") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.ImportScheduleSun(_fromdate, _todate, in_Company, _adminteam, in_user_id);
        }
        public DataTable ImportScheduleGRNDtl(DateTime _fromdate, DateTime _todate, string in_Company, string _adminteam, string in_user_id)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ImportSchedule") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.ImportScheduleGRNDtl(_fromdate, _todate, in_Company, _adminteam, in_user_id);
        }
        public string ImportScheduleReport_Excel(DateTime _fromdate, DateTime _todate, string in_Company, string _adminteam, string in_user_id, out string _err)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ImportSchedule") == true) _inventoryDAL.ConnectionOpen_DR();

            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtDispatch = new DataTable();

            _dtDispatch = _inventoryDAL.ImportScheduleReport_Excel(_fromdate, _todate, in_Company, _adminteam, in_user_id);

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Import Schedule Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromdate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _todate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(in_Company, in_user_id, TitleData, _dtDispatch, out _err);

            if (_dtDispatch.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        //kapila
        public DataTable ItemBufferStatusReport(string in_user_id, string in_Company, string in_item, string in_Brand, string in_cat1, string in_cat2, string in_cat3, string in_cat4, string in_cat5, string in_model, string in_loc, string _in_subtp)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("Itembufferstatus") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.ItemBufferStatusReport(in_user_id, in_Company, in_item, in_Brand, in_cat1, in_cat2, in_cat3, in_cat4, in_cat5, in_model, in_loc, _in_subtp);
        }

        public string ItemBufferStatusReport_Excel(string in_user_id, string in_Company, string in_item, string in_Brand, string in_cat1, string in_cat2, string in_cat3, string in_cat4, string in_cat5, string in_model, string in_loc, string _in_subtp, out string _err)
        {
            int in_ISlast;
            string _inLoc = "";
            _err = string.Empty;
            string _filePath = string.Empty;
            in_ISlast = 1;

            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("Itembufferstatus") == true) _inventoryDAL.ConnectionOpen_DR();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(in_Company, in_user_id);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _inLoc = drow["tpl_pc"].ToString();
                    //_securityDAL = new SecurityDAL();
                    //if (_securityDAL.Is_Report_DR("CustomerDetails") == true) _salesDAL.ConnectionOpen_DR();
                    _dtResults = _inventoryDAL.ItemBufferStatusReport(in_user_id, in_Company, in_item, in_Brand, in_cat1, in_cat2, in_cat3, in_cat4, in_cat5, in_model, drow["tpl_pc"].ToString(), _in_subtp);
                    if (_dtResults != null)
                    {
                        GLOB_DataTable.Merge(_dtResults);
                        in_ISlast = in_ISlast + 1;
                    }
                }
            }

            MasterCompany _mstComp = _inventoryDAL.GetCompByCode(in_Company);

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = _mstComp.Mc_desc; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Item Buffer Status Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "As at Date :"; dataRow["c2"] = DateTime.Now;
            dataRow["c4"] = "Location"; dataRow["c5"] = _inLoc;
            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(in_Company, in_user_id, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public DataTable PrintMoveCostDetailReport(string _com, string _loc, DateTime in_FromDate, DateTime in_ToDate, string _doctp, string _direct, string in_item, string in_Brand, string in_cat1, string in_cat2, string in_cat3, string in_cat4, string in_cat5, string in_model, string _docno)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("MoveCostDet") == true && in_FromDate.Date < DateTime.Now.Date) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.PrintMoveCostDetailReport(_com, _loc, in_FromDate, in_ToDate, _doctp, _direct, in_item, in_Brand, in_cat1, in_cat2, in_cat3, in_cat4, in_cat5, in_model, _docno);

        }
        public DataTable PrintTransDetListReport(string _com, string _loc, DateTime in_FromDate, DateTime in_ToDate, string in_item, string in_Brand, string in_cat1, string in_cat2, string in_cat3, string in_cat4, string in_cat5, string in_model)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ItmTransDetList") == true && in_FromDate.Date < DateTime.Now.Date) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.PrintTransDetListReport(_com, _loc, in_FromDate, in_ToDate, in_item, in_Brand, in_cat1, in_cat2, in_cat3, in_cat4, in_cat5, in_model);

        }
        public DataTable SerialAgeReport_SCM(DateTime in_AsatDate, string in_user_id, string in_Company, string in_item, string in_Brand, string in_cat1, string in_cat2, string in_cat3, string in_cat4, string in_cat5, string in_model, string in_itemsStatus, string in_loc, Int32 in_age_frm, Int32 in_age_to)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("SerialAgeReport") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.SerialAgeReport_SCM(in_AsatDate, in_user_id, in_Company, in_item, in_Brand, in_cat1, in_cat2, in_cat3, in_cat4, in_cat5, in_model, in_itemsStatus, in_loc, in_age_frm, in_age_to);
        }

        public DataTable GetStockBalanceWithSerial_Asat_SCM(string _user, string _channel, string _brand, string _model, string _itemcode, string _Itemstatus,
   string _itemcat1, string _itemcat2, string _itemcat3, Int16 _withcost, DateTime _asatdate, Int16 _serialrep, Int16 _status, string _Loc, string _Com)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("InvAsatBalwithSerial") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetStockBalanceWithSerial_Asat_SCM(_user, _channel, _brand, _model, _itemcode, _Itemstatus, _itemcat1, _itemcat2, _itemcat3, _withcost, _asatdate, _serialrep, _status, _Loc, _Com);
        }

        public string GetItemConditionDetail(string _itemcode, string _brand, string _model, string _itemcat1, string _itemcat2, string _itemcat3, string _itemcat4, string _itemcat5,
            string _Itemstatus, string _Com, string _condtp, string _user, string _itemcond, string _allroute, string _route, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            DataTable GLOB_DataTable = new DataTable();

            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();
            if (_securityDAL.Is_Report_DR("ItemConditionDtl") == true) _inventoryDAL.ConnectionOpen_DR();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_Com, _user);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _inventoryDAL.GetItemConditionDetail(_itemcode, _brand, _model, _itemcat1, _itemcat2, _itemcat3, _itemcat4, _itemcat5, _Itemstatus, _Com, drow["tpl_pc"].ToString(), _condtp, _user, _itemcond, _allroute, _route);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public string Get_Receipt_Sett_Det(DateTime _from, DateTime _to, string _com, string _user, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            DataTable GLOB_DataTable = new DataTable();

            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();
            if (_securityDAL.Is_Report_DR("RecSettDtl") == true) _salesDAL.ConnectionOpen_DR();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.Get_Receipt_Sett_Det(_from, _to, _com, drow["tpl_pc"].ToString(), _user);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public DataTable GetStockBalanceWithCost_SCM(string _user, string _channel, string _brand, string _model, string _itemcode, string _Itemstatus,
  string _itemcat1, string _itemcat2, string _itemcat3, Int16 _withcost, DateTime _asatdate, Int16 _serialrep, Int16 _status, string _Loc, string _Com)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("InvAsatBalwithCost") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetStockBalanceWithCost_SCM(_user, _channel, _brand, _model, _itemcode, _Itemstatus, _itemcat1, _itemcat2, _itemcat3, _withcost, _asatdate, _serialrep, _status, _Loc, _Com);
        }

        public DataTable get_ref_rpt_para(string _pty_tp, string _pty_cd)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.get_ref_rpt_para(_pty_tp, _pty_cd);
        }

        //kapila
        public DataTable AgeReport_SCM(DateTime in_AsatDate, string in_user_id, string in_Company, string in_item, string in_Brand, string in_cat1, string in_cat2, string in_cat3, string in_cat4, string in_cat5, string in_model, string in_itemsStatus, string in_loc)
        {
            _inventoryDAL = new InventoryDAL();
            //DataTable _dt = new DataTable();
            //_dt.Columns.AddRange(new DataColumn[17] { new DataColumn("inb_com"), new DataColumn("inb_loc"), new DataColumn("ml_loc_desc"), new DataColumn("inb_doc_no"), new DataColumn("inb_doc_dt"), new DataColumn("inb_itm_cd"), new DataColumn("inb_itm_stus"), new DataColumn("mi_shortdesc"), new DataColumn("mi_model"), new DataColumn("mi_brand"), new DataColumn("mi_cate_1"), new DataColumn("mi_cate_2"), new DataColumn("mi_cate_3"), new DataColumn("mi_cate_4"), new DataColumn("mi_cate_5"), new DataColumn("inb_qty"), new DataColumn("inb_unit_cost") });
            //DataTable _dtPara = _inventoryDAL.get_ref_rpt_para("COM", in_Company);
            //foreach (DataRow row in _dtPara.Rows)
            //{
            //    DataTable _tmpDt = _inventoryDAL.AgeReport_SCM(in_AsatDate, in_user_id, in_Company, in_item, in_Brand, in_cat1, in_cat2, in_cat3, in_cat4, in_cat5, in_model, in_itemsStatus, in_loc, Convert.ToInt32(row["rpp_from"]), Convert.ToInt32(row["rpp_to"]), Convert.ToInt32(row["rpp_para_cd"]));
            //    _dt.Merge(_tmpDt, true, MissingSchemaAction.Ignore);
            //}
            //return _dt;
            return _inventoryDAL.AgeReport_SCM(in_AsatDate, in_user_id, in_Company, in_item, in_Brand, in_cat1, in_cat2, in_cat3, in_cat4, in_cat5, in_model, in_itemsStatus, in_loc, 0, 90, 1);
        }

        public DataTable getpurchaseOrderSummery(string _com, string _loc, string _purType, string _supplier, string _itemcode, string _cat1, string _cat2, DateTime _fromDate, DateTime _toDate, string doctype, string docno)
        {

            _inventoryDAL = new InventoryDAL();
            //DataTable _dt = new DataTable();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("purchaseordersummery") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.getpurchaseOrderSummery(_com, _loc, _purType, _supplier, _itemcode, _cat1, _cat2, _fromDate, _toDate, doctype, docno);
        }

        //Udesh 15/Oct/2018
        public string getPurchaseOrderNewSummeryExcel(string _com, string _loc, string _purType, string _supplier, string _itemcode, string _cat1, string _cat2, DateTime _fromDate, DateTime _toDate, string doctype, string docno, string userid, out string _err)
        {
            _inventoryDAL = new InventoryDAL();
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();
            _reportDAL = new ReptCommonDAL();
            if (_securityDAL.Is_Report_DR("purchaseordersummery") == true) _inventoryDAL.ConnectionOpen_DR();

            #region Get data
            DataTable tmp_user_pc = new DataTable();
            DataTable purchaseOrderSumm = new DataTable();
            //tmp_user_pc = _salesDAL.GetTempUserPc(_com, userid);
            tmp_user_pc = _reportDAL.GetTempUserPcRptDB(_com, userid);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    DataTable tmp_Table = new DataTable();
                    //tmp_Table = _inventoryDAL.getpurchaseOrderSummery_excel(_com, drow["tpl_pc"].ToString(), _purType, _supplier, _itemcode, _cat1, _cat2, _fromDate, _toDate, doctype, docno);

                    tmp_Table = _inventoryDAL.getpurchaseOrderSummery(_com, drow["tpl_pc"].ToString(), _purType, _supplier, _itemcode, _cat1, _cat2, _fromDate, _toDate, doctype, docno);
                    purchaseOrderSumm.Merge(tmp_Table);

                }
            }
            #endregion

            #region Prepare Excel Summary Table
            DataTable _summaryTable = new DataTable();

            if (purchaseOrderSumm.Rows.Count > 0)
            {
                //_summaryTable = purchaseOrderSumm.AsEnumerable()
                //  .OrderBy(r => r.Field<string>("SUPPLIER_CODE"))
                //  .Select(g =>
                //  {
                //      var row = _summaryTable.NewRow();

                //      row["Loc Code"] = g.FirstOrDefault().Field<string>("GRN_LOCATION");
                //      row["Supplier Code"] = g.FirstOrDefault().Field<string>("SUPPLIER_CODE");
                //      row["Supplier"] = g.FirstOrDefault().Field<string>("MBE_NAME");
                //      row["GRN #"] = g.FirstOrDefault().Field<string>("GRN_NO");
                //      row["GRN Location"] = g.FirstOrDefault().Field<string>("GRN_LOCATION_NAME");
                //      row["PO #"] = g.FirstOrDefault().Field<string>("PO_NO");
                //      row["Invoice #"] = g.FirstOrDefault().Field<string>("INVOICE_NO");
                //      row["DO #"] = g.FirstOrDefault().Field<string>("DO_NO");
                //      row["PO Date"] = g.FirstOrDefault().Field<DateTime>("PO_DATE").ToString("dd/MMM/yyyy");
                //      row["GRN Date"] = g.FirstOrDefault().Field<DateTime>("GRN_DATE").ToString("dd/MMM/yyyy");
                //      row["BL # / LC #"] = g.FirstOrDefault().Field<string>("BL_NO");
                //      row["GRN  Ref."] = g.FirstOrDefault().Field<string>("GRN_REF");
                //      row["GRN Type"] = g.FirstOrDefault().Field<string>("GRN_TYPE");
                //      row["Value(LKR)"] = g.Sum(r => (r.Field<decimal>("GRN_ITEM_QTY") * r.Field<decimal>("GRN_UNIT_COST"))).ToString("#,#.00");

                //      return row;
                //  }).CopyToDataTable();

                var _tmpTable = from w in purchaseOrderSumm.AsEnumerable()
                                group w by new
                                {
                                    Loc_Code = w.Field<string>("GRN_LOCATION"),
                                    Supplier_Code = w.Field<string>("SUPPLIER_CODE"),
                                    Supplier = w.Field<string>("MBE_NAME"),
                                    GRN_No = w.Field<string>("GRN_NO"),
                                    GRN_Location = w.Field<string>("GRN_LOCATION_NAME"),
                                    PO_No = w.Field<string>("PO_NO"),
                                    Invoice_No = w.Field<string>("INVOICE_NO"),
                                    DO_No = w.Field<string>("DO_NO"),
                                    PO_Date = w.Field<DateTime>("PO_DATE").ToString("dd/MMM/yyyy"),
                                    GRN_Date = w.Field<DateTime>("GRN_DATE").ToString("dd/MMM/yyyy"),
                                    BL_LC_No = w.Field<string>("BL_NO"),
                                    GRN_Ref = w.Field<string>("GRN_REF"),
                                    GRN_Type = w.Field<string>("GRN_TYPE")

                                } into g
                                select new
                                {
                                    Loc_Code = g.Key.Loc_Code,
                                    Supplier_Code = g.Key.Supplier_Code,
                                    Supplier = g.Key.Supplier,
                                    GRN_No = g.Key.GRN_No,
                                    GRN_Location = g.Key.GRN_Location,
                                    PO_No = g.Key.PO_No,
                                    Invoice_No = g.Key.Invoice_No,
                                    DO_No = g.Key.DO_No,
                                    PO_Date = g.Key.PO_Date,
                                    GRN_Date = g.Key.GRN_Date,
                                    BL_LC_No = g.Key.BL_LC_No,
                                    GRN_Ref = g.Key.GRN_Ref,
                                    GRN_Type = g.Key.GRN_Type,
                                    Value_LKR = g.Sum(x1 => x1.Field<decimal>("GRN_ITEM_QTY") * (x1.Field<decimal>("GRN_UNIT_COST")))
                                };

                _tmpTable = _tmpTable.OrderBy(w => w.Supplier_Code);
                _summaryTable = DataTableExtensions.ToDataTable(_tmpTable.ToList());
            }
            else
            {
                _summaryTable.Columns.Add("Loc_Code", typeof(string));
                _summaryTable.Columns.Add("Supplier_Code", typeof(string));
                _summaryTable.Columns.Add("Supplier", typeof(string));
                _summaryTable.Columns.Add("GRN_No", typeof(string));
                _summaryTable.Columns.Add("GRN_Location", typeof(string));
                _summaryTable.Columns.Add("PO_No", typeof(string));
                _summaryTable.Columns.Add("Invoice_No", typeof(string));
                _summaryTable.Columns.Add("DO_No", typeof(string));
                _summaryTable.Columns.Add("PO_Date", typeof(string));
                _summaryTable.Columns.Add("GRN_Date", typeof(string));
                _summaryTable.Columns.Add("BL_LC_No", typeof(string));
                _summaryTable.Columns.Add("GRN_Ref", typeof(string));
                _summaryTable.Columns.Add("GRN_Type", typeof(string));
                _summaryTable.Columns.Add("Value_LKR", typeof(decimal));
            }
            #endregion


            #region Adding Grand total row
            var _summarySum = (_summaryTable.Rows.Count > 0) ? _summaryTable.AsEnumerable().Sum(r => r.Field<decimal>("Value_LKR")) : 0; //Get sum of table if have any rows

            _summaryTable.Rows.Add(_summaryTable.NewRow());//Add Empty Row

            var _rowSum = _summaryTable.NewRow();//Create new row for Grand total
            _rowSum["GRN_Type"] = "Grand Total";
            _rowSum["Value_LKR"] = (decimal)_summarySum;
            _summaryTable.Rows.Add(_rowSum);//Add Grand total row to table

            #endregion

            _err = string.Empty;
            string _filePath = string.Empty;

            MasterCompany _mstComp = _inventoryDAL.GetCompByCode(_com);

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c8"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c9"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = _mstComp.Mc_desc; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Purchase Order Summery - Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "From Date :" + _fromDate.ToString("dd/MMM/yyyy"); dataRow["c2"] = "To Date :" + _toDate.ToString("dd/MMM/yyyy");

            dataRow["c8"] = "User : " + userid; dataRow["c9"] = " , Printed on " + System.DateTime.Now;
            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, userid, TitleData, _summaryTable, out _err);
            //if (purchaseOrderSumm.Rows.Count == 0)
            //{
            //    _err = "No Records Found.";
            //}

            return _filePath;
        }

        public string getpurchaseOrderSummeryExcel(string _com, string _loc, string _purType, string _supplier, string _itemcode, string _cat1, string _cat2, DateTime _fromDate, DateTime _toDate, string doctype, string docno, string userid, out string _err)
        {
            //public string ItemBufferStatusReport_Excel(string in_user_id, string in_Company, string in_item, string in_Brand, string in_cat1, string in_cat2, string in_cat3, string in_cat4, string in_cat5, string in_model, string in_loc, string _in_subtp, out string _err)
            //Wimal @ 19/Sep/2018
            _inventoryDAL = new InventoryDAL();
            //DataTable _dt = new DataTable();
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();


            //_inventoryDAL = new InventoryDAL();
            //_inventoryDAL.ConnectionOpen();
            //_inventoryDAL.BeginTransaction();

         
            if (_securityDAL.Is_Report_DR("purchaseordersummery") == true) _inventoryDAL.ConnectionOpen_DR();
            //return _inventoryDAL.getpurchaseOrderSummery(_com, _loc, _purType, _supplier, _itemcode, _cat1, _cat2, _fromDate, _toDate, doctype, docno);

            //////////////////////////////////////////////////////////////////////////////////////////////////

            DataTable tmp_user_pc = new DataTable();
            DataTable purchaseOrderSumm = new DataTable();
            tmp_user_pc = _salesDAL.GetTempUserPc(_com, userid);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    DataTable tmp_Table = new DataTable();
                    //tmp_Table = bsObj.CHNLSVC.MsgPortal.GetStockBalanceCurrent_SCM(_objRepPara._GlbUserID, _objRepPara._GlbReportChannel, _objRepPara._GlbReportBrand, _objRepPara._GlbReportModel, _objRepPara._GlbReportItemCode, _objRepPara._GlbReportItemStatus, _objRepPara._GlbReportItemCat1, _objRepPara._GlbReportItemCat2, _objRepPara._GlbReportItemCat3, _objRepPara._GlbReportItemCat4, _objRepPara._GlbReportItemCat5, _objRepPara._GlbReportWithCost, _objRepPara._GlbReportWithSerial, _objRepPara._GlbReportCompCode, drow["tpl_pc"].ToString(), _objRepPara._GlbReportWithRCC, _objRepPara._GlbReportWithJob, _objRepPara._GlbReportWithGIT);
                    tmp_Table = _inventoryDAL.getpurchaseOrderSummery_excel(_com, drow["tpl_pc"].ToString(), _purType, _supplier, _itemcode, _cat1, _cat2, _fromDate, _toDate, doctype, docno);
                    purchaseOrderSumm.Merge(tmp_Table);

                }
            }

            //int in_ISlast;
            //string _inLoc = "";
            _err = string.Empty;
            string _filePath = string.Empty;
            MasterCompany _mstComp = _inventoryDAL.GetCompByCode(_com);

            //_inventoryDAL.TransactionCommit();
            //_inventoryDAL.ConnectionClose();
            //in_ISlast = 1;

            //DataTable _dtResults;
            //_salesDAL = new SalesDAL();
            //_inventoryDAL = new InventoryDAL();
            //_securityDAL = new SecurityDAL();
            //if (_securityDAL.Is_Report_DR("Itembufferstatus") == true) _inventoryDAL.ConnectionOpen_DR();
            //DataTable GLOB_DataTable = new DataTable();

            //DataTable tmp_user_pc = _salesDAL.GetTempUserPc(in_Company, in_user_id);
            //if (tmp_user_pc.Rows.Count > 0)
            //{
            //    foreach (DataRow drow in tmp_user_pc.Rows)
            //    {
            //        _inLoc = drow["tpl_pc"].ToString();
            //        //_securityDAL = new SecurityDAL();
            //        //if (_securityDAL.Is_Report_DR("CustomerDetails") == true) _salesDAL.ConnectionOpen_DR();
            //        _dtResults = _inventoryDAL.ItemBufferStatusReport(in_user_id, in_Company, in_item, in_Brand, in_cat1, in_cat2, in_cat3, in_cat4, in_cat5, in_model, drow["tpl_pc"].ToString(), _in_subtp);
            //        if (_dtResults != null)
            //        {
            //            GLOB_DataTable.Merge(_dtResults);
            //            in_ISlast = in_ISlast + 1;
            //        }
            //    }
            //}



            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = _mstComp.Mc_desc; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "PO Detail (IV4)"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Between :"; dataRow["c2"] = _fromDate + " and " + _toDate;
            //dataRow["c4"] = "Location"; dataRow["c5"] = _inLoc;
            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, userid, TitleData, purchaseOrderSumm, out _err);
            if (purchaseOrderSumm.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
            //////////////////////////////////////////////////////////////////////////////////////////////////
        }
        public DataTable getsostatus(string _com, string _loc, string _supplier, string _itemcode, string _cat1, string _cat2, DateTime _fromDate, DateTime _toDate, string doctype, string docno)
        {
            _inventoryDAL = new InventoryDAL();
            //DataTable _dt = new DataTable();

            return _inventoryDAL.getsostatus(_com, _loc, _supplier, _itemcode, _cat1, _cat2, _fromDate, _toDate, doctype, docno);
        }

        public DataTable getpurchaseOrder_grnpening(string _com, string _loc, string _supplier, string _itemcode, string _cat1, string _cat2, DateTime _fromDate, DateTime _toDate, string doctype, string docno)
        {
            _inventoryDAL = new InventoryDAL();
            //DataTable _dt = new DataTable();

            return _inventoryDAL.getpurchaseOrder_grnpening(_com, _loc, _supplier, _itemcode, _cat1, _cat2, _fromDate, _toDate, doctype, docno);
        }

        public DataTable getpurchaseOrderPrint_HDR(string _com, string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            //DataTable _dt = new DataTable();

            return _inventoryDAL.getpurchaseOrderPrint_HDR(_com, _loc);
        }

        public DataTable getpurchaseOrder_Print_Dtl(string _com, string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            //DataTable _dt = new DataTable();

            return _inventoryDAL.getpurchaseOrder_Print_Dtl(_com, _loc);
        }

        public DataTable pendingDelivery(DateTime _asAtDate, string _User, string _brand, string _model, string _itemcode, string _itemcat1, string _itemcat2, string _itemcat3, string _agetp, decimal _age, string _com, string _pc, string _latestcost)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.pendingDelivery(_asAtDate, _User, _brand, _model, _itemcode, _itemcat1, _itemcat2, _itemcat3, _agetp, _age, _com, _pc, _latestcost);
        }

        public DataTable getLatestCost(string _com, string _item, string _itemstatus)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.getLatestCost(_com, _item, _itemstatus);
        }

        public string getTrialCalDetails(out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            _dtResults = _salesDAL.getTrialCalDetails();
            GLOB_DataTable.Merge(_dtResults);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007("ABL", "N", GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        //Lakshika 2016-09-21
        public DataTable GetGitSerialDetails(string _com, string _docNo, int _itemline, int _batchline)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("GITReport") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetGITSerials(_com, _docNo, _itemline, _batchline);
        }

        public DataTable getGITReport_Current(DateTime _asatDate, string _com, string _toloc, string _fromloc, string _itemcode, string _brand, string _model, string _cat1, string _cat2, string _cat3, string _cat4, string _cat5)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("GITReport") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.getGITReport_Current(_asatDate, _com, _toloc, _fromloc, _itemcode, _brand, _model, _cat1, _cat2, _cat3, _cat4, _cat5);
        }

        public DataTable getGITReport_ASAT(string _com, string _toloc, string _fromloc, string _supplier, string _itemcode, string _cat1, string _cat2, DateTime _fromDate, DateTime _toDate, string doctype, string docno)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("GITReport") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.getGITReport_ASAT(_com, _toloc, _fromloc, _supplier, _itemcode, _cat1, _cat2, _fromDate, _toDate, doctype, docno);
        }

        //public DataTable getGITReport_ASAT_Recon(string _com, string _toloc, string _fromloc, string _supplier, string _itemcode, string _cat1, string _cat2, DateTime _fromDate, DateTime _toDate, string doctype, string docno)
        //{
        //    _inventoryDAL = new InventoryDAL();
        //    _securityDAL = new SecurityDAL();
        //    if (_securityDAL.Is_Report_DR("GITReport") == true) _inventoryDAL.ConnectionOpen_DR();
        //    return _inventoryDAL.getGITReport_ASAT_Recon(_com, _toloc, _fromloc, _supplier, _itemcode, _cat1, _cat2, _fromDate, _toDate, doctype, docno);
        //}
        public DataTable getGITReport_ASAT1(DateTime _asat, string _com, string in_Itemcode, string in_Brand, string in_Model, string in_Itemcat1,
            string in_Itemcat2, string in_Itemcat3, string in_Itemcat4, string in_Itemcat5, string _user, string _othloc, string _allcom)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();
            if (_securityDAL.Is_Report_DR("GITReport") == true) _inventoryDAL.ConnectionOpen_DR();

            DataTable GLOB_DataTable = new DataTable();
            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);
            DataTable _dtResults = new DataTable();

            if (_allcom == "Y")
            {
                _dtResults = new DataTable();
                _dtResults = _inventoryDAL.getGITReport_Asat(_asat, _com, "", _othloc, in_Itemcode, in_Brand, in_Model, in_Itemcat1, in_Itemcat2, in_Itemcat3, in_Itemcat4, in_Itemcat5, _user, 0);//BY DILSHAN ON 26/11/2018 _export=0
                GLOB_DataTable.Merge(_dtResults);
            }
            else
            {
                if (tmp_user_pc.Rows.Count > 0)
                {
                    foreach (DataRow drow in tmp_user_pc.Rows)
                    {
                        _dtResults = new DataTable();
                        _dtResults = _inventoryDAL.getGITReport_Asat(_asat, _com, drow["tpl_pc"].ToString(), _othloc, in_Itemcode, in_Brand, in_Model, in_Itemcat1, in_Itemcat2, in_Itemcat3, in_Itemcat4, in_Itemcat5, _user, 0);
                        GLOB_DataTable.Merge(_dtResults);
                    }
                }
            }
            GLOB_DataTable.TableName = "tbl";
            return GLOB_DataTable;
        }

        public string getGITReport_ASAT_Recon(DateTime _asat, string _com, string in_Itemcode, string in_Brand, string in_Model, string in_Itemcat1,
            string in_Itemcat2, string in_Itemcat3, string in_Itemcat4, string in_Itemcat5, string _user, string _othloc, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _inventoryDAL = new InventoryDAL();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("GITReport") == true) _inventoryDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _inventoryDAL.getGITReport_Asat_Recon(_asat, _com, drow["tpl_pc"].ToString(), _othloc, in_Itemcode, in_Brand, in_Model, in_Itemcat1, in_Itemcat2, in_Itemcat3, in_Itemcat4, in_Itemcat5, _user, 1);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }
        public string getGITReport_Asat(DateTime _asat, string _com, string in_Itemcode, string in_Brand, string in_Model, string in_Itemcat1,
            string in_Itemcat2, string in_Itemcat3, string in_Itemcat4, string in_Itemcat5, string _user, string _othloc, string _allcom, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _inventoryDAL = new InventoryDAL();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("GITReport") == true) _inventoryDAL.ConnectionOpen_DR();

            if (_allcom == "Y")
            {
                _dtResults = _inventoryDAL.getGITReport_Asat(_asat, _com, "", _othloc, in_Itemcode, in_Brand, in_Model, in_Itemcat1, in_Itemcat2, in_Itemcat3, in_Itemcat4, in_Itemcat5, _user, 1);
                GLOB_DataTable.Merge(_dtResults);
            }
            else
            {
                if (tmp_user_pc.Rows.Count > 0)
                {
                    foreach (DataRow drow in tmp_user_pc.Rows)
                    {
                        _dtResults = _inventoryDAL.getGITReport_Asat(_asat, _com, drow["tpl_pc"].ToString(), _othloc, in_Itemcode, in_Brand, in_Model, in_Itemcat1, in_Itemcat2, in_Itemcat3, in_Itemcat4, in_Itemcat5, _user, 1);
                        GLOB_DataTable.Merge(_dtResults);
                    }
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }
        public DataTable getExcessStockDetails(string in_item, string in_Brand, string in_model, string in_cat1, string in_cat2, string in_cat3, string in_cat4, string in_cat5, string in_com, string in_loc, string in_tp, string in_user)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("excessstock") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.getExcessStockDetails(in_item, in_Brand, in_model, in_cat1, in_cat2, in_cat3, in_cat4, in_cat5, in_com, in_loc, in_tp, in_user);
        }

        public string getSalesRestrictbyUser(string _user)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getSalesRestrictbyUser(_user);
        }

        public DataTable get_liabilityReport(string _com, string entryNo)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("liability") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.get_liabilityReport(_com, entryNo);
        }

        public DataTable getItemCanibalisePrint(string _docno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getItemCanibalisePrint(_docno);
        }
        public DataTable getMRNPrint(string _docno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getMRNPrint(_docno);
        }

        public DataTable get_WaraPrint_Main(string _com, string entryNo, string mainItemCode, string mainserial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.get_WaraPrint_Main(_com, entryNo, mainItemCode, mainserial);
        }

        public DataTable get_WaraPrint_Sub(string _com, string entryNo, string mainItemCode, string mainserial)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.get_WaraPrint_Sub(_com, entryNo, mainItemCode, mainserial);
        }

        public DataTable PrintInvoice_Hdr(string _comcode, string _DocNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.PrintInvoice_Hdr(_comcode, _DocNo);
        }

        public DataTable PrintInvoice_Dtl(string _comcode, string _DocNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.PrintInvoice_Dtl(_comcode, _DocNo);
        }
        public DataTable PrintInvoice_Tax(string _DocNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.PrintInvoice_Tax(_DocNo);
        }

        public DataTable PrintInvoice_Pay(string _comcode, string _DocNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.PrintInvoice_Pay(_comcode, _DocNo);
        }


        public DataTable getvalueAddtion(string _comCode, DateTime _fromDate, DateTime _toDate)
        {
            _inventoryDAL = new InventoryDAL();
            //DataTable _dt = new DataTable();

            return _inventoryDAL.getvalueAddtion(_comCode, _fromDate, _toDate);
        }

        //kapila
        public DataTable GetSerialBalance_Curr_SCM(string _com, string _loc, string _item, string _itemstatus, string _withRCC)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CurSerialBalance") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetSerialBalance_Curr_SCM(_com, _loc, _item, _itemstatus, _withRCC);
        }
        //kapila
        public DataTable GetStockBalanceCurrent_SCM(string _user, string _channel, string _brand, string _model, string _itemcode, string _Itemstatus,
    string _itemcat1, string _itemcat2, string _itemcat3, string _itemcat4, string _itemcat5, Int16 _withcost, Int16 _serialrep, string _com, string _loc, string _withRCC, string _withJob, string _withGIT)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CurrentInvBal") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetStockBalanceCurrent_SCM(_user, _channel, _brand, _model, _itemcode, _Itemstatus, _itemcat1, _itemcat2, _itemcat3, _itemcat4, _itemcat5, _withcost, _serialrep, _com, _loc, _withRCC, _withJob, _withGIT);
        }

        //kapila
        public DataTable PrintMovementAuditTrialReport(string _com, string _loc, DateTime in_FromDate, DateTime in_ToDate, string _doctp, string _subdoctp, string _direct, string in_item, string in_Brand, string in_model, string in_cat1, string in_cat2, string in_cat3, string in_cat4, string in_cat5, Int32 _isSer, string _othloc, string _docno, Int32 _appstus)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("MovementAuditTrial") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.PrintMovementAuditTrialReport(_com, _loc, in_FromDate, in_ToDate, _doctp, _subdoctp, _direct, in_item, in_Brand, in_model, in_cat1, in_cat2, in_cat3, in_cat4, in_cat5, _isSer, _othloc, _docno, _appstus);
        }

        //kapila
        public DataTable PrintContainerVolReport(string _com, string _loc, DateTime in_FromDate, DateTime in_ToDate, string _country, string _agent, string _port)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ContainerVolume") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.PrintContainerVolReport(_com, _loc, in_FromDate, in_ToDate, _country, _agent, _port);
        }
        //kapila
        public DataTable PrintTotalImportsReport(string _com, string _loc, DateTime in_FromDate, DateTime in_ToDate, string in_item, string in_Brand, string in_cat1, string in_cat2, string in_cat3, string in_cat4, string in_cat5, string in_model, string _supp, string _agent)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("TotalImports") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.PrintTotalImportsReport(_com, _loc, in_FromDate, in_ToDate, in_item, in_Brand, in_cat1, in_cat2, in_cat3, in_cat4, in_cat5, in_model, _supp, _agent);
        }
        public int ProcessMessages(out string outMsg)
        {
            int result = 0;
            outMsg = string.Empty;

            Int32 isSMS = 0;
            Int32 isMail = 0;
            string _contMobNo = "";     //kapila 20/2/2016
            string _srEmail = "";

            try
            {
                _custServiceDAL = new CustServiceDAL();
                _inventoryDAL = new InventoryDAL();
                _salesDAL = new SalesDAL();

                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                _generalDAL = new GeneralDAL();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();

                List<Service_Message> oMessages = _custServiceDAL.GetMessage();
                List<Service_Message_Template> oMsgTemplates = _custServiceDAL.GetMessageTemplates();
                result = _custServiceDAL.DELECT_SCV_MAIL();

                if (oMessages != null && oMessages.Count > 0)
                {
                    foreach (Service_Message oMessage in oMessages)
                    {
                        Service_JOB_HDR oJobHeader = _custServiceDAL.GetServiceJobHeader(oMessage.Sm_jobno, oMessage.Sm_com);
                        if (oJobHeader != null && oJobHeader.SJB_JOBNO != null)
                        {
                            oMessage.Sm_joboline = (oMessage.Sm_joboline == 0) ? 1 : oMessage.Sm_joboline;
                            MasterLocation oMstLoc1 = new MasterLocation();
                            Service_job_Det oJobDetail = new Service_job_Det();
                            List<Service_job_Det> oJobDetailsTemp = _custServiceDAL.GetJobDetails(oMessage.Sm_jobno, oMessage.Sm_joboline, oMessage.Sm_com);
                            MasterItem oItem = new MasterItem();

                            if (oJobDetailsTemp != null && oJobDetailsTemp.Count > 0)
                            {
                                oJobDetail = oJobDetailsTemp[0];
                                _generalDAL.ConnectionOpen();
                                _inventoryDAL.ConnectionOpen();
                                oMstLoc1 = _generalDAL.GetLocationByLocCode(oJobDetail.Jbd_com, oJobDetailsTemp[0].Jbd_loc);
                                oItem = _inventoryDAL.GetItem(oJobDetail.Jbd_com, oJobDetail.Jbd_itm_cd);
                            }
                            MasterBusinessEntity oCustomer = _inventoryDAL.GetBusinessCompanyDetail(oJobHeader.SJB_COM, oJobHeader.SJB_B_CUST_CD, string.Empty, string.Empty, "C");

                            //kapila 9/4/2016  send mail to showroom
                            //if (oMessage.Sm_msg_tmlt_id == 9)
                            //{
                            //    #region send SR mail

                            //    RCC _rcc = new RCC();
                            //    isMail = 0;
                            //    isSMS = 0;

                            //    _rcc = _inventoryDAL.GetRCCbyNo(oJobHeader.SJB_REQNO);
                            //    if (_rcc != null)
                            //    {
                            //        DataTable _dtPC = _custServiceDAL.sp_get_pcbyloc_details(oJobHeader.SJB_COM, _rcc.Inr_loc_cd);
                            //        if (_dtPC.Rows.Count > 0)
                            //        {
                            //            _srEmail = _dtPC.Rows[0]["mpc_email"].ToString();
                            //            if (_srEmail != null && IsValidEmail(_srEmail))
                            //            {
                            //                string emailBody = oMessage.Sm_mail_text.ToString();
                            //                isMail = SAVE_SCVMAILS_RPTDB(oJobHeader.SJB_JOBNO, oJobDetail.Jbd_jobline, "Abans - " + oMstLoc1.Ml_loc_desc, emailBody, _srEmail, 1, oMessage.Sm_seq);

                            //                isMail = 2;
                            //            }
                            //        }
                            //    }

                            //    if (isMail > 0)
                            //    {
                            //        result = _custServiceDAL.UPDATE_SCV_MSG_STUS(oMessage.Sm_seq, 1, isMail, isSMS, "MSG Portal");
                            //    }


                            //    #endregion
                            //}
                            //else
                            //{
                            if (oMessage.Sm_jobstage == (decimal)ServiceJobStages.NEW_JOB_OPEN || oMessage.Sm_jobstage == Convert.ToDecimal("1.1") || oMessage.Sm_msg_tmlt_id == 13)
                            {
                                #region MyRegion
                                Service_Message_Template oTemplate;
                                if (oJobHeader.SJB_JOBSTP != "RCC")     //kapila 20/2/2016
                                {
                                    oCustomer.Mbe_mob = oJobHeader.SJB_B_MOBINO;
                                    _contMobNo = oJobHeader.SJB_CNT_PHNO;
                                    outMsg = GetEnumDesc.GetEnumDescription(ServiceJobStages.NEW_JOB_OPEN);
                                    if (oCustomer.Mbe_mob != null && IsValidMobileOrLandNo(oCustomer.Mbe_mob))
                                    {
                                        string mobileNUm = setMobileNumber(oCustomer.Mbe_mob);
                                        String msgBody = oMessage.Sm_sms_text;
                                        OutSMS _out = new OutSMS();
                                        _out.Msg = replaceText(msgBody, oJobHeader, oJobDetail, "");
                                        _out.Msgstatus = 0;
                                        _out.Msgtype = "S";
                                        _out.Receivedtime = DateTime.Now;
                                        _out.Receiver = "";
                                        _out.Receiverphno = mobileNUm;
                                        _out.Senderphno = mobileNUm;
                                        _out.Refdocno = oMessage.Sm_jobno;
                                        _out.Sender = "Message Agent";
                                        _out.Createtime = DateTime.Now;
                                        isSMS = SendSMS(_out, out outMsg);
                                    }
                                    //kapila 20/2/2016 send SMS to contact person
                                    if (_contMobNo != null && IsValidMobileOrLandNo(_contMobNo))
                                    {
                                        string mobileNUm = setMobileNumber(_contMobNo);
                                        String msgBody = oMessage.Sm_sms_text;
                                        OutSMS _out = new OutSMS();
                                        _out.Msg = replaceText(msgBody, oJobHeader, oJobDetail, "");
                                        _out.Msgstatus = 0;
                                        _out.Msgtype = "S";
                                        _out.Receivedtime = DateTime.Now;
                                        _out.Receiver = "";
                                        _out.Receiverphno = mobileNUm;
                                        _out.Senderphno = mobileNUm;
                                        _out.Refdocno = oMessage.Sm_jobno;
                                        _out.Sender = "Message Agent";
                                        _out.Createtime = DateTime.Now;
                                        isSMS = SendSMS(_out, out outMsg);
                                    }
                                    if (oCustomer.Mbe_email != null && IsValidEmail(oCustomer.Mbe_email))
                                    {
                                        string emailBody = oMessage.Sm_mail_text.ToString();
                                        isMail = SAVE_SCVMAILS_RPTDB(oJobHeader.SJB_JOBNO, oJobDetail.Jbd_jobline, "Abans - " + oMstLoc1.Ml_loc_desc, emailBody, oCustomer.Mbe_email, 1, oMessage.Sm_seq);
                                        //isMail = SendEMail(oCustomer.Mbe_email, "Abans - " + oMstLoc1.Ml_loc_desc, emailBody, "", out outMsg, "");
                                        isMail = 2;
                                    }

                                    if (isSMS > 0 || isMail > 0)
                                    {
                                        result = _custServiceDAL.UPDATE_SCV_MSG_STUS(oMessage.Sm_seq, 1, isMail, isSMS, "MSG Portal");
                                    }
                                }

                                #endregion
                            }
                            else if (oMessage.Sm_jobstage == (decimal)ServiceJobStages.TECHNICIAN_ALLOCATED || oMessage.Sm_msg_tmlt_id == 13)
                            {
                                #region MyRegion
                                outMsg = GetEnumDesc.GetEnumDescription(ServiceJobStages.TECHNICIAN_ALLOCATED);
                                Int32 jobLine = (oMessage.Sm_joboline == 0) ? 1 : oMessage.Sm_joboline;
                                List<Service_Tech_Aloc_Hdr> oTechAllocations = _custServiceDAL.GetJobAllocations(oMessage.Sm_jobno, jobLine, oMessage.Sm_com);
                                if (oTechAllocations != null && oTechAllocations.Count > 0)
                                {
                                    foreach (Service_Tech_Aloc_Hdr oTechAlloc in oTechAllocations)
                                    {
                                        DataTable dtEmp = _salesDAL.GetEmployee(oMessage.Sm_com, oTechAlloc.STH_EMP_CD);
                                        if (dtEmp != null && dtEmp.Rows.Count > 0)
                                        {
                                            String phoneNum = string.Empty;
                                            String email = string.Empty;

                                            phoneNum = dtEmp.Rows[0]["esep_mobi_no"].ToString();
                                            email = dtEmp.Rows[0]["esep_email"].ToString();

                                            if (IsValidMobileOrLandNo(phoneNum))
                                            {
                                                string mobileNUm = setMobileNumber(phoneNum);
                                                //String msgBody = oMessage.Sm_sms_text.Replace("[tech]", oTechAlloc.ESEP_FIRST_NAME);
                                                String msgBody = replaceText(oMessage.Sm_sms_text, oJobHeader, oJobDetail, oTechAlloc.ESEP_FIRST_NAME);
                                                OutSMS _out = new OutSMS();
                                                _out.Msg = replaceText(msgBody, oJobHeader, oJobDetail, "");
                                                _out.Msgstatus = 0;
                                                _out.Msgtype = "S";
                                                _out.Receivedtime = DateTime.Now;
                                                _out.Receiver = "";
                                                _out.Receiverphno = mobileNUm;
                                                _out.Senderphno = mobileNUm;
                                                _out.Refdocno = oMessage.Sm_jobno;
                                                _out.Sender = "Message Agent";
                                                _out.Createtime = DateTime.Now;
                                                if (!string.IsNullOrEmpty(msgBody))
                                                {
                                                    isSMS = SendSMS(_out, out outMsg);
                                                }
                                            }
                                            if (IsValidEmail(email))
                                            {
                                                string emailBody = oMessage.Sm_mail_text;
                                                emailBody = emailBody.Replace("[allcSDate]", oTechAlloc.STH_FROM_DT.ToString("dd/MMM/yyyy hh:mm tt"))
                                                                     .Replace("[allcEDate]", oTechAlloc.STH_TO_DT.ToString("dd/MMM/yyyy hh:mm tt"))
                                                                     .Replace("[tech]", oTechAlloc.ESEP_FIRST_NAME);

                                                if (!string.IsNullOrEmpty(emailBody))
                                                {
                                                    isMail = SAVE_SCVMAILS_RPTDB(oJobHeader.SJB_JOBNO, oJobDetail.Jbd_jobline, "Abans - " + oMstLoc1.Ml_loc_desc, emailBody, email, 1, oMessage.Sm_seq);
                                                    //isMail = SendEMail(email, "Abans - " + oMstLoc1.Ml_loc_desc, emailBody, "", out outMsg, "");
                                                    isMail = 2;
                                                }
                                            }

                                            if (isSMS > 0 || isMail > 0)
                                            {
                                                result = _custServiceDAL.UPDATE_SCV_MSG_STUS(oMessage.Sm_seq, 1, isMail, isSMS, "MSG Portal");
                                            }
                                        }
                                    }
                                }
                                #endregion
                            }
                            else if (oMessage.Sm_msg_tmlt_id == 5) // ESTIMATE APPROVAL FROM CUSTOMER
                            {
                                #region MyRegion
                                outMsg = "Estimate";
                                Service_Message_Template oTemplate = oMsgTemplates.Find(x => x.Sml_msg_tp == oMessage.Sm_msg_tmlt_id);
                                if (oTemplate != null && oTemplate.Sml_msg_tp != null)
                                {
                                    List<Service_Enquiry_Estimate_Hdr> oHeader = new List<Service_Enquiry_Estimate_Hdr>();
                                    List<Service_Enquiry_Estimate_Hdr> oHeader2 = new List<Service_Enquiry_Estimate_Hdr>();
                                    oHeader = _custServiceDAL.GET_SCV_EST_BY_JOB(oJobDetail.Jbd_com, oJobDetail.Jbd_loc, oJobDetail.Jbd_pc, oJobDetail.Jbd_jobno);
                                    if (oHeader != null && oHeader.Count > 0 && oHeader.FindAll(x => x.ESH_ESTNO == oMessage.Sm_ref_num).Count > 0)
                                    {
                                        oHeader2 = oHeader.FindAll(x => x.ESH_ESTNO == oMessage.Sm_ref_num);
                                        foreach (Service_Enquiry_Estimate_Hdr item in oHeader2)
                                        {
                                            List<Service_Enquiry_Estimate_Items> oItems = _custServiceDAL.GET_SCV_EST_ITM_ENQRY(item.ESH_SEQ_NO);
                                            item.AMOUNT = oItems.Sum(x => x.ESI_UNIT_RT);
                                            item.DISCOUNT = oItems.Sum(x => x.ESI_DISC_AMT);
                                            item.TAX_AMOUNT = oItems.Sum(x => x.ESI_TAX_AMT);
                                            item.TOT_AMOUNT = oItems.Sum(x => x.ESI_NET);
                                        }

                                        if (oJobHeader.SJB_B_MOBINO != null && IsValidMobileOrLandNo(oJobHeader.SJB_B_MOBINO))
                                        {
                                            if (oCustomer.Mbe_cd == null)
                                            {
                                                continue;
                                            }
                                            string mobileNUm = setMobileNumber(oCustomer.Mbe_mob);
                                            String msgBody = oTemplate.Sml_templ_sms.Replace("[jobNo]", oMessage.Sm_jobno).Replace("[value]", oHeader2[0].TOT_AMOUNT.ToString("N2"));
                                            OutSMS _out = new OutSMS();
                                            _out.Msg = replaceText(msgBody, oJobHeader, oJobDetail, "");
                                            _out.Msgstatus = 0;
                                            _out.Msgtype = "S";
                                            _out.Receivedtime = DateTime.Now;
                                            _out.Receiver = "";
                                            _out.Receiverphno = mobileNUm;
                                            _out.Senderphno = mobileNUm;
                                            _out.Refdocno = oMessage.Sm_jobno;
                                            _out.Sender = "Message Agent";
                                            _out.Createtime = DateTime.Now;
                                            _out.Senderphno = mobileNUm;
                                            isSMS = SendSMS(_out, out outMsg);
                                        }
                                        if (oJobHeader.SJB_B_EMAIL != null && IsValidEmail(oJobHeader.SJB_B_EMAIL))
                                        {
                                            string emailBody = oTemplate.Sml_templ_sms.Replace("[jobNo]", oMessage.Sm_jobno).Replace("[value]", oHeader2[0].TOT_AMOUNT.ToString("N2"));
                                            //isMail = SendEMail(oCustomer.Mbe_email, "", emailBody, "", out outMsg, "");
                                            isMail = SAVE_SCVMAILS_RPTDB(oJobHeader.SJB_JOBNO, oJobDetail.Jbd_jobline, "Abans - " + oMstLoc1.Ml_loc_desc, emailBody, oCustomer.Mbe_email, 1, oMessage.Sm_seq);
                                            isMail = 2;
                                        }

                                        if (isSMS > 0 || isMail > 0)
                                        {
                                            result = _custServiceDAL.UPDATE_SCV_MSG_STUS(oMessage.Sm_seq, 1, isMail, isSMS, "MSG Portal");
                                        }
                                    }
                                }
                                #endregion
                            }
                            else if (oMessage.Sm_msg_tmlt_id == 12) //BR LETTER
                            {
                                #region MyRegion
                                outMsg = "MRN Cancel";

                                DataTable dtMRN = _custServiceDAL.GetMRNItemsByJobline(oJobHeader.SJB_COM, oJobDetail.Jbd_jobno, oJobDetail.Jbd_jobline);
                                if (dtMRN.Rows.Count > 0)
                                {
                                    List<Service_Appove_MRN> oMRNitems = _custServiceDAL.GET_MRN_FOR_JOB(oJobDetail.Jbd_jobno, oJobHeader.SJB_COM, oJobDetail.Jbd_loc, dtMRN.Rows[0]["ITR_REQ_NO"].ToString());
                                    if (oMRNitems.Count > 0)
                                    {
                                        //String OtherLoc = dtMRN.Rows[0]["itr_issue_from"].ToString();
                                        String OtherLoc = oMRNitems[0].ITR_ISSUE_FROM;

                                        MasterLocation oMstLoc = _generalDAL.GetLocationByLocCode(oJobDetail.Jbd_com, OtherLoc);
                                        if (oMstLoc != null && oMstLoc.Ml_email != null && !string.IsNullOrEmpty(oMstLoc.Ml_email))
                                        {
                                            if (IsValidEmail(oMstLoc.Ml_email))
                                            {
                                                string emailBody = string.Empty;
                                                emailBody = "Dear Sir/Madam,\nMRN Cancelation Notice.\n\nMRN No :" + oMRNitems[0].ITR_REQ_NO + ".\nCancel User :" + dtMRN.Rows[0]["ITR_CRE_BY"].ToString();
                                                //isMail = SendEMail(oMstLoc.Ml_email, "MRN Cancel", emailBody, "", out outMsg, "");
                                                isMail = SAVE_SCVMAILS_RPTDB(oJobHeader.SJB_JOBNO, oJobDetail.Jbd_jobline, "MRN Cancel", emailBody, oMstLoc.Ml_email, 1, oMessage.Sm_seq);
                                                isMail = 2;

                                                if (isSMS > 0 || isMail > 0)
                                                {
                                                    result = _custServiceDAL.UPDATE_SCV_MSG_STUS(oMessage.Sm_seq, 1, isMail, 1, "MSG Portal");
                                                }
                                            }
                                        }

                                        DataTable dtCreateUser = _inventoryDAL.GetUserNameByUserID(dtMRN.Rows[0]["itr_cre_by"].ToString());
                                        if (dtCreateUser != null && dtCreateUser.Rows.Count > 0)
                                        {
                                            if (dtCreateUser.Rows[0]["se_email"] != null && IsValidEmail(dtCreateUser.Rows[0]["se_email"].ToString()))
                                            {
                                                string emailBody = string.Empty;
                                                emailBody = "Dear Sir/Madam,\nMRN Cancelation Notice.\n\nMRN No :" + oMRNitems[0].ITR_REQ_NO + ".\nCancel User :" + dtMRN.Rows[0]["ITR_CRE_BY"].ToString();
                                                //isMail = SendEMail(dtCreateUser.Rows[0]["se_email"].ToString(), "MRN Cancel", emailBody, "", out outMsg, "");
                                                isMail = SAVE_SCVMAILS_RPTDB(oJobHeader.SJB_JOBNO, oJobDetail.Jbd_jobline, "MRN Cancel", emailBody, dtCreateUser.Rows[0]["se_email"].ToString(), 1, oMessage.Sm_seq);
                                                isMail = 2;
                                                if (isSMS > 0 || isMail > 0)
                                                {
                                                    result = _custServiceDAL.UPDATE_SCV_MSG_STUS(oMessage.Sm_seq, 1, isMail, 1, "MSG Portal");
                                                }
                                            }

                                            MasterServiceEmployee oScvEmp = _custServiceDAL.GetScvEmployeeByCode(oJobHeader.SJB_COM, dtMRN.Rows[0]["itr_cre_by"].ToString());
                                            if (oScvEmp != null && oScvEmp.Msi_prnt_emp != null)
                                            {
                                                DataTable dtSuperwiser = _salesDAL.GetEmployee(oJobHeader.SJB_COM, oScvEmp.Msi_prnt_emp);
                                                if (dtSuperwiser != null && dtSuperwiser.Rows.Count > 0)
                                                {
                                                    if (dtSuperwiser.Rows[0]["esep_email"] != null && dtSuperwiser.Rows[0]["esep_email"].ToString() != "N/A" && IsValidEmail(dtSuperwiser.Rows[0]["esep_email"].ToString()))
                                                    {
                                                        string emailBody = string.Empty;
                                                        emailBody = "Dear Sir/Madam,\nMRN Cancelation Notice.\n\nMRN No :" + dtMRN.Rows[0]["itr_req_no"].ToString() + ".\nCancel User :" + dtMRN.Rows[0]["itr_mod_by"].ToString();
                                                        //isMail = SendEMail(dtSuperwiser.Rows[0]["esep_email"].ToString(), "MRN Cancel", emailBody, "", out outMsg, "");
                                                        isMail = SAVE_SCVMAILS_RPTDB(oJobHeader.SJB_JOBNO, oJobDetail.Jbd_jobline, "MRN Cancel", emailBody, dtSuperwiser.Rows[0]["esep_email"].ToString(), 1, oMessage.Sm_seq);
                                                        isMail = 2;
                                                    }
                                                    if (isSMS > 0 || isMail > 0)
                                                    {
                                                        result = _custServiceDAL.UPDATE_SCV_MSG_STUS(oMessage.Sm_seq, 1, isMail, 1, "MSG Portal");
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                #endregion
                            }
                            if (oMessage.Sm_msg_tmlt_id == 4)
                            {
                                #region MyRegion
                                List<Service_Enquiry_Invoice_Items> oInvoiceItems = new List<Service_Enquiry_Invoice_Items>();
                                oInvoiceItems = _custServiceDAL.GET_SCV_INVO_DET_ENQRY(oMessage.Sm_jobno, oJobHeader.SJB_COM);

                                if (oInvoiceItems.Count > 0)
                                {
                                    outMsg = "JOB CONFIRMATION INFORM TO CUSTOMER";
                                    if (oJobHeader.SJB_B_MOBINO != null && IsValidMobileOrLandNo(oJobHeader.SJB_B_MOBINO))
                                    {
                                        if (oCustomer.Mbe_cd == null)
                                        {
                                            continue;
                                        }
                                        string mobileNUm = setMobileNumber(oJobHeader.SJB_B_MOBINO);//Nadeeka 09-09-2015

                                        String msgBody = oMessage.Sm_sms_text;
                                        OutSMS _out = new OutSMS();
                                        _out.Msg = replaceText(msgBody, oJobHeader, oJobDetail, "");
                                        _out.Msgstatus = 0;
                                        _out.Msgtype = "S";
                                        _out.Receivedtime = DateTime.Now;
                                        _out.Receiver = "";
                                        _out.Receiverphno = mobileNUm;
                                        _out.Senderphno = mobileNUm;
                                        _out.Refdocno = oMessage.Sm_jobno;
                                        _out.Sender = "Message Agent";
                                        _out.Createtime = DateTime.Now;
                                        _out.Msgid = oMessage.Sm_ref_num;
                                        _out.Msgtype = "SATIS";
                                        isSMS = SendSMS(_out, out outMsg);
                                    }
                                    if (oJobHeader.SJB_B_EMAIL != null && IsValidEmail(oJobHeader.SJB_B_EMAIL))
                                    {
                                        string emailBody = oMessage.Sm_mail_text;
                                        //isMail = SendEMail(oCustomer.Mbe_email, "Abans - " + oMstLoc1.Ml_loc_desc, emailBody, "", out outMsg, "");
                                        isMail = SAVE_SCVMAILS_RPTDB(oJobHeader.SJB_JOBNO, oJobDetail.Jbd_jobline, "Abans - " + oMstLoc1.Ml_loc_desc, emailBody, oCustomer.Mbe_email, 1, oMessage.Sm_seq);
                                        isMail = 2;
                                    }

                                    if (isSMS > 0 || isMail > 0)
                                    {
                                        result = _custServiceDAL.UPDATE_SCV_MSG_STUS(oMessage.Sm_seq, 1, isMail, isSMS, "MSG Portal");
                                    }
                                }
                                #endregion
                            }
                            else if (oMessage.Sm_msg_tmlt_id == 6 && oMessage.Sm_jobstage == 6)
                            {
                                #region MyRegion

                                List<Service_Confirm_detail> oDonfDets = _custServiceDAL.GET_CONF_DET_BY_JOB(oMessage.Sm_jobno);

                                if (oDonfDets != null && oDonfDets.Count > 0)
                                {
                                    //messages.DistinctBy(m => new { m.id, m.date }).ToList();
                                    var job_Line = oDonfDets.Select(x => new { x.Jcd_jobno, x.Jcd_joblineno }).Distinct().ToList();
                                    if (job_Line != null && job_Line.Count > 0)
                                    {
                                        foreach (var item in job_Line)
                                        {
                                            List<Service_Tech_Aloc_Hdr> oTechAllocations = _custServiceDAL.GetJobAllocations(item.Jcd_jobno, item.Jcd_joblineno, oMessage.Sm_com);
                                            if (oTechAllocations != null && oTechAllocations.Count > 0)
                                            {
                                                foreach (Service_Tech_Aloc_Hdr oTechAlloc in oTechAllocations)
                                                {
                                                    DataTable dtEmp = _salesDAL.GetEmployee(oMessage.Sm_com, oTechAlloc.STH_EMP_CD);
                                                    if (dtEmp != null && dtEmp.Rows.Count > 0)
                                                    {
                                                        String phoneNum = string.Empty;
                                                        String email = string.Empty;

                                                        phoneNum = dtEmp.Rows[0]["esep_mobi_no"].ToString();
                                                        email = dtEmp.Rows[0]["esep_email"].ToString();

                                                        if (IsValidMobileOrLandNo(phoneNum))
                                                        {
                                                            string mobileNUm = setMobileNumber(phoneNum);
                                                            String msgBody = oMessage.Sm_sms_text;
                                                            OutSMS _out = new OutSMS();
                                                            _out.Msg = replaceText(msgBody, oJobHeader, oJobDetail, oTechAlloc.ESEP_FIRST_NAME);
                                                            _out.Msgstatus = 0;
                                                            _out.Msgtype = "S";
                                                            _out.Receivedtime = DateTime.Now;
                                                            _out.Receiver = "";
                                                            _out.Receiverphno = mobileNUm;
                                                            _out.Senderphno = mobileNUm;
                                                            _out.Refdocno = oMessage.Sm_jobno;
                                                            _out.Sender = "Message Agent";
                                                            _out.Createtime = DateTime.Now;
                                                            _out.Msgid = oMessage.Sm_ref_num;
                                                            isSMS = SendSMS(_out, out outMsg);
                                                        }
                                                        if (oJobHeader.SJB_B_EMAIL != null && IsValidEmail(oJobHeader.SJB_B_EMAIL))
                                                        {
                                                            string emailBody = oMessage.Sm_mail_text;
                                                            isMail = SAVE_SCVMAILS_RPTDB(oJobHeader.SJB_JOBNO, oJobDetail.Jbd_jobline, "Abans - " + oMstLoc1.Ml_loc_desc, emailBody, oCustomer.Mbe_email, 1, oMessage.Sm_seq);
                                                            isMail = 2;
                                                        }

                                                        if (isSMS > 0 || isMail > 0)
                                                        {
                                                            result = _custServiceDAL.UPDATE_SCV_MSG_STUS(oMessage.Sm_seq, 1, isMail, isSMS, "MSG Portal");
                                                        }
                                                    }
                                                }
                                            }

                                        }

                                    }
                                }

                                #endregion
                            }
                            else if (oMessage.Sm_msg_tmlt_id == 7 && oMessage.Sm_jobstage == 6)
                            {
                                #region MyRegion
                                Service_Message_Template oTemplate;
                                outMsg = GetEnumDesc.GetEnumDescription(ServiceJobStages.NEW_JOB_OPEN);
                                if (oCustomer.Mbe_mob != null && IsValidMobileOrLandNo(oCustomer.Mbe_mob))
                                {
                                    string mobileNUm = setMobileNumber(oCustomer.Mbe_mob);
                                    String msgBody = oMessage.Sm_sms_text;
                                    OutSMS _out = new OutSMS();
                                    _out.Msg = replaceText(msgBody, oJobHeader, oJobDetail, "");
                                    _out.Msgstatus = 0;
                                    _out.Msgtype = "S";
                                    _out.Receivedtime = DateTime.Now;
                                    _out.Receiver = "";
                                    _out.Receiverphno = mobileNUm;
                                    _out.Senderphno = mobileNUm;
                                    _out.Refdocno = oMessage.Sm_jobno;
                                    _out.Sender = "Message Agent";
                                    _out.Createtime = DateTime.Now;
                                    isSMS = SendSMS(_out, out outMsg);
                                }
                                if (oCustomer.Mbe_email != null && IsValidEmail(oCustomer.Mbe_email))
                                {
                                    string emailBody = oMessage.Sm_mail_text.ToString();
                                    isMail = SAVE_SCVMAILS_RPTDB(oJobHeader.SJB_JOBNO, oJobDetail.Jbd_jobline, "Abans - " + oMstLoc1.Ml_loc_desc, emailBody, oCustomer.Mbe_email, 1, oMessage.Sm_seq);
                                    //isMail = SendEMail(oCustomer.Mbe_email, "Abans - " + oMstLoc1.Ml_loc_desc, emailBody, "", out outMsg, "");
                                    isMail = 2;
                                }

                                if (isSMS > 0 || isMail > 0)
                                {
                                    result = _custServiceDAL.UPDATE_SCV_MSG_STUS(oMessage.Sm_seq, 1, isMail, isSMS, "MSG Portal");
                                }
                                #endregion
                            }
                            //}

                        }
                        //kapila 20/4/2016 send mail to showrooms new circular realeased
                        if (oMessage.Sm_msg_tmlt_id == 10 || oMessage.Sm_msg_tmlt_id == 12)
                        {
                            _srEmail = oMessage.Sm_email.ToString();
                            if (_srEmail != null && IsValidEmail(_srEmail))
                            {
                                string emailBody = oMessage.Sm_mail_text.ToString();
                                isMail = SAVE_SCVMAILS_RPTDB(oJobHeader.SJB_JOBNO, 1, "New Price Circular", emailBody, _srEmail, 1, oMessage.Sm_seq);

                                isMail = 2;
                            }

                            if (isMail > 0)
                            {
                                result = _custServiceDAL.UPDATE_SCV_MSG_STUS(oMessage.Sm_seq, 1, isMail, isSMS, "MSG Portal");
                            }
                        }
                    }
                }

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                _generalDAL.TransactionCommit();
                _generalDAL.ConnectionClose();


                //Tharaka 2015-08-22
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                List<SCV_MSGPORTAL_MAILS> oMails = _custServiceDAL.GET_SCV_MAILS();
                if (oMails != null && oMails.Count > 0)
                {
                    foreach (SCV_MSGPORTAL_MAILS item in oMails)
                    {
                        isMail = SendEMail(item.EMAILADDRESS, item.SUBJECT, item.MAILBODY, "", out outMsg, "");
                        isMail = _custServiceDAL.UPDATE_MAILSTATUS(1, 1, item.REFSEQ);
                    }
                }
                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                result = -1;
                outMsg = ex.Message;
            }

            return result;
        }

        private String getJobCreateBy(string _jobno)
        {
            CustServiceDAL _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getJobCreateBy(_jobno);
        }

        public int ProcessPriority(out string outMsg)
        {
            int result = 0;
            outMsg = string.Empty;

            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                _generalDAL = new GeneralDAL();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                if (File.Exists(@"C:\Message Agent Log\log_2.txt"))
                {
                    File.Delete(@"C:\Message Agent Log\log_2.txt");
                }
                //if (File.Exists(@"D:\Sanjeewa\log_2.txt"))
                //{
                //    File.Delete(@"D:\Sanjeewa\log_2.txt");
                //}
                WriteToLog(DateTime.Now.ToLongDateString());
                List<Service_job_Det> oPendingJobs = _custServiceDAL.GET_ALL_PENDING_JOBDET(11);

                List<Service_Pending_Jobs> oPendingJobsOri = new List<Service_Pending_Jobs>();

                foreach (Service_job_Det oPendingItem in oPendingJobs)
                {
                    Service_JOB_HDR oJobHeader = _custServiceDAL.GET_SCV_JOB_HDR(oPendingItem.Jbd_jobno, oPendingItem.Jbd_com);
                    //Service_JOB_HDR oJobHeader = _custServiceDAL.GetServiceJobHeader(oPendingItem.Jbd_jobno, oPendingItem.Jbd_com);
                    if (oJobHeader == null || oJobHeader.SJB_JOBNO == null)
                    {
                        continue;
                    }
                    MasterLocation oLocMst = _generalDAL.GetLocationByLocCode(oJobHeader.SJB_COM, oPendingItem.Jbd_loc);
                    if (oLocMst == null || oLocMst.Ml_loc_cd == null)
                    {
                        continue;
                    }

                    List<Service_Enquiry_TechAllo_Hdr> oTechAlloc = new List<Service_Enquiry_TechAllo_Hdr>();
                    oTechAlloc = _custServiceDAL.GET_SCV_TECHALLO_ENQRY(oPendingItem.Jbd_jobno, oPendingItem.Jbd_jobline, oPendingItem.Jbd_com);

                    if (oTechAlloc.Count > 0)
                    {
                        #region Allocated
                        oTechAlloc = oTechAlloc.FindAll(x => x.STH_LOC == oPendingItem.Jbd_loc || x.STH_LOC == oPendingItem.Jbd_pc);

                        foreach (Service_Enquiry_TechAllo_Hdr oAllocItem in oTechAlloc)
                        {
                            Service_Pending_Jobs oItemOri = new Service_Pending_Jobs();
                            oItemOri.COM = oJobHeader.SJB_COM;
                            oItemOri.SCHNL = oLocMst.Ml_cate_3;
                            oItemOri.LOC = oPendingItem.Jbd_loc;
                            oItemOri.PC_CD = oPendingItem.Jbd_pc;
                            oItemOri.JOB = oPendingItem.Jbd_jobno;
                            oItemOri.JOBLINE = oPendingItem.Jbd_jobline;
                            oItemOri.JOB_DATE = oJobHeader.SJB_DT;
                            oItemOri.JOB_ACTUAL_DATE = oJobHeader.SJB_CRE_DT;
                            oItemOri.ITEMCODE = oPendingItem.Jbd_itm_cd;
                            oItemOri.SERIAL = oPendingItem.Jbd_ser1;
                            string _jobcreby = getJobCreateBy(oPendingItem.Jbd_jobno);
                            oItemOri.CRE_BY = _jobcreby;
                            MasterItem oItemDetail = _inventoryDAL.GetItem(oJobHeader.SJB_COM, oPendingItem.Jbd_itm_cd);
                            if (oItemDetail != null)
                            {
                                oItemOri.ITM_DESC = oItemDetail.Mi_longdesc;
                                oItemOri.MODEL = oItemDetail.Mi_model;
                                oItemOri.BRAND = oItemDetail.Mi_brand;
                                oItemOri.CAT1 = oItemDetail.Mi_cate_1;
                                oItemOri.CAT2 = oItemDetail.Mi_cate_2;
                                oItemOri.CAT3 = oItemDetail.Mi_cate_3;
                            }

                            oItemOri.JOB_CATE = _custServiceDAL.GET_SCV_JOB_CATE(oJobHeader.SJB_COM, oJobHeader.SJB_JOBNO);
                            oItemOri.JOB_DIRC = oJobHeader.SJB_JOBTP;
                            oItemOri.JOB_SUBTYPE = oJobHeader.SJB_JOBSTP;
                            oItemOri.JOB_STAGE = oPendingItem.Jbd_stage;
                            oItemOri.JOB_STAGE_TEXT = oPendingItem.StageText;
                            oItemOri.CUST_CODE = oJobHeader.SJB_B_CUST_CD;
                            oItemOri.CUST_NAME = oJobHeader.SJB_B_CUST_NAME;
                            oItemOri.TECHNICAN_COMMENT = oPendingItem.Jbd_tech_rmk;
                            oItemOri.ANAL_1 = oLocMst.Ml_loc_desc;
                            oItemOri.ANAL_3 = "Pending Job";

                            //Get Customer level
                            string cusLevelCode = string.Empty;
                            oItemOri.EMP_LVL6_CD = getCustomerServiceLevelText(oJobHeader.SJB_B_CUST_CD, oJobHeader.SJB_COM, oPendingItem.Jbd_loc, out cusLevelCode);
                            if (String.IsNullOrEmpty(oItemOri.EMP_LVL6_CD))
                            {
                                WriteToLog(oJobHeader.SJB_JOBNO + " - No customer level found. | Cust : " + oJobHeader.SJB_B_CUST_CD + " | COM : " + oJobHeader.SJB_COM + " | LOC :" + oPendingItem.Jbd_loc + " | getCustomerServiceLevelText");
                            }

                            List<scv_prit_task> oScv_prit_tasks = _custServiceDAL.GET_SCV_PRNT_TASK("SCHNL", oLocMst.Ml_cate_3, cusLevelCode);
                            if (oScv_prit_tasks.Count == 0)
                            {
                                oScv_prit_tasks = _custServiceDAL.GET_SCV_PRNT_TASK("LOC", oLocMst.Ml_cate_3, oPendingItem.Jbd_loc);
                            }

                            DateTime expetDatetoNext = oJobHeader.SJB_CRE_DT;

                            scv_prit_task oSelectedPriorityTask = new scv_prit_task();

                            if (oScv_prit_tasks.Count > 0)
                            {
                                decimal maxStage = oScv_prit_tasks.Max(x => x.Spit_stage);
                                if (oPendingItem.Jbd_stage >= maxStage)
                                {
                                    continue;
                                }

                                foreach (scv_prit_task oScvPritTask in oScv_prit_tasks)
                                {
                                    if (oPendingItem.Jbd_stage <= oScvPritTask.Spit_stage)
                                    {
                                        if (oScvPritTask.Spit_expt_tp == "DD")
                                        {
                                            oSelectedPriorityTask = oScvPritTask;
                                            expetDatetoNext = oJobHeader.SJB_CRE_DT.AddDays(Convert.ToDouble(oScvPritTask.Spit_expt_dur));
                                            break;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                WriteToLog(oJobHeader.SJB_JOBNO + " - No priority level setuped. SCHNL : " + oLocMst.Ml_cate_3 + " Cate : " + cusLevelCode);
                                continue;
                            }

                            if (expetDatetoNext.Date >= DateTime.Now.Date)
                            {
                                continue;
                            }

                            //TimeSpan diffResult = DateTime.Now - expetDatetoNext;
                            TimeSpan diffResult = DateTime.Now - oJobHeader.SJB_CRE_DT;
                            if (diffResult.Days == 0)
                            {
                                continue;
                            }

                            if (oSelectedPriorityTask.Spit_expt_tp == "DD")
                            {
                                if (diffResult.Days <= oSelectedPriorityTask.Spit_expt_dur)
                                {
                                    continue;
                                }
                            }

                            oItemOri.PENDING_DATES = diffResult.Days + " Days";
                            oItemOri.ANAL_2 = diffResult.Days.ToString();
                            oItemOri.WARR_STATUS = oPendingItem.Jbd_warr_stus;
                            Service_Category oItem = _custServiceDAL.GET_SCV_CATE_BY_JOB(oJobHeader.SJB_JOBNO, oJobHeader.SJB_COM);
                            if (oItem != null && oItem.Sc_direct != null)
                            {
                                oItemOri.JOB_DIRECT = (oItem.Sc_direct == "W") ? "Workshop" : "Field";
                            }

                            oItemOri.EMP_LVL1_CD = oAllocItem.STH_EMP_CD;
                            oItemOri.EMP_LVL1_NAME = oAllocItem.ESEP_FIRST_NAME;

                            List<MasterServiceEmployee> oEmpTL2s = null;
                            oEmpTL2s = _custServiceDAL.GET_SC_EMP_BY_LOC_PC(oPendingItem.Jbd_com, oPendingItem.Jbd_loc, oPendingItem.Jbd_pc, oLocMst.Ml_cate_3, oAllocItem.STH_EMP_CD);

                            if (oEmpTL2s != null && oEmpTL2s.Count > 0)
                            {
                                foreach (MasterServiceEmployee oEmpTL2 in oEmpTL2s)
                                {
                                    List<MasterServiceEmployee> oEmpTL3s = null;

                                    Service_Pending_Jobs oItemOriL2 = new Service_Pending_Jobs();

                                    //oItemOriL2 = oItemOri;

                                    oItemOriL2 = getNew(oItemOri);

                                    oItemOriL2.EMP_LVL2_CD = oEmpTL2.Msi_prnt_emp;

                                    Master_Employee oMasterEmp2 = _generalDAL.GetMasterEmployee(oPendingItem.Jbd_com, oEmpTL2.Msi_prnt_emp);
                                    oItemOriL2.EMP_LVL2_NAME = oMasterEmp2.Esep_first_name;

                                    oEmpTL3s = _custServiceDAL.GET_SC_EMP_BY_LOC_PC(oPendingItem.Jbd_com, oPendingItem.Jbd_loc, oPendingItem.Jbd_pc, oLocMst.Ml_cate_3, oItemOriL2.EMP_LVL2_CD);
                                    if (oEmpTL3s != null && oEmpTL3s.Count > 0)
                                    {
                                        foreach (MasterServiceEmployee oEmpTL3 in oEmpTL3s)
                                        {
                                            Service_Pending_Jobs oItemOriL3 = new Service_Pending_Jobs();
                                            oItemOriL3 = getNew(oItemOriL2);
                                            oItemOriL3.EMP_LVL3_CD = oEmpTL3.Msi_prnt_emp;
                                            oMasterEmp2 = _generalDAL.GetMasterEmployee(oPendingItem.Jbd_com, oEmpTL3.Msi_prnt_emp);
                                            oItemOriL3.EMP_LVL3_NAME = oMasterEmp2.Esep_first_name;
                                            oPendingJobsOri.Add(oItemOriL3);
                                        }
                                    }
                                    else
                                    {
                                        WriteToLog(oJobHeader.SJB_JOBNO + " - No 3rd level find | EPF :" + oItemOriL2.EMP_LVL2_CD);
                                        oPendingJobsOri.Add(oItemOriL2);
                                    }
                                }
                            }
                            else
                            {
                                WriteToLog(oJobHeader.SJB_JOBNO + " - No 2nd level find | EPF :" + oAllocItem.STH_EMP_CD);
                                oPendingJobsOri.Add(oItemOri);
                            }
                        }
                        #endregion
                    }
                    else
                    {
                        if (oPendingItem.Jbd_stage > 2)
                        {
                            continue;
                        }
                        Service_Pending_Jobs oItemOri = new Service_Pending_Jobs();
                        oItemOri.COM = oJobHeader.SJB_COM;
                        oItemOri.SCHNL = oLocMst.Ml_cate_3;
                        oItemOri.LOC = oPendingItem.Jbd_loc;
                        oItemOri.JOB = oPendingItem.Jbd_jobno;
                        oItemOri.PC_CD = oPendingItem.Jbd_pc;
                        oItemOri.JOBLINE = oPendingItem.Jbd_jobline;
                        oItemOri.JOB_DATE = oJobHeader.SJB_DT;
                        oItemOri.JOB_ACTUAL_DATE = oJobHeader.SJB_CRE_DT;
                        oItemOri.ITEMCODE = oPendingItem.Jbd_itm_cd;
                        oItemOri.SERIAL = oPendingItem.Jbd_ser1;
                        string _jobcreby = getJobCreateBy(oPendingItem.Jbd_jobno);
                        oItemOri.CRE_BY = _jobcreby;
                        MasterItem oItemDetail = _inventoryDAL.GetItem(oJobHeader.SJB_COM, oPendingItem.Jbd_itm_cd);
                        if (oItemDetail != null)
                        {
                            oItemOri.ITM_DESC = oItemDetail.Mi_longdesc;
                            oItemOri.MODEL = oItemDetail.Mi_model;
                            oItemOri.BRAND = oItemDetail.Mi_brand;
                            oItemOri.CAT1 = oItemDetail.Mi_cate_1;
                            oItemOri.CAT2 = oItemDetail.Mi_cate_2;
                            oItemOri.CAT3 = oItemDetail.Mi_cate_3;
                        }

                        oItemOri.JOB_CATE = _custServiceDAL.GET_SCV_JOB_CATE(oJobHeader.SJB_COM, oJobHeader.SJB_JOBNO);
                        oItemOri.JOB_DIRC = oJobHeader.SJB_JOBTP;
                        oItemOri.JOB_SUBTYPE = oJobHeader.SJB_JOBSTP;
                        oItemOri.JOB_STAGE = oPendingItem.Jbd_stage;
                        oItemOri.JOB_STAGE_TEXT = oPendingItem.StageText;
                        oItemOri.CUST_CODE = oJobHeader.SJB_B_CUST_CD;
                        oItemOri.CUST_NAME = oJobHeader.SJB_B_CUST_NAME;

                        string cusLevelCode = string.Empty;
                        oItemOri.EMP_LVL6_CD = getCustomerServiceLevelText(oJobHeader.SJB_B_CUST_CD, oJobHeader.SJB_COM, oPendingItem.Jbd_loc, out cusLevelCode);
                        if (String.IsNullOrEmpty(oItemOri.EMP_LVL6_CD))
                        {
                            WriteToLog(oJobHeader.SJB_JOBNO + " - No customer level found. | Cust : " + oJobHeader.SJB_B_CUST_CD + " | COM : " + oJobHeader.SJB_COM + " | LOC :" + oPendingItem.Jbd_loc + " | getCustomerServiceLevelText");
                        }

                        List<scv_prit_task> oScv_prit_tasks = _custServiceDAL.GET_SCV_PRNT_TASK("SCHNL", oLocMst.Ml_cate_3, cusLevelCode);
                        if (oScv_prit_tasks.Count == 0)
                        {
                            oScv_prit_tasks = _custServiceDAL.GET_SCV_PRNT_TASK("LOC", oLocMst.Ml_cate_3, oPendingItem.Jbd_loc);
                        }

                        scv_prit_task oSelectedPriorityTask = new scv_prit_task();

                        DateTime expetDatetoNext = oJobHeader.SJB_CRE_DT;

                        if (oScv_prit_tasks.Count > 0)
                        {
                            decimal maxStage = oScv_prit_tasks.Max(x => x.Spit_stage);
                            if (oPendingItem.Jbd_stage >= maxStage)
                            {
                                continue;
                            }

                            foreach (scv_prit_task oScvPritTask in oScv_prit_tasks)
                            {
                                if (oPendingItem.Jbd_stage <= oScvPritTask.Spit_stage)
                                {
                                    if (oScvPritTask.Spit_expt_tp == "DD")
                                    {
                                        oSelectedPriorityTask = oScvPritTask;
                                        expetDatetoNext = oJobHeader.SJB_CRE_DT.AddDays(Convert.ToDouble(oScvPritTask.Spit_expt_dur));
                                        break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            WriteToLog(oJobHeader.SJB_JOBNO + " - No priority level setuped. SCHNL : " + oLocMst.Ml_cate_3 + " Cate : " + cusLevelCode);
                            continue;
                        }

                        TimeSpan diffResult = DateTime.Now - expetDatetoNext;
                        if (diffResult.Days == 0)
                        {
                            continue;
                        }
                        if (expetDatetoNext.Date >= DateTime.Now.Date)
                        {
                            continue;
                        }

                        if (oSelectedPriorityTask.Spit_expt_tp == "DD")
                        {
                            if (diffResult.Days <= oSelectedPriorityTask.Spit_expt_dur)
                            {
                                continue;
                            }
                        }

                        oItemOri.PENDING_DATES = diffResult.Days + " Days";
                        oItemOri.ANAL_2 = diffResult.Days.ToString();
                        oItemOri.WARR_STATUS = oPendingItem.Jbd_warr_stus;

                        Service_Category oItem = _custServiceDAL.GET_SCV_CATE_BY_JOB(oJobHeader.SJB_JOBNO, oJobHeader.SJB_COM);
                        if (oItem != null && oItem.Sc_direct != null)
                        {
                            oItemOri.JOB_DIRECT = (oItem.Sc_direct == "W") ? "Workshop" : "Field";
                        }

                        oItemOri.ANAL_1 = oLocMst.Ml_loc_desc;
                        oItemOri.ANAL_3 = "Not Allocated";

                        oPendingJobsOri.Add(oItemOri);


                        // Get first imformed employee
                        MasterServiceEmployee oEmpL1 = null;
                        List<MasterServiceEmployee> oEmpL2s = null;
                        List<MasterServiceEmployee> oEmpL3s = null;

                        #region MyRegion
                        //List<MasterServiceEmployee> oEmpTL2s = null;
                        //oEmpTL2s = _custServiceDAL.GET_SC_EMP_BY_LOC_PC(oPendingItem.Jbd_com, oPendingItem.Jbd_loc, oPendingItem.Jbd_pc, oLocMst.Ml_cate_3, "");

                        //oEmpL1 = _custServiceDAL.GetScvEmployeeBYCATE2(oPendingItem.Jbd_com, "LOC", oPendingItem.Jbd_loc, "TMLD");
                        //if (oEmpL1 != null && oEmpL1.Msi_emp != null)
                        //{
                        //    oItemOri.EMP_LVL1_CD = oEmpL1.Msi_emp;

                        //    List<MasterServiceEmployee> oEmpTL2s = null;
                        //    oEmpTL2s = _custServiceDAL.GET_SC_EMP_BY_LOC_PC(oPendingItem.Jbd_com, oPendingItem.Jbd_loc, oPendingItem.Jbd_pc, oLocMst.Ml_cate_3, oItemOri.EMP_LVL1_CD);

                        //    if (oEmpTL2s != null && oEmpTL2s.Count > 0)
                        //    {
                        //        foreach (MasterServiceEmployee oEmpTL2 in oEmpTL2s)
                        //        {
                        //            List<MasterServiceEmployee> oEmpTL3s = null;

                        //            Service_Pending_Jobs oItemOriL2 = new Service_Pending_Jobs();

                        //            //oItemOriL2 = oItemOri;

                        //            oItemOriL2 = getNew(oItemOri);

                        //            oItemOriL2.EMP_LVL2_CD = oEmpTL2.Msi_prnt_emp;

                        //            Master_Employee oMasterEmp2 = _generalDAL.GetMasterEmployee(oPendingItem.Jbd_com, oEmpTL2.Msi_prnt_emp);
                        //            oItemOriL2.EMP_LVL2_NAME = oMasterEmp2.Esep_first_name;

                        //            oEmpTL3s = _custServiceDAL.GET_SC_EMP_BY_LOC_PC(oPendingItem.Jbd_com, oPendingItem.Jbd_loc, oPendingItem.Jbd_pc, oLocMst.Ml_cate_3, oItemOriL2.EMP_LVL2_CD);
                        //            if (oEmpTL3s != null && oEmpTL3s.Count > 0)
                        //            {
                        //                foreach (MasterServiceEmployee oEmpTL3 in oEmpTL3s)
                        //                {
                        //                    Service_Pending_Jobs oItemOriL3 = new Service_Pending_Jobs();
                        //                    oItemOriL3 = getNew(oItemOriL2);
                        //                    oItemOriL3.EMP_LVL3_CD = oEmpTL3.Msi_prnt_emp;
                        //                    oMasterEmp2 = _generalDAL.GetMasterEmployee(oPendingItem.Jbd_com, oEmpTL3.Msi_prnt_emp);
                        //                    oItemOriL3.EMP_LVL3_NAME = oMasterEmp2.Esep_first_name;
                        //                    oPendingJobsOri.Add(oItemOriL3);
                        //                }
                        //            }
                        //            else
                        //            {
                        //                oPendingJobsOri.Add(oItemOriL2);
                        //            }
                        //        }
                        //    }
                        //    else
                        //    {
                        //        oPendingJobsOri.Add(oItemOri);
                        //    } 
                        //}
                        //else
                        //{
                        //    oEmpL1 = _custServiceDAL.GetScvEmployeeBYCATE2(oPendingItem.Jbd_com, "PC", oPendingItem.Jbd_pc, "TMLD");
                        //    if (oEmpL1 != null && oEmpL1.Msi_emp != null)
                        //    {
                        //        oItemOri.EMP_LVL1_CD = oEmpL1.Msi_emp;

                        //        List<MasterServiceEmployee> oEmpTL2s = null;
                        //        oEmpTL2s = _custServiceDAL.GET_SC_EMP_BY_LOC_PC(oPendingItem.Jbd_com, oPendingItem.Jbd_loc, oPendingItem.Jbd_pc, oLocMst.Ml_cate_3, oItemOri.EMP_LVL1_CD);

                        //        if (oEmpTL2s != null && oEmpTL2s.Count > 0)
                        //        {
                        //            foreach (MasterServiceEmployee oEmpTL2 in oEmpTL2s)
                        //            {
                        //                List<MasterServiceEmployee> oEmpTL3s = null;

                        //                Service_Pending_Jobs oItemOriL2 = new Service_Pending_Jobs();

                        //                //oItemOriL2 = oItemOri;

                        //                oItemOriL2 = getNew(oItemOri);

                        //                oItemOriL2.EMP_LVL2_CD = oEmpTL2.Msi_prnt_emp;

                        //                Master_Employee oMasterEmp2 = _generalDAL.GetMasterEmployee(oPendingItem.Jbd_com, oEmpTL2.Msi_prnt_emp);
                        //                oItemOriL2.EMP_LVL2_NAME = oMasterEmp2.Esep_first_name;

                        //                oEmpTL3s = _custServiceDAL.GET_SC_EMP_BY_LOC_PC(oPendingItem.Jbd_com, oPendingItem.Jbd_loc, oPendingItem.Jbd_pc, oLocMst.Ml_cate_3, oItemOriL2.EMP_LVL2_CD);
                        //                if (oEmpTL3s != null && oEmpTL3s.Count > 0)
                        //                {
                        //                    foreach (MasterServiceEmployee oEmpTL3 in oEmpTL3s)
                        //                    {
                        //                        Service_Pending_Jobs oItemOriL3 = new Service_Pending_Jobs();
                        //                        oItemOriL3 = getNew(oItemOriL2);
                        //                        oItemOriL3.EMP_LVL3_CD = oEmpTL3.Msi_prnt_emp;
                        //                        oMasterEmp2 = _generalDAL.GetMasterEmployee(oPendingItem.Jbd_com, oEmpTL3.Msi_prnt_emp);
                        //                        oItemOriL3.EMP_LVL3_NAME = oMasterEmp2.Esep_first_name;
                        //                        oPendingJobsOri.Add(oItemOriL3);
                        //                    }
                        //                }
                        //                else
                        //                {
                        //                    oPendingJobsOri.Add(oItemOriL2);
                        //                }
                        //            }
                        //        }
                        //        else
                        //        {
                        //            oPendingJobsOri.Add(oItemOri);
                        //        } 
                        //    } 
                        //} 
                        #endregion
                    }
                }

                //Get Pending Requests
                List<Service_Pending_Jobs> oRequests = _custServiceDAL.GET_PENDING_REQUEST();
                if (oRequests != null && oRequests.Count > 0)
                {
                    DataTable dtJObCates = _custServiceDAL.LoadCat();
                    foreach (Service_Pending_Jobs oItemOri in oRequests)
                    {
                        if (dtJObCates.Select("SC_TP = '" + oItemOri.JOB_CATE + "'").Length > 0)
                        {
                            DataTable dtTemp = dtJObCates.Select("SC_TP = '" + oItemOri.JOB_CATE + "'").CopyToDataTable();
                            oItemOri.JOB_CATE = dtTemp.Rows[0]["SC_DESC"].ToString();
                        }
                        else
                        {
                            continue;
                        }
                        string cusLevelCode = string.Empty;
                        oItemOri.EMP_LVL6_CD = getCustomerServiceLevelText(oItemOri.CUST_CODE, oItemOri.COM, oItemOri.LOC, out cusLevelCode);
                        oItemOri.ANAL_3 = "Pending Requests";
                        //    oItemOri.JOB_CATE = _custServiceDAL.GET_SCV_JOB_CATE(oItemOri.COM, oItemOri);
                    }
                    oPendingJobsOri.AddRange(oRequests);
                }

                //DataTable dt = DataTableExtensions.ToDataTable(oPendingJobsOri);

                result = _custServiceDAL.DELETE_SCV_PEDING_JOBS();

                foreach (Service_Pending_Jobs oSaveitem in oPendingJobsOri)
                {
                    outMsg = oPendingJobsOri.Count.ToString();
                    result = _custServiceDAL.SAVE_SCV_PEDING_JOBS(oSaveitem);
                }

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                _generalDAL.TransactionCommit();
                _generalDAL.ConnectionClose();

                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                result = -1;
                outMsg = ex.Message;
                _custServiceDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
            }

            return result;
        }

        public int SendEMail(string _recipientEmailAddress, string _subject, string _message, string attachment, out String err, string bcc)
        {
            int result = 0;
            err = string.Empty;

            try
            {
                if (!string.IsNullOrEmpty(_message))
                {
                    _commonSearchDAL = new CommonSearchDAL();
                    SmtpClient smtpClient = new SmtpClient();
                    MailMessage message = new MailMessage();
                    MailAddress _senderEmailAddress = new MailAddress(_commonSearchDAL.GetMailAddress(), _commonSearchDAL.GetMailDispalyName());
                    smtpClient.Host = _commonSearchDAL.GetMailHost();
                    smtpClient.Port = 25;
                    message.From = _senderEmailAddress;
                    message.To.Add(_recipientEmailAddress);
                    if (!string.IsNullOrEmpty(bcc))
                    {
                        message.Bcc.Add(bcc);
                    }
                    message.Subject = _subject;
                    message.IsBodyHtml = false;
                    message.Body = _message.Replace(@"\n", Environment.NewLine).ToString();
                    if (!string.IsNullOrEmpty(attachment))
                    {
                        message.Attachments.Add(new Attachment(attachment));
                    }
                    message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                    smtpClient.Send(message);
                    result = 1;

                    if (Directory.Exists(@"C:\Message Agent Log"))
                    {
                        using (FileStream fs = new FileStream(@"C:\Message Agent Log\log.txt", FileMode.Append, FileAccess.Write))
                        using (StreamWriter sw = new StreamWriter(fs))
                        {
                            sw.WriteLine("Done@" + DateTime.Now.ToString() + " :" + _recipientEmailAddress);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                result = -1;
                err = ex.Message;

                if (Directory.Exists(@"C:\Message Agent Log"))
                {
                    using (FileStream fs = new FileStream(@"C:\Message Agent Log\log.txt", FileMode.Append, FileAccess.Write))
                    using (StreamWriter sw = new StreamWriter(fs))
                    {
                        sw.WriteLine("Reject@" + DateTime.Now.ToString() + " :" + _recipientEmailAddress + "            Err :" + ex.Message);
                    }
                }
            }

            return result;
        }

        public int SendSMS(OutSMS smsOut, out String err)
        {
            int result = 0;
            err = string.Empty;

            try
            {
                DataTable dtTemp = _custServiceDAL.GET_SMS_MAIL(smsOut.Msg, "");
                if (dtTemp != null && dtTemp.Rows.Count > 0)
                {
                    return result;
                }
                //_generalDAL = new GeneralDAL();
                //_generalDAL.ConnectionOpen();
                //_generalDAL.BeginTransaction();
                if (!string.IsNullOrEmpty(smsOut.Msg))
                {
                    smsOut.Msg = smsOut.Msg.Replace(@"\n", Environment.NewLine).ToString();
                    result = _generalDAL.SaveSMSOut(smsOut);
                }

                //_generalDAL.TransactionCommit();
                //_generalDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                result = -1;
                err = ex.Message;
            }

            return result;
        }

        public static bool IsValidMobileOrLandNo(string mobile)
        {
            if (mobile.Length > 10)
            {
                mobile = mobile.Replace("+94", "0");
            }

            string pattern = @"^[0-9]{10}$";

            System.Text.RegularExpressions.Match match = Regex.Match(mobile.Trim(), pattern, RegexOptions.IgnoreCase);
            if (match.Success)
                return true;
            else
                return false;
        }

        public bool IsValidEmail(string email)
        {
            string pattern = @"^[a-z][a-z|0-9|]*([_][a-z|0-9]+)*([.][a-z|0-9]+([_][a-z|0-9]+)*)?@[a-z][a-z|0-9|]*\.([a-z][a-z|0-9]*(\.[a-z][a-z|0-9]*)?)$";

            System.Text.RegularExpressions.Match match = Regex.Match(email.Trim(), pattern, RegexOptions.IgnoreCase);
            if (match.Success)
                return true;
            else
                return false;
        }

        //Tharaka 2015-02-17
        public List<Service_Pending_Jobs> GetPendingJobSCMREPP(String level, String empCOde, String com, String chnl, String loc)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetPendingJobSCMREPP(level, empCOde, com, chnl, loc);
        }

        //Tharaka 2015-02-20
        public List<String> GetPendingJObDistinctEMPs(String level, String com, String chnl, String loc)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetPendingJObDistinctEMPs(level, com, chnl, loc);
        }

        //Tharaka 2015-02-20
        public MsgInformation GET_MST_MSG_INFOBASE_BY_EMP(String EMP, String com, String loc, String DocType)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_MST_MSG_INFOBASE_BY_EMP(EMP, com, loc, DocType);
        }

        //Tharaka 2015-02-20
        public MST_ScvEmpCate GET_SCV_EMPCATE(String com, String Chanl, String CATE)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_SCV_EMPCATE(com, Chanl, CATE);
        }

        //Tharaka 2015-02-21
        public Int32 SAVE_MST_MSG_INFOBASE(MsgInformation oItem)
        {
            Int32 result = 0;
            try
            {
                _generalDAL = new GeneralDAL();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();

                result = _generalDAL.SAVE_MST_MSG_INFOBASE(oItem);

                _generalDAL.TransactionCommit();
                _generalDAL.ConnectionClose();
            }
            catch (Exception)
            {
                result = -1;
                _generalDAL.TransactionRollback();
            }

            return result;
        }

        //Sanjeewa 2016-10-12
        public Int32 Delete_SelectedPB(string _com, string _user)
        {
            Int32 result = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                result = _financialDAL.Delete_SelectedPB(_com, _user);

                _financialDAL.TransactionCommit();
                _financialDAL.ConnectionClose();
            }
            catch (Exception)
            {
                result = -1;
                _financialDAL.TransactionRollback();
            }

            return result;
        }


        //Sanjeewa 2016-10-12
        public Int32 Insert_SelectedPB(string _pb, string _pbdtl, string _com, string _user)
        {
            Int32 result = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                result = _financialDAL.Insert_SelectedPB(_pb, _pbdtl, _com, _user);

                _financialDAL.TransactionCommit();
                _financialDAL.ConnectionClose();
            }
            catch (Exception)
            {
                result = -1;
                _financialDAL.TransactionRollback();
            }

            return result;
        }

        //Sanjeewa 2016-10-12
        public DataTable get_SelectedPB(string _com, string _user)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.get_SelectedPB(_com, _user);

        }

        public Int32 SaveReportErrorLog(string _erropt, string _errform, string _error, string _user)
        {
            Int32 result = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                result = _financialDAL.SaveReportErrorLog(_erropt, _errform, _error, _user);

                _financialDAL.TransactionCommit();
                _financialDAL.ConnectionClose();
            }
            catch (Exception)
            {
                result = -1;
                _financialDAL.TransactionRollback();
            }

            return result;
        }

        //Tharaka 2015-02-20
        public SystemUser GetSystemuserbyEMP(String EMP)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetSystemuserbyEMP(EMP);
        }

        //Tharaka 2015-02-123
        public int UPDATE_MSGINFOBASE_MODDT(MsgInformation oItem)
        {
            int result = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                result = _custServiceDAL.UPDATE_MSGINFOBASE_MODDT(oItem);

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();
            }
            catch (Exception)
            {
                result = -1;
                _custServiceDAL.TransactionRollback();
            }

            return result;
        }

        //Tharaka 2015-02-23
        public List<COM_CHNL_LOC> GET_DISTINCT_COM_CHN_LOC()
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_DISTINCT_COM_CHN_LOC();
        }

        //Tharaka 2015-03-24
        private string getCustomerServiceLevelText(string custCode, string comCode, string locCode, out string cusCode)
        {
            string result = string.Empty;
            List<MST_BUSPRIT_LVL> oItems;
            cusCode = string.Empty;

            try
            {
                // _custServiceDAL = new CustServiceDAL();
                MasterLocation _loc = _generalDAL.GetLocationByLocCode(comCode, locCode);

                oItems = _custServiceDAL.GetCustomerPriorityLevel(custCode, comCode);
                if (oItems == null || oItems.Count == 0)
                {
                    oItems = _custServiceDAL.GetCustomerPriorityLevel("CASH", comCode);
                }
                if (oItems != null && oItems.Count > 0)
                {
                    MST_BUSPRIT_LVL oSelectedLvl = new MST_BUSPRIT_LVL();
                    String PartyCode = String.Empty;
                    String PartyType = String.Empty;
                    if (oItems.FindAll(x => x.Mbl_pty_tp == "LOC" && x.Mbl_pty_cd == locCode).Count > 0)
                    {
                        List<MST_BUSPRIT_LVL> ot1 = oItems.FindAll(x => x.Mbl_pty_tp == "LOC" && x.Mbl_pty_cd == locCode);
                        oSelectedLvl = ot1[0];
                        PartyCode = locCode;
                        PartyType = "LOC";
                        result = ot1[0].SCP_DESC;
                        cusCode = ot1[0].Mbl_prit_cd;
                    }
                    else if (oItems.FindAll(x => x.Mbl_pty_tp == "SCHNL" && x.Mbl_pty_cd == _loc.Ml_cate_3).Count > 0)
                    {
                        List<MST_BUSPRIT_LVL> ot1 = oItems.FindAll(x => x.Mbl_pty_tp == "SCHNL" && x.Mbl_pty_cd == _loc.Ml_cate_3);

                        if (ot1.Count > 0)
                        {
                            result = ot1[0].SCP_DESC;
                            cusCode = ot1[0].Mbl_prit_cd;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            return result;
        }

        private Service_Pending_Jobs getNew(Service_Pending_Jobs oldItem)
        {
            List<Service_Pending_Jobs> oList = new List<Service_Pending_Jobs>();
            oList.Add(oldItem);
            DataTable dtTemp = DataTableExtensions.ToDataTable(oList);

            List<Service_Pending_Jobs> oListnew = new List<Service_Pending_Jobs>();
            oListnew = DataTableExtensions.ToGenericList<Service_Pending_Jobs>(dtTemp, Service_Pending_Jobs.Converter);
            return oListnew[0];
        }

        private void WriteToLog(String inputText)
        {

            using (FileStream fs = new FileStream(@"C:\Message Agent Log\log_2.txt", FileMode.Append, FileAccess.Write))
            //using (FileStream fs = new FileStream(@"D:\Sanjeewa\log_2.txt", FileMode.Append, FileAccess.Write))
            using (StreamWriter sw = new StreamWriter(fs))
            {
                sw.WriteLine(inputText + "  ||  " + DateTime.Now.ToString("dd/MMM/yyyy hh.mm.ss tt"));
                sw.Close();
            }
        }

        //Tharaka 2015-08-12
        public List<Service_Pending_Jobs> GetPendingJobSCMREPPByLoc(String level, String empCOde, String com, String chnl, String loc)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetPendingJobSCMREPPByLoc(level, empCOde, com, chnl, loc);
        }

        //Tharaka 2015-08-21
        private String replaceText(String InputText, Service_JOB_HDR oJobHeader, Service_job_Det oJobDetail, String techName)
        {
            string output = string.Empty;
            string jobDefets = string.Empty;

            List<Service_Job_Defects> oService_Job_Defectss = _custServiceDAL.GetJobDefects(oJobDetail.Jbd_jobno, oJobDetail.Jbd_jobline, string.Empty);
            if (oService_Job_Defectss != null && oService_Job_Defectss.Count > 0)
            {
                foreach (Service_Job_Defects item in oService_Job_Defectss)
                {
                    DataTable odt = _custServiceDAL.get_defect_det(item.SRD_DEF_TP);
                    if (odt != null && odt.Rows.Count > 0)
                    {
                        jobDefets = jobDefets + ", " + odt.Rows[0][0].ToString();
                    }
                }
            }
            //output = InputText.Replace("[tech]", techName)
            //                  .Replace("[jobNo]", oJobHeader.SJB_JOBNO)
            //                  .Replace("[JobNo]", oJobHeader.SJB_JOBNO)
            //                  .Replace("[RequestNo]", oJobHeader.SJB_REQNO)
            //                  .Replace("[date]", oJobHeader.SJB_DT.ToString("dd/MMM/yyyy"))
            //                  .Replace("[CName]", oJobHeader.SJB_B_CUST_NAME)
            //                  .Replace("[CAdd]", oJobHeader.SJB_B_ADD1 + ", " + oJobHeader.SJB_B_ADD2)
            //                  .Replace("[CTel]", oJobHeader.SJB_B_PHNO)
            //                  .Replace("[Town]", oJobHeader.SJB_B_TOWN)
            //                  .Replace("[ConAdd1]", oJobHeader.SJB_CNT_ADD1)
            //                  .Replace("[DefectType]", jobDefets)
            //                  .Replace("[InfAdd1]", oJobHeader.SJB_INFM_ADD1)
            //                  .Replace("[InfPhn]", oJobHeader.SJB_INFM_PHNO)
            //                  .Replace("[[Serial No]]", oJobDetail.Jbd_ser1)
            //                  .Replace("[Serial No]", oJobDetail.Jbd_ser1)
            //                  .Replace("[Serial_No]", oJobDetail.Jbd_ser1)
            //                  .Replace("[ItmModel]", oJobDetail.Jbd_model);            
            
            output = InputText.Replace("[tech]", techName)
                              .Replace("[jobNo]", oJobHeader.SJB_JOBNO)
                              .Replace("[JobNo]", oJobHeader.SJB_JOBNO)
                              .Replace("[RequestNo]", oJobHeader.SJB_REQNO)
                              .Replace("[date]", oJobHeader.SJB_DT.ToString("dd/MMM/yyyy"))
                              .Replace("[CName]", oJobHeader.SJB_B_CUST_NAME)
                              .Replace("[CAdd]", oJobHeader.SJB_B_ADD1 + ", " + oJobHeader.SJB_B_ADD2)
                              .Replace("[CTel]", oJobHeader.SJB_B_PHNO)
                              .Replace("[Mobino]", oJobHeader.SJB_B_MOBINO) //Wimal @ 07/Jan/2018 -Job Header Remark
                              .Replace("[Town]", oJobHeader.SJB_B_TOWN)
                              .Replace("[ConAdd1]", oJobHeader.SJB_CNT_ADD1)
                              .Replace("[DefectType]", jobDefets)
                              .Replace("[InfAdd1]", oJobHeader.SJB_INFM_ADD1)
                              .Replace("[InfPhn]", oJobHeader.SJB_INFM_PHNO)
                              .Replace("[[Serial No]]", oJobDetail.Jbd_ser1)
                              .Replace("[Serial No]", oJobDetail.Jbd_ser1)
                              .Replace("[Serial_No]", oJobDetail.Jbd_ser1)
                              .Replace("[ItmModel]", oJobDetail.Jbd_model)
                              .Replace("[Remark]", oJobHeader.SJB_RMK)//Wimal @ 07/Jan/2018 -Job Header Remark
                              .Replace("[WrrStDt]", oJobDetail.Jbd_warrstartdt.ToString("dd/MMM/yyyy")) //Wimal @ 07/Jan/2018 -  Warranty start date
                              .Replace("[sjb_cnt_add1]", oJobHeader.SJB_CNT_ADD1)//Wimal @ 07/Jan/2018
                              .Replace("[sjb_cnt_phno]", oJobHeader.SJB_CNT_PHNO)//Wimal @ 07/Jan/2018                             
                              .Replace("[jbd_warrperiod]", oJobDetail.Jbd_warrperiod.ToString()) //Wimal @ 07/Jan/2018 
                              .Replace("[jbd_invc_no]", oJobDetail.Jbd_invc_no)//Wimal @ 07/Jan/2018
                              ;                                                          

            //.Replace("[jbd_invc_no]", oJobHeader.jbd_invc_no)//Wimal @ 07/Jan/2018
            //.Replace("[jbd_availabilty]", oJobHeader.jbd_warrperiod)//Wimal @ 07/Jan/2018
            return output;
        }

        //Tharaka 2015-08-22
        private Int32 SAVE_SCVMAILS_RPTDB(String JOBNO, Int32 JOBLINE, String SUBJECT, String MailBody, String address, Int32 Status, Int32 Seq)
        {
            Int32 result = 0;

            //kapila 20/4/2016
            if (SUBJECT != "New Price Circular")
            {
                DataTable dtTemp = _custServiceDAL.GET_SMS_MAIL("", MailBody);
                if (dtTemp != null && dtTemp.Rows.Count > 0)
                {
                    return result;
                }
            }
            SCV_MSGPORTAL_MAILS oItems = new SCV_MSGPORTAL_MAILS();
            oItems.JOBNO = JOBNO;
            oItems.JOBLINE = JOBLINE;
            oItems.SUBJECT = SUBJECT;
            oItems.MAILBODY = MailBody;
            oItems.EMAILADDRESS = address;
            oItems.STATUS = Status;
            oItems.REFSEQ = Seq;
            result = _custServiceDAL.SAVE_SCVMAILS_RPTDB(oItems);
            return result;
        }

        private String setMobileNumber(string original)
        {
            string PureMobile = string.Empty;
            if (original.Length > 9)
            {
                PureMobile = original.Substring(original.Length - 9);
                PureMobile = "+94" + PureMobile;
            }
            return PureMobile;
        }

        //Written By Nadeeka on 04/07/2013
        public DataTable DeliveredSalesWithSerial(DateTime in_FromDate, DateTime in_ToDate, string in_user_id, string in_Company, string in_item, string in_Brand, string in_cat1, string in_cat2, string in_cat3, string in_model, string in_Profit)
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("DeliveredSalesWithSerial") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.DeliveredSalesWithSerial(in_FromDate, in_ToDate, in_user_id, in_Company, in_item, in_Brand, in_cat1, in_cat2, in_cat3, in_model, in_Profit);

        }
        public DataTable GetCreditnoteDetails(DateTime _fromdate, DateTime _todate, string _com, string _pc)
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CreditNoteDetails") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetCreditnoteDetails(_fromdate, _todate, _com, _pc);

        }

        public DataTable getCurrentAgeDetails(string _com, string _loc, string _itemcat1, string _itemcat2, string _itemcat3, string _itemcat4, string _itemcat5,
            string _itemcode, string _brand, string _model, string _supplier, string _user, string _brndMan)
        {//Sanjeewa 2016-03-30
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CurrentAge") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.getCurrentAgeDetails(_com, _loc, _itemcat1, _itemcat2, _itemcat3, _itemcat4, _itemcat5, _itemcode, _brand, _model, _supplier, _user, _brndMan, 0);
        }

        public DataTable getMigrationInvoiceDetails()
        {//Sanjeewa 2018-03-13
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getMigrationInvoiceDetails();
        }

        public DataTable getCurrentComAgeDetails_crystal(string _com, string _loc, string _itemcat1, string _itemcat2, string _itemcode, string _brand, string _model, string _brndMan, string _user, string _allloc, string _option)
        {//Sanjeewa 2016-03-30
            string _err = string.Empty;
            string _filePath = string.Empty;
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CurrentAge") == true) _inventoryDAL.ConnectionOpen_DR();
            DataTable curComAgeDet = new DataTable();
            DateTime _inDt = DateTime.Today;
            //curComAgeDet = _inventoryDAL.getCurrentComAgeDetails(_com, _loc, _itemcat1, _itemcat2, _itemcode, _brand, _model, _brndMan);

            //foreach (DataRow row in locDt.Rows)
            //foreach (string location in _loclist)
            //{
            // string location = row["location"].ToString();
            if (_allloc == "N")
            {
                DataTable dt1 = _inventoryDAL.getCurrentComAgeDetails(_com, _loc, _itemcat1, _itemcat2, _itemcode, _brand, _model, _brndMan, 0, _user);
                curComAgeDet.Merge(dt1);
                DataTable dt2 = _inventoryDAL.getCurrentComAgeGIT(_com, _loc, _itemcat1, _itemcat2, _itemcode, _brand, _model, _brndMan, _inDt, 0);
                curComAgeDet.Merge(dt2);
            }
            else
            {
                if (_option == "BAL")
                {
                    DataTable dt1 = _inventoryDAL.getCurrentComAgeDetails(_com, _loc, _itemcat1, _itemcat2, _itemcode, _brand, _model, _brndMan, 0, _user);
                    curComAgeDet.Merge(dt1);
                }
                if (_option == "GIT")
                {
                    DataTable dt2 = _inventoryDAL.getCurrentComAgeGIT(_com, _loc, _itemcat1, _itemcat2, _itemcode, _brand, _model, _brndMan, _inDt, 0);
                    curComAgeDet.Merge(dt2);
                }
            }
            // }
            // return curComAgeDet;
            // return  _inventoryDAL.getCurrentComAgeDetails(_com, _loc, _itemcat1, _itemcat2, _itemcode, _brand, _model, _brndMan);

            curComAgeDet.TableName = "CurrComAgeAnalysis";

            var inbal = (from tem in curComAgeDet.AsEnumerable()
                         where "1" == "1"
                         group tem by new
                         {
                             COM_CD = tem["COM_CD"],
                             COM_DESC = tem["COM_DESC"],
                             supp_cd = tem["COM_CD"],
                             supp_name = tem["COM_DESC"],
                             POWERED_BY = tem["POWERED_BY"],
                             LOC_CD = tem["LOC_CD"],
                             LOC_DESC = tem["LOC_DESC"],
                             ITM_CAT1 = tem["ITM_CAT1"],
                             ITM_CAT1_DESC = tem["ITM_CAT1_DESC"],
                             ITM_CAT2 = tem["ITM_CAT2"],
                             ITM_CAT2_DESC = tem["ITM_CAT2_DESC"],
                             ITM_CAT3 = tem["ITM_CAT3"],
                             ITM_CAT3_DESC = tem["ITM_CAT3_DESC"],
                             ITM_CAT4 = tem["ITM_CAT4"],
                             ITM_CAT4_DESC = tem["ITM_CAT4_DESC"],
                             ITM_CAT5 = tem["ITM_CAT5"],
                             ITM_CAT5_DESC = tem["ITM_CAT5_DESC"],
                             ITM_CD = tem["ITM_CD"],
                             ITM_DESC = tem["ITM_DESC"],
                             ITM_MODEL = tem["ITM_MODEL"],
                             ITM_BRAND = tem["ITM_BRAND"],
                             BRAND_DESC = tem["BRAND_DESC"],
                             ITM_STATUS = tem["ITM_STATUS"],
                             SELL_PRICE = tem["SELL_PRICE"],


                         } into ss
                         select new
                         {
                             COM_CD = ss.Key.COM_CD as string,
                             COM_DESC = ss.Key.COM_DESC as string,
                             supp_cd = ss.Key.COM_CD as string,
                             supp_name = ss.Key.COM_DESC as string,
                             POWERED_BY = ss.Key.POWERED_BY as string,
                             LOC_CD = ss.Key.LOC_CD as string,
                             LOC_DESC = ss.Key.LOC_DESC as string,
                             ITM_CAT1 = ss.Key.ITM_CAT1 as string,
                             ITM_CAT1_DESC = ss.Key.ITM_CAT1_DESC as string,
                             ITM_CAT2 = ss.Key.ITM_CAT2 as string,
                             ITM_CAT2_DESC = ss.Key.ITM_CAT2_DESC as string,
                             ITM_CAT3 = ss.Key.ITM_CAT3 as string,
                             ITM_CAT3_DESC = ss.Key.ITM_CAT3_DESC as string,
                             ITM_CAT4 = ss.Key.ITM_CAT4 as string,
                             ITM_CAT4_DESC = ss.Key.ITM_CAT4_DESC as string,
                             ITM_CAT5 = ss.Key.ITM_CAT5 as string,
                             ITM_CAT5_DESC = ss.Key.ITM_CAT5_DESC as string,
                             ITM_CD = ss.Key.ITM_CD as string,
                             ITM_DESC = ss.Key.ITM_DESC as string,
                             ITM_MODEL = ss.Key.ITM_MODEL as string,
                             ITM_BRAND = ss.Key.ITM_BRAND as string,
                             BRAND_DESC = ss.Key.BRAND_DESC as string,
                             ITM_STATUS = ss.Key.ITM_STATUS as string,
                             SELL_PRICE = Convert.ToDecimal(ss.Key.SELL_PRICE),
                             SEC1_QTY = ss.Sum(tem => Convert.ToDecimal(tem["SEC1_QTY"])),
                             SEC1_VAL = ss.Sum(tem => Convert.ToDecimal(tem["SEC1_VAL"])),
                             SEC2_QTY = ss.Sum(tem => Convert.ToDecimal(tem["SEC2_QTY"])),
                             SEC2_VAL = ss.Sum(tem => Convert.ToDecimal(tem["SEC2_VAL"])),
                             SEC3_QTY = ss.Sum(tem => Convert.ToDecimal(tem["SEC3_QTY"])),
                             SEC3_VAL = ss.Sum(tem => Convert.ToDecimal(tem["SEC3_VAL"])),
                             SEC4_QTY = ss.Sum(tem => Convert.ToDecimal(tem["SEC4_QTY"])),
                             SEC4_VAL = ss.Sum(tem => Convert.ToDecimal(tem["SEC4_VAL"])),
                             SEC5_QTY = ss.Sum(tem => Convert.ToDecimal(tem["SEC5_QTY"])),
                             SEC5_VAL = ss.Sum(tem => Convert.ToDecimal(tem["SEC5_VAL"])),
                             SEC6_QTY = ss.Sum(tem => Convert.ToDecimal(tem["SEC6_QTY"])),
                             SEC6_VAL = ss.Sum(tem => Convert.ToDecimal(tem["SEC6_VAL"])),
                             TOT_QTY = ss.Sum(tem => Convert.ToDecimal(tem["TOT_QTY"])),
                             TOT_VAL = ss.Sum(tem => Convert.ToDecimal(tem["TOT_VAL"])),

                         }).ToList();

            DataTable _dt1 = DataTableExtensions.ToDataTable(inbal);

            //     _dt1.Rows.Add(new Object[]{"","","","","","","","",	"",	"","","","","","","","","","","","",0.0,
            //     Convert.ToDecimal(_dt1.Compute("SUM(SEC1_QTY)", string.Empty)),
            //     Convert.ToDecimal(_dt1.Compute("SUM(SEC1_VAL)", string.Empty)),
            //     Convert.ToDecimal(_dt1.Compute("SUM(SEC2_QTY)", string.Empty)),
            //     Convert.ToDecimal(_dt1.Compute("SUM(SEC1_VAL)", string.Empty)),
            //     Convert.ToDecimal(_dt1.Compute("SUM(SEC3_QTY)", string.Empty)),
            //     Convert.ToDecimal(_dt1.Compute("SUM(SEC3_VAL)", string.Empty)),
            //     Convert.ToDecimal(_dt1.Compute("SUM(SEC4_QTY)", string.Empty)),
            //     Convert.ToDecimal(_dt1.Compute("SUM(SEC4_VAL)", string.Empty)),
            //     Convert.ToDecimal(_dt1.Compute("SUM(SEC5_QTY)", string.Empty)),
            //     Convert.ToDecimal(_dt1.Compute("SUM(SEC5_VAL)", string.Empty)),
            //     Convert.ToDecimal(_dt1.Compute("SUM(SEC6_QTY)", string.Empty)),
            //     Convert.ToDecimal(_dt1.Compute("SUM(SEC6_VAL)", string.Empty)),
            //     Convert.ToDecimal(_dt1.Compute("SUM(TOT_QTY)", string.Empty)),	
            //     Convert.ToDecimal(_dt1.Compute("SUM(TOT_VAL)", string.Empty)),
            //});

            //_dt1.Columns["SEC1_QTY"].ColumnName = "0-90_Days_Qty";
            //_dt1.Columns["SEC2_QTY"].ColumnName = "91-120_Days_Qty";
            //_dt1.Columns["SEC3_QTY"].ColumnName = "121-180_Days_Qty";
            //_dt1.Columns["SEC4_QTY"].ColumnName = "181-270_Days_Qty";
            //_dt1.Columns["SEC5_QTY"].ColumnName = "271-360_Days_Qty";
            //_dt1.Columns["SEC6_QTY"].ColumnName = "More_than_360_Qty";

            //_dt1.Columns["SEC1_VAL"].ColumnName = "0-90_Days_Val";
            //_dt1.Columns["SEC2_VAL"].ColumnName = "91-120_Days_Val";
            //_dt1.Columns["SEC3_VAL"].ColumnName = "121-180_Days_Val";
            //_dt1.Columns["SEC4_VAL"].ColumnName = "181-270_Days_Val";
            //_dt1.Columns["SEC5_VAL"].ColumnName = "271-360_Days_Val";
            //_dt1.Columns["SEC6_VAL"].ColumnName = "More_than_360_Val";
            _dt1.Columns["itm_cat1"].ColumnName = "item_cat1";
            _dt1.Columns["itm_cat1_desc"].ColumnName = "item_cat1_desc";
            _dt1.Columns["itm_cat2"].ColumnName = "item_cat2";
            _dt1.Columns["itm_cat2_desc"].ColumnName = "item_cat2_desc";
            _dt1.Columns["itm_cat3"].ColumnName = "item_cat3";
            _dt1.Columns["itm_cat3_desc"].ColumnName = "item_cat3_desc";
            _dt1.Columns["itm_cat4"].ColumnName = "item_cat4";
            _dt1.Columns["itm_cat4_desc"].ColumnName = "item_cat4_desc";
            _dt1.Columns["itm_cat5"].ColumnName = "item_cat5";
            _dt1.Columns["itm_cat5_desc"].ColumnName = "item_cat5_desc";
            _dt1.Columns["itm_cd"].ColumnName = "item_cd";
            _dt1.Columns["itm_desc"].ColumnName = "item_desc";
            _dt1.Columns["itm_model"].ColumnName = "item_model";
            _dt1.Columns["itm_brand"].ColumnName = "item_brand";
            _dt1.Columns["itm_status"].ColumnName = "item_stus";
            //_dt1.Columns.Add("supp_cd")= _dt1.Columns["COM_CD"];
            // _dt1.Columns.Add("supp_name") = _dt1.Columns["COM_DESC"];


            _dt1.TableName = "XXXX";
            return _dt1;


        }

        //Randima 03 Oct 2016
        public string getCurrentComAgeDetails(string _com, List<string> _loclist, string _itemcat1, string _itemcat2, string _itemcode, string _brand, string _model, string _brndMan, string _user)
        {
            string _err = string.Empty;
            string _filePath = string.Empty;
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CurrentAge") == true) _inventoryDAL.ConnectionOpen_DR();

            //DataTable locDt = _inventoryDAL.GetLOC_from_Hierachy(_com, null, null, null, null, "Z0067", null);

            DataTable curComAgeDet = new DataTable();
            DateTime _inDt = DateTime.Today;
            //curComAgeDet = _inventoryDAL.getCurrentComAgeDetails(_com, _loc, _itemcat1, _itemcat2, _itemcode, _brand, _model, _brndMan);

            //foreach (DataRow row in locDt.Rows)
            foreach (string location in _loclist)
            {
                //string location = row["location"].ToString();
                //DataTable dt1 = _inventoryDAL.getCurrentComAgeDetails(_com, location, _itemcat1, _itemcat2, _itemcode, _brand, _model, _brndMan);
                // curComAgeDet.Merge(dt1);
                DataTable dt2 = _inventoryDAL.getCurrentComAgeGIT(_com, location, _itemcat1, _itemcat2, _itemcode, _brand, _model, _brndMan, _inDt, 0);
                curComAgeDet.Merge(dt2);
            }

            curComAgeDet.TableName = "CurrComAgeAnalysis";

            var inbal = (from tem in curComAgeDet.AsEnumerable()
                         where "1" == "1"
                         group tem by new
                         {
                             COM_CD = tem["COM_CD"],
                             COM_DESC = tem["COM_DESC"],
                             POWERED_BY = tem["POWERED_BY"],
                             LOC_CD = tem["LOC_CD"],
                             LOC_DESC = tem["LOC_DESC"],
                             ITM_CAT1 = tem["ITM_CAT1"],
                             ITM_CAT1_DESC = tem["ITM_CAT1_DESC"],
                             ITM_CAT2 = tem["ITM_CAT2"],
                             ITM_CAT2_DESC = tem["ITM_CAT2_DESC"],
                             ITM_CAT3 = tem["ITM_CAT3"],
                             ITM_CAT3_DESC = tem["ITM_CAT3_DESC"],
                             ITM_CAT4 = tem["ITM_CAT4"],
                             ITM_CAT4_DESC = tem["ITM_CAT4_DESC"],
                             ITM_CAT5 = tem["ITM_CAT5"],
                             ITM_CAT5_DESC = tem["ITM_CAT5_DESC"],
                             ITM_CD = tem["ITM_CD"],
                             ITM_DESC = tem["ITM_DESC"],
                             ITM_MODEL = tem["ITM_MODEL"],
                             ITM_BRAND = tem["ITM_BRAND"],
                             BRAND_DESC = tem["BRAND_DESC"],
                             ITM_STATUS = tem["ITM_STATUS"],
                             SELL_PRICE = tem["SELL_PRICE"],


                         } into ss
                         select new
                         {
                             COM_CD = ss.Key.COM_CD as string,
                             COM_DESC = ss.Key.COM_DESC as string,
                             POWERED_BY = ss.Key.POWERED_BY as string,
                             LOC_CD = ss.Key.LOC_CD as string,
                             LOC_DESC = ss.Key.LOC_DESC as string,
                             ITM_CAT1 = ss.Key.ITM_CAT1 as string,
                             ITM_CAT1_DESC = ss.Key.ITM_CAT1_DESC as string,
                             ITM_CAT2 = ss.Key.ITM_CAT2 as string,
                             ITM_CAT2_DESC = ss.Key.ITM_CAT2_DESC as string,
                             ITM_CAT3 = ss.Key.ITM_CAT3 as string,
                             ITM_CAT3_DESC = ss.Key.ITM_CAT3_DESC as string,
                             ITM_CAT4 = ss.Key.ITM_CAT4 as string,
                             ITM_CAT4_DESC = ss.Key.ITM_CAT4_DESC as string,
                             ITM_CAT5 = ss.Key.ITM_CAT5 as string,
                             ITM_CAT5_DESC = ss.Key.ITM_CAT5_DESC as string,
                             ITM_CD = ss.Key.ITM_CD as string,
                             ITM_DESC = ss.Key.ITM_DESC as string,
                             ITM_MODEL = ss.Key.ITM_MODEL as string,
                             ITM_BRAND = ss.Key.ITM_BRAND as string,
                             BRAND_DESC = ss.Key.BRAND_DESC as string,
                             ITM_STATUS = ss.Key.ITM_STATUS as string,
                             SELL_PRICE = Convert.ToDecimal(ss.Key.SELL_PRICE),
                             SEC1_QTY = ss.Sum(tem => Convert.ToDecimal(tem["SEC1_QTY"])),
                             SEC1_VAL = ss.Sum(tem => Convert.ToDecimal(tem["SEC1_VAL"])),
                             SEC2_QTY = ss.Sum(tem => Convert.ToDecimal(tem["SEC2_QTY"])),
                             SEC2_VAL = ss.Sum(tem => Convert.ToDecimal(tem["SEC2_VAL"])),
                             SEC3_QTY = ss.Sum(tem => Convert.ToDecimal(tem["SEC3_QTY"])),
                             SEC3_VAL = ss.Sum(tem => Convert.ToDecimal(tem["SEC3_VAL"])),
                             SEC4_QTY = ss.Sum(tem => Convert.ToDecimal(tem["SEC4_QTY"])),
                             SEC4_VAL = ss.Sum(tem => Convert.ToDecimal(tem["SEC4_VAL"])),
                             SEC5_QTY = ss.Sum(tem => Convert.ToDecimal(tem["SEC5_QTY"])),
                             SEC5_VAL = ss.Sum(tem => Convert.ToDecimal(tem["SEC5_VAL"])),
                             SEC6_QTY = ss.Sum(tem => Convert.ToDecimal(tem["SEC6_QTY"])),
                             SEC6_VAL = ss.Sum(tem => Convert.ToDecimal(tem["SEC6_VAL"])),
                             TOT_QTY = ss.Sum(tem => Convert.ToDecimal(tem["TOT_QTY"])),
                             TOT_VAL = ss.Sum(tem => Convert.ToDecimal(tem["TOT_VAL"])),

                         }).ToList();

            DataTable _dt1 = DataTableExtensions.ToDataTable(inbal);

            _dt1.Rows.Add(new Object[]{"","","","","","","","",	"",	"","","","","","","","","","","","",0.0,
                Convert.ToDecimal(_dt1.Compute("SUM(SEC1_QTY)", string.Empty)),
                Convert.ToDecimal(_dt1.Compute("SUM(SEC1_VAL)", string.Empty)),
                Convert.ToDecimal(_dt1.Compute("SUM(SEC2_QTY)", string.Empty)),
                Convert.ToDecimal(_dt1.Compute("SUM(SEC1_VAL)", string.Empty)),
                Convert.ToDecimal(_dt1.Compute("SUM(SEC3_QTY)", string.Empty)),
                Convert.ToDecimal(_dt1.Compute("SUM(SEC3_VAL)", string.Empty)),
                Convert.ToDecimal(_dt1.Compute("SUM(SEC4_QTY)", string.Empty)),
                Convert.ToDecimal(_dt1.Compute("SUM(SEC4_VAL)", string.Empty)),
                Convert.ToDecimal(_dt1.Compute("SUM(SEC5_QTY)", string.Empty)),
                Convert.ToDecimal(_dt1.Compute("SUM(SEC5_VAL)", string.Empty)),
                Convert.ToDecimal(_dt1.Compute("SUM(SEC6_QTY)", string.Empty)),
                Convert.ToDecimal(_dt1.Compute("SUM(SEC6_VAL)", string.Empty)),
                Convert.ToDecimal(_dt1.Compute("SUM(TOT_QTY)", string.Empty)),	
                Convert.ToDecimal(_dt1.Compute("SUM(TOT_VAL)", string.Empty)),
           });

            _dt1.Columns["SEC1_QTY"].ColumnName = "0-90_Days_Qty";
            _dt1.Columns["SEC2_QTY"].ColumnName = "91-120_Days_Qty";
            _dt1.Columns["SEC3_QTY"].ColumnName = "121-180_Days_Qty";
            _dt1.Columns["SEC4_QTY"].ColumnName = "181-270_Days_Qty";
            _dt1.Columns["SEC5_QTY"].ColumnName = "271-360_Days_Qty";
            _dt1.Columns["SEC6_QTY"].ColumnName = "More_than_360_Qty";

            _dt1.Columns["SEC1_VAL"].ColumnName = "0-90_Days_Val";
            _dt1.Columns["SEC2_VAL"].ColumnName = "91-120_Days_Val";
            _dt1.Columns["SEC3_VAL"].ColumnName = "121-180_Days_Val";
            _dt1.Columns["SEC4_VAL"].ColumnName = "181-270_Days_Val";
            _dt1.Columns["SEC5_VAL"].ColumnName = "271-360_Days_Val";
            _dt1.Columns["SEC6_VAL"].ColumnName = "More_than_360_Val";


            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, _dt1, out _err);
            if (_dt1.Rows.Count == 0)
            {
                _err = "No Records Found.";
                return null;
            }
            return _filePath;
        }

        public string getCurrentComAgeDetails_Serials(string _com, List<string> _loclist, string _itemcat1, string _itemcat2, string _itemcode, string _brand, string _model, string _brndMan, string _user)
        {
            string _err = string.Empty;
            string _filePath = string.Empty;
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CurrentAge") == true) _inventoryDAL.ConnectionOpen_DR();

            //DataTable locDt = _inventoryDAL.GetLOC_from_Hierachy(_com, null, null, null, null, "Z0067", null);

            DataTable curComAgeDet = new DataTable();
            DateTime _inDt = DateTime.Today;
            //curComAgeDet = _inventoryDAL.getCurrentComAgeDetails(_com, _loc, _itemcat1, _itemcat2, _itemcode, _brand, _model, _brndMan);

            //foreach (DataRow row in locDt.Rows)
            foreach (string location in _loclist)
            {
                //string location = row["location"].ToString();
                DataTable dt1 = _inventoryDAL.getCurrentComAgeDetails_serials(_com, location, _itemcat1, _itemcat2, _itemcode, _brand, _model, _brndMan);
                curComAgeDet.Merge(dt1);
                DataTable dt2 = _inventoryDAL.getCurrentComAgeGIT_serial(_com, location, _itemcat1, _itemcat2, _itemcode, _brand, _model, _brndMan, _inDt);
                curComAgeDet.Merge(dt2);
            }

            //curComAgeDet.TableName = "CurrComAgeAnalysis";

            //var inbal = (from tem in curComAgeDet.AsEnumerable()
            //             where "1" == "1"
            //             group tem by new
            //             {
            //                 COM_CD = tem["COM_CD"],
            //                 COM_DESC = tem["COM_DESC"],
            //                 POWERED_BY = tem["POWERED_BY"],
            //                 LOC_CD = tem["LOC_CD"],
            //                 LOC_DESC = tem["LOC_DESC"],
            //                 ITM_CAT1 = tem["ITM_CAT1"],
            //                 ITM_CAT1_DESC = tem["ITM_CAT1_DESC"],
            //                 ITM_CAT2 = tem["ITM_CAT2"],
            //                 ITM_CAT2_DESC = tem["ITM_CAT2_DESC"],
            //                 ITM_CAT3 = tem["ITM_CAT3"],
            //                 ITM_CAT3_DESC = tem["ITM_CAT3_DESC"],
            //                 ITM_CAT4 = tem["ITM_CAT4"],
            //                 ITM_CAT4_DESC = tem["ITM_CAT4_DESC"],
            //                 ITM_CAT5 = tem["ITM_CAT5"],
            //                 ITM_CAT5_DESC = tem["ITM_CAT5_DESC"],
            //                 ITM_CD = tem["ITM_CD"],
            //                 ITM_DESC = tem["ITM_DESC"],
            //                 ITM_MODEL = tem["ITM_MODEL"],
            //                 ITM_BRAND = tem["ITM_BRAND"],
            //                 BRAND_DESC = tem["BRAND_DESC"],
            //                 ITM_STATUS = tem["ITM_STATUS"],
            //                 SER1 = tem["SER1"],
            //                 SER2 = tem["SER2"],
            //                 SELL_PRICE = tem["SELL_PRICE"],
            //                 AGE_DAYS = tem["Age_Days"],
            //                 AGE_DATE = tem["Age_date"],
            //                 DOC_NO = tem["Doc_no"],
            //                 DOC_DATE = tem["doc_date"],
            //                 AGE_SLOT = tem["age_slot"],
            //                 LOC_AGE_DAYS = tem["LOC_AGE_DAYS"],
            //                 CHANNEL = tem["ML_CATE_3"],


            //             } into ss
            //             select new
            //             {
            //                 COM_CD = ss.Key.COM_CD as string,
            //                 COM_DESC = ss.Key.COM_DESC as string,
            //                 POWERED_BY = ss.Key.POWERED_BY as string,
            //                 LOC_CD = ss.Key.LOC_CD as string,
            //                 LOC_DESC = ss.Key.LOC_DESC as string,
            //                 ITM_CAT1 = ss.Key.ITM_CAT1 as string,
            //                 ITM_CAT1_DESC = ss.Key.ITM_CAT1_DESC as string,
            //                 ITM_CAT2 = ss.Key.ITM_CAT2 as string,
            //                 ITM_CAT2_DESC = ss.Key.ITM_CAT2_DESC as string,
            //                 ITM_CAT3 = ss.Key.ITM_CAT3 as string,
            //                 ITM_CAT3_DESC = ss.Key.ITM_CAT3_DESC as string,
            //                 ITM_CAT4 = ss.Key.ITM_CAT4 as string,
            //                 ITM_CAT4_DESC = ss.Key.ITM_CAT4_DESC as string,
            //                 ITM_CAT5 = ss.Key.ITM_CAT5 as string,
            //                 ITM_CAT5_DESC = ss.Key.ITM_CAT5_DESC as string,
            //                 ITM_CD = ss.Key.ITM_CD as string,
            //                 ITM_DESC = ss.Key.ITM_DESC as string,
            //                 ITM_MODEL = ss.Key.ITM_MODEL as string,
            //                 ITM_BRAND = ss.Key.ITM_BRAND as string,
            //                 BRAND_DESC = ss.Key.BRAND_DESC as string,
            //                 ITM_STATUS = ss.Key.ITM_STATUS as string,
            //                 SER1 = ss.Key.SER1 as string,
            //                 SER2 = ss.Key.SER2 as string,
            //                 AGE_DAYS = Convert.ToDecimal(ss.Key.AGE_DAYS),
            //                 AGE_DATE = Convert.ToDateTime(ss.Key.AGE_DATE),
            //                 AGE_SLOT = Convert.ToString(ss.Key.AGE_SLOT),
            //                 DOC_NO=ss.Key.DOC_NO as string,
            //                 DOC_DATE = Convert.ToDateTime(ss.Key.DOC_DATE),
            //                 LOC_AGE_DAYS = Convert.ToString(ss.Key.LOC_AGE_DAYS),
            //                 SELL_PRICE = Convert.ToDecimal(ss.Key.SELL_PRICE),
            //                 //SEC1_QTY = ss.Sum(tem => Convert.ToDecimal(tem["SEC1_QTY"])),
            //                 //SEC1_VAL = ss.Sum(tem => Convert.ToDecimal(tem["SEC1_VAL"])),
            //                 //SEC2_QTY = ss.Sum(tem => Convert.ToDecimal(tem["SEC2_QTY"])),
            //                 //SEC2_VAL = ss.Sum(tem => Convert.ToDecimal(tem["SEC2_VAL"])),
            //                 //SEC3_QTY = ss.Sum(tem => Convert.ToDecimal(tem["SEC3_QTY"])),
            //                 //SEC3_VAL = ss.Sum(tem => Convert.ToDecimal(tem["SEC3_VAL"])),
            //                 //SEC4_QTY = ss.Sum(tem => Convert.ToDecimal(tem["SEC4_QTY"])),
            //                 //SEC4_VAL = ss.Sum(tem => Convert.ToDecimal(tem["SEC4_VAL"])),
            //                 //SEC5_QTY = ss.Sum(tem => Convert.ToDecimal(tem["SEC5_QTY"])),
            //                 //SEC5_VAL = ss.Sum(tem => Convert.ToDecimal(tem["SEC5_VAL"])),
            //                 //SEC6_QTY = ss.Sum(tem => Convert.ToDecimal(tem["SEC6_QTY"])),
            //                 //SEC6_VAL = ss.Sum(tem => Convert.ToDecimal(tem["SEC6_VAL"])),
            //                 TOT_QTY = ss.Sum(tem => Convert.ToDecimal(tem["TOT_QTY"])),
            //                 TOT_VAL = ss.Sum(tem => Convert.ToDecimal(tem["TOT_VAL"])),
            //                 CHANNEL = ss.Key.CHANNEL as string,

            //             }).ToList();

            //DataTable _dt1 = DataTableExtensions.ToDataTable(inbal);

            // _dt1.Rows.Add(new Object[]{"","","","","","","","","","","","","","","","","","","","","","","",0,0.0,"","",null,null,0,
            //     //Convert.ToDecimal(_dt1.Compute("SUM(SEC1_QTY)", string.Empty)),
            //     //Convert.ToDecimal(_dt1.Compute("SUM(SEC1_VAL)", string.Empty)),
            //     //Convert.ToDecimal(_dt1.Compute("SUM(SEC2_QTY)", string.Empty)),
            //     //Convert.ToDecimal(_dt1.Compute("SUM(SEC1_VAL)", string.Empty)),
            //     //Convert.ToDecimal(_dt1.Compute("SUM(SEC3_QTY)", string.Empty)),
            //     //Convert.ToDecimal(_dt1.Compute("SUM(SEC3_VAL)", string.Empty)),
            //     //Convert.ToDecimal(_dt1.Compute("SUM(SEC4_QTY)", string.Empty)),
            //     //Convert.ToDecimal(_dt1.Compute("SUM(SEC4_VAL)", string.Empty)),
            //     //Convert.ToDecimal(_dt1.Compute("SUM(SEC5_QTY)", string.Empty)),
            //     //Convert.ToDecimal(_dt1.Compute("SUM(SEC5_VAL)", string.Empty)),
            //     //Convert.ToDecimal(_dt1.Compute("SUM(SEC6_QTY)", string.Empty)),
            //     //Convert.ToDecimal(_dt1.Compute("SUM(SEC6_VAL)", string.Empty)),
            //     Convert.ToDecimal(_dt1.Compute("SUM(TOT_QTY)", string.Empty)),	
            //     Convert.ToDecimal(_dt1.Compute("SUM(TOT_VAL)", string.Empty)),
            //});

            //_dt1.Columns["SEC1_QTY"].ColumnName = "0-90_Days_Qty";
            //_dt1.Columns["SEC2_QTY"].ColumnName = "91-120_Days_Qty";
            //_dt1.Columns["SEC3_QTY"].ColumnName = "121-180_Days_Qty";
            //_dt1.Columns["SEC4_QTY"].ColumnName = "181-270_Days_Qty";
            //_dt1.Columns["SEC5_QTY"].ColumnName = "271-360_Days_Qty";
            //_dt1.Columns["SEC6_QTY"].ColumnName = "More_than_360_Qty";

            //_dt1.Columns["SEC1_VAL"].ColumnName = "0-90_Days_Val";
            //_dt1.Columns["SEC2_VAL"].ColumnName = "91-120_Days_Val";
            //_dt1.Columns["SEC3_VAL"].ColumnName = "121-180_Days_Val";
            //_dt1.Columns["SEC4_VAL"].ColumnName = "181-270_Days_Val";
            //_dt1.Columns["SEC5_VAL"].ColumnName = "271-360_Days_Val";
            //_dt1.Columns["SEC6_VAL"].ColumnName = "More_than_360_Val";


            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, curComAgeDet, out _err);
            if (curComAgeDet.Rows.Count == 0)
            {
                _err = "No Records Found.";
                return null;
            }
            return _filePath;
        }

        public string getConsignmentStockWithValue(string _com, List<string> _loclist, string _itemcat1, string _itemcat2, string _itemcode, string _brand, string _model, string _brndMan, string _user, bool IsAsat, DateTime _AsatDate)
        {
            string _err = string.Empty;
            string _filePath = string.Empty;
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CurrentAge") == true) _inventoryDAL.ConnectionOpen_DR();

            //DataTable locDt = _inventoryDAL.GetLOC_from_Hierachy(_com, null, null, null, null, "Z0067", null);

            DataTable curComAgeDet = new DataTable();
            DateTime _inDt = DateTime.Today;
            //curComAgeDet = _inventoryDAL.getCurrentComAgeDetails(_com, _loc, _itemcat1, _itemcat2, _itemcode, _brand, _model, _brndMan);

            //foreach (DataRow row in locDt.Rows)
            foreach (string location in _loclist)
            {
                //string location = row["location"].ToString();
                DataTable dt1 = _inventoryDAL.getConsignmentStockWithValue(_com, location, _itemcat1, _itemcat2, _itemcode, _brand, _model, _brndMan, IsAsat, _AsatDate);
                curComAgeDet.Merge(dt1);
                //DataTable dt2 = _inventoryDAL.getCurrentComAgeGIT(_com, location, _itemcat1, _itemcat2, _itemcode, _brand, _model, _brndMan, _inDt);
                //curComAgeDet.Merge(dt2);
            }

            curComAgeDet.TableName = "CurrComAgeAnalysis";

            var inbal = (from tem in curComAgeDet.AsEnumerable()
                         where "1" == "1"
                         group tem by new
                         {
                             COM_CD = tem["COM_CD"],
                             COM_DESC = tem["COM_DESC"],
                             //POWERED_BY = tem["POWERED_BY"],
                             LOC_CD = tem["LOC_CD"],
                             LOC_DESC = tem["LOC_DESC"],
                             ITM_CAT1 = tem["ITM_CAT1"],
                             ITM_CAT1_DESC = tem["ITM_CAT1_DESC"],
                             ITM_CAT2 = tem["ITM_CAT2"],
                             ITM_CAT2_DESC = tem["ITM_CAT2_DESC"],
                             ITM_CAT3 = tem["ITM_CAT3"],
                             ITM_CAT3_DESC = tem["ITM_CAT3_DESC"],
                             ITM_CAT4 = tem["ITM_CAT4"],
                             ITM_CAT4_DESC = tem["ITM_CAT4_DESC"],
                             ITM_CAT5 = tem["ITM_CAT5"],
                             ITM_CAT5_DESC = tem["ITM_CAT5_DESC"],
                             ITM_CD = tem["ITM_CD"],
                             ITM_DESC = tem["ITM_DESC"],
                             ITM_MODEL = tem["ITM_MODEL"],
                             ITM_BRAND = tem["ITM_BRAND"],
                             BRAND_DESC = tem["BRAND_DESC"],
                             ITM_STATUS = tem["ITM_STATUS"],
                             COST = tem["SELL_PRICE"],
                             DOC_NO = tem["DOC_NO"],
                             DOC_DATE = tem["DOC_DATE"],
                             AGE = tem["AGE"],

                         } into ss
                         select new
                         {
                             COM_CD = ss.Key.COM_CD as string,
                             COM_DESC = ss.Key.COM_DESC as string,
                             //POWERED_BY = ss.Key.POWERED_BY as string,
                             LOC_CD = ss.Key.LOC_CD as string,
                             LOC_DESC = ss.Key.LOC_DESC as string,
                             ITM_CAT1 = ss.Key.ITM_CAT1 as string,
                             ITM_CAT1_DESC = ss.Key.ITM_CAT1_DESC as string,
                             ITM_CAT2 = ss.Key.ITM_CAT2 as string,
                             ITM_CAT2_DESC = ss.Key.ITM_CAT2_DESC as string,
                             ITM_CAT3 = ss.Key.ITM_CAT3 as string,
                             ITM_CAT3_DESC = ss.Key.ITM_CAT3_DESC as string,
                             ITM_CAT4 = ss.Key.ITM_CAT4 as string,
                             ITM_CAT4_DESC = ss.Key.ITM_CAT4_DESC as string,
                             ITM_CAT5 = ss.Key.ITM_CAT5 as string,
                             ITM_CAT5_DESC = ss.Key.ITM_CAT5_DESC as string,
                             ITM_CD = ss.Key.ITM_CD as string,
                             ITM_DESC = ss.Key.ITM_DESC as string,
                             ITM_MODEL = ss.Key.ITM_MODEL as string,
                             ITM_BRAND = ss.Key.ITM_BRAND as string,
                             BRAND_DESC = ss.Key.BRAND_DESC as string,
                             ITM_STATUS = ss.Key.ITM_STATUS as string,
                             DOC_NO = ss.Key.DOC_NO as string,
                             DOC_DATE = Convert.ToDateTime(ss.Key.DOC_DATE),
                             COST = Convert.ToDecimal(ss.Key.COST),
                             AGE = Convert.ToDecimal(ss.Key.AGE),
                             SEC1_QTY = ss.Sum(tem => Convert.ToDecimal(tem["SEC1_QTY"])),
                             TotalCost = ss.Sum(tem => Convert.ToDecimal(tem["TotalCost"])),
                         }).ToList();

            DataTable _dt1 = DataTableExtensions.ToDataTable(inbal);

            if (_dt1.Rows.Count > 0)
            {
                _dt1.Rows.Add(new Object[]{"","","","","","","","",	"","","","","","","","","","","","","",null,
                 Convert.ToDecimal(_dt1.Compute("SUM(COST)", string.Empty)),
                 0,
                 Convert.ToDecimal(_dt1.Compute("SUM(SEC1_QTY)", string.Empty)),               
                Convert.ToDecimal(_dt1.Compute("SUM(TotalCost)", string.Empty)),
           });
            }
            _dt1.Columns["SEC1_QTY"].ColumnName = "Qty";
            _dt1.Columns["COST"].ColumnName = "UnitCost";
            _dt1.Columns["ITM_CAT1"].ColumnName = "Cat1";
            _dt1.Columns["ITM_CAT1_DESC"].ColumnName = "Cat1 Desc";
            _dt1.Columns["ITM_CAT2"].ColumnName = "Cat2";
            _dt1.Columns["ITM_CAT2_DESC"].ColumnName = "Cat2 Desc";
            _dt1.Columns["ITM_CAT3"].ColumnName = "Cat3";
            _dt1.Columns["ITM_CAT3_DESC"].ColumnName = "Cat3 Desc";
            _dt1.Columns["ITM_CAT4"].ColumnName = "Cat4";
            _dt1.Columns["ITM_CAT4_DESC"].ColumnName = "Cat4 Desc";
            _dt1.Columns["ITM_CAT5"].ColumnName = "Cat5";
            _dt1.Columns["ITM_CAT5_DESC"].ColumnName = "Cat5 Desc";
            _dt1.Columns["ITM_CD"].ColumnName = "Item Code";
            _dt1.Columns["ITM_DESC"].ColumnName = "Item Desc";
            _dt1.Columns["ITM_MODEL"].ColumnName = "Model";
            _dt1.Columns["ITM_BRAND"].ColumnName = "Brand";
            _dt1.Columns["BRAND_DESC"].ColumnName = "Brand Desc";
            _dt1.Columns["ITM_STATUS"].ColumnName = "Status";
            _dt1.Columns["DOC_NO"].ColumnName = "In Doc No";
            _dt1.Columns["DOC_DATE"].ColumnName = "Doc Date";
            _dt1.Columns["AGE"].ColumnName = "Age Days";


            _err = "";
            _filePath = "";
            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            if (IsAsat == true)
            {
                dataRow = TitleData.NewRow(); dataRow["c6"] = "Asat Consignment Stock with Value"; TitleData.Rows.Add(dataRow);
            }
            else
            {
                dataRow = TitleData.NewRow(); dataRow["c6"] = "Current Consignment Stock with Value"; TitleData.Rows.Add(dataRow);
            }

            dataRow = TitleData.NewRow();
            if (IsAsat == true)
            {
                dataRow["c1"] = "AsAt :"; dataRow["c2"] = _AsatDate;
            }
            else
            {
                dataRow["c1"] = "AsAt :"; dataRow["c2"] = System.DateTime.Now.ToString();
            }

            dataRow["c4"] = "User :"; dataRow["c5"] = _user;
            TitleData.Rows.Add(dataRow);
            _filePath = ExportExcel2007(_com, _user, TitleData, _dt1, out _err);
            if (_dt1.Rows.Count == 0)
            {
                _err = "No Records Found.";
                return null;
            }
            return _filePath;
        }
        public DataTable getAsAtAgeDetails(DateTime _from, DateTime _to, string _com, string _loc, string _itemcat1, string _itemcat2, string _itemcat3, string _itemcat4, string _itemcat5,
     string _itemcode, string _brand, string _model, string _supplier, string _user, string _brndMan, Int16 _isComAge, string _pb = "ABANS", string _pblvl = "A")
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CurrentAge") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.getAsAtAgeDetails(_from, _to, _com, _loc, _itemcat1, _itemcat2, _itemcat3, _itemcat4, _itemcat5, _itemcode, _brand, _model, _supplier, _user, _brndMan, _isComAge, _pb, _pblvl);
        }

        public DataTable getAgesummery(DateTime _from, DateTime _to, DateTime _pre, string _com, string _loc, string _itemcat1, string _itemcat2, string _itemcat3, string _itemcat4, string _itemcat5,
    string _itemcode, string _brand, string _model, string _supplier, string _user, string _brndMan, Int16 _isComAge, string _pb = "ABANS", string _pblvl = "A")
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CurrentAge") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.getAgeSummery(_from, _to, _pre, _com, _loc, _itemcat1, _itemcat2, _itemcat3, _itemcat4, _itemcat5, _itemcode, _brand, _model, _supplier, _user, _brndMan, _isComAge, _pb, _pblvl);
        }

        public DataTable getExchangeCreditNoteDetails(string _com, string _pc, DateTime _fromdate, DateTime _todate, string _user)
        {//Sanjeewa 2016-02-19
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ExchangeCreditNoteDetails") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.getExchangeCreditNoteDetails(_com, _pc, _fromdate, _todate, _user);
        }

        //public DataTable GetGVDetails(DateTime _fromdate, DateTime _todate, string _com, string _pc)
        //{
        //    _salesDAL = new SalesDAL();
        //    _securityDAL = new SecurityDAL();
        //    if (_securityDAL.Is_Report_DR("GVDetails") == true) _salesDAL.ConnectionOpen_DR();
        //    return _salesDAL.GetGVDetails( _fromdate,  _todate,  _com,  _pc);

        //}
        //hasith 27/01/2015
        public DataTable GetGVDetails(DateTime _fromdate, DateTime _todate, string _com, string _pc)
        {
            _FMSinventoryDAL = new FMS_InventoryDAL();
            return _FMSinventoryDAL.GetGVDetails(_fromdate, _todate, _com, _pc);
        }
        public DataTable getLCDetailsBankwise(DateTime _fromDate, DateTime _toDate, string _com, string _bank, string _lcno, string _type, string _all, string _user)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("LCDetailBank") == true) _inventoryDAL.ConnectionOpen_DR();
            return _financialDAL.getLCDetailsBankwise(_fromDate, _toDate, _com, _bank, _lcno, _type, _all, _user);
        }
        public DataTable getCostingSheetDetails(string _blno, string _costtype)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CostSheet") == true) _financialDAL.ConnectionOpen_DR();
            return _financialDAL.getCostingSheetDetails(_blno, _costtype);
        }
        public DataTable getCostingSheetSumDetails(string _blno, string _costtype)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CostSheet") == true) _financialDAL.ConnectionOpen_DR();
            return _financialDAL.getCostingSheetSumDetails(_blno, _costtype);
        }
        public DataTable getShipmentScheduleDetails(DateTime _fromDate, DateTime _toDate, string _com, string _sino, string _user)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ShipmentSchedule") == true) _financialDAL.ConnectionOpen_DR();
            return _financialDAL.getShipmentScheduleDetails(_fromDate, _toDate, _com, _sino, _user);
        }

        public string getCostInformationSummaryDetails(DateTime _fromDate, DateTime _toDate, string _com, string _user,string cat01,string cat02,string cat03,string cat04,string cat05,string items,string models,string brand, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            if (_securityDAL.Is_Report_DR("CostInfoSum") == true) _financialDAL.ConnectionOpen_DR();

            DataTable GLOB_DataTable = new DataTable();
            //DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_user);
            //if (tmp_user_pc.Rows.Count > 0)
            //{
            //    foreach (DataRow drow in tmp_user_pc.Rows)
            //    {
            _dtResults = _financialDAL.getCostInformationSummaryDetails(_fromDate, _toDate, _com, _user, cat01, cat02, cat03, cat04, cat05,items,models,brand);
            GLOB_DataTable.Merge(_dtResults);
            if(GLOB_DataTable!=null)
            {
                if(GLOB_DataTable.Rows.Count>0)
                {
                   // var sortedTable = GLOB_DataTable.AsEnumerable()
                    // .OrderBy(r => r.Field<String>("Item Code")).ThenBy(r => r.Field<String>("Costing Close Date") );
                  //  GLOB_DataTable = sortedTable.CopyToDataTable();     
                    DataView dv = new DataView(GLOB_DataTable);
                    dv.Sort = "Item Code ASC, Costing Close Date DESC";
                    GLOB_DataTable = dv.ToTable();
                }
            }
            //    }
            //}

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Cost Information Summary Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public string GetSipmentStatusDetails(DateTime _fromDate, DateTime _toDate, string _com, string _item, string _blNo, string _entryno, string _user, string _cat1, string _cat2, string _cat3, string _model, string _brand, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            //if (_securityDAL.Is_Report_DR("CostInfoSum") == true) _financialDAL.ConnectionOpen_DR();

            DataTable GLOB_DataTable = new DataTable();
            //DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_user);
            //if (tmp_user_pc.Rows.Count > 0)
            //{
            //    foreach (DataRow drow in tmp_user_pc.Rows)
            //    {
            _dtResults = _financialDAL.GetSipmentStatusDetails(_fromDate, _toDate, _com, _item, _blNo, _entryno, _user, _cat1, _cat2, _cat3, _model, _brand);
            GLOB_DataTable.Merge(_dtResults);
            //    }
            //}

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Shipment Status Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public string GetPhysicalStockVerification(string _mainjobno, string _jobno, string _user, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            //if (_securityDAL.Is_Report_DR("CostInfoSum") == true) _financialDAL.ConnectionOpen_DR();

            DataTable GLOB_DataTable = new DataTable();
            _dtResults = _financialDAL.GetPhysicalStockVerification(_mainjobno, _jobno, _user);
            GLOB_DataTable.Merge(_dtResults);

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Physical Stock Verification Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            //dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            //dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007("ABL", _user, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public string inventoryBalanceSerial_Asat(string _user, string _channel, string _brand, string _model, string _itemcode, string _Itemstatus,
  string _itemcat1, string _itemcat2, string _itemcat3, string _itemcat4, string _itemcat5, Int16 _withcost, DateTime _asatdate, Int16 _serialrep, string _com, string _loc, string _withRCC, string _withJob, string _withGIT, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();
            _inventoryDAL = new InventoryDAL();

            if (_securityDAL.Is_Report_DR("InvAsatBalwithSerial") == true) _inventoryDAL.ConnectionOpen_DR();

            DataTable GLOB_DataTable = new DataTable();

            _dtResults = _inventoryDAL.GetStockBalanceWithSerial_Asat_SCM(_user, _channel, _brand, _model, _itemcode, _Itemstatus, _itemcat1, _itemcat2, _itemcat3, _withcost, _asatdate, _serialrep, 0, _loc, _com);
            GLOB_DataTable.Merge(_dtResults);


            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "INVENTORY BALANCE AS AT DATE (WITH SERIAL)"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            //dataRow["c1"] = "Date From :"; dataRow["c2"] = .ToString("dd/MMM/yyyy");
            //dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public string GetStockBalanceCurrent_SCM_new(string _user, string _channel, string _brand, string _model, string _itemcode, string _Itemstatus,
  string _itemcat1, string _itemcat2, string _itemcat3, string _itemcat4, string _itemcat5, Int16 _withcost, Int16 _serialrep, string _com, string _loc, string _withRCC, string _withJob, string _withGIT, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();
            _inventoryDAL = new InventoryDAL();

            if (_securityDAL.Is_Report_DR("CurrentInvBal") == true) _inventoryDAL.ConnectionOpen_DR();

            DataTable GLOB_DataTable = new DataTable();
            //DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_user);
            //if (tmp_user_pc.Rows.Count > 0)
            //{
            //    foreach (DataRow drow in tmp_user_pc.Rows)
            //    {
            _dtResults = _inventoryDAL.GetStockBalanceCurrent_SCM(_user, _channel, _brand, _model, _itemcode, _Itemstatus, _itemcat1, _itemcat2, _itemcat3, _itemcat4, _itemcat5, _withcost, _serialrep, _com, _loc, _withRCC, _withJob, _withGIT);
            GLOB_DataTable.Merge(_dtResults);
            //    }
            //}

            DataTable INV_SER = new DataTable();
            if (GLOB_DataTable.Rows.Count > 0)
            {
                foreach (DataRow drow in GLOB_DataTable.Rows)
                {
                    DataTable TEMP_SER = new DataTable();
                    TEMP_SER = _inventoryDAL.GetSerialBalance_Curr_SCM_New(drow["com_code"].ToString(), drow["loc_code"].ToString(), drow["item_code"].ToString(), drow["item_status"].ToString(), "N");
                    INV_SER.Merge(TEMP_SER);
                }
            }
            else
            {
                DataTable TEMP_SER = new DataTable();
                TEMP_SER = _inventoryDAL.GetSerialBalance_Curr_SCM_New(_com, "", "", "", "N");
                INV_SER.Merge(TEMP_SER);
            }




            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Current Stock balance with Serial Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            //dataRow["c1"] = "Date From :"; dataRow["c2"] = .ToString("dd/MMM/yyyy");
            //dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, TitleData, INV_SER, out _err);
            if (INV_SER.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }


        public string getAODReconciliationDetails(DateTime _fromDate, DateTime _toDate, string _com, string _fromadmin, string _toadmin, string _user, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            if (_securityDAL.Is_Report_DR("AODReconciliation") == true) _financialDAL.ConnectionOpen_DR();

            DataTable GLOB_DataTable = new DataTable();
            //DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_user);
            //if (tmp_user_pc.Rows.Count > 0)
            //{
            //    foreach (DataRow drow in tmp_user_pc.Rows)
            //    {
            _dtResults = _financialDAL.getAODReconciliationDetails(_fromDate, _toDate, _com, _fromadmin, _toadmin, _user);
            GLOB_DataTable.Merge(_dtResults);
            //    }
            //}

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "AOD Reconciliation Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public string getAODInOutDetails(DateTime _fromDate, DateTime _toDate, string _com, string _fromadmin, string _toadmin, string _fromloc, string _toloc, string _in_aodin, string _in_aodout, string _in_deltype, string _user, out string _err)
        {
            //Wimal 25/10/2016
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            if (_securityDAL.Is_Report_DR("AODInOutDetails") == true) _financialDAL.ConnectionOpen_DR();

            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_user);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _financialDAL.getAODInOutDetails(_fromDate, _toDate, _com, _fromadmin, _toadmin, drow["tpl_pc"].ToString(), _toloc, _in_aodin, _in_aodout, _in_deltype, _user);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }


            //_dtResults = _financialDAL.getAODInOutDetails(_fromDate, _toDate, _com, _fromadmin, _toadmin, _fromloc, _toloc, _user);
            //GLOB_DataTable.Merge(_dtResults);           

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "AOD In Out Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public DataTable ADJDetails(string com, string chanal, DateTime fromdate, DateTime todate)
        {
            List<AdjesmentDet> adjlist = new List<AdjesmentDet>();
            adjlist = null;// Inventory.StockAdjDetails(com, chanal, fromdate, todate);
            DataTable dt = new DataTable();

            if (adjlist != null)
            {
                adjlist = adjlist.GroupBy(l => new { l.ith_loc, l.ith_sub_tp, l.ith_direct })
  .Select(cl => new AdjesmentDet
  {
      ith_loc = cl.First().ith_loc.ToString(),
      total = cl.Sum(c => c.total),
      ith_doc_tp = cl.First().ith_doc_tp.ToString(),
      ith_stus = cl.First().ith_stus.ToString(),
      ith_sub_tp = cl.First().ith_sub_tp,
      ith_direct = cl.First().ith_direct
  }).ToList();

                foreach (var adjdata in adjlist)
                {
                    if (adjdata.ith_direct == 1)
                    {
                        adjdata.ith_doc_tp = "ADJ+";
                    }
                    if (adjdata.ith_direct == 0)
                    {
                        adjdata.ith_doc_tp = "ADJ-";
                    }

                }

                List<Adjloctype> adjloctypelist = new List<Adjloctype>();

                foreach (var adjdata2 in adjlist)
                {
                    Adjloctype obloctype = new Adjloctype();
                    obloctype.loc = adjdata2.ith_loc;
                    obloctype.type = adjdata2.ith_sub_tp;
                    obloctype.doctype = adjdata2.ith_doc_tp;
                    adjloctypelist.Add(obloctype);
                }

                adjloctypelist = adjloctypelist.GroupBy(l => new { l.loc })
         .Select(cl => new Adjloctype
         {
             loc = cl.First().loc.ToString(),
             type = cl.First().type.ToString(),
             doctype = cl.First().doctype.ToString(),
         }).ToList();


                DataRow dr;
                dt.Columns.Add("LOC", typeof(string));
                Int32 COUNT1 = 0;
                Int32 COUNT2 = 0;

                foreach (var adjdata3 in adjloctypelist)
                {

                    foreach (var adjdata4 in adjlist)
                    {
                        DataColumnCollection columns = dt.Columns;
                        if (adjdata3.loc == adjdata4.ith_loc && adjdata4.ith_doc_tp == "ADJ+")
                        {

                            if (!columns.Contains(adjdata4.ith_sub_tp + " " + "ADJ+"))
                            {
                                dt.Columns.Add(adjdata4.ith_sub_tp + " " + "ADJ+", typeof(string));
                            }
                            if (!columns.Contains(adjdata4.ith_sub_tp + " " + "TOTAL"))
                            {
                                dt.Columns.Add(adjdata4.ith_sub_tp + " " + "TOTAL", typeof(string));
                            }
                            if (!columns.Contains(adjdata4.ith_sub_tp + " " + "ADJ-"))
                            {
                                dt.Columns.Add(adjdata4.ith_sub_tp + " " + "ADJ-", typeof(string));
                            }

                        }
                        if (adjdata3.loc == adjdata4.ith_loc && adjdata4.ith_doc_tp == "ADJ-")
                        {
                            if (!columns.Contains(adjdata4.ith_sub_tp + " " + "ADJ-"))
                            {
                                dt.Columns.Add(adjdata4.ith_sub_tp + " " + "ADJ-", typeof(string));
                            }
                            if (!columns.Contains(adjdata4.ith_sub_tp + " " + "TOTAL"))
                            {
                                dt.Columns.Add(adjdata4.ith_sub_tp + " " + "TOTAL", typeof(string));
                            }
                            if (!columns.Contains(adjdata4.ith_sub_tp + " " + "ADJ+"))
                            {
                                dt.Columns.Add(adjdata4.ith_sub_tp + " " + "ADJ+", typeof(string));
                            }

                        }
                    }

                }

                foreach (var adjdata3 in adjloctypelist)
                {
                    dr = dt.NewRow();
                    dr["LOC"] = adjdata3.loc;
                    foreach (var adjdata4 in adjlist)
                    {
                        DataColumnCollection columns = dt.Columns;
                        if (adjdata3.loc == adjdata4.ith_loc && adjdata4.ith_doc_tp == "ADJ+")
                        {
                            dr[adjdata4.ith_sub_tp + " " + "ADJ+"] = adjdata4.total;

                        }
                        if (adjdata3.loc == adjdata4.ith_loc && adjdata4.ith_doc_tp == "ADJ-")
                        {
                            dr[adjdata4.ith_sub_tp + " " + "ADJ-"] = adjdata4.total * (-1);
                        }
                    }
                    dt.Rows.Add(dr);
                }

                foreach (DataRow dtRow in dt.Rows)
                {
                    foreach (DataColumn columnn in dt.Columns)
                    {
                        if (dtRow[columnn].ToString() == "")
                        {
                            dtRow[columnn] = "0";
                        }

                    }

                }
                int p = 0;
                foreach (DataRow dtRow in dt.Rows)
                {
                    Int32 k = 1;
                    foreach (DataColumn columnn in dt.Columns)
                    {
                        if (dt.Columns.Count >= k + 3)
                        {

                            decimal total = Convert.ToDecimal(dt.Rows[p].Field<string>(k)) + Convert.ToDecimal(dt.Rows[p].Field<string>(k + 2));
                            if (k + 1 != 2)
                            {
                                dt.Rows[p][k + 1] = total.ToString();
                            }
                            else
                            {
                                dt.Rows[p][2] = total.ToString();
                            }

                        }

                        k = k + 3;
                    }
                    p++;
                }

                //ExportToExcel(dt, @"C:\SUN\ADJ_" + com + "_" + chanal +".xls");

            }
            return dt;


        }

        public string getAdjustmentDetails(DateTime _fromDate, DateTime _toDate, string _user, string _com, string _channel, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            if (_securityDAL.Is_Report_DR("AODReconciliation") == true) _financialDAL.ConnectionOpen_DR();

            DataTable GLOB_DataTable = new DataTable();

            GLOB_DataTable = ADJDetails(_com, _channel, _fromDate, _toDate);

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Adjustment Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public string getdialyWHStock(string _itemcode, string _itemcat1, string _itemcat2, string _itemcat3, string _itemModel, string _itembrand, string _brandMGR, string _user, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            if (_securityDAL.Is_Report_DR("AODReconciliation") == true) _financialDAL.ConnectionOpen_DR();

            DataTable GLOB_DataTable = new DataTable();
            //DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_user);
            //if (tmp_user_pc.Rows.Count > 0)
            //{
            //    foreach (DataRow drow in tmp_user_pc.Rows)
            //    {
            _dtResults = _financialDAL.getdialyWHStock(_itemcode, _itemcat1, _itemcat2, _itemcat3, _itemModel, _itembrand, _brandMGR);
            GLOB_DataTable.Merge(_dtResults);
            //    }
            //}

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "    "; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Daily warehouse stock status"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "ASAT Date :"; dataRow["c2"] = System.DateTime.Now;
            //dataRow["c4"] = "Date To :"; dataRow["c5"] = "";
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007("ABL", _user, TitleData, GLOB_DataTable, out _err);
            if (_filePath == "Err")
            {
                _filePath = ExportExcel2007("SGL", _user, TitleData, GLOB_DataTable, out _err);
            }
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }


            return _filePath;
        }

        public string GetCanibaliseStockReport(DateTime _fromDate, DateTime _toDate, string _itemclassif, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _Cat4, string _Cat5, string _User, string _StockType, string _Com, string _pb, string _pblvl, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            if (_securityDAL.Is_Report_DR("CanibaliseStock") == true) _salesDAL.ConnectionOpen_DR();

            DataTable GLOB_DataTable = new DataTable();
            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.GetCanibaliseStockReport(_fromDate, _toDate, _itemclassif, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _User, _StockType, drow["tpl_pc"].ToString(), _Com, _pb, _pblvl);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Canibalise Stock Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public string getSalesOrderDetails(DateTime _fromDate, DateTime _toDate, string _com, string _otherloc, string _exec, string _user, string _customer, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            if (_securityDAL.Is_Report_DR("SODetail") == true) _financialDAL.ConnectionOpen_DR();

            DataTable GLOB_DataTable = new DataTable();
            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_user);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _financialDAL.getSalesOrderDetails(_fromDate, _toDate, drow["tpl_com"].ToString(), _otherloc, _exec, drow["tpl_pc"].ToString(), _user, _customer);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = _com; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Sales Order Details Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public string getSalesOrderSummery(DateTime _fromDate, DateTime _toDate, string _com, string _otherloc, string _exec, string _user, string _customer, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;
            string _pc = string.Empty;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            if (_securityDAL.Is_Report_DR("SOSummary") == true) _financialDAL.ConnectionOpen_DR();

            DataTable GLOB_DataTable = new DataTable();
            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_user);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _pc = drow["tpl_pc"].ToString();
                    _dtResults = _financialDAL.getSalesOrderSummery(_fromDate, _toDate, drow["tpl_com"].ToString(), _otherloc, _exec, drow["tpl_pc"].ToString(), _user, _customer);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c8"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c9"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c10"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c11"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c12"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c13"; TitleData.Columns.Add(dataCol);

            dataRow = TitleData.NewRow(); dataRow["c6"] = _com; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Sales Order Summery Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Profit Center :"; dataRow["c5"] = _pc;
            if (_customer == "")
            {
                dataRow["c9"] = "Customer :"; dataRow["c10"] = "All";
            }
            else
            {
                dataRow["c9"] = "Customer :"; dataRow["c10"] = _customer;
            }
            //dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date To :"; dataRow["c2"] = _toDate.ToString("dd/MMM/yyyy");
            if (_customer == "")
            {
                dataRow["c9"] = "Sales Executive :"; dataRow["c10"] = "All";
            }
            else
            {
                dataRow["c9"] = "Sales Executive :"; dataRow["c10"] = _exec;
            }
            //dataRow["c1"] = "Date To :"; dataRow["c2"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c3"] = "Sales Order"; dataRow["c7"] = "SOA"; dataRow["c10"] = "Invoice"; dataRow["c13"] = "Delivery Order";
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public string getIntercompanySalesDetails(DateTime _fromDate, DateTime _toDate, string _com, string _user, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            if (_securityDAL.Is_Report_DR("IntercompanySales") == true) _financialDAL.ConnectionOpen_DR();

            DataTable GLOB_DataTable = new DataTable();
            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_user);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _financialDAL.getIntercompanySalesDetails(_fromDate, _toDate, _com, drow["tpl_pc"].ToString(), _user);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Intercompany Sales Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public string getIntercompanyReversalDetails(DateTime _fromDate, DateTime _toDate, string _com, string _user, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            if (_securityDAL.Is_Report_DR("IntercompanySales") == true) _financialDAL.ConnectionOpen_DR();

            DataTable GLOB_DataTable = new DataTable();
            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_user);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _financialDAL.getIntercompanyReversalDetails(_fromDate, _toDate, _com, drow["tpl_pc"].ToString(), _user);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Intercompany Reversal Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public DataTable PickPlanReport(DateTime _fromdate, DateTime _todate, string in_Company, string _loc, string in_user_id, string _docno, string _route, string _reqtp, int timeSelect)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("PickPlan") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.PickPlanReport(_fromdate, _todate, in_Company, _loc, in_user_id, _docno, _route, _reqtp, timeSelect);
        }

        public string IntertransferDtlReport(DateTime _fromdate, DateTime _todate, string in_Company, string _fromloc, string _toloc, string in_user_id, string _docno, string _route, string _status, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;

            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();
            if (_securityDAL.Is_Report_DR("IntrDtl") == true) _inventoryDAL.ConnectionOpen_DR();

            DataTable GLOB_DataTable = new DataTable();
            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(in_user_id);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _inventoryDAL.IntertransferDtlReport(_fromdate, _todate, in_Company, drow["tpl_pc"].ToString(), _toloc, in_user_id, _docno, _route, _status);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Inter transfer detail Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromdate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _todate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(in_Company, in_user_id, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public DataTable MRNPRintReport(string _docno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.MRNPRintReport(_docno);
        }

        public DataTable getShipmentScheduleContainerDetails(DateTime _fromDate, DateTime _toDate, string _com, string _sino, string _user)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ShipmentSchedule") == true) _financialDAL.ConnectionOpen_DR();
            return _financialDAL.getShipmentScheduleContainerDetails(_fromDate, _toDate, _com, _sino, _user);
        }

        public DataTable getContainerDetailsBySI(string _sino, string _user)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ShipmentSchedule") == true) _financialDAL.ConnectionOpen_DR();
            return _financialDAL.getContainerDetailsBySI(_sino, _user);
        }

        public DataTable getOrderStatusDetails(DateTime _fromDate, DateTime _toDate, string _com, string _user, string _supplier, string _cat1, string _cat2, string _cat3, string _item, string _brand, string _model, string _bldone)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("OrderStatus") == true) _financialDAL.ConnectionOpen_DR();
            return _financialDAL.getOrderStatusDetails(_fromDate, _toDate, _com, _user, _supplier, _cat1, _cat2, _cat3, _item, _brand, _model, _bldone);
        }

        public DataTable getProfitabilityDetails(DateTime _fromDate, DateTime _toDate, string _com, decimal _buyrt, decimal _forcastrt, decimal _costrt, decimal _markup,
              decimal _asschg, string _sino, string _entryno, decimal _overhd, string _pb, string _pblvl, string _user)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ProfitabilityReport") == true) _financialDAL.ConnectionOpen_DR();
            return _financialDAL.getProfitabilityDetails(_fromDate, _toDate, _com, _buyrt, _forcastrt, _costrt, _markup, _asschg, _sino, _entryno, _overhd, _pb, _pblvl, _user);
        }

        public DataTable LINQResultToDataTable<T>(IEnumerable<T> Linqlist)
        {
            DataTable dt = new DataTable();

            PropertyInfo[] columns = null;

            if (Linqlist == null) return dt;

            foreach (T Record in Linqlist)
            {

                if (columns == null)
                {
                    columns = ((Type)Record.GetType()).GetProperties();
                    foreach (PropertyInfo GetProperty in columns)
                    {
                        Type colType = GetProperty.PropertyType;

                        if ((colType.IsGenericType) && (colType.GetGenericTypeDefinition()
                        == typeof(Nullable<>)))
                        {
                            colType = colType.GetGenericArguments()[0];
                        }

                        dt.Columns.Add(new DataColumn(GetProperty.Name, colType));
                    }
                }

                DataRow dr = dt.NewRow();

                foreach (PropertyInfo pinfo in columns)
                {
                    dr[pinfo.Name] = pinfo.GetValue(Record, null) == null ? DBNull.Value : pinfo.GetValue
                    (Record, null);
                }

                dt.Rows.Add(dr);
            }
            return dt;
        }


        public string LOPOCostDetailsReport(DateTime _fromDate, DateTime _toDate, string _com, string _user, string _pb, string _pblvl, out string _err)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();
            if (_securityDAL.Is_Report_DR("LOPODetail") == true) _inventoryDAL.ConnectionOpen_DR();

            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults = new DataTable(); ;
            DataTable _dtDispatch = new DataTable();

            _dtResults = _inventoryDAL.LOPOCostDetailsReport(_fromDate, _toDate, _com, _user, _pb, _pblvl);
            _dtDispatch.Merge(_dtResults);


            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "LO PO Cost Details Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, TitleData, _dtDispatch, out _err);

            if (_dtDispatch.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public string getDispatchAppDetails(DateTime _fromtDate, DateTime _totDate, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _Cat4, string _Cat5, string _Com, string _User, out string _err)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();
            if (_securityDAL.Is_Report_DR("DispatchApp") == true) _financialDAL.ConnectionOpen_DR();

            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults = new DataTable(); ;
            DataTable _dtDispatch = new DataTable();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _financialDAL.getDispatchAppDetails(_fromtDate, _totDate, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _Com, drow["tpl_pc"].ToString(), _User);
                    _dtDispatch.Merge(_dtResults);
                }
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Dispatch Approve Details Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromtDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _totDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, TitleData, _dtDispatch, out _err);

            if (_dtDispatch.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public string GetCommonExcelDetails(string _SQL, string _user, out string _err)
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();
            if (_securityDAL.Is_Report_DR("CommonReport") == true) _salesDAL.ConnectionOpen_DR();

            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults = new DataTable(); ;
            DataTable _dtDispatch = new DataTable();

            _dtResults = _salesDAL.GetCommonExcelDetails(_SQL);
            _dtDispatch.Merge(_dtResults);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007("ABL", _user, _dtDispatch, out _err);

            if (_dtDispatch.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public string getValuationDetails(DateTime _fromtDate, DateTime _totDate, string _ItemClasif, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _Cat4, string _Cat5, string _Stktype, string _Group, string _CostOrValue, string _Com, string _User, out string _err)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();
            if (_securityDAL.Is_Report_DR("ValuationDetail") == true) _financialDAL.ConnectionOpen_DR();

            _err = string.Empty;
            string _filePath = string.Empty;
            int i = 0;

            DataTable _dtResults = new DataTable();
            DataTable _dtValuation = new DataTable();
            DataTable _period = new DataTable();
            DataTable _opbal = new DataTable();
            DataTable _closebal = new DataTable();

            //DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User).DefaultView.ToTable();
            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    i = i + 1;

                    //if (i==1)
                    //{
                    //    _period = _financialDAL.getPeriodDetails(_fromtDate,drow["tpl_com"].ToString());
                    //}

                    //if (_period.Rows.Count > 0)
                    //{
                    //    foreach (DataRow _rperiod in _period.Rows)
                    //    {
                    //        _opbal = GetClosingBalanceWithValueProcess(drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), Convert.ToDateTime(_rperiod["prd_to"]).AddDays(1), _fromtDate.AddDays(-1), Convert.ToInt16(_rperiod["prd_seq_no"]), "0", _User);
                    //        _closebal = GetClosingBalanceWithValueProcess(drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), Convert.ToDateTime(_rperiod["prd_to"]).AddDays(1), _totDate, Convert.ToInt16(_rperiod["prd_seq_no"]), "0", _User);
                    //    }
                    //}

                    _dtResults = _financialDAL.getValuationDetails(_fromtDate, _totDate, _ItemClasif, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _Stktype, drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), _User);
                    //_dtResults = _financialDAL.getValuationDetails(_fromtDate, _totDate, _ItemClasif, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _Stktype, drow["tpl_com"].ToString(), "", _User);

                    //string _Group, string _CostOrValue
                    if (_CostOrValue == "QTY")
                    {
                        if (_Group == "ITM")
                        {
                            var valuation = from b in _dtResults.AsEnumerable()
                                            group b by new { Itemcode = b.Field<string>("ITEM_CODE"), Itemdesc = b.Field<string>("ITEM_DESC") } into g
                                            select new
                                            {
                                                ITEM_CODE = g.Key.Itemcode,
                                                ITEM_DESCRIPTION = g.Key.Itemdesc,
                                                //ITEM_SATUS = g.Key.Itemstatus,
                                                OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                //OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                //OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                //GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                //SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                //AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                //ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                //TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                //DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                //PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                //AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                //ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                //TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                //GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                //CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                                                //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                                                //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                                                //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                                                //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                                                //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                                                //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                                            };

                            DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                            _dtValuation.Merge(_dtValuation1);
                        }
                        if (_Group == "ITMS")
                        {
                            var valuation = from b in _dtResults.AsEnumerable()
                                            group b by new { Itemcode = b.Field<string>("ITEM_CODE"), Itemdesc = b.Field<string>("ITEM_DESC"), Itemstatus = b.Field<string>("ITEMS_STATUS") } into g
                                            select new
                                            {
                                                ITEM_CODE = g.Key.Itemcode,
                                                ITEM_DESCRIPTION = g.Key.Itemdesc,
                                                ITEM_SATUS = g.Key.Itemstatus,
                                                OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                //OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                //OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                //GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                //SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                //AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                //ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                //TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                //DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                //PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                //AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                //ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                //TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                //GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                //CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                                                //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                                                //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                                                //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                                                //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                                                //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                                                //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                                            };

                            DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                            _dtValuation.Merge(_dtValuation1);
                        }
                        if (_Group == "LOC")
                        {
                            var valuation = from b in _dtResults.AsEnumerable()
                                            group b by new { LocCode = b.Field<string>("LOC_CODE"), LocDesc = b.Field<string>("LOC_DESC") } into g
                                            select new
                                            {
                                                LOC_CODE = g.Key.LocCode,
                                                LOC_DESCRIPTION = g.Key.LocDesc,
                                                OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                //OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                //OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                //GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                //SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                //AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                //ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                //TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                //DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                //PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                //AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                //ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                //TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                //GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                //CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                                                //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                                                //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                                                //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                                                //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                                                //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                                                //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                                            };

                            DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                            _dtValuation.Merge(_dtValuation1);
                        }

                        if (_Group == "CAT1")
                        {
                            var valuation = from b in _dtResults.AsEnumerable()
                                            group b by new { Cat1 = b.Field<string>("ITEM_CAT1"), Cat1Desc = b.Field<string>("ITEM_CAT1_DESC") } into g
                                            select new
                                            {
                                                ITEM_CODE = g.Key.Cat1,
                                                ITEM_DESCRIPTION = g.Key.Cat1Desc,
                                                OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                //OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                //OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                //GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                //SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                //AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                //ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                //TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                //DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                //PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                //AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                //ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                //TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                //GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                //CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                                                //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                                                //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                                                //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                                                //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                                                //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                                                //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                                            };

                            DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                            _dtValuation.Merge(_dtValuation1);
                        }
                    }

                    if (_CostOrValue == "VAL")
                    {
                        if (_Group == "ITM")
                        {
                            var valuation = from b in _dtResults.AsEnumerable()
                                            group b by new { Itemcode = b.Field<string>("ITEM_CODE"), Itemdesc = b.Field<string>("ITEM_DESC") } into g
                                            select new
                                            {
                                                ITEM_CODE = g.Key.Itemcode,
                                                ITEM_DESCRIPTION = g.Key.Itemdesc,
                                                //ITEM_STATUS = g.Key.Itemstatus,
                                                //OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                //OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                //GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                //SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                //AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                //ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                //TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                //DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                //PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                //AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                //ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                //TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                //GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                //CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                                                //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                                                //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                                                //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                                                //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                                                //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                                                //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                                            };

                            DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                            _dtValuation.Merge(_dtValuation1);
                        }
                        if (_Group == "ITMS")
                        {
                            var valuation = from b in _dtResults.AsEnumerable()
                                            group b by new { Itemcode = b.Field<string>("ITEM_CODE"), Itemdesc = b.Field<string>("ITEM_DESC"), Itemstatus = b.Field<string>("ITEMS_STATUS") } into g
                                            select new
                                            {
                                                ITEM_CODE = g.Key.Itemcode,
                                                ITEM_DESCRIPTION = g.Key.Itemdesc,
                                                ITEM_STATUS = g.Key.Itemstatus,
                                                //OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                //OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                //GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                //SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                //AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                //ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                //TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                //DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                //PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                //AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                //ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                //TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                //GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                //CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                                                //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                                                //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                                                //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                                                //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                                                //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                                                //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                                            };

                            DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                            _dtValuation.Merge(_dtValuation1);
                        }
                        if (_Group == "LOC")
                        {
                            var valuation = from b in _dtResults.AsEnumerable()
                                            group b by new { LocCode = b.Field<string>("LOC_CODE"), LocDesc = b.Field<string>("LOC_DESC") } into g
                                            select new
                                            {
                                                LOC_CODE = g.Key.LocCode,
                                                LOC_DESCRIPTION = g.Key.LocDesc,
                                                //OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                //OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                //GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                //SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                //AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                //ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                //TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                //DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                //PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                //AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                //ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                //TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                //GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                //CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                                                //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                                                //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                                                //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                                                //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                                                //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                                                //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                                            };

                            DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                            _dtValuation.Merge(_dtValuation1);
                        }

                        if (_Group == "CAT1")
                        {
                            var valuation = from b in _dtResults.AsEnumerable()
                                            group b by new { Cat1 = b.Field<string>("ITEM_CAT1"), Cat1Desc = b.Field<string>("ITEM_CAT1_DESC") } into g
                                            select new
                                            {
                                                ITEM_CODE = g.Key.Cat1,
                                                ITEM_DESCRIPTION = g.Key.Cat1Desc,
                                                //OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                //OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                //GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                //SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                //AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                //ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                //TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                //DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                //PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                //AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                //ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                //TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                //GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                //CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                                                //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                                                //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                                                //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                                                //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                                                //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                                                //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                                            };

                            DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                            _dtValuation.Merge(_dtValuation1);
                        }
                    }

                    if (_CostOrValue == "BOTH")
                    {
                        if (_Group == "ITM")
                        {
                            var valuation = from b in _dtResults.AsEnumerable()
                                            group b by new { Itemcode = b.Field<string>("ITEM_CODE"), Itemdesc = b.Field<string>("ITEM_DESC") } into g
                                            select new
                                            {
                                                ITEM_CODE = g.Key.Itemcode,
                                                ITEM_DESCRIPTION = g.Key.Itemdesc,
                                                //ITEM_STATUS = g.Key.Itemstatus,
                                                OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                                                //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                                                //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                                                //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                                                //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                                                //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                                                //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                                            };

                            DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                            _dtValuation.Merge(_dtValuation1);
                        }
                        if (_Group == "ITMS")
                        {
                            var valuation = from b in _dtResults.AsEnumerable()
                                            group b by new { Itemcode = b.Field<string>("ITEM_CODE"), Itemdesc = b.Field<string>("ITEM_DESC"), Itemstatus = b.Field<string>("ITEMS_STATUS") } into g
                                            select new
                                            {
                                                ITEM_CODE = g.Key.Itemcode,
                                                ITEM_DESCRIPTION = g.Key.Itemdesc,
                                                ITEM_STATUS = g.Key.Itemstatus,
                                                OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                                                //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                                                //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                                                //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                                                //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                                                //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                                                //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                                            };

                            DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                            _dtValuation.Merge(_dtValuation1);
                        }
                        if (_Group == "LOC")
                        {
                            var valuation = from b in _dtResults.AsEnumerable()
                                            group b by new { LocCode = b.Field<string>("LOC_CODE"), LocDesc = b.Field<string>("LOC_DESC") } into g
                                            select new
                                            {
                                                LOC_CODE = g.Key.LocCode,
                                                LOC_DESCRIPTION = g.Key.LocDesc,
                                                OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                                                //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                                                //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                                                //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                                                //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                                                //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                                                //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                                            };

                            DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                            _dtValuation.Merge(_dtValuation1);
                        }

                        if (_Group == "CAT1")
                        {
                            var valuation = from b in _dtResults.AsEnumerable()
                                            group b by new { Cat1 = b.Field<string>("ITEM_CAT1"), Cat1Desc = b.Field<string>("ITEM_CAT1_DESC") } into g
                                            select new
                                            {
                                                ITEM_CODE = g.Key.Cat1,
                                                ITEM_DESCRIPTION = g.Key.Cat1Desc,
                                                OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                                                //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                                                //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                                                //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                                                //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                                                //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                                                //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                                            };

                            DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                            _dtValuation.Merge(_dtValuation1);
                        }
                    }

                }
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Valuation Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromtDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _totDate.ToString("dd/MMM/yyyy");
            //if (tmp_user_pc.Rows.Count > 0)
            //{
            //    int a = 0;
            //    foreach (DataRow drow in tmp_user_pc.Rows)
            //    {
            //        a = a + 1;
            //        if (a == 1)
            //        {
            //            if (tmp_user_pc.Rows.Count == 1)
            //            { dataRow = TitleData.NewRow(); dataRow["c6"] = drow["tpl_pc"].ToString(); TitleData.Rows.Add(dataRow); }
            //            else
            //            { dataRow = TitleData.NewRow(); dataRow["c6"] = "All Locations based on User Rights"; TitleData.Rows.Add(dataRow); }
            //        }
            //    }
            //}
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, TitleData, _dtValuation, out _err);

            if (_dtValuation.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }

        public string getValuationDetails_ARL(DateTime _fromtDate, DateTime _totDate, string _ItemClasif, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _Cat4, string _Cat5, string _Stktype, string _Group, string _CostOrValue, string _Com, string _User, out string _err)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();
            if (_securityDAL.Is_Report_DR("ValuationDetail") == true) _financialDAL.ConnectionOpen_DR();

            _err = string.Empty;
            string _filePath = string.Empty;
            int i = 0;

            DataTable _dtResults = new DataTable();
            DataTable _dtValuation = new DataTable();
            DataTable _period = new DataTable();
            DataTable _opbal = new DataTable();
            DataTable _closebal = new DataTable();

            //DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User).DefaultView.ToTable();
            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    i = i + 1;

                    //if (i==1)
                    //{
                    //    _period = _financialDAL.getPeriodDetails(_fromtDate,drow["tpl_com"].ToString());
                    //}

                    //if (_period.Rows.Count > 0)
                    //{
                    //    foreach (DataRow _rperiod in _period.Rows)
                    //    {
                    //        _opbal = GetClosingBalanceWithValueProcess(drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), Convert.ToDateTime(_rperiod["prd_to"]).AddDays(1), _fromtDate.AddDays(-1), Convert.ToInt16(_rperiod["prd_seq_no"]), "0", _User);
                    //        _closebal = GetClosingBalanceWithValueProcess(drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), Convert.ToDateTime(_rperiod["prd_to"]).AddDays(1), _totDate, Convert.ToInt16(_rperiod["prd_seq_no"]), "0", _User);
                    //    }
                    //}

                    _dtResults = _financialDAL.getValuationDetails(_fromtDate, _totDate, _ItemClasif, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _Stktype, drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), _User);
                    //_dtResults = _financialDAL.getValuationDetails(_fromtDate, _totDate, _ItemClasif, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _Stktype, drow["tpl_com"].ToString(), "", _User);

                    //string _Group, string _CostOrValue
                    if (_CostOrValue == "QTY")
                    {
                        if (_Group == "ITM")
                        {
                            var valuation = from b in _dtResults.AsEnumerable()
                                            group b by new { Itemcode = b.Field<string>("ITEM_CODE"), Itemdesc = b.Field<string>("ITEM_DESC") } into g
                                            select new
                                            {
                                                ITEM_CODE = g.Key.Itemcode,
                                                ITEM_DESCRIPTION = g.Key.Itemdesc,
                                                OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                //OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                //OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                //GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                //SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                //AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                //ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                //TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                //DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                //PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                //AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                //ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                //TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                //GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                //CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                                                //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                                                //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                                                //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                                                //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                                                //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                                                //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                                            };

                            DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                            _dtValuation.Merge(_dtValuation1);
                        }

                        if (_Group == "LOC")
                        {
                            var valuation = from b in _dtResults.AsEnumerable()
                                            group b by new { LocCode = b.Field<string>("LOC_CODE"), LocDesc = b.Field<string>("LOC_DESC") } into g
                                            select new
                                            {
                                                LOC_CODE = g.Key.LocCode,
                                                LOC_DESCRIPTION = g.Key.LocDesc,
                                                OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                //OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                //OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                //GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                //SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                //AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                //ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                //TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                //DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                //PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                //AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                //ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                //TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                //GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                //CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                                                //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                                                //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                                                //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                                                //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                                                //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                                                //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                                            };

                            DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                            _dtValuation.Merge(_dtValuation1);
                        }

                        if (_Group == "CAT1")
                        {
                            var valuation = from b in _dtResults.AsEnumerable()
                                            group b by new { Cat1 = b.Field<string>("ITEM_CAT1"), Cat1Desc = b.Field<string>("ITEM_CAT1_DESC") } into g
                                            select new
                                            {
                                                ITEM_CODE = g.Key.Cat1,
                                                ITEM_DESCRIPTION = g.Key.Cat1Desc,
                                                OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                //OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                //OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                //GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                //SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                //AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                //ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                //TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                //DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                //PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                //AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                //ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                //TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                //GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                //CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                                                //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                                                //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                                                //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                                                //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                                                //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                                                //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                                            };

                            DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                            _dtValuation.Merge(_dtValuation1);
                        }
                    }

                    if (_CostOrValue == "VAL")
                    {
                        if (_Group == "ITM")
                        {
                            var valuation = from b in _dtResults.AsEnumerable()
                                            group b by new { Itemcode = b.Field<string>("ITEM_CODE"), Itemdesc = b.Field<string>("ITEM_DESC") } into g
                                            select new
                                            {
                                                ITEM_CODE = g.Key.Itemcode,
                                                ITEM_DESCRIPTION = g.Key.Itemdesc,
                                                //OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                //OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                //GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                //SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                //AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                //ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                //TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                //DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                //PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                //AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                //ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                //TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                //GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                //CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                                                //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                                                //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                                                //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                                                //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                                                //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                                                //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                                            };

                            DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                            _dtValuation.Merge(_dtValuation1);
                        }

                        if (_Group == "LOC")
                        {
                            var valuation = from b in _dtResults.AsEnumerable()
                                            group b by new { LocCode = b.Field<string>("LOC_CODE"), LocDesc = b.Field<string>("LOC_DESC") } into g
                                            select new
                                            {
                                                LOC_CODE = g.Key.LocCode,
                                                LOC_DESCRIPTION = g.Key.LocDesc,
                                                //OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                //OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                //GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                //SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                //AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                //ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                //TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                //DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                //PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                //AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                //ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                //TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                //GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                //CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                                                //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                                                //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                                                //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                                                //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                                                //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                                                //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                                            };

                            DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                            _dtValuation.Merge(_dtValuation1);
                        }

                        if (_Group == "CAT1")
                        {
                            var valuation = from b in _dtResults.AsEnumerable()
                                            group b by new { Cat1 = b.Field<string>("ITEM_CAT1"), Cat1Desc = b.Field<string>("ITEM_CAT1_DESC") } into g
                                            select new
                                            {
                                                ITEM_CODE = g.Key.Cat1,
                                                ITEM_DESCRIPTION = g.Key.Cat1Desc,
                                                //OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                //OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                //GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                //SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                //AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                //ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                //TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                //DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                //PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                //AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                //ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                //TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                //GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                //CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                                                //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                                                //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                                                //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                                                //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                                                //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                                                //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                                            };

                            DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                            _dtValuation.Merge(_dtValuation1);
                        }
                    }

                    if (_CostOrValue == "BOTH")
                    {
                        if (_Group == "ITM")
                        {
                            var valuation = from b in _dtResults.AsEnumerable()
                                            group b by new { Cat1 = b.Field<string>("ITEM_CAT1"), Cat1Desc = b.Field<string>("ITEM_CAT1_DESC"), Itemcode = b.Field<string>("ITEM_CODE"), Itemdesc = b.Field<string>("ITEM_DESC") } into g
                                            select new
                                            {
                                                CAT_CODE = g.Key.Cat1,
                                                CAT_DESCRIPTION = g.Key.Cat1Desc,
                                                ITEM_CODE = g.Key.Itemcode,
                                                ITEM_DESCRIPTION = g.Key.Itemdesc,
                                                OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                                                //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                                                //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                                                //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                                                //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                                                //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                                                //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                                            };

                            DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                            _dtValuation.Merge(_dtValuation1);

                            //--------------------------------Calc Total --   Start 
                            var valuation_tot = from b in _dtResults.AsEnumerable()
                                                group b by new { Cat1 = b.Field<string>("ITEM_CAT1"), Cat1Desc = b.Field<string>("ITEM_CAT1_DESC") } into g
                                                select new
                                                {
                                                    CAT_CODE = g.Key.Cat1 + " Cat.-Total ",
                                                    CAT_DESCRIPTION = " ",
                                                    ITEM_CODE = " ",
                                                    ITEM_DESCRIPTION = " ",
                                                    OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                    OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                    OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                    OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                    GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                    GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                    SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                    SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                    AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                    AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                    ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                    ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                    //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                    //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                    TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                    TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                    DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                    DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                    PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                    PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                    AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                    AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                    ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                    ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                    //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                    //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                    TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                    TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                    GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                    GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                    CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                    CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                                                    //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                                                    //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                                                    //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                                                    //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                                                    //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                                                    //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                                                };

                            _dtValuation1 = LINQResultToDataTable(valuation_tot);
                            _dtValuation.Merge(_dtValuation1);
                            //--------------------------------Calc Total --   End

                            DataView viewFIn = new DataView(_dtValuation);
                            viewFIn.Sort = "CAT_CODE";
                            _dtValuation = viewFIn.ToTable();

                            //-------------------------------Grand Total --   Start 
                            valuation_tot = from b in _dtResults.AsEnumerable()
                                            group b by new { LocCode = b.Field<string>("LOC_CODE"), LocDesc = b.Field<string>("LOC_DESC") } into g
                                            select new
                                            {
                                                CAT_CODE = " Grand - Total ",
                                                CAT_DESCRIPTION = " ",
                                                ITEM_CODE = " ",
                                                ITEM_DESCRIPTION = " ",
                                                OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                                                //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                                                //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                                                //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                                                //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                                                //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                                                //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                                            };

                            _dtValuation1 = LINQResultToDataTable(valuation_tot);
                            _dtValuation.Merge(_dtValuation1);
                            //--------------------------------Calc Total --   End


                        }

                        if (_Group == "LOC")
                        {
                            var valuation = from b in _dtResults.AsEnumerable()
                                            group b by new { LocCode = b.Field<string>("LOC_CODE"), LocDesc = b.Field<string>("LOC_DESC") } into g
                                            select new
                                            {
                                                LOC_CODE = g.Key.LocCode,
                                                LOC_DESCRIPTION = g.Key.LocDesc,
                                                OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                                                //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                                                //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                                                //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                                                //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                                                //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                                                //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                                            };

                            DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                            _dtValuation.Merge(_dtValuation1);
                        }

                        if (_Group == "CAT1")
                        {
                            var valuation = from b in _dtResults.AsEnumerable()
                                            group b by new { Cat1 = b.Field<string>("ITEM_CAT1"), Cat1Desc = b.Field<string>("ITEM_CAT1_DESC") } into g
                                            select new
                                            {
                                                ITEM_CODE = g.Key.Cat1,
                                                ITEM_DESCRIPTION = g.Key.Cat1Desc,
                                                OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                                                OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                                                OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                                                OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                                                GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                                                GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                                                SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                                                SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                                                AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                                                AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                                                ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                                                ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                                                //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                                                //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                                                TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                                                TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                                                DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                                                DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                                                PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                                                PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                                                AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                                                AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                                                ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                                                ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                                                //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                                                //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                                                TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                                                TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                                                GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                                                GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                                                CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                                                CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                                                //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                                                //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                                                //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                                                //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                                                //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                                                //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                                            };

                            DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                            _dtValuation.Merge(_dtValuation1);
                        }
                    }

                }
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS RESTAURANT SYSTEMS PVT LTD"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Valuation Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromtDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _totDate.ToString("dd/MMM/yyyy");
            //if (tmp_user_pc.Rows.Count > 0)
            //{
            //    int a = 0;
            //    foreach (DataRow drow in tmp_user_pc.Rows)
            //    {
            //        a = a + 1;
            //        if (a == 1)
            //        {
            //            if (tmp_user_pc.Rows.Count == 1)
            //            { dataRow = TitleData.NewRow(); dataRow["c6"] = drow["tpl_pc"].ToString(); TitleData.Rows.Add(dataRow); }
            //            else
            //            { dataRow = TitleData.NewRow(); dataRow["c6"] = "All Locations based on User Rights"; TitleData.Rows.Add(dataRow); }
            //        }
            //    }
            //}
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, TitleData, _dtValuation, out _err);

            if (_dtValuation.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;



        }

        public DataTable getValuationDetails_Cr(DateTime _fromtDate, DateTime _totDate, string _ItemClasif, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _Cat4, string _Cat5, string _Stktype, string _Group, string _CostOrValue, string _Com, string _User)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();
            if (_securityDAL.Is_Report_DR("ValuationDetail") == true) _financialDAL.ConnectionOpen_DR();

            DataTable _dtResults = new DataTable();
            DataTable _dtValuation = new DataTable();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _financialDAL.getValuationDetails(_fromtDate, _totDate, _ItemClasif, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _Stktype, drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), _User);
                    _dtValuation.Merge(_dtResults);
                }
            }
            _dtValuation.TableName = "tbl";

            return _dtValuation;
        }

        public string getBMSalesDetails(DateTime _FromDate, DateTime _ToDate, string _invdate, string _com, string _user, DataTable _col, DataTable _row, DataTable _val, out string _err)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("BMSales") == true) _financialDAL.ConnectionOpen_DR();

            _err = string.Empty;
            string _filePath = string.Empty;
            int s = 0;

            DataTable _dtResults;
            DataTable _repHead = _financialDAL.getBMReportHeading("BM_SALES");

            DataTable BMSales = new DataTable();
            DataRow dr;

            BMSales.Clear();
            if (_repHead.Rows.Count <= 0)
            {
                _err = "Report Headings not defined.";
                goto A;
            }

            _dtResults = _financialDAL.getBMSalesDetails(_FromDate, _ToDate, _invdate, _com, "29", _user, "", 0, 0, "", 0, 0, 0);

            if (_dtResults.Rows.Count > 0)
            {
                foreach (DataRow _drresult in _dtResults.Rows)
                {
                    s = s + 1;

                    if (s == 1)
                    {//Create Datatable
                        if (_dtResults.Rows.Count > 0)
                        {
                            foreach (DataRow _drrow in _row.Rows)
                            {
                                foreach (DataRow drlochead in _repHead.Rows)
                                {
                                    if (drlochead["bmr_col_nm"].ToString() == _drrow["fieldname"].ToString())
                                    {
                                        if (drlochead["bmr_data_tp"].ToString() == "string") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(string));
                                        if (drlochead["bmr_data_tp"].ToString() == "int") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(int));
                                        if (drlochead["bmr_data_tp"].ToString() == "decimal") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(decimal));
                                    }
                                }
                            }

                            foreach (DataRow _drcol in _col.Rows)
                            {
                                foreach (DataRow drlochead in _repHead.Rows)
                                {
                                    if (drlochead["bmr_col_nm"].ToString() == _drcol["fieldname"].ToString())
                                    {
                                        if (drlochead["bmr_data_tp"].ToString() == "string") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(string));
                                        if (drlochead["bmr_data_tp"].ToString() == "int") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(int));
                                        if (drlochead["bmr_data_tp"].ToString() == "decimal") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(decimal));
                                    }
                                }
                            }

                            foreach (DataRow _drval in _val.Rows)
                            {
                                foreach (DataRow drlochead in _repHead.Rows)
                                {
                                    if (drlochead["bmr_col_nm"].ToString() == _drval["fieldname"].ToString())
                                    {
                                        if (drlochead["bmr_data_tp"].ToString() == "string") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(string));
                                        if (drlochead["bmr_data_tp"].ToString() == "int") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(int));
                                        if (drlochead["bmr_data_tp"].ToString() == "decimal") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(decimal));
                                    }
                                }
                            }
                        }
                    }

                    dr = BMSales.NewRow();
                    foreach (DataRow _drrow in _row.Rows)
                    {
                        foreach (DataRow drlochead in _repHead.Rows)
                        {
                            if (drlochead["bmr_col_nm"].ToString() == _drrow["fieldname"].ToString())
                            {
                                if (drlochead["bmr_data_tp"].ToString() == "string") dr[drlochead["bmr_col_desc"].ToString()] = _drresult[drlochead["bmr_col_nm"].ToString()].ToString();
                                if (drlochead["bmr_data_tp"].ToString() == "int") dr[drlochead["bmr_col_desc"].ToString()] = Convert.ToInt16(_drresult[drlochead["bmr_col_nm"].ToString()].ToString());
                                if (drlochead["bmr_data_tp"].ToString() == "decimal") dr[drlochead["bmr_col_desc"].ToString()] = Convert.ToDecimal(_drresult[drlochead["bmr_col_nm"].ToString()].ToString());
                            }
                        }

                        foreach (DataRow _drcol in _col.Rows)
                        {
                            foreach (DataRow drlochead in _repHead.Rows)
                            {
                                if (drlochead["bmr_col_nm"].ToString() == _drcol["fieldname"].ToString())
                                {
                                    if (drlochead["bmr_data_tp"].ToString() == "string") dr[drlochead["bmr_col_desc"].ToString()] = _drresult[drlochead["bmr_col_nm"].ToString()].ToString();
                                    if (drlochead["bmr_data_tp"].ToString() == "int") dr[drlochead["bmr_col_desc"].ToString()] = Convert.ToInt16(_drresult[drlochead["bmr_col_nm"].ToString()].ToString());
                                    if (drlochead["bmr_data_tp"].ToString() == "decimal") dr[drlochead["bmr_col_desc"].ToString()] = Convert.ToDecimal(_drresult[drlochead["bmr_col_nm"].ToString()].ToString());
                                }
                            }
                        }

                        foreach (DataRow _drval in _val.Rows)
                        {
                            foreach (DataRow drlochead in _repHead.Rows)
                            {
                                if (drlochead["bmr_col_nm"].ToString() == _drval["fieldname"].ToString())
                                {
                                    if (drlochead["bmr_data_tp"].ToString() == "string") dr[drlochead["bmr_col_desc"].ToString()] = _drresult[drlochead["bmr_col_nm"].ToString()].ToString();
                                    if (drlochead["bmr_data_tp"].ToString() == "int") dr[drlochead["bmr_col_desc"].ToString()] = Convert.ToInt16(_drresult[drlochead["bmr_col_nm"].ToString()].ToString());
                                    if (drlochead["bmr_data_tp"].ToString() == "decimal") dr[drlochead["bmr_col_desc"].ToString()] = Convert.ToDecimal(_drresult[drlochead["bmr_col_nm"].ToString()].ToString());
                                }
                            }
                        }

                    }

                    BMSales.Rows.Add(dr);

                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, BMSales, out _err);
            if (BMSales.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
        A:
            return _filePath;
        }

        public string getSalesCount(DateTime _FromDate, DateTime _ToDate, string _invdate, string _com, string _user, DataTable _col, DataTable _row, DataTable _val, out string _err)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("BMSales") == true) _financialDAL.ConnectionOpen_DR();

            _err = string.Empty;
            string _filePath = string.Empty;
            int s = 0;

            DataTable _dtResults;
            DataTable _repHead = _financialDAL.getBMReportHeading("BM_SALES");

            DataTable BMSales = new DataTable();
            DataRow dr;

            BMSales.Clear();
            //if (_repHead.Rows.Count <= 0)
            //{
            //    _err = "Report Headings not defined.";
            //    goto A;
            //}

            _dtResults = _financialDAL.getBMSalesDetails(_FromDate, _ToDate, _invdate, _com, "29", _user, "", 0, 0, "", 0, 0, 0);

            //if (_dtResults.Rows.Count > 0)
            //{
            //    foreach (DataRow _drresult in _dtResults.Rows)
            //    {
            //        s = s + 1;

            //        if (s == 1)
            //        {//Create Datatable
            //            if (_dtResults.Rows.Count > 0)
            //            {
            //                foreach (DataRow _drrow in _row.Rows)
            //                {
            //                    foreach (DataRow drlochead in _repHead.Rows)
            //                    {
            //                        if (drlochead["bmr_col_nm"].ToString() == _drrow["fieldname"].ToString())
            //                        {
            //                            if (drlochead["bmr_data_tp"].ToString() == "string") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(string));
            //                            if (drlochead["bmr_data_tp"].ToString() == "int") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(int));
            //                            if (drlochead["bmr_data_tp"].ToString() == "decimal") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(decimal));
            //                        }
            //                    }
            //                }

            //                foreach (DataRow _drcol in _col.Rows)
            //                {
            //                    foreach (DataRow drlochead in _repHead.Rows)
            //                    {
            //                        if (drlochead["bmr_col_nm"].ToString() == _drcol["fieldname"].ToString())
            //                        {
            //                            if (drlochead["bmr_data_tp"].ToString() == "string") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(string));
            //                            if (drlochead["bmr_data_tp"].ToString() == "int") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(int));
            //                            if (drlochead["bmr_data_tp"].ToString() == "decimal") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(decimal));
            //                        }
            //                    }
            //                }

            //                foreach (DataRow _drval in _val.Rows)
            //                {
            //                    foreach (DataRow drlochead in _repHead.Rows)
            //                    {
            //                        if (drlochead["bmr_col_nm"].ToString() == _drval["fieldname"].ToString())
            //                        {
            //                            if (drlochead["bmr_data_tp"].ToString() == "string") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(string));
            //                            if (drlochead["bmr_data_tp"].ToString() == "int") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(int));
            //                            if (drlochead["bmr_data_tp"].ToString() == "decimal") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(decimal));
            //                        }
            //                    }
            //                }
            //            }
            //        }

            //        dr = BMSales.NewRow();
            //        foreach (DataRow _drrow in _row.Rows)
            //        {
            //            foreach (DataRow drlochead in _repHead.Rows)
            //            {
            //                if (drlochead["bmr_col_nm"].ToString() == _drrow["fieldname"].ToString())
            //                {
            //                    if (drlochead["bmr_data_tp"].ToString() == "string") dr[drlochead["bmr_col_desc"].ToString()] = _drresult[drlochead["bmr_col_nm"].ToString()].ToString();
            //                    if (drlochead["bmr_data_tp"].ToString() == "int") dr[drlochead["bmr_col_desc"].ToString()] = Convert.ToInt16(_drresult[drlochead["bmr_col_nm"].ToString()].ToString());
            //                    if (drlochead["bmr_data_tp"].ToString() == "decimal") dr[drlochead["bmr_col_desc"].ToString()] = Convert.ToDecimal(_drresult[drlochead["bmr_col_nm"].ToString()].ToString());
            //                }
            //            }

            //            foreach (DataRow _drcol in _col.Rows)
            //            {
            //                foreach (DataRow drlochead in _repHead.Rows)
            //                {
            //                    if (drlochead["bmr_col_nm"].ToString() == _drcol["fieldname"].ToString())
            //                    {
            //                        if (drlochead["bmr_data_tp"].ToString() == "string") dr[drlochead["bmr_col_desc"].ToString()] = _drresult[drlochead["bmr_col_nm"].ToString()].ToString();
            //                        if (drlochead["bmr_data_tp"].ToString() == "int") dr[drlochead["bmr_col_desc"].ToString()] = Convert.ToInt16(_drresult[drlochead["bmr_col_nm"].ToString()].ToString());
            //                        if (drlochead["bmr_data_tp"].ToString() == "decimal") dr[drlochead["bmr_col_desc"].ToString()] = Convert.ToDecimal(_drresult[drlochead["bmr_col_nm"].ToString()].ToString());
            //                    }
            //                }
            //            }

            //            foreach (DataRow _drval in _val.Rows)
            //            {
            //                foreach (DataRow drlochead in _repHead.Rows)
            //                {
            //                    if (drlochead["bmr_col_nm"].ToString() == _drval["fieldname"].ToString())
            //                    {
            //                        if (drlochead["bmr_data_tp"].ToString() == "string") dr[drlochead["bmr_col_desc"].ToString()] = _drresult[drlochead["bmr_col_nm"].ToString()].ToString();
            //                        if (drlochead["bmr_data_tp"].ToString() == "int") dr[drlochead["bmr_col_desc"].ToString()] = Convert.ToInt16(_drresult[drlochead["bmr_col_nm"].ToString()].ToString());
            //                        if (drlochead["bmr_data_tp"].ToString() == "decimal") dr[drlochead["bmr_col_desc"].ToString()] = Convert.ToDecimal(_drresult[drlochead["bmr_col_nm"].ToString()].ToString());
            //                    }
            //                }
            //            }

            //        }

            //        BMSales.Rows.Add(dr);

            //    }
            //}

            //foreach (DataRow _drresult in _dtResults.Rows)
            //{
            //    dr = BMSales.NewRow();
            //    dr.C
            //    BMSales.Rows.Add(dr);
            //}

            DataTable table = new DataTable();
            table.Columns.Add("chanel", typeof(string));
            table.Columns.Add("SR", typeof(string));
            table.Columns.Add("SaleCount", typeof(string));
            table.Columns.Add("Value", typeof(string));
            foreach (DataRow _drresult in _dtResults.Rows)
            {


                Boolean VALFOUND = false;
                for (int i = 0; i < table.Rows.Count; i++)
                {
                    //Console.WriteLine(i);
                    if (table.Rows[i]["chanel"].ToString() == _drresult["BMS_CHNL"].ToString() || table.Rows[i]["SR"].ToString() == _drresult["bms_pc_cd"].ToString())
                    {
                        //rowvalue=;
                        table.Rows[i]["SaleCount"] = Convert.ToDouble(table.Rows[i]["SaleCount"].ToString()) + Convert.ToDouble(_drresult["BMS_T_QTY"]);
                        table.Rows[i]["Value"] = Convert.ToDouble(table.Rows[i]["Value"].ToString()) + Convert.ToDouble(_drresult["BMS_T_TOT_AMT"]);
                        //table.Rows[i]["HPACCCount"] = 10;
                        VALFOUND = true;
                        break;
                    }
                }

                if (VALFOUND == false)
                {
                    object[] array = new object[4];
                    array[0] = _drresult["BMS_CHNL"];
                    array[1] = _drresult["bms_pc_cd"];
                    array[2] = _drresult["BMS_T_QTY"];
                    array[3] = _drresult["BMS_T_TOT_AMT"];
                    table.Rows.Add(array);
                }
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Sales Count report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _FromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _ToDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, TitleData, table, out _err);
            // _filePath = ExportExcel2007(_com, _user, TitleData, GLOB_DataTable, out _err);
            if (table.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
        A:
            return _filePath;
        }

        public string getHpaccountCount(DateTime _FromDate, DateTime _ToDate, string _invdate, string _com, string _user, DataTable _col, DataTable _row, DataTable _val, out string _err)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("BMSales") == true) _financialDAL.ConnectionOpen_DR();

            _err = string.Empty;
            string _filePath = string.Empty;
            int s = 0;

            DataTable _dtResults;

            DataTable _repHead = _financialDAL.getBMReportHeading("BM_SALES");

            DataTable BMSales = new DataTable();
            DataRow dr;

            BMSales.Clear();
            //if (_repHead.Rows.Count <= 0)
            //{
            //    _err = "Report Headings not defined.";
            //    goto A;
            //}


            _salesDAL = new SalesDAL();
            _dtResults = new DataTable();
            _reportDAL = new ReptCommonDAL();
            //    _salesDAL.ConnectionOpen();
            _securityDAL = new SecurityDAL();

            if (_securityDAL.Is_Report_DR("HPClosingBalance") == true) _salesDAL.ConnectionOpen_DR();
            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_user);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    // _dtResults = _salesDAL.GetDeliveredSalesDetails(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, drow["tpl_pc"].ToString(), _User, _RepType, _StockType, _InvNo, drow["tpl_pc"].ToString(), _Com, _Promotor, _freeissue, currencyType, revOrSaleOrAll);
                    DataTable _dtRes = _salesDAL.Process_Hp_Closing_Bal_New(_com, _user, "", "", _ToDate, "RYTH", "", "", "", "", "", "");
                    _dtResults.Merge(_dtRes);
                }
            }

            //_dtResults = _salesDAL.Process_Hp_Closing_Bal_New(_com, _user, "", "", _ToDate, "RYTH", "", "", "", "", "", "");
            //  _salesDAL.ConnectionClose();


            //   _dtResults = _financialDAL.getBMSalesDetails(_FromDate, _ToDate, _invdate, _com, "29", _user);          

            DataTable table = new DataTable();
            table.Columns.Add("chanel", typeof(string));
            table.Columns.Add("SR", typeof(string));
            table.Columns.Add("HPACCCount", typeof(double));
            table.Columns.Add("Value", typeof(double));
            foreach (DataRow _drresult in _dtResults.Rows)
            {

                Boolean VALFOUND = false;
                for (int i = 0; i < table.Rows.Count; i++)
                {
                    //Console.WriteLine(i);
                    if (table.Rows[i]["chanel"].ToString() == _drresult["CLB_CHANNAL"].ToString() || table.Rows[i]["SR"].ToString() == _drresult["CLB_PC"].ToString())
                    {
                        //rowvalue=;
                        table.Rows[i]["HPACCCount"] = Convert.ToDouble(table.Rows[i]["HPACCCount"].ToString()) + 1;
                        table.Rows[i]["Value"] = Convert.ToDouble(table.Rows[i]["Value"].ToString()) + Convert.ToDouble(_drresult["CLB_CLOSING_BAL"]);
                        //table.Rows[i]["HPACCCount"] = 10;
                        VALFOUND = true;
                        break;
                    }
                }

                if (VALFOUND == false)
                {
                    object[] array = new object[4];
                    array[0] = _drresult["CLB_CHANNAL"];
                    array[1] = _drresult["CLB_PC"];
                    array[2] = 1;
                    array[3] = _drresult["CLB_CLOSING_BAL"];
                    table.Rows.Add(array);
                }
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "HP Count report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _FromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _ToDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, TitleData, table, out _err);
            // _filePath = ExportExcel2007(_com, _user, TitleData, GLOB_DataTable, out _err);
            if (table.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
        A:
            return _filePath;
        }

        public string getBMSalesDetails1(DateTime _FromDate, DateTime _ToDate, string _invdate, string _com, string _user, DataTable _col, DataTable _row, DataTable _val, out string _err)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("BMSales") == true) _financialDAL.ConnectionOpen_DR();

            _err = string.Empty;
            string _filePath = string.Empty;
            int s = 0;

            DataTable _dtResults;
            DataTable _repHead = _financialDAL.getBMReportHeading("BM_SALES");

            DataTable BMSales = new DataTable();
            DataRow dr;

            BMSales.Clear();
            if (_repHead.Rows.Count <= 0)
            {
                _err = "Report Headings not defined.";
                goto A;
            }

            _dtResults = _financialDAL.getBMSalesDetails(_FromDate, _ToDate, _invdate, _com, "29", _user, "", 0, 0, "", 0, 0, 0);

            if (_dtResults.Rows.Count > 0)
            {
                s = s + 1;

                if (s == 1)
                {//Create Datatable
                    if (_dtResults.Rows.Count > 0)
                    {
                        foreach (DataRow drlochead in _repHead.Rows)
                        {
                            foreach (DataRow _drcol in _col.Rows)
                            {
                                if (drlochead["bmr_col_nm"].ToString() == _drcol["fieldname"].ToString())
                                {
                                    BMSales.Columns.Add(drlochead["bmr_col_nm"].ToString(), _dtResults.Columns[drlochead["bmr_col_nm"].ToString()].GetType());
                                }
                            }
                        }
                    }
                }

                string _group = "";
                string _selection = "";
                string _sum = "";

                if (_row.Rows.Count > 0)
                {
                    foreach (DataRow drrowhead in _row.Rows)
                    {
                        if (_selection != "") { _selection = _selection + ","; }
                        _selection = _selection + drrowhead["fieldname"].ToString() + "= g.Key." + drrowhead["fieldname"].ToString();

                        if (_group != "") { _group = _group + ","; }
                        _group = _group + drrowhead["fieldname"].ToString() + "=b[" + drrowhead["fieldname"].ToString() + "] ";
                    }
                }

                //_group = _selection;

                if (_val.Rows.Count > 0)
                {
                    foreach (DataRow drvalhead in _val.Rows)
                    {
                        if (_sum != "") { _sum = _sum + ","; }
                        _sum = _sum + "g.Sum(x => x.Field<" + _dtResults.Columns[drvalhead["fieldname"].ToString()].DataType.Name.ToString() + ">(" + drvalhead["fieldname"].ToString() + "))";
                    }
                }



                string _selTot = "from b in _dtResults.AsEnumerable() group b by new {" + _group + "} into g select new {" + _selection + "," + _sum + "}";

                var BMSalesRep = _selTot;

                //var BMSalesRep = from b in _dtResults.AsEnumerable()
                //                 group b by new {_group} into g
                //                 select new
                //                 {
                //                     _selTot
                //                 };


                DataTable BMSales1 = LINQResultToDataTable(BMSalesRep);
                BMSales.Merge(BMSales1);
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, BMSales, out _err);
            if (BMSales.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
        A:
            return _filePath;
        }

        public string getBondBalanceDetails1(string _com, string _user, Boolean _isOldRep, out string _err)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable BondBal = new DataTable();
            DataRow dr;
            int i = 0;

            if (_securityDAL.Is_Report_DR("BondBalance") == true) _financialDAL.ConnectionOpen_DR();

            if (_com == "SGL" | _com == "SGD")
            {
                BondBal = _financialDAL.getBondBalanceDetails1_SGL();
            }
            else
            {
                if (_isOldRep == true)
                    BondBal = _financialDAL.getBondBalanceDetails2();
                else
                    BondBal = _financialDAL.getBondBalanceDetails1();
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = _com; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Sales and Inventory Summary Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "As at Date :"; dataRow["c2"] = DateTime.Now.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Time :"; dataRow["c5"] = DateTime.Now;

            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, TitleData, BondBal, out _err);

            if (BondBal.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
            return _filePath;

        }



        public string getBondBalanceDetails(DateTime _asatDate, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _Cat4, string _Cat5, string _Stktype, string _Com, string _User, out string _err)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults = new DataTable();
            DataTable _dtResultsTemp = new DataTable();
            DataTable Sale_Head = new DataTable();
            DataTable Stock_Head = new DataTable();
            DataTable BondBal = new DataTable();
            DataRow dr;
            int i = 0;

            BondBal.Clear();
            //BondBal.Columns.Add("COM_CODE", typeof(string));
            //BondBal.Columns.Add("COM_DESC", typeof(string));
            //BondBal.Columns.Add("POWERED_BY", typeof(string));
            //BondBal.Columns.Add("ADMIN_TEAM", typeof(string));
            //BondBal.Columns.Add("LOC_CODE", typeof(string));
            //BondBal.Columns.Add("LOC_DESC", typeof(string));
            //BondBal.Columns.Add("PC_CODE", typeof(string));
            //BondBal.Columns.Add("PC_DESC", typeof(string));
            //BondBal.Columns.Add("ITEM_CLASIFIC", typeof(string));
            //BondBal.Columns.Add("BRAND_MGR", typeof(string));
            //BondBal.Columns.Add("BRAND_MGR_NAME", typeof(string));
            BondBal.Columns.Add("ITEM_BRAND_NAME", typeof(string));
            //BondBal.Columns.Add("ITEM_CAT1", typeof(string));
            //BondBal.Columns.Add("ITEM_CAT2", typeof(string));
            //BondBal.Columns.Add("ITEM_CAT3", typeof(string));
            //BondBal.Columns.Add("ITEM_CAT4", typeof(string));
            //BondBal.Columns.Add("ITEM_CAT5", typeof(string));
            BondBal.Columns.Add("ITEM_CAT1_DESC", typeof(string));
            //BondBal.Columns.Add("ITEM_CAT2_DESC", typeof(string));
            //BondBal.Columns.Add("ITEM_CAT3_DESC", typeof(string));
            //BondBal.Columns.Add("ITEM_CAT4_DESC", typeof(string));
            //BondBal.Columns.Add("ITEM_CAT5_DESC", typeof(string));
            BondBal.Columns.Add("ITEM_CODE", typeof(string));
            BondBal.Columns.Add("ITEM_MODEL", typeof(string));
            BondBal.Columns.Add("ITEM_DESC", typeof(string));
            //BondBal.Columns.Add("ITEM_BRAND", typeof(string));            
            //BondBal.Columns.Add("ITEM_STATUS", typeof(string));
            //BondBal.Columns.Add("YEAR_", typeof(int));
            //BondBal.Columns.Add("MONTH_", typeof(int));
            //BondBal.Columns.Add("PEND_SHIPMENT", typeof(decimal));
            //BondBal.Columns.Add("PEND_TOBOND", typeof(decimal));
            //BondBal.Columns.Add("PEND_SI", typeof(decimal));
            //BondBal.Columns.Add("PEND_LC", typeof(decimal));
            //BondBal.Columns.Add("PEND_PO", typeof(decimal));

            DataTable tmp_user_com = _reportDAL.GetTempUserPcRptDB_AllCom(_User).DefaultView.ToTable(true, "tpl_com");
            //dr = tmp_user_com.NewRow();
            //dr["TPL_COM"] = "ABL";
            //tmp_user_com.Rows.Add(dr);
            //dr = tmp_user_com.NewRow();
            //dr["TPL_COM"] = "LRP";
            //tmp_user_com.Rows.Add(dr);

            if (_securityDAL.Is_Report_DR("BondBalance") == true) _financialDAL.ConnectionOpen_DR();

            if (tmp_user_com.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_com.Rows)
                {
                    //DataTable _loc = _financialDAL.getLocationsbycompany(drow["tpl_com"].ToString());                                     

                    //if (_loc.Rows.Count > 0)
                    //{
                    //    foreach (DataRow drowloc in _loc.Rows)
                    //    {
                    //        i = i + 1;   

                    _dtResultsTemp = new DataTable();
                    _dtResultsTemp = _financialDAL.getBondBalanceDetails(_asatDate, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _Stktype, drow["tpl_com"].ToString(), "", _User); //drowloc["ml_loc_cd"].ToString()
                    //_dtResults.Merge(_dtResultsTemp, true, MissingSchemaAction.Add);
                    _dtResults.Merge(_dtResultsTemp);

                    //Generate Stock column Headings
                    Stock_Head = _dtResultsTemp.DefaultView.ToTable(true, "LOC_HEAD", "LOC_HEAD_DESC");
                    if (Stock_Head.Rows.Count > 0)
                    {
                        foreach (DataRow drlochead in Stock_Head.Rows)
                        {
                            DataColumnCollection columns = BondBal.Columns;
                            if (drlochead["LOC_HEAD"].ToString() == "") drlochead["LOC_HEAD"] = "N/A";
                            if (!(columns.Contains(drlochead["LOC_HEAD"].ToString())))
                            {
                                BondBal.Columns.Add(drlochead["LOC_HEAD"].ToString(), typeof(decimal));
                                BondBal.Columns[drlochead["LOC_HEAD"].ToString()].DefaultValue = 0;
                            }
                        }
                    }
                    //    }
                    //}

                    //i = 0;
                    //DataTable _pc = _financialDAL.getProfitcentersbycompany(drow["tpl_com"].ToString());                    

                    //if (_pc.Rows.Count > 0)
                    //{
                    //    foreach (DataRow drowpc in _pc.Rows)
                    //    {
                    //        i = i + 1;

                    //_dtResultsTemp = new DataTable();
                    //_dtResultsTemp = _financialDAL.getBondBalanceSalesDetails(_asatDate, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _Stktype, drow["tpl_com"].ToString(), "", _User);//drowpc["mpc_cd"].ToString()
                    //_dtResults.Merge(_dtResultsTemp, true, MissingSchemaAction.Add);
                    //_dtResults.Merge(_dtResultsTemp);

                    //Generate Sales column Headings
                    Sale_Head = _dtResultsTemp.DefaultView.ToTable(true, "YEAR_", "MONTH_");
                    if (Sale_Head.Rows.Count > 0)
                    {
                        foreach (DataRow drsalehead in Sale_Head.Rows)
                        {
                            if (drsalehead["MONTH_"].ToString() != _asatDate.Date.Month.ToString())
                            {
                                DataColumnCollection columns = BondBal.Columns;
                                if (drsalehead["MONTH_"].ToString() == "") drsalehead["MONTH_"] = "N/A";
                                if (!(columns.Contains(drsalehead["MONTH_"].ToString())))
                                {
                                    BondBal.Columns.Add(drsalehead["MONTH_"].ToString(), typeof(decimal));
                                    BondBal.Columns[drsalehead["MONTH_"].ToString()].DefaultValue = 0;
                                }
                            }
                        }
                    }

                    Sale_Head = _dtResultsTemp.DefaultView.ToTable(true, "PC_HEAD", "YEAR_", "MONTH_");
                    if (Sale_Head.Rows.Count > 0)
                    {
                        foreach (DataRow drsalehead in Sale_Head.Rows)
                        {
                            if (drsalehead["MONTH_"].ToString() == _asatDate.Date.Month.ToString())
                            {
                                DataColumnCollection columns = BondBal.Columns;
                                if (drsalehead["PC_HEAD"].ToString() == "") drsalehead["PC_HEAD"] = "N/A";
                                if (!(columns.Contains(drsalehead["PC_HEAD"].ToString())))
                                {
                                    BondBal.Columns.Add(drsalehead["PC_HEAD"].ToString(), typeof(decimal));
                                    BondBal.Columns[drsalehead["PC_HEAD"].ToString()].DefaultValue = 0;
                                }
                            }
                        }
                    }
                    //    }
                    //}

                    //Insert data to BondBalance Table 
                    _dtResults.DefaultView.Sort = "PEND_TOBOND";
                    if (_dtResults.Rows.Count > 0)
                    {
                        foreach (DataRow drbond in _dtResults.Rows)
                        {
                            dr = BondBal.NewRow();
                            //dr["COM_CODE"] = drbond["COM_CODE"].ToString();
                            //dr["COM_DESC"] = drbond["COM_DESC"].ToString();
                            //dr["POWERED_BY"] = drbond["POWERED_BY"].ToString();
                            //dr["ADMIN_TEAM"] = drbond["ADMIN_TEAM"].ToString();
                            //dr["LOC_CODE"] = drbond["LOC_CODE"].ToString();
                            //dr["LOC_DESC"] = drbond["LOC_DESC"].ToString();
                            //dr["PC_CODE"] = drbond["PC_CODE"].ToString();
                            //dr["PC_DESC"] = drbond["PC_DESC"].ToString();
                            //dr["ITEM_CLASIFIC"] = drbond["ITEM_CLASIFIC"].ToString();
                            //dr["BRAND_MGR"] = drbond["BRAND_MGR"].ToString();
                            //dr["BRAND_MGR_NAME"] = drbond["BRAND_MGR_NAME"].ToString();
                            dr["ITEM_BRAND_NAME"] = drbond["ITEM_BRAND_NAME"].ToString();
                            //dr["ITEM_CAT1"] = drbond["ITEM_CAT1"].ToString();
                            //dr["ITEM_CAT2"] = drbond["ITEM_CAT2"].ToString();
                            //dr["ITEM_CAT3"] = drbond["ITEM_CAT3"].ToString();
                            //dr["ITEM_CAT4"] = drbond["ITEM_CAT4"].ToString();
                            //dr["ITEM_CAT5"] = drbond["ITEM_CAT5"].ToString();
                            dr["ITEM_CAT1_DESC"] = drbond["ITEM_CAT1_DESC"].ToString();
                            //dr["ITEM_CAT2_DESC"] = drbond["ITEM_CAT2_DESC"].ToString();
                            //dr["ITEM_CAT3_DESC"] = drbond["ITEM_CAT3_DESC"].ToString();
                            //dr["ITEM_CAT4_DESC"] = drbond["ITEM_CAT4_DESC"].ToString();
                            //dr["ITEM_CAT5_DESC"] = drbond["ITEM_CAT5_DESC"].ToString();
                            dr["ITEM_CODE"] = drbond["ITEM_CODE"].ToString();
                            dr["ITEM_MODEL"] = drbond["ITEM_MODEL"].ToString();
                            dr["ITEM_DESC"] = drbond["ITEM_DESC"].ToString();
                            //dr["ITEM_BRAND"] = drbond["ITEM_BRAND"].ToString();                            
                            //dr["ITEM_STATUS"] = drbond["ITEM_STATUS"].ToString();
                            //dr["YEAR_"] = drbond["YEAR_"].ToString();
                            //dr["MONTH_"] = drbond["MONTH_"].ToString();
                            //dr["PEND_SHIPMENT"] = drbond["PEND_SHIPMENT"].ToString();
                            //dr["PEND_TOBOND"] = drbond["PEND_TOBOND"].ToString();
                            //dr["PEND_SI"] = drbond["PEND_SI"].ToString();
                            //dr["PEND_LC"] = drbond["PEND_LC"].ToString();
                            //dr["PEND_PO"] = drbond["PEND_PO"].ToString();

                            if (Stock_Head.Rows.Count > 0)
                            {
                                foreach (DataRow drlochead in Stock_Head.Rows)
                                {
                                    if (drlochead["LOC_HEAD"].ToString() != "")
                                    {
                                        if (drlochead["LOC_HEAD"].ToString() == drbond["LOC_HEAD"].ToString())
                                        {
                                            dr[drlochead["LOC_HEAD"].ToString()] = Convert.ToDecimal(drbond["STOCK_QTY"].ToString());
                                            break;
                                        }
                                    }
                                }
                            }

                            Sale_Head = _dtResults.DefaultView.ToTable(true, "YEAR_", "MONTH_");
                            if (Sale_Head.Rows.Count > 0)
                            {
                                foreach (DataRow drsalehead in Sale_Head.Rows)
                                {
                                    if (drsalehead["MONTH_"].ToString() != _asatDate.Date.Month.ToString())
                                    {
                                        if (drsalehead["MONTH_"].ToString() == drbond["MONTH_"].ToString())
                                        {
                                            dr[drsalehead["MONTH_"].ToString()] = Convert.ToDecimal(drbond["SALE_QTY"].ToString());
                                            break;
                                        }
                                    }
                                }
                            }

                            Sale_Head = _dtResults.DefaultView.ToTable(true, "PC_HEAD", "YEAR_", "MONTH_");
                            if (Sale_Head.Rows.Count > 0)
                            {
                                foreach (DataRow drsalehead in Sale_Head.Rows)
                                {
                                    if (drsalehead["MONTH_"].ToString() == _asatDate.Date.Month.ToString())
                                    {
                                        if (drsalehead["PC_HEAD"].ToString() == drbond["PC_HEAD"].ToString())
                                        {
                                            if (drsalehead["PC_HEAD"].ToString() != "N/A")
                                            {
                                                dr[drsalehead["PC_HEAD"].ToString()] = Convert.ToDecimal(drbond["SALE_QTY"].ToString());
                                                break;
                                            }
                                        }
                                    }
                                }
                            }

                            BondBal.Rows.Add(dr);
                        }
                    }

                    //goto A;
                }
            }

            DataTable dtFinal = BondBal.Clone();
            dtFinal = new DataTable();
            for (int l = 0; l < BondBal.Rows.Count; l++)
            {
                bool isDupe = false;
                for (int j = 0; j < dtFinal.Rows.Count; j++)
                {
                    if (BondBal.Rows[l][0].ToString() == dtFinal.Rows[j][0].ToString()
                        && BondBal.Rows[l][1].ToString() == dtFinal.Rows[j][1].ToString())
                    {
                        for (int k = 13; k < dtFinal.Columns.Count; k++)
                        {
                            dtFinal.Rows[j][k] = decimal.Parse(dtFinal.Rows[j][k].ToString()) + decimal.Parse(BondBal.Rows[l][k].ToString());
                        }
                        isDupe = true;
                        break;
                    }
                }

                if (!isDupe)
                {
                    dtFinal.ImportRow(BondBal.Rows[l]);
                }
            }
            //A:
            dtFinal.DefaultView.Sort = "ITEM_BRAND_NAME";


            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Sales and Inventory Summary Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            //dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromtDate.ToString("dd/MMM/yyyy");
            //dataRow["c4"] = "Date To :"; dataRow["c5"] = _totDate.ToString("dd/MMM/yyyy");

            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, TitleData, dtFinal, out _err);

            if (dtFinal.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
            return _filePath;
            //else
            //{
            //    DataTable _dtEmail = _inventoryDAL.GetUserNameByUserID(_User);
            //    if (!string.IsNullOrEmpty(_dtEmail.Rows[0]["SE_EMAIL"].ToString()))
            //    {
            //        CommonSearchBLL _commonBLL = new CommonSearchBLL();
            //        string _mail = "";
            //        _mail += "Generated report path as follows" + Environment.NewLine;
            //        _mail += _filePath + Environment.NewLine + Environment.NewLine;
            //        _mail += "Report Criteria as follows" + Environment.NewLine;
            //        _mail += "As at Date - " + _asatDate + Environment.NewLine;
            //        _mail += "Location(s) - " + _locList + Environment.NewLine + Environment.NewLine;

            //        _mail += "*** This is an automatically generated email, please do not reply ***" + Environment.NewLine;

            //        _commonBLL.Send_SMTPMail(_dtEmail.Rows[0]["SE_EMAIL"].ToString(), "Bond Balance Report", _mail);
            //    }
            //}

            //return _filePath;
        }

        public string ExportExcel2007_xls(string _com, string _user, DataTable TitleData, DataTable _dt1, out string _err)
        {
            try
            {
                DataTable _dt = _dt1;

                string _targetFilename = CreateExcelFile.ExportToExcelxls(_user, _com, TitleData, _dt, 60000, out _err);

                _dt.Dispose();
                GC.Collect();

                if (string.IsNullOrEmpty(_err))
                { return _targetFilename; }
                else
                { return "Err"; }
            }
            catch (Exception err)
            {
                GC.Collect();
                _err = err.ToString();
                return "Err";
            }
        }
        public string ExportExcel2007(string _com, string _user, DataTable _dt1, out string _err)
        {
            try
            {
                DataTable _dt = _dt1;

                string _targetFilename = CreateExcelFile.ExportToExcelxlsx(_user, _com, _dt, 60000, out _err);

                _dt.Dispose();
                GC.Collect();

                if (string.IsNullOrEmpty(_err))
                { return _targetFilename; }
                else
                { return "Err"; }
            }
            catch (Exception err)
            {
                GC.Collect();
                _err = err.ToString();
                return "Err";
            }
        }
        //kapila
        public string ExportExcel2007_multisheet(string _com, string _user, DataTable TitleData, List<DataTable> _dtList, DataTable _dt1, out string _err)
        {
            try
            {
                DataTable _dt = _dt1;

                string _targetFilename = CreateExcelFile.ExportToExcelxlsx_multisheet(_user, _com, TitleData, _dtList, _dt, 60000, out _err);

                _dt.Dispose();
                GC.Collect();

                if (string.IsNullOrEmpty(_err))
                { return _targetFilename; }
                else
                { return "Err"; }
            }
            catch (Exception err)
            {
                GC.Collect();
                _err = err.ToString();
                return "Err";
            }
        }
        public string ExportExcel2007(string _com, string _user, DataTable TitleData, DataTable _dt1, out string _err)
        {
            try
            {
                DataTable _dt = _dt1;

                string _targetFilename = CreateExcelFile.ExportToExcelxlsx(_user, _com, TitleData, _dt, 60000, out _err);

                _dt.Dispose();
                GC.Collect();

                if (string.IsNullOrEmpty(_err))
                { return _targetFilename; }
                else
                { return "Err"; }
            }
            catch (Exception err)
            {
                GC.Collect();
                _err = err.ToString();
                return "Err";
            }
        }

        public string ExportExcel2007WithHDR(string _com, string _user, DataTable TitleData, DataTable _dt1, out string _err, string WithColHeader = "Y")
        {
            try
            {
                DataTable _dt = _dt1;

                string _targetFilename = CreateExcelFile.ExportToExcelxlsx(_user, _com, TitleData, _dt, 60000, out _err, WithColHeader);

                _dt.Dispose();
                GC.Collect();

                if (string.IsNullOrEmpty(_err))
                { return _targetFilename; }
                else
                { return "Err"; }
            }
            catch (Exception err)
            {
                GC.Collect();
                _err = err.ToString();
                return "Err";
            }
        }
        public string GetCutomerDetails(DateTime in_FromDate, DateTime in_ToDate, DateTime in_asatDate, string in_user_id, Int16 in_NoOfMonths, string _com, out string _err)
        {
            int in_ISlast;
            _err = string.Empty;
            string _filePath = string.Empty;
            in_ISlast = 1;
            string _locList = "";

            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, in_user_id);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _securityDAL = new SecurityDAL();
                    if (_securityDAL.Is_Report_DR("CustomerDetails") == true) _salesDAL.ConnectionOpen_DR();
                    _dtResults = _salesDAL.GetCutomerDetails(in_FromDate, in_ToDate, in_asatDate, in_user_id, in_NoOfMonths, _com, drow["tpl_pc"].ToString(), in_ISlast);
                    GLOB_DataTable.Merge(_dtResults);
                    in_ISlast = in_ISlast + 1;
                    if (string.IsNullOrEmpty(_locList))
                        _locList = drow["tpl_pc"].ToString();
                    else
                        _locList = _locList + ", " + drow["tpl_pc"].ToString();
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, in_user_id, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
            //else
            //{
            //    //kapila 18/7/2016 due to time out error
            //    DataTable _dtEmail = _inventoryDAL.GetUserNameByUserID(in_user_id);
            //    if (!string.IsNullOrEmpty(_dtEmail.Rows[0]["SE_EMAIL"].ToString()))
            //    {
            //        CommonSearchBLL _commonBLL = new CommonSearchBLL();
            //        string _mail = "";
            //        _mail += "Generated report path as follows" + Environment.NewLine;
            //        _mail += _filePath + Environment.NewLine + Environment.NewLine;
            //        _mail += "Report Criteria as follows" + Environment.NewLine;
            //        _mail += "From Date - " + in_FromDate + Environment.NewLine;
            //        _mail += "To Date - " + in_ToDate + Environment.NewLine;
            //        _mail += "Location(s) - " + _locList + Environment.NewLine + Environment.NewLine;

            //        _mail += "*** This is an automatically generated email, please do not reply ***" + Environment.NewLine;

            //        _commonBLL.Send_SMTPMail(_dtEmail.Rows[0]["SE_EMAIL"].ToString(), "Customer Details Report", _mail);
            //    }
            //}

            return _filePath;
        }
        public string GetCutomerDetails_ReduceBal(DateTime in_FromDate, DateTime in_ToDate, DateTime in_asatDate, string in_user_id, Int16 in_NoOfMonths, string _com, out string _err)
        {
            int in_ISlast;
            _err = string.Empty;
            string _filePath = string.Empty;
            string _locList = "";
            in_ISlast = 1;

            DataTable _dtResults;
            _salesDAL = new SalesDAL();


            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, in_user_id);
            if (tmp_user_pc.Rows.Count > 0)
            {
                _securityDAL = new SecurityDAL();
                if (_securityDAL.Is_Report_DR("CutomerDetails_ReduceBal") == true) _salesDAL.ConnectionOpen_DR();

                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.GetCutomerDetails_ReduceBal(in_FromDate, in_ToDate, in_asatDate, in_user_id, in_NoOfMonths, _com, drow["tpl_pc"].ToString(), in_ISlast);
                    GLOB_DataTable.Merge(_dtResults);
                    in_ISlast = in_ISlast + 1;
                    if (string.IsNullOrEmpty(_locList))
                        _locList = drow["tpl_pc"].ToString();
                    else
                        _locList = _locList + ", " + drow["tpl_pc"].ToString();
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, in_user_id, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
            //else
            //{
            //    //kapila 18/7/2016 due to time out error
            //    DataTable _dtEmail = _inventoryDAL.GetUserNameByUserID(in_user_id);
            //    if (!string.IsNullOrEmpty(_dtEmail.Rows[0]["SE_EMAIL"].ToString()))
            //    {
            //        CommonSearchBLL _commonBLL = new CommonSearchBLL();
            //        string _mail = "";
            //        _mail += "Generated report path as follows" + Environment.NewLine;
            //        _mail += _filePath + Environment.NewLine + Environment.NewLine;
            //        _mail += "Report Criteria as follows" + Environment.NewLine;
            //        _mail += "From Date - " + in_FromDate + Environment.NewLine;
            //        _mail += "To Date - " + in_ToDate + Environment.NewLine;
            //        _mail += "Location(s) - " + _locList + Environment.NewLine + Environment.NewLine;

            //        _mail += "*** This is an automatically generated email, please do not reply ***" + Environment.NewLine;

            //        _commonBLL.Send_SMTPMail(_dtEmail.Rows[0]["SE_EMAIL"].ToString(), "Customer Details Report", _mail);
            //    }
            //}

            return _filePath;
        }

        public DataTable GetItemWiseGp(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _Cat4, string _Cat5, string _User, string _RepType, string _StockType, string _InvNo, string _Com, string _Promotor,
            int _freeissue, string _itemclasif, string _brndmgr, string _Group, bool withReversal, int _rplitm, DateTime _fromDate2, DateTime _toDate2, Int16 _intercom)
        {
            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            _reportDAL = new ReptCommonDAL();
            DataTable GLOB_DataTable = new DataTable();
            DataTable _dtGP = new DataTable();

            //DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_Com, _User);
            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("GPReport") == true) _salesDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.Get_Gp_Data(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _User, _RepType, _StockType, _InvNo, drow["tpl_pc"].ToString(), drow["tpl_com"].ToString(), _Promotor,
                        _freeissue, _itemclasif, _brndmgr, withReversal, _rplitm, _fromDate2, _toDate2, _intercom);

                    GLOB_DataTable.Merge(_dtResults);
                }
            }
            GLOB_DataTable.TableName = "tbl";
            return GLOB_DataTable;
        }


        public Boolean RemoveCols(string _com)
        {
            HpSystemParameters _SystemPara = new HpSystemParameters();
            _salesDAL = new SalesDAL();
            _SystemPara = _salesDAL.GetSystemParameter("COM", _com, "REMCOLAUD", DateTime.Now.Date);
            if (_SystemPara.Hsy_cd != null)
            {
                if (_SystemPara.Hsy_val == 0)
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }
            else
            {
                return false;
            }
        }

        public Boolean useAuditBalance()
        {
            HpSystemParameters _SystemPara = new HpSystemParameters();
            _salesDAL = new SalesDAL();
            _SystemPara = _salesDAL.GetSystemParameter("COM", "PRE", "USEAUDBAL", DateTime.Now.Date);
            if (_SystemPara.Hsy_cd != null)
            {
                if (_SystemPara.Hsy_val == 0)
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }
            else
            {
                return false;
            }
        }

        public Boolean blockMRN(string _com)
        {
            HpSystemParameters _SystemPara = new HpSystemParameters();
            _salesDAL = new SalesDAL();
            _SystemPara = _salesDAL.GetSystemParameter("COM", _com, "BLKMRN", DateTime.Now.Date);
            if (_SystemPara.Hsy_cd != null)
            {
                if (_SystemPara.Hsy_val == 0)
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }
            else
            {
                return false;
            }
        }

        public Boolean blockAOD(string _com)
        {
            HpSystemParameters _SystemPara = new HpSystemParameters();
            _salesDAL = new SalesDAL();
            _SystemPara = _salesDAL.GetSystemParameter("COM", _com, "BLKAOD", DateTime.Now.Date);
            if (_SystemPara.Hsy_cd != null)
            {
                if (_SystemPara.Hsy_val == 0)
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }
            else
            {
                return false;
            }
        }

        public Boolean blockAODIN(string _com)
        {
            HpSystemParameters _SystemPara = new HpSystemParameters();
            _salesDAL = new SalesDAL();
            _SystemPara = _salesDAL.GetSystemParameter("COM", _com, "BLKAODIN", DateTime.Now.Date);
            if (_SystemPara.Hsy_cd != null)
            {
                if (_SystemPara.Hsy_val == 0)
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }
            else
            {
                return false;
            }
        }

        public Boolean blockGRAN(string _com)
        {
            HpSystemParameters _SystemPara = new HpSystemParameters();
            _salesDAL = new SalesDAL();
            _SystemPara = _salesDAL.GetSystemParameter("COM", _com, "BLKGRAN", DateTime.Now.Date);
            if (_SystemPara.Hsy_cd != null)
            {
                if (_SystemPara.Hsy_val == 0)
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }
            else
            {
                return false;
            }
        }

        public Boolean blockINTR(string _com)
        {
            HpSystemParameters _SystemPara = new HpSystemParameters();
            _salesDAL = new SalesDAL();
            _SystemPara = _salesDAL.GetSystemParameter("COM", _com, "BLKINTR", DateTime.Now.Date);
            if (_SystemPara.Hsy_cd != null)
            {
                if (_SystemPara.Hsy_val == 0)
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }
            else
            {
                return false;
            }
        }


        public Boolean useSCM2FixBalance()
        {
            HpSystemParameters _SystemPara = new HpSystemParameters();
            _salesDAL = new SalesDAL();
            _SystemPara = _salesDAL.GetSystemParameter("COM", "FIX", "USESCM2FIX", DateTime.Now.Date);
            if (_SystemPara.Hsy_cd != null)
            {
                if (_SystemPara.Hsy_val == 0)
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }
            else
            {
                return false;
            }
        }

        public DataTable FixedAssetBalDetailsNew(string _User, string _loc)
        {
            _fIXAInventoryDAL = new FIXA_InventoryDAL();
            return _fIXAInventoryDAL.FixedAssetBalDetailsNew(_User, _loc);
        }

        public DataTable GetAuditExecSummary1(string _mainjobno, string _jobno, string _com, string _user, out Dictionary<string, DataTable> dict, out DataTable _diffserial)
        {
            dict = new Dictionary<string, DataTable>();
            DataTable note01; DataTable note02; DataTable note03; DataTable note04; DataTable note05;
            DataTable note06; DataTable note07; DataTable note08; DataTable note09; DataTable note10;
            DataTable note11; DataTable note12; DataTable note13; DataTable note14; DataTable note15;
            DataTable xnote01; DataTable xnote02; DataTable xnote03; DataTable xnote04; DataTable xnote05;
            DataTable xnote06; DataTable xnote07;
            DataTable pendingdelivery;
            DataTable unconfaod;
            DataTable reverted;
            DataTable fifo;
            DataTable Rcc;
            DataTable serialmismatch;
            DataTable nonmoving;
            DataTable fixasset;
            DataTable inventorybal;
            DataTable dinqty;
            DataTable agedebtorsum;
            DataTable saleachv;
            string loctp = "";

            _diffserial = new DataTable();
            DataRow dr;
            DataTable _dtResults = new DataTable();
            _dtResults.TableName = "Audit1";

            _dtResults.Columns.Add("Com_cd", typeof(string));
            _dtResults.Columns.Add("Com_desc", typeof(string));
            _dtResults.Columns.Add("Com_powered", typeof(string));
            _dtResults.Columns.Add("ref1", typeof(string));
            _dtResults.Columns.Add("ref2", typeof(string));
            _dtResults.Columns.Add("Intr_rep_no", typeof(string));
            _dtResults.Columns.Add("Visit_dates", typeof(string));
            _dtResults.Columns.Add("Main_job", typeof(string));
            _dtResults.Columns.Add("Sub_job", typeof(string));
            _dtResults.Columns.Add("Loc_code", typeof(string));
            _dtResults.Columns.Add("Loc_desc", typeof(string));
            _dtResults.Columns.Add("Loc_manager_cd", typeof(string));
            _dtResults.Columns.Add("Loc_manager_name", typeof(string));
            _dtResults.Columns.Add("Tot_variance", typeof(decimal));
            _dtResults.Columns.Add("Var_perc", typeof(decimal));
            _dtResults.Columns.Add("Note1_tot", typeof(decimal));
            _dtResults.Columns.Add("Note1_ex", typeof(decimal));
            _dtResults.Columns.Add("Note1_sh", typeof(decimal));
            _dtResults.Columns.Add("Note3", typeof(decimal));
            _dtResults.Columns.Add("Note4", typeof(decimal));
            _dtResults.Columns.Add("Note5", typeof(decimal));
            _dtResults.Columns.Add("Note6", typeof(decimal));
            _dtResults.Columns.Add("Note7", typeof(decimal));
            _dtResults.Columns.Add("Note8", typeof(decimal));
            _dtResults.Columns.Add("Note15", typeof(decimal));
            _dtResults.Columns.Add("XNote2", typeof(decimal));
            _dtResults.Columns.Add("XNote5", typeof(decimal));
            _dtResults.Columns.Add("Note2", typeof(decimal));
            _dtResults.Columns.Add("Note9", typeof(decimal));
            _dtResults.Columns.Add("Note10", typeof(decimal));
            _dtResults.Columns.Add("Note11", typeof(decimal));
            _dtResults.Columns.Add("Note12", typeof(decimal));
            _dtResults.Columns.Add("Note13", typeof(decimal));
            _dtResults.Columns.Add("Note14", typeof(decimal));
            _dtResults.Columns.Add("inventoryval", typeof(decimal));
            _dtResults.Columns.Add("insucover", typeof(decimal));
            _dtResults.Columns.Add("Note5Collected", typeof(decimal));
            _dtResults.Columns.Add("Note5Excess", typeof(decimal));
            _dtResults.Columns.Add("Rvt3Month", typeof(int));
            _dtResults.Columns.Add("ActiveAcc", typeof(int));
            _dtResults.Columns.Add("JobDate", typeof(DateTime));
            _dtResults.Columns.Add("XNote1", typeof(decimal));
            _dtResults.Columns.Add("XNote3", typeof(decimal));
            _dtResults.Columns.Add("XNote4", typeof(decimal));
            _dtResults.Columns.Add("XNote6", typeof(decimal));
            _dtResults.Columns.Add("XNote7", typeof(decimal));
            _dtResults.Columns.Add("forwardsale", typeof(decimal));
            _dtResults.Columns.Add("git", typeof(decimal));
            _dtResults.Columns.Add("revert", typeof(decimal));
            _dtResults.Columns.Add("fifo", typeof(decimal));
            _dtResults.Columns.Add("serialmismatch", typeof(decimal));
            _dtResults.Columns.Add("nonmoving", typeof(decimal));
            _dtResults.Columns.Add("fixedasset", typeof(decimal));
            _dtResults.Columns.Add("defective", typeof(decimal));
            _dtResults.Columns.Add("inventorybal", typeof(decimal));
            _dtResults.Columns.Add("pc_code", typeof(string));
            _dtResults.Columns.Add("dtlmismatch", typeof(decimal));
            _dtResults.Columns.Add("acc_close", typeof(decimal));
            _dtResults.Columns.Add("sr_return", typeof(decimal));
            _dtResults.Columns.Add("din_qty", typeof(decimal));
            _dtResults.Columns.Add("trgt_m1_name", typeof(string));
            _dtResults.Columns.Add("trgt_m2_name", typeof(string));
            _dtResults.Columns.Add("trgt_m3_name", typeof(string));
            _dtResults.Columns.Add("trgt_m4_name", typeof(string));
            _dtResults.Columns.Add("trgt_m5_name", typeof(string));
            _dtResults.Columns.Add("trgt_m6_name", typeof(string));
            _dtResults.Columns.Add("trgt_y1m1_val", typeof(decimal));
            _dtResults.Columns.Add("trgt_y1m2_val", typeof(decimal));
            _dtResults.Columns.Add("trgt_y1m3_val", typeof(decimal));
            _dtResults.Columns.Add("trgt_y1m4_val", typeof(decimal));
            _dtResults.Columns.Add("trgt_y1m5_val", typeof(decimal));
            _dtResults.Columns.Add("trgt_y1m6_val", typeof(decimal));
            _dtResults.Columns.Add("trgt_y2m1_val", typeof(decimal));
            _dtResults.Columns.Add("trgt_y2m2_val", typeof(decimal));
            _dtResults.Columns.Add("trgt_y2m3_val", typeof(decimal));
            _dtResults.Columns.Add("trgt_y2m4_val", typeof(decimal));
            _dtResults.Columns.Add("trgt_y2m5_val", typeof(decimal));
            _dtResults.Columns.Add("trgt_y2m6_val", typeof(decimal));

            _financialDAL = new FinancialDAL();
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            _STNCommonDAL = new STNCommonDAL();
            _inventoryDAL = new InventoryDAL();            
            _fIXAInventoryDAL = new FIXA_InventoryDAL();
            if (_securityDAL.Is_Report_DR("AuditReport") == true)
            {
                _salesDAL.ConnectionOpen_DR();
                _financialDAL.ConnectionOpen_DR();
                _inventoryDAL.ConnectionOpen_DR();
            }

            DataTable _jobs = new DataTable();
            _jobs = _financialDAL.GetAuditJobMain(_mainjobno, _jobno);

            DataTable _jobMembers = new DataTable();
            _jobMembers = _financialDAL.GetAuditJobMembers(_jobno);

            DataTable _AudRemark = new DataTable();
            _AudRemark = _financialDAL.GetAuditJobRemarks("");

            note01 = _AudRemark.Clone(); note02 = _AudRemark.Clone(); note03 = _AudRemark.Clone(); note04 = _AudRemark.Clone(); note05 = _AudRemark.Clone();
            note06 = _AudRemark.Clone(); note07 = _AudRemark.Clone(); note08 = _AudRemark.Clone(); note09 = _AudRemark.Clone(); note10 = _AudRemark.Clone();
            note11 = _AudRemark.Clone(); note12 = _AudRemark.Clone(); note13 = _AudRemark.Clone(); note14 = _AudRemark.Clone(); note15 = _AudRemark.Clone();
            xnote01 = _AudRemark.Clone(); xnote02 = _AudRemark.Clone(); xnote03 = _AudRemark.Clone(); xnote04 = _AudRemark.Clone(); xnote05 = _AudRemark.Clone();
            xnote06 = _AudRemark.Clone(); xnote07 = _AudRemark.Clone();
            //pendingdelivery = GetForwardSalesDetailAudit(DateTime.Now.Date, _user, "", "", "", "", "", "", "All", 0, _com, "", "Y");
            //unconfaod = UnconfirmedAODDetailsNew(_user, Convert.ToDateTime("01/JAN/1900").Date, Convert.ToDateTime("01/JAN/1900").Date, _com, "");
            //reverted = _salesDAL.GetRevertItemDetailsAuditNew(Convert.ToDateTime("01/JAN/1900").Date, Convert.ToDateTime("01/JAN/1900").Date, "", "", _user, "");
            //fifo = _salesDAL.PhyStkBalFIFODetailsNew(_user, "");
            //Rcc = _salesDAL.getAuditRCCDetails("", "");
            //serialmismatch = _salesDAL.getAuditSerialMismatch("");
            //nonmoving = _salesDAL.PhyStkBalCollectionSerialAgeDetailsNew(_user, "");

            foreach (DataRow _drow in _jobs.Rows)
            {
                note01 = _AudRemark.Clone(); note02 = _AudRemark.Clone(); note03 = _AudRemark.Clone(); note04 = _AudRemark.Clone(); note05 = _AudRemark.Clone();
                note06 = _AudRemark.Clone(); note07 = _AudRemark.Clone(); note08 = _AudRemark.Clone(); note09 = _AudRemark.Clone(); note10 = _AudRemark.Clone();
                note11 = _AudRemark.Clone(); note12 = _AudRemark.Clone(); note13 = _AudRemark.Clone(); note14 = _AudRemark.Clone(); note15 = _AudRemark.Clone();
                xnote01 = _AudRemark.Clone(); xnote02 = _AudRemark.Clone(); xnote03 = _AudRemark.Clone(); xnote04 = _AudRemark.Clone(); xnote05 = _AudRemark.Clone();
                xnote06 = _AudRemark.Clone(); xnote07 = _AudRemark.Clone();

                DataTable _loc = new DataTable();
                _loc = _inventoryDAL.Get_location_by_code(_drow["ausm_com"].ToString(), _drow["ausm_loc"].ToString());
                foreach (DataRow _drowloc in _loc.Rows)
                {
                    loctp = _drowloc["ml_loc_tp"].ToString();
                }

                DataTable _isAnnualAudJob = new DataTable();
                _isAnnualAudJob = _financialDAL.GetCheckAnnualAuditJob(_drow["ausm_job"].ToString());
                if (_isAnnualAudJob.Rows.Count > 0 & useAuditBalance() == true)
                {
                    if (_securityDAL.Is_Report_DR("AuditReport") == true)
                    {
                        _financialDAL = new FinancialDAL();
                        _salesDAL = new SalesDAL();
                        _inventoryDAL = new InventoryDAL();

                        _salesDAL.ConnectionOpen_DR();
                        _financialDAL.ConnectionOpen_DR();
                        _inventoryDAL.ConnectionOpen_DR();
                    }
                    pendingdelivery = _financialDAL.GetForwardSalesAnnualAudit(_drow["ausm_com"].ToString(), _drow["ml_def_pc"].ToString());
                    unconfaod = _financialDAL.GetGITAnnualAudit(_drow["ausm_com"].ToString(), _drow["ausm_loc"].ToString());
                }
                else
                {
                    if (_securityDAL.Is_Report_DR("AuditReport") == true)
                    {
                        _financialDAL = new FinancialDAL();
                        _salesDAL = new SalesDAL();
                        _inventoryDAL = new InventoryDAL();

                        _salesDAL.ConnectionOpen_DR();
                        _financialDAL.ConnectionOpen_DR();
                        _inventoryDAL.ConnectionOpen_DR();
                    }
                    if (loctp == "WH" || loctp == "MWH" || loctp == "SWH" || loctp == "AGWH" || loctp == "OWH" || loctp == "RWH")
                    {
                        pendingdelivery = GetForwardSalesDetailAudit(Convert.ToDateTime(_drow["ausm_subjob_strdt"]), _user, "", "", "", "", "", "", "All", 0, _drow["ausm_com"].ToString(), "", "N");
                    }
                    else
                    {
                        pendingdelivery = GetForwardSalesDetailAudit(Convert.ToDateTime(_drow["ausm_subjob_strdt"]), _user, "", "", "", "", "", "", "All", 0, _drow["ausm_com"].ToString(), _drow["ml_def_pc"].ToString(), "N");
                    }
                    unconfaod = UnconfirmedAODDetailsNew(_user, Convert.ToDateTime(_drow["ausm_subjob_strdt"]).Date, Convert.ToDateTime(_drow["ausm_subjob_strdt"]).Date, _drow["ausm_com"].ToString(), _drow["ausm_loc"].ToString());
                }

                if (RemoveCols(_drow["ausm_com"].ToString()) == true)
                {
                    if (_securityDAL.Is_Report_DR("AuditReport") == true)
                    {
                        _financialDAL = new FinancialDAL();
                        _salesDAL = new SalesDAL();
                        _inventoryDAL = new InventoryDAL();

                        _salesDAL.ConnectionOpen_DR();
                        _financialDAL.ConnectionOpen_DR();
                        _inventoryDAL.ConnectionOpen_DR();
                    }
                    fifo = _salesDAL.PhyStkBalFIFODetailsNew(_user, "");
                    //reverted = _salesDAL.GetRevertItemDetailsAuditNew(Convert.ToDateTime("01/JAN/1900").Date, Convert.ToDateTime("01/JAN/1900").Date, "", "", _user, "");
                    inventorybal = _inventoryDAL.GetStockBalanceWithCost_SCM(_user, "", "", "", "", "", "", "", "", 1, Convert.ToDateTime(_drow["ausm_subjob_strdt"]).Date, 0, 0, "", "");
                }
                else
                {
                    if (_securityDAL.Is_Report_DR("AuditReport") == true)
                    {
                        _financialDAL = new FinancialDAL();
                        _salesDAL = new SalesDAL();
                        _inventoryDAL = new InventoryDAL();

                        _salesDAL.ConnectionOpen_DR();
                        _financialDAL.ConnectionOpen_DR();
                        _inventoryDAL.ConnectionOpen_DR();
                    }
                    
                    if (loctp == "WH" || loctp == "MWH" || loctp == "SWH" || loctp == "AGWH" || loctp == "OWH" || loctp == "RWH")
                    {
                        fifo = _salesDAL.PhyStkBalFIFODetailsNew(_user, "");
                        //reverted = _salesDAL.GetRevertItemDetailsAuditNew(Convert.ToDateTime("01/JAN/1900").Date, Convert.ToDateTime("01/JAN/1900").Date, "", "", _user, "");
                    }
                    else
                    {
                        fifo = _salesDAL.PhyStkBalFIFODetailsNew(_user, _drow["ausm_job"].ToString());
                        //reverted = _salesDAL.GetRevertItemDetailsAuditNew(Convert.ToDateTime(_drow["ausm_subjob_strdt"]).Date, Convert.ToDateTime(_drow["ausm_subjob_strdt"]).Date, _drow["ausm_com"].ToString(), _drow["ml_def_pc"].ToString(), _user, _drow["ausm_job"].ToString());
                    }

                    inventorybal = _inventoryDAL.GetStockBalanceWithCost_SCM(_user, "", "", "", "", "", "", "", "", 1, Convert.ToDateTime(_drow["ausm_subjob_strdt"]).Date, 0, 0, _drow["ausm_loc"].ToString(), _drow["ausm_com"].ToString());
                }
                //Rcc = _salesDAL.getAuditRCCDetails(_drow["ausm_com"].ToString(), _drow["ausm_loc"].ToString());
                if (loctp == "WH" || loctp == "MWH" || loctp == "SWH" || loctp == "AGWH" || loctp == "OWH" || loctp == "RWH")
                {                    
                    reverted = _salesDAL.GetRevertItemDetailsAuditNew(Convert.ToDateTime("01/JAN/1900").Date, Convert.ToDateTime("01/JAN/1900").Date, "", "", _user, "");
                }
                else
                {                    
                    reverted = _salesDAL.GetRevertItemDetailsAuditNew(Convert.ToDateTime(_drow["ausm_subjob_strdt"]).Date, Convert.ToDateTime(_drow["ausm_subjob_strdt"]).Date, _drow["ausm_com"].ToString(), _drow["ml_def_pc"].ToString(), _user, _drow["ausm_job"].ToString());
                }
                serialmismatch = _salesDAL.getAuditSerialMismatch(_drow["ausm_job"].ToString());
                nonmoving = _salesDAL.PhyStkBalCollectionSerialAgeDetailsNew(_user, _drow["ausm_job"].ToString());
                if (useSCM2FixBalance() == true)
                {
                    fixasset = _fIXAInventoryDAL.FixedAssetBalDetailsNew(_user, _drow["ausm_loc"].ToString());
                }
                else
                {
                    fixasset = _STNCommonDAL.FixedAssetBalDetailsNew(_user, _drow["ausm_loc"].ToString());
                }
                dinqty = _inventoryDAL.GetSGRANDetails(_user, Convert.ToDateTime(_drow["ausm_subjob_strdt"]).Date, Convert.ToDateTime(_drow["ausm_subjob_strdt"]).Date, "", "", "", "", "", "", "X", "ALL");

                if (_isAnnualAudJob.Rows.Count > 0)
                {
                    agedebtorsum = _financialDAL.Process_AgeOfDebtors_Arrears_Sum((new DateTime(Convert.ToDateTime(_drow["ausm_subjob_strdt"]).Year, Convert.ToDateTime(_drow["ausm_subjob_strdt"]).Month, 1).AddMonths(1).AddDays(-1)).Date, "", "", _user, "", "", "", "", "", "", "", true);
                }
                else
                {
                    if (loctp == "WH" || loctp == "MWH" || loctp == "SWH" || loctp == "AGWH" || loctp == "OWH" || loctp == "RWH")
                    {
                        agedebtorsum = _financialDAL.Process_AgeOfDebtors_Arrears_Sum((new DateTime(Convert.ToDateTime(_drow["ausm_subjob_strdt"]).Year, Convert.ToDateTime(_drow["ausm_subjob_strdt"]).Month, 1).AddMonths(1).AddDays(-1)).Date, "", "", _user, "", "", "", "", "", "", "", true);
                    }
                    else
                    {
                        agedebtorsum = _financialDAL.Process_AgeOfDebtors_Arrears_Sum((new DateTime(Convert.ToDateTime(_drow["ausm_subjob_strdt"]).Year, Convert.ToDateTime(_drow["ausm_subjob_strdt"]).Month, 1).AddMonths(1).AddDays(-1)).Date, _drow["ausm_com"].ToString(), _drow["ml_def_pc"].ToString(), _user, "", "", "", "", "", "", "", true);
                    }
                }

                dr = _dtResults.NewRow();
                dr["Com_cd"] = _drow["ausm_com"].ToString();
                dr["Com_desc"] = _drow["mc_desc"].ToString();
                dr["Com_powered"] = _drow["mc_it_powered"].ToString();
                dr["ref1"] = _drow["ausm_ref1"].ToString();
                dr["ref2"] = _drow["ausm_ref2"].ToString();
                dr["Intr_rep_no"] = _drow["ausm_intr_rep_no"].ToString();
                dr["Main_job"] = _drow["ausm_main_job"].ToString();
                dr["Sub_job"] = _drow["ausm_job"].ToString();
                dr["JobDate"] = Convert.ToDateTime(_drow["ausm_subjob_strdt"]).Date;
                dr["Loc_code"] = _drow["ausm_loc"].ToString();
                dr["Loc_desc"] = _drow["ml_loc_desc"].ToString();
                dr["Loc_manager_cd"] = _drow["mpc_man"].ToString();
                dr["Loc_manager_name"] = _drow["esep_title"].ToString() + " " + _drow["esep_name_initials"].ToString();
                dr["pc_code"] = _drow["ml_def_pc"].ToString();
                dr["dtlmismatch"] = 0;
                dr["acc_close"] = 0;
                dr["sr_return"] = 0;
                dr["Visit_dates"] = _drow["ausm_subjob_enddt"].ToString();
                if (string.IsNullOrEmpty(_drow["ml_app_stk_val"].ToString()))
                {
                    dr["insucover"] = 0;
                }
                else
                {
                    dr["insucover"] = Convert.ToDecimal(_drow["ml_app_stk_val"]);
                }
                if (inventorybal.Rows.Count > 0)
                {
                    dr["inventoryval"] = inventorybal.AsEnumerable().Sum(r => r.Field<decimal>("cost_val"));
                    dr["inventorybal"] = inventorybal.AsEnumerable().Sum(r => r.Field<decimal>("QTY"));
                }
                else
                {
                    dr["inventoryval"] = 0;
                    dr["inventorybal"] = 0;
                }

                if (pendingdelivery.Rows.Count > 0) { dr["forwardsale"] = pendingdelivery.Rows.Count; } else { dr["forwardsale"] = 0; }
                if (unconfaod.Rows.Count > 0) { dr["git"] = unconfaod.Rows.Count; } else { dr["git"] = 0; }
                if (reverted.Rows.Count > 0) { dr["revert"] = reverted.Rows.Count; } else { dr["revert"] = 0; }
                if (fifo.Rows.Count > 0) { dr["fifo"] = fifo.Rows.Count; } else { dr["fifo"] = 0; }
                if (serialmismatch.Rows.Count > 0) { dr["serialmismatch"] = serialmismatch.Rows.Count; } else { dr["serialmismatch"] = 0; }
                if (nonmoving.Rows.Count > 0) { dr["nonmoving"] = nonmoving.Rows.Count; } else { dr["nonmoving"] = 0; }
                if (fixasset != null) { if (fixasset.Rows.Count > 0) { dr["fixedasset"] = fixasset.Rows.Count; } else { dr["fixedasset"] = 0; } } else { dr["fixedasset"] = 0; }
                if (dinqty.Rows.Count > 0) { dr["din_qty"] = dinqty.Rows.Count; } else { dr["din_qty"] = 0; }

                //Sales Target
                DateTime _enddate = new DateTime(Convert.ToDateTime(_drow["ausm_subjob_strdt"]).Year, Convert.ToDateTime(_drow["ausm_subjob_strdt"]).Month, 1).AddMonths(1).AddDays(-1);
                DateTime _stdate = new DateTime(Convert.ToDateTime(_drow["ausm_subjob_strdt"]).Year, Convert.ToDateTime(_drow["ausm_subjob_strdt"]).Month, 1).AddMonths(-5);

                saleachv = new DataTable();

                if (_isAnnualAudJob.Rows.Count > 0)
                {
                    saleachv = _salesDAL.AuditSalesAchievementDetails(_stdate.Date, _enddate.Date, "", "");
                }
                else
                {
                    if (loctp == "WH" || loctp == "MWH" || loctp == "SWH" || loctp == "AGWH" || loctp == "OWH" || loctp == "RWH")
                    {
                        saleachv = _salesDAL.AuditSalesAchievementDetails(_stdate.Date, _enddate.Date, "", "");
                    }
                    else
                    {
                        saleachv = _salesDAL.AuditSalesAchievementDetails(_stdate.Date, _enddate.Date, _drow["ausm_com"].ToString(), _drow["ml_def_pc"].ToString());
                    }
                }

                if (saleachv.Rows.Count > 0)
                {
                    foreach (DataRow _drach in saleachv.Rows)
                    {
                        if (string.IsNullOrEmpty(_drach["m_1"].ToString()) == false)
                        {
                            dr["trgt_y1m1_val"] = Convert.ToDecimal(_drach["m_1"]);
                            dr["trgt_y1m2_val"] = Convert.ToDecimal(_drach["m_2"]);
                            dr["trgt_y1m3_val"] = Convert.ToDecimal(_drach["m_3"]);
                            dr["trgt_y1m4_val"] = Convert.ToDecimal(_drach["m_4"]);
                            dr["trgt_y1m5_val"] = Convert.ToDecimal(_drach["m_5"]);
                            dr["trgt_y1m6_val"] = Convert.ToDecimal(_drach["m_6"]);
                            dr["trgt_y2m1_val"] = Convert.ToDecimal(_drach["m_7"]);
                            dr["trgt_y2m2_val"] = Convert.ToDecimal(_drach["m_8"]);
                            dr["trgt_y2m3_val"] = Convert.ToDecimal(_drach["m_9"]);
                            dr["trgt_y2m4_val"] = Convert.ToDecimal(_drach["m_10"]);
                            dr["trgt_y2m5_val"] = Convert.ToDecimal(_drach["m_11"]);
                            dr["trgt_y2m6_val"] = Convert.ToDecimal(_drach["m_12"]);
                        }
                    }
                }
                System.Globalization.DateTimeFormatInfo mfi = new System.Globalization.DateTimeFormatInfo();  
                if (_enddate.Month - 5 <= 0) { dr["trgt_m1_name"] = mfi.GetMonthName(_enddate.Month - 5 + 12).ToString(); } else { dr["trgt_m1_name"] = mfi.GetMonthName(_enddate.Month - 5).ToString(); }
                if (_enddate.Month - 4 <= 0) { dr["trgt_m2_name"] = mfi.GetMonthName(_enddate.Month - 4 + 12).ToString(); } else { dr["trgt_m2_name"] = mfi.GetMonthName(_enddate.Month - 4).ToString(); }
                if (_enddate.Month - 3 <= 0) { dr["trgt_m3_name"] = mfi.GetMonthName(_enddate.Month - 3 + 12).ToString(); } else { dr["trgt_m3_name"] = mfi.GetMonthName(_enddate.Month - 3).ToString(); }
                if (_enddate.Month - 2 <= 0) { dr["trgt_m4_name"] = mfi.GetMonthName(_enddate.Month - 2 + 12).ToString(); } else { dr["trgt_m4_name"] = mfi.GetMonthName(_enddate.Month - 2).ToString(); }
                if (_enddate.Month - 1 <= 0) { dr["trgt_m5_name"] = mfi.GetMonthName(_enddate.Month - 1 + 12).ToString(); } else { dr["trgt_m5_name"] = mfi.GetMonthName(_enddate.Month - 1).ToString(); }
                dr["trgt_m6_name"] = mfi.GetMonthName(_enddate.Month).ToString();

                //DataTable z = reverted.Select("rvt_date <= '" + Convert.ToDateTime(_drow["ausm_subjob_strdt"]).Date + "'");
                //dr["Rvt3Month"] = reverted.Rows.Count;
                //AsEnumerable().Count(r => r.Field<int>("rvt_date"));

                DataTable _AudSerial = new DataTable();
                _AudSerial = _financialDAL.GetAuditJobDiffSerials(_com, _drow["ausm_job"].ToString());

                var _DiffSerial1 = _AudSerial.Select("audjs_ref_stus is not null");
                var _DiffSerial = new DataTable();
                if (_DiffSerial1.Length != 0)
                    _DiffSerial = _DiffSerial1.CopyToDataTable();
                else
                    _DiffSerial = _AudSerial.Clone();

                _AudRemark = new DataTable();
                _AudRemark = _financialDAL.GetAuditJobRemarks(_drow["ausm_job"].ToString());

                if (_DiffSerial.Rows.Count > 0)
                {
                    //Note 1
                    var filteredDataRows = _DiffSerial.Select("audjs_rpt_type='NOTE 01'");
                    var dt1 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        dt1 = filteredDataRows.CopyToDataTable();
                    else
                        dt1 = _DiffSerial.Clone();

                    if (dt1.Rows.Count > 0)
                    {
                        dr["Note1_tot"] = dt1.Rows.Count;

                        var filteredDataRows1 = dt1.Select("audjs_ref_stus='AEX'");
                        var dt2 = new DataTable();
                        if (filteredDataRows1.Length != 0)
                            dt2 = filteredDataRows1.CopyToDataTable();
                        else
                            dt2 = dt1.Clone();
                        if (dt1.Rows.Count > 0) { dr["Note1_ex"] = dt2.Rows.Count; } else { dr["Note1_ex"] = 0; }

                        filteredDataRows1 = dt1.Select("audjs_ref_stus='ACS'");
                        dt2 = new DataTable();
                        if (filteredDataRows1.Length != 0)
                            dt2 = filteredDataRows1.CopyToDataTable();
                        else
                            dt2 = dt1.Clone();
                        if (dt1.Rows.Count > 0) { dr["Note1_sh"] = dt2.Rows.Count; } else { dr["Note1_sh"] = 0; }
                    }
                    else
                    {
                        dr["Note1_tot"] = 0;
                        dr["Note1_ex"] = 0;
                        dr["Note1_sh"] = 0;
                    }

                    //Note 1 - Remarks
                    filteredDataRows = _AudRemark.Select("ausv_rpt_cd='NOTE 01'");
                    note01 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        note01 = filteredDataRows.CopyToDataTable();
                    else
                        note01 = _AudRemark.Clone();

                    //Note 2
                    filteredDataRows = _DiffSerial.Select("audjs_rpt_type='NOTE 02'");
                    dt1 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        dt1 = filteredDataRows.CopyToDataTable();
                    else
                        dt1 = _DiffSerial.Clone();

                    if (dt1.Rows.Count > 0) { dr["Note2"] = dt1.Rows.Count; } else { dr["Note2"] = 0; }

                    //Note 2 - Remarks
                    filteredDataRows = _AudRemark.Select("ausv_rpt_cd='NOTE 02'");
                    note02 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        note02 = filteredDataRows.CopyToDataTable();
                    else
                        note02 = _AudRemark.Clone();

                    //Note 3
                    filteredDataRows = _DiffSerial.Select("audjs_rpt_type='NOTE 03'");
                    dt1 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        dt1 = filteredDataRows.CopyToDataTable();
                    else
                        dt1 = _DiffSerial.Clone();

                    if (dt1.Rows.Count > 0) { dr["Note3"] = dt1.Rows.Count; } else { dr["Note3"] = 0; }

                    //Note 3 - Remarks
                    filteredDataRows = _AudRemark.Select("ausv_rpt_cd='NOTE 03'");
                    note03 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        note03 = filteredDataRows.CopyToDataTable();
                    else
                        note03 = _AudRemark.Clone();

                    //Note 4
                    filteredDataRows = _DiffSerial.Select("audjs_rpt_type='NOTE 04'");
                    dt1 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        dt1 = filteredDataRows.CopyToDataTable();
                    else
                        dt1 = _DiffSerial.Clone();

                    if (dt1.Rows.Count > 0) { dr["Note4"] = dt1.Rows.Count; } else { dr["Note4"] = 0; }

                    //Note 4 - Remarks
                    filteredDataRows = _AudRemark.Select("ausv_rpt_cd='NOTE 04'");
                    note04 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        note04 = filteredDataRows.CopyToDataTable();
                    else
                        note04 = _AudRemark.Clone();

                    //Note 5
                    filteredDataRows = _DiffSerial.Select("audjs_rpt_type='NOTE 05'");
                    dt1 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        dt1 = filteredDataRows.CopyToDataTable();
                    else
                        dt1 = _DiffSerial.Clone();

                    if (dt1.Rows.Count > 0) { dr["Note5"] = dt1.Rows.Count; } else { dr["Note5"] = 0; }

                    //Note 5 - Remarks
                    filteredDataRows = _AudRemark.Select("ausv_rpt_cd='NOTE 05'");
                    note05 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        note05 = filteredDataRows.CopyToDataTable();
                    else
                        note05 = _AudRemark.Clone();

                    //Note 6
                    filteredDataRows = _DiffSerial.Select("audjs_rpt_type='NOTE 06'");
                    dt1 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        dt1 = filteredDataRows.CopyToDataTable();
                    else
                        dt1 = _DiffSerial.Clone();

                    if (dt1.Rows.Count > 0) { dr["Note6"] = dt1.Rows.Count; } else { dr["Note6"] = 0; }

                    //Note 5 - Value
                    dr["Note5Collected"] = 0;
                    dr["Note5Excess"] = 0;
                    if (note05.Rows.Count > 0)
                    {
                        foreach (DataRow _dr1 in note05.Rows)
                        {
                            if (!(string.IsNullOrEmpty(_dr1["rmk09"].ToString())))
                            {
                                dr["Note5Collected"] = Convert.ToDecimal(dr["Note5Collected"]) + Convert.ToDecimal(_dr1["rmk09"].ToString());
                            }
                        }
                    }
                    if (note06.Rows.Count > 0)
                    {
                        foreach (DataRow _dr1 in note06.Rows)
                        {
                            if (!(string.IsNullOrEmpty(_dr1["rmk09"].ToString())))
                            {
                                dr["Note5Excess"] = Convert.ToDecimal(dr["Note5Excess"]) + Convert.ToDecimal(_dr1["rmk09"].ToString());
                            }
                        }
                    }

                    //Note 6 - Remarks
                    filteredDataRows = _AudRemark.Select("ausv_rpt_cd='NOTE 06'");
                    note06 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        note06 = filteredDataRows.CopyToDataTable();
                    else
                        note06 = _AudRemark.Clone();

                    //Note 7
                    filteredDataRows = _DiffSerial.Select("audjs_rpt_type='NOTE 07'");
                    dt1 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        dt1 = filteredDataRows.CopyToDataTable();
                    else
                        dt1 = _DiffSerial.Clone();

                    if (dt1.Rows.Count > 0) { dr["Note7"] = dt1.Rows.Count; } else { dr["Note7"] = 0; }

                    //Note 7 - Remarks
                    filteredDataRows = _AudRemark.Select("ausv_rpt_cd='NOTE 07'");
                    note07 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        note07 = filteredDataRows.CopyToDataTable();
                    else
                        note07 = _AudRemark.Clone();

                    //Note 8
                    filteredDataRows = _DiffSerial.Select("audjs_rpt_type='NOTE 08'");
                    dt1 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        dt1 = filteredDataRows.CopyToDataTable();
                    else
                        dt1 = _DiffSerial.Clone();

                    if (dt1.Rows.Count > 0) { dr["Note8"] = dt1.Rows.Count; } else { dr["Note8"] = 0; }

                    //Note 8 - Remarks
                    filteredDataRows = _AudRemark.Select("ausv_rpt_cd='NOTE 08'");
                    note08 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        note08 = filteredDataRows.CopyToDataTable();
                    else
                        note08 = _AudRemark.Clone();

                    //Note 15
                    filteredDataRows = _DiffSerial.Select("audjs_rpt_type='NOTE 15'");
                    dt1 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        dt1 = filteredDataRows.CopyToDataTable();
                    else
                        dt1 = _DiffSerial.Clone();

                    if (dt1.Rows.Count > 0) { dr["Note15"] = dt1.Rows.Count; } else { dr["Note15"] = 0; }

                    //Note 15 - Remarks
                    filteredDataRows = _AudRemark.Select("ausv_rpt_cd='NOTE 15'");
                    note15 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        note15 = filteredDataRows.CopyToDataTable();
                    else
                        note15 = _AudRemark.Clone();

                    //X Note 02
                    filteredDataRows = _DiffSerial.Select("audjs_rpt_type='X NOTE 02'");
                    dt1 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        dt1 = filteredDataRows.CopyToDataTable();
                    else
                        dt1 = _DiffSerial.Clone();

                    if (dt1.Rows.Count > 0) { dr["XNote2"] = dt1.Rows.Count; } else { dr["XNote2"] = 0; }

                    //XNote 2 - Remarks
                    filteredDataRows = _AudRemark.Select("ausv_rpt_cd='X NOTE 02'");
                    xnote02 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        xnote02 = filteredDataRows.CopyToDataTable();
                    else
                        xnote02 = _AudRemark.Clone();

                    //X Note 05
                    filteredDataRows = _DiffSerial.Select("audjs_rpt_type='X NOTE 05'");
                    dt1 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        dt1 = filteredDataRows.CopyToDataTable();
                    else
                        dt1 = _DiffSerial.Clone();

                    if (dt1.Rows.Count > 0) { dr["XNote5"] = dt1.Rows.Count; } else { dr["XNote5"] = 0; }

                    //XNote 5 - Remarks
                    filteredDataRows = _AudRemark.Select("ausv_rpt_cd='X NOTE 05'");
                    xnote05 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        xnote05 = filteredDataRows.CopyToDataTable();
                    else
                        xnote05 = _AudRemark.Clone();

                    //Note 09
                    filteredDataRows = _DiffSerial.Select("audjs_rpt_type='NOTE 09'");
                    dt1 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        dt1 = filteredDataRows.CopyToDataTable();
                    else
                        dt1 = _DiffSerial.Clone();

                    if (dt1.Rows.Count > 0) { dr["Note9"] = dt1.Rows.Count; } else { dr["Note9"] = 0; }

                    //Note 09 - Remarks
                    filteredDataRows = _AudRemark.Select("ausv_rpt_cd='NOTE 09'");
                    note09 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        note09 = filteredDataRows.CopyToDataTable();
                    else
                        note09 = _AudRemark.Clone();

                    //Note 10
                    filteredDataRows = _DiffSerial.Select("audjs_rpt_type='NOTE 10'");
                    dt1 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        dt1 = filteredDataRows.CopyToDataTable();
                    else
                        dt1 = _DiffSerial.Clone();

                    if (dt1.Rows.Count > 0) { dr["Note10"] = dt1.Rows.Count; } else { dr["Note10"] = 0; }

                    //Note 10 - Remarks
                    filteredDataRows = _AudRemark.Select("ausv_rpt_cd='NOTE 10'");
                    note10 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        note10 = filteredDataRows.CopyToDataTable();
                    else
                        note10 = _AudRemark.Clone();

                    //Note 11
                    filteredDataRows = _DiffSerial.Select("audjs_rpt_type='NOTE 11'");
                    dt1 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        dt1 = filteredDataRows.CopyToDataTable();
                    else
                        dt1 = _DiffSerial.Clone();

                    if (dt1.Rows.Count > 0) { dr["Note11"] = dt1.Rows.Count; } else { dr["Note11"] = 0; }

                    //Note 11 - Remarks
                    filteredDataRows = _AudRemark.Select("ausv_rpt_cd='NOTE 11'");
                    note11 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        note11 = filteredDataRows.CopyToDataTable();
                    else
                        note11 = _AudRemark.Clone();

                    //Note 12
                    filteredDataRows = _DiffSerial.Select("audjs_rpt_type='NOTE 12'");
                    dt1 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        dt1 = filteredDataRows.CopyToDataTable();
                    else
                        dt1 = _DiffSerial.Clone();

                    if (dt1.Rows.Count > 0) { dr["Note12"] = dt1.Rows.Count; } else { dr["Note12"] = 0; }

                    //Note 12 - Remarks
                    filteredDataRows = _AudRemark.Select("ausv_rpt_cd='NOTE 12'");
                    note12 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        note12 = filteredDataRows.CopyToDataTable();
                    else
                        note12 = _AudRemark.Clone();

                    //Note 13
                    filteredDataRows = _DiffSerial.Select("audjs_rpt_type='NOTE 13'");
                    dt1 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        dt1 = filteredDataRows.CopyToDataTable();
                    else
                        dt1 = _DiffSerial.Clone();

                    if (dt1.Rows.Count > 0) { dr["Note13"] = dt1.Rows.Count; } else { dr["Note13"] = 0; }

                    //Note 13 - Remarks
                    filteredDataRows = _AudRemark.Select("ausv_rpt_cd='NOTE 13'");
                    note13 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        note13 = filteredDataRows.CopyToDataTable();
                    else
                        note13 = _AudRemark.Clone();

                    //Note 14
                    filteredDataRows = _DiffSerial.Select("audjs_rpt_type='NOTE 14'");
                    dt1 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        dt1 = filteredDataRows.CopyToDataTable();
                    else
                        dt1 = _DiffSerial.Clone();

                    if (dt1.Rows.Count > 0) { dr["Note14"] = dt1.Rows.Count; } else { dr["Note14"] = 0; }

                    //Note 14 - Remarks
                    filteredDataRows = _AudRemark.Select("ausv_rpt_cd='NOTE 14'");
                    note14 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        note14 = filteredDataRows.CopyToDataTable();
                    else
                        note14 = _AudRemark.Clone();

                    //------------------------- not added to total variance                    

                    //X Note 1
                    filteredDataRows = _DiffSerial.Select("audjs_rpt_type='X NOTE 01'");
                    dt1 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        dt1 = filteredDataRows.CopyToDataTable();
                    else
                        dt1 = _DiffSerial.Clone();

                    if (dt1.Rows.Count > 0) { dr["XNote1"] = dt1.Rows.Count; } else { dr["XNote1"] = 0; }

                    //X Note 1 - Remarks
                    filteredDataRows = _AudRemark.Select("ausv_rpt_cd='X NOTE 01'");
                    xnote01 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        xnote01 = filteredDataRows.CopyToDataTable();
                    else
                        xnote01 = _AudRemark.Clone();

                    //X Note 3
                    filteredDataRows = _DiffSerial.Select("audjs_rpt_type='X NOTE 03'");
                    dt1 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        dt1 = filteredDataRows.CopyToDataTable();
                    else
                        dt1 = _DiffSerial.Clone();

                    if (dt1.Rows.Count > 0) { dr["XNote3"] = dt1.Rows.Count; } else { dr["XNote3"] = 0; }

                    //X Note 3 - Remarks
                    filteredDataRows = _AudRemark.Select("ausv_rpt_cd='X NOTE 03'");
                    xnote03 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        xnote03 = filteredDataRows.CopyToDataTable();
                    else
                        xnote03 = _AudRemark.Clone();

                    //X Note 4
                    filteredDataRows = _DiffSerial.Select("audjs_rpt_type='X NOTE 04'");
                    dt1 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        dt1 = filteredDataRows.CopyToDataTable();
                    else
                        dt1 = _DiffSerial.Clone();

                    if (dt1.Rows.Count > 0) { dr["XNote4"] = dt1.Rows.Count; } else { dr["XNote4"] = 0; }

                    //X Note 4 - Remarks
                    filteredDataRows = _AudRemark.Select("ausv_rpt_cd='X NOTE 04'");
                    xnote04 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        xnote04 = filteredDataRows.CopyToDataTable();
                    else
                        xnote04 = _AudRemark.Clone();

                    //X Note 6
                    filteredDataRows = _DiffSerial.Select("audjs_rpt_type='X NOTE 06'");
                    dt1 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        dt1 = filteredDataRows.CopyToDataTable();
                    else
                        dt1 = _DiffSerial.Clone();

                    if (dt1.Rows.Count > 0) { dr["XNote6"] = dt1.Rows.Count; } else { dr["XNote6"] = 0; }

                    //X Note 6 - Remarks
                    filteredDataRows = _AudRemark.Select("ausv_rpt_cd='X NOTE 06'");
                    xnote06 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        xnote06 = filteredDataRows.CopyToDataTable();
                    else
                        xnote06 = _AudRemark.Clone();

                    //X Note 7
                    filteredDataRows = _DiffSerial.Select("audjs_rpt_type='X NOTE 07'");
                    dt1 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        dt1 = filteredDataRows.CopyToDataTable();
                    else
                        dt1 = _DiffSerial.Clone();

                    if (dt1.Rows.Count > 0) { dr["XNote7"] = dt1.Rows.Count; } else { dr["XNote7"] = 0; }

                    //X Note 7 - Remarks
                    filteredDataRows = _AudRemark.Select("ausv_rpt_cd='X NOTE 07'");
                    xnote07 = new DataTable();
                    if (filteredDataRows.Length != 0)
                        xnote07 = filteredDataRows.CopyToDataTable();
                    else
                        xnote07 = _AudRemark.Clone();

                    DataTable _xnote01def = new DataTable();

                    var _xnote01def1 = (from x in _AudSerial.AsEnumerable()
                                        join y in xnote01.AsEnumerable()
                                  on new
                                  {
                                      A = x.Field<string>("audjs_job"),
                                      B = x.Field<string>("audjs_item"),
                                      C = x.Field<string>("audjs_itm_stus"),
                                      D = x.Field<string>("audjs_rpt_type"),
                                      E = x.Field<string>("audjs_ref_stus")
                                  }
                                  equals new
                                  {
                                      A = y.Field<string>("ausv_job"),
                                      B = y.Field<string>("ausv_itm"),
                                      C = y.Field<string>("ausv_itm_stus"),
                                      D = y.Field<string>("ausv_rpt_cd"),
                                      E = y.Field<string>("ausv_rpt_stus")                                  
                                  }
                                  select new
                                  {
                                      audjs_job = x.Field<string>("audjs_job"),
                                      audjs_item = x.Field<string>("audjs_item"),
                                      audjs_itm_stus = x.Field<string>("audjs_itm_stus"),
                                      audjs_rpt_type = x.Field<string>("audjs_rpt_type"),
                                      audjs_ref_stus = x.Field<string>("audjs_ref_stus")
                                  }
                                          ).ToList();

                    _xnote01def = LINQResultToDataTable(_xnote01def1);

                    if (xnote01.Rows.Count > 0) { dr["defective"] = _xnote01def.Rows.Count; } else { dr["defective"] = 0; }

                    //Total
                    dr["Tot_variance"] = Convert.ToDecimal(dr["Note1_tot"]) + Convert.ToDecimal(dr["Note2"]) + Convert.ToDecimal(dr["Note3"]) + Convert.ToDecimal(dr["Note4"]) + Convert.ToDecimal(dr["Note5"]) + Convert.ToDecimal(dr["Note6"]) + Convert.ToDecimal(dr["Note7"]) + Convert.ToDecimal(dr["Note8"]) + Convert.ToDecimal(dr["Note15"]) + Convert.ToDecimal(dr["XNote2"]) + Convert.ToDecimal(dr["XNote5"])
                        + Convert.ToDecimal(dr["Note9"]) + Convert.ToDecimal(dr["Note10"]) + Convert.ToDecimal(dr["Note11"]) + Convert.ToDecimal(dr["Note12"]) + Convert.ToDecimal(dr["Note13"]) + Convert.ToDecimal(dr["Note14"]);
                    dr["Var_perc"] = (Convert.ToDecimal(dr["Tot_variance"]) / _AudSerial.Rows.Count) * 100;

                }
                else
                {
                    dr["Note1_tot"] = 0;
                    dr["Note1_ex"] = 0;
                    dr["Note1_sh"] = 0;
                    dr["Note3"] = 0;
                    dr["Note4"] = 0;
                    dr["Note5"] = 0;
                    dr["Note6"] = 0;
                    dr["Note7"] = 0;
                    dr["Note8"] = 0;
                    dr["Note15"] = 0;
                    dr["XNote2"] = 0;
                    dr["XNote5"] = 0;
                    dr["Note2"] = 0;
                    dr["Note9"] = 0;
                    dr["Note10"] = 0;
                    dr["Note11"] = 0;
                    dr["Note12"] = 0;
                    dr["Note13"] = 0;
                    dr["Note14"] = 0;
                    dr["Tot_variance"] = 0;
                    dr["Var_perc"] = 0;
                    dr["Note5Collected"] = 0;
                    dr["Note5Excess"] = 0;
                    dr["XNote1"] = 0;
                    dr["XNote3"] = 0;
                    dr["XNote4"] = 0;
                    dr["XNote6"] = 0;
                    dr["XNote7"] = 0;
                    dr["defective"] = 0;
                    dr["inventorybal"] = 0;
                    dr["pc_code"] = 0;
                    dr["dtlmismatch"] = 0;
                    dr["acc_close"] = 0;
                    dr["sr_return"] = 0;
                    dr["din_qty"] = 0;
                    dr["trgt_y1m1_val"] = 0;
                    dr["trgt_y1m2_val"] = 0;
                    dr["trgt_y1m3_val"] = 0;
                    dr["trgt_y1m4_val"] = 0;
                    dr["trgt_y1m5_val"] = 0;
                    dr["trgt_y1m6_val"] = 0;
                    dr["trgt_y2m1_val"] = 0;
                    dr["trgt_y2m2_val"] = 0;
                    dr["trgt_y2m3_val"] = 0;
                    dr["trgt_y2m4_val"] = 0;
                    dr["trgt_y2m5_val"] = 0;
                    dr["trgt_y2m6_val"] = 0;
                }

                note01.TableName = "note01";
                note02.TableName = "note02";
                note03.TableName = "note03";
                note04.TableName = "note04";
                note05.TableName = "note05";
                note06.TableName = "note06";
                note07.TableName = "note07";
                note08.TableName = "note08";
                note09.TableName = "note09";
                note10.TableName = "note10";
                note11.TableName = "note11";
                note12.TableName = "note12";
                note13.TableName = "note13";
                note14.TableName = "note14";
                note15.TableName = "note15";
                xnote01.TableName = "xnote01";
                xnote02.TableName = "xnote02";
                xnote03.TableName = "xnote03";
                xnote04.TableName = "xnote04";
                xnote05.TableName = "xnote05";
                xnote06.TableName = "xnote06";
                xnote07.TableName = "xnote07";

                _dtResults.Rows.Add(dr);
                dict.Add("note01", note01);
                dict.Add("note02", note02);
                dict.Add("note03", note03);
                dict.Add("note04", note04);
                dict.Add("note05", note05);
                dict.Add("note06", note06);
                dict.Add("note07", note07);
                dict.Add("note08", note08);
                dict.Add("note09", note09);
                dict.Add("note10", note10);
                dict.Add("note11", note11);
                dict.Add("note12", note12);
                dict.Add("note13", note13);
                dict.Add("note14", note14);
                dict.Add("note15", note15);
                dict.Add("xnote01", xnote01);
                dict.Add("xnote02", xnote02);
                dict.Add("xnote03", xnote03);
                dict.Add("xnote04", xnote04);
                dict.Add("xnote05", xnote05);
                dict.Add("xnote06", xnote06);
                dict.Add("xnote07", xnote07);
                dict.Add("pendingdelivery", pendingdelivery);
                dict.Add("unconfaod", unconfaod);
                dict.Add("reverted", reverted);
                dict.Add("fifo", fifo);
                //dict.Add("Rcc", Rcc);
                dict.Add("serialmismatch", serialmismatch);
                dict.Add("nonmoving", nonmoving);
                dict.Add("fixasset", fixasset);
                dict.Add("members", _jobMembers);
                dict.Add("agedebtorsum", agedebtorsum);

                _diffserial.Merge(_DiffSerial);
            }
            _diffserial.TableName = "DiffSerial";
            return _dtResults;
        }

        public DataTable GetItemWiseGp_Rpl(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _Cat4, string _Cat5, string _User, string _RepType, string _StockType, string _InvNo, string _Com, string _Promotor,
            int _freeissue, string _itemclasif, string _brndmgr, string _Group, bool withReversal, int _rplitm, DateTime _fromDate2, DateTime _toDate2, Int16 _intercom)
        {
            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            _reportDAL = new ReptCommonDAL();
            DataTable GLOB_DataTable = new DataTable();
            DataTable _dtGP = new DataTable();

            //DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_Com, _User);
            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("GPReport") == true) _salesDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.Get_Gp_Rpl_Data(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _User, _RepType, _StockType, _InvNo, drow["tpl_pc"].ToString(), drow["tpl_com"].ToString(), _Promotor,
                        _freeissue, _itemclasif, _brndmgr, withReversal, _rplitm, _fromDate2, _toDate2, _intercom);

                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            var _tmpResult = GLOB_DataTable.AsEnumerable()
                    .GroupBy(grp =>
                        new
                        {
                            com_code = grp.Field<string>("bms_com_cd").ToString(),
                            com_desc = grp.Field<string>("bms_com_desc").ToString(),
                            powered_by = grp.Field<string>("bms_powered").ToString(),
                            year_ = grp.Field<Int16>("bms_do_year"),
                            month_ = grp.Field<Int16>("bms_do_month"),
                            item_cat1 = grp.Field<string>("bms_itm_cat1").ToString(),
                            item_cat2 = grp.Field<string>("bms_itm_cat2").ToString(),
                            item_cat1_desc = grp.Field<string>("bms_itm_cat1_desc").ToString(),
                            item_cat2_desc = grp.Field<string>("bms_itm_cat2_desc").ToString(),
                            item_code = grp.Field<string>("bms_itm_cd").ToString(),
                            item_desc = grp.Field<string>("bms_itm_desc").ToString(),
                            item_model = grp.Field<string>("bms_itm_mdl").ToString(),
                            repl_model = grp.Field<string>("bms_pre_mdl").ToString()
                        }
                        ).Select(g =>
                            new
                            {
                                g.Key.com_code,
                                g.Key.com_desc,
                                g.Key.powered_by,
                                g.Key.year_,
                                g.Key.month_,
                                g.Key.item_cat1,
                                g.Key.item_cat2,
                                g.Key.item_cat1_desc,
                                g.Key.item_cat2_desc,
                                g.Key.item_code,
                                g.Key.item_desc,
                                g.Key.item_model,
                                g.Key.repl_model,
                                col_tp_order = 1,
                                col_tp = "QTY",
                                col_value = g.Sum(x => x.Field<Decimal>("bms_d_qty"))
                            });

            DataTable GP1 = LINQResultToDataTable(_tmpResult);
            _dtGP.Merge(GP1);

            _tmpResult = null;
            GP1 = new DataTable();
            _tmpResult = GLOB_DataTable.AsEnumerable()
                    .GroupBy(grp =>
                        new
                        {
                            com_code = grp.Field<string>("bms_com_cd").ToString(),
                            com_desc = grp.Field<string>("bms_com_desc").ToString(),
                            powered_by = grp.Field<string>("bms_powered").ToString(),
                            year_ = grp.Field<Int16>("bms_do_year"),
                            month_ = grp.Field<Int16>("bms_do_month"),
                            item_cat1 = grp.Field<string>("bms_itm_cat1").ToString(),
                            item_cat2 = grp.Field<string>("bms_itm_cat2").ToString(),
                            item_cat1_desc = grp.Field<string>("bms_itm_cat1_desc").ToString(),
                            item_cat2_desc = grp.Field<string>("bms_itm_cat2_desc").ToString(),
                            item_code = grp.Field<string>("bms_itm_cd").ToString(),
                            item_desc = grp.Field<string>("bms_itm_desc").ToString(),
                            item_model = grp.Field<string>("bms_itm_mdl").ToString(),
                            repl_model = grp.Field<string>("bms_pre_mdl").ToString()
                        }
                        ).Select(g =>
                            new
                            {
                                g.Key.com_code,
                                g.Key.com_desc,
                                g.Key.powered_by,
                                g.Key.year_,
                                g.Key.month_,
                                g.Key.item_cat1,
                                g.Key.item_cat2,
                                g.Key.item_cat1_desc,
                                g.Key.item_cat2_desc,
                                g.Key.item_code,
                                g.Key.item_desc,
                                g.Key.item_model,
                                g.Key.repl_model,
                                col_tp_order = 2,
                                col_tp = "COST",
                                col_value = g.Sum(x => x.Field<Decimal>("bms_d_cost"))
                            });

            GP1 = LINQResultToDataTable(_tmpResult);
            _dtGP.Merge(GP1);

            _tmpResult = null;
            GP1 = new DataTable();
            _tmpResult = GLOB_DataTable.AsEnumerable()
                    .GroupBy(grp =>
                        new
                        {
                            com_code = grp.Field<string>("bms_com_cd").ToString(),
                            com_desc = grp.Field<string>("bms_com_desc").ToString(),
                            powered_by = grp.Field<string>("bms_powered").ToString(),
                            year_ = grp.Field<Int16>("bms_do_year"),
                            month_ = grp.Field<Int16>("bms_do_month"),
                            item_cat1 = grp.Field<string>("bms_itm_cat1").ToString(),
                            item_cat2 = grp.Field<string>("bms_itm_cat2").ToString(),
                            item_cat1_desc = grp.Field<string>("bms_itm_cat1_desc").ToString(),
                            item_cat2_desc = grp.Field<string>("bms_itm_cat2_desc").ToString(),
                            item_code = grp.Field<string>("bms_itm_cd").ToString(),
                            item_desc = grp.Field<string>("bms_itm_desc").ToString(),
                            item_model = grp.Field<string>("bms_itm_mdl").ToString(),
                            repl_model = grp.Field<string>("bms_pre_mdl").ToString()
                        }
                        ).Select(g =>
                            new
                            {
                                g.Key.com_code,
                                g.Key.com_desc,
                                g.Key.powered_by,
                                g.Key.year_,
                                g.Key.month_,
                                g.Key.item_cat1,
                                g.Key.item_cat2,
                                g.Key.item_cat1_desc,
                                g.Key.item_cat2_desc,
                                g.Key.item_code,
                                g.Key.item_desc,
                                g.Key.item_model,
                                g.Key.repl_model,
                                col_tp_order = 3,
                                col_tp = "SALE",
                                col_value = g.Sum(x => x.Field<Decimal>("bms_d_net_amt"))
                            });

            GP1 = LINQResultToDataTable(_tmpResult);
            _dtGP.Merge(GP1);

            _tmpResult = null;
            GP1 = new DataTable();
            _tmpResult = GLOB_DataTable.AsEnumerable()
                    .GroupBy(grp =>
                        new
                        {
                            com_code = grp.Field<string>("bms_com_cd").ToString(),
                            com_desc = grp.Field<string>("bms_com_desc").ToString(),
                            powered_by = grp.Field<string>("bms_powered").ToString(),
                            year_ = grp.Field<Int16>("bms_do_year"),
                            month_ = grp.Field<Int16>("bms_do_month"),
                            item_cat1 = grp.Field<string>("bms_itm_cat1").ToString(),
                            item_cat2 = grp.Field<string>("bms_itm_cat2").ToString(),
                            item_cat1_desc = grp.Field<string>("bms_itm_cat1_desc").ToString(),
                            item_cat2_desc = grp.Field<string>("bms_itm_cat2_desc").ToString(),
                            item_code = grp.Field<string>("bms_itm_cd").ToString(),
                            item_desc = grp.Field<string>("bms_itm_desc").ToString(),
                            item_model = grp.Field<string>("bms_itm_mdl").ToString(),
                            repl_model = grp.Field<string>("bms_pre_mdl").ToString()
                        }
                        ).Select(g =>
                            new
                            {
                                g.Key.com_code,
                                g.Key.com_desc,
                                g.Key.powered_by,
                                g.Key.year_,
                                g.Key.month_,
                                g.Key.item_cat1,
                                g.Key.item_cat2,
                                g.Key.item_cat1_desc,
                                g.Key.item_cat2_desc,
                                g.Key.item_code,
                                g.Key.item_desc,
                                g.Key.item_model,
                                g.Key.repl_model,
                                col_tp_order = 4,
                                col_tp = "GP",
                                col_value = g.Sum(x => x.Field<Decimal>("bms_gp"))
                            });

            GP1 = LINQResultToDataTable(_tmpResult);
            _dtGP.Merge(GP1);

            _tmpResult = null;
            GP1 = new DataTable();
            _tmpResult = GLOB_DataTable.AsEnumerable()
                    .GroupBy(grp =>
                        new
                        {
                            com_code = grp.Field<string>("bms_com_cd").ToString(),
                            com_desc = grp.Field<string>("bms_com_desc").ToString(),
                            powered_by = grp.Field<string>("bms_powered").ToString(),
                            year_ = grp.Field<Int16>("bms_do_year"),
                            month_ = grp.Field<Int16>("bms_do_month"),
                            item_cat1 = grp.Field<string>("bms_itm_cat1").ToString(),
                            item_cat2 = grp.Field<string>("bms_itm_cat2").ToString(),
                            item_cat1_desc = grp.Field<string>("bms_itm_cat1_desc").ToString(),
                            item_cat2_desc = grp.Field<string>("bms_itm_cat2_desc").ToString(),
                            item_code = grp.Field<string>("bms_itm_cd").ToString(),
                            item_desc = grp.Field<string>("bms_itm_desc").ToString(),
                            item_model = grp.Field<string>("bms_itm_mdl").ToString(),
                            repl_model = grp.Field<string>("bms_pre_mdl").ToString()
                        }
                        ).Select(g =>
                            new
                            {
                                g.Key.com_code,
                                g.Key.com_desc,
                                g.Key.powered_by,
                                g.Key.year_,
                                g.Key.month_,
                                g.Key.item_cat1,
                                g.Key.item_cat2,
                                g.Key.item_cat1_desc,
                                g.Key.item_cat2_desc,
                                g.Key.item_code,
                                g.Key.item_desc,
                                g.Key.item_model,
                                g.Key.repl_model,
                                col_tp_order = 5,
                                col_tp = "GP%",
                                col_value = g.Sum(x => x.Field<Decimal>("bms_d_net_amt")) == 0 ? 0 : (g.Sum(x => x.Field<Decimal>("bms_gp")) / g.Sum(x => x.Field<Decimal>("bms_d_net_amt"))) * 100
                            });

            GP1 = LINQResultToDataTable(_tmpResult);
            _dtGP.Merge(GP1);

            _dtGP.TableName = "tbl";
            return _dtGP;
        }

        public DataTable GetItemWiseGpExcel_new(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _Cat4, string _Cat5, string _User, string _RepType, string _StockType, string _InvNo, string _Com, string _Promotor,
    int _freeissue, string _itemclasif, string _brndmgr, string _Group, bool withReversal, int _rplitm, DateTime _fromDate2, DateTime _toDate2, Int16 _intercom)
        {
            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            _reportDAL = new ReptCommonDAL();
            DataTable GLOB_DataTable = new DataTable();
            DataTable _dtGP = new DataTable();

            //DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_Com, _User);
            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("GPReport") == true) _salesDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.Get_Gp_Data_new(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _User, _RepType, _StockType, _InvNo, drow["tpl_pc"].ToString(), drow["tpl_com"].ToString(), _Promotor,
                        _freeissue, _itemclasif, _brndmgr, withReversal, _rplitm, _fromDate2, _toDate2, _intercom);

                    GLOB_DataTable.Merge(_dtResults);
                }
            }
            GLOB_DataTable.TableName = "tbl";
            return GLOB_DataTable;
            //_err = string.Empty;
            //string _filePath = string.Empty;

            //DataTable _dtResults;
            //_salesDAL = new SalesDAL();
            //_reportDAL = new ReptCommonDAL();
            //DataTable GLOB_DataTable = new DataTable();
            //DataTable _dtGP = new DataTable();


            ////DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_Com, _User);
            //DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            //_securityDAL = new SecurityDAL();
            //if (_securityDAL.Is_Report_DR("GPReport") == true) _salesDAL.ConnectionOpen_DR();
            //if (tmp_user_pc.Rows.Count > 0)
            //{
            //    foreach (DataRow drow in tmp_user_pc.Rows)
            //    {
            //        _dtResults = _salesDAL.Get_Gp_Data(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _User, _RepType, _StockType, _InvNo, drow["tpl_pc"].ToString(), drow["tpl_com"].ToString(), _Promotor,
            //            _freeissue, _itemclasif, _brndmgr, withReversal, _rplitm, _fromDate2, _toDate2, _intercom);

            //        GLOB_DataTable.Merge(_dtResults);
            //    }
            //}

            //_dtGP.Merge(GLOB_DataTable);


            //DataTable TitleData = new DataTable();
            //DataRow dataRow;
            //DataColumn dataCol = new DataColumn();
            //dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            //dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            //dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            //dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            //dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            //dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            //dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            //dataRow = TitleData.NewRow(); dataRow["c6"] = "GP Report"; TitleData.Rows.Add(dataRow);
            //dataRow = TitleData.NewRow();
            //dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            //dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            //TitleData.Rows.Add(dataRow);
            //_err = "";
            //_filePath = "";
            //_filePath = ExportExcel2007(_Com, _User, TitleData, _dtGP, out _err);
            //if (GLOB_DataTable.Rows.Count == 0)
            //{
            //    _err = "No Records Found.";
            //}

            //return _filePath;
        }

        //Lakshan 2016/01/04
        public string GetItemWiseGpExcel(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _Cat4, string _Cat5, string _User, string _RepType, string _StockType, string _InvNo, string _Com, string _Promotor,
            int _freeissue, string _itemclasif, string _brndmgr, string _Group, bool withReversal, int _rplitm, DateTime _fromDate2, DateTime _toDate2, Int16 _intercom, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            _reportDAL = new ReptCommonDAL();
            DataTable GLOB_DataTable = new DataTable();
            DataTable _dtGP = new DataTable();


            //DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_Com, _User);
            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("GPReport") == true) _salesDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.Get_Gp_Data(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _User, _RepType, _StockType, _InvNo, drow["tpl_pc"].ToString(), drow["tpl_com"].ToString(), _Promotor,
                        _freeissue, _itemclasif, _brndmgr, withReversal, _rplitm, _fromDate2, _toDate2, _intercom);

                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            if (_Group == "LOC")
            {
                var GP = from b in GLOB_DataTable.AsEnumerable()
                         group b by new { pccode = b.Field<string>("PROFITCENTER CODE"), pcdesc = b.Field<string>("PROFITCENTER DESCRIPTION") } into g
                         select new
                         {
                             PC_CODE = g.Key.pccode,
                             PC_DESCRIPTION = g.Key.pcdesc,
                             QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
                             NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
                             COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
                             GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                             GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
                         };

                DataTable GP1 = LINQResultToDataTable(GP);
                _dtGP.Merge(GP1);
            }
            else if (_Group == "ITM")
            {
                var GP = from b in GLOB_DataTable.AsEnumerable()
                         group b by new { itemcode = b.Field<string>("ITEM CODE"), itemdesc = b.Field<string>("ITEM DESCRIPTION"), model = b.Field<string>("ITEM MODEL") } into g
                         select new
                         {
                             ITEM_CODE = g.Key.itemcode,
                             ITEM_DESCRIPTION = g.Key.itemdesc,
                             ITEM_MODEL = g.Key.model,
                             QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
                             NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
                             COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
                             GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                             GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
                         };

                DataTable GP1 = LINQResultToDataTable(GP);
                _dtGP.Merge(GP1);
            }
            else if (_Group == "CAT1")
            {
                var GP = from b in GLOB_DataTable.AsEnumerable()
                         group b by new { cat1 = b.Field<string>("ITEM CAT 1"), cat1desc = b.Field<string>("ITEM CAT 1 DESCRIPTION") } into g
                         select new
                         {
                             PC_CODE = g.Key.cat1,
                             PC_DESCRIPTION = g.Key.cat1desc,
                             QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
                             NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
                             COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
                             GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                             GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
                         };

                DataTable GP1 = LINQResultToDataTable(GP);
                _dtGP.Merge(GP1);
            }
            else if (_Group == "BRND")
            {// Wimal @ 29/Nov/2018
                //var GP = from b in GLOB_DataTable.AsEnumerable()
                //         group b by new { brnd = b.Field<string>("ITEM BRAND"), brndName = b.Field<string>("BRAND NAME") } into g
                //         select new
                //         {
                //             PC_CODE = g.Key.brnd,
                //             PC_DESCRIPTION = g.Key.brndName,
                //             QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
                //             NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
                //             COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
                //             GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                //             GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
                //         };

                //DataTable GP1 = LINQResultToDataTable(GP);
                //_dtGP.Merge(GP1);
                var GP = from b in GLOB_DataTable.AsEnumerable()
                         group b by new { pccode = b.Field<string>("PROFITCENTER CODE"), pcdesc = b.Field<string>("PROFITCENTER DESCRIPTION"), brnd = b.Field<string>("ITEM BRAND"), brndName = b.Field<string>("BRAND NAME") } into g
                         select new
                         {
                             PC_CODE = g.Key.pccode,
                             PC_DESCRIPTION = g.Key.pcdesc,
                             BRAND_CODE = g.Key.brnd,
                             BRAND_NAME = g.Key.brndName,
                             QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
                             NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
                             COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
                             GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                             GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
                         };

                DataTable GP1 = LINQResultToDataTable(GP);
                _dtGP.Merge(GP1);
            }
            else if (_Group == "EXEC")
            {
                var GP = from b in GLOB_DataTable.AsEnumerable()
                         group b by new { pccode = b.Field<string>("PROFITCENTER CODE"), pcdesc = b.Field<string>("PROFITCENTER DESCRIPTION"), execcode = b.Field<string>("EXECUTIVE CODE"), execname = b.Field<string>("EXECUTIVE NAME") } into g
                         select new
                         {
                             PC_CODE = g.Key.pccode,
                             PC_DESCRIPTION = g.Key.pcdesc,
                             EXEC_CODE = g.Key.execcode,
                             EXEC_NAME = g.Key.execname,
                             QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
                             NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
                             COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
                             GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                             GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
                         };

                DataTable GP1 = LINQResultToDataTable(GP);
                _dtGP.Merge(GP1);
            }
            else if (_Group == "DOC")
            {
                var GP = from b in GLOB_DataTable.AsEnumerable()
                         group b by new { itemcode = b.Field<string>("ITEM CODE"), itemdesc = b.Field<string>("ITEM DESCRIPTION"), model = b.Field<string>("ITEM MODEL"), invoice = b.Field<string>("INVOICE NO") } into g
                         select new
                         {
                             ITEM_CODE = g.Key.itemcode,
                             ITEM_DESCRIPTION = g.Key.itemdesc,
                             ITEM_MODEL = g.Key.model,
                             INVOICE_NO = g.Key.invoice,
                             QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
                             NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
                             COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
                             GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                             GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
                         };

                DataTable GP1 = LINQResultToDataTable(GP);
                _dtGP.Merge(GP1);
            }
            else
            {
                _dtGP.Merge(GLOB_DataTable);
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "GP Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, TitleData, _dtGP, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public string GetPLDetails(DateTime _fromDate, DateTime _toDate, string _Com, string _User, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            _reportDAL = new ReptCommonDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("PLDetail") == true) _salesDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.GetPLDetails(_fromDate, _toDate, drow["tpl_pc"].ToString(), drow["tpl_com"].ToString());
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = _Com; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "P & L Details Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public string GetItemWiseGpExcelRecon(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _Cat4, string _Cat5, string _User, string _RepType, string _StockType, string _InvNo, string _Com, string _Promotor,
            int _freeissue, string _itemclasif, string _brndmgr, string _Group, bool withReversal, int _rplitm, DateTime _fromDate2, DateTime _toDate2, Int16 _intercom, string _fromadmin, string _toadmin, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            _reportDAL = new ReptCommonDAL();
            DataTable GLOB_DataTable = new DataTable();
            DataTable _dtGP = new DataTable();

            //DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_Com, _User);
            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("GPReport") == true) _salesDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.Get_Gp_Recon_Data(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _User, _RepType, _StockType, _InvNo, drow["tpl_pc"].ToString(), drow["tpl_com"].ToString(), _Promotor,
                        _freeissue, _itemclasif, _brndmgr, withReversal, _rplitm, _fromDate2, _toDate2, _intercom, _fromadmin, _toadmin);

                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            if (_Group == "LOC")
            {
                var GP = from b in GLOB_DataTable.AsEnumerable()
                         group b by new
                         {
                             pccode = b.Field<string>("PROFITCENTER CODE"),
                             pcdesc = b.Field<string>("PROFITCENTER DESCRIPTION"),
                             adminpc = b.Field<string>("PC ADMIN"),
                             adminloc = b.Field<string>("LOC ADMIN"),
                             chnlpc = b.Field<string>("PC CHANNEL"),
                             chnlloc = b.Field<string>("LOC CHANNEL"),
                             loc_cd = b.Field<string>("DO LOCATION CODE"),
                             loc_Desc = b.Field<string>("DO LOCATION DESCRIPTION")
                         } into g
                         select new
                         {
                             ADMIN_PC = g.Key.adminpc,
                             CHANNEL_PC = g.Key.chnlpc,
                             ADMIN_LOC = g.Key.adminloc,
                             CHANNEL_LOC = g.Key.chnlloc,
                             PC_CODE = g.Key.pccode,
                             PC_DESCRIPTION = g.Key.pcdesc,
                             LOC_CODE = g.Key.loc_cd,
                             LOC_DESCRIPTION = g.Key.loc_Desc,
                             QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
                             NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
                             COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
                             GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                             GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
                         };

                DataTable GP1 = LINQResultToDataTable(GP);
                _dtGP.Merge(GP1);
            }
            else if (_Group == "ITM")
            {
                var GP = from b in GLOB_DataTable.AsEnumerable()
                         group b by new
                         {
                             itemcode = b.Field<string>("ITEM CODE"),
                             itemdesc = b.Field<string>("ITEM DESCRIPTION"),
                             model = b.Field<string>("ITEM MODEL"),
                             adminpc = b.Field<string>("PC ADMIN"),
                             adminloc = b.Field<string>("LOC ADMIN"),
                             chnlpc = b.Field<string>("PC CHANNEL"),
                             chnlloc = b.Field<string>("LOC CHANNEL")
                         } into g
                         select new
                         {
                             ADMIN_PC = g.Key.adminpc,
                             CHANNEL_PC = g.Key.chnlpc,
                             ADMIN_LOC = g.Key.adminloc,
                             CHANNEL_LOC = g.Key.chnlloc,
                             ITEM_CODE = g.Key.itemcode,
                             ITEM_DESCRIPTION = g.Key.itemdesc,
                             ITEM_MODEL = g.Key.model,
                             QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
                             NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
                             COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
                             GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                             GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
                         };

                DataTable GP1 = LINQResultToDataTable(GP);
                _dtGP.Merge(GP1);
            }
            else if (_Group == "CAT1")
            {
                var GP = from b in GLOB_DataTable.AsEnumerable()
                         group b by new
                         {
                             cat1 = b.Field<string>("ITEM CAT 1"),
                             cat1desc = b.Field<string>("ITEM CAT 1 DESCRIPTION"),
                             adminpc = b.Field<string>("PC ADMIN"),
                             adminloc = b.Field<string>("LOC ADMIN"),
                             chnlpc = b.Field<string>("PC CHANNEL"),
                             chnlloc = b.Field<string>("LOC CHANNEL")
                         } into g
                         select new
                         {
                             ADMIN_PC = g.Key.adminpc,
                             CHANNEL_PC = g.Key.chnlpc,
                             ADMIN_LOC = g.Key.adminloc,
                             CHANNEL_LOC = g.Key.chnlloc,
                             PC_CODE = g.Key.cat1,
                             PC_DESCRIPTION = g.Key.cat1desc,
                             QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
                             NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
                             COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
                             GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                             GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
                         };

                DataTable GP1 = LINQResultToDataTable(GP);
                _dtGP.Merge(GP1);
            }
            else if (_Group == "EXEC")
            {
                var GP = from b in GLOB_DataTable.AsEnumerable()
                         group b by new
                         {
                             pccode = b.Field<string>("PROFITCENTER CODE"),
                             pcdesc = b.Field<string>("PROFITCENTER DESCRIPTION"),
                             execcode = b.Field<string>("EXECUTIVE CODE"),
                             execname = b.Field<string>("EXECUTIVE NAME"),
                             adminpc = b.Field<string>("PC ADMIN"),
                             adminloc = b.Field<string>("LOC ADMIN"),
                             chnlpc = b.Field<string>("PC CHANNEL"),
                             chnlloc = b.Field<string>("LOC CHANNEL"),
                             loc_cd = b.Field<string>("DO LOCATION CODE"),
                             loc_Desc = b.Field<string>("DO LOCATION DESCRIPTION")
                         } into g
                         select new
                         {
                             ADMIN_PC = g.Key.adminpc,
                             CHANNEL_PC = g.Key.chnlpc,
                             ADMIN_LOC = g.Key.adminloc,
                             CHANNEL_LOC = g.Key.chnlloc,
                             PC_CODE = g.Key.pccode,
                             PC_DESCRIPTION = g.Key.pcdesc,
                             LOC_CODE = g.Key.loc_cd,
                             LOC_DESCRIPTION = g.Key.loc_Desc,
                             EXEC_CODE = g.Key.execcode,
                             EXEC_NAME = g.Key.execname,
                             QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
                             NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
                             COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
                             GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                             GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
                         };

                DataTable GP1 = LINQResultToDataTable(GP);
                _dtGP.Merge(GP1);
            }
            else if (_Group == "DOC")
            {
                var GP = from b in GLOB_DataTable.AsEnumerable()
                         group b by new
                         {
                             pccode = b.Field<string>("PROFITCENTER CODE"),
                             pcdesc = b.Field<string>("PROFITCENTER DESCRIPTION"),
                             execcode = b.Field<string>("EXECUTIVE CODE"),
                             execname = b.Field<string>("EXECUTIVE NAME"),
                             customercode = b.Field<string>("CUSTOMER CODE"),
                             customername = b.Field<string>("CUSTOMER NAME"),
                             itemcode = b.Field<string>("ITEM CODE"),
                             itemdesc = b.Field<string>("ITEM DESCRIPTION"),
                             model = b.Field<string>("ITEM MODEL"),
                             invoice = b.Field<string>("INVOICE NO"),
                             invoicedt = b.Field<DateTime>("INVOICE DATE"),
                             dono = b.Field<string>("DO NO"),
                             dodt = b.Field<DateTime>("DO DATE"),
                             adminpc = b.Field<string>("PC ADMIN"),
                             adminloc = b.Field<string>("LOC ADMIN"),
                             chnlpc = b.Field<string>("PC CHANNEL"),
                             chnlloc = b.Field<string>("LOC CHANNEL"),
                             loc_cd = b.Field<string>("DO LOCATION CODE"),
                             loc_Desc = b.Field<string>("DO LOCATION DESCRIPTION")
                         } into g
                         select new
                         {
                             ADMIN_PC = g.Key.adminpc,
                             CHANNEL_PC = g.Key.chnlpc,
                             ADMIN_LOC = g.Key.adminloc,
                             CHANNEL_LOC = g.Key.chnlloc,
                             PC_CODE = g.Key.pccode,
                             PC_DESCRIPTION = g.Key.pcdesc,
                             LOC_CODE = g.Key.loc_cd,
                             LOC_DESCRIPTION = g.Key.loc_Desc,
                             EXEC_CODE = g.Key.execcode,
                             EXEC_NAME = g.Key.execname,
                             CUST_CODE = g.Key.customercode,
                             CUST_NAME = g.Key.customername,
                             INVOICE_NO = g.Key.invoice,
                             INVOICE_DATE = g.Key.invoicedt,
                             DO_NO = g.Key.dono,
                             DO_DATE = g.Key.dodt,
                             ITEM_CODE = g.Key.itemcode,
                             ITEM_DESCRIPTION = g.Key.itemdesc,
                             ITEM_MODEL = g.Key.model,
                             QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
                             TAX = g.Sum(x => x.Field<Decimal>("TAX AMOUNT")),
                             NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
                             COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
                             GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                             GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
                         };

                DataTable GP1 = LINQResultToDataTable(GP);
                _dtGP.Merge(GP1);
            }
            else
            {
                _dtGP.Merge(GLOB_DataTable);
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "GP Reconciliation Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, TitleData, _dtGP, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }


        public string GetItemwiseWarehouseMovement(DateTime _fromDate, DateTime _toDate, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _Cat4, string _Cat5, string _User, string _StockType, string _Com, int _direction, out string _err)
        {//Sanjeewa 2016-06-05
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();
            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_Com, _User);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ItemwiseWarehouseMove") == true) _salesDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.GetItemwiseWarehouseMovement(_fromDate, _toDate, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _User, _StockType, drow["tpl_pc"].ToString(), _Com, _direction);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Item Wise Warehouse Movements In Units"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        //Lakshan 2016/01/05
        public string GetSalesValuation(DateTime in_fdate, DateTime in_tdate, string in_clasif, string in_itemcode, string in_brand, string in_model,
            string in_itemcat1, string in_itemcat2, string in_itemcat3, string in_itemcat4, string in_itemcat5,
                string in_stktype, string in_com, string in_pc, string in_user, string _Group, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();
            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(in_com, in_user);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.Get_Sales_Valuation(in_fdate, in_tdate, in_clasif, in_itemcode, in_brand, in_model,
                    in_itemcat1, in_itemcat2, in_itemcat3, in_itemcat4, in_itemcat5, in_stktype, in_com, in_pc, in_user);
                    DataRow row; row = _dtResults.NewRow(); row["DO VALUE"] = "12.25"; _dtResults.Rows.Add(row);
                    GLOB_DataTable.Merge(_dtResults);
                    // in_ISlast = in_ISlast + 1;
                }
            }
            DataTable TitleData = new DataTable();
            DataRow dataRow = TitleData.NewRow();
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "Title"; TitleData.Columns.Add(dataCol);
            dataRow["Title"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["Title"] = "Item Wise GP Report"; TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(in_com, in_user, TitleData, GLOB_DataTable, out _err);
            //if (GLOB_DataTable.Rows.Count == 0)
            //{
            //    _err = "No Records Found.";
            //}

            return _filePath;
        }

        //Tharaka 2016-01-28
        public List<MST_SCV_ADHOC_MAIL> GET_SCV_ADHOC_MAIL()
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_SCV_ADHOC_MAIL();
        }

        //Tharaka 2016-01-28
        public List<Service_Pending_Jobs> GET_ALL_PENDINGJOS_FOR_CHL(string com, string chl)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_ALL_PENDINGJOS_FOR_CHL(com, chl);
        }

        //Tharaka 2016-01-29
        public int SendEMail_HTML(string _recipientEmailAddress, string _subject, string _message, string attachment, out String err, string bcc)
        {
            int result = 0;
            err = string.Empty;

            try
            {
                if (!string.IsNullOrEmpty(_message))
                {
                    _commonSearchDAL = new CommonSearchDAL();
                    SmtpClient smtpClient = new SmtpClient();
                    MailMessage message = new MailMessage();
                    MailAddress _senderEmailAddress = new MailAddress(_commonSearchDAL.GetMailAddress(), _commonSearchDAL.GetMailDispalyName());
                    smtpClient.Host = _commonSearchDAL.GetMailHost();
                    smtpClient.Port = 25;
                    message.From = _senderEmailAddress;
                    message.To.Add(_recipientEmailAddress);
                    if (!string.IsNullOrEmpty(bcc))
                    {
                        message.Bcc.Add(bcc);
                    }
                    message.Subject = _subject;
                    message.IsBodyHtml = true;
                    message.Body = _message;
                    if (!string.IsNullOrEmpty(attachment))
                    {
                        message.Attachments.Add(new Attachment(attachment));
                    }
                    message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                    smtpClient.Send(message);
                    result = 1;

                    if (Directory.Exists(@"C:\Message Agent Log"))
                    {
                        using (FileStream fs = new FileStream(@"C:\Message Agent Log\log.txt", FileMode.Append, FileAccess.Write))
                        using (StreamWriter sw = new StreamWriter(fs))
                        {
                            sw.WriteLine("Done@" + DateTime.Now.ToString() + " :" + _recipientEmailAddress);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                result = -1;
                err = ex.Message;

                if (Directory.Exists(@"C:\Message Agent Log"))
                {
                    using (FileStream fs = new FileStream(@"C:\Message Agent Log\log.txt", FileMode.Append, FileAccess.Write))
                    using (StreamWriter sw = new StreamWriter(fs))
                    {
                        sw.WriteLine("Reject@" + DateTime.Now.ToString() + " :" + _recipientEmailAddress + "            Err :" + ex.Message);
                    }
                }
            }

            return result;
        }

        public string GetDetailsOfCollectionDetails(string _Jobno, Int16 _Export, string _Com, string _User, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_Com, _User);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _securityDAL = new SecurityDAL();
                    if (_securityDAL.Is_Report_DR("AuditRep1") == true) _salesDAL.ConnectionOpen_DR();
                    _dtResults = _salesDAL.GetDetailsOfCollectionDetails(_Jobno, _Export);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        //SUBODANA
        public DataTable getItemSerials(string doc)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getItemSerials(doc);
        }
        public DataTable getpurchaseOrderPrint_HDR_new(string _com, string _doc)
        {
            _inventoryDAL = new InventoryDAL();
            //DataTable _dt = new DataTable();

            return _inventoryDAL.getpurchaseOrderPrint_HDR_new(_com, _doc);
        }

        //Randima 2016-07-06
        public DataTable GetLocationSearch(string _compCode, string _searchCatergory, string _searchText)
        {
            _generalDAL = new GeneralDAL();
            return _generalDAL.GetLocationSearch(_compCode, _searchCatergory, _searchText);
        }

        //Randima 2016-07-06
        public DataTable GetCompanySearch(string _searchCatergory, string _searchText)
        {
            _generalDAL = new GeneralDAL();
            return _generalDAL.GetCompanySearch(_searchCatergory, _searchText);
        }

        public DataTable GetDeliverCustomer(string _invNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDeliverCustomer(_invNo);
        }

        //Randima 2016-07-07
        public Int32 UpdateLocationIP(MasterLocation _loc)
        {
            Int32 _effect = 0;
            string err = "Update was not successful";
            try
            {
                _generalDAL = new GeneralDAL();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();

                _effect = _generalDAL.UpdateLocationIP(_loc);
                _generalDAL.TransactionCommit();
                return _effect;
            }
            catch (Exception ex)
            {
                _effect = -1;
                err = ex.Message;
                _generalDAL.TransactionRollback();
                return _effect;
            }
            finally
            {
                _generalDAL.ConnectionClose();
            }
        }

        public DataTable GetEntryReportDetails(DateTime _fromDate, DateTime _toDate, string _entryType, string _cusdecNo)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CusDecEntryDetails") == true) _financialDAL.ConnectionOpen_DR();
            return _financialDAL.GetEntryReportDetails(_fromDate, _toDate, _entryType, _cusdecNo);
        }

        public DataTable DispatchReqSummaryReport(DateTime _fromdate, DateTime _todate, string in_Company, string _loc, string _other_loc, string in_user_id, string _route_det, string status, DateTime frm, DateTime to, int printMark, int ExDteWise)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("Dispatch_Req_Report") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.DispatchReqSummaryReport(_fromdate, _todate, in_Company, _loc, _other_loc, in_user_id, _route_det, status, frm, to, printMark, ExDteWise);
        }

        public DataTable DispatchRequestDtlReport(DateTime _fromdate, DateTime _todate, string in_Company, string _loc, string _other_loc, string in_user_id, string _route_det, string status, DateTime frm, DateTime to, int printMark, int ExDteWise, out string rep_status)
        {

            try
            {
                rep_status = string.Empty;
                DataTable res = new DataTable();
                _inventoryDAL = new InventoryDAL();
                _securityDAL = new SecurityDAL();
                if (_securityDAL.Is_Report_DR("Dispatch_Req_Detail_Report") == true) _inventoryDAL.ConnectionOpen_DR();
                res = _inventoryDAL.DispatchRequestDtlReport(_fromdate, _todate, in_Company, _loc, _other_loc, in_user_id, _route_det, status, frm, to, printMark, ExDteWise);

                return res;
            }

            catch (Exception e)
            {
                rep_status = e.ToString();
                throw e;
            }
        }

        public DataTable ItemDispatchDtlReport(DateTime _fromdate, DateTime _todate, string in_user_id)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("Item_Dispatch_Detail_Report") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.ItemDispatchDtlReport(_fromdate, _todate, in_user_id);
        }

        public DataTable GetShippingDetailReport(string in_Company, string in_doc_no)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("Shipping_Invoice_Report") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetShippingDetailReport(in_Company, in_doc_no);

        }

        public DataTable GetCostDetailsShipInvReport(string in_doc_no)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("Shipping_Invoice_Report") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetCostDetailsShipInvReport(in_doc_no);
        }
        //kapila
        public string GetSchemeDefinitionDetails(string _Com, string _User, string _Circ, out string _err)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();
            if (_securityDAL.Is_Report_DR("SchmeDefDet") == true) _financialDAL.ConnectionOpen_DR();

            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults = new DataTable();
            DataTable _dtValuation = new DataTable();

            //  DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Scheme Definition Details Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Circular Reference :"; dataRow["c2"] = _Circ;
            // dataRow["c4"] = "Date To :"; dataRow["c5"] = _totDate.ToString("dd/MMM/yyyy");

            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";

            List<DataTable> _dtList = new List<DataTable>();
            _dtResults = _financialDAL.GetSchDet(_Circ);    //scheme parameters
            _dtList.Add(_dtResults);

            _dtResults = new DataTable();
            _dtResults = _financialDAL.GetSchComm(_Circ);   //scheme commissions
            _dtList.Add(_dtResults);

            _dtResults = new DataTable();
            _dtResults = _financialDAL.GetSchSerChg(_Circ);   //service charge
            _dtList.Add(_dtResults);

            _dtResults = new DataTable();
            _dtResults = _financialDAL.GetSchAddPara(_Circ);   //add parameter
            _dtList.Add(_dtResults);

            _dtResults = new DataTable();
            _dtResults = _financialDAL.GetSchOthChg(_Circ);   //scheme charges
            _dtList.Add(_dtResults);

            _dtResults = new DataTable();
            _dtResults = _financialDAL.GetSchShed(_Circ);   //user define schedule
            _dtList.Add(_dtResults);

            _dtResults = new DataTable();
            _dtResults = _financialDAL.GetSchGuaParm(_Circ);   //guaranter parameter
            _dtList.Add(_dtResults);

            _dtResults = new DataTable();
            _dtResults = _financialDAL.GetSchCCDefn(_Circ);   //cash conversion def
            _dtList.Add(_dtResults);

            _dtResults = new DataTable();
            _dtResults = _financialDAL.GetSchEcdDefn(_Circ);   //ecd definition
            _dtList.Add(_dtResults);

            _dtResults = new DataTable();
            _dtResults = _financialDAL.GetSchInsu(_Circ);   //hp security
            _dtList.Add(_dtResults);

            _dtResults = new DataTable();
            _dtResults = _financialDAL.GetSchPrd(_Circ);   //proof document
            _dtList.Add(_dtResults);


            _filePath = ExportExcel2007_multisheet(_Com, _User, TitleData, _dtList, _dtResults, out _err);

            if (_dtResults.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;


        }
        public string GetSaleDetailsInvoiceMain(DateTime _fromtDate, DateTime _totDate, string _Com, string _User, out string _err)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();
            if (_securityDAL.Is_Report_DR("ValuationDetail") == true) _financialDAL.ConnectionOpen_DR();

            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults = new DataTable();
            DataTable _dtValuation = new DataTable();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);

            _dtResults = _financialDAL.GetSaleDetailsInvoiceMain(_fromtDate, _totDate, _Com, _User);




            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Sales Details Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromtDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _totDate.ToString("dd/MMM/yyyy");

            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";


            _filePath = ExportExcel2007(_Com, _User, TitleData, _dtResults, out _err);

            if (_dtResults.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;


        }

        //Lakshika
        public List<DataTable> GetItemWiseGpExcel2(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _Cat4, string _Cat5, string _User, string _RepType, string _StockType, string _InvNo, string _Com, string _Promotor, int _freeissue, string _itemclasif, string _brndmgr, string _Group, string AdminTMList, string delAdminTMList)
        {


            DataTable _dtResults = new DataTable();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();
            GLOB_DataTable.TableName = "tblGlbGP";
            DataTable _dtGP = new DataTable();

            List<DataTable> dsList = new List<DataTable>();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_Com, _User);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("Get_Gp_Data_Reconcilation") == true)
                _salesDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {

                    GLOB_DataTable = _salesDAL.Get_Gp_Data_Reconcilation(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _User, _RepType, _StockType, _InvNo, drow["tpl_pc"].ToString(), _Com, _Promotor, _freeissue, _itemclasif, _brndmgr, AdminTMList, delAdminTMList);
                    // GLOB_DataTable.Merge(_dtResults);
                    if (GLOB_DataTable.Rows.Count > 0)
                        dsList.Add(GLOB_DataTable);
                }
            }

            return dsList;

            //if (_Group == "LOC")
            //{
            //    var GP = from b in GLOB_DataTable.AsEnumerable()
            //             group b by new { pccode = b.Field<string>("PROFITCENTER CODE"), pcdesc = b.Field<string>("PROFITCENTER DESCRIPTION") } into g
            //             select new
            //             {
            //                 PC_CODE = g.Key.pccode,
            //                 PC_DESCRIPTION = g.Key.pcdesc,
            //                 QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
            //                 NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
            //                 COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
            //                 GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
            //                 GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
            //             };

            //    DataTable GP1 = LINQResultToDataTable(GP);
            //    _dtGP.Merge(GP1);
            //}
            //else if (_Group == "ITM")
            //{
            //    var GP = from b in GLOB_DataTable.AsEnumerable()
            //             group b by new { itemcode = b.Field<string>("ITEM CODE"), itemdesc = b.Field<string>("ITEM DESCRIPTION"), model = b.Field<string>("ITEM MODEL") } into g
            //             select new
            //             {
            //                 ITEM_CODE = g.Key.itemcode,
            //                 ITEM_DESCRIPTION = g.Key.itemdesc,
            //                 ITEM_MODEL = g.Key.model,
            //                 QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
            //                 NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
            //                 COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
            //                 GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
            //                 GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
            //             };

            //    DataTable GP1 = LINQResultToDataTable(GP);
            //    _dtGP.Merge(GP1);
            //}
            //else if (_Group == "CAT1")
            //{
            //    var GP = from b in GLOB_DataTable.AsEnumerable()
            //             group b by new { cat1 = b.Field<string>("ITEM CAT 1"), cat1desc = b.Field<string>("ITEM CAT 1 DESCRIPTION") } into g
            //             select new
            //             {
            //                 PC_CODE = g.Key.cat1,
            //                 PC_DESCRIPTION = g.Key.cat1desc,
            //                 QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
            //                 NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
            //                 COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
            //                 GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
            //                 GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
            //             };

            //    DataTable GP1 = LINQResultToDataTable(GP);
            //    _dtGP.Merge(GP1);
            //}
            //else if (_Group == "EXEC")
            //{
            //    var GP = from b in GLOB_DataTable.AsEnumerable()
            //             group b by new { pccode = b.Field<string>("PROFITCENTER CODE"), pcdesc = b.Field<string>("PROFITCENTER DESCRIPTION"), execcode = b.Field<string>("EXECUTIVE CODE"), execname = b.Field<string>("EXECUTIVE NAME") } into g
            //             select new
            //             {
            //                 PC_CODE = g.Key.pccode,
            //                 PC_DESCRIPTION = g.Key.pcdesc,
            //                 EXEC_CODE = g.Key.execcode,
            //                 EXEC_NAME = g.Key.execname,
            //                 QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
            //                 NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
            //                 COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
            //                 GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
            //                 GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
            //             };

            //    DataTable GP1 = LINQResultToDataTable(GP);
            //    _dtGP.Merge(GP1);
            //}
            //else if (_Group == "DOC")
            //{
            //    var GP = from b in GLOB_DataTable.AsEnumerable()
            //             group b by new { itemcode = b.Field<string>("ITEM CODE"), itemdesc = b.Field<string>("ITEM DESCRIPTION"), model = b.Field<string>("ITEM MODEL"), invoice = b.Field<string>("INVOICE NO") } into g
            //             select new
            //             {
            //                 ITEM_CODE = g.Key.itemcode,
            //                 ITEM_DESCRIPTION = g.Key.itemdesc,
            //                 ITEM_MODEL = g.Key.model,
            //                 INVOICE_NO = g.Key.invoice,
            //                 QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
            //                 NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
            //                 COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
            //                 GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
            //                 GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
            //             };

            //    DataTable GP1 = LINQResultToDataTable(GP);
            //    _dtGP.Merge(GP1);
            //}
            //else
            //{
            //    _dtGP.Merge(GLOB_DataTable);
            //}




        }

        public string GetGP_ReconciExcelReport(DataTable _dtResults, string _com, string ope_cd, string user, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();
            DataTable _dtGP = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, ope_cd);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("GPReport") == true) _salesDAL.ConnectionOpen_DR();


            /*           var results = from rowData in _dtResults.AsEnumerable()
                                     where rowData.Field<string>("PROFITCENTER CODE") == "RAMP" &&
                                     rowData.Field<string>("COMPANY CODE") == "ABL"
                                     select rowData;

                       DataTable GPDetails = new DataTable();
                       GPDetails.Columns.Add(new DataColumn() { DataType = System.Type.GetType("System.String"), ColumnName = "PROFITCENTER CODE" });
                       GPDetails.Columns.Add(new DataColumn() { DataType = System.Type.GetType("System.String"), ColumnName = "PROFITCENTER DESCRIPTION" });
                       GPDetails.Columns.Add(new DataColumn() { DataType = System.Type.GetType("System.String"), ColumnName = "INVOICE NO" });
                       GPDetails.Columns.Add(new DataColumn() { DataType = System.Type.GetType("System.String"), ColumnName = "INVOICE DATE" });
                       GPDetails.Columns.Add(new DataColumn() { DataType = System.Type.GetType("System.String"), ColumnName = "DO NO" });
                       GPDetails.Columns.Add(new DataColumn() { DataType = System.Type.GetType("System.String"), ColumnName = "DO DATE" });
                       GPDetails.Columns.Add(new DataColumn() { DataType = System.Type.GetType("System.String"), ColumnName = "ITEM CODE" });
                       GPDetails.Columns.Add(new DataColumn() { DataType = System.Type.GetType("System.String"), ColumnName = "NET AMOUNT" });
                       GPDetails.Columns.Add(new DataColumn() { DataType = System.Type.GetType("System.String"), ColumnName = "COST AMOUNT" });
                       foreach (var element in results)
                       {
                           var row = GPDetails.NewRow();
                           row["PROFITCENTER CODE"] = element.ItemArray[4].ToString();
                           row["PROFITCENTER DESCRIPTION"] = element.ItemArray[5].ToString();
                           row["INVOICE NO"] = element.ItemArray[10].ToString();
                           row["INVOICE DATE"] = element.ItemArray[11].ToString();
                           row["DO NO"] = element.ItemArray[12].ToString();
                           row["DO DATE"] = element.ItemArray[13].ToString();
                           row["ITEM CODE"] = element.ItemArray[34].ToString();
                           row["NET AMOUNT"] = element.ItemArray[45].ToString();
                           row["COST AMOUNT"] = element.ItemArray[41].ToString();

                           GPDetails.Rows.Add(row);
                       }

           */
            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "GP Reconcilation Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();

            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, user, TitleData, _dtResults, out _err);
            if (_dtResults.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public string GetStockAdjustmentSummary(DateTime _fromtDate, DateTime _totDate, string _Com, string _adminTeam, string _User, out string _err)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();
            if (_securityDAL.Is_Report_DR("ValuationDetail") == true) _financialDAL.ConnectionOpen_DR();

            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults = new DataTable();
            DataTable _dtTempResult = new DataTable();

            DataTable _dtColumnTotal = new DataTable();
            DataTable _dtRowTotal = new DataTable();

            // DataTable _dtLocation = new DataTable();
            // _dtLocation = _reportDAL.GetTempUserPcRptDB(_Com, _User);

            DataTable _dtSubType = new DataTable();
            _dtSubType = _financialDAL.GetSubTypesForAdjSummary(_fromtDate, _totDate, _Com, _adminTeam, _User);

            foreach (DataRow rowSubType in _dtSubType.Rows)
            {

                _dtTempResult = _financialDAL.GetStockAdjustmentSummary(_fromtDate, _totDate, _Com, _adminTeam, rowSubType["ith_sub_tp"].ToString(), _User);

                if (!_dtResults.Columns.Contains("ITH_LOC"))
                    _dtResults.Columns.Add("ITH_LOC", typeof(System.String));
                _dtResults.Columns.Add(rowSubType.ItemArray[0].ToString() + "-Adj", typeof(System.String));
                _dtResults.Columns.Add(rowSubType.ItemArray[0].ToString() + "+Adj", typeof(System.String));
                _dtResults.Columns.Add(rowSubType.ItemArray[0].ToString() + "Total", typeof(System.String));


                //For Column Total
                _dtColumnTotal.Columns.Add(rowSubType.ItemArray[0].ToString() + "-Adj", typeof(System.String));
                _dtColumnTotal.Columns.Add(rowSubType.ItemArray[0].ToString() + "+Adj", typeof(System.String));
                _dtColumnTotal.Columns.Add(rowSubType.ItemArray[0].ToString() + "Total", typeof(System.String));

                //Setting Defult Value
                _dtResults.Columns[rowSubType.ItemArray[0].ToString() + "-Adj"].DefaultValue = "0";
                _dtResults.Columns[rowSubType.ItemArray[0].ToString() + "+Adj"].DefaultValue = "0";
                _dtResults.Columns[rowSubType.ItemArray[0].ToString() + "Total"].DefaultValue = "0";

                int i = 0;
                bool existingLoc = false;
                foreach (DataRow loc in _dtTempResult.Rows)
                {
                    string loc_code_ = _dtTempResult.Rows[i]["ITH_LOC"].ToString();
                    foreach (DataRow resultRow in _dtResults.Rows)
                    {
                        if (loc_code_.Trim() == resultRow["ITH_LOC"].ToString().Trim())
                        {
                            existingLoc = true;
                            break;
                        }
                    }

                    if (!existingLoc)
                    {
                        var row = _dtResults.NewRow();
                        row["ITH_LOC"] = _dtTempResult.Rows[i]["ITH_LOC"].ToString();
                        row[rowSubType.ItemArray[0].ToString() + "-Adj"] = (_dtTempResult.Rows[i]["M_ADJ"].ToString() == "" || _dtTempResult.Rows[i]["M_ADJ"].ToString() == "0") ? "0" : "-" + _dtTempResult.Rows[i]["M_ADJ"].ToString();
                        row[rowSubType.ItemArray[0].ToString() + "+Adj"] = _dtTempResult.Rows[i]["P_ADJ"].ToString();
                        row[rowSubType.ItemArray[0].ToString() + "Total"] = _dtTempResult.Rows[i]["Total"].ToString();
                        _dtResults.Rows.Add(row);
                    }
                    else
                    {
                        _dtResults.Rows[i][rowSubType.ItemArray[0].ToString() + "-Adj"] = (_dtTempResult.Rows[i]["M_ADJ"].ToString() == "" || _dtTempResult.Rows[i]["M_ADJ"].ToString() == "0") ? "0" : "-" + _dtTempResult.Rows[i]["M_ADJ"].ToString();
                        _dtResults.Rows[i][rowSubType.ItemArray[0].ToString() + "+Adj"] = _dtTempResult.Rows[i]["P_ADJ"].ToString();
                        _dtResults.Rows[i][rowSubType.ItemArray[0].ToString() + "Total"] = _dtTempResult.Rows[i]["Total"].ToString();
                        existingLoc = false;
                    }


                    i++;
                }

            }


            //DataTable columnTotal = new DataTable();
            //DataTable rowTotal = new DataTable();

            //Get Column Total
            foreach (DataColumn dc in _dtResults.Columns)
            {
                int j = 0;
                double sum = 0.00;

                foreach (DataRow dr in _dtResults.Rows)
                {

                    //sum += (int)dc;
                    string cellValue = dr[dc].ToString();
                    double num;
                    if (!string.IsNullOrEmpty(cellValue) && double.TryParse(cellValue, out num))
                    {
                        j++;
                        if (Convert.ToDouble(cellValue) > 0 || Convert.ToDouble(cellValue) < 0)
                        {
                            double tempVal = Convert.ToDouble(dr[dc].ToString());
                            sum = sum + tempVal;
                        }

                    }

                }

                if (_dtColumnTotal.Rows.Count <= 0)
                {
                    var row = _dtColumnTotal.NewRow();
                    _dtColumnTotal.Rows.Add(row);
                }
                else
                {
                    _dtColumnTotal.Rows[0][dc.ToString()] = sum.ToString();
                }

            }


            if (_dtResults.Rows.Count > 0)
            {
                _dtColumnTotal.Columns.Add("ITH_LOC");
                _dtColumnTotal.Rows[0]["ITH_LOC"] = "Total";
                _dtResults.Merge(_dtColumnTotal);
            }


            //Get Row Total
            foreach (DataRow dr in _dtResults.Rows)
            {
                int j = 0;
                double sum = 0.00;

                foreach (DataColumn dc in _dtResults.Columns)
                {

                    //sum += (int)dc;
                    string cellValue = dr[dc].ToString();
                    double num;
                    if (!string.IsNullOrEmpty(cellValue) && double.TryParse(cellValue, out num))
                    {
                        j++;
                        if (Convert.ToDouble(cellValue) > 0 || Convert.ToDouble(cellValue) < 0)
                        {
                            double tempVal = Convert.ToDouble(dr[dc].ToString());
                            sum = sum + tempVal;
                        }

                    }

                }

                if (_dtRowTotal.Rows.Count <= 0)
                {
                    _dtRowTotal.Columns.Add("ITH_LOC");
                    _dtRowTotal.Columns.Add("Total");
                    //_dtColumnTotal.Rows.Add(row);
                }

                var row = _dtRowTotal.NewRow();
                row["Total"] = sum;
                row["ITH_LOC"] = dr[0].ToString();
                _dtRowTotal.Rows.Add(row);
                // _dtRowTotal.Rows[dr]["Total"] = sum.ToString();

            }



            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);


            _dtResults.Columns.Add("Total");

            for (int i = 0; i < _dtResults.Rows.Count; i++)
            {
                if (_dtResults.Rows[i]["ITH_LOC"] == _dtRowTotal.Rows[i]["ITH_LOC"])
                {
                    _dtResults.Rows[i]["Total"] = _dtRowTotal.Rows[i]["Total"];
                }
            }

            // _dtResults = _financialDAL.GetStockAdjustmentSummary(_fromtDate, _totDate, _Com, _adminTeam, "", _User);




            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = _Com; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Stock Adjustment Summary Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromtDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _totDate.ToString("dd/MMM/yyyy");

            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";


            _filePath = ExportExcel2007(_Com, _User, TitleData, _dtResults, out _err);

            if (_dtResults.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;


        }


        public string GetGIT_ReconcilationByGIT_AsAt(DateTime _asat, string _com, string in_Itemcode, string in_Brand, string in_Model, string in_Itemcat1,
            string in_Itemcat2, string in_Itemcat3, string in_Itemcat4, string in_Itemcat5, string _user, string _othloc, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _inventoryDAL = new InventoryDAL();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserLocations(_com, _user);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("GITReport") == true) _inventoryDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _inventoryDAL.GetGIT_ReconcilationByGIT_AsAt(_asat, _com, drow["tpl_loc"].ToString(), _othloc, in_Itemcode, in_Brand, in_Model, in_Itemcat1, in_Itemcat2, in_Itemcat3, in_Itemcat4, in_Itemcat5, _user);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            double sum = 0.00;
            foreach (DataRow row in GLOB_DataTable.Rows)
            {
                string aa = row["JIT"].ToString();
                double tempVal = Convert.ToDouble(row["JIT"].ToString());
                sum = sum + tempVal;
            }

            if (GLOB_DataTable.Rows.Count > 0)
            {
                var row = GLOB_DataTable.NewRow();
                GLOB_DataTable.Rows.Add(row);
                int lastIndex = GLOB_DataTable.Rows.Count - 1;
                GLOB_DataTable.Rows[lastIndex][4] = sum.ToString();
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c3"] = _com; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c3"] = "GIT Reconciliation Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "As At :"; dataRow["c2"] = _asat.ToString("dd/MMM/yyyy");

            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }

        public string GetAOD_ReconcilationDetails(DateTime _fromDate, DateTime _toDate, string _com, string _loc, string _admin_tm, string _channel, string _user, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _inventoryDAL = new InventoryDAL();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserLocations(_com, _user);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("AODReconcilationReport") == true) _inventoryDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _inventoryDAL.GetAOD_ReconcilationDetails(_fromDate, _toDate, _com, drow["tpl_loc"].ToString(), _admin_tm, _channel, _user);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c3"] = _com; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c3"] = "AOD Reconciliation Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");

            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }

        //public string GetAOD_ReconcilationDetails(DateTime _fromDate, DateTime _toDate, string _com, string _loc, string _admin_tm, string _channel, string _user, out string _err)
        //{
        //    _err = string.Empty;
        //    string _filePath = string.Empty;

        //    DataTable _dtResults;
        //    _inventoryDAL = new InventoryDAL();
        //    _salesDAL = new SalesDAL();
        //    DataTable GLOB_DataTable = new DataTable();

        //    DataTable tmp_user_pc = _salesDAL.GetTempUserLocations(_com, _user);
        //    _securityDAL = new SecurityDAL();
        //    if (_securityDAL.Is_Report_DR("AODReconcilationReport") == true) _inventoryDAL.ConnectionOpen_DR();
        //    if (tmp_user_pc.Rows.Count > 0)
        //    {
        //        foreach (DataRow drow in tmp_user_pc.Rows)
        //        {
        //            _dtResults = _inventoryDAL.GetAOD_ReconcilationDetails(_fromDate, _toDate, _com, drow["tpl_loc"].ToString(), _admin_tm, _channel, _user);
        //            GLOB_DataTable.Merge(_dtResults);
        //        }
        //    }

        //    //Calculate Sum for AOD IN, OUT and NET
        //    double AOD_IN_sum = 0.00;
        //    double AOD_OUT_sum = 0.00;
        //    double NET_sum = 0.00;
        //    foreach (DataRow row in GLOB_DataTable.Rows)
        //    {
        //        AOD_IN_sum = AOD_IN_sum + Convert.ToDouble(row["AOD_IN"].ToString());
        //        AOD_OUT_sum = AOD_OUT_sum + Convert.ToDouble(row["AOD_OUT"].ToString());
        //        NET_sum = NET_sum + Convert.ToDouble(row["NET"].ToString());
        //    }

        //    //Setting Cells for Total Values
        //    if (GLOB_DataTable.Rows.Count > 0)
        //    {
        //        var row = GLOB_DataTable.NewRow();
        //        GLOB_DataTable.Rows.Add(row);
        //        int lastIndex = GLOB_DataTable.Rows.Count - 1;
        //        GLOB_DataTable.Rows[lastIndex]["AOD_IN"] = AOD_IN_sum.ToString();
        //        GLOB_DataTable.Rows[lastIndex]["AOD_OUT"] = AOD_OUT_sum.ToString();
        //        GLOB_DataTable.Rows[lastIndex]["NET"] = NET_sum.ToString();
        //    }

        //    DataTable TitleData = new DataTable();
        //    DataRow dataRow;
        //    DataColumn dataCol = new DataColumn();
        //    dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
        //    dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
        //    dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
        //    dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
        //    dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
        //    dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
        //    dataRow = TitleData.NewRow(); dataRow["c3"] = _com; TitleData.Rows.Add(dataRow);
        //    dataRow = TitleData.NewRow(); dataRow["c3"] = "AOD Reconciliation Report"; TitleData.Rows.Add(dataRow);
        //    dataRow = TitleData.NewRow();
        //    dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
        //    dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");

        //    TitleData.Rows.Add(dataRow);

        //    _err = "";
        //    _filePath = "";
        //    _filePath = ExportExcel2007(_com, _user, TitleData, GLOB_DataTable, out _err);
        //    if (GLOB_DataTable.Rows.Count == 0)
        //    {
        //        _err = "No Records Found.";
        //    }

        //    return _filePath;

        //}


        // RUKSHAN 2016-09-25
        public DataTable GET_SALESREVERSALDETAILS_REP(string com, DateTime _from, DateTime _to, string _sbu, string _pc, string _cus, string _itm,
            string _brand, string _model)
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("SRNDetail") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GET_SALESREVERSALDETAILS_REP(com, _from, _to, _sbu, _pc, _cus, _itm, _brand, _model);
        }

        public string GetSaleRepDetailsCatWise(DateTime _fromtDate, DateTime _totDate, string _Com, string _User, string groupCat, out string _err)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();
            if (_securityDAL.Is_Report_DR("SaleDetailRepCateWise") == true) _financialDAL.ConnectionOpen_DR();

            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults = new DataTable();
            DataTable _dtValuation = new DataTable();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);

            _dtResults = _financialDAL.GetSaleRepDetailsCatWise(_fromtDate, _totDate, _Com, _User, groupCat);


            double tot_sale_value = 0.00;
            double tot_discount = 0.00;
            double tot_net_val = 0.00;
            foreach (DataRow row in _dtResults.Rows)
            {
                tot_sale_value = tot_sale_value + Convert.ToDouble(row["SALE VALUE(Rs)"].ToString());
                tot_discount = tot_discount + Convert.ToDouble(row["DISCOUNT(Rs)"].ToString());
                tot_net_val = tot_net_val + Convert.ToDouble(row["NET VALUE(Rs)"].ToString());
                string aa = (Convert.ToDateTime(row["INVOICE DATE"])).ToShortDateString();
                row["INVOICE DATE"] = aa;
            }

            //Setting Cells for Total Values
            if (_dtResults.Rows.Count > 0)
            {
                var row = _dtResults.NewRow();
                _dtResults.Rows.Add(row);
                int lastIndex = _dtResults.Rows.Count - 1;
                _dtResults.Rows[lastIndex]["SALE VALUE(Rs)"] = tot_sale_value.ToString();
                _dtResults.Rows[lastIndex]["DISCOUNT(Rs)"] = tot_discount.ToString();
                _dtResults.Rows[lastIndex]["NET VALUE(Rs)"] = tot_net_val.ToString();
                _dtResults.Rows[lastIndex]["ITEM CODE"] = "SUB TOTAL";
            }


            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c8"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Sales Details Report - Category Wise"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromtDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _totDate.ToString("dd/MMM/yyyy");
            dataRow["c7"] = "User : "; dataRow["c8"] = _User + " , Printed on " + System.DateTime.Now;

            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";


            _filePath = ExportExcel2007(_Com, _User, TitleData, _dtResults, out _err);

            if (_dtResults.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;


        }

        public string GetAgeOfRevertReportDetails(DateTime _fromdate, DateTime _todate, string in_Company, string _brand, string _cat1, string _cat2, string _itemCode, string _user, out string _err)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();
            if (_securityDAL.Is_Report_DR("AgeOfRevertReport") == true) _financialDAL.ConnectionOpen_DR();

            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults = new DataTable();
            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_user);

            foreach (DataRow row in tmp_user_pc.Rows)
            {
                DataTable dtAgeRev = new DataTable();
                dtAgeRev = _financialDAL.GetAgeOfRevertReportDtls(_fromdate, _todate, in_Company, row["TPL_PC"].ToString(), _brand, _cat1, _cat2, _itemCode, _user);
                _dtResults.Merge(dtAgeRev);
            }

            _dtResults.Columns.Add("0 - 90", typeof(System.Int32));
            _dtResults.Columns.Add("> 90", typeof(System.Int32));

            foreach (DataRow row in _dtResults.Rows)
            {
                int noOfDays = (int)(_todate - Convert.ToDateTime(row["REVERT DATE"].ToString()).Date).TotalDays;
                if (noOfDays <= 90)
                {
                    row["0 - 90"] = noOfDays;
                }
                else
                {
                    row["> 90"] = noOfDays;
                }

            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = in_Company; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Age of Revert Details"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromdate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _todate.ToString("dd/MMM/yyyy");

            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";

            _filePath = ExportExcel2007(in_Company, _user, TitleData, _dtResults, out _err);

            if (_dtResults.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }

        public string GetDeliveredSalesDetailsExcel1(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _User, string _RepType, string _StockType, string _InvNo, string _Com, string _Promotor, int _freeissue, string rep_type, int currencyType, int revOrSaleOrAll, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();
            _salesDAL = new SalesDAL();

            if (_securityDAL.Is_Report_DR("IntercompanySales") == true) _salesDAL.ConnectionOpen_DR();

            DataTable GLOB_DataTable = new DataTable();
            DataTable _dtGP = new DataTable();
            DataTable _dtGP_WV = new DataTable();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.GetDeliveredSalesDetails(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, drow["tpl_pc"].ToString(), _User, _RepType, _StockType, _InvNo, drow["tpl_pc"].ToString(), _Com, _Promotor, _freeissue, currencyType, revOrSaleOrAll, "", "");
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c8"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c4"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c4"] = "Total Sales Report - Month wise";
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            dataRow["c7"] = "User : "; dataRow["c8"] = _User + " , Printed on " + System.DateTime.Now;
            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public string GetTotalSaleswithInvType(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _PCenter, string _User, string _RepType, string _StockType, string _InvNo, string _Com, string _Promotor, int _freeissue, int currencyType, int revOrSaleOrAll, string _color, string _size, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();
            _salesDAL = new SalesDAL();

            if (_securityDAL.Is_Report_DR("IntercompanySales") == true) _salesDAL.ConnectionOpen_DR();

            DataTable GLOB_DataTable = new DataTable();
            DataTable _dtGP = new DataTable();
            DataTable _dtGP_WV = new DataTable();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.GetTotalSaleswithInvType(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, drow["tpl_pc"].ToString(), _User, _RepType, _StockType, _InvNo, drow["tpl_pc"].ToString(), _Com, _Promotor, _freeissue, currencyType, revOrSaleOrAll, _color, _size);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c8"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c4"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c4"] = "Total Sales Report - Month wise";
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            dataRow["c7"] = "User : "; dataRow["c8"] = _User + " , Printed on " + System.DateTime.Now;
            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public string GetDeliveredSalesDetailsExcel1_old(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _User, string _RepType, string _StockType, string _InvNo, string _Com, string _Promotor, int _freeissue, string rep_type, int currencyType, int revOrSaleOrAll, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();
            _salesDAL = new SalesDAL();

            if (_securityDAL.Is_Report_DR("IntercompanySales") == true) _salesDAL.ConnectionOpen_DR();

            DataTable GLOB_DataTable = new DataTable();
            DataTable _dtGP = new DataTable();
            DataTable _dtGP_WV = new DataTable();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.GetDeliveredSalesDetails(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, drow["tpl_pc"].ToString(), _User, _RepType, _StockType, _InvNo, drow["tpl_pc"].ToString(), _Com, _Promotor, _freeissue, currencyType, revOrSaleOrAll, "", "");
                    GLOB_DataTable.Merge(_dtResults);
                }
            }



            string reportType = "";
            if (rep_type == "ITEM")
            {

                var GP = from b in GLOB_DataTable.AsEnumerable()
                         // group b by new { pccode = b.Field<string>("ITEM_CODE"), pcdesc = b.Field<string>("ITEM_DESC") } into g
                         group b by new
                         {
                             item_cd = b.Field<string>("ITEM_CODE"),
                             item_desc = b.Field<string>("ITEM_DESC"),
                             brand = b.Field<string>("BRAND"),
                             model = b.Field<string>("MODEL"),

                             pc_code = b.Field<string>("PC_CODE"),
                             inv_type = b.Field<string>("INV_TYPE"),
                             ex_code = b.Field<string>("EX_CODE"),
                             ex_name = b.Field<string>("EX_NAME"),
                             cus_code = b.Field<string>("CUST_CODE"),
                             cus_name = b.Field<string>("CUST_NAME"),
                             inv_no = b.Field<string>("INV_NO"),
                             inv_date = b.Field<DateTime>("INV_DATE"),
                             cat1 = b.Field<string>("CAT1"),
                             cat2 = b.Field<string>("CAT2"),
                             currency = b.Field<string>("CURRENCY"),
                             ex_rate = b.Field<Decimal>("EX_RATE"),

                         } into g
                         select new
                         {
                             PC_CODE = g.Key.pc_code,
                             INV_TYPE = g.Key.inv_type,
                             EX_CODE = g.Key.ex_code,
                             EX_NAME = g.Key.ex_name,
                             CUST_CODE = g.Key.cus_code,
                             CUST_NAME = g.Key.cus_name,
                             INV_NO = g.Key.inv_no,
                             INV_DATE = g.Key.inv_date.ToShortDateString(),
                             CAT1 = g.Key.cat1,
                             CAT2 = g.Key.cat2,

                             ITEM_CODE = g.Key.item_cd,
                             ITEM_DESC = g.Key.item_desc,
                             MODEL = g.Key.model,
                             BRAND = g.Key.brand,
                             QTY = Convert.ToDecimal(Math.Round(g.Sum(x => x.Field<Decimal>("QTY")), 2).ToString("#,##0.00")),
                             EX_RATE = g.Key.ex_rate,
                             BASE_PRICE = Convert.ToDecimal(Math.Round(g.Sum(x => x.Field<Decimal>("GROSS_AMT")), 2).ToString("#,##0.00")),
                             DISC_AMT = Convert.ToDecimal(Math.Round(g.Sum(x => x.Field<Decimal>("DISC_AMT")), 2).ToString("#,##0.00")),
                             TAX_AMT = Convert.ToDecimal(Math.Round(g.Sum(x => x.Field<Decimal>("TAX_AMT")), 2).ToString("#,##0.00")),
                             NET_AMT = Convert.ToDecimal(Math.Round(g.Sum(x => x.Field<Decimal>("NET_AMT")), 2).ToString("#,##0.00")),
                             TOT_AMT = Convert.ToDecimal(Math.Round(g.Sum(x => x.Field<Decimal>("TOT_AMT")), 2).ToString("#,##0.00")),
                             CURRENCY = g.Key.currency
                         };

                DataTable GP1 = LINQResultToDataTable(GP);
                _dtGP.Merge(GP1);

                var sumQty = _dtGP.AsEnumerable().Sum(x => x.Field<Decimal>("QTY"));
                //var sumBasePrice = _dtGP.AsEnumerable().Sum(x => x.Field<Decimal>("BASE_PRICE"));
                var sumDiscAmt = Math.Round(_dtGP.AsEnumerable().Sum(x => x.Field<Decimal>("DISC_AMT")), 2);
                var sumTaxAmt = Math.Round(_dtGP.AsEnumerable().Sum(x => x.Field<Decimal>("NET_AMT")), 2);
                var sumNetAmt = Math.Round(_dtGP.AsEnumerable().Sum(x => x.Field<Decimal>("TOT_AMT")), 2);
                var sumTotAmt = Math.Round(_dtGP.AsEnumerable().Sum(x => x.Field<Decimal>("TAX_AMT")), 2);
                var sumBaseAmt = Math.Round(_dtGP.AsEnumerable().Sum(x => x.Field<Decimal>("BASE_PRICE")), 2);

                //Setting Cells for Total Values
                if (_dtGP.Rows.Count > 0)
                {
                    var row = _dtGP.NewRow();
                    _dtGP.Rows.Add(row);
                    int lastIndex = _dtGP.Rows.Count - 1;
                    _dtGP.Rows[lastIndex]["QTY"] = sumQty.ToString();
                    // _dtGP.Rows[lastIndex]["BASE_PRICE"] = sumBasePrice.ToString();
                    _dtGP.Rows[lastIndex]["DISC_AMT"] = sumDiscAmt.ToString("#,##0");
                    _dtGP.Rows[lastIndex]["NET_AMT"] = sumTaxAmt.ToString("#,##0");
                    _dtGP.Rows[lastIndex]["TOT_AMT"] = sumNetAmt.ToString("#,##0");
                    _dtGP.Rows[lastIndex]["TAX_AMT"] = sumTotAmt.ToString("#,##0");
                    _dtGP.Rows[lastIndex]["BASE_PRICE"] = sumBaseAmt.ToString("#,##0");

                    _dtGP.Rows[lastIndex]["ITEM_CODE"] = "GRAND TOTAL";
                }

                reportType = "Item Wise";

            }
            else if (rep_type == "INVOICE")
            {

                var GP = from b in GLOB_DataTable.AsEnumerable()
                         // group b by new { pccode = b.Field<string>("ITEM_CODE"), pcdesc = b.Field<string>("ITEM_DESC") } into g
                         group b by new
                         {
                             inv_no = b.Field<string>("INV_NO"),
                             inv_date = b.Field<DateTime>("INV_DATE"),
                             dealer = b.Field<string>("CUST_NAME"),
                             ex_code = b.Field<string>("EX_CODE"),
                             ex_name = b.Field<string>("EX_NAME"),
                             ex_rate = b.Field<Decimal>("EX_RATE"),

                         } into g
                         select new
                         {
                             INVOICE_DATE = g.Key.inv_date.ToShortDateString(),
                             INV_NO = g.Key.inv_no,
                             DEALER = g.Key.dealer,
                             EX_CODE = g.Key.ex_code,
                             EX_NAME = g.Key.ex_name,
                             QTY = Math.Round(g.Sum(x => x.Field<Decimal>("QTY")), 2),
                             EX_RATE = g.Key.ex_rate,
                             DISC_AMT = Math.Round(g.Sum(x => x.Field<Decimal>("DISC_AMT")), 2),
                             TAX_AMT = Math.Round(g.Sum(x => x.Field<Decimal>("TAX_AMT")), 2),
                             NET_AMT = Math.Round(g.Sum(x => x.Field<Decimal>("NET_AMT")), 2),
                             AMT_BEFORE_DISC = (Math.Round(g.Sum(x => x.Field<Decimal>("TOT_AMT")), 2) + Math.Round(g.Sum(x => x.Field<Decimal>("DISC_AMT")), 2)),
                             TOT_AMT = Math.Round(g.Sum(x => x.Field<Decimal>("TOT_AMT")), 2),
                             CURRENCY = g.Max(x => x.Field<string>("CURRENCY")),

                         };

                DataTable GP1 = LINQResultToDataTable(GP);
                _dtGP.Merge(GP1);

                var sumQty = Math.Round(_dtGP.AsEnumerable().Sum(x => x.Field<Decimal>("QTY")), 2);
                //var sumBasePrice = _dtGP.AsEnumerable().Sum(x => x.Field<Decimal>("GROSS_AMT"));
                var sumDiscAmt = Math.Round(_dtGP.AsEnumerable().Sum(x => x.Field<Decimal>("DISC_AMT")), 2);
                var sumTaxAmt = Math.Round(_dtGP.AsEnumerable().Sum(x => x.Field<Decimal>("NET_AMT")), 2);
                var sumNetAmt = Math.Round(_dtGP.AsEnumerable().Sum(x => x.Field<Decimal>("TOT_AMT")), 2);
                var sumTotAmt = Math.Round(_dtGP.AsEnumerable().Sum(x => x.Field<Decimal>("TAX_AMT")), 2);
                string CUR = _dtGP.AsEnumerable().Max(x => x.Field<string>("CURRENCY"));

                //Setting Cells for Total Values
                if (_dtGP.Rows.Count > 0)
                {
                    var row = _dtGP.NewRow();
                    _dtGP.Rows.Add(row);
                    int lastIndex = _dtGP.Rows.Count - 1;
                    _dtGP.Rows[lastIndex]["QTY"] = sumQty.ToString();
                    //_dtGP.Rows[lastIndex]["GROSS_AMT"] = sumBasePrice.ToString();
                    _dtGP.Rows[lastIndex]["DISC_AMT"] = sumDiscAmt.ToString();
                    _dtGP.Rows[lastIndex]["NET_AMT"] = sumTaxAmt.ToString();
                    _dtGP.Rows[lastIndex]["TOT_AMT"] = sumNetAmt.ToString();
                    _dtGP.Rows[lastIndex]["TAX_AMT"] = sumTotAmt.ToString();
                    _dtGP.Rows[lastIndex]["CURRENCY"] = CUR;
                    _dtGP.Rows[lastIndex]["DEALER"] = "GRAND TOTAL";
                }

                reportType = "Invoice Wise";
            }

            else if (rep_type == "MONTH")
            {
                var GP = from b in GLOB_DataTable.AsEnumerable()
                         // inv_no = b.Field<string>("INV_NO"), inv_date = b.Field<DateTime>("INV_DATE"),
                         group b by new { dealer_code = b.Field<string>("CUST_CODE"), dealer = b.Field<string>("CUST_NAME"), month = b.Field<DateTime>("INV_DATE").Month } into g
                         orderby g.Key.dealer
                         select new
                         {
                             //INVOICE_DATE = g.Key.inv_date,
                             // INV_NO = g.Key.inv_no,
                             DEALER_CODE = g.Key.dealer_code,
                             DEALER = g.Key.dealer,
                             MONTH = g.Key.month,
                             QTY = Math.Round(g.Sum(x => x.Field<Decimal>("QTY")), 2),
                             DISC_AMT = Math.Round(g.Sum(x => x.Field<Decimal>("DISC_AMT")), 2),
                             TAX_AMT = Math.Round(g.Sum(x => x.Field<Decimal>("TAX_AMT")), 2),
                             NET_AMT = Math.Round(g.Sum(x => x.Field<Decimal>("NET_AMT")), 2),
                             TOT_AMT = Math.Round(g.Sum(x => x.Field<Decimal>("TOT_AMT")), 2),


                         };

                DataTable dtJanuary = LINQResultToDataTable(GP.Where(j => j.MONTH == 1));
                DataTable dtFebruary = LINQResultToDataTable(GP.Where(j => j.MONTH == 2));
                DataTable dtMarch = LINQResultToDataTable(GP.Where(j => j.MONTH == 3));
                DataTable dtApril = LINQResultToDataTable(GP.Where(j => j.MONTH == 4));
                DataTable dtMay = LINQResultToDataTable(GP.Where(j => j.MONTH == 5));
                DataTable dtJune = LINQResultToDataTable(GP.Where(j => j.MONTH == 6));
                DataTable dtJuly = LINQResultToDataTable(GP.Where(j => j.MONTH == 7));
                DataTable dtAugust = LINQResultToDataTable(GP.Where(j => j.MONTH == 8));
                DataTable dtSeptember = LINQResultToDataTable(GP.Where(j => j.MONTH == 9));
                DataTable dtOctober = LINQResultToDataTable(GP.Where(j => j.MONTH == 10));
                DataTable dtNovember = LINQResultToDataTable(GP.Where(j => j.MONTH == 11));
                DataTable dtDecmber = LINQResultToDataTable(GP.Where(j => j.MONTH == 12));

                DataTable GP1 = LINQResultToDataTable(GP);
                _dtGP.Merge(GP1);

                DataTable dtMonthWise = new DataTable();
                List<string> monthList = new List<string>();
                dtMonthWise.Columns.Add("DEALER CODE");
                dtMonthWise.Columns.Add("DEALER NAME");
                //With VAT
                DataTable dtMonthWiseWV = new DataTable();
                List<string> monthListWV = new List<string>();
                dtMonthWiseWV.Columns.Add("DEALER CODE");
                dtMonthWiseWV.Columns.Add("DEALER NAME");

                int itemIndex = 0;
                bool existingItem = false;

                ////////////////////// JAN 
                foreach (DataRow row in dtJanuary.Rows)
                {

                    if (!dtMonthWise.Columns.Contains("JANUARY"))
                    {
                        dtMonthWise.Columns.Add("JANUARY");
                        dtMonthWise.Columns["JANUARY"].DefaultValue = 0;
                        monthList.Add("JANUARY");

                        //With VAT
                        dtMonthWiseWV.Columns.Add("JANUARY");
                        dtMonthWiseWV.Columns["JANUARY"].DefaultValue = 0;
                        monthListWV.Add("JANUARY");
                    }


                    itemIndex = 0;
                    foreach (DataRow fDrow in dtMonthWise.Rows)
                    {
                        if (row.ItemArray[0].ToString() == fDrow.ItemArray[0].ToString())
                        {
                            existingItem = true;
                            break;
                        }

                        itemIndex++;
                    }
                    // itemIndex++;

                    if (existingItem)
                    {
                        dtMonthWise.Rows[itemIndex]["JANUARY"] = row.ItemArray[6].ToString() == "" ? 0 : Convert.ToDecimal(row.ItemArray[6].ToString());
                        existingItem = false;
                        //With VAT
                        dtMonthWiseWV.Rows[itemIndex]["JANUARY"] = row.ItemArray[6].ToString() == "" ? 0 : Convert.ToDecimal(row.ItemArray[6].ToString());

                    }
                    else
                    {

                        var nRow = dtMonthWise.NewRow();
                        nRow["DEALER CODE"] = row["DEALER_CODE"].ToString();
                        nRow["DEALER NAME"] = row["DEALER"].ToString();
                        nRow["JANUARY"] = row["NET_AMT"].ToString();
                        dtMonthWise.Rows.Add(nRow);

                        //With VAT
                        var nRowWV = dtMonthWiseWV.NewRow();
                        nRowWV["DEALER CODE"] = row["DEALER_CODE"].ToString();
                        nRowWV["DEALER NAME"] = row["DEALER"].ToString();
                        nRowWV["JANUARY"] = row["TOT_AMT"].ToString();
                        dtMonthWiseWV.Rows.Add(nRowWV);
                    }

                }

                ////////////////////// FEB 
                foreach (DataRow row in dtFebruary.Rows)
                {

                    if (!dtMonthWise.Columns.Contains("FEBRUARY"))
                    {
                        dtMonthWise.Columns.Add("FEBRUARY");
                        dtMonthWise.Columns["FEBRUARY"].DefaultValue = 0;
                        monthList.Add("FEBRUARY");
                        //With VAT
                        dtMonthWiseWV.Columns.Add("FEBRUARY");
                        dtMonthWiseWV.Columns["FEBRUARY"].DefaultValue = 0;
                        monthListWV.Add("FEBRUARY");
                    }


                    itemIndex = 0;
                    foreach (DataRow fDrow in dtMonthWise.Rows)
                    {
                        if (row.ItemArray[0].ToString() == fDrow.ItemArray[0].ToString())
                        {
                            existingItem = true;
                            break;
                        }

                        itemIndex++;
                    }
                    // itemIndex++;

                    if (existingItem)
                    {
                        dtMonthWise.Rows[itemIndex]["FEBRUARY"] = row.ItemArray[6].ToString() == "" ? 0 : Convert.ToDecimal(row.ItemArray[6].ToString());
                        existingItem = false;

                        dtMonthWiseWV.Rows[itemIndex]["FEBRUARY"] = row.ItemArray[6].ToString() == "" ? 0 : Convert.ToDecimal(row.ItemArray[6].ToString());

                    }
                    else
                    {

                        var nRow = dtMonthWise.NewRow();
                        nRow["DEALER CODE"] = row["DEALER_CODE"].ToString();
                        nRow["DEALER NAME"] = row["DEALER"].ToString();
                        nRow["FEBRUARY"] = row["NET_AMT"].ToString();
                        dtMonthWise.Rows.Add(nRow);

                        //With VAT
                        var nRowWV = dtMonthWiseWV.NewRow();
                        nRowWV["DEALER CODE"] = row["DEALER_CODE"].ToString();
                        nRowWV["DEALER NAME"] = row["DEALER"].ToString();
                        nRowWV["FEBRUARY"] = row["TOT_AMT"].ToString();
                        dtMonthWiseWV.Rows.Add(nRowWV);
                    }

                }

                ////////////////////// MARCH 
                foreach (DataRow row in dtMarch.Rows)
                {

                    if (!dtMonthWise.Columns.Contains("MARCH"))
                    {
                        dtMonthWise.Columns.Add("MARCH");
                        dtMonthWise.Columns["MARCH"].DefaultValue = 0;
                        monthList.Add("MARCH");

                        //With VAT
                        dtMonthWiseWV.Columns.Add("MARCH");
                        dtMonthWiseWV.Columns["MARCH"].DefaultValue = 0;
                        monthListWV.Add("MARCH");
                    }


                    itemIndex = 0;
                    foreach (DataRow fDrow in dtMonthWise.Rows)
                    {
                        if (row.ItemArray[0].ToString() == fDrow.ItemArray[0].ToString())
                        {
                            existingItem = true;
                            break;
                        }

                        itemIndex++;
                    }
                    // itemIndex++;

                    if (existingItem)
                    {
                        dtMonthWise.Rows[itemIndex]["MARCH"] = row.ItemArray[6].ToString() == "" ? 0 : Convert.ToDecimal(row.ItemArray[6].ToString());
                        existingItem = false;
                        //With VAT
                        dtMonthWiseWV.Rows[itemIndex]["MARCH"] = row.ItemArray[6].ToString() == "" ? 0 : Convert.ToDecimal(row.ItemArray[6].ToString());

                    }
                    else
                    {

                        var nRow = dtMonthWise.NewRow();
                        nRow["DEALER CODE"] = row["DEALER_CODE"].ToString();
                        nRow["DEALER NAME"] = row["DEALER"].ToString();
                        nRow["MARCH"] = row["NET_AMT"].ToString();
                        dtMonthWise.Rows.Add(nRow);
                        //With VAT
                        var nRowWV = dtMonthWiseWV.NewRow();
                        nRowWV["DEALER CODE"] = row["DEALER_CODE"].ToString();
                        nRowWV["DEALER NAME"] = row["DEALER"].ToString();
                        nRowWV["MARCH"] = row["TOT_AMT"].ToString();
                        dtMonthWiseWV.Rows.Add(nRowWV);
                    }

                }

                ////////////////////// APRIL 
                foreach (DataRow row in dtApril.Rows)
                {

                    if (!dtMonthWise.Columns.Contains("APRIL"))
                    {
                        dtMonthWise.Columns.Add("APRIL");
                        dtMonthWise.Columns["APRIL"].DefaultValue = 0;
                        monthList.Add("APRIL");
                        //With VAT
                        dtMonthWiseWV.Columns.Add("APRIL");
                        dtMonthWiseWV.Columns["APRIL"].DefaultValue = 0;
                        monthListWV.Add("APRIL");
                    }


                    itemIndex = 0;
                    foreach (DataRow fDrow in dtMonthWise.Rows)
                    {
                        if (row.ItemArray[0].ToString() == fDrow.ItemArray[0].ToString())
                        {
                            existingItem = true;
                            break;
                        }

                        itemIndex++;
                    }
                    // itemIndex++;

                    if (existingItem)
                    {
                        dtMonthWise.Rows[itemIndex]["APRIL"] = row.ItemArray[6].ToString() == "" ? 0 : Convert.ToDecimal(row.ItemArray[6].ToString());
                        existingItem = false;

                        dtMonthWiseWV.Rows[itemIndex]["APRIL"] = row.ItemArray[6].ToString() == "" ? 0 : Convert.ToDecimal(row.ItemArray[6].ToString());

                    }
                    else
                    {

                        var nRow = dtMonthWise.NewRow();
                        nRow["DEALER CODE"] = row["DEALER_CODE"].ToString();
                        nRow["DEALER NAME"] = row["DEALER"].ToString();
                        nRow["APRIL"] = row["NET_AMT"].ToString();
                        dtMonthWise.Rows.Add(nRow);
                        //With VAT
                        var nRowWV = dtMonthWiseWV.NewRow();
                        nRowWV["DEALER CODE"] = row["DEALER_CODE"].ToString();
                        nRowWV["DEALER NAME"] = row["DEALER"].ToString();
                        nRowWV["APRIL"] = row["TOT_AMT"].ToString();
                        dtMonthWiseWV.Rows.Add(nRowWV);
                    }

                }

                ////////////////////// MAY 
                foreach (DataRow row in dtMay.Rows)
                {

                    if (!dtMonthWise.Columns.Contains("MAY"))
                    {
                        dtMonthWise.Columns.Add("MAY");
                        dtMonthWise.Columns["MAY"].DefaultValue = 0;
                        monthList.Add("MAY");
                        //With VAT
                        dtMonthWiseWV.Columns.Add("MAY");
                        dtMonthWiseWV.Columns["MAY"].DefaultValue = 0;
                        monthListWV.Add("MAY");

                    }


                    itemIndex = 0;
                    foreach (DataRow fDrow in dtMonthWise.Rows)
                    {
                        if (row.ItemArray[0].ToString() == fDrow.ItemArray[0].ToString())
                        {
                            existingItem = true;
                            break;
                        }

                        itemIndex++;
                    }
                    // itemIndex++;

                    if (existingItem)
                    {
                        dtMonthWise.Rows[itemIndex]["MAY"] = row.ItemArray[6].ToString() == "" ? 0 : Convert.ToDecimal(row.ItemArray[6].ToString());
                        existingItem = false;

                        dtMonthWiseWV.Rows[itemIndex]["MAY"] = row.ItemArray[6].ToString() == "" ? 0 : Convert.ToDecimal(row.ItemArray[6].ToString());

                    }
                    else
                    {

                        var nRow = dtMonthWise.NewRow();
                        nRow["DEALER CODE"] = row["DEALER_CODE"].ToString();
                        nRow["DEALER NAME"] = row["DEALER"].ToString();
                        nRow["MAY"] = row["NET_AMT"].ToString();
                        dtMonthWise.Rows.Add(nRow);

                        //With VAT
                        var nRowWV = dtMonthWiseWV.NewRow();
                        nRowWV["DEALER CODE"] = row["DEALER_CODE"].ToString();
                        nRowWV["DEALER NAME"] = row["DEALER"].ToString();
                        nRowWV["MAY"] = row["TOT_AMT"].ToString();
                        dtMonthWiseWV.Rows.Add(nRowWV);
                    }

                }

                ////////////////////// JUNE 
                foreach (DataRow row in dtJune.Rows)
                {

                    if (!dtMonthWise.Columns.Contains("JUNE"))
                    {
                        dtMonthWise.Columns.Add("JUNE");
                        dtMonthWise.Columns["JUNE"].DefaultValue = 0;
                        monthList.Add("JUNE");
                        //With VAT
                        dtMonthWiseWV.Columns.Add("JUNE");
                        dtMonthWiseWV.Columns["JUNE"].DefaultValue = 0;
                        monthListWV.Add("JUNE");
                    }


                    itemIndex = 0;
                    foreach (DataRow fDrow in dtMonthWise.Rows)
                    {
                        if (row.ItemArray[0].ToString() == fDrow.ItemArray[0].ToString())
                        {
                            existingItem = true;
                            break;
                        }

                        itemIndex++;
                    }
                    // itemIndex++;

                    if (existingItem)
                    {
                        dtMonthWise.Rows[itemIndex]["JUNE"] = row.ItemArray[6].ToString() == "" ? 0 : Convert.ToDecimal(row.ItemArray[6].ToString());
                        existingItem = false;
                        //With VAT
                        dtMonthWiseWV.Rows[itemIndex]["JUNE"] = row.ItemArray[6].ToString() == "" ? 0 : Convert.ToDecimal(row.ItemArray[6].ToString());

                    }
                    else
                    {

                        var nRow = dtMonthWise.NewRow();
                        nRow["DEALER CODE"] = row["DEALER_CODE"].ToString();
                        nRow["DEALER NAME"] = row["DEALER"].ToString();
                        nRow["JUNE"] = row["NET_AMT"].ToString();
                        dtMonthWise.Rows.Add(nRow);
                        //With VAT
                        var nRowWV = dtMonthWiseWV.NewRow();
                        nRowWV["DEALER CODE"] = row["DEALER_CODE"].ToString();
                        nRowWV["DEALER NAME"] = row["DEALER"].ToString();
                        nRowWV["JUNE"] = row["TOT_AMT"].ToString();
                        dtMonthWiseWV.Rows.Add(nRowWV);
                    }

                }

                ////////////////////// JULY 
                foreach (DataRow row in dtJuly.Rows)
                {

                    if (!dtMonthWise.Columns.Contains("JULY"))
                    {
                        dtMonthWise.Columns.Add("JULY");
                        dtMonthWise.Columns["JULY"].DefaultValue = 0;
                        monthList.Add("JULY");
                        //With VAT
                        dtMonthWiseWV.Columns.Add("JULY");
                        dtMonthWiseWV.Columns["JULY"].DefaultValue = 0;
                        monthListWV.Add("JULY");
                    }


                    itemIndex = 0;
                    foreach (DataRow fDrow in dtMonthWise.Rows)
                    {
                        if (row.ItemArray[0].ToString() == fDrow.ItemArray[0].ToString())
                        {
                            existingItem = true;
                            break;
                        }

                        itemIndex++;
                    }
                    // itemIndex++;

                    if (existingItem)
                    {
                        dtMonthWise.Rows[itemIndex]["JULY"] = row.ItemArray[6].ToString() == "" ? 0 : Convert.ToDecimal(row.ItemArray[6].ToString());
                        existingItem = false;

                        dtMonthWiseWV.Rows[itemIndex]["JULY"] = row.ItemArray[6].ToString() == "" ? 0 : Convert.ToDecimal(row.ItemArray[6].ToString());

                    }
                    else
                    {

                        var nRow = dtMonthWise.NewRow();
                        nRow["DEALER CODE"] = row["DEALER_CODE"].ToString();
                        nRow["DEALER NAME"] = row["DEALER"].ToString();
                        nRow["JULY"] = row["NET_AMT"].ToString();
                        dtMonthWise.Rows.Add(nRow);
                        //With VAT
                        var nRowWV = dtMonthWiseWV.NewRow();
                        nRowWV["DEALER CODE"] = row["DEALER_CODE"].ToString();
                        nRowWV["DEALER NAME"] = row["DEALER"].ToString();
                        nRowWV["JULY"] = row["TOT_AMT"].ToString();
                        dtMonthWiseWV.Rows.Add(nRowWV);
                    }

                }

                ////////////////////// AUGUST 
                foreach (DataRow row in dtAugust.Rows)
                {

                    if (!dtMonthWise.Columns.Contains("AUGUST"))
                    {
                        dtMonthWise.Columns.Add("AUGUST");
                        dtMonthWise.Columns["AUGUST"].DefaultValue = 0;
                        monthList.Add("AUGUST");
                        //With VAT
                        dtMonthWiseWV.Columns.Add("AUGUST");
                        dtMonthWiseWV.Columns["AUGUST"].DefaultValue = 0;
                        monthListWV.Add("AUGUST");
                    }


                    itemIndex = 0;
                    foreach (DataRow fDrow in dtMonthWise.Rows)
                    {
                        if (row.ItemArray[0].ToString() == fDrow.ItemArray[0].ToString())
                        {
                            existingItem = true;
                            break;
                        }

                        itemIndex++;
                    }
                    // itemIndex++;

                    if (existingItem)
                    {
                        dtMonthWise.Rows[itemIndex]["AUGUST"] = row.ItemArray[6].ToString() == "" ? 0 : Convert.ToDecimal(row.ItemArray[6].ToString());
                        existingItem = false;

                        dtMonthWiseWV.Rows[itemIndex]["AUGUST"] = row.ItemArray[6].ToString() == "" ? 0 : Convert.ToDecimal(row.ItemArray[6].ToString());

                    }
                    else
                    {

                        var nRow = dtMonthWise.NewRow();
                        nRow["DEALER CODE"] = row["DEALER_CODE"].ToString();
                        nRow["DEALER NAME"] = row["DEALER"].ToString();
                        nRow["AUGUST"] = row["NET_AMT"].ToString();
                        dtMonthWise.Rows.Add(nRow);

                        var nRowWV = dtMonthWiseWV.NewRow();
                        nRowWV["DEALER CODE"] = row["DEALER_CODE"].ToString();
                        nRowWV["DEALER NAME"] = row["DEALER"].ToString();
                        nRowWV["AUGUST"] = row["TOT_AMT"].ToString();
                        dtMonthWiseWV.Rows.Add(nRowWV);
                    }

                }



                ////////////////////// SEP 
                foreach (DataRow row in dtSeptember.Rows)
                {

                    if (!dtMonthWise.Columns.Contains("SEPTEMBER"))
                    {
                        dtMonthWise.Columns.Add("SEPTEMBER");
                        dtMonthWise.Columns["SEPTEMBER"].DefaultValue = 0;
                        monthList.Add("SEPTEMBER");

                        dtMonthWiseWV.Columns.Add("SEPTEMBER");
                        dtMonthWiseWV.Columns["SEPTEMBER"].DefaultValue = 0;
                        monthListWV.Add("SEPTEMBER");
                    }


                    itemIndex = 0;
                    foreach (DataRow fDrow in dtMonthWise.Rows)
                    {
                        if (row.ItemArray[0].ToString() == fDrow.ItemArray[0].ToString())
                        {
                            existingItem = true;
                            break;
                        }

                        itemIndex++;
                    }
                    // itemIndex++;

                    if (existingItem)
                    {
                        dtMonthWise.Rows[itemIndex]["SEPTEMBER"] = row.ItemArray[6].ToString() == "" ? 0 : Convert.ToDecimal(row.ItemArray[6].ToString());
                        existingItem = false;

                        dtMonthWiseWV.Rows[itemIndex]["SEPTEMBER"] = row.ItemArray[7].ToString() == "" ? 0 : Convert.ToDecimal(row.ItemArray[7].ToString());

                    }
                    else
                    {

                        var nRow = dtMonthWise.NewRow();
                        nRow["DEALER CODE"] = row["DEALER_CODE"].ToString();
                        nRow["DEALER NAME"] = row["DEALER"].ToString();
                        nRow["SEPTEMBER"] = row["NET_AMT"].ToString();
                        dtMonthWise.Rows.Add(nRow);
                        //With VAT
                        var nRowWV = dtMonthWiseWV.NewRow();
                        nRowWV["DEALER CODE"] = row["DEALER_CODE"].ToString();
                        nRowWV["DEALER NAME"] = row["DEALER"].ToString();
                        nRowWV["SEPTEMBER"] = row["TOT_AMT"].ToString();
                        dtMonthWiseWV.Rows.Add(nRowWV);
                    }

                }


                ////////////////////// OCT 
                foreach (DataRow row in dtOctober.Rows)
                {

                    if (!dtMonthWise.Columns.Contains("OCTOBER"))
                    {
                        dtMonthWise.Columns.Add("OCTOBER");
                        dtMonthWise.Columns["OCTOBER"].DefaultValue = 0;
                        monthList.Add("OCTOBER");
                        //With VAT
                        dtMonthWiseWV.Columns.Add("OCTOBER");
                        dtMonthWiseWV.Columns["OCTOBER"].DefaultValue = 0;
                        monthListWV.Add("OCTOBER");
                    }


                    itemIndex = 0;
                    foreach (DataRow fDrow in dtMonthWise.Rows)
                    {
                        if (row.ItemArray[0].ToString() == fDrow.ItemArray[0].ToString())
                        {
                            existingItem = true;
                            break;
                        }

                        itemIndex++;
                    }
                    // itemIndex++;

                    if (existingItem)
                    {
                        dtMonthWise.Rows[itemIndex]["OCTOBER"] = row.ItemArray[6].ToString() == "" ? 0 : Convert.ToDecimal(row.ItemArray[6].ToString());
                        existingItem = false;

                        dtMonthWiseWV.Rows[itemIndex]["OCTOBER"] = row.ItemArray[7].ToString() == "" ? 0 : Convert.ToDecimal(row.ItemArray[7].ToString());

                    }
                    else
                    {

                        var nRow = dtMonthWise.NewRow();
                        nRow["DEALER CODE"] = row["DEALER_CODE"].ToString();
                        nRow["DEALER NAME"] = row["DEALER"].ToString();
                        nRow["OCTOBER"] = row["NET_AMT"].ToString();
                        dtMonthWise.Rows.Add(nRow);

                        //With VAT
                        var nRowWV = dtMonthWiseWV.NewRow();
                        nRowWV["DEALER CODE"] = row["DEALER_CODE"].ToString();
                        nRowWV["DEALER NAME"] = row["DEALER"].ToString();
                        nRowWV["OCTOBER"] = row["TOT_AMT"].ToString();
                        dtMonthWiseWV.Rows.Add(nRowWV);
                    }

                }


                ////////////////////// NOVEMBER 
                foreach (DataRow row in dtNovember.Rows)
                {

                    if (!dtMonthWise.Columns.Contains("NOVEMBER"))
                    {
                        dtMonthWise.Columns.Add("NOVEMBER");
                        dtMonthWise.Columns["NOVEMBER"].DefaultValue = 0;
                        monthList.Add("NOVEMBER");

                        //With VAT
                        dtMonthWiseWV.Columns.Add("NOVEMBER");
                        dtMonthWiseWV.Columns["NOVEMBER"].DefaultValue = 0;
                        monthListWV.Add("NOVEMBER");
                    }


                    itemIndex = 0;
                    foreach (DataRow fDrow in dtMonthWise.Rows)
                    {
                        if (row.ItemArray[0].ToString() == fDrow.ItemArray[0].ToString())
                        {
                            existingItem = true;
                            break;
                        }

                        itemIndex++;
                    }
                    // itemIndex++;

                    if (existingItem)
                    {
                        dtMonthWise.Rows[itemIndex]["NOVEMBER"] = row.ItemArray[6].ToString() == "" ? 0 : Convert.ToDecimal(row.ItemArray[6].ToString());
                        existingItem = false;

                        dtMonthWiseWV.Rows[itemIndex]["NOVEMBER"] = row.ItemArray[6].ToString() == "" ? 0 : Convert.ToDecimal(row.ItemArray[6].ToString());

                    }
                    else
                    {

                        var nRow = dtMonthWise.NewRow();
                        nRow["DEALER CODE"] = row["DEALER_CODE"].ToString();
                        nRow["DEALER NAME"] = row["DEALER"].ToString();
                        nRow["NOVEMBER"] = row["NET_AMT"].ToString();
                        dtMonthWise.Rows.Add(nRow);
                        //With VAT
                        var nRowWV = dtMonthWiseWV.NewRow();
                        nRowWV["DEALER CODE"] = row["DEALER_CODE"].ToString();
                        nRowWV["DEALER NAME"] = row["DEALER"].ToString();
                        nRowWV["NOVEMBER"] = row["TOT_AMT"].ToString();
                        dtMonthWiseWV.Rows.Add(nRowWV);
                    }

                }

                ////////////////////// DECEMBER 
                foreach (DataRow row in dtDecmber.Rows)
                {

                    if (!dtMonthWise.Columns.Contains("DECEMBER"))
                    {
                        dtMonthWise.Columns.Add("DECEMBER");
                        dtMonthWise.Columns["DECEMBER"].DefaultValue = 0;
                        monthList.Add("DECEMBER");
                        //With VAT
                        dtMonthWiseWV.Columns.Add("DECEMBER");
                        dtMonthWiseWV.Columns["DECEMBER"].DefaultValue = 0;
                        monthListWV.Add("DECEMBER");
                    }


                    itemIndex = 0;
                    foreach (DataRow fDrow in dtMonthWise.Rows)
                    {
                        if (row.ItemArray[0].ToString() == fDrow.ItemArray[0].ToString())
                        {
                            existingItem = true;
                            break;
                        }

                        itemIndex++;
                    }
                    // itemIndex++;

                    if (existingItem)
                    {
                        dtMonthWise.Rows[itemIndex]["DECEMBER"] = row.ItemArray[6].ToString() == "" ? 0 : Convert.ToDecimal(row.ItemArray[6].ToString());
                        existingItem = false;

                        dtMonthWiseWV.Rows[itemIndex]["DECEMBER"] = row.ItemArray[6].ToString() == "" ? 0 : Convert.ToDecimal(row.ItemArray[6].ToString());

                    }
                    else
                    {

                        var nRow = dtMonthWise.NewRow();
                        nRow["DEALER CODE"] = row["DEALER_CODE"].ToString();
                        nRow["DEALER NAME"] = row["DEALER"].ToString();
                        nRow["DECEMBER"] = row["NET_AMT"].ToString();
                        dtMonthWise.Rows.Add(nRow);

                        var nRowWV = dtMonthWiseWV.NewRow();
                        nRowWV["DEALER CODE"] = row["DEALER_CODE"].ToString();
                        nRowWV["DEALER NAME"] = row["DEALER"].ToString();
                        nRowWV["DECEMBER"] = row["TOT_AMT"].ToString();
                        dtMonthWiseWV.Rows.Add(nRowWV);
                    }

                }

                dtMonthWise.Columns.Add("TOTAL WITHOUT VAT");
                dtMonthWise.Columns.Add("TOTAL WITH VAT");//new

                _dtGP = dtMonthWise;
                _dtGP_WV = dtMonthWiseWV;


                foreach (DataRow row in _dtGP.Rows)
                {
                    double totalWithOutVat = 0;
                    double totalWithVat = 0;//new
                    foreach (var months in monthList)
                    {
                        totalWithOutVat = totalWithOutVat + Convert.ToDouble(row[months].ToString() == "" ? "0" : row[months].ToString());

                        totalWithVat = totalWithVat + Convert.ToDouble(row[months].ToString() == "" ? "0" : row[months].ToString());//new

                    }

                    row["TOTAL WITHOUT VAT"] = totalWithOutVat;
                    row["TOTAL WITH VAT"] = totalWithVat;//new
                }


                int loop = 0;
                foreach (var months in monthList)
                {
                    double sum = 0.00;
                    double sumTotalWithOutVat = 0.00;

                    double sumWV = 0.00;//new
                    double sumTotalWithVat = 0.00;//new

                    loop++;
                    foreach (DataRow row in _dtGP.Rows)
                    {
                        // string aa = row["JIT"].ToString();
                        double tempVal = Convert.ToDouble(row[months].ToString() == "" ? "0" : row[months].ToString());
                        sum = sum + tempVal;


                        double tempValWV = Convert.ToDouble(row[months].ToString() == "" ? "0" : row[months].ToString());//new
                        sumWV = sumWV + tempValWV;//new

                        double tempTotalWithOutVat = Convert.ToDouble(row["TOTAL WITHOUT VAT"].ToString() == "" ? "0" : row["TOTAL WITHOUT VAT"].ToString());
                        sumTotalWithOutVat = sumTotalWithOutVat + tempTotalWithOutVat;


                        double tempTotalWithVat = Convert.ToDouble(row["TOTAL WITH VAT"].ToString() == "" ? "0" : row["TOTAL WITH VAT"].ToString());//new
                        sumTotalWithVat = sumTotalWithVat + tempTotalWithVat;//new
                    }

                    if (_dtGP.Rows.Count > 0)
                    {

                        if (loop == 1)
                        {
                            var row = _dtGP.NewRow();
                            _dtGP.Rows.Add(row);
                            int lIndex = _dtGP.Rows.Count - 1;
                            _dtGP.Rows[lIndex]["TOTAL WITHOUT VAT"] = sumTotalWithOutVat.ToString();

                            _dtGP.Rows[lIndex]["TOTAL WITH VAT"] = sumTotalWithVat.ToString();//new

                        }
                        int lastIndex = _dtGP.Rows.Count - 1;
                        _dtGP.Rows[lastIndex][months] = sum.ToString();

                        _dtGP.Rows[lastIndex][months] = sumWV.ToString();//new
                    }

                }


                ///////////////////////////////////////////// With Vat


                //foreach (DataRow row in _dtGP_WV.Rows)
                //{

                //    double totalWithVat = 0;//new
                //    foreach (var months in monthList)
                //    {
                //        //totalWithOutVat = totalWithOutVat + Convert.ToDouble(row[months].ToString() == "" ? "0" : row[months].ToString());

                //        totalWithVat = totalWithVat + Convert.ToDouble(row[months].ToString() == "" ? "0" : row[months].ToString());//new

                //    }

                //    //row["TOTAL WITHOUT VAT"] = totalWithOutVat;
                //    row["TOTAL WITH VAT"] = totalWithVat;//new
                //}


                //int loopWV = 0;
                //foreach (var months in monthList)
                //{
                //    //double sum = 0.00;
                //    //double sumTotalWithOutVat = 0.00;

                //    double sumWV = 0.00;//new
                //    double sumTotalWithVat = 0.00;//new

                //    loopWV++;
                //    foreach (DataRow row in _dtGP_WV.Rows)
                //    {

                //        //double tempVal = Convert.ToDouble(row[months].ToString() == "" ? "0" : row[months].ToString());
                //        //sum = sum + tempVal;


                //        double tempValWV = Convert.ToDouble(row[months].ToString() == "" ? "0" : row[months].ToString());//new
                //        sumWV = sumWV + tempValWV;//new

                //        //double tempTotalWithOutVat = Convert.ToDouble(row["TOTAL WITHOUT VAT"].ToString() == "" ? "0" : row["TOTAL WITHOUT VAT"].ToString());
                //        //sumTotalWithOutVat = sumTotalWithOutVat + tempTotalWithOutVat;


                //        double tempTotalWithVat = Convert.ToDouble(row["TOTAL WITH VAT"].ToString() == "" ? "0" : row["TOTAL WITH VAT"].ToString());//new
                //        sumTotalWithVat = sumTotalWithVat + tempTotalWithVat;//new
                //    }

                //    if (_dtGP_WV.Rows.Count > 0)
                //    {

                //        if (loop == 1)
                //        {
                //            var row = _dtGP_WV.NewRow();
                //            _dtGP_WV.Rows.Add(row);
                //            int lIndex = _dtGP_WV.Rows.Count - 1;
                //           // _dtGP.Rows[lIndex]["TOTAL WITHOUT VAT"] = sumTotalWithOutVat.ToString();

                //            _dtGP_WV.Rows[lIndex]["TOTAL WITH VAT"] = sumTotalWithVat.ToString();//new

                //        }
                //        int lastIndex = _dtGP.Rows.Count - 1;


                //        _dtGP_WV.Rows[lastIndex][months] = sumWV.ToString();//new
                //    }

                //}


                ///////////////////////////////////////////


                reportType = "Month Wise";
            }




            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c8"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c4"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c4"] = "Total Sales Report - " + reportType; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            dataRow["c7"] = "User : "; dataRow["c8"] = _User + " , Printed on " + System.DateTime.Now;
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, TitleData, _dtGP, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public MST_ITM getItemDetail(string itmcd)
        {
            InventoryDAL dal = new InventoryDAL();
            return dal.Get_iteminformation(itmcd);
        }

        // Lakshika 2016/10/18
        public List<DataTable> GetGP_AnalysisDetails(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _Cat4, string _Cat5, string _User, string _RepType, string _StockType, string _InvNo, string _Com, string _Promotor, int _freeissue, string _itemclasif, string _brndmgr, string _Group, bool withReversal, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();
            DataTable _dtGP = new DataTable();
            DataTable dtResult = new DataTable();
            DataTable dtResult2 = new DataTable();
            dtResult.TableName = "tblReport";
            dtResult2.TableName = "tblReport2";
            _dtGP.TableName = "tblGP";

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_Com, _User);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("GPReport") == true) _salesDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.Get_Gp_Data(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _User, _RepType, _StockType, _InvNo, drow["tpl_pc"].ToString(), _Com, _Promotor, _freeissue, _itemclasif, _brndmgr, withReversal, 0, _fromDate, _toDate, 0);
                    //DataRow row; row = _dtResults.NewRow(); row["DO #"] = "ABL"; _dtResults.Rows.Add(row);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }



            var GPTotal = from b in GLOB_DataTable.AsEnumerable()
                          group b by new { cat1 = b.Field<string>("ITEM CAT 1"), cat1decr = b.Field<string>("ITEM CAT 1 DESCRIPTION"), pctype = b.Field<string>("PC TYPE") } into g
                          select new
                          {
                              CATEGORY_CODE = g.Key.cat1,
                              CATEGORY_DESCRIPTION = g.Key.cat1decr,
                              PC_TYPE = g.Key.pctype,
                              QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
                              NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
                              COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
                              GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                              GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
                          };

            DataTable GPT = LINQResultToDataTable(GPTotal);
            //_dtGP.Merge(GPT);

            var GPExternal = from b in GLOB_DataTable.AsEnumerable()
                             where "EXTERNAL" == b.Field<string>("PC TYPE")
                             group b by new { cat1 = b.Field<string>("ITEM CAT 1"), cat1decr = b.Field<string>("ITEM CAT 1 DESCRIPTION"), pctype = b.Field<string>("PC TYPE") } into g
                             select new
                             {
                                 CATEGORY_CODE = g.Key.cat1,
                                 CATEGORY_DESCRIPTION = g.Key.cat1decr,
                                 PC_TYPE = g.Key.pctype,
                                 QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
                                 NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
                                 COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
                                 GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                                 GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
                             };

            DataTable GPE = LINQResultToDataTable(GPExternal);
            //_dtGP.Merge(GPE);

            var GPInternal = from b in GLOB_DataTable.AsEnumerable()
                             where "INTERNAL" == b.Field<string>("PC TYPE")
                             group b by new { cat1 = b.Field<string>("ITEM CAT 1"), cat1decr = b.Field<string>("ITEM CAT 1 DESCRIPTION"), pctype = b.Field<string>("PC TYPE") } into g
                             select new
                             {
                                 CATEGORY_CODE = g.Key.cat1,
                                 CATEGORY_DESCRIPTION = g.Key.cat1decr,
                                 PC_TYPE = g.Key.pctype,
                                 QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
                                 NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
                                 COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
                                 GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                                 GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
                             };

            DataTable GPI = LINQResultToDataTable(GPInternal);
            //_dtGP.Merge(GPI);

            //_dtGP = GPT;


            dtResult.Merge(GPT);

            dtResult.Columns.Add("E_QTY", typeof(Decimal));
            dtResult.Columns.Add("E_NET_SALE", typeof(Decimal));
            dtResult.Columns.Add("E_GROSS_PROFIT", typeof(Decimal));
            dtResult.Columns.Add("E_GP_MARGINE", typeof(Decimal));

            foreach (DataRow row in GPE.Rows)
            {
                foreach (DataRow fRow in dtResult.Rows)
                {
                    if (row["CATEGORY_CODE"].ToString() == fRow["CATEGORY_CODE"].ToString())
                    {
                        fRow["E_QTY"] = row["QTY"].ToString() == "" ? 0 : Convert.ToDecimal(row["QTY"].ToString());
                        fRow["E_NET_SALE"] = row["NET_SALE"].ToString() == "" ? 0 : Convert.ToDecimal(row["NET_SALE"].ToString());
                        fRow["E_GROSS_PROFIT"] = row["GROSS_PROFIT"].ToString() == "" ? 0 : Convert.ToDecimal(row["GROSS_PROFIT"].ToString());
                        fRow["E_GP_MARGINE"] = row["GP_MARGINE"].ToString() == "" ? 0 : Convert.ToDecimal(row["GP_MARGINE"].ToString());
                    }
                }
            }

            dtResult.Columns.Add("I_QTY", typeof(Decimal));
            dtResult.Columns.Add("I_NET_SALE", typeof(Decimal));
            dtResult.Columns.Add("I_GROSS_PROFIT", typeof(Decimal));
            dtResult.Columns.Add("I_GP_MARGINE", typeof(Decimal));

            foreach (DataRow row in GPI.Rows)
            {
                foreach (DataRow fRow in dtResult.Rows)
                {
                    if (row["CATEGORY_CODE"].ToString() == fRow["CATEGORY_CODE"].ToString())
                    {
                        fRow["I_QTY"] = row["QTY"].ToString() == "" ? 0 : Convert.ToDecimal(row["QTY"].ToString());
                        fRow["I_NET_SALE"] = row["NET_SALE"].ToString() == "" ? 0 : Convert.ToDecimal(row["NET_SALE"].ToString());
                        fRow["I_GROSS_PROFIT"] = row["GROSS_PROFIT"].ToString() == "" ? 0 : Convert.ToDecimal(row["GROSS_PROFIT"].ToString());
                        fRow["I_GP_MARGINE"] = row["GP_MARGINE"].ToString() == "" ? 0 : Convert.ToDecimal(row["GP_MARGINE"].ToString());
                    }
                }
            }



            //------------------------------------------ Brand ---------------------


            var GPTotal2 = from b in GLOB_DataTable.AsEnumerable()
                           group b by new { brand = b.Field<string>("ITEM BRAND"), brandname = b.Field<string>("BRAND NAME"), pctype = b.Field<string>("PC TYPE") } into g
                           select new
                           {
                               ITEM_BRAND = g.Key.brand,
                               BRAND_NAME = g.Key.brandname,
                               PC_TYPE = g.Key.pctype,
                               QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
                               NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
                               COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
                               GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                               GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
                           };

            DataTable GPT2 = LINQResultToDataTable(GPTotal2);
            //_dtGP.Merge(GPT);

            var GPExternal2 = from b in GLOB_DataTable.AsEnumerable()
                              where "EXTERNAL" == b.Field<string>("PC TYPE")
                              group b by new { brand = b.Field<string>("ITEM BRAND"), brandname = b.Field<string>("BRAND NAME"), pctype = b.Field<string>("PC TYPE") } into g
                              select new
                              {
                                  ITEM_BRAND = g.Key.brand,
                                  BRAND_NAME = g.Key.brandname,
                                  PC_TYPE = g.Key.pctype,
                                  QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
                                  NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
                                  COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
                                  GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                                  GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
                              };

            DataTable GPE2 = LINQResultToDataTable(GPExternal2);
            //_dtGP.Merge(GPE);

            var GPInternal2 = from b in GLOB_DataTable.AsEnumerable()
                              where "INTERNAL" == b.Field<string>("PC TYPE")
                              group b by new { brand = b.Field<string>("ITEM BRAND"), brandname = b.Field<string>("BRAND NAME"), pctype = b.Field<string>("PC TYPE") } into g
                              select new
                              {
                                  ITEM_BRAND = g.Key.brand,
                                  BRAND_NAME = g.Key.brandname,
                                  PC_TYPE = g.Key.pctype,
                                  QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
                                  NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
                                  COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
                                  GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                                  GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
                              };

            DataTable GPI2 = LINQResultToDataTable(GPInternal2);
            //_dtGP.Merge(GPI);

            //_dtGP = GPT;


            dtResult2.Merge(GPT2);

            dtResult2.Columns.Add("E_QTY", typeof(Decimal));
            dtResult2.Columns.Add("E_NET_SALE", typeof(Decimal));
            dtResult2.Columns.Add("E_GROSS_PROFIT", typeof(Decimal));
            dtResult2.Columns.Add("E_GP_MARGINE", typeof(Decimal));

            foreach (DataRow row in GPE2.Rows)
            {
                foreach (DataRow fRow in dtResult2.Rows)
                {
                    if (row["ITEM_BRAND"].ToString() == fRow["ITEM_BRAND"].ToString())
                    {
                        fRow["E_QTY"] = row["QTY"].ToString() == "" ? 0 : Convert.ToDecimal(row["QTY"].ToString());
                        fRow["E_NET_SALE"] = row["NET_SALE"].ToString() == "" ? 0 : Convert.ToDecimal(row["NET_SALE"].ToString());
                        fRow["E_GROSS_PROFIT"] = row["GROSS_PROFIT"].ToString() == "" ? 0 : Convert.ToDecimal(row["GROSS_PROFIT"].ToString());
                        fRow["E_GP_MARGINE"] = row["GP_MARGINE"].ToString() == "" ? 0 : Convert.ToDecimal(row["GP_MARGINE"].ToString());
                    }
                }
            }

            dtResult2.Columns.Add("I_QTY", typeof(Decimal));
            dtResult2.Columns.Add("I_NET_SALE", typeof(Decimal));
            dtResult2.Columns.Add("I_GROSS_PROFIT", typeof(Decimal));
            dtResult2.Columns.Add("I_GP_MARGINE", typeof(Decimal));

            foreach (DataRow row in GPI2.Rows)
            {
                foreach (DataRow fRow in dtResult.Rows)
                {
                    if (row["CATEGORY_CODE"].ToString() == fRow["CATEGORY_CODE"].ToString())
                    {
                        fRow["I_QTY"] = row["QTY"].ToString() == "" ? 0 : Convert.ToDecimal(row["QTY"].ToString());
                        fRow["I_NET_SALE"] = row["NET_SALE"].ToString() == "" ? 0 : Convert.ToDecimal(row["NET_SALE"].ToString());
                        fRow["I_GROSS_PROFIT"] = row["GROSS_PROFIT"].ToString() == "" ? 0 : Convert.ToDecimal(row["GROSS_PROFIT"].ToString());
                        fRow["I_GP_MARGINE"] = row["GP_MARGINE"].ToString() == "" ? 0 : Convert.ToDecimal(row["GP_MARGINE"].ToString());
                    }
                }
            }

            //////----------------------------------------------------------------


            // Category
            foreach (DataRow row in dtResult.Rows)
            {
                if (row["QTY"].ToString() == "")
                {
                    row["QTY"] = 0;
                }
                if (row["NET_SALE"].ToString() == "")
                {
                    row["NET_SALE"] = 0;
                }
                if (row["GROSS_PROFIT"].ToString() == "")
                {
                    row["GROSS_PROFIT"] = 0;
                }
                if (row["GROSS_PROFIT"].ToString() == "")
                {
                    row["GP_MARGINE"] = 0;
                }

                if (row["E_QTY"].ToString() == "")
                {
                    row["E_QTY"] = 0;
                }
                if (row["E_NET_SALE"].ToString() == "")
                {
                    row["E_NET_SALE"] = 0;
                }
                if (row["E_GROSS_PROFIT"].ToString() == "")
                {
                    row["E_GROSS_PROFIT"] = 0;
                }
                if (row["E_GROSS_PROFIT"].ToString() == "")
                {
                    row["E_GP_MARGINE"] = 0;
                }

                if (row["I_QTY"].ToString() == "")
                {
                    row["I_QTY"] = 0;
                }
                if (row["I_NET_SALE"].ToString() == "")
                {
                    row["I_NET_SALE"] = 0;
                }
                if (row["I_GROSS_PROFIT"].ToString() == "")
                {
                    row["I_GROSS_PROFIT"] = 0;
                }
                if (row["I_GP_MARGINE"].ToString() == "")
                {
                    row["I_GP_MARGINE"] = 0;
                }
            }

            // Brand
            foreach (DataRow row in dtResult2.Rows)
            {
                if (row["QTY"].ToString() == "")
                {
                    row["QTY"] = 0;
                }
                if (row["NET_SALE"].ToString() == "")
                {
                    row["NET_SALE"] = 0;
                }
                if (row["GROSS_PROFIT"].ToString() == "")
                {
                    row["GROSS_PROFIT"] = 0;
                }
                if (row["GROSS_PROFIT"].ToString() == "")
                {
                    row["GP_MARGINE"] = 0;
                }

                if (row["E_QTY"].ToString() == "")
                {
                    row["E_QTY"] = 0;
                }
                if (row["E_NET_SALE"].ToString() == "")
                {
                    row["E_NET_SALE"] = 0;
                }
                if (row["E_GROSS_PROFIT"].ToString() == "")
                {
                    row["E_GROSS_PROFIT"] = 0;
                }
                if (row["E_GROSS_PROFIT"].ToString() == "")
                {
                    row["E_GP_MARGINE"] = 0;
                }

                if (row["I_QTY"].ToString() == "")
                {
                    row["I_QTY"] = 0;
                }
                if (row["I_NET_SALE"].ToString() == "")
                {
                    row["I_NET_SALE"] = 0;
                }
                if (row["I_GROSS_PROFIT"].ToString() == "")
                {
                    row["I_GROSS_PROFIT"] = 0;
                }
                if (row["I_GP_MARGINE"].ToString() == "")
                {
                    row["I_GP_MARGINE"] = 0;
                }
            }


            //if (_Group == "LOC")
            //{
            //    var GP = from b in GLOB_DataTable.AsEnumerable()
            //             group b by new { pccode = b.Field<string>("PROFITCENTER CODE"), pcdesc = b.Field<string>("PROFITCENTER DESCRIPTION") } into g
            //             select new
            //             {
            //                 PC_CODE = g.Key.pccode,
            //                 PC_DESCRIPTION = g.Key.pcdesc,
            //                 QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
            //                 NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
            //                 COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
            //                 GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
            //                 GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
            //             };

            //    DataTable GP1 = LINQResultToDataTable(GP);
            //    _dtGP.Merge(GP1);
            //}
            //else if (_Group == "ITM")
            //{
            //    var GP = from b in GLOB_DataTable.AsEnumerable()
            //             group b by new { itemcode = b.Field<string>("ITEM CODE"), itemdesc = b.Field<string>("ITEM DESCRIPTION"), model = b.Field<string>("ITEM MODEL") } into g
            //             select new
            //             {
            //                 ITEM_CODE = g.Key.itemcode,
            //                 ITEM_DESCRIPTION = g.Key.itemdesc,
            //                 ITEM_MODEL = g.Key.model,
            //                 QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
            //                 NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
            //                 COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
            //                 GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
            //                 GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
            //             };

            //    DataTable GP1 = LINQResultToDataTable(GP);
            //    _dtGP.Merge(GP1);
            //}
            //else if (_Group == "CAT1")
            //{
            //    var GP = from b in GLOB_DataTable.AsEnumerable()
            //             group b by new { cat1 = b.Field<string>("ITEM CAT 1"), cat1desc = b.Field<string>("ITEM CAT 1 DESCRIPTION") } into g
            //             select new
            //             {
            //                 PC_CODE = g.Key.cat1,
            //                 PC_DESCRIPTION = g.Key.cat1desc,
            //                 QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
            //                 NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
            //                 COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
            //                 GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
            //                 GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
            //             };

            //    DataTable GP1 = LINQResultToDataTable(GP);
            //    _dtGP.Merge(GP1);
            //}
            //else if (_Group == "EXEC")
            //{
            //    var GP = from b in GLOB_DataTable.AsEnumerable()
            //             group b by new { pccode = b.Field<string>("PROFITCENTER CODE"), pcdesc = b.Field<string>("PROFITCENTER DESCRIPTION"), execcode = b.Field<string>("EXECUTIVE CODE"), execname = b.Field<string>("EXECUTIVE NAME") } into g
            //             select new
            //             {
            //                 PC_CODE = g.Key.pccode,
            //                 PC_DESCRIPTION = g.Key.pcdesc,
            //                 EXEC_CODE = g.Key.execcode,
            //                 EXEC_NAME = g.Key.execname,
            //                 QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
            //                 NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
            //                 COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
            //                 GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
            //                 GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
            //             };

            //    DataTable GP1 = LINQResultToDataTable(GP);
            //    _dtGP.Merge(GP1);
            //}
            //else if (_Group == "DOC")
            //{
            //    var GP = from b in GLOB_DataTable.AsEnumerable()
            //             group b by new { itemcode = b.Field<string>("ITEM CODE"), itemdesc = b.Field<string>("ITEM DESCRIPTION"), model = b.Field<string>("ITEM MODEL"), invoice = b.Field<string>("INVOICE NO") } into g
            //             select new
            //             {
            //                 ITEM_CODE = g.Key.itemcode,
            //                 ITEM_DESCRIPTION = g.Key.itemdesc,
            //                 ITEM_MODEL = g.Key.model,
            //                 INVOICE_NO = g.Key.invoice,
            //                 QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
            //                 NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
            //                 COST_AMOUNT = g.Sum(x => x.Field<Decimal>("COST AMOUNT")),
            //                 GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
            //                 GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0
            //             };

            //    DataTable GP1 = LINQResultToDataTable(GP);
            //    _dtGP.Merge(GP1);
            //}
            //else
            //{
            //   _dtGP.Merge(GLOB_DataTable);
            //}

            List<DataTable> _lstDataTable = new List<DataTable>();
            _lstDataTable.Add(dtResult);
            _lstDataTable.Add(dtResult2);


            return _lstDataTable.ToList();
        }

        //subodana 2016-11-19
        public DataTable Barcodeserdata(string com, string doc)
        {
            InventoryDAL dal = new InventoryDAL();
            return dal.Barcodeserdata(com, doc);
        }


        // RUKSHAN 2016-11-23
        public DataTable GETCUSTOMERENTRY(string com, DateTime _from, DateTime _to)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CUSTMERENTRY") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GETCUSTOMERENTRY(com, _from, _to);
        }

        //add by Akila 2016/11/24
        public int UpdateMstMyAbans(string key_Code)
        {
            _generalDAL = new GeneralDAL();
            _generalDAL.ConnectionOpen();
            return _generalDAL.UpdateMstMyAbans(key_Code);
        }

        public String ProcessMyAbansReport(String _user, string _com, DateTime _fdate, DateTime _tdate, Int32 _opt, out String _err)
        {
            int in_ISlast;
            _err = string.Empty;
            string _filePath = string.Empty;
            in_ISlast = 1;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();
            DataTable tmp_user_pc = new DataTable();

            tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);

            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {

                    _securityDAL = new SecurityDAL();
                    if (_securityDAL.Is_Report_DR("ECDVoucherDetReport") == true) _salesDAL.ConnectionOpen_DR();
                    _dtResults = _salesDAL.ProcessMyAbansReport(_com, drow["tpl_pc"].ToString(), _fdate, _tdate, _opt);
                    GLOB_DataTable.Merge(_dtResults);
                    in_ISlast = in_ISlast + 1;
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public String ProcessDayEndProcessReport(String _user, string _com, DateTime _fdate, DateTime _tdate, Int32 _opt, out String _err)
        {
            int in_ISlast;
            _err = string.Empty;
            string _filePath = string.Empty;
            in_ISlast = 1;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();
            DataTable tmp_user_pc = new DataTable();

            tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);

            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {

                    _securityDAL = new SecurityDAL();
                    if (_securityDAL.Is_Report_DR("ECDVoucherDetReport") == true) _salesDAL.ConnectionOpen_DR();
                    _dtResults = _salesDAL.ProcessDayEndProcessReport(_com, drow["tpl_pc"].ToString(), _fdate, _tdate);
                    GLOB_DataTable.Merge(_dtResults);
                    in_ISlast = in_ISlast + 1;
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public String ProcessECDVoucherDetReport(String _user, string _com, DateTime _fdate, DateTime _tdate, out String _err)
        {
            int in_ISlast;
            _err = string.Empty;
            string _filePath = string.Empty;
            in_ISlast = 1;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();
            DataTable tmp_user_pc = new DataTable();

            tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);

            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {

                    _securityDAL = new SecurityDAL();
                    if (_securityDAL.Is_Report_DR("ECDVoucherDetReport") == true) _salesDAL.ConnectionOpen_DR();
                    _dtResults = _salesDAL.ProcessECDVoucherDetReport(_com, drow["tpl_pc"].ToString(), _fdate, _tdate);
                    GLOB_DataTable.Merge(_dtResults);
                    in_ISlast = in_ISlast + 1;
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public String ProcessHPIntroCommReport(String _user, string _com, string _pc, DateTime _fdate, DateTime _tdate, out String _err)
        {
            int in_ISlast;
            _err = string.Empty;
            string _filePath = string.Empty;
            in_ISlast = 1;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();
            DataTable tmp_user_pc = new DataTable();

            tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);

            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {

                    _securityDAL = new SecurityDAL();
                    if (_securityDAL.Is_Report_DR("HPIntroducerCommissionDet") == true) _salesDAL.ConnectionOpen_DR();
                    _dtResults = _salesDAL.ProcessHPIntroCommReport(_com, drow["tpl_pc"].ToString(), _fdate, _tdate);
                    GLOB_DataTable.Merge(_dtResults);
                    in_ISlast = in_ISlast + 1;
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        //kapila
        public String RegisProcessReport(string _user, string _com, string _chnl, DateTime _fdate, DateTime _tdate, Int32 _opt, string _fincomp, out String _err)
        {
            int in_ISlast;
            _err = string.Empty;
            string _filePath = string.Empty;
            in_ISlast = 1;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();
            DataTable tmp_user_pc = new DataTable();

            tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);

            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {

                    _securityDAL = new SecurityDAL();
                    if (_securityDAL.Is_Report_DR("registrationprocess") == true) _salesDAL.ConnectionOpen_DR();
                    _dtResults = _salesDAL.RegisProcessReport(_com, drow["tpl_pc"].ToString(), _fdate, _tdate, _opt, _fincomp);
                    GLOB_DataTable.Merge(_dtResults);
                    in_ISlast = in_ISlast + 1;
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public DataTable PrintCompletedHPAgreement(string _com, DateTime _from, DateTime _to, string _pc, string _agrUser, string _user)
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CompleteAgreeDtl") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.PrintCompletedHPAgreement(_com, _from, _to, _pc, _agrUser, _user);
        }

        public DataTable PrintHPServiceCharge(string _com, string _pc, DateTime _from, DateTime _to, string _item, string _cate1, string _cate2, string _cate3, string _brand, string _model)
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("HPServiceCharge") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.PrintHPServiceCharge(_com, _pc, _from, _to, _item, _cate1, _cate2, _cate3, _brand, _model);
        }

        public DataTable GetPriceDetails(string _circular, string _promocode, string _pricetp, string _pb, string _pblevel, DateTime _dtfrom, DateTime _dtto, DateTime _dtasat,
            string _customer, string _itemcode, string _brand, string _model, string _itemcat1, string _itemcat2, string _itemcat3, string _user, string _reptp)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPriceDetails(_circular, _promocode, _pricetp, _pb, _pblevel, _dtfrom, _dtto, _dtasat,
            _customer, _itemcode, _brand, _model, _itemcat1, _itemcat2, _itemcat3, _user, _reptp);
        }

        public DataTable GetCompanyTable()
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCompanyTable();
        }
        public DataTable GetEmployeeTable(string _company)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetEmployeeTable(_company);
        }
        public DataTable GetEliteCommDetails(string _circular, Int16 _year, Int16 _month, string _user)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetEliteCommDetails(_circular, _year, _month, _user);
        }
        public DataTable GetEliteCommDefDetails(string _circular, string _user)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetEliteCommDefDetails(_circular, _user);
        }
        public DataTable GetEliteCommDtlDetails(string _circular, string _user)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetEliteCommDtlDetails(_circular, _user);
        }
        public DataTable GetEliteCommPartyDetails(string _circular, string _user)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetEliteCommPartyDetails(_circular, _user);
        }
        public DataTable GetEliteCommAdditionalDetails(string _circular)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetEliteCommAdditionalDetails(_circular);
        }
        public DataTable GetVehicleRegistrationReport(DateTime _date, string _com, string _user, string _invType, string _itemCode, DateTime _fromdate, DateTime _todate)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("VehicalregDefinition") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetVehicleRegistrationReport(_date, _com, _user, _invType, _itemCode, _fromdate, _todate);
        }
        public DataTable GetVehicleRegUnreg_Report(DateTime _fdate, DateTime _tdate, string _regtp, string _user, string _invtp)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("regunreg_vehicle_dtl") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetVehicleRegUnreg_Report(_fdate, _tdate, _regtp, _user, _invtp);
        }
        public string GetVehicleRegUnreg1_Report(DateTime _fdate, DateTime _tdate, string _regtp, string _com, string _user, out string _err)
        {   // Sanjeewa

            int in_ISlast;
            _err = string.Empty;
            string _filePath = string.Empty;
            in_ISlast = 1;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _securityDAL = new SecurityDAL();
                    if (_securityDAL.Is_Report_DR("regunreg_vehicle_dtl") == true) _salesDAL.ConnectionOpen_DR();
                    _dtResults = _salesDAL.GetVehicleRegUnreg1_Report(_fdate, _tdate, _regtp, _com, drow["tpl_pc"].ToString(), _user);
                    GLOB_DataTable.Merge(_dtResults);
                    in_ISlast = in_ISlast + 1;
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }

        public string GetPriceDiscrepancyReport(DateTime _fdate, DateTime _tdate, string _regtp, string _com, string _user, out string _err)
        {   // Dilshan

            int in_ISlast;
            _err = string.Empty;
            string _filePath = string.Empty;
            in_ISlast = 1;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _securityDAL = new SecurityDAL();
                    if (_securityDAL.Is_Report_DR("Price_Discrepancy_Dtl") == true) _salesDAL.ConnectionOpen_DR();
                    _dtResults = _salesDAL.GetPriceDiscrepancyReport(_fdate, _tdate, _regtp, _com, drow["tpl_pc"].ToString(), _user);
                    GLOB_DataTable.Merge(_dtResults);
                    in_ISlast = in_ISlast + 1;
                }
            }
            //----------------
            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c8"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c9"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c10"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c11"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c12"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c13"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c14"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c15"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c16"; TitleData.Columns.Add(dataCol);

            dataRow = TitleData.NewRow(); dataRow["c6"] = _com; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Price Discrepancy Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fdate.ToString("dd/MMM/yyyy");
            //dataRow["c4"] = "Profit Center :"; dataRow["c5"] = drow["tpl_pc"].ToString();
            //dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date To :"; dataRow["c2"] = _tdate.ToString("dd/MMM/yyyy");
            //dataRow["c1"] = "Date To :"; dataRow["c2"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c4"] = "Invoice parameters"; dataRow["c16"] = "Pricing parameters";
            TitleData.Rows.Add(dataRow);
            //----------------
            _err = "";
            _filePath = "";
            //_filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
            _filePath = ExportExcel2007(_com, _user, TitleData, GLOB_DataTable, out _err);

            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }
        public string getCoverNoteDetailsReport(DateTime _fdate, DateTime _tdate, string _com, string _user, out string _err)
        {   // Sanjeewa

            int in_ISlast;
            _err = string.Empty;
            string _filePath = string.Empty;
            in_ISlast = 1;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _securityDAL = new SecurityDAL();
                    if (_securityDAL.Is_Report_DR("covernotedtl") == true) _salesDAL.ConnectionOpen_DR();
                    _dtResults = _salesDAL.getCoverNoteDetailsReport(_fdate, _tdate, _com, drow["tpl_pc"].ToString(), _user);
                    GLOB_DataTable.Merge(_dtResults);
                    in_ISlast = in_ISlast + 1;
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }
        public DataTable ProcessHPReceiptPrint(string _refNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.ProcessHPReceiptPrint(_refNo);
        }
        public DataTable ProcessHPReceiptPrintPayment(string _refNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.ProcessHPReceiptPrintPayment(_refNo);
        }
        public DataTable ProcessHPReceiptList(DateTime _fromDate, DateTime _toDate, string _com, string _pc)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.ProcessHPReceiptList(_fromDate, _toDate, _com, _pc);
        }
        public DataTable ProcessHPReceiptPrintPayMode(string _refNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.ProcessHPReceiptPrintPayMode(_refNo);
        }
        public string GetDiscountPromoDetails(DateTime in_FromDate, DateTime in_ToDate, string in_Circular, string in_equal, string _com, string in_user_id, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, in_user_id);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.GetDiscountPromoDetails(in_FromDate.Date, in_ToDate.Date, in_Circular, in_equal, _com, drow["tpl_pc"].ToString(), in_user_id);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            _err = "";

            _filePath = "";

            _filePath = ExportExcel2007(_com, in_user_id, GLOB_DataTable, out _err);

            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }
        public string GetPriceDefinitionDetails(string _com, string _user_id, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user_id);
            string tmp_user_pc_token = _salesDAL.GetTempUserPcSession(_com, _user_id);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.GetPriceDefinitionDetails(_com, drow["tpl_pc"].ToString(), _user_id);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            _err = "";

            _filePath = "";

            if (tmp_user_pc_token == _salesDAL.GetTempUserPcSession(_com, _user_id))
            {
                _filePath = ExportExcel2007(_com, _user_id, GLOB_DataTable, out _err);

                if (GLOB_DataTable.Rows.Count == 0)
                {
                    _err = "No Records Found.";
                }
            }

            return _filePath;
        }
        public string GetSalesInfoDetails(DateTime _FromDate, DateTime _ToDate, string _invtp, string _invsubtp, string _com, string _user_id, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user_id);
            string tmp_user_pc_token = _salesDAL.GetTempUserPcSession(_com, _user_id);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.GetSalesInfoDetails(_FromDate.Date, _ToDate.Date, _invtp, _invsubtp, _com, drow["tpl_pc"].ToString(), _user_id);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            _err = "";

            _filePath = "";

            if (tmp_user_pc_token == _salesDAL.GetTempUserPcSession(_com, _user_id))
            {
                _filePath = ExportExcel2007(_com, _user_id, GLOB_DataTable, out _err);

                if (GLOB_DataTable.Rows.Count == 0)
                {
                    _err = "No Records Found.";
                }
            }

            return _filePath;
        }
        public string GetInsurancePremiumDetails(DateTime _FromDate, DateTime _ToDate, string _com, string _user_id, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user_id);
            string tmp_user_pc_token = _salesDAL.GetTempUserPcSession(_com, _user_id);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.GetInsurancePremiumDetails(_FromDate.Date, _ToDate.Date, _com, drow["tpl_pc"].ToString(), _user_id);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            _err = "";

            _filePath = "";

            if (tmp_user_pc_token == _salesDAL.GetTempUserPcSession(_com, _user_id))
            {
                _filePath = ExportExcel2007(_com, _user_id, GLOB_DataTable, out _err);

                if (GLOB_DataTable.Rows.Count == 0)
                {
                    _err = "No Records Found.";
                }
            }

            return _filePath;
        }
        public string GetRevertInfoDetails(DateTime _FromDate, DateTime _ToDate, string _invtp, string _com, string _user_id, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user_id);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.GetRevertInfoDetails(_FromDate.Date, _ToDate.Date, _invtp, _com, drow["tpl_pc"].ToString(), _user_id);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            _err = "";

            _filePath = "";

            _filePath = ExportExcel2007(_com, _user_id, GLOB_DataTable, out _err);

            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }
        public DataTable GetReduceBalInterest(DateTime in_FromDate, DateTime in_ToDate, string _com, string _pc, Int16 _issum, Int16 _isSch)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("GetReduceBalInterest") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetReduceBalInterest(in_FromDate, in_ToDate, _com, _pc, _issum, _isSch);
        }
        public DataTable ProcessHPMultipleAccounts(string _user, DateTime _asatDate, string _com, string _scheme, string _cusId, Double _cusAccBal, string _pc)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("HPMultipleAccounts") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.ProcessHPMultipleAccounts(_user, _asatDate, _com, _scheme, _cusId, _cusAccBal, _pc);
        }
        public DataTable GetCancelledDocuemnt(DateTime _fdate, DateTime _tdate, string _userid, string _Location, string _Company, string docType)
        {//Nadeeka
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CancelDoc") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetCancelledDocuemnt(_fdate, _tdate, _userid, _Location, _Company, docType);
        }
        public DataTable GetManualDocuemnt(DateTime _fdate, DateTime _tdate, string _userid, string _Location, string _Company, string docType)
        {//Nadeeka
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ManualDoc") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetManualDocuemnt(_fdate, _tdate, _userid, _Location, _Company, docType);
        }
        public DataTable GetAddIncentiveDetails(DateTime _fdate, DateTime _tdate, string _Com, string _Pc, string _Scheme, string _userid)
        {//Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("AddIncentive") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetAddIncentiveDetails(_fdate, _tdate, _Com, _Pc, _Scheme, _userid);
        }
        public DataTable GetTrimAccountDetails(DateTime _fdate, DateTime _tdate, string _Com, string _Pc, string _Scheme, string _userid)
        {//Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("TrimAccounts") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetTrimAccountDetails(_fdate, _tdate, _Com, _Pc, _Scheme, _userid);
        }
        public DataTable GetCustomerAckLogDetails(DateTime _fdate, DateTime _tdate, string _Com, string _Pc, string _userid, string _accno)
        {//Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CustAcknowledge") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetCustomerAckLogDetails(_fdate, _tdate, _Com, _Pc, _userid, _accno);
        }
        public DataTable getReturnChequeSettlemtsDetails(DateTime _FromDate, DateTime _ToDate, string _user_id, string _company, string _Pc)
        {//Nadeeka
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ReturnCheque") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.getReturnChequeSettlemtsDetails(_FromDate, _ToDate, _user_id, _company, _Pc);
        }
        public DataTable GetAddIntroduceCommision(DateTime _fdate, DateTime _tdate, string _Com, string _Pc, string _Scheme, string _userid, string _promoter)
        {//Nadeeka
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("AddIntoduceComm") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetAddIntroduceCommision(_fdate, _tdate, _Com, _Pc, _Scheme, _userid, _promoter);
        }        //
        public DataTable UnusedReceiptReport(DateTime _fromDate, DateTime _toDate, string _user, string _com, string _pc)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("UnusedReceipts") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.UnusedReceiptReport(_fromDate, _toDate, _user, _com, _pc);
        }
        public DataTable SummaryOfWeekly(DateTime _fromDate, DateTime _toDate, string _com, string _pc)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("SummaryOfWeekly") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.SummaryOfWeekly(_fromDate, _toDate, _com, _pc);
        }
        public DataTable ProcessManagerCommission(string _profit, string _user, string _epfNo, string _comCode, DateTime _fromDate, DateTime _toDate)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ManagerCommission") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.ProcessManagerCommission(_profit, _user, _epfNo, _comCode, _fromDate, _toDate);
        }

        public DataTable ProcessManagerCollBonus(string _profit, string _user, string _epfNo, string _comCode, DateTime _fromDate, DateTime _toDate)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ManagerCollBonus") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.ProcessManagerCollBonus(_profit, _user, _epfNo, _comCode, _fromDate, _toDate);
        }
        public DataTable ProcessClosedAccounts(string _user, DateTime _fromDate, DateTime _toDate, string _company, string _pc)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ClosedAccounts") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.ProcessClosedAccounts(_user, _fromDate, _toDate, _company, _pc);
        }
        public DataTable ProcessVehicleInsurance(string _user, string _comCode, DateTime _fromDate, DateTime _toDate)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.ProcessVehicleInsurance(_user, _comCode, _fromDate, _toDate);
        }
        public DataTable getHPPureCreationDetails(DateTime _fromDate, DateTime _toDate, string _user, string _comCode, string _Pc)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.getHPPureCreationDetails(_fromDate, _toDate, _user, _comCode, _Pc);
        }
        public DataTable ProcessVehicleInsPay(string _user, string _comCode, DateTime _fromDate, DateTime _toDate)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.ProcessVehicleInsPay(_user, _comCode, _fromDate, _toDate);
        }
        public DataTable ProcessVehicleInsClaims(string _user, string _comCode, DateTime _fromDate, DateTime _toDate)
        {   // Nadeeka
            _salesDAL = new SalesDAL();


            return _salesDAL.ProcessVehicleInsClaims(_user, _comCode, _fromDate, _toDate);
        }
        public DataTable ProcessVehicleColletion(string _pc, string _comCode, DateTime _fromDate, DateTime _toDate)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.ProcessVehicleColletion(_pc, _comCode, _fromDate, _toDate);
        }
        public DataTable InternalPaymentVoucher(string _vouNo)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.InternalPaymentVoucher(_vouNo);
        }
        public DataTable HPDebitCreditRep(DateTime _fromDate, DateTime _toDate, string _user, string _company, string _PC)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.HPDebitCreditRep(_fromDate, _toDate, _user, _company, _PC);
        }
        public DataTable GetChequeDetails(string profitcenter_, string cheqNo_, string bank_, string type_)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetChequeDetails(profitcenter_, cheqNo_, bank_, type_);
        }
        public DataTable ProcessVehicleInsuranceArrears(string _user, string _comCode, DateTime _fromDate, DateTime _toDate, string _pc)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.ProcessVehicleInsuranceArrears(_user, _comCode, _fromDate, _toDate, _pc);
        }
        public DataTable getReturnChequeSettlemts(DateTime _AsAtDate, string _user_id, string _company, string _loc)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.getReturnChequeSettlemts(_AsAtDate, _user_id, _company, _loc);
        }
        public DataTable GetArrears_ClosingBalance(string _accNo, DateTime _asAtDate)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetArrears_ClosingBalance(_accNo, _asAtDate);
        }
        public DataTable GetPhyCashVerifyMDetails(string _jobno)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPhyCashVerifyMDetails(_jobno);
        }
        public DataTable GetPhyCashVerifyRemDetails(string _com, string _pc, DateTime _fdate, DateTime _tdate)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPhyCashVerifyRemDetails(_com, _pc, _fdate, _tdate);
        }
        public DataTable GetPhyCashVerifyDTDetails(string _jobno)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPhyCashVerifyDTDetails(_jobno);
        }
        public DataTable GetPhyCashVerifyDNDetails(string _jobno)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPhyCashVerifyDNDetails(_jobno);
        }
        public DataTable GetPhyCashVerifyCSDetails(string _jobno)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPhyCashVerifyCSDetails(_jobno);
        }
        public DataTable GetTotal_Arrears(DateTime _asAtDate, string _Scheme, string _user)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("Total_Arrears") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetTotal_Arrears(_asAtDate, _Scheme, _user);
        }
        //removed by Wimal 04/Oct/2018
        //public DataTable GetRec_Age_Analysis(int _Year, int _Month, int _NoOfMonth, string _Com, string _Pc, string _reptp, string _user)
        //{   // Sanjeewa
        //    _salesDAL = new SalesDAL();
        //    return _salesDAL.GetRec_Age_Analysis(_Year, _Month, _NoOfMonth, _Com, _Pc, _reptp, _user);
        //}
        //removed by Wimal 04/Oct/2018
        //public string GetRec_Age_Analysis_Excel(int _Year, int _Month, int _NoOfMonth, string _Com, string _reptp, string _user, out string _error)
        //{   // Prabhath on 08/03/2014
        //    _salesDAL = new SalesDAL();
        //    _error = string.Empty;
        //    string _path = string.Empty;
        //    DataTable GLOB_DataTable = new DataTable();
                //    DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_Com, _user);
        //    if (tmp_user_pc.Rows.Count > 0)
        //    {
        //        foreach (DataRow drow in tmp_user_pc.Rows)
        //        {
        //            DataTable TMP_DataTable = new DataTable();
        //            TMP_DataTable = _salesDAL.GetRec_Age_Analysis(_Year, _Month, _NoOfMonth, _Com, drow["tpl_pc"].ToString(), _reptp, _user);
        //            GLOB_DataTable.Merge(TMP_DataTable);
        //        }
        //    }
        //    _path = ExportExcel2007(_Com, _user, GLOB_DataTable, out _error);
        //    return _path;

        //}
        public string GetRec_Age_Analysis_New(int _Year, int _Month, int _NoOfMonth, string _Com, string _reptp, string _user, string _order, string _groupintr, bool isSupp, DateTime _todate, out string _error,out string LGD_Computation)
        {
          
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            _inventoryDAL = new InventoryDAL();
            //_inventoryRepDAL = new ReptCommonDAL();
            _salesDAL.ConnectionOpen();
            _salesDAL.BeginTransaction();
            LGD_Computation = string.Empty;
            if (_securityDAL.Is_Report_DR("HPRecievableAgeAnalysis") == true)
            {
                _salesDAL.ConnectionOpen_DR();
                _salesDAL.BeginTransaction();
            }

            _error = string.Empty;
            string _path = string.Empty;
            string _locList = "";

            _salesDAL.DeleteRecAgeAnal(_user, _Com);
            DataTable GLOB_DataTable = new DataTable();
            List<glb_hp_rec_age> _glb_hp_rec_agelist = new List<glb_hp_rec_age>();
            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_Com, _user);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    DataTable dt = _salesDAL.GetRec_Age_Analysis(_Year, _Month, _NoOfMonth, _Com, drow["tpl_pc"].ToString(), _reptp, _user, isSupp);
                    if (string.IsNullOrEmpty(_locList))
                        _locList = drow["tpl_pc"].ToString();
                    else
                        _locList = _locList + ", " + drow["tpl_pc"].ToString();
                }
            }

            GLOB_DataTable = _salesDAL.GetRec_Age_Analysis_New(_order, _Com, _user, _groupintr);
            if (GLOB_DataTable.Rows.Count <= 0)
            {
                _error = "Data not found";
                LGD_Computation = string.Empty;
                _path = string.Empty;
                return _path;
            }
            _path = ExportExcel2007(_Com, _user, GLOB_DataTable, out _error);

            LGD_Computation = GetRCV_AGE_CURRRNT(_user, _Com, null, null, "LGD Computation", _salesDAL,_todate, out _error);

            _salesDAL.TransactionCommit();
            _salesDAL.ConnectionClose();

            //kapila 18/7/2016 due to time out error
            DataTable _dtEmail = _inventoryDAL.GetUserNameByUserID(_user);
            if (!string.IsNullOrEmpty(_dtEmail.Rows[0]["SE_EMAIL"].ToString()))
            {
                CommonSearchBLL _commonBLL = new CommonSearchBLL();
                string _mail = "";
                _mail += "Generated report path as follows" + Environment.NewLine;
                _mail += _path + Environment.NewLine + Environment.NewLine;
                _mail += "Report Criteria as follows" + Environment.NewLine;
                _mail += "Year - " + _Year + Environment.NewLine;
                _mail += "Month - " + _Month + Environment.NewLine;
                _mail += "Location(s) - " + _locList + Environment.NewLine + Environment.NewLine;

                _mail += "*** This is an automatically generated email, please do not reply ***" + Environment.NewLine;

                _commonBLL.Send_SMTPMail(_dtEmail.Rows[0]["SE_EMAIL"].ToString(), "HP Recievable Age Analysis", _mail);

                CommonSearchBLL _commonBLLN = new CommonSearchBLL();
                _mail = "";
                _mail += "Generated report path as follows" + Environment.NewLine;
                _mail += LGD_Computation + Environment.NewLine + Environment.NewLine;
                _mail += "Report Criteria as follows" + Environment.NewLine;
                _mail += "Year - " + _Year + Environment.NewLine;
                _mail += "Month - " + _Month + Environment.NewLine;
                _mail += "Location(s) - " + _locList + Environment.NewLine + Environment.NewLine;

                _mail += "*** This is an automatically generated email, please do not reply ***" + Environment.NewLine;

                _commonBLLN.Send_SMTPMail(_dtEmail.Rows[0]["SE_EMAIL"].ToString(), "HP Recievable Age Analysis", _mail);

            }

            return _path;

        }
        public DataTable GetAccountLogDetails(string _accNo)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAccountLogDetails(_accNo);
        }
        public DataTable GetReq_App_Details(DateTime _fDate, DateTime _tDate, string _reqtp, string _appStatus, string _user)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("RequestAppDetails") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetReq_App_Details(_fDate, _tDate, _reqtp, _appStatus, _user);
        }
        public DataTable Get_Group_Sale_Details(DateTime _fDate, DateTime _tDate, string _user, string _com, string _pc)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_Group_Sale_Details(_fDate, _tDate, _user, _com, _pc);
        }
        public DataTable GetCommDetails(DateTime _fDate, DateTime _tDate, string _circular, string _user, Int16 _isExport)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCommDetails(_fDate, _tDate, _circular, _user, _isExport);
        }
        public DataTable GetGracePeriod_Arrears(DateTime _asAtDate, string _user, string _com, string _pc)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetGracePeriod_Arrears(_asAtDate, _user, _com, _pc);
        }
        public DataTable GetHPCustomerDetails(string _custId, string _custCode, Int32 _AddType, string _accNo)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();

            return _salesDAL.GetHPCustomerDetails(_custId, _custCode, _AddType, _accNo);
        }
        public Boolean GetDiscountDetails1(string _Circular, string _User, int _isExport, string _com, string _brand, string _model, string _itemcode, string _itemcat1, string _itemcat2, string _itemcat3, DateTime _fromDate, DateTime _toDate, out string _err, out string _filePath)
        {   // Sanjeewa
            DataTable _dtResults = new DataTable();
            Boolean _isDataAvailable;

            _salesDAL = new SalesDAL();

            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("DiscountDtl") == true) _salesDAL.ConnectionOpen_DR();
            _dtResults = _salesDAL.GetDiscountDetails1(_Circular, _User, _isExport, _com, _brand, _model, _itemcode, _itemcat1, _itemcat2, _itemcat3, _fromDate, _toDate);

            _isDataAvailable = true;
            if (_dtResults.Rows.Count > 0)
            { _isDataAvailable = true; }
            else
            { _isDataAvailable = false; }

            _err = "";
            _filePath = "";

            if (_isExport == 1)
            {
                _filePath = ExportExcel2007(_com, _User, _dtResults, out _err);
            }

            return _isDataAvailable;
        }
        public Boolean GetDiscountDetails(string _Circular, string _User, int _isExport, string _com, out string _err, out string _filePath)
        {   // Sanjeewa
            DataTable _dtResults = new DataTable();
            DataTable _dtResultsTot = new DataTable();
            DataTable _dtLocations = new DataTable();
            Boolean _isDataAvailable;

            _salesDAL = new SalesDAL();
            _dtLocations = _salesDAL.GetDiscountDetailsLocation(_Circular, _User, _com);

            for (int i = 0; i < _dtLocations.Rows.Count; i++)
            {
                _dtResults = _salesDAL.GetDiscountDetails(_Circular, _User, _isExport, _dtLocations.Rows[i]["spdl_com"].ToString(), _dtLocations.Rows[i]["spdl_pc"].ToString());
                _dtResultsTot.Merge(_dtResults);
            }

            _isDataAvailable = true;
            if (_dtResultsTot.Rows.Count > 0)
            { _isDataAvailable = true; }
            else
            { _isDataAvailable = false; }

            _err = "";
            _filePath = "";

            if (_isExport == 1)
            {
                _filePath = ExportExcel2007(_com, _User, _dtResultsTot, out _err);
            }

            return _isDataAvailable;
        }
        public DataTable GetDeliveredSerDetails(string _InvNo, string _Item, string _User, int _isExport, int _isLastPc)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDeliveredSerDetails(_InvNo, _Item, _User, _isExport, _isLastPc);
        }
        public DataTable GetForwardSalesDetailAudit(DateTime _asAtDate, string _User, string _brand, string _model, string _itemcode, string _itemcat1, string _itemcat2, string _itemcat3, string _agetp, decimal _age, string _com, string _pc, string _latestcost)
        {   // Sanjeewa // Added filter by create date by Nadeeka
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();
            if (_securityDAL.Is_Report_DR("ForwardSales_Audit") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetForwardSalesDetailAudit(_asAtDate, _User, _brand, _model, _itemcode, _itemcat1, _itemcat2, _itemcat3, _agetp, _age, _com, _pc, _latestcost);
        }
        public DataTable GetForwardSalesDetailAudit_Pro(string _loc)
        {   // kapila
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            return _salesDAL.GetForwardSalesDetailAudit_Pro(_loc);
        }
        public DataTable UnconfirmedAODDet_Pro(string _loc)
        {   // kapila
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            return _salesDAL.UnconfirmedAODDet_Pro(_loc);
        }
        public DataTable GetLastNoSeqDetails_Pro(string _loc, string _reptype)
        {   // kapila
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            return _salesDAL.GetLastNoSeqDetails_Pro(_loc, _reptype);
        }
        public DataTable GetLastNoSeqPageDetails_Pro(string _loc, string _reptype)
        {   // kapila
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            return _salesDAL.GetLastNoSeqPageDetails_Pro(_loc, _reptype);
        }

        public DataTable GetItemRestrictionDetails(string _brand, string _model, string _itemcode, string _itemcat1, string _itemcat2, string _itemcat3, string _com, string _pc)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ItemRestrictionDtl") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetItemRestrictionDetails(_brand, _model, _itemcode, _itemcat1, _itemcat2, _itemcat3, _com, _pc);
        }
        public DataTable GetForwardSalesDetails1(DateTime _asAtDate, string _User, string _brand, string _model, string _itemcode, string _itemcat1, string _itemcat2, string _itemcat3, string _agetp, decimal _age, string _com, string _pc)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetForwardSalesDetails1(_asAtDate, _User, _brand, _model, _itemcode, _itemcat1, _itemcat2, _itemcat3, _agetp, _age, _com, _pc);
        }
        public DataTable GetCurrentMonthDueDetails(int _Year, int _Month, string _Scheme, string _User, string _Com, string _Pc)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCurrentMonthDueDetails(_Year, _Month, _Scheme, _User, _Com, _Pc);
        }
        public DataTable GetAllDueDetails(int _Year, int _Month, string _Scheme, string _User, string _com, string _pc)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAllDueDetails(_Year, _Month, _Scheme, _User, _com, _pc);
        }
        public DataTable GetLastDayEndLogDetails(DateTime _asAtDate, string _User, string _Com, string _Pc)
        {   // Sanjeewa
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();
            if (_securityDAL.Is_Report_DR("LastDayEndLog") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetLastDayEndLogDetails(_asAtDate, _User, _Com, _Pc);
        }
        public DataTable GetLastNoSeqDetails(DateTime _asAtDate, string _User, string _DocType, string _Com, string _Loc)
        {   // Sanjeewa
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();
            if (_securityDAL.Is_Report_DR("LastNoSeq") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetLastNoSeqDetails(_asAtDate, _User, _DocType, _Com, _Loc);
        }
        public DataTable PhyStkBalCollectionHeaderDetails(string _User, string _JoNo)
        {   // Sanjeewa
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();
            if (_securityDAL.Is_Report_DR("FIFO_Audit") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.PhyStkBalCollectionHeaderDetails(_User, _JoNo);
        }
        public DataTable PhyStkBalCollectionItemDetails(string _User, string _JoNo)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.PhyStkBalCollectionItemDetails(_User, _JoNo);
        }

        public DataTable UserMonitor(string _Com, string _Dept, string _User)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.UserMonitor(_Com, _Dept, _User);
        }

        public DataTable PhyStkBalCollectionRemarkDetails(string _User, string _JoNo, Int16 _line)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.PhyStkBalCollectionRemarkDetails(_User, _JoNo, _line);
        }
        public DataTable PhyStkBalCollectionSerialDetails(string _User, string _JoNo, string _StkCat, string _RepType, string _RepStatus, string _RepFilter)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.PhyStkBalCollectionSerialDetails(_User, _JoNo, _StkCat, _RepType, _RepStatus, _RepFilter);
        }
        public DataTable PhyStkBalCollectionSerialAgeDetails(string _User, string _JoNo)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.PhyStkBalCollectionSerialAgeDetails(_User, _JoNo);
        }
        public DataTable PhyStkBalCommStkDetails(string _com, string _itm)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("InvAsatBalwithCost") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.PhyStkBalCommStkDetails(_com, _itm);
        }
        public DataTable PhyStkBalFIFODetails(string _User, string _JoNo)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("FIFO_Audit") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.PhyStkBalFIFODetails(_User, _JoNo);
        }
        public DataTable UnconfirmedAODDetails(string _User, DateTime _fromDate, DateTime _toDate)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("UnconfirmedAOD") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.UnconfirmedAODDetails(_User, _fromDate, _toDate);
        }

        public DataTable updateLastnoSeq(DateTime _date, string _type, string _com, string _loc)
        {   // Sanjeewa
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("UnconfirmedAOD") == true) _financialDAL.ConnectionOpen_DR();
            return _financialDAL.updateLastnoSeq(_date, _type, _com, _loc);
        }

        public DataTable updateLastnoSeqpages(DateTime _date, string _type, string _com, string _loc)
        {   // Sanjeewa
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("UnconfirmedAOD") == true) _financialDAL.ConnectionOpen_DR();
            return _financialDAL.updateLastnoSeqpages(_date, _type, _com, _loc);
        }

        public DataTable UnconfirmedAODDetailsNew(string _User, DateTime _fromDate, DateTime _toDate, string _com, string _loc)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("UnconfirmedAOD") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.UnconfirmedAODDetailsNew(_User, _fromDate, _toDate, _com, _loc);
        }

        public DataTable DFSalesDetails(string _User, DateTime _fromDate, DateTime _toDate)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.DFSalesDetails(_User, _fromDate, _toDate);
        }
        public DataTable DFSalesReceiptDetails(string _User, DateTime _fromDate, DateTime _toDate)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.DFSalesReceiptDetails(_User, _fromDate, _toDate);
        }
        public DataTable DFSalesReceiptCurrDetails(string _User, DateTime _fromDate, DateTime _toDate)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.DFSalesReceiptCurrDetails(_User, _fromDate, _toDate);
        }
        public DataTable RecDeskSummDetails(string _User, DateTime _fromDate, DateTime _toDate, string _com, string _loc)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ReceivingDeskSumm") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.RecDeskSummDetails(_User, _fromDate, _toDate, _com, _loc);
        }
        public DataTable ReqAppCurrentStatusDetails(DateTime _fromDate, DateTime _toDate, string _com, string _pc, string _reqtp, string _status, string _User)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("AppCurrentStatus") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.ReqAppCurrentStatusDetails(_fromDate, _toDate, _com, _pc, _reqtp, _status, _User);
        }
        public DataTable ReqAppDetByReasonReport(DateTime _fromDate, DateTime _toDate, string _com, string _pc, string _reason, string _status, string _User)
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("AppCurrentStatusReason") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.ReqAppDetByReasonReport(_fromDate, _toDate, _com, _pc, _reason, _status, _User);
        }
        public string ReqAppDetByReasonReport_new(DateTime _fromDate, DateTime _toDate, string _com, string _reason, string _User, string _cat, string _tp, out string _err)
        {
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();
            if (_securityDAL.Is_Report_DR("AppCurrentStatusReason") == true) _salesDAL.ConnectionOpen_DR();

            int in_ISlast;
            _err = string.Empty;
            string _filePath = string.Empty;
            in_ISlast = 1;

            DataTable _dtResults;
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _User);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.ReqAppDetByReasonReport_new(_fromDate, _toDate, _com, drow["tpl_pc"].ToString(), _reason, _User, _cat, _tp);
                    GLOB_DataTable.Merge(_dtResults);
                    in_ISlast = in_ISlast + 1;
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _User, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }
        public DataTable ReqAppCurrentStatusUserWise(DateTime _fromDate, DateTime _toDate, string _com, string _pc, string _reqtp, string _status, string _User, string _userID)
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("AppCurrentStatusUser") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.ReqAppCurrentStatusUserWise(_fromDate, _toDate, _com, _pc, _reqtp, _status, _User, _userID);
        }
        public DataTable GetHPCreditNoteDetails(string _accNo)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHPCreditNoteDetails(_accNo);
        }
        public DataTable DFInvBalwithPriceDetails(string _User, DateTime _asatDate, string _com, string _loc)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("DFInvBalPrice") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.DFInvBalwithPriceDetails(_User, _asatDate, _com, _loc);
        }
        public Boolean TrPayTpDefDetails(string _com, string _circular, string _promocode, string _paytp, string _isasatdate, DateTime _fDate, DateTime _tDate, DateTime _asatDate, string _User, out string _err, out string _filePath)
        {   // Sanjeewa

            DataTable _dtResults;
            Boolean _isDataAvailable;
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("TransactionPayType") == true) _salesDAL.ConnectionOpen_DR();
            _dtResults = _salesDAL.TrPayTpDefDetails(_com, _circular, _promocode, _paytp, _isasatdate, _fDate, _tDate, _asatDate, _User);

            _isDataAvailable = true;
            if (_dtResults.Rows.Count > 0)
            { _isDataAvailable = true; }
            else
            { _isDataAvailable = false; }

            _err = "";
            _filePath = "";

            _filePath = ExportExcel2007(_com, _User, _dtResults, out _err);

            if (_dtResults.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
            return _isDataAvailable;
        }
        public Boolean GetRegistraion_ExcelDetails(DateTime _from_date, DateTime _to_date, string _rpt_mode, string _usr, string _com, out string _err, out string _filePath)
        {   // Sanjeewa                       

            Boolean _isDataAvailable;
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();
            string _firstloc = "N";
            int _locno = 0;

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _usr);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _locno += 1;
                    if (_locno == 1)
                    { _firstloc = "Y"; }
                    else
                    { _firstloc = "N"; }
                    DataTable TMP_DataTable = new DataTable();
                    TMP_DataTable = _salesDAL.GetRegistraionDetails(_from_date, _to_date, _rpt_mode, _usr, _com, drow["tpl_pc"].ToString(), "Y", _firstloc);
                    GLOB_DataTable.Merge(TMP_DataTable);
                }
            }

            _isDataAvailable = true;
            if (GLOB_DataTable.Rows.Count > 0)
            { _isDataAvailable = true; }
            else
            { _isDataAvailable = false; }

            _err = "";
            _filePath = "";

            _filePath = ExportExcel2007(_com, _usr, GLOB_DataTable, out _err);

            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
            return _isDataAvailable;
        }
        public DataTable ProfitCenterDetails(string _User, int _isExport)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.ProfitCenterDetails(_User, _isExport);
        }
        public DataTable DFSalesReceiptCurrTrDetails(string _User, DateTime _fromDate, DateTime _toDate)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.DFSalesReceiptCurrTrDetails(_User, _fromDate, _toDate);
        }
        public DataTable PhyStkBalCollectionSerialMatchDetails(string _User, string _JoNo, string _StkCat, string _RepStatus, string _SerMisMatch)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.PhyStkBalCollectionSerialMatchDetails(_User, _JoNo, _StkCat, _RepStatus, _SerMisMatch);
        }
        public DataTable GetSchemeGuaranter(string _Circular)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchemeGuaranter(_Circular);
        }
        public DataTable GetSchemeOtherCharge(string _Circular)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchemeOtherCharge(_Circular);
        }
        public DataTable GetSchemeSerCharge(string _Circular)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchemeSerCharge(_Circular);
        }
        public DataTable GetSchemeProofDoc(string _Circular)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchemeProofDoc(_Circular);
        }
        public DataTable GetSchemeReSchedule(string _Circular)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchemeReSchedule(_Circular);
        }
        public DataTable GetSchemeSchedule(string _Circular)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchemeSchedule(_Circular);
        }
        public DataTable GetSchemeCommission(string _Circular)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchemeCommission(_Circular);
        }
        public DataTable GetSchemeDetail(string _Circular)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchemeDetail(_Circular);
        }
        public DataTable GetSchemeType(string _Circular)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchemeType(_Circular);
        }
        public DataTable GetSchemeCategory(string _Circular)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSchemeCategory(_Circular);
        }
        public DataTable GetNoOfActAccountDetails(DateTime _fromDate, DateTime _toDate, string _User, string _com, string _pc)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("NoofActAccounts") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetNoOfActAccountDetails(_fromDate, _toDate, _User, _com, _pc);
        }
        public DataTable GetSalesFiguresDetailsWithTax(DateTime _fromDate, DateTime _toDate, string _User, string _Pc, string _Com)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("salefigure") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetSalesFiguresDetailsWithTax(_fromDate, _toDate, _User, _Pc, _Com);
        }
        public DataTable GetServiceGP(string _com, string _pc, DateTime _fdate, DateTime _tdate)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ServiceGP") == true) _salesDAL.ConnectionOpen_DR();

            return _salesDAL.GetServiceGP(_com, _pc, _fdate, _tdate);
        }
        public DataTable GetServiceGPDetail(string _com, string _pc, DateTime _fdate, DateTime _tdate, string _doctp)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ServiceGPDtl") == true) _salesDAL.ConnectionOpen_DR();

            return _salesDAL.GetServiceGPDetail(_com, _pc, _fdate, _tdate, _doctp);
        }
        public DataTable GetQuotationDet(string _com, string _type, string _customer, string _item, string _cat1, string _cat2, string _cat3, string _brand, String _model, DateTime _fdate, DateTime _tdate)
        {// Nadeeka
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ServiceGP") == true) _salesDAL.ConnectionOpen_DR();

            return _salesDAL.GetQuotationDet(_com, _type, _customer, _item, _cat1, _cat2, _cat3, _brand, _model, _fdate, _tdate);
        }
        public DataTable GetServiceStandBy(string _com, string _loc, DateTime _fdate, DateTime _tdate)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ServiceStandyIssue") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetServiceStandBy(_com, _loc, _fdate, _tdate);
        }
        public DataTable GetCrBalanceDetails(DateTime _fromDate, DateTime _toDate, string _User)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCrBalanceDetails(_fromDate, _toDate, _User);
        }
        public DataTable GetHPGroupCommissionDetails(DateTime _fromDate, DateTime _toDate, string _User, string _DocType)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetHPGroupCommissionDetails(_fromDate, _toDate, _User, _DocType);
        }
        public DataTable GetTotalRevenueDetails(DateTime _fromDate, DateTime _toDate, string _User, string _com, string _pc)
        {   // Sanjeewa
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();
            if (_securityDAL.Is_Report_DR("TotalRevenue") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetTotalRevenueDetails(_fromDate, _toDate, _User, _com, _pc);
        }
        public DataTable GetColBonusReconDetails(DateTime _fromDate, DateTime _toDate, string _com, string _pc, string _User, string _type)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetColBonusReconDetails(_fromDate, _toDate, _com, _pc, _User, _type);
        }
        public DataTable GetAgreementPrintingHeaderDetails(string _accno)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAgreementPrintingHeaderDetails(_accno);
        }
        public DataTable GetAgreementPrintingItemDetails(string _accno)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAgreementPrintingItemDetails(_accno);
        }
        public DataTable GetAgreementPrintingCustomerDetails(string _accno)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAgreementPrintingCustomerDetails(_accno);
        }
        public DataTable GetDepositBankDefDetails(string _com, string _pc)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("DepositBankDefDtl") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetDepositBankDefDetails(_com, _pc);
        }
        public DataTable GetVehicleRegistrationDetails(string _refno)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetVehicleRegistrationDetails(_refno);
        }
        public DataTable GetBrandDetails(string _brandcd)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetBrandDetails(_brandcd);
        }
        public DataTable GetCountryDetails(string _countrycd)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCountryDetails(_countrycd);
        }
        public DataTable GetExecwiseSalesInvDetails(DateTime _fromDate, DateTime _toDate, string _User, decimal _discRate, Int16 _discTp, Int16 _isdel, String _ExType, String _com, String _pc, String _appby)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ExecwiseSales") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetExecwiseSalesInvDetails(_fromDate, _toDate, _User, _discRate, _discTp, _isdel, _ExType, _com, _pc, _appby);
        }
        public DataTable GetTransferedAccountDetails(DateTime _fromDate, DateTime _toDate, string _User, string _Com, string _Pc)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetTransferedAccountDetails(_fromDate, _toDate, _User, _Com, _Pc);
        }
        public DataTable GetJobDetails(DateTime _fromDate, DateTime _toDate, string _User, string _Channel, Int16 _Status)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetJobDetails(_fromDate, _toDate, _User, _Channel, _Status);
        }
        public DataTable GetPaymodeDetails(DateTime _fromDate, DateTime _toDate, string _Paymode, string _User, int _Export, string _pc, string _com)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("PaymodeTr") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetPaymodeDetails(_fromDate, _toDate, _Paymode, _User, _Export, _pc, _com);
        }
        public DataTable GetPaymodeAmendDetails(DateTime _fromDate, DateTime _toDate, string _Paymode, string _User, int _Export)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("PaymodeTr") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetPaymodeAmendDetails(_fromDate, _toDate, _Paymode, _User, _Export);
        }
        public DataTable GetJobSummaryDetails(DateTime _fromDate, DateTime _toDate, string _User, string _Pc, string _Com)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetJobSummaryDetails(_fromDate, _toDate, _User, _Pc, _Com);
        }
        public DataTable GetStampDutyDetails(DateTime _fromDate, DateTime _toDate, string _User)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetStampDutyDetails(_fromDate, _toDate, _User);
        }
        public DataTable GetSVATDetails(DateTime _fromDate, DateTime _toDate, string _User, string _doctype, string _docsubtype)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("SVATDetails") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetSVATDetails(_fromDate, _toDate, _User, _doctype, _docsubtype);
        }
        public DataTable GetJobScheduleDetails(DateTime _fromDate, DateTime _toDate, string _User)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetJobScheduleDetails(_fromDate, _toDate, _User);
        }
        public DataTable GetAgreementStatementDetails(DateTime _asAtDate, string _Com, string _Pc, string _User)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("AgreeStatementDtl") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetAgreementStatementDetails(_asAtDate, _Com, _Pc, _User);
        }
        public DataTable GetAgreementStatementDetailsAudit(DateTime _asAtDate, string _Com, string _Pc, string _User)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("AuditReport") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetAgreementStatementDetailsAudit(_asAtDate, _Com, _Pc, _User);
        }

        public DataTable GetAgreementStatementDtlDetails(DateTime _asAtDate, string _Com, string _Pc, string _User)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("AgreeStatementDtlDtl") == true) _salesDAL.ConnectionOpen_DR();

            return _salesDAL.GetAgreementStatementDtlDetails(_asAtDate, _Com, _Pc, _User);
        }
        public DataTable GetAgreementPendingDetails(DateTime _asAtDate, string _Com, string _Pc, string _User)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("AgreeStatementPendingDtl") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetAgreementPendingDetails(_asAtDate, _Com, _Pc, _User);
        }
        public DataTable GetAgreementCheckDetails(DateTime _asAtDate, string _Com, string _Pc, string _User)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("AgreeStatementCheckDtl") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetAgreementCheckDetails(_asAtDate, _Com, _Pc, _User);
        }
        public DataTable GetRevertNReleaseDetails(DateTime _fromDate, DateTime _toDate, string _com, string _PCenter, string _User)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("RevertRelease") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetRevertNReleaseDetails(_fromDate, _toDate, _com, _PCenter, _User);
        }
        public DataTable GetRevertReleaseOther(DateTime _fromDate, DateTime _toDate, string _com, string _PCenter, string _User, Int16 _Opt)
        {   // Nadeeka
            _salesDAL = new SalesDAL();
            return _salesDAL.GetRevertReleaseOther(_fromDate, _toDate, _com, _PCenter, _User, _Opt);
        }
        public string GetRevertStatus(DateTime _fromDate, DateTime _toDate, string _com, string _PCenter, string _User, out string _err)
        {

            // Nadeeka
            try
            {
                _salesDAL = new SalesDAL();

                DataTable RVT_STATUS = new DataTable();
                DataTable tmp_user_pc = new DataTable();
                tmp_user_pc = _salesDAL.GetTempUserPc(_com, _User);

                if (tmp_user_pc.Rows.Count > 0)
                {
                    foreach (DataRow drow in tmp_user_pc.Rows)
                    {
                        DataTable TMP_RVT_STATUS = new DataTable();
                        TMP_RVT_STATUS = _salesDAL.GetRevertStatus(_fromDate, _toDate, _com, drow["tpl_pc"].ToString(), _User);
                        RVT_STATUS.Merge(TMP_RVT_STATUS);


                    }
                }


                string _targetFilename = CreateExcelFile.ExportToExcelxlsx(_User, _com, RVT_STATUS, 60000, out _err);

                RVT_STATUS.Dispose();
                GC.Collect();

                if (string.IsNullOrEmpty(_err))
                { return _targetFilename; }
                else
                { return "Err"; }
            }

            catch (Exception err)
            {
                GC.Collect();
                _err = err.ToString();
                return "Err";
            }
        }
        public DataTable GetAgreementChecklistDetails(DateTime _fromDate, DateTime _toDate, string _com, string _pc, string _User)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetAgreementChecklistDetails(_fromDate, _toDate, _com, _pc, _User);
        }
        public DataTable GetPOSDetailDetails(DateTime _fromDate, DateTime _toDate, string _User)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetPOSDetailDetails(_fromDate, _toDate, _User);
        }
        public DataTable GetDeliveredSalesDetails(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _PCenter, string _User, string _RepType, string _StockType, string _InvNo, string _Pc, string _Com, string _Promotor, int _freeissue, int currencyType, int _reversal, string _color, string _size, string _country = null, string _province = null, string _district = null, string _city = null)//updated by akila 2018/03/16
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("DeliveredSales") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetDeliveredSalesDetails(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _PCenter, _User, _RepType, _StockType, _InvNo, _Pc, _Com, _Promotor, _freeissue, currencyType, _reversal, _color, _size, _country, _province, _district, _city); //2- for All Sale Types
        }
        public DataTable GetSalesReconcilationDetails(DateTime _fromDate, DateTime _toDate, string _com, string _loc)
        {   // kapila
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("SalesRecon") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetSalesReconcilationDetails(_fromDate, _toDate, _com, _loc);
        }
        public string GetDeliveredSalesDetailsExcel(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _PCenter, string _User, string _RepType, string _StockType, string _InvNo, string _Com, string _Promotor, int _freeissue, int currencyType, int revOrSaleOrAll, out string _err, string _country = null, string _province = null, string _district = null, string _city = null)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _reportDAL = new ReptCommonDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("DeliveredSales") == true) _salesDAL.ConnectionOpen_DR();

            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.GetDeliveredSalesDetails(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _PCenter, _User, _RepType, _StockType, _InvNo, drow["tpl_pc"].ToString(), drow["tpl_com"].ToString(), _Promotor, _freeissue, currencyType, revOrSaleOrAll, "", "", _country, _province, _district, _city);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            GLOB_DataTable.TableName = "tbl";
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }
        public DataTable GetStockSalesDetails(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _Cat4, string _Cat5, string _PCenter, string _User, string _RepType, string _StockType, string _InvNo, string _Pc, string _Com, string _Promotor, int _freeissue, string _Supplier)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("StockSales") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetStockSalesDetails(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _PCenter, _User, _RepType, _StockType, _InvNo, _Pc, _Com, _Promotor, _freeissue, _Supplier);
        }
        public DataTable GetDeliveredSalesInsuDetails(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _PCenter, string _User, string _RepType, string _StockType, string _InvNo, string _Pc, string _Com, string _Promotor, int _freeissue)
        {   // Sanjeewa
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();
            if (_securityDAL.Is_Report_DR("Delivered_Sales_Insu") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetDeliveredSalesInsuDetails(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _PCenter, _User, _RepType, _StockType, _InvNo, _Pc, _Com, _Promotor, _freeissue);
        }
        public string GetDeliveredSalesInsuDetails1(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _PCenter, string _User, string _RepType, string _StockType, string _InvNo, string _Com, string _Promotor, int _freeissue, out string _err)
        {   // Sanjeewa
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();
            if (_securityDAL.Is_Report_DR("Delivered_Sales_Insu") == true) _salesDAL.ConnectionOpen_DR();

            int in_ISlast;
            _err = string.Empty;
            string _filePath = string.Empty;
            in_ISlast = 1;

            DataTable _dtResults;
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_Com, _User);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.GetDeliveredSalesInsuDetails(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _PCenter, _User, _RepType, _StockType, _InvNo, drow["tpl_pc"].ToString(), _Com, _Promotor, _freeissue);
                    GLOB_DataTable.Merge(_dtResults);
                    in_ISlast = in_ISlast + 1;
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }
        public DataTable GetComparisonofDeliveredSalesDetails(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _PCenter, string _User, string _RepType, string _StockType, string _InvNo, string _Pc, string _Com, string _Promotor, int _freeissue, string _IsMonth, string _IsDelivered)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("DeliveredSales") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetComparisonofDeliveredSalesDetails(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _PCenter, _User, _RepType, _StockType, _InvNo, _Pc, _Com, _Promotor, _freeissue, _IsMonth, _IsDelivered);
        }
        public DataTable GetTotalSales8020Details(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _PCenter, string _User, string _RepType, string _StockType, string _InvNo, string _Pc, string _Com, int _Margin, string _type)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetTotalSales8020Details(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _PCenter, _User, _RepType, _StockType, _InvNo, _Pc, _Com, _Margin, _type);
        }
        public DataTable GetTotalSales8020Summary(int _Margin, string _type, string _User)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetTotalSales8020Summary(_Margin, _type, _User);
        }
        public Int32 DeleteCustomerAnalysisRep(string _User)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            int x = _salesDAL.DeleteCustomerAnalysisRep(_User);
            _salesDAL.ConnectionClose();
            return x;
        }
        public DataTable GetDeliveredSalesDetailsAuditReport(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _PCenter, string _User, string _RepType, string _StockType, string _InvNo, string _Com, string _Pc, int _noDays)
        {   // nADEEKA
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();
            if (_securityDAL.Is_Report_DR("DeliveredSales_Audit") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetDeliveredSalesDetailsAuditReport(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _PCenter, _User, _RepType, _StockType, _InvNo, _Com, _Pc, _noDays);
        }
        public DataTable GetCustomerInfoDetails(DateTime _fromDate, DateTime _toDate, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _User, string _Pc, string _Com, Int16 _locno)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetCustomerInfoDetails(_fromDate, _toDate, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _User, _Pc, _Com, _locno);
        }
        public DataTable GetDeliveredSalesGRNDetails(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _PCenter, string _User, string _RepType, string _StockType, string _InvNo, string _Supplier, string _PONo, string _com, string _pc, int _isExport)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("DeliveredSales") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.GetDeliveredSalesGRNDetails(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _PCenter, _User, _RepType, _StockType, _InvNo, _Supplier, _PONo, _com, _pc, _isExport);
        }
        public DataTable GetDeliveredSalesGRNCostDetails(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _PCenter, string _User, string _RepType, string _StockType, string _InvNo, string _Supplier, string _PONo, string _com, string _pc, int _isExport)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetDeliveredSalesGRNCostDetails(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _PCenter, _User, _RepType, _StockType, _InvNo, _Supplier, _PONo, _com, _pc, _isExport);
        }
        public DataTable GetQuotationPrintDetails(string _QuoNo)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetQuotationPrintDetails(_QuoNo);
        }
        public DataTable GetQuotationWarrantyPrintDetails(string _Company)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetQuotationWarrantyPrintDetails(_Company);
        }
        public DataTable GetEliteCommissionDetails(DateTime _fromDate, DateTime _toDate, string _User)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetEliteCommissionDetails(_fromDate, _toDate, _User);
        }
        public DataTable GetBalanceWarrantyClaimCRNoteDetails(DateTime _fromDate, DateTime _toDate, string _Dealer, string _User)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetBalanceWarrantyClaimCRNoteDetails(_fromDate, _toDate, _Dealer, _User);
        }
        public DataTable GetSalesPromoAchievementDetails(DateTime _fromDate, DateTime _toDate, string _circularno, string _scheme, string _User)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetSalesPromoAchievementDetails(_fromDate, _toDate, _circularno, _scheme, _User);
        }
        public DataTable GetNotRegVehDetails(string _User, DateTime _fromDate, DateTime _toDate)
        {   // Sanjeewa
            _salesDAL = new SalesDAL();
            return _salesDAL.GetNotRegVehDetails(_User, _fromDate, _toDate);
        }

        // WIMAL 2016/12/16
        public DataTable GETSELL_OUT_REPORT(DateTime _fromdate, DateTime _todate, string _user_id, string _Brand, string _Model, string _Itemcode, string _Itemcat1, string _Itemcat2, string _Itemcat3, string _Promotor, string _Customer, string _SalesExc)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("SELL_OUT_REPORT") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GETSELL_OUT_REPORT(_fromdate, _todate, _user_id, _Brand, _Model, _Itemcode, _Itemcat1, _Itemcat2, _Itemcat3, _Promotor, _Customer, _SalesExc);
        }

        //Wimal 2016/12/24
        public string GetFitchExcel(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _Cat4, string _Cat5, string _User, string _RepType, string _StockType, string _InvNo, string _Com, string _Promotor,
            int _freeissue, string _itemclasif, string _brndmgr, string _Group, bool withReversal, int _rplitm, DateTime _fromDate2, DateTime _toDate2, Int16 _intercom, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            _reportDAL = new ReptCommonDAL();
            DataTable GLOB_DataTable = new DataTable();
            DataTable _dtGP = new DataTable();


            //DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_Com, _User);
            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("GPReport") == true) _salesDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.Get_Gp_Data(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _User, _RepType, _StockType, _InvNo, drow["tpl_pc"].ToString(), drow["tpl_com"].ToString(), _Promotor,
                        _freeissue, _itemclasif, _brndmgr, withReversal, _rplitm, _fromDate2, _toDate2, _intercom);

                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            var GP = from b in GLOB_DataTable.AsEnumerable()
                     //group b by new { cat1 = b.Field<string>("ITEM CAT 1"), cat1desc = b.Field<string>("ITEM CAT 1 DESCRIPTION") } into g
                     group b by new { cat1 = b.Field<string>("ITEM CAT 1"), cat1desc = b.Field<string>("ITEM CAT 1 DESCRIPTION"), brnd = b.Field<string>("ITEM BRAND"), brnddesc = b.Field<string>("BRAND NAME") } into g
                     orderby g.Key.cat1
                     select new
                     {
                         /* PC_CODE = g.Key.cat1,
                          PC_DESCRIPTION = g.Key.cat1desc,
                          QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
                          NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),                         
                          GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                          GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0*/
                         CAT_CODE = g.Key.cat1,
                         CAT_DESCRIPTION = g.Key.cat1desc,
                         BRAND_CODE = g.Key.brnd,
                         BRAND_DESCRIPTION = g.Key.brnddesc,
                         QTY_Total = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
                         NET_SALE_Total = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
                         GROSS_PROFIT_Total = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                         GP_PER_Total = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0,
                         QTY_External = g.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("ITEM QTY") : 0),
                         NET_SAL_External = g.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0),
                         GROSS_PROFIT_External = g.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("GROSS PROFIT") : 0),
                         GP_PER_External = (g.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0) != 0) ? (g.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("GROSS PROFIT") : 0) / g.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0)) * 100 : 0,
                         QTY_Internal = g.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("ITEM QTY") : 0),
                         NET_SALE_Internal = g.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0),
                         GROSS_PROFIT_Internal = g.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("GROSS PROFIT") : 0),
                         GP_PER_Internal = (g.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0) != 0) ? (g.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("GROSS PROFIT") : 0) / g.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0)) * 100 : 0
                     };

            DataTable GP1 = LINQResultToDataTable(GP);
            _dtGP.Merge(GP1);


            var GP_T = from bb in GLOB_DataTable.AsEnumerable()
                       group bb by new { cat1 = bb.Field<string>("COMPANY CODE") } into g_T
                       select new
                       {//PC TYPE,'INTERNAL','EXTERNAL'

                           /* PC_CODE = g.Key.cat1,
                            PC_DESCRIPTION = g.Key.cat1desc,
                            QTY = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
                            NET_SALE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),                         
                            GROSS_PROFIT = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                            GP_MARGINE = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0*/
                           CAT_CODE = "Total",
                           CAT_DESCRIPTION = "Total",
                           BRAND_CODE = "",
                           BRAND_DESCRIPTION = "",
                           QTY_Total = g_T.Sum(x => x.Field<Decimal>("ITEM QTY")),
                           NET_SALE_Total = g_T.Sum(x => x.Field<Decimal>("NET AMOUNT")),
                           GROSS_PROFIT_Total = g_T.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                           GP_PER_Total = g_T.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g_T.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g_T.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0,
                           QTY_External = g_T.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("ITEM QTY") : 0),
                           NET_SAL_External = g_T.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0),
                           GROSS_PROFIT_External = g_T.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("GROSS PROFIT") : 0),
                           GP_PER_External = (g_T.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0) != 0) ? (g_T.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("GROSS PROFIT") : 0) / g_T.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0)) * 100 : 0,
                           QTY_Internal = g_T.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("ITEM QTY") : 0),
                           NET_SALE_Internal = g_T.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0),
                           GROSS_PROFIT_Internal = g_T.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("GROSS PROFIT") : 0),
                           GP_PER_Internal = (g_T.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0) != 0) ? (g_T.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("GROSS PROFIT") : 0) / g_T.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0)) * 100 : 0
                       };

            DataTable GP1_T = LINQResultToDataTable(GP_T);
            _dtGP.Merge(GP1_T);

            DataRow dataRow_Brnd;
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["CAT_CODE"] = "ADD";
            _dtGP.Rows.Add(dataRow_Brnd);
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["CAT_CODE"] = "Central A/C division";
            _dtGP.Rows.Add(dataRow_Brnd);
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["CAT_CODE"] = "HP Interest";
            _dtGP.Rows.Add(dataRow_Brnd);
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["CAT_CODE"] = "Installation Income";
            _dtGP.Rows.Add(dataRow_Brnd);
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["CAT_CODE"] = "Less";
            _dtGP.Rows.Add(dataRow_Brnd);
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["CAT_CODE"] = "Stock Write off";
            _dtGP.Rows.Add(dataRow_Brnd);
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["CAT_CODE"] = "Installation Cost";
            _dtGP.Rows.Add(dataRow_Brnd);
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["CAT_CODE"] = "Export expenses";
            _dtGP.Rows.Add(dataRow_Brnd);
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["CAT_CODE"] = "Unrealised Profit";
            _dtGP.Rows.Add(dataRow_Brnd);
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["CAT_CODE"] = "TOTAL";
            _dtGP.Rows.Add(dataRow_Brnd);



            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Fitch Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, TitleData, _dtGP, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        //Wimal 2016/12/24
        public string GetFitch_CatBrndExcel(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _Cat4, string _Cat5, string _User, string _RepType, string _StockType, string _InvNo, string _Com, string _Promotor,
            int _freeissue, string _itemclasif, string _brndmgr, string _Group, bool withReversal, int _rplitm, DateTime _fromDate2, DateTime _toDate2, Int16 _intercom, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _salesDAL = new SalesDAL();
            _reportDAL = new ReptCommonDAL();
            DataTable GLOB_DataTable = new DataTable();
            DataTable _dtGP = new DataTable();


            //DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_Com, _User);
            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("GPReport") == true) _salesDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.Get_Gp_Data(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _User, _RepType, _StockType, _InvNo, drow["tpl_pc"].ToString(), drow["tpl_com"].ToString(), _Promotor,
                        _freeissue, _itemclasif, _brndmgr, withReversal, _rplitm, _fromDate2, _toDate2, _intercom);

                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            var GP = from b in GLOB_DataTable.AsEnumerable()
                     //group b by new { cat1 = b.Field<string>("ITEM CAT 1"), cat1desc = b.Field<string>("ITEM CAT 1 DESCRIPTION") } into g
                     group b by new { cat1 = b.Field<string>("ITEM CAT 1"), cat1desc = b.Field<string>("ITEM CAT 1 DESCRIPTION") } into g
                     orderby g.Key.cat1
                     select new
                     {
                         CAT_CODE = g.Key.cat1,
                         CAT_DESCRIPTION = g.Key.cat1desc,
                         BRAND_CODE = "",
                         BRAND_DESCRIPTION = "",
                         QTY_Total = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
                         NET_SALE_Total = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
                         GROSS_PROFIT_Total = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                         GP_PER_Total = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0,
                         QTY_External = g.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("ITEM QTY") : 0),
                         NET_SAL_External = g.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0),
                         GROSS_PROFIT_External = g.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("GROSS PROFIT") : 0),
                         GP_PER_External = (g.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0) != 0) ? (g.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("GROSS PROFIT") : 0) / g.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0)) * 100 : 0,
                         QTY_Internal = g.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("ITEM QTY") : 0),
                         NET_SALE_Internal = g.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0),
                         GROSS_PROFIT_Internal = g.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("GROSS PROFIT") : 0),
                         GP_PER_Internal = (g.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0) != 0) ? (g.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("GROSS PROFIT") : 0) / g.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0)) * 100 : 0
                     };

            DataTable GP1 = LINQResultToDataTable(GP);
            _dtGP.Merge(GP1);


            var GP_T = from bb in GLOB_DataTable.AsEnumerable()
                       group bb by new { cat1 = bb.Field<string>("COMPANY CODE") } into g_T
                       select new
                       {//PC TYPE,'INTERNAL','EXTERNAL'

                           CAT_CODE = "Total",
                           CAT_DESCRIPTION = "Total",
                           BRAND_CODE = "",
                           BRAND_DESCRIPTION = "",
                           QTY_Total = g_T.Sum(x => x.Field<Decimal>("ITEM QTY")),
                           NET_SALE_Total = g_T.Sum(x => x.Field<Decimal>("NET AMOUNT")),
                           GROSS_PROFIT_Total = g_T.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                           GP_PER_Total = g_T.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g_T.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g_T.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0,
                           QTY_External = g_T.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("ITEM QTY") : 0),
                           NET_SAL_External = g_T.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0),
                           GROSS_PROFIT_External = g_T.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("GROSS PROFIT") : 0),
                           GP_PER_External = (g_T.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0) != 0) ? (g_T.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("GROSS PROFIT") : 0) / g_T.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0)) * 100 : 0,
                           QTY_Internal = g_T.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("ITEM QTY") : 0),
                           NET_SALE_Internal = g_T.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0),
                           GROSS_PROFIT_Internal = g_T.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("GROSS PROFIT") : 0),
                           GP_PER_Internal = (g_T.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0) != 0) ? (g_T.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("GROSS PROFIT") : 0) / g_T.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0)) * 100 : 0
                       };

            DataTable GP1_T = LINQResultToDataTable(GP_T);
            _dtGP.Merge(GP1_T);


            // Brand - Started
            DataRow dataRow_Brnd;
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["CAT_CODE"] = "ADD";
            // dataRow_Brnd["CAT_DESCRIPTION"] = "";
            // dataRow_Brnd["BRAND_CODE"] = "";
            //dataRow_Brnd["BRAND_DESCRIPTION"] = "";
            //dataRow_Brnd["QTY_Total"] = 0;
            //dataRow_Brnd["NET_SALE_Total"] = 0;
            //dataRow_Brnd["GROSS_PROFIT_Total"] = 0;
            //dataRow_Brnd["GP_PER_Total"] = 0;
            //dataRow_Brnd["QTY_External"] = 0;
            //dataRow_Brnd["NET_SAL_External"] = 0;
            //dataRow_Brnd["GROSS_PROFIT_External"] = 0;
            //dataRow_Brnd["GP_PER_External"] = 0;
            //dataRow_Brnd["QTY_Internal"] = 0;
            //dataRow_Brnd["NET_SALE_Internal"] = 0;
            //dataRow_Brnd["GROSS_PROFIT_Internal"] = 0;
            //dataRow_Brnd["GP_PER_Internal"] = 0;
            _dtGP.Rows.Add(dataRow_Brnd);

            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["CAT_CODE"] = "Central A/C division";
            _dtGP.Rows.Add(dataRow_Brnd);
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["CAT_CODE"] = "HP Interest";
            _dtGP.Rows.Add(dataRow_Brnd);
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["CAT_CODE"] = "Installation Income";
            _dtGP.Rows.Add(dataRow_Brnd);
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["CAT_CODE"] = "Less";
            _dtGP.Rows.Add(dataRow_Brnd);
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["CAT_CODE"] = "Stock Write off";
            _dtGP.Rows.Add(dataRow_Brnd);
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["CAT_CODE"] = "Installation Cost";
            _dtGP.Rows.Add(dataRow_Brnd);
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["CAT_CODE"] = "Export expenses";
            _dtGP.Rows.Add(dataRow_Brnd);
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["CAT_CODE"] = "Unrealised Profit";
            _dtGP.Rows.Add(dataRow_Brnd);
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["CAT_CODE"] = "TOTAL";
            _dtGP.Rows.Add(dataRow_Brnd);

            var GP_Brnd = from b in GLOB_DataTable.AsEnumerable()
                          //group b by new { cat1 = b.Field<string>("ITEM CAT 1"), cat1desc = b.Field<string>("ITEM CAT 1 DESCRIPTION") } into g
                          group b by new { brnd = b.Field<string>("ITEM BRAND"), brnddesc = b.Field<string>("BRAND NAME") } into g
                          orderby g.Key.brnd
                          select new
                          {
                              CAT_CODE = "",
                              CAT_DESCRIPTION = "",
                              BRAND_CODE = g.Key.brnd,
                              BRAND_DESCRIPTION = g.Key.brnddesc,
                              QTY_Total = g.Sum(x => x.Field<Decimal>("ITEM QTY")),
                              NET_SALE_Total = g.Sum(x => x.Field<Decimal>("NET AMOUNT")),
                              GROSS_PROFIT_Total = g.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                              GP_PER_Total = g.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0,
                              QTY_External = g.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("ITEM QTY") : 0),
                              NET_SAL_External = g.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0),
                              GROSS_PROFIT_External = g.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("GROSS PROFIT") : 0),
                              GP_PER_External = (g.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0) != 0) ? (g.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("GROSS PROFIT") : 0) / g.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0)) * 100 : 0,
                              QTY_Internal = g.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("ITEM QTY") : 0),
                              NET_SALE_Internal = g.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0),
                              GROSS_PROFIT_Internal = g.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("GROSS PROFIT") : 0),
                              GP_PER_Internal = (g.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0) != 0) ? (g.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("GROSS PROFIT") : 0) / g.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0)) * 100 : 0
                          };

            DataTable GP1_brnd = LINQResultToDataTable(GP_Brnd);
            _dtGP.Merge(GP1_brnd);


            var GP_T_brnd = from bb in GLOB_DataTable.AsEnumerable()
                            group bb by new { cat1 = bb.Field<string>("COMPANY CODE") } into g_T
                            select new
                            {//PC TYPE,'INTERNAL','EXTERNAL'

                                CAT_CODE = "",
                                CAT_DESCRIPTION = "",
                                BRAND_CODE = "Total",
                                BRAND_DESCRIPTION = "Total",
                                QTY_Total = g_T.Sum(x => x.Field<Decimal>("ITEM QTY")),
                                NET_SALE_Total = g_T.Sum(x => x.Field<Decimal>("NET AMOUNT")),
                                GROSS_PROFIT_Total = g_T.Sum(x => x.Field<Decimal>("GROSS PROFIT")),
                                GP_PER_Total = g_T.Sum(x => x.Field<Decimal>("NET AMOUNT")) != 0 ? (g_T.Sum(x => x.Field<Decimal>("GROSS PROFIT")) / g_T.Sum(x => x.Field<Decimal>("NET AMOUNT"))) * 100 : 0,
                                QTY_External = g_T.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("ITEM QTY") : 0),
                                NET_SAL_External = g_T.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0),
                                GROSS_PROFIT_External = g_T.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("GROSS PROFIT") : 0),
                                GP_PER_External = (g_T.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0) != 0) ? (g_T.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("GROSS PROFIT") : 0) / g_T.Sum(x => x.Field<string>("PC TYPE") != "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0)) * 100 : 0,
                                QTY_Internal = g_T.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("ITEM QTY") : 0),
                                NET_SALE_Internal = g_T.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0),
                                GROSS_PROFIT_Internal = g_T.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("GROSS PROFIT") : 0),
                                GP_PER_Internal = (g_T.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0) != 0) ? (g_T.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("GROSS PROFIT") : 0) / g_T.Sum(x => x.Field<string>("PC TYPE") == "INTERNAL" ? x.Field<Decimal>("NET AMOUNT") : 0)) * 100 : 0
                            };

            DataTable GP1_T_brnd = LINQResultToDataTable(GP_T_brnd);
            _dtGP.Merge(GP1_T_brnd);

            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["BRAND_CODE"] = "Cash sales";
            _dtGP.Rows.Add(dataRow_Brnd);
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["BRAND_CODE"] = "Cash sales - Retail Channel";
            _dtGP.Rows.Add(dataRow_Brnd);
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["BRAND_CODE"] = "Hire Purchase Sales - Retail Channel";
            _dtGP.Rows.Add(dataRow_Brnd);
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["BRAND_CODE"] = "Interest on HP Sales - Retail Channel";
            _dtGP.Rows.Add(dataRow_Brnd);
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["BRAND_CODE"] = "Credit Sales Retail Channel";
            _dtGP.Rows.Add(dataRow_Brnd);
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["BRAND_CODE"] = "Credit - Dealer Sales";
            _dtGP.Rows.Add(dataRow_Brnd);
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["BRAND_CODE"] = "Credit - Direct Sales Channel";
            _dtGP.Rows.Add(dataRow_Brnd);
            dataRow_Brnd = _dtGP.NewRow();
            dataRow_Brnd["BRAND_CODE"] = "Credit - Central AC";
            _dtGP.Rows.Add(dataRow_Brnd);

            // Brand - End

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Fitch Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, TitleData, _dtGP, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }


        //Lakshan 30 Dec 2016
        public ImportsCostItem GET_PREV_ITEM_COST_FOR_COSTSHEET(string _item, string _comp)
        {
            decimal _dpsCost = 0, _dfsCost = 0, _tmp = 0; string _dfsDocNo = "", _dpsDocNo = "", _docNo = ""; DateTime _dpsDt = DateTime.MinValue, _dfsDt = DateTime.MinValue, _tmpDt = DateTime.MinValue;

            ImportsCostItem _cstItm = new ImportsCostItem();
            _inventoryDAL = new InventoryDAL();
            DataTable _dtPrevCostData = _inventoryDAL.GET_PREV_ITEM_COST_FOR_COSTSHEET(_item, _comp);
            if (_dtPrevCostData != null)
            {
                if (_dtPrevCostData.Rows.Count > 0)
                {
                    _dpsCost = decimal.TryParse(_dtPrevCostData.Rows[0]["DPS_COST"].ToString(), out _tmp) ? Convert.ToDecimal(_dtPrevCostData.Rows[0]["DPS_COST"].ToString()) : 0;
                    _dfsCost = decimal.TryParse(_dtPrevCostData.Rows[0]["DFS_COST"].ToString(), out _tmp) ? Convert.ToDecimal(_dtPrevCostData.Rows[0]["DFS_COST"].ToString()) : 0;
                    _dpsDocNo = _dtPrevCostData.Rows[0]["DPS_DOC"].ToString();
                    _dfsDocNo = _dtPrevCostData.Rows[0]["DFS_DOC"].ToString();
                    _dpsDt = DateTime.TryParse(_dtPrevCostData.Rows[0]["DPS_DT"].ToString(), out _tmpDt) ? Convert.ToDateTime(_dtPrevCostData.Rows[0]["DPS_DT"].ToString()) : DateTime.MinValue;
                    _dfsDt = DateTime.TryParse(_dtPrevCostData.Rows[0]["DFS_DT"].ToString(), out _tmpDt) ? Convert.ToDateTime(_dtPrevCostData.Rows[0]["DFS_DT"].ToString()) : DateTime.MinValue;

                    _cstItm.Ici_unit_amt = _dpsCost == 0 ? _dfsCost : _dpsCost;
                    _docNo = string.IsNullOrEmpty(_dpsDocNo) ? _dfsDocNo : _dpsDocNo;
                    _cstItm.Ici_cre_dt = _dpsDt == DateTime.MinValue ? _dfsDt : _dpsDt;
                    List<InventoryBatchN> _invBatchList = _inventoryDAL.GET_INT_BATCH_DATA(new InventoryBatchN()
                    {
                        Inb_doc_no = _docNo
                    });
                    InventoryBatchN _invBatch = _invBatchList.Where(c => c.Inb_itm_cd == _item).FirstOrDefault();
                    if (_invBatch != null)
                    {
                        _cstItm.Ici_doc_no = _invBatch.Inb_base_doc_no;
                    }
                }
            }
            return _cstItm;
        }

        //Chamal 29-Dec-2016
        public DataTable GetClosingBalanceWithValueProcess(string _com, string _loc, DateTime _fromDt, DateTime _toDt, int _procId, string _sessionId, string _user)
        {
            try
            {


                _generalDAL = new GeneralDAL();

                int l, i = 0;
                DataTable _inDt = _generalDAL.Get_opbal_data(_com, _loc, _fromDt.Date, _toDt.Date, _procId, "OP");
                //DataTable _inDtTemp = _generalDAL.Get_opbal_data(_com, _loc, _fromDt.Date, _toDt.Date, _procId, "IN1");
                //_inDt.Merge(_inDtTemp);
                DataTable _outDt = _generalDAL.Get_opbal_data(_com, _loc, _fromDt.Date, _toDt.Date, _procId, "OUT");
                i = 1;
                _inDt.Columns.Add("LOGSEQ", typeof(System.Int32));
                foreach (DataRow row in _inDt.Rows)
                { row["LOGSEQ"] = i; i++; }

                i = 1;
                _outDt.Columns.Add("LOGSEQ", typeof(System.Int32));
                foreach (DataRow row in _outDt.Rows)
                { row["LOGSEQ"] = i; i++; }
                i = 0;

                DataView view = new DataView(_outDt);
                DataTable _locDt = view.ToTable(true, "LOC");

                #region Process
                for (l = 0; l <= _locDt.Rows.Count - 1; l++)
                {
                    string _oloc = _locDt.Rows[l]["LOC"].ToString().ToUpper();
                    DataTable results = _outDt.AsEnumerable().Where(dr => dr.Field<string>("LOC").ToUpper().Contains(_oloc) && dr.Field<decimal>("BAL_QTY") > 0).OrderBy(or => or.Field<string>("ITEMCODE")).ThenBy(or => or.Field<string>("DOCNO")).CopyToDataTable();
                    //_sql = "SELECT * FROM CHML_INV_BAL_OUT@SCMREP WHERE LOC ='" + _loc + "' AND BAL_QTY>0   ORDER BY ITEMCODE,DOCNO";
                    for (i = 0; i <= results.Rows.Count - 1; i++)
                    {
                        string _outdoc = results.Rows[i]["OUTDOCNO"].ToString();
                        string _basedocno = results.Rows[i]["DOCNO"].ToString();
                        string _baseitemcode = results.Rows[i]["ITEMCODE"].ToString();
                        string _baseitemstatus = results.Rows[i]["ITEMSTATUS"].ToString();
                        int _baseitemline = Convert.ToInt32(results.Rows[i]["ITEMLINE"].ToString());
                        int _basebatchline = Convert.ToInt32(results.Rows[i]["BATCHLINE"].ToString());
                        decimal _outqty = Convert.ToDecimal(results.Rows[i]["QTY"].ToString());
                        decimal _unitcost = Convert.ToDecimal(results.Rows[i]["UNITCOST"].ToString());
                        int _outseq = Convert.ToInt32(results.Rows[i]["LOGSEQ"].ToString());

                        while (_outqty > 0)
                        {
                            //Base doc no , item line and batch line
                            //_sql = "SELECT * FROM CHML_INV_BAL@SCMREP WHERE DOCNO =:p_doc AND ITEMCODE=:p_itm AND ITEMSTATUS=:p_itmstatus AND ITEMLINE =:p_itmline AND BATCHLINE=:p_batchline AND BAL_QTY>0";
                            //_oCom = new OracleCommand(_sql, oConnEMS) { BindByName = true };
                            //_oDa.SelectCommand = _oCom;
                            //_oCom.Parameters.Add(":p_doc", OracleDbType.NVarchar2).Value = _basedocno;
                            //_oCom.Parameters.Add(":p_itm", OracleDbType.NVarchar2).Value = _baseitemcode;
                            //_oCom.Parameters.Add(":p_itmstatus", OracleDbType.NVarchar2).Value = _baseitemstatus;
                            //_oCom.Parameters.Add(":p_itmline", OracleDbType.Int32).Value = _baseitemline;
                            //_oCom.Parameters.Add(":p_batchline", OracleDbType.Int32).Value = _basebatchline;
                            //_oDa.Fill(_emsData, "OUTDOCS1");

                            var var_results1 = _inDt.AsEnumerable().Where(dr => dr.Field<string>("LOC") == _oloc.ToString() && dr.Field<decimal>("BAL_QTY") > Convert.ToDecimal(0) && dr.Field<string>("DOCNO") == _basedocno.ToString() &&
                                dr.Field<string>("ITEMCODE") == _baseitemcode.ToString() && dr.Field<string>("ITEMSTATUS") == _baseitemstatus.ToString() &&
                                dr.Field<decimal>("ITEMLINE") == Convert.ToDecimal(_baseitemline.ToString()) && dr.Field<decimal>("BATCHLINE") == Convert.ToDecimal(_basebatchline.ToString())
                                ).OrderBy(or => or.Field<string>("ITEMCODE")).ThenBy(or => or.Field<string>("DOCNO"));

                            if (var_results1.Any())
                            {
                                #region Base doc no , item line and batch line
                                DataTable results1 = var_results1.CopyToDataTable();
                                int i1 = 0;
                                for (i1 = 0; i1 <= results1.Rows.Count - 1; i1++)
                                {

                                    decimal _outqty1 = Convert.ToDecimal(results1.Rows[i1]["BAL_QTY"].ToString());
                                    int _inseq = Convert.ToInt32(results1.Rows[i1]["LOGSEQ"].ToString());
                                    decimal _unitcostx = Convert.ToDecimal(results1.Rows[i1]["UNITCOST"].ToString());

                                    //Console.WriteLine("In seq " + _inseq);
                                    //Console.WriteLine("Out seq " + _outseq);
                                    if (_inseq == 33)
                                    {
                                        _inseq = 33;
                                    }
                                    if (_outqty > _outqty1)
                                    {
                                        //_sql = "UPDATE CHML_INV_BAL@SCMREP SET BAL_QTY=BAL_QTY - :p_qty WHERE LOGSEQ=:seq";
                                        //_oCom = new OracleCommand(_sql, oConnEMS) { CommandType = CommandType.Text, BindByName = true };
                                        //_oCom.Parameters.Add(":p_qty", OracleDbType.Decimal).Value = _outqty1;
                                        //_oCom.Parameters.Add(":seq", OracleDbType.Int32).Value = _inseq;
                                        //_ref = _oCom.ExecuteNonQuery();

                                        DataRow rowEditIn = _inDt.Select("LOGSEQ=" + _inseq + "").FirstOrDefault();
                                        rowEditIn["BAL_QTY"] = Convert.ToDecimal(rowEditIn["BAL_QTY"].ToString()) - _outqty1;


                                        //_sql = "UPDATE CHML_INV_BAL_OUT@SCMREP SET BAL_QTY=BAL_QTY - :p_qty WHERE LOGSEQ=:seq";
                                        //_oCom = new OracleCommand(_sql, oConnEMS) { CommandType = CommandType.Text, BindByName = true };
                                        //_oCom.Parameters.Add(":seq", OracleDbType.Int32).Value = _outseq;
                                        //_oCom.Parameters.Add(":p_qty", OracleDbType.Decimal).Value = _outqty1;
                                        //_ref = _oCom.ExecuteNonQuery();

                                        DataRow rowEditOut = _outDt.Select("LOGSEQ=" + _inseq + "").FirstOrDefault();
                                        rowEditOut["BAL_QTY"] = Convert.ToDecimal(rowEditOut["BAL_QTY"].ToString()) - _outqty1;


                                        if (Math.Round(_unitcostx) != Math.Round(_unitcost))
                                        {
                                            // Console.WriteLine(_outdoc + " | " + _baseitemcode + " | " + _unitcostx + " | " + _unitcost);
                                        }

                                        _outqty = _outqty - _outqty1;
                                        if (_outqty == 0) break;
                                    }
                                    else
                                    {
                                        //_sql = "UPDATE CHML_INV_BAL@SCMREP SET BAL_QTY=BAL_QTY - :p_qty WHERE LOGSEQ=:seq";
                                        //_oCom = new OracleCommand(_sql, oConnEMS) { CommandType = CommandType.Text, BindByName = true };
                                        //_oCom.Parameters.Add(":p_qty", OracleDbType.Decimal).Value = _outqty;
                                        //_oCom.Parameters.Add(":seq", OracleDbType.Int32).Value = _inseq;
                                        //_ref = _oCom.ExecuteNonQuery();

                                        DataRow rowEditIn = _inDt.Select("LOGSEQ=" + _inseq + "").FirstOrDefault();
                                        rowEditIn["BAL_QTY"] = Convert.ToDecimal(rowEditIn["BAL_QTY"].ToString()) - _outqty;

                                        //_sql = "UPDATE CHML_INV_BAL_OUT@SCMREP SET BAL_QTY=BAL_QTY - :p_qty WHERE LOGSEQ=:seq";
                                        //_oCom = new OracleCommand(_sql, oConnEMS) { CommandType = CommandType.Text, BindByName = true };
                                        //_oCom.Parameters.Add(":seq", OracleDbType.Int32).Value = _outseq;
                                        //_oCom.Parameters.Add(":p_qty", OracleDbType.Decimal).Value = _outqty;
                                        //_ref = _oCom.ExecuteNonQuery();

                                        DataRow rowEditOut = _outDt.Select("LOGSEQ=" + _outseq + "").FirstOrDefault();
                                        rowEditOut["BAL_QTY"] = Convert.ToDecimal(rowEditOut["BAL_QTY"].ToString()) - _outqty;

                                        if (Math.Round(_unitcostx) != Math.Round(_unitcost))
                                        {
                                            //Console.WriteLine(_outdoc + " | " + _baseitemcode + " | " + _unitcostx + " | " + _unitcost);
                                        }

                                        _outqty = 0;
                                        if (_outqty == 0) break;

                                    }
                                }
                                results1.Clear();
                                #endregion
                            }
                            else
                            {
                                //----------->
                                int j1 = 0;
                                //Base doc no and item line only
                                //_sql = "SELECT * FROM CHML_INV_BAL@SCMREP WHERE DOCNO =:p_doc AND ITEMCODE=:p_itm AND ITEMSTATUS=:p_itmstatus AND ITEMLINE =:p_itmline AND BAL_QTY>0";
                                //_oCom = new OracleCommand(_sql, oConnEMS) { BindByName = true };
                                //_oDa.SelectCommand = _oCom;
                                //_oCom.Parameters.Add(":p_doc", OracleDbType.NVarchar2).Value = _basedocno;
                                //_oCom.Parameters.Add(":p_itm", OracleDbType.NVarchar2).Value = _baseitemcode;
                                //_oCom.Parameters.Add(":p_itmstatus", OracleDbType.NVarchar2).Value = _baseitemstatus;
                                //_oCom.Parameters.Add(":p_itmline", OracleDbType.Int32).Value = _baseitemline;
                                //_oDa.Fill(_emsData, "OUTDOCS2");

                                var var_results2 = _inDt.AsEnumerable().Where(dr => dr.Field<string>("LOC") == _oloc.ToString() && dr.Field<decimal>("BAL_QTY") > 0 && dr.Field<string>("DOCNO") == _basedocno.ToString() &&
                                dr.Field<string>("ITEMCODE") == _baseitemcode.ToString() && dr.Field<string>("ITEMSTATUS") == _baseitemstatus.ToString() &&
                                dr.Field<decimal>("ITEMLINE") == Convert.ToDecimal(_baseitemline.ToString())
                                ).OrderBy(or => or.Field<string>("ITEMCODE")).ThenBy(or => or.Field<string>("DOCNO"));

                                if (var_results2.Any())
                                {
                                    #region Base doc no and item line only
                                    DataTable results2 = var_results2.CopyToDataTable();
                                    for (j1 = 0; j1 <= results2.Rows.Count - 1; j1++)
                                    {
                                        decimal _outqty1 = Convert.ToDecimal(results2.Rows[j1]["BAL_QTY"].ToString());
                                        int _inseq = Convert.ToInt32(results2.Rows[j1]["LOGSEQ"].ToString());
                                        decimal _unitcostx = Convert.ToDecimal(results2.Rows[j1]["UNITCOST"].ToString());

                                        if (_outqty > _outqty1)
                                        {
                                            DataRow rowEditIn = _inDt.Select("LOGSEQ=" + _inseq + "").FirstOrDefault();
                                            rowEditIn["BAL_QTY"] = Convert.ToDecimal(rowEditIn["BAL_QTY"].ToString()) - _outqty1;

                                            DataRow rowEditOut = _outDt.Select("LOGSEQ=" + _inseq + "").FirstOrDefault();
                                            rowEditOut["BAL_QTY"] = Convert.ToDecimal(rowEditOut["BAL_QTY"].ToString()) - _outqty1;

                                            if (Math.Round(_unitcostx) != Math.Round(_unitcost))
                                            {
                                                //Console.WriteLine(_outdoc + " | " + _baseitemcode + " | " + _unitcostx + " | " + _unitcost);
                                            }

                                            _outqty = _outqty - _outqty1;
                                            if (_outqty == 0) break;
                                        }
                                        else
                                        {
                                            DataRow rowEditIn = _inDt.Select("LOGSEQ=" + _inseq + "").FirstOrDefault();
                                            rowEditIn["BAL_QTY"] = Convert.ToDecimal(rowEditIn["BAL_QTY"].ToString()) - _outqty;

                                            DataRow rowEditOut = _outDt.Select("LOGSEQ=" + _outseq + "").FirstOrDefault();
                                            rowEditOut["BAL_QTY"] = Convert.ToDecimal(rowEditOut["BAL_QTY"].ToString()) - _outqty;

                                            if (Math.Round(_unitcostx) != Math.Round(_unitcost))
                                            {
                                                //Console.WriteLine(_outdoc + " | " + _baseitemcode + " | " + _unitcostx + " | " + _unitcost);
                                            }

                                            _outqty = 0;
                                            if (_outqty == 0) break;
                                        }
                                    }
                                    results2.Clear();
                                    #endregion
                                }
                                else
                                {
                                    int j2 = 0;
                                    //Base doc no , item code , item status and unit cost
                                    //_sql = "SELECT * FROM CHML_INV_BAL@SCMREP WHERE DOCNO =:p_doc AND ITEMCODE=:p_itm AND ITEMSTATUS=:p_itmstatus AND UNITCOST =:p_unitcost AND BAL_QTY>0";
                                    //_oCom = new OracleCommand(_sql, oConnEMS) { BindByName = true };
                                    //_oDa.SelectCommand = _oCom;
                                    //_oCom.Parameters.Add(":p_doc", OracleDbType.NVarchar2).Value = _basedocno;
                                    //_oCom.Parameters.Add(":p_itm", OracleDbType.NVarchar2).Value = _baseitemcode;
                                    //_oCom.Parameters.Add(":p_itmstatus", OracleDbType.NVarchar2).Value = _baseitemstatus;
                                    //_oCom.Parameters.Add(":p_unitcost", OracleDbType.Decimal).Value = _unitcost;
                                    //_oDa.Fill(_emsData, "OUTDOCS3");

                                    var var_results3 = _inDt.AsEnumerable().Where(dr => dr.Field<string>("LOC") == _oloc.ToString() && dr.Field<decimal>("BAL_QTY") > 0 && dr.Field<string>("DOCNO") == _basedocno.ToString() &&
                                        dr.Field<string>("ITEMCODE") == _baseitemcode.ToString() && dr.Field<string>("ITEMSTATUS") == _baseitemstatus.ToString() &&
                                        dr.Field<decimal>("UNITCOST") == _unitcost
                                        ).OrderBy(or => or.Field<string>("ITEMCODE")).ThenBy(or => or.Field<string>("DOCNO"));

                                    if (var_results3.Any())
                                    {
                                        DataTable results3 = var_results3.CopyToDataTable();
                                        for (j2 = 0; j2 <= results3.Rows.Count - 1; j2++)
                                        {
                                            decimal _outqty1 = Convert.ToDecimal(results3.Rows[j2]["BAL_QTY"].ToString());
                                            int _inseq = Convert.ToInt32(results3.Rows[j2]["LOGSEQ"].ToString());

                                            if (_outqty > _outqty1)
                                            {
                                                DataRow rowEditIn = _inDt.Select("LOGSEQ=" + _inseq + "").FirstOrDefault();
                                                rowEditIn["BAL_QTY"] = Convert.ToDecimal(rowEditIn["BAL_QTY"].ToString()) - _outqty1;

                                                DataRow rowEditOut = _outDt.Select("LOGSEQ=" + _inseq + "").FirstOrDefault();
                                                rowEditOut["BAL_QTY"] = Convert.ToDecimal(rowEditOut["BAL_QTY"].ToString()) - _outqty1;

                                                _outqty = _outqty - _outqty1;
                                                if (_outqty == 0) break;
                                            }
                                            else
                                            {
                                                DataRow rowEditIn = _inDt.Select("LOGSEQ=" + _inseq + "").FirstOrDefault();
                                                rowEditIn["BAL_QTY"] = Convert.ToDecimal(rowEditIn["BAL_QTY"].ToString()) - _outqty;

                                                DataRow rowEditOut = _outDt.Select("LOGSEQ=" + _outseq + "").FirstOrDefault();
                                                rowEditOut["BAL_QTY"] = Convert.ToDecimal(rowEditOut["BAL_QTY"].ToString()) - _outqty;

                                                _outqty = 0;
                                                if (_outqty == 0) break;
                                            }
                                        }
                                        results3.Clear();
                                    }
                                    else
                                    {
                                        int j4 = 0;
                                        //Base doc no , item code , item status and ROUND(unit cost)
                                        //_sql = "SELECT * FROM CHML_INV_BAL@SCMREP WHERE DOCNO =:p_doc AND ITEMCODE=:p_itm AND ITEMSTATUS=:p_itmstatus AND round(UNITCOST) =:p_unitcost AND BAL_QTY>0";
                                        //_oCom = new OracleCommand(_sql, oConnEMS) { BindByName = true };
                                        //_oDa.SelectCommand = _oCom;
                                        //_oCom.Parameters.Add(":p_doc", OracleDbType.NVarchar2).Value = _basedocno;
                                        //_oCom.Parameters.Add(":p_itm", OracleDbType.NVarchar2).Value = _baseitemcode;
                                        //_oCom.Parameters.Add(":p_itmstatus", OracleDbType.NVarchar2).Value = _baseitemstatus;
                                        //_oCom.Parameters.Add(":p_unitcost", OracleDbType.Int32).Value = Convert.ToInt32(Math.Round(_unitcost));
                                        //_oDa.Fill(_emsData, "OUTDOCS4");

                                        var var_results4 = _inDt.AsEnumerable().Where(dr => dr.Field<string>("LOC") == _oloc.ToString() && dr.Field<decimal>("BAL_QTY") > 0 && dr.Field<string>("DOCNO") == _basedocno.ToString() &&
                                        dr.Field<string>("ITEMCODE") == _baseitemcode.ToString() && dr.Field<string>("ITEMSTATUS") == _baseitemstatus.ToString() &&
                                        Convert.ToInt32(Math.Round(dr.Field<decimal>("UNITCOST"))) == Convert.ToInt32(Math.Round(_unitcost))
                                        ).OrderBy(or => or.Field<string>("ITEMCODE")).ThenBy(or => or.Field<string>("DOCNO"));

                                        if (var_results4.Any())
                                        {
                                            DataTable results4 = var_results4.CopyToDataTable();
                                            for (j4 = 0; j4 <= results4.Rows.Count - 1; j4++)
                                            {
                                                decimal _outqty1 = Convert.ToDecimal(results4.Rows[j4]["BAL_QTY"].ToString());
                                                int _inseq = Convert.ToInt32(results4.Rows[j4]["LOGSEQ"].ToString());

                                                if (_outqty > _outqty1)
                                                {
                                                    DataRow rowEditIn = _inDt.Select("LOGSEQ=" + _inseq + "").FirstOrDefault();
                                                    rowEditIn["BAL_QTY"] = Convert.ToDecimal(rowEditIn["BAL_QTY"].ToString()) - _outqty1;

                                                    DataRow rowEditOut = _outDt.Select("LOGSEQ=" + _inseq + "").FirstOrDefault();
                                                    rowEditOut["BAL_QTY"] = Convert.ToDecimal(rowEditOut["BAL_QTY"].ToString()) - _outqty1;

                                                    _outqty = _outqty - _outqty1;
                                                    if (_outqty == 0) break;
                                                }
                                                else
                                                {
                                                    DataRow rowEditIn = _inDt.Select("LOGSEQ=" + _inseq + "").FirstOrDefault();
                                                    rowEditIn["BAL_QTY"] = Convert.ToDecimal(rowEditIn["BAL_QTY"].ToString()) - _outqty;

                                                    DataRow rowEditOut = _outDt.Select("LOGSEQ=" + _outseq + "").FirstOrDefault();
                                                    rowEditOut["BAL_QTY"] = Convert.ToDecimal(rowEditOut["BAL_QTY"].ToString()) - _outqty;

                                                    _outqty = 0;
                                                    if (_outqty == 0) break;
                                                }
                                            }
                                            results4.Clear();
                                        }
                                        else
                                        {
                                            int j3 = 0;
                                            //Base doc no , item code and item status
                                            //_sql = "SELECT * FROM CHML_INV_BAL@SCMREP WHERE DOCNO =:p_doc AND ITEMCODE=:p_itm AND ITEMSTATUS=:p_itmstatus AND BAL_QTY>0";
                                            //_oCom = new OracleCommand(_sql, oConnEMS) { BindByName = true };
                                            //_oDa.SelectCommand = _oCom;
                                            //_oCom.Parameters.Add(":p_doc", OracleDbType.NVarchar2).Value = _basedocno;
                                            //_oCom.Parameters.Add(":p_itm", OracleDbType.NVarchar2).Value = _baseitemcode;
                                            //_oCom.Parameters.Add(":p_itmstatus", OracleDbType.NVarchar2).Value = _baseitemstatus;
                                            //_oDa.Fill(_emsData, "OUTDOCS4");

                                            var var_results5 = _inDt.AsEnumerable().Where(dr => dr.Field<string>("LOC") == _oloc.ToString() && dr.Field<decimal>("BAL_QTY") > 0 && dr.Field<string>("DOCNO") == _basedocno.ToString() &&
                                                dr.Field<string>("ITEMCODE") == _baseitemcode.ToString() && dr.Field<string>("ITEMSTATUS") == _baseitemstatus.ToString()
                                                ).OrderBy(or => or.Field<string>("ITEMCODE")).ThenBy(or => or.Field<string>("DOCNO"));

                                            if (var_results5.Any())
                                            {
                                                DataTable results5 = var_results5.CopyToDataTable();
                                                for (j3 = 0; j3 <= results5.Rows.Count - 1; j3++)
                                                {
                                                    decimal _outqty1 = Convert.ToDecimal(results5.Rows[j3]["BAL_QTY"].ToString());
                                                    int _inseq = Convert.ToInt32(results5.Rows[j3]["LOGSEQ"].ToString());
                                                    decimal _unitcostx = Convert.ToDecimal(results5.Rows[j3]["UNITCOST"].ToString());

                                                    if (_outqty > _outqty1)
                                                    {
                                                        DataRow rowEditIn = _inDt.Select("LOGSEQ=" + _inseq + "").FirstOrDefault();
                                                        rowEditIn["BAL_QTY"] = Convert.ToDecimal(rowEditIn["BAL_QTY"].ToString()) - _outqty1;

                                                        DataRow rowEditOut = _outDt.Select("LOGSEQ=" + _inseq + "").FirstOrDefault();
                                                        rowEditOut["BAL_QTY"] = Convert.ToDecimal(rowEditOut["BAL_QTY"].ToString()) - _outqty1;

                                                        if (Math.Round(_unitcostx) != Math.Round(_unitcost))
                                                        {
                                                            //Console.WriteLine(_outdoc + " | " + _baseitemcode + " | " + _unitcostx + " | " + _unitcost);
                                                        }

                                                        _outqty = _outqty - _outqty1;
                                                        if (_outqty == 0) break;
                                                    }
                                                    else
                                                    {
                                                        DataRow rowEditIn = _inDt.Select("LOGSEQ=" + _inseq + "").FirstOrDefault();
                                                        rowEditIn["BAL_QTY"] = Convert.ToDecimal(rowEditIn["BAL_QTY"].ToString()) - _outqty;

                                                        DataRow rowEditOut = _outDt.Select("LOGSEQ=" + _outseq + "").FirstOrDefault();
                                                        rowEditOut["BAL_QTY"] = Convert.ToDecimal(rowEditOut["BAL_QTY"].ToString()) - _outqty;

                                                        if (Math.Round(_unitcostx) != Math.Round(_unitcost))
                                                        {
                                                            //Console.WriteLine(_outdoc + " | " + _baseitemcode + " | " + _unitcostx + " | " + _unitcost);
                                                        }

                                                        _outqty = 0;
                                                        if (_outqty == 0) break;
                                                    }

                                                }
                                                results5.Clear();
                                            }
                                            else
                                            {
                                                int j5 = 0;
                                                //Base doc no , item code 
                                                //_sql = "SELECT * FROM CHML_INV_BAL@SCMREP WHERE DOCNO =:p_doc AND ITEMCODE=:p_itm AND BAL_QTY>0";
                                                //_oCom = new OracleCommand(_sql, oConnEMS) { BindByName = true };
                                                //_oDa.SelectCommand = _oCom;
                                                //_oCom.Parameters.Add(":p_doc", OracleDbType.NVarchar2).Value = _basedocno;
                                                //_oCom.Parameters.Add(":p_itm", OracleDbType.NVarchar2).Value = _baseitemcode;
                                                //_oDa.Fill(_emsData, "OUTDOCS5");

                                                var var_results6 = _inDt.AsEnumerable().Where(dr => dr.Field<string>("LOC") == _oloc.ToString() && dr.Field<decimal>("BAL_QTY") > 0 && dr.Field<string>("DOCNO") == _basedocno.ToString() &&
                                                dr.Field<string>("ITEMCODE") == _baseitemcode.ToString()
                                                ).OrderBy(or => or.Field<string>("ITEMCODE")).ThenBy(or => or.Field<string>("DOCNO"));

                                                if (var_results6.Any())
                                                {
                                                    DataTable results6 = var_results6.CopyToDataTable();
                                                    for (j5 = 0; j5 <= results6.Rows.Count - 1; j5++)
                                                    {
                                                        decimal _outqty1 = Convert.ToDecimal(results6.Rows[j5]["BAL_QTY"].ToString());
                                                        int _inseq = Convert.ToInt32(results6.Rows[j5]["LOGSEQ"].ToString());
                                                        decimal _unitcostx = Convert.ToDecimal(results6.Rows[j5]["UNITCOST"].ToString());

                                                        if (_outqty > _outqty1)
                                                        {
                                                            DataRow rowEditIn = _inDt.Select("LOGSEQ=" + _inseq + "").FirstOrDefault();
                                                            rowEditIn["BAL_QTY"] = Convert.ToDecimal(rowEditIn["BAL_QTY"].ToString()) - _outqty1;

                                                            DataRow rowEditOut = _outDt.Select("LOGSEQ=" + _inseq + "").FirstOrDefault();
                                                            rowEditOut["BAL_QTY"] = Convert.ToDecimal(rowEditOut["BAL_QTY"].ToString()) - _outqty1;

                                                            if (Math.Round(_unitcostx) != Math.Round(_unitcost))
                                                            {
                                                                //Console.WriteLine(_outdoc + " | " + _baseitemcode + " | " + _unitcostx + " | " + _unitcost);
                                                            }

                                                            _outqty = _outqty - _outqty1;
                                                            if (_outqty == 0) break;
                                                        }
                                                        else
                                                        {
                                                            DataRow rowEditIn = _inDt.Select("LOGSEQ=" + _inseq + "").FirstOrDefault();
                                                            rowEditIn["BAL_QTY"] = Convert.ToDecimal(rowEditIn["BAL_QTY"].ToString()) - _outqty;

                                                            DataRow rowEditOut = _outDt.Select("LOGSEQ=" + _outseq + "").FirstOrDefault();
                                                            rowEditOut["BAL_QTY"] = Convert.ToDecimal(rowEditOut["BAL_QTY"].ToString()) - _outqty;

                                                            if (Math.Round(_unitcostx) != Math.Round(_unitcost))
                                                            {
                                                                //Console.WriteLine(_outdoc + " | " + _baseitemcode + " | " + _unitcostx + " | " + _unitcost);
                                                            }

                                                            _outqty = 0;
                                                            if (_outqty == 0) break;
                                                        }
                                                    }
                                                    results6.Clear();
                                                }
                                                else
                                                {

                                                    bool _goWithOutStatus = true;

                                                    if (_goWithOutStatus == false)
                                                    {
                                                        DataRow rowEditOut = _outDt.Select("LOGSEQ=" + _outseq + "").FirstOrDefault();
                                                        rowEditOut["STATUS"] = "NOT_FOUND";

                                                        _outqty = 0;
                                                        if (_outqty == 0)
                                                        {
                                                            break;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        #region j6
                                                        int j6 = 0;
                                                        //Base loc, item code, item status, ABS(unit cost)
                                                        //_sql = "SELECT * FROM CHML_INV_BAL@SCMREP WHERE LOC=:p_loc AND ITEMCODE=:p_itm AND ITEMSTATUS=:p_itmstatus AND BAL_QTY>0 ORDER BY UNITCOST";
                                                        //_oCom = new OracleCommand(_sql, oConnEMS) { BindByName = true };
                                                        //_oDa.SelectCommand = _oCom;
                                                        //_oCom.Parameters.Add(":p_loc", OracleDbType.NVarchar2).Value = _loc;
                                                        //_oCom.Parameters.Add(":p_itm", OracleDbType.NVarchar2).Value = _baseitemcode;
                                                        //_oCom.Parameters.Add(":p_itmstatus", OracleDbType.NVarchar2).Value = _baseitemstatus;
                                                        //_oDa.Fill(_emsData, "OUTDOCS6");

                                                        var var_results7 = _inDt.AsEnumerable().Where(dr => dr.Field<string>("LOC") == _oloc.ToString() && dr.Field<decimal>("BAL_QTY") > 0 && dr.Field<string>("ITEMCODE") == _baseitemcode.ToString() &&
                                                            dr.Field<string>("ITEMSTATUS") == _baseitemstatus.ToString()
                                                            ).OrderBy(or => or.Field<decimal>("UNITCOST"));

                                                        if (var_results7.Any())
                                                        {
                                                            DataTable results7 = var_results7.CopyToDataTable();

                                                            int searchValue = Convert.ToInt32(Math.Round(_unitcost));
                                                            int currentNearest = Convert.ToInt32(Math.Round(Convert.ToDecimal(results7.Rows[0]["UNITCOST"].ToString())));
                                                            int currentDifference = Math.Abs(currentNearest - searchValue);

                                                            for (j6 = 0; j6 <= results7.Rows.Count - 1; j6++)
                                                            {
                                                                int currentNearest1 = Convert.ToInt32(Math.Round(Convert.ToDecimal(results7.Rows[j6]["UNITCOST"].ToString())));
                                                                int diff = Math.Abs(currentNearest1 - searchValue);
                                                                if (diff < currentDifference)
                                                                {
                                                                    currentDifference = diff;
                                                                    currentNearest = currentNearest1;
                                                                }
                                                            }
                                                            results7.Clear();

                                                            //_sql = "SELECT * FROM CHML_INV_BAL@SCMREP WHERE LOC=:p_loc AND ITEMCODE=:p_itm AND ITEMSTATUS=:p_itmstatus AND ROUND(UNITCOST) =:p_unitcost AND BAL_QTY>0 ORDER BY DOCDATE";
                                                            //_oCom = new OracleCommand(_sql, oConnEMS) { BindByName = true };
                                                            //_oDa.SelectCommand = _oCom;
                                                            //_oCom.Parameters.Add(":p_loc", OracleDbType.NVarchar2).Value = _loc;
                                                            //_oCom.Parameters.Add(":p_itm", OracleDbType.NVarchar2).Value = _baseitemcode;
                                                            //_oCom.Parameters.Add(":p_itmstatus", OracleDbType.NVarchar2).Value = _baseitemstatus;
                                                            //_oCom.Parameters.Add(":p_unitcost", OracleDbType.Int32).Value = currentNearest;
                                                            //_oDa.Fill(_emsData, "OUTDOCS6");

                                                            results7 = _inDt.AsEnumerable().Where(dr => dr.Field<string>("LOC") == _oloc.ToString() && dr.Field<decimal>("BAL_QTY") > 0 &&
                                                                dr.Field<string>("ITEMCODE") == _baseitemcode.ToString() && dr.Field<string>("ITEMSTATUS") == _baseitemstatus.ToString() &&
                                                                Convert.ToInt32(Math.Round(dr.Field<decimal>("UNITCOST"))) == currentNearest
                                                                ).OrderBy(or => or.Field<DateTime>("DOCDATE")).CopyToDataTable();


                                                            for (j6 = 0; j6 <= results7.Rows.Count - 1; j6++)
                                                            {
                                                                decimal _outqty1 = Convert.ToDecimal(results7.Rows[j6]["BAL_QTY"].ToString());
                                                                int _inseq = Convert.ToInt32(results7.Rows[j6]["LOGSEQ"].ToString());

                                                                if (_outqty > _outqty1)
                                                                {
                                                                    DataRow rowEditIn = _inDt.Select("LOGSEQ=" + _inseq + "").FirstOrDefault();
                                                                    rowEditIn["BAL_QTY"] = Convert.ToDecimal(rowEditIn["BAL_QTY"].ToString()) - _outqty1;

                                                                    DataRow rowEditOut = _outDt.Select("LOGSEQ=" + _inseq + "").FirstOrDefault();
                                                                    rowEditOut["BAL_QTY"] = Convert.ToDecimal(rowEditOut["BAL_QTY"].ToString()) - _outqty1;

                                                                    _outqty = _outqty - _outqty1;
                                                                    if (_outqty == 0) break;
                                                                }
                                                                else
                                                                {
                                                                    DataRow rowEditIn = _inDt.Select("LOGSEQ=" + _inseq + "").FirstOrDefault();
                                                                    rowEditIn["BAL_QTY"] = Convert.ToDecimal(rowEditIn["BAL_QTY"].ToString()) - _outqty;

                                                                    DataRow rowEditOut = _outDt.Select("LOGSEQ=" + _outseq + "").FirstOrDefault();
                                                                    rowEditOut["BAL_QTY"] = Convert.ToDecimal(rowEditOut["BAL_QTY"].ToString()) - _outqty;

                                                                    _outqty = 0;
                                                                    if (_outqty == 0) break;
                                                                }
                                                            }
                                                            results7.Clear();
                                                        }
                                                        else
                                                        {
                                                            bool _goWithOutStatus2 = true;

                                                            if (_goWithOutStatus2 == false)
                                                            {
                                                                DataRow rowEditOut = _outDt.Select("LOGSEQ=" + _outseq + "").FirstOrDefault();
                                                                rowEditOut["STATUS"] = "NOT_FOUND";

                                                                _outqty = 0;
                                                                if (_outqty == 0)
                                                                {
                                                                    break;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                #region j7
                                                                int j7 = 0;
                                                                //Base loc, item code
                                                                //_sql = "SELECT * FROM CHML_INV_BAL@SCMREP WHERE LOC=:p_loc AND ITEMCODE=:p_itm AND BAL_QTY>0 ORDER BY UNITCOST";
                                                                //_oCom = new OracleCommand(_sql, oConnEMS) { BindByName = true };
                                                                //_oDa.SelectCommand = _oCom;
                                                                //_oCom.Parameters.Add(":p_loc", OracleDbType.NVarchar2).Value = _loc;
                                                                //_oCom.Parameters.Add(":p_itm", OracleDbType.NVarchar2).Value = _baseitemcode;
                                                                //_oDa.Fill(_emsData, "OUTDOCS7");

                                                                var var_results8 = _inDt.AsEnumerable().Where(dr => dr.Field<string>("LOC") == _oloc.ToString() && dr.Field<decimal>("BAL_QTY") > 0 &&
                                                                    dr.Field<string>("ITEMCODE") == _baseitemcode.ToString()
                                                                    ).OrderBy(or => or.Field<decimal>("UNITCOST"));

                                                                if (var_results8.Any())
                                                                {
                                                                    DataTable results8 = var_results8.CopyToDataTable();

                                                                    int searchValue = Convert.ToInt32(Math.Round(_unitcost));
                                                                    int currentNearest = Convert.ToInt32(Math.Round(Convert.ToDecimal(results8.Rows[0]["UNITCOST"].ToString())));
                                                                    int currentDifference = Math.Abs(currentNearest - searchValue);

                                                                    for (j7 = 0; j7 <= results8.Rows.Count - 1; j7++)
                                                                    {
                                                                        int currentNearest1 = Convert.ToInt32(Math.Round(Convert.ToDecimal(results8.Rows[j7]["UNITCOST"].ToString())));
                                                                        int diff = Math.Abs(currentNearest1 - searchValue);
                                                                        if (diff < currentDifference)
                                                                        {
                                                                            currentDifference = diff;
                                                                            currentNearest = currentNearest1;
                                                                        }
                                                                    }
                                                                    results8.Clear();


                                                                    //_sql = "SELECT * FROM CHML_INV_BAL@SCMREP WHERE LOC=:p_loc AND ITEMCODE=:p_itm AND ROUND(UNITCOST) =:p_unitcost AND BAL_QTY>0 ORDER BY DOCDATE";
                                                                    //_oCom = new OracleCommand(_sql, oConnEMS) { BindByName = true };
                                                                    //_oDa.SelectCommand = _oCom;
                                                                    //_oCom.Parameters.Add(":p_loc", OracleDbType.NVarchar2).Value = _loc;
                                                                    //_oCom.Parameters.Add(":p_itm", OracleDbType.NVarchar2).Value = _baseitemcode;
                                                                    //_oCom.Parameters.Add(":p_unitcost", OracleDbType.Int32).Value = currentNearest;
                                                                    //_oDa.Fill(_emsData, "OUTDOCS7");

                                                                    results8 = _inDt.AsEnumerable().Where(dr => dr.Field<string>("LOC") == _oloc.ToString() && dr.Field<decimal>("BAL_QTY") > 0 &&
                                                                        dr.Field<string>("ITEMCODE") == _baseitemcode.ToString() &&
                                                                        Convert.ToInt32(Math.Round(dr.Field<decimal>("UNITCOST"))) == currentNearest
                                                                        ).OrderBy(or => or.Field<DateTime>("DOCDATE")).CopyToDataTable();

                                                                    for (j7 = 0; j7 <= results8.Rows.Count - 1; j7++)
                                                                    {
                                                                        decimal _outqty1 = Convert.ToDecimal(results8.Rows[j7]["BAL_QTY"].ToString());
                                                                        int _inseq = Convert.ToInt32(results8.Rows[j7]["LOGSEQ"].ToString());

                                                                        if (_outqty > _outqty1)
                                                                        {
                                                                            DataRow rowEditIn = _inDt.Select("LOGSEQ=" + _inseq + "").FirstOrDefault();
                                                                            rowEditIn["BAL_QTY"] = Convert.ToDecimal(rowEditIn["BAL_QTY"].ToString()) - _outqty1;

                                                                            DataRow rowEditOut = _outDt.Select("LOGSEQ=" + _inseq + "").FirstOrDefault();
                                                                            rowEditOut["BAL_QTY"] = Convert.ToDecimal(rowEditOut["BAL_QTY"].ToString()) - _outqty1;

                                                                            _outqty = _outqty - _outqty1;
                                                                            if (_outqty == 0) break;
                                                                        }
                                                                        else
                                                                        {
                                                                            DataRow rowEditIn = _inDt.Select("LOGSEQ=" + _inseq + "").FirstOrDefault();
                                                                            rowEditIn["BAL_QTY"] = Convert.ToDecimal(rowEditIn["BAL_QTY"].ToString()) - _outqty;

                                                                            DataRow rowEditOut = _outDt.Select("LOGSEQ=" + _outseq + "").FirstOrDefault();
                                                                            rowEditOut["BAL_QTY"] = Convert.ToDecimal(rowEditOut["BAL_QTY"].ToString()) - _outqty;

                                                                            _outqty = 0;
                                                                            if (_outqty == 0) break;
                                                                        }
                                                                    }
                                                                    results8.Clear();
                                                                }
                                                                else
                                                                {
                                                                    DataRow rowEditOut = _outDt.Select("LOGSEQ=" + _outseq + "").FirstOrDefault();
                                                                    rowEditOut["STATUS"] = "NOT_FOUND";
                                                                    _outqty = 0;
                                                                    if (_outqty == 0) break;
                                                                }
                                                                #endregion
                                                            }
                                                        }
                                                        #endregion
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                #endregion

                string _err = string.Empty;
                string _filePath = ExportExcel2007(_com, _user + "In", _inDt, out _err);
                _filePath = ExportExcel2007(_com, _user + "Out", _outDt, out _err);
                return _inDt;
            }
            catch (Exception _errrr)
            {
                string _rrrr = _errrr.ToString();
                return null;
            }
        }

        //Rukshan
        public class PSIReportList
        {
            public string Item { get; set; }
            public string status { get; set; }

            public decimal OPENINGBALANCE { get; set; }
            public decimal GRN { get; set; }
            public decimal DO { get; set; }
            public decimal CLOSINGBALANCE { get; set; }
        }
        public string PSIReport(string _user, string _com, DateTime _fromdate, DateTime _todate, string _model, string _brand, string _cat1, string _cat2, string _cat3, int _intcom, string _MNG, out string _err, string Adminteam)
        {
            string _filePath = string.Empty;
            try
            {
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                _generalDAL = new GeneralDAL();
                _securityDAL = new SecurityDAL();
                _reportDAL = new ReptCommonDAL();
                _inventoryDAL.ConnectionOpen();
                _salesDAL.ConnectionOpen();
                _generalDAL.ConnectionOpen();
                _reportDAL.ConnectionOpen();
                if (_securityDAL.Is_Report_DR("PSIRep") == true)
                {
                    _salesDAL.ConnectionOpen_DR();
                    _inventoryDAL.ConnectionOpen_DR();
                    _generalDAL.ConnectionOpen_DR();
                    _reportDAL.ConnectionOpen();


                }
                //_inventoryDAL.ConnectionOpen();
                //_salesDAL.ConnectionOpen();
                //_generalDAL.ConnectionOpen();
                //_reportDAL.ConnectionOpen();
                string _email = string.Empty;
                string _toemail = string.Empty;
                DataTable _REPORT1 = new DataTable();
                DataTable _GETREPORT = new DataTable();
                DataTable _GETITM = new DataTable();
                DataTable _GETBRAND = new DataTable();
                List<PSIReportList> _psilist = new List<PSIReportList>();


                DateTime _MAXDATE = new DateTime();
                int _value = 0;
                int _maxno = 0;
                string seqlist = "";
                DataTable dtCreateUser = _inventoryDAL.GetUserNameByUserID(_user);
                if (dtCreateUser != null && dtCreateUser.Rows.Count > 0)
                {
                    if (dtCreateUser.Rows[0]["se_email"] != null && IsValidEmail(dtCreateUser.Rows[0]["se_email"].ToString()))
                    {
                        _toemail = dtCreateUser.Rows[0]["se_email"].ToString();
                    }
                }
                //_value = _inventoryDAL.GET_PSI_REPT1(_com, _user);
                string[] comarr = _com.Split(',');
                foreach (string i in comarr)
                {
                    _REPORT1 = _inventoryDAL.GET_PSI_REPT_MAX_DATE(i, _fromdate);
                    if (_REPORT1 != null)
                    {
                        if (_REPORT1.Rows.Count > 0)
                        {
                            _MAXDATE = Convert.ToDateTime(_REPORT1.Rows[0][1].ToString());
                            _maxno = Convert.ToInt32(_REPORT1.Rows[0][0].ToString());
                            seqlist = seqlist + _maxno.ToString() + ",";
                        }
                    }
                }



                if (!string.IsNullOrEmpty(_MNG))
                {
                    _GETBRAND = _inventoryDAL.GET_BRANDMNG_PSI(_MNG);

                    if (_GETBRAND != null)
                    {
                        if (_GETBRAND.Rows.Count > 0)
                        {

                            foreach (DataRow _row in _GETBRAND.Rows)
                            {
                                string _brandvalue = _row[0].ToString();
                                _brand = _brand + "," + _brandvalue;
                            }
                        }
                    }
                }


                _inventoryDAL.DeletePsiTbl(_user);
                if (Adminteam != "")
                {
                    string realadmincodes = "";
                    //_MAXDATE
                    string[] seperator = new string[] { "," };
                    string[] searchParams = Adminteam.Split(seperator, StringSplitOptions.None);
                    string _newcom = string.Empty;
                    foreach (string i in searchParams)
                    {
                        if (i != "")
                        {
                            _newcom = i;
                            string[] words2 = i.Split('-');
                            string comadddd = words2[0];
                            string admincdd = words2[1];
                            realadmincodes = realadmincodes + admincdd + ",";
                            _value = _inventoryDAL.GET_SAVEGIT2(_fromdate, comadddd, admincdd, null, null, _brand, _model, _cat1, _cat2, _cat3, null, null, _user, 1);
                        }

                    }
                    DataTable aftergit = _inventoryDAL.GET_PSI_REPTAFTERGIT(_user);
                    _inventoryDAL.DeletePsiTbl(_user);
                    int m = 0;
                    if (aftergit != null)
                    {
                        foreach (var item in aftergit.Rows)
                        {
                            string psiuser = _user;
                            Int32 opbal = 0;
                            string psiitem = aftergit.Rows[m]["ITEM CODE"].ToString();
                            string descrip = aftergit.Rows[m]["DESCRIPTION"].ToString();
                            string model = aftergit.Rows[m]["MODEL"].ToString();
                            if (aftergit.Rows[m]["OPENING BALANCE"].ToString().Trim() != "")
                            {
                                opbal = Convert.ToInt32(Math.Ceiling(Convert.ToDecimal(aftergit.Rows[m]["OPENING BALANCE"].ToString())));
                            }
                            if (psiitem == "THTV32L2615VE")
                            {

                            }
                            Int32 grn = 0;
                            Int32 deli = 0;
                            Int32 clobal = 0;
                            Int32 adj = 0;
                            Int32 srn = 0;
                            Int32 prn = 0;
                            Int32 othrplus = 0;
                            Int32 adjmin = 0;
                            Int32 othemin = 0;
                            m++;
                            _inventoryDAL.SAVE_PSI_AFT_GIT(psiuser, psiitem, opbal, grn, deli, clobal, adj, srn, prn, othrplus, adjmin, othemin, descrip, model);
                        }

                    }



                    _GETITM = _inventoryDAL.GET_ITM_PSI(_brand, _model, _cat1, _cat2, _cat3);
                    string _itm = null;
                    if ((!string.IsNullOrEmpty(_brand)) || (!string.IsNullOrEmpty(_model)) || (!string.IsNullOrEmpty(_cat1)) || (!string.IsNullOrEmpty(_cat2)) || (!string.IsNullOrEmpty(_cat3)))
                    {

                        if (_GETITM != null)
                        {
                            if (_GETITM.Rows.Count > 0)
                            {
                                _salesDAL.Delete_TEMP_PC_LOC(_user, _com, "", "");
                                foreach (DataRow _row in _GETITM.Rows)
                                {
                                    string _itmvalue = _row[0].ToString();
                                    //_itm = _itm +_itmvalue +",";
                                    //if ((k % 2 == 0 || k == _GETITM.Rows.Count) && k !=0)
                                    //{
                                    _salesDAL.Save_TEMP_PC_LOC(_user, _com, _itmvalue, "");
                                    _itm = "";
                                    //}
                                    //k++;
                                }
                                _value = _inventoryDAL.SAVEPSI_REPORT_itm2(_com, _user, _fromdate, _todate, _MAXDATE.AddDays(1), seqlist, _model, _brand, _cat1, _cat2, _cat3, _intcom, _itm, realadmincodes);
                            }
                        }

                    }
                    else
                    {
                        _value = _inventoryDAL.SAVEPSI_REPORT2(_com, _user, _fromdate, _todate, _MAXDATE.AddDays(1), seqlist, _model, _brand, _cat1, _cat2, _cat3, _intcom, _itm, realadmincodes);
                    }

                    _GETREPORT = _inventoryDAL.GET_PSI_REPT(_user);
                    //if (_GETREPORT != null)
                    //{
                    //    if (_GETREPORT.Rows.Count >0)
                    //    {
                    //        int _it = 0;
                    //        foreach (var psidt in _GETREPORT.Rows)
                    //        {

                    //            _it++;
                    //        }
                    //    }
                    //}


                    DataTable TitleData = new DataTable();
                    DataRow dataRow;
                    DataColumn dataCol = new DataColumn();
                    dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
                    dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
                    dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
                    dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
                    dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
                    dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
                    dataRow = TitleData.NewRow(); dataRow["c6"] = _com; TitleData.Rows.Add(dataRow);
                    dataRow = TitleData.NewRow(); dataRow["c6"] = "PSI Report"; TitleData.Rows.Add(dataRow);
                    dataRow = TitleData.NewRow();
                    dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromdate.ToString("dd/MMM/yyyy");
                    dataRow["c4"] = "Date To :"; dataRow["c5"] = _todate.ToString("dd/MMM/yyyy");
                    TitleData.Rows.Add(dataRow);
                    _filePath = ExportExcel2007("ABL", _user, TitleData, _GETREPORT, out _err);



                    SmtpClient smtpClient = new SmtpClient();
                    MailMessage message = new MailMessage();
                    MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());
                    smtpClient.Host = _generalDAL.GetMailHost();
                    smtpClient.Port = 25;
                    message.From = fromAddress;
                    string FOOTER = _generalDAL.GetMailFooterMsg();
                    _email = "Dear Sir/Madam, <br>" + "Your PSI Report generated.  <br> Please find the  system generated PSI Report.";
                    message.To.Add(_toemail);
                    message.Subject = "PSI Report";
                    //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                    //message.Bcc.Add(new MailAddress(""));
                    Attachment at = new Attachment(_filePath);
                    message.Attachments.Add(at);
                    message.IsBodyHtml = false;
                    message.Body = _email;
                    message.IsBodyHtml = true;
                    message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                    // Send SMTP mail
                    smtpClient.Send(message);
                }
                else
                {
                    //_MAXDATE
                    string[] seperator = new string[] { "," };
                    string[] searchParams = _com.Split(seperator, StringSplitOptions.None);
                    string _newcom = string.Empty;
                    foreach (string i in searchParams)
                    {
                        _newcom = i;
                        _value = _inventoryDAL.GET_SAVEGIT3(_fromdate, _newcom, null, null, null, _brand, _model, _cat1, _cat2, _cat3, null, null, _user, 1);
                    }
                    DataTable aftergit = _inventoryDAL.GET_PSI_REPTAFTERGIT(_user);
                    _inventoryDAL.DeletePsiTbl(_user);
                    int m = 0;
                    if (aftergit != null)
                    {
                        foreach (var item in aftergit.Rows)
                        {
                            string psiuser = _user;
                            Int32 opbal = 0;
                            string psiitem = aftergit.Rows[m]["ITEM CODE"].ToString();
                            string descrip = aftergit.Rows[m]["DESCRIPTION"].ToString();
                            string model = aftergit.Rows[m]["MODEL"].ToString();
                            if (aftergit.Rows[m]["OPENING BALANCE"].ToString().Trim() != "")
                            {
                                opbal = Convert.ToInt32(Math.Ceiling(Convert.ToDecimal(aftergit.Rows[m]["OPENING BALANCE"].ToString())));
                            }
                            Int32 grn = 0;
                            Int32 deli = 0;
                            Int32 clobal = 0;
                            Int32 adj = 0;
                            Int32 srn = 0;
                            Int32 prn = 0;
                            Int32 othrplus = 0;
                            Int32 adjmin = 0;
                            Int32 othemin = 0;
                            m++;
                            _inventoryDAL.SAVE_PSI_AFT_GIT(psiuser, psiitem, opbal, grn, deli, clobal, adj, srn, prn, othrplus, adjmin, othemin, descrip, model);
                        }

                    }



                    _GETITM = _inventoryDAL.GET_ITM_PSI(_brand, _model, _cat1, _cat2, _cat3);
                    string _itm = "";
                    if ((!string.IsNullOrEmpty(_brand)) || (!string.IsNullOrEmpty(_model)) || (!string.IsNullOrEmpty(_cat1)) || (!string.IsNullOrEmpty(_cat2)) || (!string.IsNullOrEmpty(_cat3)))
                    {
                        if (_GETITM != null)
                        {
                            if (_GETITM.Rows.Count > 0)
                            {
                                _salesDAL.Delete_TEMP_PC_LOC(_user, _com, "", "");
                                foreach (DataRow _row in _GETITM.Rows)
                                {
                                    string _itmvalue = _row[0].ToString();
                                    //_itm = _itm +_itmvalue +",";
                                    //if ((k % 2 == 0 || k == _GETITM.Rows.Count) && k !=0)
                                    //{
                                    _salesDAL.Save_TEMP_PC_LOC(_user, _com, _itmvalue, "");
                                    _itm = "";
                                    //}
                                    //k++;
                                }
                                _value = _inventoryDAL.SAVEPSI_REPORT_itm(_com, _user, _fromdate, _todate, _MAXDATE.AddDays(1), seqlist, _model, _brand, _cat1, _cat2, _cat3, _intcom, _itm);
                            }
                        }

                    }
                    else
                    {
                        _value = _inventoryDAL.SAVEPSI_REPORT(_com, _user, _fromdate, _todate, _MAXDATE.AddDays(1), seqlist, _model, _brand, _cat1, _cat2, _cat3, _intcom, _itm);
                    }

                    _GETREPORT = _inventoryDAL.GET_PSI_REPT(_user);

                    DataTable TitleData = new DataTable();
                    DataRow dataRow;
                    DataColumn dataCol = new DataColumn();
                    dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
                    dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
                    dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
                    dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
                    dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
                    dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
                    dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
                    dataRow = TitleData.NewRow(); dataRow["c6"] = "PSI Report"; TitleData.Rows.Add(dataRow);
                    dataRow = TitleData.NewRow();
                    dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromdate.ToString("dd/MMM/yyyy");
                    dataRow["c4"] = "Date To :"; dataRow["c5"] = _todate.ToString("dd/MMM/yyyy");
                    TitleData.Rows.Add(dataRow);
                    _filePath = ExportExcel2007("ABL", _user, TitleData, _GETREPORT, out _err);



                    SmtpClient smtpClient = new SmtpClient();
                    MailMessage message = new MailMessage();
                    MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());
                    smtpClient.Host = _generalDAL.GetMailHost();
                    smtpClient.Port = 25;
                    message.From = fromAddress;
                    string FOOTER = _generalDAL.GetMailFooterMsg();
                    _email = "Dear Sir/Madam, <br>" + "Your PSI Report generated.  <br> Please find the  system generated PSI Report.";
                    message.To.Add(_toemail);
                    message.Subject = "PSI Report";
                    //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                    //message.Bcc.Add(new MailAddress(""));
                    Attachment at = new Attachment(_filePath);
                    message.Attachments.Add(at);
                    message.IsBodyHtml = false;
                    message.Body = _email;
                    message.IsBodyHtml = true;
                    message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                    // Send SMTP mail
                    smtpClient.Send(message);
                }

                _inventoryDAL.DeletePsiTbl(_user);


                _inventoryDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _err = ex.Message;
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                return _filePath;
            }
            return _filePath;
        }
        //Lakshan 13 Jan 2016
        public void SendMailReservationRequestApprove(InventoryRequest _invReq, string type)
        {
            #region Email
            _generalDAL = new GeneralDAL();
            StringBuilder html = new StringBuilder();
            string htmlBody = string.Empty;
            if (_invReq.InventoryRequestItemList != null)
            {
                if (_invReq.InventoryRequestItemList.Count > 0)
                {
                    DataTable dt = new DataTable();
                    //Building an HTML string.
                    DataRow dr = null;
                    dt.Columns.Add(new DataColumn("Item", typeof(string)));
                    dt.Columns.Add(new DataColumn("Description", typeof(string)));
                    dt.Columns.Add(new DataColumn("Model", typeof(string)));
                    dt.Columns.Add(new DataColumn("Location", typeof(string)));
                    dt.Columns.Add(new DataColumn("Qty", typeof(decimal)));

                    //Table start.
                    html.Append("<!DOCTYPE html>");
                    html.Append("<html>");
                    html.Append("<body>");
                    html.Append("<table style=' background-repeat:no-repeat; width:600px;margin:0;' cellpadding='0' cellspacing='0' border='1' background-color: aqua>");


                    //Building the Header row.
                    html.Append("<tr>");
                    foreach (DataColumn column in dt.Columns)
                    {
                        html.Append("<th style=' background-color:#B5E3F0; margin:0;'>");
                        html.Append(column.ColumnName);
                        html.Append("</th>");
                    }
                    html.Append("</tr>");
                    MasterItem _mstItm = new MasterItem();
                    foreach (InventoryRequestItem _updateitem in _invReq.InventoryRequestItemList)
                    {
                        _mstItm = _generalDAL.GetItemMaster(_updateitem.Itri_itm_cd);
                        string _mod = "";
                        string _des = "";
                        if (_mstItm != null)
                        {
                            _mod = _mstItm.Mi_model;
                            _des = _mstItm.Mi_shortdesc;
                        }
                        html.Append("<tr>");
                        html.Append("<th align='left'>");
                        html.Append(_updateitem.Itri_itm_cd);
                        html.Append("</th>");
                        html.Append("<th align='left'>");
                        html.Append(_des);
                        html.Append("</th>");
                        html.Append("<th align='left'>");
                        html.Append(_mod);
                        html.Append("</th>");
                        html.Append("<th align='left'>");
                        html.Append(_updateitem.Itri_loc);
                        html.Append("</th>");
                        html.Append("<th align='left'>");
                        html.Append(_updateitem.Itri_qty);
                        html.Append("</th>");
                        html.Append("</tr>");

                    }
                    html.Append("</table>");
                }



                _generalDAL.ConnectionOpen();
                SmtpClient smtpClient = new SmtpClient();
                MailMessage message = new MailMessage();
                MasterLocation _mstLoc = new MasterLocation();
                _mstLoc = _generalDAL.GetLocationInfor(_invReq.Itr_com, _invReq.Itr_rec_to);
                DataTable _dtMail = _generalDAL.GetEmailAddressData(_invReq.Itr_com);
                string _mailAddList = "";
                if (_dtMail != null)
                {
                    if (_dtMail.Rows.Count > 0)
                    {
                        foreach (DataRow _dr in _dtMail.Rows)
                        {
                            if (!string.IsNullOrEmpty(_dr["alc_user_email"].ToString()))
                            {
                                _mailAddList = string.IsNullOrEmpty(_mailAddList) ? _dr["alc_user_email"].ToString().ToLower() : _mailAddList + "," + _dr["alc_user_email"].ToString();
                            }
                        }
                    }
                }
                string othMail = string.Empty;
                if (_invReq.Itr_anal2 != "")
                {
                    if (type == "APPROVE")
                    {
                        DataTable deta = _generalDAL.getExecMnagerMail(_invReq.Itr_anal2, "EXEC", _invReq.Itr_com);
                        if (deta.Rows.Count > 0)
                        {
                            if (deta.Rows[0]["EXE"] != DBNull.Value)
                            {
                                if (IsValidEmail(deta.Rows[0]["EXE"].ToString()))
                                    othMail = deta.Rows[0]["EXE"].ToString();
                            }
                        }
                    }
                    if (type == "REQUEST")
                    {
                        DataTable deta = _generalDAL.getExecMnagerMail(_invReq.Itr_anal2, "MANGR", _invReq.Itr_com);
                        if (deta.Rows.Count > 0)
                        {
                            if (deta.Rows[0]["MNGR"] != DBNull.Value)
                            {
                                if (IsValidEmail(deta.Rows[0]["MNGR"].ToString()))
                                    othMail = deta.Rows[0]["MNGR"].ToString();
                            }
                        }
                    }
                }
                if (_mstLoc != null)
                {
                    string _toEmail = _mailAddList;
                    if (othMail != "")
                    {
                        _toEmail = _toEmail + "," + othMail;
                    }
                    // string _toEmail = _userData.se_Email.Trim();
                    if (!string.IsNullOrEmpty(_toEmail))
                    {
                        MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                        smtpClient.Host = _generalDAL.GetMailHost();
                        smtpClient.Port = 25;
                        message.From = fromAddress;
                        string FOOTER = _generalDAL.GetMailFooterMsg();
                        string _email = "";
                        _inventoryDAL = new InventoryDAL();
                        MasterBusinessEntity _mstBusEntity = _inventoryDAL.GET_MST_BUSENTITY_DATA(_invReq.Itr_com, _invReq.Itr_bus_code).FirstOrDefault();
                        string _cusName = "";
                        if (_mstBusEntity != null)
                        {
                            _cusName = _mstBusEntity.Mbe_name;
                        }
                        // BusEntityItem _busEntity = _generalDAL.get_Buss_ent_type();
                        // string _docNo = _docNo.Replace("Normal:", "");
                        _email = "Dear Sir/Madam, <br>"
                            + ((type == "APPROVE") ? "<u>Customer Reservation Request</u> <br>" : (type == "REQUEST") ? "<u>Customer Reservation Request</u> <br>" : "")
                            + "Request # : " + _invReq.Itr_req_no + " <br>"
                            + "Period from : " + _invReq.Itr_dt.ToShortDateString() + " <br>"
                            + "Expected on or before : " + _invReq.Itr_exp_dt.ToShortDateString() + " <br>"
                            + "Excecutive : " + _invReq.Itr_anal2 + " <br>"
                            + "Customer Code : " + _invReq.Itr_bus_code + " <br>"
                            + "Customer Name : " + _cusName + " <br>"
                            + "Request location : " + _mstLoc.Ml_loc_desc + " <br>"
                            + "Remarks : " + _invReq.Itr_note + " <br>";
                        //_email = _email + "Approved #-" + _docNo + " <br><P>";
                        _email = _email + "<br>" + html + "<br><br>" + "** This is an auto generated mail from Abans infor portal. Please don't Reply ** ";
                        message.To.Add(_toEmail);
                        message.Bcc.Add("lakshan@abansgroup.com,nuwanc@abansgroup.com");
                        if (type == "APPROVE")
                            message.Subject = "Customer Reservation Request";
                        if (type == "REQUEST")
                            message.Subject = "Customer Reservation Request";
                        //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                        //message.Bcc.Add(new MailAddress(""));
                        message.IsBodyHtml = false;
                        message.Body = _email;
                        message.IsBodyHtml = true;
                        message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                        // Send SMTP mail
                        smtpClient.Send(message);
                    }
                    else
                    {
                        _generalDAL.ConnectionClose();
                    }
                }
                else
                {
                    _generalDAL.ConnectionClose();
                }
            }
            #endregion
        }
        //Lakshan 13 Jan 2016
        //Edited nuwan 2017.11.11
        public void SendMailReservationApprove(string _com, string _docNo)
        {
            string[] seperator = new string[] { "|" };
            string[] searchParams = _docNo.Split(seperator, StringSplitOptions.None);
            foreach (var _str in searchParams)
            {
                if (!string.IsNullOrEmpty(_str))
                {
                    _inventoryDAL = new InventoryDAL();
                    _generalDAL = new GeneralDAL();
                    _securityDAL = new SecurityDAL();
                    INR_RES _inrRes = _inventoryDAL.GET_INR_RES_DATA(new INR_RES() { IRS_COM = _com, IRS_RES_NO = _str }).FirstOrDefault();
                    List<INR_RES_DET> _inrResDetList = _inventoryDAL.GET_INR_RES_DET_DATA_NEW(new INR_RES_DET() { IRD_RES_NO = _str });
                    #region Email
                    StringBuilder html = new StringBuilder();
                    string htmlBody = string.Empty;
                    string _reqNo = string.Empty;
                    if (_inrResDetList != null)
                    {
                        if (_inrResDetList.Count > 0)
                        {
                            _reqNo = _inrResDetList[0].IRD_RESREQ_NO;
                            DataTable dt = new DataTable();
                            //Building an HTML string.
                            DataRow dr = null;
                            dt.Columns.Add(new DataColumn("Item", typeof(string)));
                            dt.Columns.Add(new DataColumn("Description", typeof(string)));
                            dt.Columns.Add(new DataColumn("Model", typeof(string)));
                            dt.Columns.Add(new DataColumn("Qty", typeof(decimal)));
                            //Table start.
                            html.Append("<!DOCTYPE html>");
                            html.Append("<html>");
                            html.Append("<body>");
                            html.Append("<table style=' background-repeat:no-repeat; width:600px;margin:0;' cellpadding='0' cellspacing='0' border='1' background-color: aqua>");


                            //Building the Header row.
                            html.Append("<tr>");
                            foreach (DataColumn column in dt.Columns)
                            {
                                html.Append("<th style=' background-color:#B5E3F0; margin:0;' >");
                                html.Append(column.ColumnName);
                                html.Append("</th>");
                            }
                            html.Append("</tr>");
                            MasterItem _mstItm = new MasterItem();
                            foreach (INR_RES_DET _resDet in _inrResDetList)
                            {
                                _mstItm = _generalDAL.GetItemMaster(_resDet.IRD_ITM_CD);
                                string _mod = "";
                                string _des = "";
                                if (_mstItm != null)
                                {
                                    _mod = _mstItm.Mi_model;
                                    _des = _mstItm.Mi_shortdesc;
                                }
                                html.Append("<tr>");
                                html.Append("<th align='left'>");
                                html.Append(_resDet.IRD_ITM_CD);
                                html.Append("</th>");
                                html.Append("<th align='left'>");
                                html.Append(_des);
                                html.Append("</th>");
                                html.Append("<th align='left'>");
                                html.Append(_mod);
                                html.Append("</th>");
                                html.Append("<th>");
                                html.Append(_resDet.IRD_RES_BQTY);
                                html.Append("</th>");
                                html.Append("</tr>");

                            }
                            html.Append("</table>");
                        }

                        _generalDAL = new GeneralDAL();
                        _generalDAL.ConnectionOpen();
                        SmtpClient smtpClient = new SmtpClient();
                        MailMessage message = new MailMessage();
                        MasterLocation _mstLoc = new MasterLocation();
                        _mstLoc = _generalDAL.GetLocationInfor(_inrRes.IRS_COM, _inrRes.IRS_ANAL_2);
                        SystemUser _userData = null;
                        InventoryRequest _tmpInvReq = new InventoryRequest();
                        _tmpInvReq.Itr_req_no = _reqNo;
                        InventoryRequest _invReqData = _inventoryDAL.GET_INT_REQ_DATA_NEW(_tmpInvReq).FirstOrDefault();
                        string _remark = "";
                        if (_invReqData != null)
                        {
                            _userData = _securityDAL.GetUserByUserID(_invReqData.Itr_cre_by);
                            _remark = _invReqData.Itr_note;
                        }
                        string othMail = string.Empty;
                        if (_invReqData.Itr_cre_by != "")
                        {
                            DataTable deta = _generalDAL.getExecMnagerMail(_invReqData.Itr_anal2, "MANGR", _invReqData.Itr_com);
                            if (deta.Rows.Count > 0)
                            {
                                if (deta.Rows[0]["MNGR"] != DBNull.Value)
                                {
                                    if (IsValidEmail(deta.Rows[0]["MNGR"].ToString()))
                                        othMail = deta.Rows[0]["MNGR"].ToString();
                                }
                            }
                        }

                        if (_mstLoc != null && _userData != null)
                        {
                            string _bccEmail = "lakshan@abansgroup.com,nuwanc@abansgroup.com";
                            string _toEmail = _userData.se_Email.ToLower();
                            if (othMail != "")
                            {
                                _toEmail = _toEmail + "," + othMail;
                            }
                            if (!string.IsNullOrEmpty(_toEmail))
                            {
                                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                                smtpClient.Host = _generalDAL.GetMailHost();
                                smtpClient.Port = 25;
                                message.From = fromAddress;
                                string FOOTER = _generalDAL.GetMailFooterMsg();
                                string _email = "";
                                // string _docNo = _docNo.Replace("Normal:", "");
                                _email = "Dear Sir/Madam, <br>"
                                    + "<u>Customer Reservation Approval</u><br> "
                                    + "Reservation # : " + _inrRes.IRS_RES_NO + "<br>"
                                    + "Request # : " + _reqNo + "<br>"
                                + "Remarks # : " + _remark + "<br>";
                                //_email = _email + "Approved #-" + _docNo + " <br><P>";
                                _email = _email + "<br>" + html + "<br><br>" + "** This is an auto generated mail from Abans infor portal. Please don't Reply ** ";
                                message.To.Add(_toEmail);
                                message.Bcc.Add(_bccEmail);
                                message.Subject = "Customer Reservation Approval";
                                //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                                //message.Bcc.Add(new MailAddress(""));
                                message.IsBodyHtml = false;
                                message.Body = _email;
                                message.IsBodyHtml = true;
                                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                                // Send SMTP mail
                                smtpClient.Send(message);
                            }
                            else
                            {
                                _generalDAL.ConnectionClose();
                            }
                        }
                        else
                        {
                            _generalDAL.ConnectionClose();
                        }
                    }
                    #endregion
                }
            }
        }
        public List<mst_itm_com_reorder> GetReorderDataWithItemCost(string _itmCd)
        {
            _generalDAL = new GeneralDAL();
            List<mst_itm_com_reorder> _list = _generalDAL.GetReOrder(_itmCd);
            if (_list.Count > 0)
            {
                mst_itm_com_reorder _tmp = new mst_itm_com_reorder();
                decimal _curCost = 0;
                foreach (var item in _list)
                {
                    _curCost = 0;
                    _inventoryDAL = new InventoryDAL();
                    _curCost = _inventoryDAL.GET_PREV_ITEM_COST_FOR_ITEM_MASTER(item.Icr_itm_code, item.Icr_com_code, item.Icr_itm_sts);
                    _tmp = _inventoryDAL.GET_ITEM_MIN_MAX_COST_FOR_ITEM_MASTER(item.Icr_itm_code, item.Icr_com_code, item.Icr_itm_sts);
                    item.Icr_max_cost = _tmp.Icr_max_cost;
                    item.Icr_min_cost = _tmp.Icr_min_cost;
                    item.Icr_curr_cost = _curCost;
                }
            }
            return _list;
        }
        public bool valuationProcess(DateTime asAtDate, string company, string location, bool mnthEnd, string userid, string adminteam, out string error, bool unComPath = false)
        {
            error = string.Empty;
            bool err = false;
            try
            {
                //Console.WriteLine("Start time " + DateTime.Now.ToString());
                Int32 seq = 0;
                _reportDAL = new ReptCommonDAL();
                _reportDAL.ConnectionOpen();
                _reportDAL.BeginTransaction();
                Int32 direction = -1;
                //DateTime runStrtDt = DateTime.MinValue;
                //DateTime runEndDt = DateTime.MinValue;
                DateTime runStrtDt = Convert.ToDateTime("01-apr-2017");
                DateTime runEndDt = Convert.ToDateTime("30-apr-2017");
                if (mnthEnd == true)
                {
                    //runStrtDt = new DateTime(asAtDate.Year, asAtDate.Month, 1).AddMonths(-1);
                    //runEndDt = runStrtDt.AddMonths(1).AddDays(-1);
                    seq = _reportDAL.getNearestBalanceSeqNo(company, runStrtDt.AddDays(-1));
                }
                else
                {
                    runStrtDt = new DateTime(asAtDate.Year, asAtDate.Month, 1);
                    runEndDt = asAtDate;
                    seq = _reportDAL.getNearestBalanceSeqNo(company, runStrtDt.AddDays(-1));

                }
                if (seq <= 0)
                {
                    error = "No balance details for this month and company.";
                    err = true;
                    // goto A;
                    _reportDAL.TransactionRollback();
                    _reportDAL.ConnectionClose();
                    return false;
                }
                else
                {
                    //runStrtDt = Convert.ToDateTime("01-Aug-2016");
                    //runEndDt = Convert.ToDateTime("31-Dec-2016");

                    DataTable dtLoc = _reportDAL.getCompanyLocations(company, location, adminteam);
                    _reportDAL.TransactionCommit();
                    _reportDAL.ConnectionClose();
                    Int32 l = 0;
                    foreach (DataRow row in dtLoc.Rows)
                    {

                        _reportDAL = new ReptCommonDAL();
                        _reportDAL.ConnectionOpen();
                        _reportDAL.BeginTransaction();
                        location = row["ML_LOC_CD"].ToString().Trim();
                        //Console.WriteLine("Start location " + location);
                        l++;
                        direction = 0;

                        //Console.WriteLine("start add out  doc " + DateTime.Now.ToString());
                        //runStrtDt = Convert.ToDateTime("01/Aug/2016");
                        Int32 outEff = _reportDAL.updateAllOutDocuments(runStrtDt, runEndDt, company, location, direction, userid);
                        //Console.WriteLine("end add out  doc " + DateTime.Now.ToString());
                        direction = 1;

                        //Console.WriteLine("start add in  doc " + DateTime.Now.ToString());
                        Int32 inEff = _reportDAL.updateAllInDocuments(runStrtDt, runEndDt, company, location, direction, seq, userid);

                        //Console.WriteLine("end add in  doc " + DateTime.Now.ToString());
                        _reportDAL.TransactionCommit();
                        _reportDAL.ConnectionClose();


                        _reportDAL = new ReptCommonDAL();
                        _reportDAL.ConnectionOpen();
                        _reportDAL.BeginTransaction();
                        //Console.WriteLine("AsAtBalanceProcess  start " + DateTime.Now.ToString());
                        bool process = AsAtBalanceProcess(company, seq, userid, location, _reportDAL, unComPath);
                        //Console.WriteLine("AsAtBalanceProcess  end " + DateTime.Now.ToString());
                        if (process == true)
                        {
                            _reportDAL.TransactionCommit();
                            _reportDAL.ConnectionClose();
                            error = "Successfully updated.";
                            err = false;
                        }
                        else
                        {
                            error = "Balance Process error.";
                            err = true;
                            _reportDAL.TransactionRollback();
                            _reportDAL.ConnectionClose();
                            //goto A;
                        }
                        _reportDAL = new ReptCommonDAL();
                        _reportDAL.ConnectionOpen();
                        _reportDAL.BeginTransaction();
                        //Console.WriteLine("updateBalanaceTable  start " + DateTime.Now.ToString());
                        bool update = updateBalanaceTable(company, seq, userid, location, _reportDAL, runEndDt, mnthEnd);
                        //Console.WriteLine("updateBalanaceTable  End " + DateTime.Now.ToString());
                        _reportDAL.TransactionCommit();
                        _reportDAL.ConnectionClose();


                        _reportDAL = new ReptCommonDAL();
                        _reportDAL.ConnectionOpen();
                        _reportDAL.BeginTransaction();
                        //Console.WriteLine("updateAgeDetails  start " + DateTime.Now.ToString());
                        bool ageDet = updateAgeDetails(seq, company, location, _reportDAL, asAtDate, runEndDt, out error);
                        //Console.WriteLine("updateAgeDetails  end " + DateTime.Now.ToString());
                        _reportDAL.TransactionCommit();
                        _reportDAL.ConnectionClose();

                        _reportDAL = new ReptCommonDAL();
                        _reportDAL.ConnectionOpen();
                        _reportDAL.BeginTransaction();
                        //Console.WriteLine("updateAgeDetailsGit  start " + DateTime.Now.ToString());
                        bool ageDetGit = updateAgeDetailsGit(seq, company, location, _reportDAL, asAtDate, runEndDt, out error);
                        //Console.WriteLine("updateAgeDetailsGit  end " + DateTime.Now.ToString());
                        _reportDAL.TransactionCommit();
                        _reportDAL.ConnectionClose();

                        //Console.WriteLine("End location " + location);

                    }
                    // A:
                    //Console.WriteLine("End time " + DateTime.Now.ToString());
                }
                //Console.WriteLine("End total  " + DateTime.Now.ToString());
                return true;
                //if (err == false)
                //{
                //    _reportDAL.TransactionCommit();
                //    _reportDAL.ConnectionClose();
                //    return true;

                //}
                //else
                //{
                //    _reportDAL.TransactionRollback();
                //    _reportDAL.ConnectionClose();
                //    return false;
                // }

            }
            catch (Exception ex)
            {
                _reportDAL.TransactionRollback();
                _reportDAL.ConnectionClose();
                error = ex.Message.ToString();
                return false;
            }
        }
        private bool updateAgeDetailsGit(int seq, string company, string location, ReptCommonDAL _reportDAL, DateTime asAtDate, DateTime runEndDt, out string error)
        {
            try
            {
                seq = seq + 2; ;
                error = string.Empty;
                decimal age1_qty = 0;
                decimal age1_cost = 0;
                decimal age2_qty = 0;
                decimal age2_cost = 0;
                decimal age3_qty = 0;
                decimal age3_cost = 0;
                decimal age4_qty = 0;
                decimal age4_cost = 0;
                decimal age5_qty = 0;
                decimal age5_cost = 0;
                decimal age6_qty = 0;
                decimal age6_cost = 0;
                string SCM2_STUS = string.Empty;
                string Company = string.Empty;
                decimal ageT_qty = 0;
                decimal ageT_cost = 0;
                decimal tmp_qty = 0;

                DataTable BalDocs = _reportDAL.getBalanaceItemDataGIT(seq, location, company);
                if (BalDocs.Rows.Count > 0)
                {
                    Int32 X = 0;
                    DateTime processdate = runEndDt;
                    foreach (DataRow balance in BalDocs.Rows)
                    {
                        ageT_qty = Convert.ToDecimal(balance["BMI_AGE_QTY_T"].ToString());
                        ageT_cost = Convert.ToDecimal(balance["BMI_AGE_COST_T"].ToString());
                        X++;
                        age1_qty = 0;
                        age1_cost = 0;
                        age2_qty = 0;
                        age2_cost = 0;
                        age3_qty = 0;
                        age3_cost = 0;
                        age4_qty = 0;
                        age4_cost = 0;
                        age5_qty = 0;
                        age5_cost = 0;
                        age6_qty = 0;
                        age6_cost = 0;

                        string docNo = balance["BMI_DOC_NO"].ToString();
                        Int32 itmLine = Convert.ToInt32(balance["BMI_ITEM_LINE"].ToString());
                        Int32 batchLine = (balance["BMI_BATCH_LINE"] != DBNull.Value) ? Convert.ToInt32(balance["BMI_BATCH_LINE"].ToString()) : 0;
                        DataTable newloc = _reportDAL.getLocaionDetails(company, balance["BMI_OTH_LOC"].ToString());
                        if (newloc.Rows.Count > 0)
                        {
                            tmp_qty = ageT_qty;
                            DateTime docDate = new DateTime();

                            if (newloc.Rows[0]["ML_IS_SERIAL"].ToString() == "0")
                            {
                                try
                                {
                                    docDate = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString());
                                }
                                catch (Exception ex)
                                {
                                    error = "Invalid document date. Doc no :" + balance["BMI_DOC_NO"].ToString();
                                    return false;
                                }

                                Int32 dateDiff = Convert.ToInt32((processdate - docDate).TotalDays);
                                if (dateDiff >= 0 && dateDiff <= 90)
                                {
                                    age1_qty = ageT_qty;
                                    age1_cost = ageT_cost;
                                }
                                else if (dateDiff >= 91 && dateDiff <= 120)
                                {
                                    age2_qty = ageT_qty;
                                    age2_cost = ageT_cost;
                                }
                                else if (dateDiff >= 121 && dateDiff <= 180)
                                {
                                    age3_qty = ageT_qty;
                                    age3_cost = ageT_cost;
                                }
                                else if (dateDiff >= 181 && dateDiff <= 270)
                                {
                                    age4_qty = ageT_qty;
                                    age4_cost = ageT_cost;
                                }
                                else if (dateDiff >= 271 && dateDiff <= 360)
                                {
                                    age5_qty = ageT_qty;
                                    age5_cost = ageT_cost;
                                }
                                else
                                {
                                    age6_qty = ageT_qty;
                                    age6_cost = ageT_cost;
                                }
                                BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                bal.BMI_SEQ_NO = seq;
                                bal.BMI_COM_CD = company;
                                bal.BMI_LOC_CD = balance["BMI_OTH_LOC"].ToString();
                                bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                bal.BMI_AGE_QTY1 = age1_qty;
                                bal.BMI_AGE_COST1 = age1_cost;
                                bal.BMI_AGE_QTY2 = age2_qty;
                                bal.BMI_AGE_COST2 = age2_cost;
                                bal.BMI_AGE_QTY3 = age3_qty;
                                bal.BMI_AGE_COST3 = age3_cost;
                                bal.BMI_AGE_QTY4 = age4_qty;
                                bal.BMI_AGE_COST4 = age4_cost;
                                bal.BMI_AGE_QTY5 = age5_qty;
                                bal.BMI_AGE_COST5 = age5_cost;
                                bal.BMI_AGE_QTY6 = age6_qty;
                                bal.BMI_AGE_COST6 = age6_cost;
                                bal.BMI_AGE_QTY_T = ageT_qty;
                                bal.BMI_AGE_COST_T = ageT_cost;
                                bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                bal.BMI_ITEM_LINE = 0;
                                int eff = _reportDAL.updateAgingCompanyDetails(bal);
                            }
                            else
                            {

                                DataTable serData = _reportDAL.getInrSerBalanceData(docNo, itmLine, batchLine, balance["BMI_ITM_CD"].ToString());
                                if (serData.Rows.Count > 0)
                                {

                                    foreach (DataRow ser in serData.Rows)
                                    {
                                        if (tmp_qty > 0)
                                        {
                                            age1_qty = 0;
                                            age1_cost = 0;
                                            age2_qty = 0;
                                            age2_cost = 0;
                                            age3_qty = 0;
                                            age3_cost = 0;
                                            age4_qty = 0;
                                            age4_cost = 0;
                                            age5_qty = 0;
                                            age5_cost = 0;
                                            age6_qty = 0;
                                            age6_cost = 0;
                                            SCM2_STUS = string.Empty;
                                            Company = string.Empty;
                                            DateTime grnDate = new DateTime();
                                            try
                                            {
                                                grnDate = Convert.ToDateTime(ser["ITS_ORIG_GRNDT"].ToString());
                                            }
                                            catch (Exception ex)
                                            {
                                                error = "Invalid document grn date. Doc no :" + balance["BMI_DOC_NO"].ToString();
                                                return false;
                                            }

                                            Int32 dateDiff = Convert.ToInt32((processdate - grnDate).TotalDays);

                                            if (dateDiff >= 0 && dateDiff <= 90)
                                            {
                                                age1_qty = ageT_qty;
                                                age1_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= 91 && dateDiff <= 120)
                                            {
                                                age2_qty = ageT_qty;
                                                age2_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= 121 && dateDiff <= 180)
                                            {
                                                age3_qty = ageT_qty;
                                                age3_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= 181 && dateDiff <= 270)
                                            {
                                                age4_qty = ageT_qty;
                                                age4_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= 271 && dateDiff <= 360)
                                            {
                                                age5_qty = ageT_qty;
                                                age5_cost = ageT_cost;
                                            }
                                            else
                                            {
                                                age6_qty = ageT_qty;
                                                age6_cost = ageT_cost;
                                            }

                                            BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                            bal.BMI_SEQ_NO = seq;
                                            bal.BMI_COM_CD = company;
                                            bal.BMI_LOC_CD = balance["BMI_OTH_LOC"].ToString();
                                            bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                            bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                            bal.BMI_AGE_QTY1 = age1_qty;
                                            bal.BMI_AGE_COST1 = age1_cost;
                                            bal.BMI_AGE_QTY2 = age2_qty;
                                            bal.BMI_AGE_COST2 = age2_cost;
                                            bal.BMI_AGE_QTY3 = age3_qty;
                                            bal.BMI_AGE_COST3 = age3_cost;
                                            bal.BMI_AGE_QTY4 = age4_qty;
                                            bal.BMI_AGE_COST4 = age4_cost;
                                            bal.BMI_AGE_QTY5 = age5_qty;
                                            bal.BMI_AGE_COST5 = age5_cost;
                                            bal.BMI_AGE_QTY6 = age6_qty;
                                            bal.BMI_AGE_COST6 = age6_cost;
                                            bal.BMI_AGE_QTY_T = ageT_qty;
                                            bal.BMI_AGE_COST_T = ageT_cost;
                                            bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                            bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                            bal.BMI_ITEM_LINE = 0;
                                            int eff = _reportDAL.updateSerAgingCompanyDetails(bal);

                                            tmp_qty = tmp_qty - ageT_qty;
                                        }

                                    }
                                }
                                else
                                {
                                    tmp_qty = ageT_qty;
                                    DataTable serDtItm = _reportDAL.getSerDataByItm(balance["BMI_DOC_NO"].ToString(), balance["BMI_ITM_CD"].ToString());
                                    if (serDtItm.Rows.Count > 0)
                                    {
                                        foreach (DataRow row in serDtItm.Rows)
                                        {
                                            DateTime grnDate = new DateTime();
                                            try
                                            {
                                                grnDate = Convert.ToDateTime(row["ITS_ORIG_GRNDT"].ToString());
                                            }
                                            catch (Exception ex)
                                            {
                                                error = "Invalid document grn date. Doc no :" + balance["BMI_DOC_NO"].ToString();
                                                return false;
                                            }
                                            if (tmp_qty > 0)
                                            {
                                                Int32 DtDiff = Convert.ToInt32((processdate - grnDate).TotalDays);
                                                if (DtDiff >= 0 && DtDiff <= 90)
                                                {
                                                    age1_qty = tmp_qty;
                                                    age1_cost = ageT_cost / ageT_qty * tmp_qty;
                                                }
                                                else if (DtDiff >= 91 && DtDiff <= 120)
                                                {
                                                    age2_qty = tmp_qty;
                                                    age2_cost = ageT_cost / ageT_qty * tmp_qty;
                                                }
                                                else if (DtDiff >= 121 && DtDiff <= 180)
                                                {
                                                    age3_qty = tmp_qty;
                                                    age3_cost = ageT_cost / ageT_qty * tmp_qty;
                                                }
                                                else if (DtDiff >= 181 && DtDiff <= 270)
                                                {
                                                    age4_qty = tmp_qty;
                                                    age4_cost = ageT_cost / ageT_qty * tmp_qty;
                                                }
                                                else if (DtDiff >= 271 && DtDiff <= 360)
                                                {
                                                    age5_qty = tmp_qty;
                                                    age5_cost = ageT_cost / ageT_qty * tmp_qty;
                                                }
                                                else
                                                {
                                                    age6_qty = tmp_qty;
                                                    age6_cost = ageT_cost / ageT_qty * tmp_qty;
                                                }
                                                BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                                bal.BMI_SEQ_NO = seq;
                                                bal.BMI_COM_CD = company;
                                                bal.BMI_LOC_CD = balance["BMI_OTH_LOC"].ToString();
                                                bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                                bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                                bal.BMI_AGE_QTY1 = age1_qty;
                                                bal.BMI_AGE_COST1 = age1_cost;
                                                bal.BMI_AGE_QTY2 = age2_qty;
                                                bal.BMI_AGE_COST2 = age2_cost;
                                                bal.BMI_AGE_QTY3 = age3_qty;
                                                bal.BMI_AGE_COST3 = age3_cost;
                                                bal.BMI_AGE_QTY4 = age4_qty;
                                                bal.BMI_AGE_COST4 = age4_cost;
                                                bal.BMI_AGE_QTY5 = age5_qty;
                                                bal.BMI_AGE_COST5 = age5_cost;
                                                bal.BMI_AGE_QTY6 = age6_qty;
                                                bal.BMI_AGE_COST6 = age6_cost;
                                                bal.BMI_AGE_QTY_T = ageT_qty;
                                                bal.BMI_AGE_COST_T = ageT_cost;
                                                bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                                bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                                bal.BMI_ITEM_LINE = 0;
                                                int eff = _reportDAL.updateSerAgingCompanyDetails(bal);
                                                tmp_qty = tmp_qty - tmp_qty;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        try
                                        {
                                            docDate = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString());
                                        }
                                        catch (Exception ex)
                                        {
                                            error = "Invalid document date. Doc no :" + balance["BMI_DOC_NO"].ToString();
                                            return false;
                                        }

                                        Int32 dateDiff = Convert.ToInt32((processdate - docDate).TotalDays);
                                        if (dateDiff >= 0 && dateDiff <= 90)
                                        {
                                            age1_qty = ageT_qty;
                                            age1_cost = ageT_cost;
                                        }
                                        else if (dateDiff >= 91 && dateDiff <= 120)
                                        {
                                            age2_qty = ageT_qty;
                                            age2_cost = ageT_cost;
                                        }
                                        else if (dateDiff >= 121 && dateDiff <= 180)
                                        {
                                            age3_qty = ageT_qty;
                                            age3_cost = ageT_cost;
                                        }
                                        else if (dateDiff >= 181 && dateDiff <= 270)
                                        {
                                            age4_qty = ageT_qty;
                                            age4_cost = ageT_cost;
                                        }
                                        else if (dateDiff >= 271 && dateDiff <= 360)
                                        {
                                            age5_qty = ageT_qty;
                                            age5_cost = ageT_cost;
                                        }
                                        else
                                        {
                                            age6_qty = ageT_qty;
                                            age6_cost = ageT_cost;
                                        }
                                        BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                        bal.BMI_SEQ_NO = seq;
                                        bal.BMI_COM_CD = company;
                                        bal.BMI_LOC_CD = balance["BMI_OTH_LOC"].ToString();
                                        bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                        bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                        bal.BMI_AGE_QTY1 = age1_qty;
                                        bal.BMI_AGE_COST1 = age1_cost;
                                        bal.BMI_AGE_QTY2 = age2_qty;
                                        bal.BMI_AGE_COST2 = age2_cost;
                                        bal.BMI_AGE_QTY3 = age3_qty;
                                        bal.BMI_AGE_COST3 = age3_cost;
                                        bal.BMI_AGE_QTY4 = age4_qty;
                                        bal.BMI_AGE_COST4 = age4_cost;
                                        bal.BMI_AGE_QTY5 = age5_qty;
                                        bal.BMI_AGE_COST5 = age5_cost;
                                        bal.BMI_AGE_QTY6 = age6_qty;
                                        bal.BMI_AGE_COST6 = age6_cost;
                                        bal.BMI_AGE_QTY_T = ageT_qty;
                                        bal.BMI_AGE_COST_T = ageT_cost;
                                        bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                        bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                        bal.BMI_ITEM_LINE = 0;
                                        int eff = _reportDAL.updateSerAgingCompanyDetailsOnlyCom(bal);
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    error = "No balance data found";
                    return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private bool updateAgeDetails_ageMonitor(int seq, string company, string location, ReptCommonDAL _reportDAL, DateTime asAtDate, DateTime runEndDt, int ageslt_01, int ageslt_02, int ageslt_03, int ageslt_04, int ageslt_05, out string error)
        {
            try
            {
                seq = seq + 2; ;
                error = string.Empty;
                decimal age1_qty = 0;
                decimal age1_cost = 0;
                decimal age2_qty = 0;
                decimal age2_cost = 0;
                decimal age3_qty = 0;
                decimal age3_cost = 0;
                decimal age4_qty = 0;
                decimal age4_cost = 0;
                decimal age5_qty = 0;
                decimal age5_cost = 0;
                decimal age6_qty = 0;
                decimal age6_cost = 0;
                string SCM2_STUS = string.Empty;
                string Company = string.Empty;
                decimal ageT_qty = 0;
                decimal ageT_cost = 0;
                decimal tmp_qty = 0;

                //Age Slots-----------------------------------------------------------------
                int ageSlot_01 = ageslt_01;
                int ageSlot_02 = ageslt_02;
                int ageSlot_03 = ageslt_03;
                int ageSlot_04 = ageslt_04;
                int ageSlot_05 = ageslt_05;

                DataTable BalDocs = _reportDAL.getBalanaceItemData(seq, location, company);
                if (BalDocs.Rows.Count > 0)
                {
                    Int32 X = 0;
                    DateTime processdate = runEndDt; //new DateTime(asAtDate.Year, asAtDate.Month, 1).AddDays(-1);
                    foreach (DataRow balance in BalDocs.Rows)
                    {

                        ageT_qty = Convert.ToDecimal(balance["BMI_AGE_QTY_T"].ToString());
                        ageT_cost = Convert.ToDecimal(balance["BMI_AGE_COST_T"].ToString());
                        X++;
                        age1_qty = 0;
                        age1_cost = 0;
                        age2_qty = 0;
                        age2_cost = 0;
                        age3_qty = 0;
                        age3_cost = 0;
                        age4_qty = 0;
                        age4_cost = 0;
                        age5_qty = 0;
                        age5_cost = 0;
                        age6_qty = 0;
                        age6_cost = 0;

                        string docNo = balance["BMI_DOC_NO"].ToString();
                        Int32 itmLine = Convert.ToInt32(balance["BMI_ITEM_LINE"].ToString());
                        Int32 batchLine = (balance["BMI_BATCH_LINE"] != DBNull.Value) ? Convert.ToInt32(balance["BMI_BATCH_LINE"].ToString()) : 0;
                        DataTable newloc = _reportDAL.getLocaionDetails(company, balance["BMI_LOC_CD"].ToString());
                        if (newloc.Rows.Count > 0)
                        {
                            tmp_qty = ageT_qty;
                            DateTime docDate = new DateTime();

                            if (newloc.Rows[0]["ML_IS_SERIAL"].ToString() == "0")
                            {
                                try
                                {
                                    docDate = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString());
                                }
                                catch (Exception ex)
                                {
                                    error = "Invalid document date. Doc no :" + balance["BMI_DOC_NO"].ToString();
                                    return false;
                                }

                                Int32 dateDiff = Convert.ToInt32((processdate - docDate).TotalDays);
                                if (dateDiff >= 0 && dateDiff <= ageSlot_01)
                                {
                                    age1_qty = ageT_qty;
                                    age1_cost = ageT_cost;
                                }
                                else if (dateDiff >= ageSlot_01 + 1 && dateDiff <= ageSlot_02)
                                {
                                    age2_qty = ageT_qty;
                                    age2_cost = ageT_cost;
                                }
                                else if (dateDiff >= ageSlot_02 + 1 && dateDiff <= ageSlot_03)
                                {
                                    age3_qty = ageT_qty;
                                    age3_cost = ageT_cost;
                                }
                                else if (dateDiff >= ageSlot_03 + 1 && dateDiff <= ageSlot_04)
                                {
                                    age4_qty = ageT_qty;
                                    age4_cost = ageT_cost;
                                }
                                else if (dateDiff >= ageSlot_04 + 1 && dateDiff <= ageSlot_05)
                                {
                                    age5_qty = ageT_qty;
                                    age5_cost = ageT_cost;
                                }
                                else
                                {
                                    age6_qty = ageT_qty;
                                    age6_cost = ageT_cost;
                                }
                                BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                bal.BMI_SEQ_NO = seq;
                                bal.BMI_COM_CD = company;
                                bal.BMI_LOC_CD = balance["BMI_LOC_CD"].ToString();
                                bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                bal.BMI_AGE_QTY1 = age1_qty;
                                bal.BMI_AGE_COST1 = age1_cost;
                                bal.BMI_AGE_QTY2 = age2_qty;
                                bal.BMI_AGE_COST2 = age2_cost;
                                bal.BMI_AGE_QTY3 = age3_qty;
                                bal.BMI_AGE_COST3 = age3_cost;
                                bal.BMI_AGE_QTY4 = age4_qty;
                                bal.BMI_AGE_COST4 = age4_cost;
                                bal.BMI_AGE_QTY5 = age5_qty;
                                bal.BMI_AGE_COST5 = age5_cost;
                                bal.BMI_AGE_QTY6 = age6_qty;
                                bal.BMI_AGE_COST6 = age6_cost;
                                bal.BMI_AGE_QTY_T = ageT_qty;
                                bal.BMI_AGE_COST_T = ageT_cost;
                                bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                bal.BMI_ITEM_LINE = 0;
                                int eff = _reportDAL.updateAgingCompanyDetails(bal);
                            }
                            else
                            {

                                DataTable serData = _reportDAL.getInrSerBalanceData(docNo, itmLine, batchLine, balance["BMI_ITM_CD"].ToString());
                                if (serData.Rows.Count > 0)
                                {

                                    foreach (DataRow ser in serData.Rows)
                                    {
                                        if (tmp_qty > 0)
                                        {
                                            age1_qty = 0;
                                            age1_cost = 0;
                                            age2_qty = 0;
                                            age2_cost = 0;
                                            age3_qty = 0;
                                            age3_cost = 0;
                                            age4_qty = 0;
                                            age4_cost = 0;
                                            age5_qty = 0;
                                            age5_cost = 0;
                                            age6_qty = 0;
                                            age6_cost = 0;
                                            SCM2_STUS = string.Empty;
                                            Company = string.Empty;
                                            DateTime grnDate = new DateTime();
                                            try
                                            {
                                                grnDate = Convert.ToDateTime(ser["ITS_ORIG_GRNDT"].ToString());
                                            }
                                            catch (Exception ex)
                                            {
                                                error = "Invalid document grn date. Doc no :" + balance["BMI_DOC_NO"].ToString();
                                                return false;
                                            }

                                            Int32 dateDiff = Convert.ToInt32((processdate - grnDate).TotalDays);

                                            if (dateDiff >= 0 && dateDiff <= ageSlot_01)
                                            {
                                                age1_qty = ageT_qty;
                                                age1_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= ageSlot_01 + 1 && dateDiff <= ageSlot_02)
                                            {
                                                age2_qty = ageT_qty;
                                                age2_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= ageSlot_02 + 1 && dateDiff <= ageSlot_03)
                                            {
                                                age3_qty = ageT_qty;
                                                age3_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= ageSlot_03 + 1 && dateDiff <= ageSlot_04)
                                            {
                                                age4_qty = ageT_qty;
                                                age4_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= ageSlot_04 + 1 && dateDiff <= ageSlot_05)
                                            {
                                                age5_qty = ageT_qty;
                                                age5_cost = ageT_cost;
                                            }
                                            else
                                            {
                                                age6_qty = ageT_qty;
                                                age6_cost = ageT_cost;
                                            }

                                            BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                            bal.BMI_SEQ_NO = seq;
                                            bal.BMI_COM_CD = company;
                                            bal.BMI_LOC_CD = balance["BMI_LOC_CD"].ToString();
                                            bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                            bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                            bal.BMI_AGE_QTY1 = age1_qty;
                                            bal.BMI_AGE_COST1 = age1_cost;
                                            bal.BMI_AGE_QTY2 = age2_qty;
                                            bal.BMI_AGE_COST2 = age2_cost;
                                            bal.BMI_AGE_QTY3 = age3_qty;
                                            bal.BMI_AGE_COST3 = age3_cost;
                                            bal.BMI_AGE_QTY4 = age4_qty;
                                            bal.BMI_AGE_COST4 = age4_cost;
                                            bal.BMI_AGE_QTY5 = age5_qty;
                                            bal.BMI_AGE_COST5 = age5_cost;
                                            bal.BMI_AGE_QTY6 = age6_qty;
                                            bal.BMI_AGE_COST6 = age6_cost;
                                            bal.BMI_AGE_QTY_T = ageT_qty;
                                            bal.BMI_AGE_COST_T = ageT_cost;
                                            bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                            bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                            bal.BMI_ITEM_LINE = 0;
                                            int eff = _reportDAL.updateSerAgingCompanyDetails(bal);

                                            tmp_qty = tmp_qty - ageT_qty;
                                        }
                                    }
                                }
                                else
                                {
                                    DataTable serDtItm = _reportDAL.getSerDataByItm(balance["BMI_DOC_NO"].ToString(), balance["BMI_ITM_CD"].ToString());
                                    if (serDtItm.Rows.Count > 0)
                                    {
                                        foreach (DataRow row in serDtItm.Rows)
                                        {
                                            DateTime grnDate = new DateTime();
                                            try
                                            {
                                                grnDate = Convert.ToDateTime(row["ITS_ORIG_GRNDT"].ToString());
                                            }
                                            catch (Exception ex)
                                            {
                                                error = "Invalid document grn date. Doc no :" + balance["BMI_DOC_NO"].ToString();
                                                return false;
                                            }
                                            if (tmp_qty > 0)
                                            {
                                                Int32 DtDiff = Convert.ToInt32((processdate - grnDate).TotalDays);
                                                if (DtDiff >= 0 && DtDiff <= ageSlot_01)
                                                {
                                                    age1_qty = tmp_qty;
                                                    age1_cost = ageT_cost / ageT_qty * tmp_qty;
                                                }
                                                else if (DtDiff >= ageSlot_01 + 1 && DtDiff <= ageSlot_02)
                                                {
                                                    age2_qty = tmp_qty;
                                                    age2_cost = ageT_cost / ageT_qty * tmp_qty;
                                                }
                                                else if (DtDiff >= ageSlot_02 + 1 && DtDiff <= ageSlot_03)
                                                {
                                                    age3_qty = tmp_qty;
                                                    age3_cost = ageT_cost / ageT_qty * tmp_qty;
                                                }
                                                else if (DtDiff >= ageSlot_03 + 1 && DtDiff <= ageSlot_04)
                                                {
                                                    age4_qty = tmp_qty;
                                                    age4_cost = ageT_cost / ageT_qty * tmp_qty;
                                                }
                                                else if (DtDiff >= ageSlot_04 + 1 && DtDiff <= ageSlot_05)
                                                {
                                                    age5_qty = tmp_qty;
                                                    age5_cost = ageT_cost / ageT_qty * tmp_qty;
                                                }
                                                else
                                                {
                                                    age6_qty = tmp_qty;
                                                    age6_cost = ageT_cost / ageT_qty * tmp_qty;
                                                }
                                                BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                                bal.BMI_SEQ_NO = seq;
                                                bal.BMI_COM_CD = company;
                                                bal.BMI_LOC_CD = balance["BMI_LOC_CD"].ToString();
                                                bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                                bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                                bal.BMI_AGE_QTY1 = age1_qty;
                                                bal.BMI_AGE_COST1 = age1_cost;
                                                bal.BMI_AGE_QTY2 = age2_qty;
                                                bal.BMI_AGE_COST2 = age2_cost;
                                                bal.BMI_AGE_QTY3 = age3_qty;
                                                bal.BMI_AGE_COST3 = age3_cost;
                                                bal.BMI_AGE_QTY4 = age4_qty;
                                                bal.BMI_AGE_COST4 = age4_cost;
                                                bal.BMI_AGE_QTY5 = age5_qty;
                                                bal.BMI_AGE_COST5 = age5_cost;
                                                bal.BMI_AGE_QTY6 = age6_qty;
                                                bal.BMI_AGE_COST6 = age6_cost;
                                                bal.BMI_AGE_QTY_T = ageT_qty;
                                                bal.BMI_AGE_COST_T = ageT_cost;
                                                bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                                bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                                bal.BMI_ITEM_LINE = 0;
                                                int eff = _reportDAL.updateSerAgingCompanyDetails(bal);
                                                tmp_qty = tmp_qty - tmp_qty;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        try
                                        {
                                            docDate = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString());
                                        }
                                        catch (Exception ex)
                                        {
                                            error = "Invalid document date. Doc no :" + balance["BMI_DOC_NO"].ToString();
                                            return false;
                                        }

                                        Int32 dateDiff = Convert.ToInt32((processdate - docDate).TotalDays);
                                        if (dateDiff >= 0 && dateDiff <= ageSlot_01)
                                        {
                                            age1_qty = ageT_qty;
                                            age1_cost = ageT_cost;
                                        }
                                        else if (dateDiff >= ageSlot_01 + 1 && dateDiff <= ageSlot_02)
                                        {
                                            age2_qty = ageT_qty;
                                            age2_cost = ageT_cost;
                                        }
                                        else if (dateDiff >= ageSlot_02 + 1 && dateDiff <= ageSlot_03)
                                        {
                                            age3_qty = ageT_qty;
                                            age3_cost = ageT_cost;
                                        }
                                        else if (dateDiff >= ageSlot_03 + 1 && dateDiff <= ageSlot_04)
                                        {
                                            age4_qty = ageT_qty;
                                            age4_cost = ageT_cost;
                                        }
                                        else if (dateDiff >= ageSlot_04 + 1 && dateDiff <= ageSlot_05)
                                        {
                                            age5_qty = ageT_qty;
                                            age5_cost = ageT_cost;
                                        }
                                        else
                                        {
                                            age6_qty = ageT_qty;
                                            age6_cost = ageT_cost;
                                        }
                                        BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                        bal.BMI_SEQ_NO = seq;
                                        bal.BMI_COM_CD = company;
                                        bal.BMI_LOC_CD = balance["BMI_LOC_CD"].ToString();
                                        bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                        bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                        bal.BMI_AGE_QTY1 = age1_qty;
                                        bal.BMI_AGE_COST1 = age1_cost;
                                        bal.BMI_AGE_QTY2 = age2_qty;
                                        bal.BMI_AGE_COST2 = age2_cost;
                                        bal.BMI_AGE_QTY3 = age3_qty;
                                        bal.BMI_AGE_COST3 = age3_cost;
                                        bal.BMI_AGE_QTY4 = age4_qty;
                                        bal.BMI_AGE_COST4 = age4_cost;
                                        bal.BMI_AGE_QTY5 = age5_qty;
                                        bal.BMI_AGE_COST5 = age5_cost;
                                        bal.BMI_AGE_QTY6 = age6_qty;
                                        bal.BMI_AGE_COST6 = age6_cost;
                                        bal.BMI_AGE_QTY_T = ageT_qty;
                                        bal.BMI_AGE_COST_T = ageT_cost;
                                        bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                        bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                        bal.BMI_ITEM_LINE = 0;
                                        int eff = _reportDAL.updateSerAgingCompanyDetailsOnlyCom(bal);
                                    }
                                }
                                //else
                                //{
                                //    age1_qty = 0;
                                //    age1_cost = 0;
                                //    age2_qty = 0;
                                //    age2_cost = 0;
                                //    age3_qty = 0;
                                //    age3_cost = 0;
                                //    age4_qty = 0;
                                //    age4_cost = 0;
                                //    age5_qty = 0;
                                //    age5_cost = 0;
                                //    age6_qty = 0;
                                //    age6_cost = 0;
                                //    SCM2_STUS = string.Empty;
                                //    Company = string.Empty;

                                //    Int32 dateDiff = Convert.ToInt32((processdate - docDate).TotalDays);
                                //    if (dateDiff >= 0 && dateDiff <= ageSlot_01)
                                //    {
                                //        age1_qty = ageT_qty;
                                //        age1_cost = ageT_cost;
                                //    }
                                //    else if (dateDiff >= ageSlot_01+1 && dateDiff <= ageSlot_02)
                                //    {
                                //        age2_qty = ageT_qty;
                                //        age2_cost = ageT_cost;
                                //    }
                                //    else if (dateDiff >= ageSlot_02+1 && dateDiff <= ageSlot_03)
                                //    {
                                //        age3_qty = ageT_qty;
                                //        age3_cost = ageT_cost;
                                //    }
                                //    else if (dateDiff >= ageSlot_03+1 && dateDiff <= ageSlot_04)
                                //    {
                                //        age4_qty = ageT_qty;
                                //        age4_cost = ageT_cost;
                                //    }
                                //    else if (dateDiff >= ageSlot_04+1 && dateDiff <= ageSlot_05)
                                //    {
                                //        age5_qty = ageT_qty;
                                //        age5_cost = ageT_cost;
                                //    }
                                //    else
                                //    {
                                //        age6_qty = ageT_qty;
                                //        age6_cost = ageT_cost;
                                //    }
                                //    BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                //    bal.BMI_SEQ_NO = seq;
                                //    bal.BMI_COM_CD = company;
                                //    bal.BMI_LOC_CD = balance["BMI_LOC_CD"].ToString();
                                //    bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                //    bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                //    bal.BMI_AGE_QTY1 = age1_qty;
                                //    bal.BMI_AGE_COST1 = age1_cost;
                                //    bal.BMI_AGE_QTY2 = age2_qty;
                                //    bal.BMI_AGE_COST2 = age2_cost;
                                //    bal.BMI_AGE_QTY3 = age3_qty;
                                //    bal.BMI_AGE_COST3 = age3_cost;
                                //    bal.BMI_AGE_QTY4 = age4_qty;
                                //    bal.BMI_AGE_COST4 = age4_cost;
                                //    bal.BMI_AGE_QTY5 = age5_qty;
                                //    bal.BMI_AGE_COST5 = age5_cost;
                                //    bal.BMI_AGE_QTY6 = age6_qty;
                                //    bal.BMI_AGE_COST6 = age6_cost;
                                //    bal.BMI_AGE_QTY_T = ageT_qty;
                                //    bal.BMI_AGE_COST_T = ageT_cost;
                                //    bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                //    bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                //    bal.BMI_ITEM_LINE = 0;
                                //    int eff = _reportDAL.updateAgingCompanyDetails(bal);
                                //    tmp_qty = tmp_qty - ageT_qty;
                                //}
                            }
                        }
                    }
                }
                else
                {
                    error = "No balance data found";
                    return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private bool updateAgeDetails(int seq, string company, string location, ReptCommonDAL _reportDAL, DateTime asAtDate, DateTime runEndDt, out string error)
        {
            try
            {
                seq = seq + 2; ;
                error = string.Empty;
                decimal age1_qty = 0;
                decimal age1_cost = 0;
                decimal age2_qty = 0;
                decimal age2_cost = 0;
                decimal age3_qty = 0;
                decimal age3_cost = 0;
                decimal age4_qty = 0;
                decimal age4_cost = 0;
                decimal age5_qty = 0;
                decimal age5_cost = 0;
                decimal age6_qty = 0;
                decimal age6_cost = 0;
                string SCM2_STUS = string.Empty;
                string Company = string.Empty;
                decimal ageT_qty = 0;
                decimal ageT_cost = 0;
                decimal tmp_qty = 0;

                DataTable BalDocs = _reportDAL.getBalanaceItemData(seq, location, company);
                if (BalDocs.Rows.Count > 0)
                {
                    Int32 X = 0;
                    DateTime processdate = runEndDt; //new DateTime(asAtDate.Year, asAtDate.Month, 1).AddDays(-1);
                    foreach (DataRow balance in BalDocs.Rows)
                    {

                        ageT_qty = Convert.ToDecimal(balance["BMI_AGE_QTY_T"].ToString());
                        ageT_cost = Convert.ToDecimal(balance["BMI_AGE_COST_T"].ToString());
                        X++;
                        age1_qty = 0;
                        age1_cost = 0;
                        age2_qty = 0;
                        age2_cost = 0;
                        age3_qty = 0;
                        age3_cost = 0;
                        age4_qty = 0;
                        age4_cost = 0;
                        age5_qty = 0;
                        age5_cost = 0;
                        age6_qty = 0;
                        age6_cost = 0;

                        string docNo = balance["BMI_DOC_NO"].ToString();
                        Int32 itmLine = Convert.ToInt32(balance["BMI_ITEM_LINE"].ToString());
                        Int32 batchLine = (balance["BMI_BATCH_LINE"] != DBNull.Value) ? Convert.ToInt32(balance["BMI_BATCH_LINE"].ToString()) : 0;
                        DataTable newloc = _reportDAL.getLocaionDetails(company, balance["BMI_LOC_CD"].ToString());
                        if (newloc.Rows.Count > 0)
                        {
                            tmp_qty = ageT_qty;
                            DateTime docDate = new DateTime();

                            if (newloc.Rows[0]["ML_IS_SERIAL"].ToString() == "0")
                            {
                                try
                                {
                                    docDate = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString());
                                }
                                catch (Exception ex)
                                {
                                    error = "Invalid document date. Doc no :" + balance["BMI_DOC_NO"].ToString();
                                    return false;
                                }

                                Int32 dateDiff = Convert.ToInt32((processdate - docDate).TotalDays);
                                if (dateDiff >= 0 && dateDiff <= 90)
                                {
                                    age1_qty = ageT_qty;
                                    age1_cost = ageT_cost;
                                }
                                else if (dateDiff >= 91 && dateDiff <= 120)
                                {
                                    age2_qty = ageT_qty;
                                    age2_cost = ageT_cost;
                                }
                                else if (dateDiff >= 121 && dateDiff <= 180)
                                {
                                    age3_qty = ageT_qty;
                                    age3_cost = ageT_cost;
                                }
                                else if (dateDiff >= 181 && dateDiff <= 270)
                                {
                                    age4_qty = ageT_qty;
                                    age4_cost = ageT_cost;
                                }
                                else if (dateDiff >= 271 && dateDiff <= 360)
                                {
                                    age5_qty = ageT_qty;
                                    age5_cost = ageT_cost;
                                }
                                else
                                {
                                    age6_qty = ageT_qty;
                                    age6_cost = ageT_cost;
                                }
                                BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                bal.BMI_SEQ_NO = seq;
                                bal.BMI_COM_CD = company;
                                bal.BMI_LOC_CD = balance["BMI_LOC_CD"].ToString();
                                bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                bal.BMI_AGE_QTY1 = age1_qty;
                                bal.BMI_AGE_COST1 = age1_cost;
                                bal.BMI_AGE_QTY2 = age2_qty;
                                bal.BMI_AGE_COST2 = age2_cost;
                                bal.BMI_AGE_QTY3 = age3_qty;
                                bal.BMI_AGE_COST3 = age3_cost;
                                bal.BMI_AGE_QTY4 = age4_qty;
                                bal.BMI_AGE_COST4 = age4_cost;
                                bal.BMI_AGE_QTY5 = age5_qty;
                                bal.BMI_AGE_COST5 = age5_cost;
                                bal.BMI_AGE_QTY6 = age6_qty;
                                bal.BMI_AGE_COST6 = age6_cost;
                                bal.BMI_AGE_QTY_T = ageT_qty;
                                bal.BMI_AGE_COST_T = ageT_cost;
                                bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                bal.BMI_ITEM_LINE = 0;
                                int eff = _reportDAL.updateAgingCompanyDetails(bal);
                            }
                            else
                            {

                                DataTable serData = _reportDAL.getInrSerBalanceData(docNo, itmLine, batchLine, balance["BMI_ITM_CD"].ToString());
                                if (serData.Rows.Count > 0)
                                {

                                    foreach (DataRow ser in serData.Rows)
                                    {
                                        if (tmp_qty > 0)
                                        {
                                            age1_qty = 0;
                                            age1_cost = 0;
                                            age2_qty = 0;
                                            age2_cost = 0;
                                            age3_qty = 0;
                                            age3_cost = 0;
                                            age4_qty = 0;
                                            age4_cost = 0;
                                            age5_qty = 0;
                                            age5_cost = 0;
                                            age6_qty = 0;
                                            age6_cost = 0;
                                            SCM2_STUS = string.Empty;
                                            Company = string.Empty;
                                            DateTime grnDate = new DateTime();
                                            try
                                            {
                                                grnDate = Convert.ToDateTime(ser["ITS_ORIG_GRNDT"].ToString());
                                            }
                                            catch (Exception ex)
                                            {
                                                error = "Invalid document grn date. Doc no :" + balance["BMI_DOC_NO"].ToString();
                                                return false;
                                            }

                                            Int32 dateDiff = Convert.ToInt32((processdate - grnDate).TotalDays);

                                            if (dateDiff >= 0 && dateDiff <= 90)
                                            {
                                                age1_qty = ageT_qty;
                                                age1_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= 91 && dateDiff <= 120)
                                            {
                                                age2_qty = ageT_qty;
                                                age2_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= 121 && dateDiff <= 180)
                                            {
                                                age3_qty = ageT_qty;
                                                age3_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= 181 && dateDiff <= 270)
                                            {
                                                age4_qty = ageT_qty;
                                                age4_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= 271 && dateDiff <= 360)
                                            {
                                                age5_qty = ageT_qty;
                                                age5_cost = ageT_cost;
                                            }
                                            else
                                            {
                                                age6_qty = ageT_qty;
                                                age6_cost = ageT_cost;
                                            }

                                            BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                            bal.BMI_SEQ_NO = seq;
                                            bal.BMI_COM_CD = company;
                                            bal.BMI_LOC_CD = balance["BMI_LOC_CD"].ToString();
                                            bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                            bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                            bal.BMI_AGE_QTY1 = age1_qty;
                                            bal.BMI_AGE_COST1 = age1_cost;
                                            bal.BMI_AGE_QTY2 = age2_qty;
                                            bal.BMI_AGE_COST2 = age2_cost;
                                            bal.BMI_AGE_QTY3 = age3_qty;
                                            bal.BMI_AGE_COST3 = age3_cost;
                                            bal.BMI_AGE_QTY4 = age4_qty;
                                            bal.BMI_AGE_COST4 = age4_cost;
                                            bal.BMI_AGE_QTY5 = age5_qty;
                                            bal.BMI_AGE_COST5 = age5_cost;
                                            bal.BMI_AGE_QTY6 = age6_qty;
                                            bal.BMI_AGE_COST6 = age6_cost;
                                            bal.BMI_AGE_QTY_T = ageT_qty;
                                            bal.BMI_AGE_COST_T = ageT_cost;
                                            bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                            bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                            bal.BMI_ITEM_LINE = 0;
                                            int eff = _reportDAL.updateSerAgingCompanyDetails(bal);

                                            tmp_qty = tmp_qty - ageT_qty;
                                        }
                                    }
                                }
                                else
                                {
                                    DataTable serDtItm = _reportDAL.getSerDataByItm(balance["BMI_DOC_NO"].ToString(), balance["BMI_ITM_CD"].ToString());
                                    if (serDtItm.Rows.Count > 0)
                                    {
                                        foreach (DataRow row in serDtItm.Rows)
                                        {
                                            DateTime grnDate = new DateTime();
                                            try
                                            {
                                                grnDate = Convert.ToDateTime(row["ITS_ORIG_GRNDT"].ToString());
                                            }
                                            catch (Exception ex)
                                            {
                                                error = "Invalid document grn date. Doc no :" + balance["BMI_DOC_NO"].ToString();
                                                return false;
                                            }
                                            if (tmp_qty > 0)
                                            {
                                                Int32 DtDiff = Convert.ToInt32((processdate - grnDate).TotalDays);
                                                if (DtDiff >= 0 && DtDiff <= 90)
                                                {
                                                    age1_qty = tmp_qty;
                                                    age1_cost = ageT_cost / ageT_qty * tmp_qty;
                                                }
                                                else if (DtDiff >= 91 && DtDiff <= 120)
                                                {
                                                    age2_qty = tmp_qty;
                                                    age2_cost = ageT_cost / ageT_qty * tmp_qty;
                                                }
                                                else if (DtDiff >= 121 && DtDiff <= 180)
                                                {
                                                    age3_qty = tmp_qty;
                                                    age3_cost = ageT_cost / ageT_qty * tmp_qty;
                                                }
                                                else if (DtDiff >= 181 && DtDiff <= 270)
                                                {
                                                    age4_qty = tmp_qty;
                                                    age4_cost = ageT_cost / ageT_qty * tmp_qty;
                                                }
                                                else if (DtDiff >= 271 && DtDiff <= 360)
                                                {
                                                    age5_qty = tmp_qty;
                                                    age5_cost = ageT_cost / ageT_qty * tmp_qty;
                                                }
                                                else
                                                {
                                                    age6_qty = tmp_qty;
                                                    age6_cost = ageT_cost / ageT_qty * tmp_qty;
                                                }
                                                BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                                bal.BMI_SEQ_NO = seq;
                                                bal.BMI_COM_CD = company;
                                                bal.BMI_LOC_CD = balance["BMI_LOC_CD"].ToString();
                                                bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                                bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                                bal.BMI_AGE_QTY1 = age1_qty;
                                                bal.BMI_AGE_COST1 = age1_cost;
                                                bal.BMI_AGE_QTY2 = age2_qty;
                                                bal.BMI_AGE_COST2 = age2_cost;
                                                bal.BMI_AGE_QTY3 = age3_qty;
                                                bal.BMI_AGE_COST3 = age3_cost;
                                                bal.BMI_AGE_QTY4 = age4_qty;
                                                bal.BMI_AGE_COST4 = age4_cost;
                                                bal.BMI_AGE_QTY5 = age5_qty;
                                                bal.BMI_AGE_COST5 = age5_cost;
                                                bal.BMI_AGE_QTY6 = age6_qty;
                                                bal.BMI_AGE_COST6 = age6_cost;
                                                bal.BMI_AGE_QTY_T = ageT_qty;
                                                bal.BMI_AGE_COST_T = ageT_cost;
                                                bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                                bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                                bal.BMI_ITEM_LINE = 0;
                                                int eff = _reportDAL.updateSerAgingCompanyDetails(bal);
                                                tmp_qty = tmp_qty - tmp_qty;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        try
                                        {
                                            docDate = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString());
                                        }
                                        catch (Exception ex)
                                        {
                                            error = "Invalid document date. Doc no :" + balance["BMI_DOC_NO"].ToString();
                                            return false;
                                        }

                                        Int32 dateDiff = Convert.ToInt32((processdate - docDate).TotalDays);
                                        if (dateDiff >= 0 && dateDiff <= 90)
                                        {
                                            age1_qty = ageT_qty;
                                            age1_cost = ageT_cost;
                                        }
                                        else if (dateDiff >= 91 && dateDiff <= 120)
                                        {
                                            age2_qty = ageT_qty;
                                            age2_cost = ageT_cost;
                                        }
                                        else if (dateDiff >= 121 && dateDiff <= 180)
                                        {
                                            age3_qty = ageT_qty;
                                            age3_cost = ageT_cost;
                                        }
                                        else if (dateDiff >= 181 && dateDiff <= 270)
                                        {
                                            age4_qty = ageT_qty;
                                            age4_cost = ageT_cost;
                                        }
                                        else if (dateDiff >= 271 && dateDiff <= 360)
                                        {
                                            age5_qty = ageT_qty;
                                            age5_cost = ageT_cost;
                                        }
                                        else
                                        {
                                            age6_qty = ageT_qty;
                                            age6_cost = ageT_cost;
                                        }
                                        BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                        bal.BMI_SEQ_NO = seq;
                                        bal.BMI_COM_CD = company;
                                        bal.BMI_LOC_CD = balance["BMI_LOC_CD"].ToString();
                                        bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                        bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                        bal.BMI_AGE_QTY1 = age1_qty;
                                        bal.BMI_AGE_COST1 = age1_cost;
                                        bal.BMI_AGE_QTY2 = age2_qty;
                                        bal.BMI_AGE_COST2 = age2_cost;
                                        bal.BMI_AGE_QTY3 = age3_qty;
                                        bal.BMI_AGE_COST3 = age3_cost;
                                        bal.BMI_AGE_QTY4 = age4_qty;
                                        bal.BMI_AGE_COST4 = age4_cost;
                                        bal.BMI_AGE_QTY5 = age5_qty;
                                        bal.BMI_AGE_COST5 = age5_cost;
                                        bal.BMI_AGE_QTY6 = age6_qty;
                                        bal.BMI_AGE_COST6 = age6_cost;
                                        bal.BMI_AGE_QTY_T = ageT_qty;
                                        bal.BMI_AGE_COST_T = ageT_cost;
                                        bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                        bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                        bal.BMI_ITEM_LINE = 0;
                                        int eff = _reportDAL.updateSerAgingCompanyDetailsOnlyCom(bal);
                                    }
                                }
                                //else
                                //{
                                //    age1_qty = 0;
                                //    age1_cost = 0;
                                //    age2_qty = 0;
                                //    age2_cost = 0;
                                //    age3_qty = 0;
                                //    age3_cost = 0;
                                //    age4_qty = 0;
                                //    age4_cost = 0;
                                //    age5_qty = 0;
                                //    age5_cost = 0;
                                //    age6_qty = 0;
                                //    age6_cost = 0;
                                //    SCM2_STUS = string.Empty;
                                //    Company = string.Empty;

                                //    Int32 dateDiff = Convert.ToInt32((processdate - docDate).TotalDays);
                                //    if (dateDiff >= 0 && dateDiff <= 90)
                                //    {
                                //        age1_qty = ageT_qty;
                                //        age1_cost = ageT_cost;
                                //    }
                                //    else if (dateDiff >= 91 && dateDiff <= 120)
                                //    {
                                //        age2_qty = ageT_qty;
                                //        age2_cost = ageT_cost;
                                //    }
                                //    else if (dateDiff >= 121 && dateDiff <= 180)
                                //    {
                                //        age3_qty = ageT_qty;
                                //        age3_cost = ageT_cost;
                                //    }
                                //    else if (dateDiff >= 181 && dateDiff <= 270)
                                //    {
                                //        age4_qty = ageT_qty;
                                //        age4_cost = ageT_cost;
                                //    }
                                //    else if (dateDiff >= 271 && dateDiff <= 360)
                                //    {
                                //        age5_qty = ageT_qty;
                                //        age5_cost = ageT_cost;
                                //    }
                                //    else
                                //    {
                                //        age6_qty = ageT_qty;
                                //        age6_cost = ageT_cost;
                                //    }
                                //    BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                //    bal.BMI_SEQ_NO = seq;
                                //    bal.BMI_COM_CD = company;
                                //    bal.BMI_LOC_CD = balance["BMI_LOC_CD"].ToString();
                                //    bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                //    bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                //    bal.BMI_AGE_QTY1 = age1_qty;
                                //    bal.BMI_AGE_COST1 = age1_cost;
                                //    bal.BMI_AGE_QTY2 = age2_qty;
                                //    bal.BMI_AGE_COST2 = age2_cost;
                                //    bal.BMI_AGE_QTY3 = age3_qty;
                                //    bal.BMI_AGE_COST3 = age3_cost;
                                //    bal.BMI_AGE_QTY4 = age4_qty;
                                //    bal.BMI_AGE_COST4 = age4_cost;
                                //    bal.BMI_AGE_QTY5 = age5_qty;
                                //    bal.BMI_AGE_COST5 = age5_cost;
                                //    bal.BMI_AGE_QTY6 = age6_qty;
                                //    bal.BMI_AGE_COST6 = age6_cost;
                                //    bal.BMI_AGE_QTY_T = ageT_qty;
                                //    bal.BMI_AGE_COST_T = ageT_cost;
                                //    bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                //    bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                //    bal.BMI_ITEM_LINE = 0;
                                //    int eff = _reportDAL.updateAgingCompanyDetails(bal);
                                //    tmp_qty = tmp_qty - ageT_qty;
                                //}
                            }
                        }
                    }
                }
                else
                {
                    error = "No balance data found";
                    return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private bool updateAgeDetailsBAK(int seq, string company, string location, ReptCommonDAL _reportDAL, DateTime asAtDate, out string error)
        {
            try
            {
                seq = seq + 2; ;
                error = string.Empty;
                decimal age1_qty = 0;
                decimal age1_cost = 0;
                decimal age2_qty = 0;
                decimal age2_cost = 0;
                decimal age3_qty = 0;
                decimal age3_cost = 0;
                decimal age4_qty = 0;
                decimal age4_cost = 0;
                decimal age5_qty = 0;
                decimal age5_cost = 0;
                decimal age6_qty = 0;
                decimal age6_cost = 0;
                string SCM2_STUS = string.Empty;
                string Company = string.Empty;
                decimal ageT_qty = 0;
                decimal ageT_cost = 0;
                decimal tmp_qty = 0;

                DataTable BalDocs = _reportDAL.getBalanaceItemData(seq, location, company);
                if (BalDocs.Rows.Count > 0)
                {
                    Int32 X = 0;
                    DateTime processdate = new DateTime(asAtDate.Year, asAtDate.Month, 1).AddDays(-1);
                    foreach (DataRow balance in BalDocs.Rows)
                    {
                        ageT_qty = Convert.ToDecimal(balance["BMI_AGE_QTY_T"].ToString());
                        ageT_cost = Convert.ToDecimal(balance["BMI_AGE_COST_T"].ToString());
                        X++;
                        age1_qty = 0;
                        age1_cost = 0;
                        age2_qty = 0;
                        age2_cost = 0;
                        age3_qty = 0;
                        age3_cost = 0;
                        age4_qty = 0;
                        age4_cost = 0;
                        age5_qty = 0;
                        age5_cost = 0;
                        age6_qty = 0;
                        age6_cost = 0;

                        string docNo = balance["BMI_DOC_NO"].ToString();
                        Int32 itmLine = Convert.ToInt32(balance["BMI_ITEM_LINE"].ToString());
                        Int32 batchLine = (balance["BMI_BATCH_LINE"] != DBNull.Value) ? Convert.ToInt32(balance["BMI_BATCH_LINE"].ToString()) : 0;
                        DataTable newloc = _reportDAL.getLocaionDetails(company, balance["BMI_LOC_CD"].ToString());
                        if (newloc.Rows.Count > 0)
                        {

                            DateTime docDate = new DateTime();

                            if (newloc.Rows[0]["ML_IS_SERIAL"].ToString() == "0")
                            {
                                try
                                {
                                    docDate = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString());
                                }
                                catch (Exception ex)
                                {
                                    error = "Invalid document date. Doc no :" + balance["BMI_DOC_NO"].ToString();
                                    return false;
                                }

                                Int32 dateDiff = Convert.ToInt32((processdate - docDate).TotalDays);
                                if (dateDiff >= 0 && dateDiff <= 90)
                                {
                                    age1_qty = ageT_qty;
                                    age1_cost = ageT_cost;
                                }
                                else if (dateDiff >= 91 && dateDiff <= 120)
                                {
                                    age2_qty = ageT_qty;
                                    age2_cost = ageT_cost;
                                }
                                else if (dateDiff >= 121 && dateDiff <= 180)
                                {
                                    age3_qty = ageT_qty;
                                    age3_cost = ageT_cost;
                                }
                                else if (dateDiff >= 181 && dateDiff <= 270)
                                {
                                    age4_qty = ageT_qty;
                                    age4_cost = ageT_cost;
                                }
                                else if (dateDiff >= 271 && dateDiff <= 360)
                                {
                                    age5_qty = ageT_qty;
                                    age5_cost = ageT_cost;
                                }
                                else
                                {
                                    age6_qty = ageT_qty;
                                    age6_cost = ageT_cost;
                                }
                                BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                bal.BMI_SEQ_NO = seq;
                                bal.BMI_COM_CD = company;
                                bal.BMI_LOC_CD = balance["BMI_LOC_CD"].ToString();
                                bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                bal.BMI_AGE_QTY1 = age1_qty;
                                bal.BMI_AGE_COST1 = age1_cost;
                                bal.BMI_AGE_QTY2 = age2_qty;
                                bal.BMI_AGE_COST2 = age2_cost;
                                bal.BMI_AGE_QTY3 = age3_qty;
                                bal.BMI_AGE_COST3 = age3_cost;
                                bal.BMI_AGE_QTY4 = age4_qty;
                                bal.BMI_AGE_COST4 = age4_cost;
                                bal.BMI_AGE_QTY5 = age5_qty;
                                bal.BMI_AGE_COST5 = age5_cost;
                                bal.BMI_AGE_QTY6 = age6_qty;
                                bal.BMI_AGE_COST6 = age6_cost;
                                bal.BMI_AGE_QTY_T = ageT_qty;
                                bal.BMI_AGE_COST_T = ageT_cost;
                                bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                bal.BMI_ITEM_LINE = 0;
                                int eff = _reportDAL.updateAgingCompanyDetails(bal);
                            }
                            else
                            {

                                DataTable serData = _reportDAL.getInrSerBalanceData(docNo, itmLine, batchLine, balance["BMI_ITM_CD"].ToString());
                                if (serData.Rows.Count > 0)
                                {
                                    tmp_qty = ageT_qty;
                                    foreach (DataRow ser in serData.Rows)
                                    {
                                        if (tmp_qty > 0)
                                        {
                                            age1_qty = 0;
                                            age1_cost = 0;
                                            age2_qty = 0;
                                            age2_cost = 0;
                                            age3_qty = 0;
                                            age3_cost = 0;
                                            age4_qty = 0;
                                            age4_cost = 0;
                                            age5_qty = 0;
                                            age5_cost = 0;
                                            age6_qty = 0;
                                            age6_cost = 0;
                                            SCM2_STUS = string.Empty;
                                            Company = string.Empty;
                                            DateTime grnDate = new DateTime();
                                            try
                                            {
                                                grnDate = Convert.ToDateTime(ser["ITS_ORIG_GRNDT"].ToString());
                                            }
                                            catch (Exception ex)
                                            {
                                                error = "Invalid document grn date. Doc no :" + balance["BMI_DOC_NO"].ToString();
                                                return false;
                                            }

                                            Int32 dateDiff = Convert.ToInt32((processdate - grnDate).TotalDays);

                                            if (dateDiff >= 0 && dateDiff <= 90)
                                            {
                                                age1_qty = ageT_qty;
                                                age1_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= 91 && dateDiff <= 120)
                                            {
                                                age2_qty = ageT_qty;
                                                age2_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= 121 && dateDiff <= 180)
                                            {
                                                age3_qty = ageT_qty;
                                                age3_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= 181 && dateDiff <= 270)
                                            {
                                                age4_qty = ageT_qty;
                                                age4_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= 271 && dateDiff <= 360)
                                            {
                                                age5_qty = ageT_qty;
                                                age5_cost = ageT_cost;
                                            }
                                            else
                                            {
                                                age6_qty = ageT_qty;
                                                age6_cost = ageT_cost;
                                            }

                                            BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                            bal.BMI_SEQ_NO = seq;
                                            bal.BMI_COM_CD = company;
                                            bal.BMI_LOC_CD = balance["BMI_LOC_CD"].ToString();
                                            bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                            bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                            bal.BMI_AGE_QTY1 = age1_qty;
                                            bal.BMI_AGE_COST1 = age1_cost;
                                            bal.BMI_AGE_QTY2 = age2_qty;
                                            bal.BMI_AGE_COST2 = age2_cost;
                                            bal.BMI_AGE_QTY3 = age3_qty;
                                            bal.BMI_AGE_COST3 = age3_cost;
                                            bal.BMI_AGE_QTY4 = age4_qty;
                                            bal.BMI_AGE_COST4 = age4_cost;
                                            bal.BMI_AGE_QTY5 = age5_qty;
                                            bal.BMI_AGE_COST5 = age5_cost;
                                            bal.BMI_AGE_QTY6 = age6_qty;
                                            bal.BMI_AGE_COST6 = age6_cost;
                                            bal.BMI_AGE_QTY_T = ageT_qty;
                                            bal.BMI_AGE_COST_T = ageT_cost;
                                            bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                            bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                            bal.BMI_ITEM_LINE = 0;
                                            int eff = _reportDAL.updateSerAgingCompanyDetails(bal);

                                            tmp_qty = tmp_qty - ageT_qty;
                                        }
                                        else
                                        {
                                            if (tmp_qty > 0)
                                            {
                                                DataTable serDtItm = _reportDAL.getSerDataByItm(balance["BMI_DOC_NO"].ToString(), balance["BMI_ITM_CD"].ToString());
                                                if (serDtItm.Rows.Count > 0)
                                                {
                                                    foreach (DataRow row in serDtItm.Rows)
                                                    {
                                                        DateTime grnDate = new DateTime();
                                                        try
                                                        {
                                                            grnDate = Convert.ToDateTime(row["ITS_ORIG_GRNDT"].ToString());
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            error = "Invalid document grn date. Doc no :" + balance["BMI_DOC_NO"].ToString();
                                                            return false;
                                                        }
                                                        if (tmp_qty > 0)
                                                        {
                                                            Int32 DtDiff = Convert.ToInt32((processdate - grnDate).TotalDays);
                                                            if (DtDiff >= 0 && DtDiff <= 90)
                                                            {
                                                                age1_qty = tmp_qty;
                                                                age1_cost = ageT_cost / ageT_qty * tmp_qty;
                                                            }
                                                            else if (DtDiff >= 91 && DtDiff <= 120)
                                                            {
                                                                age2_qty = tmp_qty;
                                                                age2_cost = ageT_cost / ageT_qty * tmp_qty;
                                                            }
                                                            else if (DtDiff >= 121 && DtDiff <= 180)
                                                            {
                                                                age3_qty = tmp_qty;
                                                                age3_cost = ageT_cost / ageT_qty * tmp_qty;
                                                            }
                                                            else if (DtDiff >= 181 && DtDiff <= 270)
                                                            {
                                                                age4_qty = tmp_qty;
                                                                age4_cost = ageT_cost / ageT_qty * tmp_qty;
                                                            }
                                                            else if (DtDiff >= 271 && DtDiff <= 360)
                                                            {
                                                                age5_qty = tmp_qty;
                                                                age5_cost = ageT_cost / ageT_qty * tmp_qty;
                                                            }
                                                            else
                                                            {
                                                                age6_qty = tmp_qty;
                                                                age6_cost = ageT_cost / ageT_qty * tmp_qty;
                                                            }
                                                            BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                                            bal.BMI_SEQ_NO = seq;
                                                            bal.BMI_COM_CD = company;
                                                            bal.BMI_LOC_CD = balance["BMI_LOC_CD"].ToString();
                                                            bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                                            bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                                            bal.BMI_AGE_QTY1 = age1_qty;
                                                            bal.BMI_AGE_COST1 = age1_cost;
                                                            bal.BMI_AGE_QTY2 = age2_qty;
                                                            bal.BMI_AGE_COST2 = age2_cost;
                                                            bal.BMI_AGE_QTY3 = age3_qty;
                                                            bal.BMI_AGE_COST3 = age3_cost;
                                                            bal.BMI_AGE_QTY4 = age4_qty;
                                                            bal.BMI_AGE_COST4 = age4_cost;
                                                            bal.BMI_AGE_QTY5 = age5_qty;
                                                            bal.BMI_AGE_COST5 = age5_cost;
                                                            bal.BMI_AGE_QTY6 = age6_qty;
                                                            bal.BMI_AGE_COST6 = age6_cost;
                                                            bal.BMI_AGE_QTY_T = ageT_qty;
                                                            bal.BMI_AGE_COST_T = ageT_cost;
                                                            bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                                            bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                                            bal.BMI_ITEM_LINE = 0;
                                                            int eff = _reportDAL.updateSerAgingCompanyDetails(bal);
                                                        }
                                                        else
                                                        {
                                                            try
                                                            {
                                                                docDate = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString());
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                error = "Invalid document date. Doc no :" + balance["BMI_DOC_NO"].ToString();
                                                                return false;
                                                            }

                                                            Int32 dateDiff = Convert.ToInt32((processdate - docDate).TotalDays);
                                                            if (dateDiff >= 0 && dateDiff <= 90)
                                                            {
                                                                age1_qty = ageT_qty;
                                                                age1_cost = ageT_cost;
                                                            }
                                                            else if (dateDiff >= 91 && dateDiff <= 120)
                                                            {
                                                                age2_qty = ageT_qty;
                                                                age2_cost = ageT_cost;
                                                            }
                                                            else if (dateDiff >= 121 && dateDiff <= 180)
                                                            {
                                                                age3_qty = ageT_qty;
                                                                age3_cost = ageT_cost;
                                                            }
                                                            else if (dateDiff >= 181 && dateDiff <= 270)
                                                            {
                                                                age4_qty = ageT_qty;
                                                                age4_cost = ageT_cost;
                                                            }
                                                            else if (dateDiff >= 271 && dateDiff <= 360)
                                                            {
                                                                age5_qty = ageT_qty;
                                                                age5_cost = ageT_cost;
                                                            }
                                                            else
                                                            {
                                                                age6_qty = ageT_qty;
                                                                age6_cost = ageT_cost;
                                                            }
                                                            BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                                            bal.BMI_SEQ_NO = seq;
                                                            bal.BMI_COM_CD = company;
                                                            bal.BMI_LOC_CD = balance["BMI_LOC_CD"].ToString();
                                                            bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                                            bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                                            bal.BMI_AGE_QTY1 = age1_qty;
                                                            bal.BMI_AGE_COST1 = age1_cost;
                                                            bal.BMI_AGE_QTY2 = age2_qty;
                                                            bal.BMI_AGE_COST2 = age2_cost;
                                                            bal.BMI_AGE_QTY3 = age3_qty;
                                                            bal.BMI_AGE_COST3 = age3_cost;
                                                            bal.BMI_AGE_QTY4 = age4_qty;
                                                            bal.BMI_AGE_COST4 = age4_cost;
                                                            bal.BMI_AGE_QTY5 = age5_qty;
                                                            bal.BMI_AGE_COST5 = age5_cost;
                                                            bal.BMI_AGE_QTY6 = age6_qty;
                                                            bal.BMI_AGE_COST6 = age6_cost;
                                                            bal.BMI_AGE_QTY_T = ageT_qty;
                                                            bal.BMI_AGE_COST_T = ageT_cost;
                                                            bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                                            bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                                            bal.BMI_ITEM_LINE = 0;
                                                            int eff = _reportDAL.updateSerAgingCompanyDetailsOnlyCom(bal);
                                                        }
                                                    }
                                                }

                                            }
                                        }
                                    }
                                }
                                //else
                                //{
                                //    age1_qty = 0;
                                //    age1_cost = 0;
                                //    age2_qty = 0;
                                //    age2_cost = 0;
                                //    age3_qty = 0;
                                //    age3_cost = 0;
                                //    age4_qty = 0;
                                //    age4_cost = 0;
                                //    age5_qty = 0;
                                //    age5_cost = 0;
                                //    age6_qty = 0;
                                //    age6_cost = 0;
                                //    SCM2_STUS = string.Empty;
                                //    Company = string.Empty;

                                //    Int32 dateDiff = Convert.ToInt32((processdate - docDate).TotalDays);
                                //    if (dateDiff >= 0 && dateDiff <= 90)
                                //    {
                                //        age1_qty = ageT_qty;
                                //        age1_cost = ageT_cost;
                                //    }
                                //    else if (dateDiff >= 91 && dateDiff <= 120)
                                //    {
                                //        age2_qty = ageT_qty;
                                //        age2_cost = ageT_cost;
                                //    }
                                //    else if (dateDiff >= 121 && dateDiff <= 180)
                                //    {
                                //        age3_qty = ageT_qty;
                                //        age3_cost = ageT_cost;
                                //    }
                                //    else if (dateDiff >= 181 && dateDiff <= 270)
                                //    {
                                //        age4_qty = ageT_qty;
                                //        age4_cost = ageT_cost;
                                //    }
                                //    else if (dateDiff >= 271 && dateDiff <= 360)
                                //    {
                                //        age5_qty = ageT_qty;
                                //        age5_cost = ageT_cost;
                                //    }
                                //    else
                                //    {
                                //        age6_qty = ageT_qty;
                                //        age6_cost = ageT_cost;
                                //    }
                                //    BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                //    bal.BMI_SEQ_NO = seq;
                                //    bal.BMI_COM_CD = company;
                                //    bal.BMI_LOC_CD = balance["BMI_LOC_CD"].ToString();
                                //    bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                //    bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                //    bal.BMI_AGE_QTY1 = age1_qty;
                                //    bal.BMI_AGE_COST1 = age1_cost;
                                //    bal.BMI_AGE_QTY2 = age2_qty;
                                //    bal.BMI_AGE_COST2 = age2_cost;
                                //    bal.BMI_AGE_QTY3 = age3_qty;
                                //    bal.BMI_AGE_COST3 = age3_cost;
                                //    bal.BMI_AGE_QTY4 = age4_qty;
                                //    bal.BMI_AGE_COST4 = age4_cost;
                                //    bal.BMI_AGE_QTY5 = age5_qty;
                                //    bal.BMI_AGE_COST5 = age5_cost;
                                //    bal.BMI_AGE_QTY6 = age6_qty;
                                //    bal.BMI_AGE_COST6 = age6_cost;
                                //    bal.BMI_AGE_QTY_T = ageT_qty;
                                //    bal.BMI_AGE_COST_T = ageT_cost;
                                //    bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                //    bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                //    bal.BMI_ITEM_LINE = 0;
                                //    int eff = _reportDAL.updateAgingCompanyDetails(bal);
                                //    tmp_qty = tmp_qty - ageT_qty;
                                //}
                            }
                        }
                    }
                }
                else
                {
                    error = "No balance data found";
                    return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private bool updateBalanaceTable(String com, Int32 seq, string userid, string location, ReptCommonDAL _reportDAL, DateTime monthEndDt, bool mnthEnd)
        {
            try
            {
                DataTable getInDocs = _reportDAL.getTemporyInBalanceDocument(com, userid, location);
                if (getInDocs.Rows.Count > 0)
                {
                    seq = seq + 2; ;
                    foreach (DataRow row in getInDocs.Rows)
                    {
                        Int32 eff = _reportDAL.addToBalanceTableStock(row, seq);
                    }
                    //DateTime monthEnd = new DateTime(asAtDate.Year, asAtDate.Month, 1);
                    Int32 eff1 = _reportDAL.updateAgingDetails(seq, monthEndDt, location);
                }
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private bool updateBalanaceTable(String com, Int32 seq, string userid, string location, ReptCommonDAL _reportDAL, DateTime monthEndDt, bool mnthEnd, string chnl, string adminteam, string wedret)
        {
            try
            {

                DataTable getInDocs = _reportDAL.getTemporyInBalanceDocument(com, userid, location);
                if (getInDocs.Rows.Count > 0)
                {
                    if (com == "ABL" || com == "LRP" || com == "SGL" || com == "SGD")
                    {
                        seq = seq + 2;
                    }
                    else
                    {
                        seq = seq + 1;
                    }
                    foreach (DataRow row in getInDocs.Rows)
                    {
                        Int32 eff = _reportDAL.addToBalanceTableStock(row, seq, chnl, adminteam, wedret);
                    }
                    //DateTime monthEnd = new DateTime(asAtDate.Year, asAtDate.Month, 1);
                    Int32 eff1 = _reportDAL.updateAgingDetails(seq, monthEndDt, location, com);
                }
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public bool AsAtBalanceProcess(String com, Int32 seq, string userid, string location, ReptCommonDAL _reportDAL, bool uncomPath = false)
        {
            try
            {
                DataTable _emsDataOut = new DataTable("emsdata");
                _emsDataOut = _reportDAL.getTemporyOutLocations(com, location, userid);
                if (_emsDataOut.Rows.Count > 0)
                {
                    Int32 x = 1;
                    foreach (DataRow loc in _emsDataOut.Rows)
                    {
                        x++;
                        string docloc = loc["LOC"].ToString();
                        DataTable locOutData = _reportDAL.getLocationOutTempData(docloc, userid, com);
                        if (locOutData.Rows.Count > 0)
                        {
                            Int32 i = 0;
                            foreach (DataRow outData in locOutData.Rows)
                            {
                                i++;
                                string _outdoc = outData["OUTDOCNO"].ToString();
                                string _basedocno = outData["DOCNO"].ToString();
                                string _baseitemcode = outData["ITEMCODE"].ToString();
                                string _baseitemstatus = outData["ITEMSTATUS"].ToString();
                                int _baseitemline = Convert.ToInt32(outData["ITEMLINE"].ToString());
                                int _basebatchline = Convert.ToInt32(outData["BATCHLINE"].ToString());
                                decimal _outqty = Convert.ToDecimal(outData["QTY"].ToString());
                                decimal _unitcost = Convert.ToDecimal(outData["UNITCOST"].ToString());
                                int _outseq = Convert.ToInt32(outData["LOGSEQ"].ToString());
                                Int32 j = 0;
                                while (_outqty > 0)
                                {
                                    j++;
                                    string combination = "ALL";
                                    //Base doc no , item line and batch line
                                    DataTable locInData = _reportDAL.getLocationInTempData(_basedocno, _baseitemcode, _baseitemstatus, _baseitemline, _basebatchline, 0, combination, userid);
                                    if (locInData.Rows.Count > 0)
                                    {
                                        foreach (DataRow inDoc in locInData.Rows)
                                        {
                                            try
                                            {
                                                decimal _outqty1 = Convert.ToDecimal(inDoc["BAL_QTY"].ToString());
                                                int _inseq = Convert.ToInt32(inDoc["LOGSEQ"].ToString());
                                                decimal _unitcostx = Convert.ToDecimal(inDoc["UNITCOST"].ToString());
                                                if (_outqty > _outqty1)
                                                {
                                                    Int32 eff = _reportDAL.updateTempINOutBalanceQty(_outqty1, _inseq, _outseq);
                                                    //if (Math.Round(_unitcostx) != Math.Round(_unitcost))
                                                    //{
                                                    //    Console.WriteLine(_outdoc + " | " + _baseitemcode + " | " + _unitcostx + " | " + _unitcost);
                                                    //}

                                                    _outqty = _outqty - _outqty1;
                                                    if (_outqty == 0)
                                                    {
                                                        break;
                                                    }
                                                }
                                                else
                                                {
                                                    Int32 eff = _reportDAL.updateTempINOutBalanceQty(_outqty, _inseq, _outseq);
                                                    //if (Math.Round(_unitcostx) != Math.Round(_unitcost))
                                                    //{
                                                    //    Console.WriteLine(_outdoc + " | " + _baseitemcode + " | " + _unitcostx + " | " + _unitcost);
                                                    //}
                                                    _outqty = 0;
                                                    break;
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                throw ex;
                                            }
                                        }

                                    }
                                    else
                                    {
                                        combination = "DOCITMCD";
                                        //Base doc no and item line only
                                        locInData = new DataTable();
                                        locInData = _reportDAL.getLocationInTempData(_basedocno, _baseitemcode, _baseitemstatus, _baseitemline, 0, 0, combination, userid);
                                        if (locInData.Rows.Count > 0)
                                        {
                                            foreach (DataRow inDoc in locInData.Rows)
                                            {
                                                try
                                                {
                                                    decimal _outqty1 = Convert.ToDecimal(inDoc["BAL_QTY"].ToString());
                                                    int _inseq = Convert.ToInt32(inDoc["LOGSEQ"].ToString());
                                                    decimal _unitcostx = Convert.ToDecimal(inDoc["UNITCOST"].ToString());
                                                    if (_outqty > _outqty1)
                                                    {
                                                        Int32 eff = _reportDAL.updateTempINOutBalanceQty(_outqty1, _inseq, _outseq);
                                                        //if (Math.Round(_unitcostx) != Math.Round(_unitcost))
                                                        //{
                                                        //    Console.WriteLine(_outdoc + " | " + _baseitemcode + " | " + _unitcostx + " | " + _unitcost);
                                                        //}

                                                        _outqty = _outqty - _outqty1;
                                                        if (_outqty == 0)
                                                        {
                                                            break;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        Int32 eff = _reportDAL.updateTempINOutBalanceQty(_outqty, _inseq, _outseq);
                                                        //if (Math.Round(_unitcostx) != Math.Round(_unitcost))
                                                        //{
                                                        //    Console.WriteLine(_outdoc + " | " + _baseitemcode + " | " + _unitcostx + " | " + _unitcost);
                                                        //}
                                                        _outqty = 0;
                                                        break;
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    throw ex;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            combination = "DOCITMSTUSCD";
                                            //Base doc no , item code , item status and unit cost
                                            locInData = new DataTable();
                                            locInData = _reportDAL.getLocationInTempData(_basedocno, _baseitemcode, _baseitemstatus, 0, 0, _unitcost, combination, userid);
                                            if (locInData.Rows.Count > 0)
                                            {
                                                foreach (DataRow inDoc in locInData.Rows)
                                                {
                                                    try
                                                    {
                                                        decimal _outqty1 = Convert.ToDecimal(inDoc["BAL_QTY"].ToString());
                                                        int _inseq = Convert.ToInt32(inDoc["LOGSEQ"].ToString());
                                                        decimal _unitcostx = Convert.ToDecimal(inDoc["UNITCOST"].ToString());
                                                        if (_outqty > _outqty1)
                                                        {
                                                            Int32 eff = _reportDAL.updateTempINOutBalanceQty(_outqty1, _inseq, _outseq);
                                                            //if (Math.Round(_unitcostx) != Math.Round(_unitcost))
                                                            //{
                                                            //    Console.WriteLine(_outdoc + " | " + _baseitemcode + " | " + _unitcostx + " | " + _unitcost);
                                                            //}

                                                            _outqty = _outqty - _outqty1;
                                                            if (_outqty == 0)
                                                            {
                                                                break;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            Int32 eff = _reportDAL.updateTempINOutBalanceQty(_outqty, _inseq, _outseq);
                                                            //if (Math.Round(_unitcostx) != Math.Round(_unitcost))
                                                            //{
                                                            //    Console.WriteLine(_outdoc + " | " + _baseitemcode + " | " + _unitcostx + " | " + _unitcost);
                                                            //}
                                                            _outqty = 0;
                                                            break;
                                                        }
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        throw ex;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                //Base doc no , item code , item status and ROUND(unit cost)
                                                combination = "DOCITMSTUSCDCSTROU";
                                                locInData = new DataTable();
                                                locInData = _reportDAL.getLocationInTempData(_basedocno, _baseitemcode, _baseitemstatus, 0, 0, Convert.ToInt32(Math.Round(_unitcost, 0, MidpointRounding.AwayFromZero)), combination, userid);
                                                if (locInData.Rows.Count > 0)
                                                {
                                                    foreach (DataRow inDoc in locInData.Rows)
                                                    {
                                                        try
                                                        {
                                                            decimal _outqty1 = Convert.ToDecimal(inDoc["BAL_QTY"].ToString());
                                                            int _inseq = Convert.ToInt32(inDoc["LOGSEQ"].ToString());
                                                            decimal _unitcostx = Convert.ToDecimal(inDoc["UNITCOST"].ToString());
                                                            if (_outqty > _outqty1)
                                                            {
                                                                Int32 eff = _reportDAL.updateTempINOutBalanceQty(_outqty1, _inseq, _outseq);
                                                                //if (Math.Round(_unitcostx) != Math.Round(_unitcost))
                                                                //{
                                                                //    Console.WriteLine(_outdoc + " | " + _baseitemcode + " | " + _unitcostx + " | " + _unitcost);
                                                                //}

                                                                _outqty = _outqty - _outqty1;
                                                                if (_outqty == 0)
                                                                {
                                                                    break;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                Int32 eff = _reportDAL.updateTempINOutBalanceQty(_outqty, _inseq, _outseq);
                                                                //if (Math.Round(_unitcostx) != Math.Round(_unitcost))
                                                                //{
                                                                //    Console.WriteLine(_outdoc + " | " + _baseitemcode + " | " + _unitcostx + " | " + _unitcost);
                                                                //}
                                                                _outqty = 0;
                                                                break;
                                                            }
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            throw ex;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    //Base doc no , item code and item status
                                                    combination = "DOCITMSTUSITMCD";
                                                    locInData = new DataTable();
                                                    locInData = _reportDAL.getLocationInTempData(_basedocno, _baseitemcode, _baseitemstatus, 0, 0, 0, combination, userid);
                                                    if (locInData.Rows.Count > 0)
                                                    {
                                                        foreach (DataRow inDoc in locInData.Rows)
                                                        {
                                                            try
                                                            {
                                                                decimal _outqty1 = Convert.ToDecimal(inDoc["BAL_QTY"].ToString());
                                                                int _inseq = Convert.ToInt32(inDoc["LOGSEQ"].ToString());
                                                                decimal _unitcostx = Convert.ToDecimal(inDoc["UNITCOST"].ToString());
                                                                if (_outqty > _outqty1)
                                                                {
                                                                    Int32 eff = _reportDAL.updateTempINOutBalanceQty(_outqty1, _inseq, _outseq);
                                                                    //if (Math.Round(_unitcostx) != Math.Round(_unitcost))
                                                                    //{
                                                                    //    Console.WriteLine(_outdoc + " | " + _baseitemcode + " | " + _unitcostx + " | " + _unitcost);
                                                                    //}

                                                                    _outqty = _outqty - _outqty1;
                                                                    if (_outqty == 0)
                                                                    {
                                                                        break;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    Int32 eff = _reportDAL.updateTempINOutBalanceQty(_outqty, _inseq, _outseq);
                                                                    //if (Math.Round(_unitcostx) != Math.Round(_unitcost))
                                                                    //{
                                                                    //    Console.WriteLine(_outdoc + " | " + _baseitemcode + " | " + _unitcostx + " | " + _unitcost);
                                                                    //}
                                                                    _outqty = 0;
                                                                    break;
                                                                }
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                throw ex;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //Base doc no , item code 
                                                        combination = "DOCITMCD";
                                                        locInData = new DataTable();
                                                        locInData = _reportDAL.getLocationInTempData(_basedocno, _baseitemcode, "", 0, 0, 0, combination, userid);
                                                        if (locInData.Rows.Count > 0)
                                                        {
                                                            foreach (DataRow inDoc in locInData.Rows)
                                                            {
                                                                try
                                                                {
                                                                    decimal _outqty1 = Convert.ToDecimal(inDoc["BAL_QTY"].ToString());
                                                                    int _inseq = Convert.ToInt32(inDoc["LOGSEQ"].ToString());
                                                                    decimal _unitcostx = Convert.ToDecimal(inDoc["UNITCOST"].ToString());
                                                                    if (_outqty > _outqty1)
                                                                    {
                                                                        Int32 eff = _reportDAL.updateTempINOutBalanceQty(_outqty1, _inseq, _outseq);
                                                                        //if (Math.Round(_unitcostx) != Math.Round(_unitcost))
                                                                        //{
                                                                        //    Console.WriteLine(_outdoc + " | " + _baseitemcode + " | " + _unitcostx + " | " + _unitcost);
                                                                        //}

                                                                        _outqty = _outqty - _outqty1;
                                                                        if (_outqty == 0)
                                                                        {
                                                                            break;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        Int32 eff = _reportDAL.updateTempINOutBalanceQty(_outqty, _inseq, _outseq);
                                                                        //if (Math.Round(_unitcostx) != Math.Round(_unitcost))
                                                                        //{
                                                                        //    Console.WriteLine(_outdoc + " | " + _baseitemcode + " | " + _unitcostx + " | " + _unitcost);
                                                                        //}
                                                                        _outqty = 0;
                                                                        break;
                                                                    }
                                                                }
                                                                catch (Exception ex)
                                                                {
                                                                    throw ex;
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (uncomPath == false)
                                                            {
                                                                try
                                                                {
                                                                    Int32 eff = _reportDAL.updateNotFoundStus(_outseq);
                                                                    _outqty = 0;
                                                                    if (_outqty == 0)
                                                                    {
                                                                        break;
                                                                    }
                                                                }
                                                                catch (Exception ex)
                                                                {
                                                                    throw ex;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                //Base loc, item code, item status, ABS(unit cost)
                                                                combination = "DOCITMCD";
                                                                locInData = new DataTable();
                                                                locInData = _reportDAL.getLocationInTempDataOutPath(docloc, _baseitemcode, _baseitemstatus, 0, combination, userid);
                                                                if (locInData.Rows.Count > 0)
                                                                {
                                                                    int searchValue = Convert.ToInt32(Math.Round(_unitcost, 0, MidpointRounding.AwayFromZero));
                                                                    int currentNearest = Convert.ToInt32(Math.Round(Convert.ToDecimal(locInData.Rows[0]["UNITCOST"].ToString()), 0, MidpointRounding.AwayFromZero));
                                                                    int currentDifference = Math.Abs(currentNearest - searchValue);
                                                                    foreach (DataRow inDoc in locInData.Rows)
                                                                    {
                                                                        int currentNearest1 = Convert.ToInt32(Math.Round(Convert.ToDecimal(inDoc["UNITCOST"].ToString()), 0, MidpointRounding.AwayFromZero));
                                                                        int diff = Math.Abs(currentNearest1 - searchValue);
                                                                        if (diff < currentDifference)
                                                                        {
                                                                            currentDifference = diff;
                                                                            currentNearest = currentNearest1;
                                                                        }
                                                                    }

                                                                    combination = "DOCITMCDNEAR";
                                                                    locInData = new DataTable();
                                                                    locInData = _reportDAL.getLocationInTempDataOutPath(docloc, _baseitemcode, _baseitemstatus, currentNearest, combination, userid);
                                                                    if (locInData.Rows.Count > 0)
                                                                    {

                                                                        foreach (DataRow inDoc in locInData.Rows)
                                                                        {
                                                                            try
                                                                            {
                                                                                decimal _outqty1 = Convert.ToDecimal(inDoc["BAL_QTY"].ToString());
                                                                                int _inseq = Convert.ToInt32(inDoc["LOGSEQ"].ToString());
                                                                                if (_outqty > _outqty1)
                                                                                {
                                                                                    Int32 eff = _reportDAL.updateTempINOutBalanceQty(_outqty1, _inseq, _outseq);
                                                                                    _outqty = _outqty - _outqty1;
                                                                                    if (_outqty == 0)
                                                                                    {
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    Int32 eff = _reportDAL.updateTempINOutBalanceQty(_outqty, _inseq, _outseq);

                                                                                    _outqty = 0;
                                                                                    break;
                                                                                }
                                                                            }
                                                                            catch (Exception ex)
                                                                            {
                                                                                throw ex;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if (uncomPath == false)
                                                                    {
                                                                        try
                                                                        {
                                                                            Int32 eff = _reportDAL.updateNotFoundStus(_outseq);
                                                                            _outqty = 0;
                                                                            if (_outqty == 0)
                                                                            {
                                                                                break;
                                                                            }
                                                                        }
                                                                        catch (Exception ex)
                                                                        {
                                                                            throw ex;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        //Base loc, item code
                                                                        combination = "BSELOCITM";
                                                                        locInData = new DataTable();
                                                                        locInData = _reportDAL.getLocationInTempDataOutPath(docloc, _baseitemcode, "", 0, combination, userid);
                                                                        if (locInData.Rows.Count > 0)
                                                                        {
                                                                            int searchValue = Convert.ToInt32(Math.Round(_unitcost, 0, MidpointRounding.AwayFromZero));
                                                                            int currentNearest = Convert.ToInt32(Math.Round(Convert.ToDecimal(locInData.Rows[0]["UNITCOST"].ToString()), 0, MidpointRounding.AwayFromZero));
                                                                            int currentDifference = Math.Abs(currentNearest - searchValue);

                                                                            foreach (DataRow inDoc in locInData.Rows)
                                                                            {
                                                                                int currentNearest1 = Convert.ToInt32(Math.Round(Convert.ToDecimal(inDoc["UNITCOST"].ToString()), 0, MidpointRounding.AwayFromZero));
                                                                                int diff = Math.Abs(currentNearest1 - searchValue);
                                                                                if (diff < currentDifference)
                                                                                {
                                                                                    currentDifference = diff;
                                                                                    currentNearest = currentNearest1;
                                                                                }
                                                                            }
                                                                            combination = "BSELOCITMRND";
                                                                            locInData = new DataTable();
                                                                            locInData = _reportDAL.getLocationInTempDataOutPath(docloc, _baseitemcode, "", currentNearest, combination, userid);
                                                                            if (locInData.Rows.Count > 0)
                                                                            {

                                                                                foreach (DataRow inDoc in locInData.Rows)
                                                                                {
                                                                                    try
                                                                                    {
                                                                                        decimal _outqty1 = Convert.ToDecimal(inDoc["BAL_QTY"].ToString());
                                                                                        int _inseq = Convert.ToInt32(inDoc["LOGSEQ"].ToString());
                                                                                        if (_outqty > _outqty1)
                                                                                        {
                                                                                            Int32 eff = _reportDAL.updateTempINOutBalanceQty(_outqty1, _inseq, _outseq);
                                                                                            _outqty = _outqty - _outqty1;
                                                                                            if (_outqty == 0)
                                                                                            {
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            Int32 eff = _reportDAL.updateTempINOutBalanceQty(_outqty, _inseq, _outseq);

                                                                                            _outqty = 0;
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                    catch (Exception ex)
                                                                                    {
                                                                                        throw ex;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                try
                                                                                {
                                                                                    _outqty = 0;
                                                                                    Int32 eff = _reportDAL.updateNotFoundStus(_outseq);
                                                                                    if (_outqty == 0)
                                                                                    {
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                catch (Exception ex)
                                                                                {
                                                                                    throw ex;
                                                                                }
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            _outqty = 0;
                                                                            Int32 eff = _reportDAL.updateNotFoundStus(_outseq);
                                                                            if (_outqty == 0)
                                                                            {
                                                                                eff = _reportDAL.updateTempINOutBalanceQty(_outqty, 0, _outseq);
                                                                                break;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public List<mst_itm_com_reorder> GetItemMasterCostDataByItem(string _itmCd)
        {
            _generalDAL = new GeneralDAL();
            _inventoryDAL = new InventoryDAL();
            List<mst_itm_com_reorder> _list = _inventoryDAL.GetItemMasterMaxMinCostDataByItem(_itmCd);
            List<mst_itm_com_reorder> _listAvg = _inventoryDAL.GetItemMasterCurrentCostDataByItem(_itmCd);
            foreach (var item in _list)
            {
                var v = _listAvg.Where(c => c.Icr_com_code == item.Icr_com_code && item.Icr_itm_sts == item.Icr_itm_sts).FirstOrDefault();
                if (v != null)
                {
                    item.Icr_curr_cost = v.Icr_curr_cost;
                }
            }
            return _list;
        }
        public int SendSMSAod(OutSMS smsOut, out String err)
        {
            int result = 0;
            err = string.Empty;

            try
            {
                _generalDAL = new GeneralDAL();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();
                if (!string.IsNullOrEmpty(smsOut.Msg))
                {
                    smsOut.Msg = smsOut.Msg.Replace(@"\n", Environment.NewLine).ToString();
                    result = _generalDAL.SaveSMSOut(smsOut);
                }
                _generalDAL.TransactionCommit();
                _generalDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                _generalDAL.TransactionRollback();
                _generalDAL.ConnectionClose();
                result = -1;
                err = ex.Message;
            }

            return result;
        }
        //Lakshan 07 Feb 2017 
        public void GenarateAodOutMailAndSMS(string _com, string _docNo)
        {
            if (string.IsNullOrEmpty(_docNo))
            {
                return;
            }
            _inventoryDAL = new InventoryDAL();
            _generalDAL = new GeneralDAL();
            MasterLocationNew _mstInLoc = new MasterLocationNew();
            InventoryHeader _intHdr = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = _docNo, Ith_com = _com }).FirstOrDefault();
            List<InventoryBatchN> _batchList = _inventoryDAL.GET_INT_BATCH_DATA(new InventoryBatchN() { Inb_doc_no = _docNo });
            if (_intHdr != null)
            {
                _mstInLoc = _generalDAL.GetMasterLocationDataNew(new MasterLocationNew() { Ml_loc_cd = _intHdr.Ith_oth_loc, Ml_com_cd = _intHdr.Ith_oth_com }).FirstOrDefault();
                if (_mstInLoc.Ml_alt_req == 1)
                {
                    if (IsValidMobileOrLandNo(_mstInLoc.Ml_mobi))
                    {
                        #region sms
                        string errMSG = "";
                        OutSMS _out = new OutSMS();
                        if (_mstInLoc.Ml_mobi != "N/A" && !string.IsNullOrEmpty(_mstInLoc.Ml_mobi))
                        {
                            string _tmpB = " for " + _intHdr.Ith_sub_tp + " : " + _intHdr.Ith_oth_docno;
                            if (_intHdr.Ith_sub_tp == "0")
                            {
                                _tmpB = "";
                            }

                            _custServiceDAL = new CustServiceDAL();
                            //String msg = "Dear Customer, \nYou have created a enquiry.\nEnquiry Id - " + oItem.GCE_ENQ_ID;
                            String msg = "Goods are dispatched from " + _intHdr.Ith_loc +
                                          _tmpB +
                                         " . AOD # " + _intHdr.Ith_doc_no +
                                         " on " + _intHdr.Ith_cre_when.ToString("dd/MMM/yyyy HH:mm:ss");
                            String mobi = _mstInLoc.Ml_mobi;
                            if (_mstInLoc.Ml_mobi.Length == 9)
                            {
                                 mobi = "+94" + _mstInLoc.Ml_mobi;
                            }
                            //String mobi = "+94" + "763182121";
                            _out.Msgstatus = 0;
                            _out.Msgtype = "S";
                            _out.Receivedtime = DateTime.Now;
                            _out.Receiver = mobi;
                            _out.Msg = msg;
                            _out.Receiverphno = mobi;
                            _out.Senderphno = mobi;
                            _out.Refdocno = "0";
                            _out.Sender = "Message Agent";
                            _out.Createtime = DateTime.Now;
                            Int32 _res = SendSMSAod(_out, out errMSG);
                        }
                        #endregion
                    }

                    if (IsValidEmail(_mstInLoc.Ml_email))
                    {
                        #region Email
                        StringBuilder html = new StringBuilder();
                        string htmlBody = string.Empty;
                        if (_batchList != null)
                        {
                            //if (_batchList.Count > 0)
                            //{
                            //    DataTable dt = new DataTable();
                            //    //Building an HTML string.
                            //    DataRow dr = null;
                            //    dt.Columns.Add(new DataColumn("Item", typeof(string)));
                            //    dt.Columns.Add(new DataColumn("Location", typeof(string)));
                            //    dt.Columns.Add(new DataColumn("Qty", typeof(decimal)));

                            //    //Table start.
                            //    html.Append("<!DOCTYPE html>");
                            //    html.Append("<html>");
                            //    html.Append("<body>");
                            //    html.Append("<table style=' background-repeat:no-repeat; width:450px;margin:0;' cellpadding='0' cellspacing='0' border='1' background-color: aqua>");


                            //    //Building the Header row.
                            //    html.Append("<tr>");
                            //    foreach (DataColumn column in dt.Columns)
                            //    {
                            //        html.Append("<th style=' background-color:#B5E3F0; width:100px; margin:0;' >");
                            //        html.Append(column.ColumnName);
                            //        html.Append("</th>");
                            //    }
                            //    html.Append("</tr>");
                            //    foreach (InventoryRequestItem _updateitem in _invReq.InventoryRequestItemList)
                            //    {
                            //        html.Append("<tr>");
                            //        html.Append("<th align='left'>");
                            //        html.Append(_updateitem.Itri_itm_cd);
                            //        html.Append("</th>");
                            //        html.Append("<th>");
                            //        html.Append(_updateitem.Itri_loc);
                            //        html.Append("</th>");
                            //        html.Append("<th>");
                            //        html.Append(_updateitem.Itri_qty);
                            //        html.Append("</th>");
                            //        html.Append("</tr>");

                            //    }
                            //    html.Append("</table>");
                            //}

                            _generalDAL = new GeneralDAL();
                            _generalDAL.ConnectionOpen();
                            SmtpClient smtpClient = new SmtpClient();
                            MailMessage message = new MailMessage();
                            if (!string.IsNullOrEmpty(_mstInLoc.Ml_email))
                            {
                                string _toEmail = _mstInLoc.Ml_email;
                                //string _toEmail = "lakshan@abansgroup.com";
                                if (!string.IsNullOrEmpty(_toEmail))
                                {
                                    MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                                    smtpClient.Host = _generalDAL.GetMailHost();
                                    smtpClient.Port = 25;
                                    message.From = fromAddress;
                                    string FOOTER = _generalDAL.GetMailFooterMsg();
                                    string _email = "";
                                    Int32 _modelCount = _batchList.GroupBy(c => c.Inb_itm_cd).ToList().Count;
                                    decimal _noOfUnis = _batchList.Sum(c => c.Inb_qty);
                                    string _tmpB = " for " + _intHdr.Ith_sub_tp + " : " + _intHdr.Ith_oth_docno;
                                    if (_intHdr.Ith_sub_tp == "0")
                                    {
                                        _tmpB = "";
                                    }
                                    _email = "Dear Sir/Madam, <br>" +
                                        "Goods are dispatched from " + _intHdr.Ith_loc +
                                        _tmpB +
                                        ". <br>AOD # : " + _intHdr.Ith_doc_no +
                                        " on " + _intHdr.Ith_cre_when.ToString("dd/MMM/yyyy HH:mm:ss") +
                                        "<br>" +
                                        " Total number of models : " + _modelCount.ToString("N2") + "<br>" +
                                        " Total number of units : " + _noOfUnis.ToString("N2");
                                    //_email = _email + "Approved #-" + _docNo + " <br><P>";
                                    _email = _email + "<br>" + html + "<br><br>" + "** This is an auto generated mail from Abans infor portal. Please don't Reply ** ";
                                    message.To.Add(_toEmail);
                                    message.Subject = "AOD Out";
                                    //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                                    //message.Bcc.Add(new MailAddress(""));
                                    message.IsBodyHtml = false;
                                    message.Body = _email;
                                    message.IsBodyHtml = true;
                                    message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                                    // Send SMTP mail
                                    smtpClient.Send(message);
                                }
                                else
                                {
                                    _generalDAL.ConnectionClose();
                                }
                            }
                            else
                            {
                                _generalDAL.ConnectionClose();
                            }
                        }
                        #endregion
                    }
                }
            }
        }
        public void GenarateAodInwardMailAndSMS(string _com, string _docNo)
        {
            if (string.IsNullOrEmpty(_docNo))
            {
                return;
            }
            _inventoryDAL = new InventoryDAL();
            _generalDAL = new GeneralDAL();
            MasterLocationNew _mstOutLoc = new MasterLocationNew();
            InventoryHeader _intHdr = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = _docNo, Ith_com = _com }).FirstOrDefault();
            List<InventoryBatchN> _batchList = _inventoryDAL.GET_INT_BATCH_DATA(new InventoryBatchN() { Inb_doc_no = _docNo });
            if (_intHdr != null)
            {
                _mstOutLoc = _generalDAL.GetMasterLocationDataNew(new MasterLocationNew() { Ml_loc_cd = _intHdr.Ith_oth_loc, Ml_com_cd = _intHdr.Ith_oth_com }).FirstOrDefault();
                if (_mstOutLoc.Ml_ackn_req == 1)
                {
                    if (IsValidMobileOrLandNo(_mstOutLoc.Ml_mobi))
                    {
                        #region sms
                        string errMSG = "";
                        OutSMS _out = new OutSMS();
                        if (_mstOutLoc.Ml_mobi != "N/A" && !string.IsNullOrEmpty(_mstOutLoc.Ml_mobi))
                        {
                            _custServiceDAL = new CustServiceDAL();
                            //String msg = "Dear Customer, \nYou have created a enquiry.\nEnquiry Id - " + oItem.GCE_ENQ_ID;
                            String msg = "Goods are received to " + _intHdr.Ith_loc +
                                         " for AOD out # " + _intHdr.Ith_oth_docno +
                                         " on " + _intHdr.Ith_cre_when.ToString("dd/MMM/yyyy HH:mm:ss");
                            String mobi = _mstOutLoc.Ml_mobi;
                            //String mobi = "+94" + "763182121";
                            if (_mstOutLoc.Ml_mobi.Length == 9)
                            {
                                mobi = "+94" + _mstOutLoc.Ml_mobi;
                            }
                            _out.Msgstatus = 0;
                            _out.Msgtype = "S";
                            _out.Receivedtime = DateTime.Now;
                            _out.Receiver = mobi;
                            _out.Msg = msg;
                            _out.Receiverphno = mobi;
                            _out.Senderphno = mobi;
                            _out.Refdocno = "0";
                            _out.Sender = "Message Agent";
                            _out.Createtime = DateTime.Now;
                            Int32 _res = SendSMSAod(_out, out errMSG);
                        }
                        #endregion
                    }

                    if (IsValidEmail(_mstOutLoc.Ml_email))
                    {
                        #region Email
                        StringBuilder html = new StringBuilder();
                        string htmlBody = string.Empty;
                        if (_batchList != null)
                        {
                            _generalDAL = new GeneralDAL();
                            _generalDAL.ConnectionOpen();
                            SmtpClient smtpClient = new SmtpClient();
                            MailMessage message = new MailMessage();
                            if (!string.IsNullOrEmpty(_mstOutLoc.Ml_email))
                            {
                                string _toEmail = _mstOutLoc.Ml_email;
                                //string _toEmail = "lakshan@abansgroup.com";
                                if (!string.IsNullOrEmpty(_toEmail))
                                {
                                    MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                                    smtpClient.Host = _generalDAL.GetMailHost();
                                    smtpClient.Port = 25;
                                    message.From = fromAddress;
                                    string FOOTER = _generalDAL.GetMailFooterMsg();
                                    string _email = "";
                                    Int32 _modelCount = _batchList.GroupBy(c => c.Inb_itm_cd).ToList().Count;
                                    decimal _noOfUnis = _batchList.Sum(c => c.Inb_qty);
                                    _email = "Dear Sir/Madam, <br>" +
                                        "Goods are received to " + _intHdr.Ith_loc +
                                        " for AOD Out # : " + _intHdr.Ith_oth_docno +
                                        " on " + _intHdr.Ith_cre_when.ToString("dd/MMM/yyyy HH:mm:ss") +
                                        ". AOD In # : " + _intHdr.Ith_doc_no +
                                        "<br>" +
                                        " Total number of models : " + _modelCount.ToString("N2") + "<br>" +
                                        " Total number of units : " + _noOfUnis.ToString("N2");
                                    //_email = _email + "Approved #-" + _docNo + " <br><P>";
                                    _email = _email + "<br>" + html + "<br><br>" + "** This is an auto generated mail from Abans infor portal. Please don't Reply ** ";
                                    message.To.Add(_toEmail);
                                    message.Subject = "AOD IN";
                                    //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                                    //message.Bcc.Add(new MailAddress(""));
                                    message.IsBodyHtml = false;
                                    message.Body = _email;
                                    message.IsBodyHtml = true;
                                    message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                                    // Send SMTP mail
                                    smtpClient.Send(message);
                                }
                                else
                                {
                                    _generalDAL.ConnectionClose();
                                }
                            }
                            else
                            {
                                _generalDAL.ConnectionClose();
                            }
                        }
                        #endregion
                    }
                }
            }
        }
        public DataTable MakeGridBalWithoutStatus(DataTable dt)
        {
            DataTable _dtNew = new DataTable("tblNew");
            try
            {
                #region MakeDataTable
                _dtNew.Columns.Add("location", typeof(string));
                _dtNew.Columns.Add("other_loc", typeof(string));
                _dtNew.Columns.Add("doc_date", typeof(DateTime));
                _dtNew.Columns.Add("doc_no", typeof(string));
                _dtNew.Columns.Add("other_doc", typeof(string));
                _dtNew.Columns.Add("man_ref", typeof(string));
                _dtNew.Columns.Add("doc_type", typeof(string));
                _dtNew.Columns.Add("in_cou", typeof(decimal));
                _dtNew.Columns.Add("out_cou", typeof(decimal));
                _dtNew.Columns.Add("balance", typeof(decimal));
                _dtNew.Columns.Add("status", typeof(string));
                #endregion
                DataRow _dr;
                decimal _openBal = 0;
                decimal _in = 0, _out = 0, _bal = 0;
                if (dt != null)
                {
                    if (dt.Rows.Count > 0)
                    {
                        for (int x = dt.Rows.Count - 1; x >= 0; x--)
                        {
                            DataRow row = dt.Rows[x];
                            if (row["DOC_TYPE"].ToString() == "OPERNING_BAL")
                            {
                                _dr = _dtNew.NewRow();
                                _dr["location"] = row["location"].ToString();
                                _dr["other_loc"] = row["other_loc"].ToString();
                                _dr["doc_date"] = Convert.ToDateTime(row["doc_date"].ToString());
                                _dr["doc_no"] = row["doc_no"].ToString();
                                _dr["other_doc"] = row["other_doc"].ToString();
                                _dr["man_ref"] = row["man_ref"].ToString();
                                _dr["doc_type"] = row["doc_type"].ToString();
                                _dr["in_cou"] = Convert.ToDecimal(row["in_cou"].ToString());
                                _dr["out_cou"] = Convert.ToDecimal(row["out_cou"].ToString());

                                _in = decimal.TryParse(row["BALANCE"].ToString(), out _in) ? Convert.ToDecimal(row["BALANCE"].ToString()) : _in;
                                // _out = Int32.TryParse(row["OUT_COU"].ToString(), out _out) ? Convert.ToInt32(row["OUT_COU"].ToString()) : _out;
                                _openBal = _in - _out;

                                _dr["balance"] = Convert.ToDecimal(_in.ToString());
                                _dr["status"] = row["status"].ToString();
                                _dtNew.Rows.Add(_dr);
                                row.Delete();
                            }
                        }
                        dt.AcceptChanges();
                        if (dt.Rows.Count > 0)
                        {
                            //DataView dv = dt.DefaultView;
                            //dv.Sort = "doc_date,seq_no";
                            //dt = dv.ToTable();
                        }
                        _bal = _openBal;
                        foreach (DataRow item in dt.Rows)
                        {
                            _dr = _dtNew.NewRow();
                            _dr["location"] = item["location"].ToString();
                            _dr["other_loc"] = item["other_loc"].ToString();
                            _dr["doc_date"] = Convert.ToDateTime(item["doc_date"].ToString());
                            _dr["doc_no"] = item["doc_no"].ToString();
                            string sss = item["doc_no"].ToString();
                            if (sss == "EDP24-AOD-17-00056")
                            {
                                int s = 0;
                            }
                            _dr["other_doc"] = item["other_doc"].ToString();
                            _dr["man_ref"] = item["man_ref"].ToString();
                            _dr["doc_type"] = item["doc_type"].ToString();
                            bool _ifAva = false;
                            foreach (DataRow rw in _dtNew.Rows)
                            {
                                if (rw["location"].ToString() == item["location"].ToString()
                                    && rw["other_loc"].ToString() == item["other_loc"].ToString()
                                    && Convert.ToDateTime(rw["doc_date"].ToString()) == Convert.ToDateTime(item["doc_date"].ToString())
                                    && rw["doc_no"].ToString() == item["doc_no"].ToString()
                                    && rw["other_doc"].ToString() == item["other_doc"].ToString()
                                    && rw["man_ref"].ToString() == item["man_ref"].ToString()
                                    && rw["doc_type"].ToString() == item["doc_type"].ToString()
                                    )
                                {
                                    rw["in_cou"] = Convert.ToDecimal(rw["in_cou"].ToString()) + Convert.ToDecimal(item["in_cou"].ToString());
                                    rw["out_cou"] = Convert.ToDecimal(rw["out_cou"].ToString()) + Convert.ToDecimal(item["out_cou"].ToString());
                                    _in = Decimal.TryParse(item["IN_COU"].ToString(), out _in) ? Convert.ToDecimal(item["IN_COU"].ToString()) : _in;
                                    _out = Decimal.TryParse(item["OUT_COU"].ToString(), out _out) ? Convert.ToDecimal(item["OUT_COU"].ToString()) : _out;
                                    _bal = _bal + _in - _out;

                                    item["BALANCE"] = Convert.ToDecimal(_bal.ToString());
                                    rw["BALANCE"] = Convert.ToDecimal(_bal.ToString());
                                    rw["status"] = item["status"].ToString();
                                    _ifAva = true;
                                }
                            }
                            if (!_ifAva)
                            {
                                _dr["in_cou"] = Convert.ToDecimal(item["in_cou"].ToString());
                                _dr["out_cou"] = Convert.ToDecimal(item["out_cou"].ToString());
                                _in = Decimal.TryParse(item["IN_COU"].ToString(), out _in) ? Convert.ToDecimal(item["IN_COU"].ToString()) : _in;
                                _out = Decimal.TryParse(item["OUT_COU"].ToString(), out _out) ? Convert.ToDecimal(item["OUT_COU"].ToString()) : _out;
                                _bal = _bal + _in - _out;

                                item["BALANCE"] = Convert.ToDecimal(_bal.ToString());
                                _dr["BALANCE"] = Convert.ToDecimal(_bal.ToString());
                                _dr["status"] = item["status"].ToString();
                                _dtNew.Rows.Add(_dr);
                            }

                        }
                    }

                }
            }
            catch (Exception ex)
            {
                //DisplayMessage("Error : Grid Balance", 4);
            }
            return _dtNew;
        }


        //ISURU 2017/03/06
        public DataTable GetCollectionDetails(string company, DateTime fromdate, DateTime todate, string saletype, string customer, string invoiceno, string userid)
        {

            _salesDAL = new SalesDAL();

            return _salesDAL.GetCollectionDetails(company, fromdate, todate, saletype, customer, invoiceno, userid);
        }

        //Udaya 28/03/2017
        public string GetCommisionProcessReport(DateTime _fromDate, DateTime _toDate, string _Com, string _User, string circularCode, string comName, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;
            _generalDAL = new GeneralDAL();
            DataTable _dtResults = new DataTable();

            _dtResults = _generalDAL.ViewCommissionsDetails(_fromDate, _toDate, circularCode, _User, _Com);

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);

            dataRow = TitleData.NewRow(); dataRow["c3"] = comName; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c3"] = "Commission Report - Summary"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c1"] = "COMMISSION FOR THE MONTH OF " + CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(_fromDate.Month) + " " + _fromDate.Day; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c3"] = "Date To :"; dataRow["c4"] = _toDate.ToString("dd/MMM/yyyy");
            dataRow["c5"] = "User : "; dataRow["c6"] = _User + " , Printed on " + System.DateTime.Now;

            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, TitleData, _dtResults, out _err);

            if (_dtResults.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
            return _filePath;
        }

        //ISURU 2017/03/28
        public string GetCommisionDetailExcl(DateTime _fromDate, DateTime _toDate, string _Com, string _User, string circularCode, string userid, string pcstring, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;
            _financialDAL = new FinancialDAL();
            DataTable _dtResults = new DataTable();
            _User = userid;

            string[] pclst = pcstring.Split(',');
            foreach (string pc in pclst)
            {
                if (pc != "")
                {
                    DataTable dt = _financialDAL.GET_Commission_Details(_fromDate, _toDate, circularCode, userid, pc);
                    _dtResults.Merge(dt);
                }
            }

            _dtResults.Columns.Add("DaysElaps", typeof(int));

            int i = 0;
            foreach (var data in _dtResults.Rows)
            {
                if (_dtResults.Rows[i]["invdate"].ToString() == "" || _dtResults.Rows[i]["rcptdate"].ToString() == "")
                {
                    _dtResults.Rows[i]["DaysElaps"] = 0;
                }
                else
                {
                    DateTime invdate = Convert.ToDateTime(_dtResults.Rows[i]["invdate"].ToString());
                    DateTime invdate2 = Convert.ToDateTime(_dtResults.Rows[i]["rcptdate"].ToString());
                    int dayselaps = invdate2.Subtract(invdate).Days - 1;
                    _dtResults.Rows[i]["DaysElaps"] = dayselaps.ToString();
                }

                i++;
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c8"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c5"] = _Com; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c5"] = "Commission Detail Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c3"] = "Date To :"; dataRow["c4"] = _toDate.ToString("dd/MMM/yyyy");
            dataRow["c6"] = "User : "; dataRow["c7"] = _User + " , Printed on " + System.DateTime.Now;

            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, TitleData, _dtResults, out _err);

            if (_dtResults.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
            return _filePath;
        }

        //Lakshan 29 Mar 2017
        public DataTable GET_DISTRIBUTION_DOC_DATA_FOR_PRINT(string _reqNo)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GET_DISTRIBUTION_DOC_DATA_FOR_PRINT(_reqNo);
        }
        public DataTable getAutoPrintAodDocumentDtls(string aodNo, string doctp)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.getAutoPrintAodDocumentDtls(aodNo, doctp);
        }
        public DataTable GetPendingPrintDocuments(string lp)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPendingPrintDocuments(lp);
        }
        public DataTable GetPendingPrintDocumentsNew(string lp, string loc, string doctp = null)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetPendingPrintDocumentsNew(lp, loc, doctp);
        }
        public Int32 updatePrintedDocument(string docno)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.updatePrintedDocument(docno);
        }

        //Isuru 2017/04/26
        public ITM_PLU getItemDetailwithPLU(string itmcd)
        {
            InventoryDAL dal = new InventoryDAL();
            return dal.Get_iteminformationwithPlu(itmcd);
        }

        //Isuru 2017/05/14

        public string ExReversalReport(string _com, string _user, DataTable _dt1, out string _err)
        {
            try
            {
                DataTable _dt = _dt1;

                string _targetFilename = CreateExcelFile.ExportToExcelxlsx(_user, _com, _dt, 60000, out _err);

                _dt.Dispose();
                GC.Collect();

                if (string.IsNullOrEmpty(_err))
                { return _targetFilename; }
                else
                { return "Err"; }
            }
            catch (Exception err)
            {
                GC.Collect();
                _err = err.ToString();
                return "Err";
            }
        }

        //ISURU 2017/05/22
        public DataTable getreturnchequedet(string company, DateTime fromdate, DateTime todate, string customer, string cheque, string accountcode, string grntxt, string userID)
        {

            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            if (_securityDAL.Is_Report_DR("ReturnCheckList") == true) _salesDAL.ConnectionOpen_DR();
            return _salesDAL.getreturnchequedet(company, fromdate, todate, customer, cheque, accountcode, grntxt, userID);
        }

        //Udaya 31/05/2017
        public string GetSlowMovingInventry(string _Com, string _User, string comName, DataTable _dtResults, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;
            _generalDAL = new GeneralDAL();

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);

            dataRow = TitleData.NewRow(); dataRow["c3"] = comName + " - Slow Moving Inventory"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c2"] = "User : " + _User; dataRow["c6"] = "Printed on " + System.DateTime.Now;

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, TitleData, _dtResults, out _err);

            if (_dtResults.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
            return _filePath;
        }
        //subodana 2017-6-13
        public DataTable Barcodepludocdata(string com, string doc)
        {
            InventoryDAL dal = new InventoryDAL();
            return dal.Barcodepludocdata(com, doc);
        }
        //Udaya 10.08.2017 Collect data to MRN Approved Summary report
        public DataTable MRN_Approved_Report(DateTime _fromdate, DateTime _todate, string in_Company, string _loc, string in_user_id, string _rpt_Type, string _route, int _allRoute)
        {
            _securityDAL = new SecurityDAL();
            _inventoryDAL = new InventoryDAL();
            if (_securityDAL.Is_Report_DR("Approved_MRN") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.MRN_Approved_Report(_fromdate, _todate, in_Company, _loc, in_user_id, _rpt_Type, _route, _allRoute);
        }
        public string Bond_DaillyEntryDetails(DateTime _fromDate, DateTime _toDate, string _com, string _user, string _comName, string rptType, string comCode, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            if (_securityDAL.Is_Report_DR("Bond_DaillyEntryDetails") == true) _financialDAL.ConnectionOpen_DR();

            _dtResults = _financialDAL.Bond_DaillyEntryDetails(_fromDate, _toDate, _com, _user, rptType);

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = _comName; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Daily Entry Details Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(comCode, _user, TitleData, _dtResults, out _err);
            if (_dtResults.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
            return _filePath;
        }
        //Udaya Update Item vice max serial no for Barcode print
        public Int32 getItemMaxSerial(mst_itm_max_serNo serDtl, out string _err)
        {
            Int32 _effect = 0;
            _err = string.Empty;
            InventoryDAL dal = new InventoryDAL();
            try
            {
                dal.ConnectionOpen();
                dal.BeginTransaction();
                _effect = dal.getItemMaxSerial(serDtl);
                dal.TransactionCommit();
                return _effect;
            }
            catch (Exception ex)
            {
                _effect = -1;
                _err = ex.Message;
                dal.TransactionRollback();
                return _effect;
            }
            finally
            {
                dal.ConnectionClose();
            }
        }
        //Udaya Collect Item vice max serial no for Barcode print
        public mst_itm_max_serNo ItemSerialNo(string itmCd, string comCd)
        {
            InventoryDAL dal = new InventoryDAL();
            return dal.ItemSerialNo(itmCd, comCd);
        }

        //DIlshan 2017/10/03
        public string GetCollectionBonusExcl(DateTime _fromDate, DateTime _toDate, string _Com, string _User, string circularCode, string userid, string pcstring, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;
            _financialDAL = new FinancialDAL();
            DataTable _dtResults = new DataTable();
            _User = userid;
            _dtResults = _financialDAL.GET_Bonus_Details(_fromDate, _toDate, circularCode, userid, pcstring);
            //_dtResults.Columns.Add("DaysElaps", typeof(int));

            int i = 0;
            //foreach (var data in _dtResults.Rows)
            //{
            //    if (_dtResults.Rows[i]["invdate"].ToString() == "" || _dtResults.Rows[i]["rcptdate"].ToString() == "")
            //    {
            //        _dtResults.Rows[i]["DaysElaps"] = 0;
            //    }
            //    else
            //    {
            //        DateTime invdate = Convert.ToDateTime(_dtResults.Rows[i]["invdate"].ToString());
            //        DateTime invdate2 = Convert.ToDateTime(_dtResults.Rows[i]["rcptdate"].ToString());
            //        int dayselaps = invdate2.Subtract(invdate).Days;
            //        _dtResults.Rows[i]["DaysElaps"] = dayselaps.ToString();
            //    }

            //    i++;
            //}

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c8"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c5"] = _Com; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c5"] = "Collection Bonus Details Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            //dataRow["c3"] = "Date To :"; dataRow["c4"] = _toDate.ToString("dd/MMM/yyyy");
            dataRow["c6"] = "User : "; dataRow["c7"] = _User + " , Printed on " + System.DateTime.Now;

            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, TitleData, _dtResults, out _err);

            if (_dtResults.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
            return _filePath;
        }
        //Udaya 02.10.2017 Collect data to Courier Dailly Summary report
        public DataTable CourierDaillySummary(DateTime _fromdate, DateTime _todate, string in_Company, string _loc, string in_user_id, string _FromNo, string _ToNo, string _courCom)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.CourierDaillySummary(_fromdate, _todate, in_Company, _loc, in_user_id, _FromNo, _ToNo, _courCom);
        }

        //Tharindu 2017/11/08
        DataTable tmp_user_pc = new DataTable();
        //public string GetSalesWithCurrentInv_Bal(DateTime _fromDate, DateTime _toDate, string _cat1, string _cat2, string _cat3, string _cat4, string _cat5, string _brand, string _itemcode, string _model, string _Com, string _User, string _pc, string _loc, out string _err)

        public string GetSalesWithCurrentInv_Bal_new(DateTime _fromDate, DateTime _toDate, string _cat1, string _cat2, string _cat3, string _cat4, string _cat5, string _brand, string _model, string _itemcode, string _pc, string _loc, string _isasatdate, string _user, string _channel, string _itmstatus, Int32 withcost, Int32 withserial, Int32 withdiscount, Int32 status, string isasatdate, string pricebook, string pblevel, out string _err)
        {
            DataTable _dtResults;
            DataTable GLOB_DataTable = new DataTable();
            DataTable dtheader = new DataTable();
            _err = string.Empty;
            string _filePath = string.Empty;
            string _Com = string.Empty;

            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_user);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("SalesWithCur_inv_Bal") == true) _financialDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    //_dtResults = _financialDAL.GetSales_with_InvoiceBalance(_fromDate, _toDate, _cat1, _cat2, _cat3, _cat4, _cat5, _brand, _itemcode, _model, drow["tpl_pc"].ToString(), drow["tpl_com"].ToString());

                     _Com = drow["tpl_com"].ToString();
                     _dtResults = _financialDAL.GetSales_with_InvoiceBalance_new(_fromDate, _toDate, _cat1, _cat2, _cat3, _cat4, _cat5, _brand, _model, _itemcode, drow["tpl_pc"].ToString(), drow["tpl_com"].ToString(), _isasatdate, _user, _channel, _itmstatus, withcost, withserial, withdiscount, status, isasatdate, pricebook, pblevel);

                    GLOB_DataTable.Merge(_dtResults);
                }
            }


            DataTable GP1 = new DataTable();

            //var _tmpResult = GLOB_DataTable.AsEnumerable()
            //        .GroupBy(grp =>
            //            new
            //            {
            //                Company = string.IsNullOrEmpty(grp.Field<string>("Company").ToString()) ? "N/A" : grp.Field<string>("Company").ToString(),
            //                Category1 = string.IsNullOrEmpty(grp.Field<string>("Category1").ToString()) ? "N/A" : grp.Field<string>("Category1").ToString(),
            //                Category1Desc = string.IsNullOrEmpty(grp.Field<string>("Category1Desc").ToString()) ? "N/A" : grp.Field<string>("Category1Desc").ToString(),
            //                Category2 = string.IsNullOrEmpty(grp.Field<string>("Category2").ToString()) ? "N/A" : grp.Field<string>("Category2").ToString(),
            //                Category2Desc = string.IsNullOrEmpty(grp.Field<string>("Category2Desc").ToString()) ? "N/A" : grp.Field<string>("Category2Desc").ToString(),
            //                Category3 = string.IsNullOrEmpty(grp.Field<string>("Category3").ToString()) ? "N/A" : grp.Field<string>("Category3").ToString(),
            //                Category3Desc = string.IsNullOrEmpty(grp.Field<string>("Category3Desc").ToString()) ? "N/A" : grp.Field<string>("Category3Desc").ToString(),
            //               // Category4 = string.IsNullOrEmpty(grp.Field<string>("Category4").ToString()) ? "N/A" : grp.Field<string>("Category4").ToString(),
            //                //Category4Desc = string.IsNullOrEmpty(grp.Field<string>("Category4Desc").ToString()) ? "N/A" : grp.Field<string>("Category4Desc").ToString(),
            //               // Category5 = string.IsNullOrEmpty(grp.Field<string>("Category5").ToString()) ? "N/A" : grp.Field<string>("Category5").ToString(),
            //               // Category5Desc = string.IsNullOrEmpty(grp.Field<string>("Category5Desc").ToString()) ? "N/A" : grp.Field<string>("Category5Desc").ToString(),
            //                ItemCode = string.IsNullOrEmpty(grp.Field<string>("ItemCode").ToString()) ? "N/A" : grp.Field<string>("ItemCode").ToString(),
            //                ItemDescription = string.IsNullOrEmpty(grp.Field<string>("ItemDescription").ToString()) ? "N/A" : grp.Field<string>("ItemDescription").ToString(),
            //                Model = string.IsNullOrEmpty(grp.Field<string>("Model").ToString()) ? "N/A" : grp.Field<string>("Model").ToString(),
            //                Brand = string.IsNullOrEmpty(grp.Field<string>("Brand").ToString()) ? "N/A" : grp.Field<string>("Brand").ToString(),
            //                Color = string.IsNullOrEmpty(grp.Field<string>("Color").ToString()) ? "N/A" : grp.Field<string>("Color").ToString(),
            //                Item_Size = string.IsNullOrEmpty(grp.Field<string>("item_Size").ToString()) ? "N/A" : grp.Field<string>("item_Size").ToString()

            //            }
            //            ).Select(g =>
            //                new
            //                {
            //                    g.Key.Company,
            //                    g.Key.Category1,
            //                    g.Key.Category1Desc,
            //                    g.Key.Category2,
            //                    g.Key.Category2Desc,
            //                    g.Key.Category3,
            //                    g.Key.Category3Desc,
            //                  //  g.Key.Category4,
            //                  //  g.Key.Category4Desc,
            //                  //  g.Key.Category5,
            //                 //   g.Key.Category5Desc,
            //                    g.Key.ItemCode,
            //                    g.Key.ItemDescription,
            //                    g.Key.Model,
            //                    g.Key.Brand,
            //                    g.Key.Color,
            //                    g.Key.Item_Size,
            //                    Balance = g.Sum(x => x.Field<Decimal>("Balance")),
            //                    SalesQty = g.Sum(x => x.Field<Decimal>("SalesQty"))
            //                });

            //GP1 = LINQResultToDataTable(_tmpResult);



            //GP1 = LINQResultToDataTable(_tmpResult);

            //GP1.TableName = "tbl";

           
            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c8"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c5"] = _Com; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c5"] = "Sales With Inventory Balance"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c3"] = "Date To :"; dataRow["c4"] = _toDate.ToString("dd/MMM/yyyy");
            dataRow["c6"] = "User : "; dataRow["c7"] = _user + " , Printed on " + System.DateTime.Now;

            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _user, TitleData, GLOB_DataTable, out _err);

            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }
        //Tharindu 2017/11/11
        public string GetSGRANDetails_Execl_Details(string _user, DateTime _fromDate, DateTime _toDate, string _brand, string _model, string _itemcode, string _itemcat1, string _itemcat2, string _itemcat3, string _doctype, string _reptpdesc, out string _err, string _Com, string root)
        {
            DataTable _dtResults = new DataTable();
            DataTable GLOB_DataTable = new DataTable();
            _err = string.Empty;
            string _filePath = string.Empty;

            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("GRANDtl") == true) _inventoryDAL.ConnectionOpen_DR();

            _dtResults = _inventoryDAL.GetSGRANDetails_Execl_Data(_user, _fromDate, _toDate, _brand, _model, _itemcode, _itemcat1, _itemcat2, _itemcat3, _doctype, _reptpdesc, root);

            GLOB_DataTable.Merge(_dtResults);
            GLOB_DataTable.TableName = "tbl";

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        //add by tharanga 2017/11/10

        //Tharindu 2017/11/15
        public DataTable GetDeliveredSalesGRNDetails_Execl(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _PCenter, string _User, string _RepType, string _Itemstatus, string _reportdoc, string _Supplier, string _purchaseorder, string _com, string _pc, int _isExport, out string _err)
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();

            DataTable _dtResults = new DataTable();
            DataTable GLOB_DataTable = new DataTable();
            _err = string.Empty;
            string _filePath = string.Empty;


            if (_securityDAL.Is_Report_DR("DeliveredSales") == true) _salesDAL.ConnectionOpen_DR();
            _dtResults = _salesDAL.GetDeliveredSalesGRNDetails(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _PCenter, _User, _RepType, _Itemstatus, _reportdoc, _Supplier, _purchaseorder, _com, _pc, _isExport);

            GLOB_DataTable.Merge(_dtResults);
            GLOB_DataTable.TableName = "tbl";

            _err = "";
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }


            return _dtResults;
        }
        //nuwan 2017.11.13
        public void SendMailReservationCancel(List<INR_RES_LOG> updateResLogList, string type)
        {
            string[] seperator = new string[] { "|" };
            string[] searchParams = updateResLogList[0].IRL_RES_NO.Split(seperator, StringSplitOptions.None);
            foreach (var _str in searchParams)
            {
                if (!string.IsNullOrEmpty(_str))
                {
                    _inventoryDAL = new InventoryDAL();
                    _generalDAL = new GeneralDAL();
                    _securityDAL = new SecurityDAL();
                    INR_RES _inrRes = _inventoryDAL.GET_INR_RES_DATA(new INR_RES() { IRS_COM = updateResLogList[0].IRL_ORIG_COM, IRS_RES_NO = _str }).FirstOrDefault();
                    List<INR_RES_DET> _inrResDetList = _inventoryDAL.GET_INR_RES_DET_DATA_NEW(new INR_RES_DET() { IRD_RES_NO = _str });
                    #region Email
                    StringBuilder html = new StringBuilder();
                    string htmlBody = string.Empty;
                    string _reqNo = string.Empty;
                    if (updateResLogList != null)
                    {
                        if (updateResLogList.Count > 0)
                        {
                            _reqNo = _inrResDetList[0].IRD_RESREQ_NO;
                            DataTable dt = new DataTable();
                            //Building an HTML string.
                            DataRow dr = null;
                            dt.Columns.Add(new DataColumn("Item", typeof(string)));
                            dt.Columns.Add(new DataColumn("Description", typeof(string)));
                            dt.Columns.Add(new DataColumn("Model", typeof(string)));
                            dt.Columns.Add(new DataColumn("Cancel Qty", typeof(decimal)));
                            dt.Columns.Add(new DataColumn("Bal Qty", typeof(decimal)));
                            //Table start.
                            html.Append("<!DOCTYPE html>");
                            html.Append("<html>");
                            html.Append("<body>");
                            html.Append("<table style=' background-repeat:no-repeat; width:600px;margin:0;' cellpadding='0' cellspacing='0' border='1' background-color: aqua>");


                            //Building the Header row.
                            html.Append("<tr>");
                            foreach (DataColumn column in dt.Columns)
                            {
                                html.Append("<th style=' background-color:#B5E3F0; margin:0;' >");
                                html.Append(column.ColumnName);
                                html.Append("</th>");
                            }
                            html.Append("</tr>");
                            MasterItem _mstItm = new MasterItem();
                            foreach (INR_RES_LOG _resDet in updateResLogList)
                            {
                                _mstItm = _generalDAL.GetItemMaster(_resDet.IRL_ITM_CD);
                                string _mod = "";
                                string _des = "";
                                if (_mstItm != null)
                                {
                                    _mod = _mstItm.Mi_model;
                                    _des = _mstItm.Mi_shortdesc;
                                }
                                html.Append("<tr>");
                                html.Append("<th align='left'>");
                                html.Append(_resDet.IRL_ITM_CD);
                                html.Append("</th>");
                                html.Append("<th align='left'>");
                                html.Append(_des);
                                html.Append("</th>");
                                html.Append("<th align='left'>");
                                html.Append(_mod);
                                html.Append("</th>");
                                html.Append("<th>");
                                html.Append(_resDet.IRL_CAN_QTY);
                                html.Append("</th>");
                                html.Append("<th>");
                                html.Append(_resDet.IRL_RES_BQTY - _resDet.IRL_CAN_QTY);
                                html.Append("</th>");
                                html.Append("</tr>");

                            }
                            html.Append("</table>");
                        }
                        _generalDAL = new GeneralDAL();
                        _generalDAL.ConnectionOpen();
                        SmtpClient smtpClient = new SmtpClient();
                        MailMessage message = new MailMessage();
                        MasterLocation _mstLoc = new MasterLocation();
                        _mstLoc = _generalDAL.GetLocationInfor(_inrRes.IRS_COM, _inrRes.IRS_ANAL_2);
                        SystemUser _userData = null;
                        InventoryRequest _tmpInvReq = new InventoryRequest();
                        _tmpInvReq.Itr_req_no = _reqNo;
                        InventoryRequest _invReqData = _inventoryDAL.GET_INT_REQ_DATA_NEW(_tmpInvReq).FirstOrDefault();
                        string _remark = "";
                        if (_invReqData != null)
                        {
                            _userData = _securityDAL.GetUserByUserID(_invReqData.Itr_cre_by);
                            _remark = _invReqData.Itr_note;
                        }
                        string othMail = string.Empty;
                        if (_invReqData.Itr_anal2 != "")
                        {
                            DataTable deta = _generalDAL.getExecMnagerMail(_invReqData.Itr_anal2, "EXECMAN", _invReqData.Itr_com);
                            if (deta.Rows.Count > 0)
                            {
                                if (deta.Rows[0]["MNGR"] != DBNull.Value)
                                {
                                    if (IsValidEmail(deta.Rows[0]["MNGR"].ToString()))
                                        othMail = deta.Rows[0]["MNGR"].ToString();
                                }
                                if (deta.Rows[0]["EXE"] != DBNull.Value)
                                {
                                    if (IsValidEmail(deta.Rows[0]["EXE"].ToString()))
                                        othMail = othMail + "," + deta.Rows[0]["EXE"].ToString();
                                }
                            }
                        }

                        if (_mstLoc != null && _userData != null)
                        {
                            string _bccEmail = "lakshan@abansgroup.com,nuwanc@abansgroup.com";
                            string _toEmail = _userData.se_Email.ToLower();
                            if (othMail != "")
                            {
                                _toEmail = _toEmail + "," + othMail;
                            }
                            if (!string.IsNullOrEmpty(_toEmail))
                            {
                                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                                smtpClient.Host = _generalDAL.GetMailHost();
                                smtpClient.Port = 25;
                                message.From = fromAddress;
                                string FOOTER = _generalDAL.GetMailFooterMsg();
                                string _email = "";
                                // string _docNo = _docNo.Replace("Normal:", "");
                                _email = "Dear Sir/Madam, <br>"
                                    + "<u>Customer Reservation Cancel</u><br> "
                                    + "Reservation # : " + _inrRes.IRS_RES_NO + "<br>"
                                    + "Request # : " + _reqNo + "<br>"
                                + "Remarks # : " + _remark + "<br>";
                                //_email = _email + "Approved #-" + _docNo + " <br><P>";
                                _email = _email + "<br>" + html + "<br><br>" + "** This is an auto generated mail from Abans infor portal. Please don't Reply ** ";
                                message.To.Add(_toEmail);
                                message.Bcc.Add(_bccEmail);
                                message.Subject = "Customer Reservation Cancel";
                                //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                                //message.Bcc.Add(new MailAddress(""));
                                message.IsBodyHtml = false;
                                message.Body = _email;
                                message.IsBodyHtml = true;
                                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                                // Send SMTP mail
                                smtpClient.Send(message);
                            }
                            else
                            {
                                _generalDAL.ConnectionClose();
                            }
                        }
                        else
                        {
                            _generalDAL.ConnectionClose();
                        }
                    }
                    #endregion
                }
            }
        }
        //nuwan 2017.11.13
        public void SendMailReservationUpdate(string resno, string com, string expdt)
        {
            string[] seperator = new string[] { "|" };
            string[] searchParams = resno.Split(seperator, StringSplitOptions.None);
            foreach (var _str in searchParams)
            {
                if (!string.IsNullOrEmpty(_str))
                {
                    _inventoryDAL = new InventoryDAL();
                    _generalDAL = new GeneralDAL();
                    _securityDAL = new SecurityDAL();
                    INR_RES _inrRes = _inventoryDAL.GET_INR_RES_DATA(new INR_RES() { IRS_COM = com, IRS_RES_NO = _str }).FirstOrDefault();
                    List<INR_RES_DET> _inrResDetList = _inventoryDAL.GET_INR_RES_DET_DATA_NEW(new INR_RES_DET() { IRD_RES_NO = _str });
                    #region Email
                    StringBuilder html = new StringBuilder();
                    string htmlBody = string.Empty;
                    string _reqNo = string.Empty;
                    if (_inrRes != null)
                    {
                        _generalDAL = new GeneralDAL();
                        _generalDAL.ConnectionOpen();
                        SmtpClient smtpClient = new SmtpClient();
                        MailMessage message = new MailMessage();
                        MasterLocation _mstLoc = new MasterLocation();
                        _mstLoc = _generalDAL.GetLocationInfor(_inrRes.IRS_COM, _inrRes.IRS_ANAL_2);
                        SystemUser _userData = null;
                        InventoryRequest _tmpInvReq = new InventoryRequest();
                        _tmpInvReq.Itr_req_no = _inrResDetList[0].IRD_RESREQ_NO;
                        InventoryRequest _invReqData = _inventoryDAL.GET_INT_REQ_DATA_NEW(_tmpInvReq).FirstOrDefault();
                        string _remark = "";
                        if (_invReqData != null)
                        {
                            _userData = _securityDAL.GetUserByUserID(_invReqData.Itr_cre_by);
                            _remark = _invReqData.Itr_note;
                        }
                        string othMail = string.Empty;
                        if (_invReqData.Itr_anal2 != "")
                        {
                            DataTable deta = _generalDAL.getExecMnagerMail(_invReqData.Itr_anal2, "EXECMAN", _invReqData.Itr_com);
                            if (deta.Rows.Count > 0)
                            {
                                if (deta.Rows[0]["MNGR"] != DBNull.Value)
                                {
                                    if (IsValidEmail(deta.Rows[0]["MNGR"].ToString()))
                                        othMail = deta.Rows[0]["MNGR"].ToString();
                                }
                                if (deta.Rows[0]["EXE"] != DBNull.Value)
                                {
                                    if (IsValidEmail(deta.Rows[0]["EXE"].ToString()))
                                        othMail = othMail + "," + deta.Rows[0]["EXE"].ToString();
                                }
                            }
                        }

                        if (_mstLoc != null && _userData != null)
                        {
                            string _bccEmail = "lakshan@abansgroup.com,nuwanc@abansgroup.com";
                            string _toEmail = _userData.se_Email.ToLower();
                            if (othMail != "")
                            {
                                _toEmail = _toEmail + "," + othMail;
                            }
                            if (!string.IsNullOrEmpty(_toEmail))
                            {
                                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                                smtpClient.Host = _generalDAL.GetMailHost();
                                smtpClient.Port = 25;
                                message.From = fromAddress;
                                string FOOTER = _generalDAL.GetMailFooterMsg();
                                string _email = "";
                                // string _docNo = _docNo.Replace("Normal:", "");
                                _email = "Dear Sir/Madam, <br>"
                                    + "<u>Customer Reservation Expected date updated.</u><br> "
                                    + "Reservation # : " + _inrRes.IRS_RES_NO + "<br>"
                                    + "Request # : " + _tmpInvReq.Itr_req_no + "<br>"
                                    + "Expected Date : " + expdt + "<br>"
                                + "Remarks # : " + _remark + "<br>";
                                //_email = _email + "Approved #-" + _docNo + " <br><P>";
                                _email = _email + "<br>" + html + "<br><br>" + "** This is an auto generated mail from Abans infor portal. Please don't Reply ** ";
                                message.To.Add(_toEmail);
                                message.Bcc.Add(_bccEmail);
                                message.Subject = "Customer Reservation Expected Date Updated";
                                //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                                //message.Bcc.Add(new MailAddress(""));
                                message.IsBodyHtml = false;
                                message.Body = _email;
                                message.IsBodyHtml = true;
                                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                                // Send SMTP mail
                                smtpClient.Send(message);
                            }
                            else
                            {
                                _generalDAL.ConnectionClose();
                            }
                        }
                        else
                        {
                            _generalDAL.ConnectionClose();
                        }
                    }
                    #endregion
                }
            }
        }

        public DataTable Get_gp_report(string _com, string _pc, DateTime _frmDate, DateTime _todate, string _itm_cat1, string _itm_cat2, string _exec_cd, string _cust_cd, string _itm_cd, string _brand, string _model, string _itm_cat3, string _itm_cat4, string _itm_cat5)
        {
            _securityDAL = new SecurityDAL();
            _inventoryDAL = new InventoryDAL();
            if (_securityDAL.Is_Report_DR("GP_Report") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.Get_gp_report(_com, _pc, _frmDate, _todate, _itm_cat1, _itm_cat2, _exec_cd, _cust_cd, _itm_cd, _brand, _model, _itm_cat3, _itm_cat4, _itm_cat5);

        }

        
        public DataTable Get_Bill_Collection(DateTime _fromdate, DateTime _todate, string in_Company, string _pc, string in_user_id)
        {
            // //Wimal 11/Sep/2018 Bill Collection Summery/Detail report
            _reportDAL = new ReptCommonDAL();
            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(in_user_id);
            DataTable _dt_TotResults = new DataTable();
            _securityDAL = new SecurityDAL();
            _inventoryDAL = new InventoryDAL();
            if (_securityDAL.Is_Report_DR("Bill_Collection_report") == true) _inventoryDAL.ConnectionOpen_DR();

            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    //_dtResults = _financialDAL.GetSales_with_InvoiceBalance(_fromDate, _toDate, _cat1, _cat2, _cat3, _cat4, _cat5, _brand, _itemcode, _model, drow["tpl_pc"].ToString(), drow["tpl_com"].ToString());
                    DataTable _dtResults = _inventoryDAL.BillCollection(_fromdate, _todate, in_Company, drow["tpl_pc"].ToString(), in_user_id);
                    _dt_TotResults.Merge(_dtResults);
                }
            }
            _dt_TotResults.TableName = "ss";
            return _dt_TotResults;

            //_inventoryDAL = new InventoryDAL();
            //return _inventoryDAL.BillCollection(_fromdate, _todate, in_Company, _pc, in_user_id);
        }
        //NUWAN 2017 DEC 14
        public void SendMailPOApprove(PurchaseOrder PURHDR, List<PurchaseOrderDetail> PURDET, string type)
        {

            #region Email
            _generalDAL = new GeneralDAL();
            StringBuilder html = new StringBuilder();
            string htmlBody = string.Empty;
            if (PURDET != null)
            {
                if (PURHDR.Poh_com == "ABE" || PURHDR.Poh_com == null)
                {
                    return;
                }
                if (PURDET.Count > 0)
                {
                    DataTable dt = new DataTable();
                    //Building an HTML string.
                    DataRow dr = null;
                    dt.Columns.Add(new DataColumn("Item", typeof(string)));
                    dt.Columns.Add(new DataColumn("Description", typeof(string)));
                    dt.Columns.Add(new DataColumn("Model", typeof(string)));
                    dt.Columns.Add(new DataColumn("Qty", typeof(decimal)));
                    dt.Columns.Add(new DataColumn("Unit Amount", typeof(decimal)));
                    dt.Columns.Add(new DataColumn("Amount", typeof(decimal)));
                    dt.Columns.Add(new DataColumn("Dis. Rate", typeof(decimal)));
                    dt.Columns.Add(new DataColumn("Dis. Amount", typeof(decimal)));
                    dt.Columns.Add(new DataColumn("Tax Amount", typeof(decimal)));
                    dt.Columns.Add(new DataColumn("Total", typeof(decimal)));
                    //Table start.
                    html.Append("<!DOCTYPE html>");
                    html.Append("<html>");
                    html.Append("<body>");
                    html.Append("<table style=' background-repeat:no-repeat; width:600px;margin:0;' cellpadding='0' cellspacing='0' border='1' background-color: aqua>");


                    //Building the Header row.
                    html.Append("<tr>");
                    foreach (DataColumn column in dt.Columns)
                    {
                        html.Append("<th style=' background-color:#B5E3F0; margin:0;'>");
                        html.Append(column.ColumnName);
                        html.Append("</th>");
                    }
                    html.Append("</tr>");
                    MasterItem _mstItm = new MasterItem();
                    foreach (PurchaseOrderDetail _updateitem in PURDET)
                    {
                        _mstItm = _generalDAL.GetItemMaster(_updateitem.Pod_itm_cd);
                        string _mod = "";
                        string _des = "";
                        if (_mstItm != null)
                        {
                            _mod = _mstItm.Mi_model;
                            _des = _mstItm.Mi_shortdesc;
                        }
                        html.Append("<tr>");
                        html.Append("<th align='left'>");
                        html.Append(_updateitem.Pod_itm_cd);
                        html.Append("</th>");
                        html.Append("<th align='left'>");
                        html.Append(_des);
                        html.Append("</th>");
                        html.Append("<th align='left'>");
                        html.Append(_mod);
                        html.Append("</th>");
                        html.Append("<th align='left'>");
                        html.Append(_updateitem.Pod_qty);
                        html.Append("</th>");

                        html.Append("<th align='left'>");
                        html.Append(_updateitem.Pod_unit_price);
                        html.Append("</th>");

                        html.Append("<th align='left'>");
                        html.Append(_updateitem.Pod_line_val);
                        html.Append("</th>");

                        html.Append("<th align='left'>");
                        html.Append(_updateitem.Pod_dis_rt);
                        html.Append("</th>");

                        html.Append("<th align='left'>");
                        html.Append(_updateitem.Pod_dis_amt);
                        html.Append("</th>");

                        html.Append("<th align='left'>");
                        html.Append(_updateitem.Pod_line_tax);
                        html.Append("</th>");
                        html.Append("<th align='left'>");
                        html.Append(_updateitem.Pod_line_amt);
                        html.Append("</th>");
                        html.Append("</tr>");

                    }
                    html.Append("</table>");
                }



                _generalDAL.ConnectionOpen();
                SmtpClient smtpClient = new SmtpClient();
                MailMessage message = new MailMessage();
                string _toEmail = "";
                //string _toEmail = _userData.se_Email.Trim();
                if (!string.IsNullOrEmpty(PURHDR.Poh_supp))
                {
                    MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                    smtpClient.Host = _generalDAL.GetMailHost();
                    smtpClient.Port = 25;
                    message.From = fromAddress;
                    string FOOTER = _generalDAL.GetMailFooterMsg();
                    string _email = "";
                    _inventoryDAL = new InventoryDAL();
                    MasterBusinessEntity _mstBusEntity = _inventoryDAL.GET_MST_BUSENTITY_DATA(PURHDR.Poh_com, PURHDR.Poh_supp).FirstOrDefault();
                    string _cusName = "";
                    if (_mstBusEntity != null)
                    {
                        _cusName = _mstBusEntity.Mbe_name;
                        _toEmail = _mstBusEntity.Mbe_email;
                    }
                    if (_toEmail != "" && IsValidEmail(_toEmail))
                    {
                        // BusEntityItem _busEntity = _generalDAL.get_Buss_ent_type();
                        // string _docNo = _docNo.Replace("Normal:", "");
                        _email = "Dear Sir/Madam, <br>"
                            + ((type == "APPROVE") ? "<u>Purchase order approved.</u> <br>" : (type == "CANCEL") ? "<u>Purchase order canceled.</u> <br>" : "")
                            + "PO # : " + PURHDR.Poh_doc_no + " <br>"
                            + "Supplier Ref. : " + PURHDR.Poh_ref + " <br>"
                            + "Supplier : " + _cusName + " <br>"
                            + "Remarks : " + PURHDR.Poh_remarks + " <br>"
                            ;
                        //_email = _email + "Approved #-" + _docNo + " <br><P>";
                        _email = _email + "<br>" + html + "<br><br>" + "** This is an auto generated mail from SCM2 infor portal. Please don't Reply ** ";
                        message.To.Add(_toEmail);
                        message.Bcc.Add("nuwanc@abansgroup.com");
                        if (type == "APPROVE")
                            message.Subject = "Purchase order appreved.";
                        if (type == "CANCEL")
                            message.Subject = "Purchase order canceled.";
                        //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                        //message.Bcc.Add(new MailAddress(""));
                        message.IsBodyHtml = false;
                        message.Body = _email;
                        message.IsBodyHtml = true;
                        message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                        // Send SMTP mail
                        smtpClient.Send(message);
                    }
                }
                else
                {
                    _generalDAL.ConnectionClose();
                }
                _generalDAL.ConnectionClose();
            }
            #endregion
        }

        // Tharindu 2017-12-20
        public string GetTotalSalesDetailsExecl(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _PCenter, string _User, string _RepType, string _StockType, string _InvNo, string _Pc, string _Com, string _Promotor, int _freeissue, int currencyType, int _reversal, string _color, string _size, out string _err, string _country = null, string _province = null, string _district = null, string _city = null) //updated by akila 2018/04/02
        {
            // Sanjeewa
            _salesDAL = new SalesDAL();
            _reportDAL = new ReptCommonDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("DeliveredSales") == true) _salesDAL.ConnectionOpen_DR();

            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _salesDAL.GetDeliveredSalesDetails(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _PCenter, _User, _RepType, _StockType, _InvNo, drow["tpl_pc"].ToString(), drow["tpl_com"].ToString(), _Promotor, _freeissue, currencyType, _reversal, "", "", _country, _province, _district, _city);

                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            GLOB_DataTable.TableName = "tbl";
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }

        // Tharindu 2018-01-22
        public DataTable GetCreditCardPayDetails(string _Com, string _Pc, DateTime _FromDate, DateTime _ToDate, string _Bank, string _Mid, string _ReceiptNo, string _Userid, out string _err)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();

            DataTable _dtResults = new DataTable();
            DataTable GLOB_DataTable = new DataTable();
            _err = string.Empty;
            string _filePath = string.Empty;


            if (_securityDAL.Is_Report_DR("CreditCardPaymentSummary") == true) _salesDAL.ConnectionOpen_DR();
            _dtResults = _financialDAL.GetCreditCardPayDetails(_Com, _Pc, _FromDate, _ToDate, _Bank, _Mid, _ReceiptNo, _Userid);

            GLOB_DataTable.Merge(_dtResults);
            GLOB_DataTable.TableName = "tbl";

            _err = "";
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }


            return _dtResults;
        }

        //Tharindu 2018-01-27
        public DataTable ImportScheduleReport_New(DateTime _fromdate, DateTime _todate, string in_Company, string _adminteam, string in_user_id)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ImportSchedule") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.ImportScheduleReport_New(_fromdate, _todate, in_Company, _adminteam, in_user_id);
        }
        public DataTable ImportScheduleGRNDtl_New(DateTime _fromdate, DateTime _todate, string in_Company, string _adminteam, string in_user_id)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ImportSchedule") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.ImportScheduleGRNDtl_New(_fromdate, _todate, in_Company, _adminteam, in_user_id);
        }
        //Add by lakshan 20Feb2018
        public decimal GetMrnShowroomStockValue(string _com, string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("MRNSTOCKVALUE") == true)
            {
                _inventoryDAL.ConnectionOpen_DR();
            }
            return _inventoryDAL.GetMrnShowroomStockValue(_com, _loc);
        }
        
        //Add by lakshan 20Feb2018
        public decimal GetApprovedMrnShowroomStockValue(string _com, string _loc, out string _err)
        {
            _err = "";
            decimal _finVal = 0; decimal _unitPrice = 0; decimal _lineAmt = 0;
            string _priceBk = "AUTOPB", _priceLvl = "NP";//as per the dharshana
            List<PriceDetailRef> _pbList = new List<PriceDetailRef>();
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();
            _generalDAL = new GeneralDAL();
            try
            {
                #region tax default data
                MasterCompany _masterComp = _generalDAL.GetCompByCode(_com);
                List<MasterItemTax> _taxsVat = new List<MasterItemTax>();
                List<MasterItemTax> _taxsNbt = new List<MasterItemTax>();
                bool _isTaxStrBse = false;
                if (_masterComp.MC_TAX_CALC_MTD == "1")
                {
                    _isTaxStrBse = true;
                }
                #endregion
                #region MyRegion
                if (_securityDAL.Is_Report_DR("MRNSTOCKVALUE") == true)
                {
                    _inventoryDAL.ConnectionOpen_DR();
                    _salesDAL.ConnectionOpen_DR();
                }
                #endregion
                #region MyRegion
                 List<InventoryRequestItem> _reqItmList = _inventoryDAL.GetApprovedMrnItemBalance(_com, _loc);
                if (_reqItmList != null)
                {
                    if (_reqItmList.Count > 50)
                    {
                        //_reqItmList = _reqItmList.Take(50).ToList();
                    }
                }
                #endregion
                #region MyRegion
                foreach (var item in _reqItmList)
                {
                    _unitPrice = 0;
                    _pbList = _salesDAL.GetPriceDetail(_priceBk, _priceLvl, item.Itri_itm_cd, 1, DateTime.Today, string.Empty);
                    if (_pbList != null)
                    {
                        if (_pbList.Count > 0)
                        {
                            _pbList = _pbList.Where(x => x.Sapd_price_type == 0).ToList();
                            if (_pbList != null)
                            {
                                if (_pbList.Count > 0)
                                {
                                    _pbList = _pbList.OrderBy(c => c.Sapd_itm_price).ToList();
                                    _unitPrice = _pbList[0].Sapd_itm_price;
                                }
                            }
                        }
                    }
                    #region tax calculate
                    decimal _totNbt = 0, _totVat = 0;
                    if (_unitPrice > 0)
                    {
                        if (_isTaxStrBse)
                        {
                            MasterItem _mstItem = _inventoryDAL.GetItem(_com, item.Itri_itm_cd);
                            _taxsNbt = _salesDAL.GetItemTax_strucbase(_com, item.Itri_itm_cd, item.Itri_itm_stus, "NBT", string.Empty, _mstItem.Mi_anal1);
                            _taxsVat = _salesDAL.GetItemTax_strucbase(_com, item.Itri_itm_cd, item.Itri_itm_stus, "VAT", string.Empty, _mstItem.Mi_anal1);
                            if (_taxsNbt != null)
                            {
                                _taxsNbt = _taxsNbt.Where(c => c.Mict_act == true).ToList();
                            }
                            if (_taxsVat != null)
                            {
                                _taxsVat = _taxsVat.Where(c => c.Mict_act == true).ToList();
                            }
                        }
                        else
                        {
                            _taxsNbt = _salesDAL.GetItemTax(_com, item.Itri_itm_cd, item.Itri_itm_stus, "NBT", string.Empty);
                            _taxsVat = _salesDAL.GetItemTax(_com, item.Itri_itm_cd, item.Itri_itm_stus, "VAT", string.Empty);
                        }
                        foreach (MasterItemTax _one in _taxsNbt)
                        {
                            _totNbt = (_totNbt + _unitPrice) * _one.Mict_tax_rate / 100;
                        }
                        _totVat = _totNbt;
                        foreach (MasterItemTax _one in _taxsVat)
                        {
                            _totVat = (_totVat + _unitPrice) * _one.Mict_tax_rate / 100; 
                        }
                    }
                    #endregion
                    _lineAmt = item.Itri_bqty * (_unitPrice + _totVat);
                    _finVal = _finVal + _lineAmt;
                }
                #endregion
            }
            catch (Exception ex)
            {
                _err = ex.Message;
            }
            return _finVal;
        }
        //Add by lakshan 20Feb2018
        public decimal GetMrnItemsStockValue(string _com, string _loc, List<InventoryRequestItem> _reqItmList, out string _err)
        {
            _err = "";
            decimal _finVal = 0; decimal _unitPrice = 0; decimal _lineAmt = 0;
            string _priceBk = "AUTOPB", _priceLvl = "NP";//as per the dharshana
            List<PriceDetailRef> _pbList = new List<PriceDetailRef>();
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();
            _generalDAL = new GeneralDAL();
            try
            {
                #region tax default data
                MasterCompany _masterComp = _generalDAL.GetCompByCode(_com);
                List<MasterItemTax> _taxsVat = new List<MasterItemTax>();
                List<MasterItemTax> _taxsNbt = new List<MasterItemTax>();
                bool _isTaxStrBse = false;
                if (_masterComp.MC_TAX_CALC_MTD == "1")
                {
                    _isTaxStrBse = true;
                }
                #endregion
                #region MyRegion
                if (_securityDAL.Is_Report_DR("MRNSTOCKVALUE") == true)
                {
                    _inventoryDAL.ConnectionOpen_DR();
                    _salesDAL.ConnectionOpen_DR();
                }
                #endregion
                #region MyRegion
                foreach (var item in _reqItmList)
                {
                    _unitPrice = 0;
                    _pbList = _salesDAL.GetPriceDetail(_priceBk, _priceLvl, item.Itri_itm_cd, 1, DateTime.Today, string.Empty);
                    if (_pbList != null)
                    {
                        if (_pbList.Count > 0)
                        {
                            _pbList = _pbList.Where(x => x.Sapd_price_type == 0).ToList();
                            if (_pbList != null)
                            {
                                if (_pbList.Count > 0)
                                {
                                    _pbList = _pbList.OrderBy(c => c.Sapd_itm_price).ToList();
                                    _unitPrice = _pbList[0].Sapd_itm_price;
                                }
                            }
                        }
                    }
                    #region tax calculate
                    decimal _totNbt = 0, _totVat = 0;
                    if (_unitPrice > 0)
                    {
                        if (_isTaxStrBse)
                        {
                            MasterItem _mstItem = _inventoryDAL.GetItem(_com, item.Itri_itm_cd);
                            _taxsNbt = _salesDAL.GetItemTax_strucbase(_com, item.Itri_itm_cd, item.Itri_itm_stus, "NBT", string.Empty, _mstItem.Mi_anal1);
                            _taxsVat = _salesDAL.GetItemTax_strucbase(_com, item.Itri_itm_cd, item.Itri_itm_stus, "VAT", string.Empty, _mstItem.Mi_anal1);
                            if (_taxsNbt != null)
                            {
                                _taxsNbt = _taxsNbt.Where(c => c.Mict_act == true).ToList();
                            }
                            if (_taxsVat != null)
                            {
                                _taxsVat = _taxsVat.Where(c => c.Mict_act == true).ToList();
                            }
                        }
                        else
                        {
                            _taxsNbt = _salesDAL.GetItemTax(_com, item.Itri_itm_cd, item.Itri_itm_stus, "NBT", string.Empty);
                            _taxsVat = _salesDAL.GetItemTax(_com, item.Itri_itm_cd, item.Itri_itm_stus, "VAT", string.Empty);
                        }
                        foreach (MasterItemTax _one in _taxsNbt)
                        {
                            _totNbt = (_totNbt + _unitPrice) * _one.Mict_tax_rate / 100;
                        }
                        _totVat = _totNbt;
                        foreach (MasterItemTax _one in _taxsVat)
                        {
                            _totVat = (_totVat + _unitPrice) * _one.Mict_tax_rate / 100;
                        }
                    }
                    #endregion
                    _lineAmt = item.Itri_qty * (_unitPrice + _totVat);
                    _finVal = _finVal + _lineAmt;
                }
                #endregion
            }
            catch (Exception ex)
            {
                _err = ex.Message;
            }
            return _finVal;
        }

        public void SendBransMails(string _excelpath, string sino, string com)
        {

            _custServiceDAL = new CustServiceDAL();
            _financialDAL = new FinancialDAL();
            _generalDAL = new GeneralDAL();
            ImportsBLHeader oHeader = _financialDAL.GET_BL_HEADER_BY_DOC(com, sino, "ALL");
            //Get BL Distinct ItemBrands
            DataTable _brnddt = _custServiceDAL.GetMailBrands(sino);
            int i = 0;
            string Allmail = "";
            if (_brnddt != null && _brnddt.Rows.Count > 0)
            {
                foreach (var _dtbnd in _brnddt.Rows)
                {
                    //get brand emails.
                    DataTable _maildt = _custServiceDAL.GetBrandsMail(_brnddt.Rows[i][0].ToString(), _brnddt.Rows[i][1].ToString(), com);
                    int k = 0;
                    if (_maildt != null && _maildt.Rows.Count > 0 && _maildt.Rows[k][0].ToString().Trim() != "")
                    {
                        
                        foreach (var _dtmails in _maildt.Rows)
                        {
                            if (_maildt.Rows[k][0].ToString() != "" && _maildt.Rows[k][0].ToString().ToLower().Contains("abansgroup.com") == true)
                            {
                                Allmail = Allmail + "," + _maildt.Rows[k][0].ToString();
                            }
                            else
                            {
                                continue;
                            }
                            //send mails
                           

                            k++;
                        }
                        #region mail
                        //SmtpClient smtpClient = new SmtpClient();
                        //MailMessage message = new MailMessage();
                        //MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());
                        //smtpClient.Host = _generalDAL.GetMailHost();
                        //smtpClient.Port = 25;
                        //message.From = fromAddress;
                        //string FOOTER = _generalDAL.GetMailFooterMsg();
                        //string _email = "Dear Sir/Madam, <br>" + "Your Profitability  generated.  <br> Please find the  system generated Profitability  Report.";
                        //message.To.Add(_maildt.Rows[k][0].ToString());
                        //message.Subject = sino + " - " + oHeader.Ib_rmk;
                        ////message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                        //message.Bcc.Add("manakalm@abansgroup.com");
                        //Attachment at = new Attachment(_excelpath);
                        //message.Attachments.Add(at);
                        //message.IsBodyHtml = false;
                        //message.Body = _email;
                        //message.IsBodyHtml = true;
                        //message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                        //// Send SMTP mail
                        //smtpClient.Send(message);
                        #endregion
                    }

                    i++;
                }
            }
            //genuine emails
            #region genuine emails
            DataTable genuineemails = _custServiceDAL.GetGenuineEMails("PROFITBLTY", com);
            if (genuineemails != null && genuineemails.Rows.Count > 0)
            {
                int p = 0;
                foreach (var _gnrow in genuineemails.Rows)
                {
                    if (genuineemails.Rows[p][0].ToString() != "" && genuineemails.Rows[p][0].ToString().ToLower().Contains("abansgroup.com") == true)
                    {
                        Allmail = Allmail + "," + genuineemails.Rows[p][0].ToString();
                    }
                    else
                    {
                        continue;
                    }

               
                    p++;
                }
            }
            #endregion

            #region mail
            SmtpClient smtpClient = new SmtpClient();
            MailMessage message = new MailMessage();
            MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());
            smtpClient.Host = _generalDAL.GetMailHost();
            smtpClient.Port = 25;
            message.From = fromAddress;
            string FOOTER = _generalDAL.GetMailFooterMsg();
            string _email = "Dear Sir/Madam, <br>" + "Your Profitability  generated.  <br> Please find the  system generated Profitability  Report.";
            message.To.Add(Allmail);
            message.Subject = sino + " - " + oHeader.Ib_rmk;
            //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
            message.Bcc.Add(new MailAddress("darshana@abansgroup.com"));
            Attachment at = new Attachment(_excelpath);
            message.Attachments.Add(at);
            message.IsBodyHtml = false;
            message.Body = _email;
            message.IsBodyHtml = true;
            message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
            // Send SMTP mail
            smtpClient.Send(message);
            #endregion



        }




        //tHARINDU 2018-03-06

        public DataTable getSalesOrderSummaryDetails(DateTime _fromDate, DateTime _toDate, string _com, string _otherloc, string _exec, string _user, string _customer, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults = new DataTable();
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            if (_securityDAL.Is_Report_DR("SODetail") == true) _financialDAL.ConnectionOpen_DR();

            DataTable GLOB_DataTable = new DataTable();
            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_user);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _financialDAL.getSalesOrderSummaryDetails(_fromDate, _toDate, drow["tpl_com"].ToString(), _otherloc, _exec, drow["tpl_pc"].ToString(), _user, _customer);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }


            return _dtResults;
        }

        //Wimal 24/03/2018
        public DataTable Get_FinancialDocDetails(DateTime _fromdate, DateTime _todate, string in_Company, string _adminteam, string in_user_id, string in_lc, string in_pi, string in_bank, string in_acc, int IsSummary, int IsExpireDate, int IsInsurancePolicyDate, int IsFinanceDocDate)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("FinancialDocDetails") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.Get_FinancialDocDetails(_fromdate, _todate, in_Company, _adminteam, in_user_id, in_lc, in_pi, in_bank, in_acc, IsSummary, IsExpireDate, IsInsurancePolicyDate, IsFinanceDocDate);
        }

        //Wimal 27/03/2018
        public DataTable Get_GetAdjDetailsWDocCat(DateTime _fromdate, DateTime _todate, string _Company, string _LocCd, string in_user_id)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("AdjDetlWDocCat") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.Get_GetAdjDetailsWDocCat(_fromdate, _todate, _Company, _LocCd, in_user_id);
        }


        // Tharindu 2018-03-22
        public DataTable GetCurrentAvailabilityBL(string _Com, DateTime _FromDate, DateTime _ToDate, string _sino, string _itemcode, string _model, string brand, string category, string category2, string category3, string brandmgr, string supplier, string userid)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CurrentAvailabilitiyBL") == true) _inventoryDAL.ConnectionOpen_DR();
          
            return _inventoryDAL.GetCurrentAvailabilityBL(_Com, _FromDate, _ToDate, _sino, _itemcode, _model, brand, category, category2, category3, brandmgr, supplier, userid);
        }

        // Tharindu 2018-03-22
        public DataTable GetShipmentDetails(string userid)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetShipmentDetails(userid);
        }


        public DataTable getChargeSheet(string _Com, string _Loc, string _Jobno, string _User)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();

            //_inventoryDAL.ConnectionOpen();
            //_inventoryDAL.BeginTransaction();

           if (_securityDAL.Is_Report_DR("ChargeSheet") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.getChargeSheet(_Com, _Loc, _Jobno, _User);

           // _inventoryDAL.TransactionCommit();
        }

        public int ItemDispatchDetailAutoMail(InvReportPara _objRepoPara)
        {
            try
            {
                #region process
                DataTable param = new DataTable();
                DataRow dr;
                //tmp_user_pc = new DataTable();
                DataTable GLOB_DataTable = new DataTable();
                DataTable DidpatchReqDetails = new DataTable();

                param.Columns.Add("fromdate", typeof(string));
                param.Columns.Add("todate", typeof(string));
                param.Columns.Add("user", typeof(string));
                param.Columns.Add("com", typeof(string));
                param.Columns.Add("powered_by", typeof(string));

                dr = param.NewRow();

                string fdate = _objRepoPara._GlbReportFromDate.Date.ToShortDateString();
                string fdt = Convert.ToDateTime(fdate).ToShortDateString();

                string tdate = _objRepoPara._GlbReportToDate.Date.ToShortDateString();
                string tdt = Convert.ToDateTime(tdate).ToShortDateString();

                dr["fromdate"] = fdt;
                dr["todate"] = tdt;
                dr["user"] = _objRepoPara._GlbUserID == "" ? "" : _objRepoPara._GlbUserID.Replace('$', ' ').Replace('^', ' ').Replace('|', ',');
                dr["com"] = _objRepoPara._GlbReportCompName;
                dr["powered_by"] = _objRepoPara._GlbReportPoweredBy;

                param.Rows.Add(dr);

                GLOB_DataTable.Clear();

                DidpatchReqDetails = ItemDispatchDtlReport(_objRepoPara._GlbReportFromDate, _objRepoPara._GlbReportToDate, _objRepoPara._GlbUserID);

                DataTable realdata = new DataTable();
                DataRow redr;
                //Header Details

                realdata.Columns.Add("MI_CATE_1", typeof(string));
                realdata.Columns.Add("MI_CD", typeof(string));
                realdata.Columns.Add("MI_SHORTDESC", typeof(string));

                realdata.Columns.Add("RETAIL_SR_QTY", typeof(Int32));
                realdata.Columns.Add("ELITE_SR_QTY", typeof(Int32));
                realdata.Columns.Add("DEALER_QTY", typeof(Int32));
                realdata.Columns.Add("DF_SR_QTY", typeof(Int32));
                realdata.Columns.Add("DF_DEL_QTY", typeof(Int32));
                realdata.Columns.Add("AZ_SR_QTY", typeof(Int32));
                //Balance
                realdata.Columns.Add("BAL_BOND_QTY", typeof(Int32));
                realdata.Columns.Add("BAL_DPS32_QTY", typeof(Int32));
                realdata.Columns.Add("BAL_AZKK_QTY", typeof(Int32));
                realdata.Columns.Add("BAL_AEL_QTY", typeof(Int32));

                realdata.Columns.Add("BAL_DPS45_QTY", typeof(Int32));
                realdata.Columns.Add("BAL_RDPS32_QTY", typeof(Int32));
                realdata.Columns.Add("BAL_RDPS45_QTY", typeof(Int32));
                realdata.Columns.Add("BAL_DPS51_QTY", typeof(Int32));
                realdata.Columns.Add("BAL_RDPS51_QTY", typeof(Int32));
                realdata.Columns.Add("BAL_RWHGL_QTY", typeof(Int32));
                realdata.Columns.Add("BAL_VWHGL_QTY", typeof(Int32));
                realdata.Columns.Add("BAL_DPS57_QTY", typeof(Int32));


                //  realdata.Columns.Add("ROWNUM", typeof(Int32));

                int i = 0;
                foreach (var dis in DidpatchReqDetails.Rows)
                {

                    redr = realdata.NewRow();

                    redr["MI_CATE_1"] = DidpatchReqDetails.Rows[i]["MI_CATE_1"].ToString();
                    redr["MI_CD"] = DidpatchReqDetails.Rows[i]["MI_CD"].ToString();
                    redr["MI_SHORTDESC"] = DidpatchReqDetails.Rows[i]["MI_SHORTDESC"].ToString();

                    redr["RETAIL_SR_QTY"] = DidpatchReqDetails.Rows[i]["RETAIL_SR_QTY"].ToString() == "" ? 0 : Convert.ToInt32(DidpatchReqDetails.Rows[i]["RETAIL_SR_QTY"].ToString());
                    redr["ELITE_SR_QTY"] = DidpatchReqDetails.Rows[i]["ELITE_SR_QTY"].ToString() == "" ? 0 : Convert.ToInt32(DidpatchReqDetails.Rows[i]["ELITE_SR_QTY"].ToString());
                    redr["DEALER_QTY"] = DidpatchReqDetails.Rows[i]["DEALER_QTY"].ToString() == "" ? 0 : Convert.ToInt32(DidpatchReqDetails.Rows[i]["DEALER_QTY"].ToString());
                    redr["DF_SR_QTY"] = DidpatchReqDetails.Rows[i]["DF_SR_QTY"].ToString() == "" ? 0 : Convert.ToInt32(DidpatchReqDetails.Rows[i]["DF_SR_QTY"].ToString());
                    redr["DF_DEL_QTY"] = DidpatchReqDetails.Rows[i]["DF_DEL_QTY"].ToString() == "" ? 0 : Convert.ToInt32(DidpatchReqDetails.Rows[i]["DF_DEL_QTY"].ToString());
                    redr["AZ_SR_QTY"] = DidpatchReqDetails.Rows[i]["AZ_SR_QTY"].ToString() == "" ? 0 : Convert.ToInt32(DidpatchReqDetails.Rows[i]["AZ_SR_QTY"].ToString());
                    //Balance
                    redr["BAL_BOND_QTY"] = DidpatchReqDetails.Rows[i]["BAL_BOND_QTY"].ToString() == "" ? 0 : Convert.ToInt32(DidpatchReqDetails.Rows[i]["BAL_BOND_QTY"].ToString());
                    redr["BAL_DPS32_QTY"] = DidpatchReqDetails.Rows[i]["BAL_DPS32_QTY"].ToString() == "" ? 0 : Convert.ToInt32(DidpatchReqDetails.Rows[i]["BAL_DPS32_QTY"].ToString());
                    redr["BAL_AZKK_QTY"] = DidpatchReqDetails.Rows[i]["BAL_AZKK_QTY"].ToString() == "" ? 0 : Convert.ToInt32(DidpatchReqDetails.Rows[i]["BAL_AZKK_QTY"].ToString());
                    redr["BAL_AEL_QTY"] = DidpatchReqDetails.Rows[i]["BAL_AEL_QTY"].ToString() == "" ? 0 : Convert.ToInt32(DidpatchReqDetails.Rows[i]["BAL_AEL_QTY"].ToString());


                    redr["BAL_DPS45_QTY"] = DidpatchReqDetails.Rows[i]["BAL_DPS45_QTY"].ToString() == "" ? 0 : Convert.ToInt32(DidpatchReqDetails.Rows[i]["BAL_DPS45_QTY"].ToString());
                    redr["BAL_RDPS32_QTY"] = DidpatchReqDetails.Rows[i]["BAL_RDPS32_QTY"].ToString() == "" ? 0 : Convert.ToInt32(DidpatchReqDetails.Rows[i]["BAL_RDPS32_QTY"].ToString());
                    redr["BAL_RDPS45_QTY"] = DidpatchReqDetails.Rows[i]["BAL_RDPS45_QTY"].ToString() == "" ? 0 : Convert.ToInt32(DidpatchReqDetails.Rows[i]["BAL_RDPS45_QTY"].ToString());
                    redr["BAL_DPS51_QTY"] = DidpatchReqDetails.Rows[i]["BAL_DPS51_QTY"].ToString() == "" ? 0 : Convert.ToInt32(DidpatchReqDetails.Rows[i]["BAL_DPS51_QTY"].ToString());
                    redr["BAL_RDPS51_QTY"] = DidpatchReqDetails.Rows[i]["BAL_RDPS51_QTY"].ToString() == "" ? 0 : Convert.ToInt32(DidpatchReqDetails.Rows[i]["BAL_RDPS51_QTY"].ToString());
                    redr["BAL_RWHGL_QTY"] = DidpatchReqDetails.Rows[i]["BAL_RWHGL_QTY"].ToString() == "" ? 0 : Convert.ToInt32(DidpatchReqDetails.Rows[i]["BAL_RWHGL_QTY"].ToString());
                    redr["BAL_VWHGL_QTY"] = DidpatchReqDetails.Rows[i]["BAL_VWHGL_QTY"].ToString() == "" ? 0 : Convert.ToInt32(DidpatchReqDetails.Rows[i]["BAL_VWHGL_QTY"].ToString());
                    redr["BAL_DPS57_QTY"] = DidpatchReqDetails.Rows[i]["BAL_DPS57_QTY"].ToString() == "" ? 0 : Convert.ToInt32(DidpatchReqDetails.Rows[i]["BAL_DPS57_QTY"].ToString());

                    realdata.Rows.Add(redr);
                    i++;
                }

                DataTable dtCreateUser = _inventoryDAL.GetUserNameByUserID(_objRepoPara._GlbUserID);
                string _toemail = "";
                string _err = "";
                if (dtCreateUser != null && dtCreateUser.Rows.Count > 0)
                {
                    if (dtCreateUser.Rows[0]["se_email"] != null && IsValidEmail(dtCreateUser.Rows[0]["se_email"].ToString()))
                    {
                        _toemail = dtCreateUser.Rows[0]["se_email"].ToString();
                    }
                }
                _generalDAL = new GeneralDAL();
                string _filePath = ExportExcel2007(_objRepoPara._GlbReportCompCode, _objRepoPara._GlbUserID, param, DidpatchReqDetails, out _err);
                SmtpClient smtpClient = new SmtpClient();
                MailMessage message = new MailMessage();
                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());
                smtpClient.Host = _generalDAL.GetMailHost();
                smtpClient.Port = 25;
                message.From = fromAddress;
                string FOOTER = _generalDAL.GetMailFooterMsg();
                string _email = "Dear Sir/Madam, <br>" + "Your Item Dispatch Details Report generated.  <br> Please find the  system generated  Report.";
                message.To.Add(_toemail);
                message.Subject = "Item Dispatch Details";
                //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                //message.Bcc.Add(new MailAddress(""));
                Attachment at = new Attachment(_filePath);
                message.Attachments.Add(at);
                message.IsBodyHtml = false;
                message.Body = _email;
                message.IsBodyHtml = true;
                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                // Send SMTP mail
                smtpClient.Send(message);
                #endregion
            }
            catch (Exception ex)
            {
                return -1;
            }

          
            return 1;
        }

        public DataTable GetAgeAnalysisDebotrs(DateTime p_from, DateTime p_to, string p_com, string p_pc, string p_user, string p_cust, string p_tp, string p_excel)
        {
            DataTable _dtResults;
            DataTable GLOB_DataTable = new DataTable();
            
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(p_user);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("AgeAnalDebtOutstand") == true) _financialDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _financialDAL.GetAgeAnalysisDebotrsExecl(p_from, p_to, p_com, drow["tpl_pc"].ToString(), p_user, p_cust, p_tp, p_excel);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }
            GLOB_DataTable.TableName = "aaa";
            return GLOB_DataTable;
        }

   
        // Tharindu 2018-04-24

        public string GetAgeAnalysisDebotrsExecl(DateTime p_from, DateTime p_to, string p_com, string p_pc, string p_user, string p_cust, string p_tp, out string _err)
        {
            DataTable _dtResults;
            DataTable GLOB_DataTable = new DataTable();
            DataTable dtheader = new DataTable();
            _err = string.Empty;
            string _filePath = string.Empty;

            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(p_user);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("AgeAnalDebtOutstand") == true) _financialDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _financialDAL.GetAgeAnalysisDebotrsExecl(p_from, p_to, p_com, drow["tpl_pc"].ToString(), p_user, p_cust, p_tp, "Y");

                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c8"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c5"] = p_com; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c5"] = "Age Analysis Debtors Outstanding"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date :"; dataRow["c2"] = p_from.ToString("dd/MMM/yyyy");
            dataRow["c3"] = "Date To :"; dataRow["c4"] = p_to.ToString("dd/MMM/yyyy");
            dataRow["c6"] = "User : "; dataRow["c7"] = p_user + " , Printed on " + System.DateTime.Now;

            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(p_com, p_user, TitleData, GLOB_DataTable, out _err);

            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }

        //
        // Tharindu 2018-01-22
        public DataTable GetCatWiseTradingGPReport(string com, DateTime stdt, DateTime endDt, string chnl, string cate, string pc, string userid, string itmcd, out string _err)
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();

            DataTable _dtResults = new DataTable();
            DataTable GLOB_DataTable = new DataTable();
            _err = string.Empty;
            string _filePath = string.Empty;


            if (_securityDAL.Is_Report_DR("CurrentAvailabilitiyBL") == true) _salesDAL.ConnectionOpen_DR();
            _dtResults = _salesDAL.GetCatWiseTradingGPReport(com, stdt, endDt, chnl, cate, pc, userid, itmcd);

            

            GLOB_DataTable.Merge(_dtResults);
            GLOB_DataTable.TableName = "tbl";

            _err = "";
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }


            return _dtResults;
        }

        public DataTable GET_provisioning_AGE(string in_com, string in_loc, string in_user, DateTime in_date, string age)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("GET_provisioning_AGE") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GET_provisioning_AGE(in_com, in_loc, in_user, in_date, age);
        }
        public DataTable GET_STATUS_WISE_AGEING(string in_com, string in_loc, string in_user, DateTime in_date)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("GET_STATUS_WISE_AGEING") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GET_STATUS_WISE_AGEING(in_com, in_loc, in_user, in_date);
        }
        public DataTable GET_disposal_summary(string in_com, DateTime from_date, DateTime to_date, string _loc)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("GET_DISPOSAL_SUMMARY") == true) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GET_disposal_summary(in_com, from_date, to_date, _loc);
        }
       // Dulaj 2018/May/31        
        public DataTable getCostingSheetParms(string _blno)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            return _financialDAL.getCostingSheetParms(_blno);
        }

        // Tharindu 2018-03-22 //_inventoryDAL = new InventoryDAL(); //return _inventoryDAL.GetFixAssetLocation_NEW(_com, _pc); 
        public DataTable GetFixAssetLocation_NEW(string _com, string _pc)
        {
            FIXA_InventoryDAL _fIXAInventoryDAL = new FIXA_InventoryDAL();
             return _fIXAInventoryDAL.GetFixAssetLocation_NEW(_com, _pc);   
        }

        public DataTable CheckValidItmInFixAsset(string _itm) 
        {
            FIXA_InventoryDAL _InventoryDAL = new FIXA_InventoryDAL();
            return _InventoryDAL.CheckValidItmInFixAsset(_itm);

            //    _fIXAInventoryDAL = new FIXA_InventoryDAL();   // Tharindu 2018-03-22
         //   return _fIXAInventoryDAL.CheckValidItmInFixAsset(_itmcd);
        }

        // // Tharindu 2018-03-22
        public DataTable GetBinlocationFixasset(string _com, string _pc)
        {
            FIXA_InventoryDAL _fIXAInventoryDAL = new FIXA_InventoryDAL();
            return _fIXAInventoryDAL.GetBinlocationFixasset(_com, _pc);
        }

        //Tharindu 2018-03-22
        public DataTable CheckFixAssetlocAvailability(string _com, string _pc)
        {
            FIXA_InventoryDAL _fIXAInventoryDAL = new FIXA_InventoryDAL();
            return _fIXAInventoryDAL.CheckFixAssetlocAvailability(_com, _pc);
        }

        // Tharindu 2018-08-22
        public DataTable GetFixAssetLoc_NEW(string _com, string _pc)
        {
            _inventoryDAL = new InventoryDAL(); 
            return _inventoryDAL.GetFixAssetLoc_NEW(_com, _pc); 
        }
        
        public DataTable GetFIXA_dtl_WithDepreciation(string _com, string _loc, DateTime in_FromDate, DateTime in_ToDate, string in_item, string in_Brand, string in_cat1, string in_cat2, string in_cat3, string in_cat4, string in_cat5, string in_model)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
           // if (_securityDAL.Is_Report_DR("ItmTransDetList") == true && in_FromDate.Date < DateTime.Now.Date) _inventoryDAL.ConnectionOpen_DR();
            return _inventoryDAL.GetFIXA_dtl_WithDepreciation(_com, _loc, in_FromDate, in_ToDate, in_item, in_Brand, in_cat1, in_cat2, in_cat3, in_cat4, in_cat5, in_model);

        }

        public DataTable GetKIT_Component(string _KIT_itm)
        {
            //Wimal 21/06/2018
            _inventoryDAL = new InventoryDAL();           
            return _inventoryDAL.GetKIT_Component(_KIT_itm);
        }
        // Dulaj 2018/Jun/21        
        public DataTable getCostingParms(string _blno)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            return _financialDAL.getCostingParms(_blno);
        }

        public DataTable GetFixAssetLocation_Other(string _com, string _pc)
        {
            InventoryDAL _InventoryDAL = new InventoryDAL();
            return _InventoryDAL.GetFixAssetLocation_Other(_com, _pc);
        }

        public string GetSalesWithInv_Bal_loc_wise(DateTime _fromDate, DateTime _toDate, string _cat1, string _cat2, string _cat3, string _cat4, string _cat5, string _brand, string _model, string _itemcode, string _pc, string _loc, string _isasatdate, string _user, string _channel, string _itmstatus, Int32 withcost, Int32 withserial, Int32 withdiscount, Int32 status, string isasatdate, out string _err)
        {
            DataTable _dtResults;
            DataTable GLOB_DataTable = new DataTable();
            DataTable dtheader = new DataTable();
            _err = string.Empty;
            string _filePath = string.Empty;
            string _Com = string.Empty;

            string loclist = "";
            DataTable _dtResultsNew = new DataTable();

            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_user);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("SalesWithCur_inv_Bal") == true) _financialDAL.ConnectionOpen_DR();

            // Tharindu 
            if (tmp_user_pc.Rows.Count > 0)
            {
                          
                dtheader = _financialDAL.DelTmpbyid(_user);

                foreach (DataRow drow1 in tmp_user_pc.Rows)
                {
                    loclist += "'" + drow1["tpl_pc"].ToString() + "'" + ",";
                }
                loclist = loclist.Remove(loclist.Length - 1);

                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _Com = drow["tpl_com"].ToString();
                    _dtResults = _financialDAL.GetSalesWithInv_Bal_loc_wise(_fromDate, _toDate, _cat1, _cat2, _cat3, _cat4, _cat5, _brand, _model, _itemcode, drow["tpl_pc"].ToString(), drow["tpl_com"].ToString(), _isasatdate, _user, loclist, _itmstatus, withcost, withserial, withdiscount, status, isasatdate);

                    GLOB_DataTable.Merge(_dtResults);

                }
            }


            if (GLOB_DataTable.Rows.Count > 0)
            {
                string query = @"  SELECT * FROM (SELECT item_code aS ItemCode,item_desc AS ItemDescription,model AS Model,brand AS Brand,
                                cat1 AS Category1,cat1_desc AS Category1Desc,
                                cat2 aS Category2,cat2_desc AS Category2Desc,
                                cat3 aS Category3,cat3_desc AS Category3Desc,
                                NVL(itm_colour,'N/A') as Color,
                                NVL(itm_size,'N/A') AS ItemSize,
                                NVL(sUM(sales_qty),0) aS SalesQty,
                                NVL(sum(inv_bal),0) as Balance,
                                LOC

                                from TMP_sales_inv_bal_abstract@SCMREP where not(sales_qty = 0 AND inv_bal=0) and userid = '" + _user + "' ";



                query += " group by com_desc,item_code,item_desc,model,brand,cat1,cat1_desc,cat2,cat2_desc,cat3,cat3_desc,itm_colour,itm_size,LOC)";
                query += " pivot ( ";
                query += " SUM(SalesQty) AS SalBal,SUM(Balance) as InvBal";
                          query += "      for LOC in ( " + loclist + ")";
                query += ")";
                query += " order  by  ItemCode";

                //Tharindu 
                _dtResultsNew = _financialDAL.GetQuerystringdata(query);
            }
       


            DataTable GP1 = new DataTable();
         
            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c8"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c5"] = _Com; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c5"] = "Pick List Allocation Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c3"] = "Date To :"; dataRow["c4"] = _toDate.ToString("dd/MMM/yyyy");
            dataRow["c6"] = "User : "; dataRow["c7"] = _user + " , Printed on " + System.DateTime.Now;

            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _user, TitleData, _dtResultsNew, out _err);

            if (_dtResultsNew.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }

        public DataTable GetLocationCount(string _pcom, string _pid)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetLocationCount(_pcom, _pid);
        }
        //add by tharanga 2018/08/18
        public DataTable RankAccountTransfferingReport(DateTime fromdate, DateTime todate, string loc, string com)
        {
            _inventoryDAL = new InventoryDAL();
            _securityDAL = new SecurityDAL();
            _financialDAL = new FinancialDAL();
            if (_securityDAL.Is_Report_DR("GET_ACCTRNSLOG") == true) _inventoryDAL.ConnectionOpen_DR();
            return _financialDAL.RankAccountTransfferingReport(fromdate, todate, loc, com);
        }

        public string Get_ABT_sales_W_StkBal(string _com, string _whLoc, DateTime _fromDate, DateTime _toDate, DateTime _asatDate
            , string _cat1, string _cat2, string _cat3, string _cat4, string _cat5, string _model, string _brand, string _itmcode, string _itmStatus,
            string _userID, out string _err)
        {
            //Wimal 28/08/2018 Abstract Sales Stock Bal report
            DataTable _dtResults;
            DataTable GLOB_DataTable = new DataTable();
            DataTable dtheader = new DataTable();
            _err = string.Empty;
            string _filePath = string.Empty;
            string _Com = string.Empty;

            string loclist = "";
            DataTable _dtResultsNew = new DataTable();

            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_userID);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ABT_sales_W_StkBal") == true) _financialDAL.ConnectionOpen_DR();

            if (tmp_user_pc.Rows.Count > 0)
            {
                dtheader = _financialDAL.DelTmpbyid(_userID);
                foreach (DataRow drow1 in tmp_user_pc.Rows)
                {
                    loclist += "'" + drow1["tpl_pc"].ToString() + "'" + ",";
                }
                loclist = loclist.Remove(loclist.Length - 1);               
            }
            _Com = _com;
           // _dtResults = _financialDAL.Get_ABT_sales_W_StkBal(_com, loclist, _fromDate, _toDate, _asatDate, _cat1, _cat2, _cat3, _cat4, _cat5, _model, _brand, _itmcode, _itmStatus, _userID,false);

            if (tmp_user_pc.Rows.Count > 0)
            {

                dtheader = _financialDAL.DelTmpbyid(_userID);

                foreach (DataRow drow1 in tmp_user_pc.Rows)
                {
                    loclist += "'" + drow1["tpl_pc"].ToString() + "'" + ",";
                }
                loclist = loclist.Remove(loclist.Length - 1);

                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _Com = drow["tpl_com"].ToString();
                    //_dtResults = _financialDAL.GetSalesWithInv_Bal_loc_wise(_fromDate, _toDate, _cat1, _cat2, _cat3, _cat4, _cat5, _brand, _model, _itmcode, drow["tpl_pc"].ToString(), drow["tpl_com"].ToString(), _isasatdate, _user, loclist, _itmstatus, withcost, withserial, withdiscount, status, isasatdate);
                    _dtResults = _financialDAL.Get_ABT_sales_W_StkBal(_com, drow["tpl_pc"].ToString(), _fromDate, _toDate, _asatDate, _cat1, _cat2, _cat3, _cat4, _cat5, _model, _brand, _itmcode, _itmStatus, _userID, false);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }
            //update main wh sales
            _dtResults = _financialDAL.Get_ABT_sales_W_StkBal(_com, _whLoc, _fromDate, _toDate, _asatDate, _cat1, _cat2, _cat3, _cat4, _cat5, _model, _brand, _itmcode, _itmStatus, _userID, true);


            if (GLOB_DataTable.Rows.Count > 0)
            {
//                string query = @"  SELECT * FROM (SELECT item_code aS ItemCode,item_desc AS ItemDescription,model AS Model,brand AS Brand,
//                                cat1 AS Category1,cat1_desc AS Category1Desc,
//                                cat2 aS Category2,cat2_desc AS Category2Desc,
//                                cat3 aS Category3,cat3_desc AS Category3Desc,
//                                NVL(itm_colour,'N/A') as Color,
//                                NVL(itm_size,'N/A') AS ItemSize,
//                                NVL(sUM(sales_qty),0) aS SalesQty,
//                                NVL(sum(inv_bal),0) as Balance,
//                                LOC
//
//                                from TMP_sales_inv_bal_abstract@SCMREP where not(sales_qty = 0 AND inv_bal=0) and userid = '" + _user + "' ";



//                query += " group by com_desc,item_code,item_desc,model,brand,cat1,cat1_desc,cat2,cat2_desc,cat3,cat3_desc,itm_colour,itm_size,LOC)";
//                query += " pivot ( ";
//                query += " SUM(SalesQty) AS SalBal,SUM(Balance) as InvBal";
//                query += "      for LOC in ( " + loclist + ")";
//                query += ")";
//                query += " order  by  ItemCode";

                string query = @" select
pc_cd,pc_desc,trimupc,upc,item_code,description,season,department,new_category,new_sub_category,
color,itm_size,sum(unit_cost) unit_cost,sum(sales_price) sales_price,sum(soh) soh,sum(total_cost) total_cost,sum(total_rsp) total_rsp,
sum(mtd_sales_qty) mtd_sales_qty,sum(mtd_gross_sales) mtd_gross_sales,sum(mtd_net_sales) mtd_net_sales,sum(mtd_net_cost) mtd_net_cost,
sum(ytd_sales_qty) ytd_sales_qty,sum(ytd_gross_sales) ytd_gross_sales,sum(ytd_net_sales) ytd_net_sales,sum(ytd_net_cost) ytd_net_cost,sum(total_disc) total_disc,
sum(store_qty) store_qty,sum(store_bal_cost) store_bal_cost,sum(dc_qty) wh_qty,sum(dc_bal_cost) wh_bal_cost
from glb_ABT_stock_w_sale
/*where item_code= mi_cd and user_id= p_userID*/ 
group  by pc_cd,pc_desc,trimupc,upc,item_code,description,season,department,new_category,new_sub_category,color,itm_size
order by pc_cd";
              
                _dtResultsNew = _financialDAL.GetQuerystringdata(query);
            }

            DataTable GP1 = new DataTable();
            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c8"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c5"] = _Com; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c5"] = "Sales with stock balance report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c3"] = "Date To :"; dataRow["c4"] = _toDate.ToString("dd/MMM/yyyy");
            dataRow["c6"] = "User : "; dataRow["c7"] = _userID + " , Printed on " + System.DateTime.Now;

            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _userID, TitleData, _dtResultsNew, out _err);

            if (_dtResults.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }

        public string Get_rejectAccBalance(string _com, string _loc, DateTime _asatDate, string _userID, out string _err)
        {
            //Wimal 17/Sep/2018
            DataTable _dtResults;
            DataTable GLOB_DataTable = new DataTable();
            DataTable dtheader = new DataTable();
            _err = string.Empty;
            string _filePath = string.Empty;
            string _Com = string.Empty;

            string loclist = "";
            DataTable _dtResultsNew = new DataTable();

            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_userID);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ABT_sales_W_StkBal") == true) _financialDAL.ConnectionOpen_DR();

            if (tmp_user_pc.Rows.Count > 0)
            {
                dtheader = _financialDAL.DelTmpbyid(_userID);
                foreach (DataRow drow1 in tmp_user_pc.Rows)
                {
                    loclist += "'" + drow1["tpl_pc"].ToString() + "'" + ",";
                }
                loclist = loclist.Remove(loclist.Length - 1);
            }
            _Com = _com;
            // _dtResults = _financialDAL.Get_ABT_sales_W_StkBal(_com, loclist, _fromDate, _toDate, _asatDate, _cat1, _cat2, _cat3, _cat4, _cat5, _model, _brand, _itmcode, _itmStatus, _userID,false);

            if (tmp_user_pc.Rows.Count > 0)
            {

                dtheader = _financialDAL.DelTmpbyid(_userID);

                foreach (DataRow drow1 in tmp_user_pc.Rows)
                {
                    loclist += "'" + drow1["tpl_pc"].ToString() + "'" + ",";
                }
                loclist = loclist.Remove(loclist.Length - 1);

                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _Com = drow["tpl_com"].ToString();
                    //_dtResults = _financialDAL.GetSalesWithInv_Bal_loc_wise(_fromDate, _toDate, _cat1, _cat2, _cat3, _cat4, _cat5, _brand, _model, _itmcode, drow["tpl_pc"].ToString(), drow["tpl_com"].ToString(), _isasatdate, _user, loclist, _itmstatus, withcost, withserial, withdiscount, status, isasatdate);
                    _dtResults = _financialDAL.Get_rejectAccBalance(_com, drow["tpl_pc"].ToString(), _asatDate, _userID);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            DataTable GP1 = new DataTable();
            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c8"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c5"] = _Com; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c5"] = "Reject Account Balance Details"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow = TitleData.NewRow();
           //dataRow["c1"] = "Date :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c3"] = "AsAt Date :"; dataRow["c4"] = _asatDate.ToString("dd/MMM/yyyy");
            dataRow["c6"] = "User : "; dataRow["c7"] = _userID + " , Printed on " + System.DateTime.Now;

            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _userID, TitleData, GLOB_DataTable, out _err);

            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }

        public DataTable Get_ReducingBalance(string _accNo, DateTime _asAtDate)
        {   // Wimal 27/Sep/2018
            _salesDAL = new SalesDAL();
            return _salesDAL.Get_ReducingBalance(_accNo, _asAtDate);
        }      

        public Int32 processGitData(string comp, string type, DateTime fromDate, DateTime toDate, Int32 seq, string location, int ageSlt1, int ageSlt2, int ageSlt3, int ageSlt4, int ageSlt5, out int _newseq)
        {
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            try
            {
                //DateTime endOfMonth = new DateTime(rundate.Year,
                //                      rundate.Month,
                //                      DateTime.DaysInMonth(rundate.Year,
                //                                           rundate.Month));
                //DateTime frmDate = endOfMonth.AddMonths(-1).AddDays(1);
                DateTime frmDate = fromDate;
                DateTime endOfMonth = toDate;
                List<BMT_INV_BAL_GIT> newGitList = new List<BMT_INV_BAL_GIT>();
                List<BMT_INV_BAL_GIT> git = new List<BMT_INV_BAL_GIT>();
                git = _inventoryDAL.getBalanceGitData(comp, seq, location, toDate);
                if (git.Count > 0)
                {
                    Int32 y = 0;
                    foreach (BMT_INV_BAL_GIT bmtsaledata in git)
                    {
                        y++;
                        Int32 check = _inventoryDAL.updateExistsGitData(bmtsaledata, endOfMonth, frmDate);
                    }
                }

                List<INT_HDR> OutDocs = _inventoryDAL.getAllOutDocuments(frmDate, endOfMonth, comp, location);
                if (OutDocs.Count > 0)
                {
                    Int32 x = 0;
                    foreach (INT_HDR docs in OutDocs)
                    {
                        x++;
                        _inventoryDAL.updateValidatedGitData(docs, comp, seq, endOfMonth, frmDate);
                    }
                }
                Int32 seqs = 0;
                if (comp == "ABL" || comp == "LRP")
                {
                    seqs = seq + 2;
                }
                else
                {
                    seqs = seq + 1;
                }
                Int32 rt = _inventoryDAL.updateAgingDetails(seqs, endOfMonth, "", comp, ageSlt1, ageSlt2, ageSlt3, ageSlt4, ageSlt5);
                _newseq = seqs;
                _inventoryDAL.ConnectionClose();

                return 0;
            }
            catch (Exception ex)
            {
                //_inventoryDAL.TransactionRollback();                
                throw ex;
            }
        }


        public bool valuationProcess(DateTime runStrtDt, DateTime runEndDt, string company, string location, bool mnthEnd, string userid, string adminteam, int ageSlt1, int ageSlt2, int ageSlt3, int ageSlt4, int ageSlt5, out string error, bool unComPath = false)
        {
            error = string.Empty;
            bool err = false;
            try
            {
                _reportDAL = new ReptCommonDAL();
                Int32 seq = 0;
                _reportDAL.ConnectionOpen();
                if (mnthEnd == true)
                {

                    seq = _reportDAL.getNearestBalanceSeqNo(company, runStrtDt.AddDays(-1));
                    //_reportDAL.TransactionCommit();
                }
                //_reportDAL.BeginTransaction();
                Int32 deletetemp = _reportDAL.deleteTempTable(userid, company, seq, "VAL", location);
                //_reportDAL.TransactionCommit();


                //_reportDAL.OpenEMS();
                //_reportDAL.BeginTransaction();
                Int32 direction = -1;




                //else
                //{
                //    runStrtDt = new DateTime(runStrtDt.Year, runStrtDt.Month, 1);
                //    seq = _reportDAL.getNearestBalanceSeqNo(company, runStrtDt.AddDays(-1));

                //}
                if (seq <= 0)
                {
                    error = "No balance details for this month and company.";
                    err = true;
                    // goto A;
                    //_reportDAL.TransactionRollback();
                    _reportDAL.ConnectionClose();
                    return false;
                }
                else
                {

                    DataTable dtLoc = _reportDAL.getCompanyLocations(company, location, adminteam);
                    //_reportDAL.TransactionCommit();
                    //_reportDAL.ConnectionCloseEMS();
                    Int32 l = 0;
                    Int32 ix = 1;
                    foreach (DataRow row in dtLoc.Rows)
                    {
                        string wedret = "";
                        string chnl = "";
                        string newadminteam = "";
                        //Console.WriteLine("Start get location details " + row["ML_LOC_CD"].ToString());
                        DataTable locdet = _reportDAL.getLocationDetails(row["ML_LOC_CD"].ToString(), company);
                        if (locdet.Rows.Count > 0)
                        {
                            chnl = (locdet.Rows[0]["CHNL"] != DBNull.Value) ? locdet.Rows[0]["CHNL"].ToString() : "";
                            newadminteam = (locdet.Rows[0]["ADMINTEAM"] != DBNull.Value) ? locdet.Rows[0]["ADMINTEAM"].ToString() : "";
                            if ((company == "ABL" || company == "LRP") && chnl != "")
                            {

                                if (chnl == "RRC1" || chnl == "RRE2" || chnl == "RSER" || chnl == "MRC1" || chnl == "MRE2" ||
                                    chnl == "DGC" || chnl == "MRC4" || chnl == "VRC1" || chnl == "VRE2" || chnl == "VMC1" ||
                                    chnl == "VME2" || chnl == "VDGC")
                                {
                                    wedret = "RETAIL";
                                }
                                else
                                {
                                    wedret = "WED";
                                }
                            }

                        }
                        //Console.WriteLine("End get location details " + row["ML_LOC_CD"].ToString());
                        ix++;
                        _reportDAL = new ReptCommonDAL();
                        //_reportDAL.OpenEMS();
                        _reportDAL.ConnectionOpen();
                        location = row["ML_LOC_CD"].ToString();

                        //Console.WriteLine("Start location " + location);
                        l++;
                        direction = 0;

                        //runStrtDt = Convert.ToDateTime("01/Aug/2016");
                        Int32 outEff = _reportDAL.updateAllOutDocuments(runStrtDt, runEndDt, company, location, direction, userid);
                        direction = 1;

                        Int32 inEff = _reportDAL.updateAllInDocuments(runStrtDt, runEndDt, company, location, direction, seq, userid);

                        //Console.WriteLine("end add in  doc " + DateTime.Now.ToString());
                        // _reportDAL.TransactionCommit();
                        //_reportDAL.ConnectionCloseEMS();


                        _reportDAL = new ReptCommonDAL();
                        // _reportDAL.OpenEMS();
                        //_reportDAL.BeginTransaction();
                        _reportDAL.ConnectionOpen();
                        bool process = AsAtBalanceProcess(company, seq, userid, location, _reportDAL, unComPath);
                        if (process == true)
                        {
                            //_reportDAL.TransactionCommit();
                            //_reportDAL.ConnectionCloseEMS();
                            error = "Successfully updated.";
                            err = false;
                        }
                        else
                        {
                            error = "Balance Process error.";
                            err = true;
                            //_reportDAL.TransactionRollback();
                            //_reportDAL.ConnectionCloseEMS();
                            //goto A;
                        }
                        _reportDAL = new ReptCommonDAL();
                        // _reportDAL.OpenEMS();
                        //_reportDAL.BeginTransaction();
                        _reportDAL.ConnectionOpen();
                        bool update = updateBalanaceTable(company, seq, userid, location, _reportDAL, runEndDt, mnthEnd, chnl, newadminteam, wedret);
                        //_reportDAL.TransactionCommit();
                        //_reportDAL.ConnectionCloseEMS();


                        _reportDAL = new ReptCommonDAL();
                        //_reportDAL.OpenEMS();
                        //_reportDAL.BeginTransaction();
                        _reportDAL.ConnectionOpen();
                        bool ageDet = updateAgeDetails(seq, company, location, _reportDAL, runStrtDt, runEndDt, chnl, newadminteam, wedret, ageSlt1, ageSlt2, ageSlt3, ageSlt4, ageSlt5, out error);
                        //_reportDAL.TransactionCommit();
                        // _reportDAL.ConnectionCloseEMS();

                        _reportDAL = new ReptCommonDAL();
                        // _reportDAL.OpenEMS();
                        //_reportDAL.BeginTransaction();
                        _reportDAL.ConnectionOpen();
                        bool ageDetGit = updateAgeDetailsGit(seq, company, location, _reportDAL, runStrtDt, runEndDt, chnl, adminteam, wedret, ageSlt1, ageSlt2, ageSlt3, ageSlt4, ageSlt5, out error);
                        //_reportDAL.TransactionCommit();
                        //_reportDAL.ConnectionCloseEMS();

                    }
                    // A:                   
                }

                return true;
                //if (err == false)
                //{
                //    _reportDAL.EmsCommit();
                //    _reportDAL.ConnectionCloseEMS();
                //    return true;

                //}
                //else
                //{
                //    _reportDAL.EmsRollback();
                //    _reportDAL.ConnectionCloseEMS();
                //    return false;
                // }

            }
            catch (Exception ex)
            {
                // _reportDAL.TransactionRollback();
                // _reportDAL.ConnectionClose();
                error = ex.Message.ToString();
                return false;
            }
        }
        private bool updateAgeDetailsGit(int seq, string company, string location, ReptCommonDAL _reportDAL, DateTime asAtDate, DateTime runEndDt, string chnl, string adminteam, string wedret, int ageSlt1, int ageSlt2, int ageSlt3, int ageSlt4, int ageSlt5, out string error)
        {
            try
            {
                if (company == "ABL" || company == "LRP" || company == "SGD" || company == "SGL")
                {
                    seq = seq + 2;
                }
                else
                {
                    seq = seq + 1;
                }

                error = string.Empty;
                decimal age1_qty = 0;
                decimal age1_cost = 0;
                decimal age2_qty = 0;
                decimal age2_cost = 0;
                decimal age3_qty = 0;
                decimal age3_cost = 0;
                decimal age4_qty = 0;
                decimal age4_cost = 0;
                decimal age5_qty = 0;
                decimal age5_cost = 0;
                decimal age6_qty = 0;
                decimal age6_cost = 0;
                string SCM2_STUS = string.Empty;
                string Company = string.Empty;
                decimal ageT_qty = 0;
                decimal ageT_cost = 0;
                decimal tmp_qty = 0;

                DataTable BalDocs = _reportDAL.getBalanaceItemDataGIT(seq, location, company, runEndDt);
                if (BalDocs.Rows.Count > 0)
                {
                    Int32 X = 0;
                    DateTime processdate = runEndDt;
                    foreach (DataRow balance in BalDocs.Rows)
                    {
                        ageT_qty = Convert.ToDecimal(balance["BMI_AGE_QTY_T"].ToString());
                        ageT_cost = Convert.ToDecimal(balance["BMI_AGE_COST_T"].ToString());
                        X++;
                        age1_qty = 0;
                        age1_cost = 0;
                        age2_qty = 0;
                        age2_cost = 0;
                        age3_qty = 0;
                        age3_cost = 0;
                        age4_qty = 0;
                        age4_cost = 0;
                        age5_qty = 0;
                        age5_cost = 0;
                        age6_qty = 0;
                        age6_cost = 0;

                        string docNo = balance["BMI_DOC_NO"].ToString();
                        Int32 itmLine = Convert.ToInt32(balance["BMI_ITEM_LINE"].ToString());
                        Int32 batchLine = (balance["BMI_BATCH_LINE"] != DBNull.Value) ? Convert.ToInt32(balance["BMI_BATCH_LINE"].ToString()) : 0;
                        DataTable newloc = _reportDAL.getLocaionDetails(company, balance["BMI_OTH_LOC"].ToString());
                        if (newloc.Rows.Count > 0)
                        {
                            tmp_qty = ageT_qty;
                            DateTime docDate = new DateTime();

                            if (newloc.Rows[0]["ML_IS_SERIAL"].ToString() == "0" || newloc.Rows[0]["ML_IS_SERIAL"].ToString() == "-1")
                            {
                                try
                                {
                                    docDate = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString());
                                }
                                catch (Exception ex)
                                {
                                    error = "Invalid document date. Doc no :" + balance["BMI_DOC_NO"].ToString();
                                    return false;
                                }

                                Int32 dateDiff = Convert.ToInt32((processdate - docDate).TotalDays);
                                if (company == "AEC")
                                {
                                    if (dateDiff >= 0 && dateDiff <= ageSlt1)
                                    {
                                        age1_qty = ageT_qty;
                                        age1_cost = ageT_cost;
                                    }
                                    else if (dateDiff >= ageSlt1 + 1 && dateDiff <= ageSlt2)
                                    {
                                        age2_qty = ageT_qty;
                                        age2_cost = ageT_cost;
                                    }
                                    else if (dateDiff >= ageSlt2 + 1 && dateDiff <= ageSlt3)
                                    {
                                        age3_qty = ageT_qty;
                                        age3_cost = ageT_cost;
                                    }
                                    else if (dateDiff >= ageSlt3 + 1 && dateDiff <= ageSlt4)
                                    {
                                        age4_qty = ageT_qty;
                                        age4_cost = ageT_cost;
                                    }
                                    else if (dateDiff >= ageSlt4 + 1 && dateDiff <= ageSlt5)
                                    {
                                        age5_qty = ageT_qty;
                                        age5_cost = ageT_cost;
                                    }
                                    else
                                    {
                                        age6_qty = ageT_qty;
                                        age6_cost = ageT_cost;
                                    }
                                }
                                else
                                {
                                    if (dateDiff >= 0 && dateDiff <= ageSlt1)
                                    {
                                        age1_qty = ageT_qty;
                                        age1_cost = ageT_cost;
                                    }
                                    else if (dateDiff >= ageSlt1 + 1 && dateDiff <= ageSlt2)
                                    {
                                        age2_qty = ageT_qty;
                                        age2_cost = ageT_cost;
                                    }
                                    else if (dateDiff >= ageSlt2 + 1 && dateDiff <= ageSlt3)
                                    {
                                        age3_qty = ageT_qty;
                                        age3_cost = ageT_cost;
                                    }
                                    else if (dateDiff >= ageSlt3 + 1 && dateDiff <= ageSlt4)
                                    {
                                        age4_qty = ageT_qty;
                                        age4_cost = ageT_cost;
                                    }
                                    else if (dateDiff >= ageSlt4 + 1 && dateDiff <= ageSlt5)
                                    {
                                        age5_qty = ageT_qty;
                                        age5_cost = ageT_cost;
                                    }
                                    else
                                    {
                                        age6_qty = ageT_qty;
                                        age6_cost = ageT_cost;
                                    }
                                }

                                BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                bal.BMI_SEQ_NO = seq;
                                bal.BMI_COM_CD = company;
                                bal.BMI_LOC_CD = balance["BMI_OTH_LOC"].ToString();
                                bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                bal.BMI_AGE_QTY1 = age1_qty;
                                bal.BMI_AGE_COST1 = age1_cost;
                                bal.BMI_AGE_QTY2 = age2_qty;
                                bal.BMI_AGE_COST2 = age2_cost;
                                bal.BMI_AGE_QTY3 = age3_qty;
                                bal.BMI_AGE_COST3 = age3_cost;
                                bal.BMI_AGE_QTY4 = age4_qty;
                                bal.BMI_AGE_COST4 = age4_cost;
                                bal.BMI_AGE_QTY5 = age5_qty;
                                bal.BMI_AGE_COST5 = age5_cost;
                                bal.BMI_AGE_QTY6 = age6_qty;
                                bal.BMI_AGE_COST6 = age6_cost;
                                bal.BMI_AGE_QTY_T = ageT_qty;
                                bal.BMI_AGE_COST_T = ageT_cost;
                                bal.BMI_CHNL_CD = chnl;
                                bal.BMI_ADMIN_TEAM = adminteam;
                                bal.BMI_GROUP = wedret;
                                bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                bal.BMI_ITEM_LINE = Convert.ToInt32(balance["BMI_ITEM_LINE"].ToString());
                                int eff = _reportDAL.updateAgingCompanyDetails(bal);
                            }
                            else
                            {

                                DataTable serData = _reportDAL.getInrSerBalanceData(docNo, itmLine, batchLine, balance["BMI_ITM_CD"].ToString());
                                if (serData.Rows.Count > 0)
                                {

                                    foreach (DataRow ser in serData.Rows)
                                    {
                                        if (tmp_qty > 0)
                                        {
                                            age1_qty = 0;
                                            age1_cost = 0;
                                            age2_qty = 0;
                                            age2_cost = 0;
                                            age3_qty = 0;
                                            age3_cost = 0;
                                            age4_qty = 0;
                                            age4_cost = 0;
                                            age5_qty = 0;
                                            age5_cost = 0;
                                            age6_qty = 0;
                                            age6_cost = 0;
                                            SCM2_STUS = string.Empty;
                                            Company = string.Empty;
                                            DateTime grnDate = new DateTime();
                                            try
                                            {
                                                grnDate = Convert.ToDateTime(ser["ITS_ORIG_GRNDT"].ToString());
                                            }
                                            catch (Exception ex)
                                            {
                                                error = "Invalid document grn date. Doc no :" + balance["BMI_DOC_NO"].ToString();
                                                return false;
                                            }

                                            Int32 dateDiff = Convert.ToInt32((processdate - grnDate).TotalDays);

                                            if (company == "AEC")
                                            {
                                                if (dateDiff >= 0 && dateDiff <= ageSlt1)
                                                {
                                                    age1_qty = ageT_qty;
                                                    age1_cost = ageT_cost;
                                                }
                                                else if (dateDiff >= ageSlt1 + 1 && dateDiff <= ageSlt2)
                                                {
                                                    age2_qty = ageT_qty;
                                                    age2_cost = ageT_cost;
                                                }
                                                else if (dateDiff >= ageSlt2 + 1 && dateDiff <= ageSlt3)
                                                {
                                                    age3_qty = ageT_qty;
                                                    age3_cost = ageT_cost;
                                                }
                                                else if (dateDiff >= ageSlt3 + 1 && dateDiff <= ageSlt4)
                                                {
                                                    age4_qty = ageT_qty;
                                                    age4_cost = ageT_cost;
                                                }
                                                else if (dateDiff >= ageSlt4 + 1 && dateDiff <= ageSlt5)
                                                {
                                                    age5_qty = ageT_qty;
                                                    age5_cost = ageT_cost;
                                                }
                                                else
                                                {
                                                    age6_qty = ageT_qty;
                                                    age6_cost = ageT_cost;
                                                }
                                            }
                                            else
                                            {
                                                if (dateDiff >= 0 && dateDiff <= ageSlt1)
                                                {
                                                    age1_qty = ageT_qty;
                                                    age1_cost = ageT_cost;
                                                }
                                                else if (dateDiff >= ageSlt1 + 1 && dateDiff <= ageSlt2)
                                                {
                                                    age2_qty = ageT_qty;
                                                    age2_cost = ageT_cost;
                                                }
                                                else if (dateDiff >= ageSlt2 + 1 && dateDiff <= ageSlt3)
                                                {
                                                    age3_qty = ageT_qty;
                                                    age3_cost = ageT_cost;
                                                }
                                                else if (dateDiff >= ageSlt3 + 1 && dateDiff <= ageSlt4)
                                                {
                                                    age4_qty = ageT_qty;
                                                    age4_cost = ageT_cost;
                                                }
                                                else if (dateDiff >= ageSlt4 + 1 && dateDiff <= ageSlt5)
                                                {
                                                    age5_qty = ageT_qty;
                                                    age5_cost = ageT_cost;
                                                }
                                                else
                                                {
                                                    age6_qty = ageT_qty;
                                                    age6_cost = ageT_cost;
                                                }
                                            }

                                            BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                            bal.BMI_SEQ_NO = seq;
                                            bal.BMI_COM_CD = company;
                                            bal.BMI_LOC_CD = balance["BMI_OTH_LOC"].ToString();
                                            bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                            bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                            bal.BMI_AGE_QTY1 = age1_qty;
                                            bal.BMI_AGE_COST1 = age1_cost;
                                            bal.BMI_AGE_QTY2 = age2_qty;
                                            bal.BMI_AGE_COST2 = age2_cost;
                                            bal.BMI_AGE_QTY3 = age3_qty;
                                            bal.BMI_AGE_COST3 = age3_cost;
                                            bal.BMI_AGE_QTY4 = age4_qty;
                                            bal.BMI_AGE_COST4 = age4_cost;
                                            bal.BMI_AGE_QTY5 = age5_qty;
                                            bal.BMI_AGE_COST5 = age5_cost;
                                            bal.BMI_AGE_QTY6 = age6_qty;
                                            bal.BMI_AGE_COST6 = age6_cost;
                                            bal.BMI_AGE_QTY_T = ageT_qty;
                                            bal.BMI_AGE_COST_T = ageT_cost;
                                            bal.BMI_CHNL_CD = chnl;
                                            bal.BMI_ADMIN_TEAM = adminteam;
                                            bal.BMI_GROUP = wedret;
                                            bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                            bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                            bal.BMI_ITEM_LINE = Convert.ToInt32(balance["BMI_ITEM_LINE"].ToString());
                                            int eff = _reportDAL.updateSerAgingCompanyDetails(bal);

                                            tmp_qty = tmp_qty - ageT_qty;
                                        }

                                    }
                                }
                                else
                                {
                                    tmp_qty = ageT_qty;
                                    DataTable serDtItm = _reportDAL.getSerDataByItm(balance["BMI_DOC_NO"].ToString(), balance["BMI_ITM_CD"].ToString());
                                    if (serDtItm.Rows.Count > 0)
                                    {
                                        foreach (DataRow row in serDtItm.Rows)
                                        {
                                            DateTime grnDate = new DateTime();
                                            try
                                            {
                                                grnDate = Convert.ToDateTime(row["ITS_ORIG_GRNDT"].ToString());
                                            }
                                            catch (Exception ex)
                                            {
                                                error = "Invalid document grn date. Doc no :" + balance["BMI_DOC_NO"].ToString();
                                                return false;
                                            }
                                            if (tmp_qty > 0)
                                            {
                                                Int32 DtDiff = Convert.ToInt32((processdate - grnDate).TotalDays);
                                                if (company == "AEC")
                                                {
                                                    if (DtDiff >= 0 && DtDiff <= ageSlt1)
                                                    {
                                                        age1_qty = tmp_qty;
                                                        age1_cost = ageT_cost / ageT_qty * tmp_qty;
                                                    }
                                                    else if (DtDiff >= ageSlt1 + 1 && DtDiff <= ageSlt2)
                                                    {
                                                        age2_qty = tmp_qty;
                                                        age2_cost = ageT_cost / ageT_qty * tmp_qty;
                                                    }
                                                    else if (DtDiff >= ageSlt2 + 1 && DtDiff <= ageSlt3)
                                                    {
                                                        age3_qty = tmp_qty;
                                                        age3_cost = ageT_cost / ageT_qty * tmp_qty;
                                                    }
                                                    else if (DtDiff >= ageSlt3 + 1 && DtDiff <= ageSlt4)
                                                    {
                                                        age4_qty = tmp_qty;
                                                        age4_cost = ageT_cost / ageT_qty * tmp_qty;
                                                    }
                                                    else if (DtDiff >= ageSlt4 + 1 && DtDiff <= ageSlt5)
                                                    {
                                                        age5_qty = tmp_qty;
                                                        age5_cost = ageT_cost / ageT_qty * tmp_qty;
                                                    }
                                                    else
                                                    {
                                                        age6_qty = tmp_qty;
                                                        age6_cost = ageT_cost / ageT_qty * tmp_qty;
                                                    }
                                                }
                                                else
                                                {
                                                    if (DtDiff >= 0 && DtDiff <= ageSlt1)
                                                    {
                                                        age1_qty = tmp_qty;
                                                        age1_cost = ageT_cost / ageT_qty * tmp_qty;
                                                    }
                                                    else if (DtDiff >= ageSlt1 + 1 && DtDiff <= ageSlt2)
                                                    {
                                                        age2_qty = tmp_qty;
                                                        age2_cost = ageT_cost / ageT_qty * tmp_qty;
                                                    }
                                                    else if (DtDiff >= ageSlt2 + 1 && DtDiff <= ageSlt3)
                                                    {
                                                        age3_qty = tmp_qty;
                                                        age3_cost = ageT_cost / ageT_qty * tmp_qty;
                                                    }
                                                    else if (DtDiff >= ageSlt3 + 1 && DtDiff <= ageSlt4)
                                                    {
                                                        age4_qty = tmp_qty;
                                                        age4_cost = ageT_cost / ageT_qty * tmp_qty;
                                                    }
                                                    else if (DtDiff >= ageSlt4 + 1 && DtDiff <= ageSlt5)
                                                    {
                                                        age5_qty = tmp_qty;
                                                        age5_cost = ageT_cost / ageT_qty * tmp_qty;
                                                    }
                                                    else
                                                    {
                                                        age6_qty = tmp_qty;
                                                        age6_cost = ageT_cost / ageT_qty * tmp_qty;
                                                    }
                                                }
                                                BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                                bal.BMI_SEQ_NO = seq;
                                                bal.BMI_COM_CD = company;
                                                bal.BMI_LOC_CD = balance["BMI_OTH_LOC"].ToString();
                                                bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                                bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                                bal.BMI_AGE_QTY1 = age1_qty;
                                                bal.BMI_AGE_COST1 = age1_cost;
                                                bal.BMI_AGE_QTY2 = age2_qty;
                                                bal.BMI_AGE_COST2 = age2_cost;
                                                bal.BMI_AGE_QTY3 = age3_qty;
                                                bal.BMI_AGE_COST3 = age3_cost;
                                                bal.BMI_AGE_QTY4 = age4_qty;
                                                bal.BMI_AGE_COST4 = age4_cost;
                                                bal.BMI_AGE_QTY5 = age5_qty;
                                                bal.BMI_AGE_COST5 = age5_cost;
                                                bal.BMI_AGE_QTY6 = age6_qty;
                                                bal.BMI_AGE_COST6 = age6_cost;
                                                bal.BMI_AGE_QTY_T = ageT_qty;
                                                bal.BMI_AGE_COST_T = ageT_cost;
                                                bal.BMI_CHNL_CD = chnl;
                                                bal.BMI_ADMIN_TEAM = adminteam;
                                                bal.BMI_GROUP = wedret;
                                                bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                                bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                                bal.BMI_ITEM_LINE = Convert.ToInt32(balance["BMI_ITEM_LINE"].ToString());
                                                int eff = _reportDAL.updateSerAgingCompanyDetails(bal);
                                                tmp_qty = tmp_qty - tmp_qty;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        try
                                        {
                                            docDate = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString());
                                        }
                                        catch (Exception ex)
                                        {
                                            error = "Invalid document date. Doc no :" + balance["BMI_DOC_NO"].ToString();
                                            return false;
                                        }

                                        Int32 dateDiff = Convert.ToInt32((processdate - docDate).TotalDays);

                                        if (company == "AEC")
                                        {
                                            if (dateDiff >= 0 && dateDiff <= ageSlt1)
                                            {
                                                age1_qty = ageT_qty;
                                                age1_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= ageSlt1 + 1 && dateDiff <= ageSlt2)
                                            {
                                                age2_qty = ageT_qty;
                                                age2_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= ageSlt2 + 1 && dateDiff <= ageSlt3)
                                            {
                                                age3_qty = ageT_qty;
                                                age3_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= ageSlt3 + 1 && dateDiff <= ageSlt4)
                                            {
                                                age4_qty = ageT_qty;
                                                age4_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= ageSlt4 + 1 && dateDiff <= ageSlt5)
                                            {
                                                age5_qty = ageT_qty;
                                                age5_cost = ageT_cost;
                                            }
                                            else
                                            {
                                                age6_qty = ageT_qty;
                                                age6_cost = ageT_cost;
                                            }
                                        }
                                        else
                                        {
                                            if (dateDiff >= 0 && dateDiff <= ageSlt1)
                                            {
                                                age1_qty = ageT_qty;
                                                age1_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= ageSlt1 + 1 && dateDiff <= ageSlt2)
                                            {
                                                age2_qty = ageT_qty;
                                                age2_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= ageSlt2 + 1 && dateDiff <= ageSlt3)
                                            {
                                                age3_qty = ageT_qty;
                                                age3_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= ageSlt3 + 1 && dateDiff <= ageSlt4)
                                            {
                                                age4_qty = ageT_qty;
                                                age4_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= ageSlt4 + 1 && dateDiff <= ageSlt5)
                                            {
                                                age5_qty = ageT_qty;
                                                age5_cost = ageT_cost;
                                            }
                                            else
                                            {
                                                age6_qty = ageT_qty;
                                                age6_cost = ageT_cost;
                                            }
                                        }
                                        BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                        bal.BMI_SEQ_NO = seq;
                                        bal.BMI_COM_CD = company;
                                        bal.BMI_LOC_CD = balance["BMI_OTH_LOC"].ToString();
                                        bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                        bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                        bal.BMI_AGE_QTY1 = age1_qty;
                                        bal.BMI_AGE_COST1 = age1_cost;
                                        bal.BMI_AGE_QTY2 = age2_qty;
                                        bal.BMI_AGE_COST2 = age2_cost;
                                        bal.BMI_AGE_QTY3 = age3_qty;
                                        bal.BMI_AGE_COST3 = age3_cost;
                                        bal.BMI_AGE_QTY4 = age4_qty;
                                        bal.BMI_AGE_COST4 = age4_cost;
                                        bal.BMI_AGE_QTY5 = age5_qty;
                                        bal.BMI_AGE_COST5 = age5_cost;
                                        bal.BMI_AGE_QTY6 = age6_qty;
                                        bal.BMI_AGE_COST6 = age6_cost;
                                        bal.BMI_AGE_QTY_T = ageT_qty;
                                        bal.BMI_AGE_COST_T = ageT_cost;
                                        bal.BMI_CHNL_CD = chnl;
                                        bal.BMI_ADMIN_TEAM = adminteam;
                                        bal.BMI_GROUP = wedret;
                                        bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                        bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                        bal.BMI_ITEM_LINE = Convert.ToInt32(balance["BMI_ITEM_LINE"].ToString());
                                        int eff = _reportDAL.updateSerAgingCompanyDetailsOnlyCom(bal);
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    error = "No balance data found";
                    return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private bool updateAgeDetails(int seq, string company, string location, ReptCommonDAL _reportDAL, DateTime asAtDate, DateTime runEndDt, string chnl, string adminteam, string wedret, int ageSlt1, int ageSlt2, int ageSlt3, int ageSlt4, int ageSlt5, out string error)
        {
            try
            {
                if (company == "ABL" || company == "LRP" || company == "SGL" || company == "SGD")
                {
                    seq = seq + 2;
                }
                else
                {
                    seq = seq + 1;
                }
                error = string.Empty;
                decimal age1_qty = 0;
                decimal age1_cost = 0;
                decimal age2_qty = 0;
                decimal age2_cost = 0;
                decimal age3_qty = 0;
                decimal age3_cost = 0;
                decimal age4_qty = 0;
                decimal age4_cost = 0;
                decimal age5_qty = 0;
                decimal age5_cost = 0;
                decimal age6_qty = 0;
                decimal age6_cost = 0;
                string SCM2_STUS = string.Empty;
                string Company = string.Empty;
                decimal ageT_qty = 0;
                decimal ageT_cost = 0;
                decimal tmp_qty = 0;

                DataTable BalDocs = _reportDAL.getBalanaceItemData(seq, location, company);
                if (BalDocs.Rows.Count > 0)
                {
                    Int32 X = 0;
                    DateTime processdate = runEndDt; //new DateTime(asAtDate.Year, asAtDate.Month, 1).AddDays(-1);
                    foreach (DataRow balance in BalDocs.Rows)
                    {

                        ageT_qty = Convert.ToDecimal(balance["BMI_AGE_QTY_T"].ToString());
                        ageT_cost = Convert.ToDecimal(balance["BMI_AGE_COST_T"].ToString());
                        X++;
                        age1_qty = 0;
                        age1_cost = 0;
                        age2_qty = 0;
                        age2_cost = 0;
                        age3_qty = 0;
                        age3_cost = 0;
                        age4_qty = 0;
                        age4_cost = 0;
                        age5_qty = 0;
                        age5_cost = 0;
                        age6_qty = 0;
                        age6_cost = 0;

                        string docNo = balance["BMI_DOC_NO"].ToString();
                        Int32 itmLine = Convert.ToInt32(balance["BMI_ITEM_LINE"].ToString());


                        Int32 batchLine = (balance["BMI_BATCH_LINE"] != DBNull.Value) ? Convert.ToInt32(balance["BMI_BATCH_LINE"].ToString()) : 0;
                        DataTable newloc = _reportDAL.getLocaionDetails(company, balance["BMI_LOC_CD"].ToString());
                        if (newloc.Rows.Count > 0)
                        {
                            tmp_qty = ageT_qty;
                            DateTime docDate = new DateTime();

                            if (newloc.Rows[0]["ML_IS_SERIAL"].ToString() == "0")
                            {
                                #region serial not maintain location
                                try
                                {
                                    docDate = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString());
                                }
                                catch (Exception ex)
                                {
                                    error = "Invalid document date. Doc no :" + balance["BMI_DOC_NO"].ToString();
                                    return false;
                                }

                                Int32 dateDiff = Convert.ToInt32((processdate - docDate).TotalDays);
                                if (company == "AEC")
                                {
                                    if (dateDiff >= 0 && dateDiff <= ageSlt1)
                                    {
                                        age1_qty = ageT_qty;
                                        age1_cost = ageT_cost;
                                    }
                                    else if (dateDiff >= ageSlt1 + 1 && dateDiff <= ageSlt2)
                                    {
                                        age2_qty = ageT_qty;
                                        age2_cost = ageT_cost;
                                    }
                                    else if (dateDiff >= ageSlt2 + 1 && dateDiff <= ageSlt3)
                                    {
                                        age3_qty = ageT_qty;
                                        age3_cost = ageT_cost;
                                    }
                                    else if (dateDiff >= ageSlt3 + 1 && dateDiff <= ageSlt4)
                                    {
                                        age4_qty = ageT_qty;
                                        age4_cost = ageT_cost;
                                    }
                                    else if (dateDiff >= ageSlt4 + 1 && dateDiff <= ageSlt5)
                                    {
                                        age5_qty = ageT_qty;
                                        age5_cost = ageT_cost;
                                    }
                                    else
                                    {
                                        age6_qty = ageT_qty;
                                        age6_cost = ageT_cost;
                                    }
                                }
                                else
                                {
                                    if (dateDiff >= 0 && dateDiff <= ageSlt1)
                                    {
                                        age1_qty = ageT_qty;
                                        age1_cost = ageT_cost;
                                    }
                                    else if (dateDiff >= ageSlt1 + 1 && dateDiff <= ageSlt2)
                                    {
                                        age2_qty = ageT_qty;
                                        age2_cost = ageT_cost;
                                    }
                                    else if (dateDiff >= ageSlt2 + 1 && dateDiff <= ageSlt3)
                                    {
                                        age3_qty = ageT_qty;
                                        age3_cost = ageT_cost;
                                    }
                                    else if (dateDiff >= ageSlt3 + 1 && dateDiff <= ageSlt4)
                                    {
                                        age4_qty = ageT_qty;
                                        age4_cost = ageT_cost;
                                    }
                                    else if (dateDiff >= ageSlt4 + 1 && dateDiff <= ageSlt5)
                                    {
                                        age5_qty = ageT_qty;
                                        age5_cost = ageT_cost;
                                    }
                                    else
                                    {
                                        age6_qty = ageT_qty;
                                        age6_cost = ageT_cost;
                                    }

                                }
                                BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                bal.BMI_SEQ_NO = seq;
                                bal.BMI_COM_CD = company;
                                bal.BMI_LOC_CD = balance["BMI_LOC_CD"].ToString();
                                bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                bal.BMI_AGE_QTY1 = age1_qty;
                                bal.BMI_AGE_COST1 = age1_cost;
                                bal.BMI_AGE_QTY2 = age2_qty;
                                bal.BMI_AGE_COST2 = age2_cost;
                                bal.BMI_AGE_QTY3 = age3_qty;
                                bal.BMI_AGE_COST3 = age3_cost;
                                bal.BMI_AGE_QTY4 = age4_qty;
                                bal.BMI_AGE_COST4 = age4_cost;
                                bal.BMI_AGE_QTY5 = age5_qty;
                                bal.BMI_AGE_COST5 = age5_cost;
                                bal.BMI_AGE_QTY6 = age6_qty;
                                bal.BMI_AGE_COST6 = age6_cost;
                                bal.BMI_AGE_QTY_T = ageT_qty;
                                bal.BMI_AGE_COST_T = ageT_cost;
                                bal.BMI_CHNL_CD = chnl;
                                bal.BMI_ADMIN_TEAM = adminteam;
                                bal.BMI_GROUP = wedret;
                                bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                bal.BMI_ITEM_LINE = Convert.ToInt32(balance["BMI_ITEM_LINE"].ToString());
                                int eff = _reportDAL.updateAgingCompanyDetails(bal);
                                #endregion
                            }
                            else
                            {

                                DataTable serData = _reportDAL.getInrSerBalanceData(docNo, itmLine, batchLine, balance["BMI_ITM_CD"].ToString());
                                if (serData.Rows.Count > 0)
                                {

                                    foreach (DataRow ser in serData.Rows)
                                    {
                                        if (tmp_qty > 0)
                                        {
                                            age1_qty = 0;
                                            age1_cost = 0;
                                            age2_qty = 0;
                                            age2_cost = 0;
                                            age3_qty = 0;
                                            age3_cost = 0;
                                            age4_qty = 0;
                                            age4_cost = 0;
                                            age5_qty = 0;
                                            age5_cost = 0;
                                            age6_qty = 0;
                                            age6_cost = 0;
                                            SCM2_STUS = string.Empty;
                                            Company = string.Empty;
                                            DateTime grnDate = new DateTime();
                                            try
                                            {
                                                grnDate = Convert.ToDateTime(ser["ITS_ORIG_GRNDT"].ToString());
                                            }
                                            catch (Exception ex)
                                            {
                                                error = "Invalid document grn date. Doc no :" + balance["BMI_DOC_NO"].ToString();
                                                return false;
                                            }

                                            Int32 dateDiff = Convert.ToInt32((processdate - grnDate).TotalDays);
                                            if (company == "AEC")
                                            {
                                                if (dateDiff >= 0 && dateDiff <= ageSlt1)
                                                {
                                                    age1_qty = ageT_qty;
                                                    age1_cost = ageT_cost;
                                                }
                                                else if (dateDiff >= ageSlt1 + 1 && dateDiff <= ageSlt2)
                                                {
                                                    age2_qty = ageT_qty;
                                                    age2_cost = ageT_cost;
                                                }
                                                else if (dateDiff >= ageSlt2 + 1 && dateDiff <= ageSlt3)
                                                {
                                                    age3_qty = ageT_qty;
                                                    age3_cost = ageT_cost;
                                                }
                                                else if (dateDiff >= ageSlt3 + 1 && dateDiff <= ageSlt4)
                                                {
                                                    age4_qty = ageT_qty;
                                                    age4_cost = ageT_cost;
                                                }
                                                else if (dateDiff >= ageSlt4 + 1 && dateDiff <= ageSlt5)
                                                {
                                                    age5_qty = ageT_qty;
                                                    age5_cost = ageT_cost;
                                                }
                                                else
                                                {
                                                    age6_qty = ageT_qty;
                                                    age6_cost = ageT_cost;
                                                }
                                            }
                                            else
                                            {
                                                if (dateDiff >= 0 && dateDiff <= ageSlt1)
                                                {
                                                    age1_qty = ageT_qty;
                                                    age1_cost = ageT_cost;
                                                }
                                                else if (dateDiff >= ageSlt1 + 1 && dateDiff <= ageSlt2)
                                                {
                                                    age2_qty = ageT_qty;
                                                    age2_cost = ageT_cost;
                                                }
                                                else if (dateDiff >= ageSlt2 + 1 && dateDiff <= ageSlt3)
                                                {
                                                    age3_qty = ageT_qty;
                                                    age3_cost = ageT_cost;
                                                }
                                                else if (dateDiff >= ageSlt3 + 1 && dateDiff <= ageSlt4)
                                                {
                                                    age4_qty = ageT_qty;
                                                    age4_cost = ageT_cost;
                                                }
                                                else if (dateDiff >= ageSlt4 + 1 && dateDiff <= ageSlt5)
                                                {
                                                    age5_qty = ageT_qty;
                                                    age5_cost = ageT_cost;
                                                }
                                                else
                                                {
                                                    age6_qty = ageT_qty;
                                                    age6_cost = ageT_cost;
                                                }
                                            }
                                            BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                            bal.BMI_SEQ_NO = seq;
                                            bal.BMI_COM_CD = company;
                                            bal.BMI_LOC_CD = balance["BMI_LOC_CD"].ToString();
                                            bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                            bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                            bal.BMI_AGE_QTY1 = age1_qty;
                                            bal.BMI_AGE_COST1 = age1_cost;
                                            bal.BMI_AGE_QTY2 = age2_qty;
                                            bal.BMI_AGE_COST2 = age2_cost;
                                            bal.BMI_AGE_QTY3 = age3_qty;
                                            bal.BMI_AGE_COST3 = age3_cost;
                                            bal.BMI_AGE_QTY4 = age4_qty;
                                            bal.BMI_AGE_COST4 = age4_cost;
                                            bal.BMI_AGE_QTY5 = age5_qty;
                                            bal.BMI_AGE_COST5 = age5_cost;
                                            bal.BMI_AGE_QTY6 = age6_qty;
                                            bal.BMI_AGE_COST6 = age6_cost;
                                            bal.BMI_AGE_QTY_T = ageT_qty;
                                            bal.BMI_AGE_COST_T = ageT_cost;
                                            bal.BMI_CHNL_CD = chnl;
                                            bal.BMI_ADMIN_TEAM = adminteam;
                                            bal.BMI_GROUP = wedret;
                                            bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                            bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                            bal.BMI_ITEM_LINE = Convert.ToInt32(balance["BMI_ITEM_LINE"].ToString());
                                            int eff = _reportDAL.updateSerAgingCompanyDetails(bal);

                                            tmp_qty = tmp_qty - ageT_qty;
                                        }
                                    }
                                }
                                else
                                {
                                    DataTable serDtItm = _reportDAL.getSerDataByItm(balance["BMI_DOC_NO"].ToString(), balance["BMI_ITM_CD"].ToString());
                                    if (serDtItm.Rows.Count > 0)
                                    {
                                        foreach (DataRow row in serDtItm.Rows)
                                        {
                                            DateTime grnDate = new DateTime();
                                            try
                                            {
                                                grnDate = Convert.ToDateTime(row["ITS_ORIG_GRNDT"].ToString());
                                            }
                                            catch (Exception ex)
                                            {
                                                error = "Invalid document grn date. Doc no :" + balance["BMI_DOC_NO"].ToString();
                                                return false;
                                            }
                                            if (tmp_qty > 0)
                                            {
                                                Int32 DtDiff = Convert.ToInt32((processdate - grnDate).TotalDays);

                                                if (company == "AEC")
        {
                                                    if (DtDiff >= 0 && DtDiff <= ageSlt1)
                                                    {
                                                        age1_qty = tmp_qty;
                                                        age1_cost = ageT_cost / ageT_qty * tmp_qty;
                                                    }
                                                    else if (DtDiff >= ageSlt1 + 1 && DtDiff <= ageSlt2)
                                                    {
                                                        age2_qty = tmp_qty;
                                                        age2_cost = ageT_cost / ageT_qty * tmp_qty;
                                                    }
                                                    else if (DtDiff >= ageSlt2 + 1 && DtDiff <= ageSlt3)
                                                    {
                                                        age3_qty = tmp_qty;
                                                        age3_cost = ageT_cost / ageT_qty * tmp_qty;
                                                    }
                                                    else if (DtDiff >= ageSlt3 + 1 && DtDiff <= ageSlt4)
                                                    {
                                                        age4_qty = tmp_qty;
                                                        age4_cost = ageT_cost / ageT_qty * tmp_qty;
                                                    }
                                                    else if (DtDiff >= ageSlt4 + 1 && DtDiff <= ageSlt5)
                                                    {
                                                        age5_qty = tmp_qty;
                                                        age5_cost = ageT_cost / ageT_qty * tmp_qty;
                                                    }
                                                    else
                                                    {
                                                        age6_qty = tmp_qty;
                                                        age6_cost = ageT_cost / ageT_qty * tmp_qty;
                                                    }
                                                }
                                                else
                                                {
                                                    if (DtDiff >= 0 && DtDiff <= ageSlt1)
                                                    {
                                                        age1_qty = tmp_qty;
                                                        age1_cost = ageT_cost / ageT_qty * tmp_qty;
                                                    }
                                                    else if (DtDiff >= ageSlt1 + 1 && DtDiff <= ageSlt2)
                                                    {
                                                        age2_qty = tmp_qty;
                                                        age2_cost = ageT_cost / ageT_qty * tmp_qty;
                                                    }
                                                    else if (DtDiff >= ageSlt2 + 1 && DtDiff <= ageSlt3)
                                                    {
                                                        age3_qty = tmp_qty;
                                                        age3_cost = ageT_cost / ageT_qty * tmp_qty;
                                                    }
                                                    else if (DtDiff >= ageSlt3 + 1 && DtDiff <= ageSlt4)
                                                    {
                                                        age4_qty = tmp_qty;
                                                        age4_cost = ageT_cost / ageT_qty * tmp_qty;
                                                    }
                                                    else if (DtDiff >= ageSlt4 + 1 && DtDiff <= ageSlt5)
                                                    {
                                                        age5_qty = tmp_qty;
                                                        age5_cost = ageT_cost / ageT_qty * tmp_qty;
                                                    }
                                                    else
                                                    {
                                                        age6_qty = tmp_qty;
                                                        age6_cost = ageT_cost / ageT_qty * tmp_qty;
                                                    }
                                                }
                                                BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                                bal.BMI_SEQ_NO = seq;
                                                bal.BMI_COM_CD = company;
                                                bal.BMI_LOC_CD = balance["BMI_LOC_CD"].ToString();
                                                bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                                bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                                bal.BMI_AGE_QTY1 = age1_qty;
                                                bal.BMI_AGE_COST1 = age1_cost;
                                                bal.BMI_AGE_QTY2 = age2_qty;
                                                bal.BMI_AGE_COST2 = age2_cost;
                                                bal.BMI_AGE_QTY3 = age3_qty;
                                                bal.BMI_AGE_COST3 = age3_cost;
                                                bal.BMI_AGE_QTY4 = age4_qty;
                                                bal.BMI_AGE_COST4 = age4_cost;
                                                bal.BMI_AGE_QTY5 = age5_qty;
                                                bal.BMI_AGE_COST5 = age5_cost;
                                                bal.BMI_AGE_QTY6 = age6_qty;
                                                bal.BMI_AGE_COST6 = age6_cost;
                                                bal.BMI_AGE_QTY_T = ageT_qty;
                                                bal.BMI_AGE_COST_T = ageT_cost;
                                                bal.BMI_CHNL_CD = chnl;
                                                bal.BMI_ADMIN_TEAM = adminteam;
                                                bal.BMI_GROUP = wedret;
                                                bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                                bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                                bal.BMI_ITEM_LINE = Convert.ToInt32(balance["BMI_ITEM_LINE"].ToString());
                                                int eff = _reportDAL.updateSerAgingCompanyDetails(bal);
                                                tmp_qty = tmp_qty - tmp_qty;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        try
                                        {
                                            docDate = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString());
                                        }
                                        catch (Exception ex)
                                        {
                                            error = "Invalid document date. Doc no :" + balance["BMI_DOC_NO"].ToString();
                                            return false;
                                        }

                                        Int32 dateDiff = Convert.ToInt32((processdate - docDate).TotalDays);
                                        if (company == "AEC")
                                        {
                                            if (dateDiff >= 0 && dateDiff <= ageSlt1)
                                            {
                                                age1_qty = ageT_qty;
                                                age1_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= ageSlt1 + 1 && dateDiff <= ageSlt2)
                                            {
                                                age2_qty = ageT_qty;
                                                age2_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= ageSlt2 + 1 && dateDiff <= ageSlt3)
                                            {
                                                age3_qty = ageT_qty;
                                                age3_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= ageSlt3 + 1 && dateDiff <= ageSlt4)
                                            {
                                                age4_qty = ageT_qty;
                                                age4_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= ageSlt4 + 1 && dateDiff <= ageSlt5)
                                            {
                                                age5_qty = ageT_qty;
                                                age5_cost = ageT_cost;
                                            }
                                            else
                                            {
                                                age6_qty = ageT_qty;
                                                age6_cost = ageT_cost;
                                            }
                                        }
                                        else
                                        {
                                            if (dateDiff >= 0 && dateDiff <= ageSlt1)
                                            {
                                                age1_qty = ageT_qty;
                                                age1_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= ageSlt1 + 1 && dateDiff <= ageSlt2)
                                            {
                                                age2_qty = ageT_qty;
                                                age2_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= ageSlt2 + 1 && dateDiff <= ageSlt3)
                                            {
                                                age3_qty = ageT_qty;
                                                age3_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= ageSlt3 + 1 && dateDiff <= ageSlt4)
                                            {
                                                age4_qty = ageT_qty;
                                                age4_cost = ageT_cost;
                                            }
                                            else if (dateDiff >= ageSlt4 + 1 && dateDiff <= ageSlt5)
                                            {
                                                age5_qty = ageT_qty;
                                                age5_cost = ageT_cost;
                                            }
                                            else
                                            {
                                                age6_qty = ageT_qty;
                                                age6_cost = ageT_cost;
                                            }
                                        }
                                        BMT_INV_BAL_COM bal = new BMT_INV_BAL_COM();
                                        bal.BMI_SEQ_NO = seq;
                                        bal.BMI_COM_CD = company;
                                        bal.BMI_LOC_CD = balance["BMI_LOC_CD"].ToString();
                                        bal.BMI_ITM_CD = balance["BMI_ITM_CD"].ToString();
                                        bal.BMI_ITM_STUS = balance["BMI_ITM_STUS"].ToString();
                                        bal.BMI_AGE_QTY1 = age1_qty;
                                        bal.BMI_AGE_COST1 = age1_cost;
                                        bal.BMI_AGE_QTY2 = age2_qty;
                                        bal.BMI_AGE_COST2 = age2_cost;
                                        bal.BMI_AGE_QTY3 = age3_qty;
                                        bal.BMI_AGE_COST3 = age3_cost;
                                        bal.BMI_AGE_QTY4 = age4_qty;
                                        bal.BMI_AGE_COST4 = age4_cost;
                                        bal.BMI_AGE_QTY5 = age5_qty;
                                        bal.BMI_AGE_COST5 = age5_cost;
                                        bal.BMI_AGE_QTY6 = age6_qty;
                                        bal.BMI_AGE_COST6 = age6_cost;
                                        bal.BMI_AGE_QTY_T = ageT_qty;
                                        bal.BMI_AGE_COST_T = ageT_cost;
                                        bal.BMI_CHNL_CD = chnl;
                                        bal.BMI_ADMIN_TEAM = adminteam;
                                        bal.BMI_GROUP = wedret;
                                        bal.BMI_DOC_NO = balance["BMI_DOC_NO"].ToString();
                                        bal.BMI_DOC_DT = Convert.ToDateTime(balance["BMI_DOC_DT"].ToString()).Date;
                                        bal.BMI_ITEM_LINE = Convert.ToInt32(balance["BMI_ITEM_LINE"].ToString());
                                        int eff = _reportDAL.updateSerAgingCompanyDetailsOnlyCom(bal);
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    error = "No balance data found";
                    return false;
                }
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static decimal FormatDecimal(decimal value, int num)
        {
            if (value == null)
                return 0;

            decimal str = Decimal.Round(value, num);
            return str;
        }

        public string Get_AgeMonitoringDtl(string _com, DateTime _asatDate, DateTime _currentDate, string _cat1, string _cat2, string _cat3, string _model, string _brand, string _itmcode, DataTable _ageslot, string _userID, bool isComAge, bool isAllPC, out string _err)
        {
            //Wimal 01/Oct/2018  - Sanjeewa 2018-10-10
            string _filePath = string.Empty;
            _inventoryDAL = new InventoryDAL();
            _reportDAL = new ReptCommonDAL();
            _securityDAL = new SecurityDAL();
            _financialDAL = new FinancialDAL();
            _generalDAL = new GeneralDAL();

            int ageSlt1 = 0;
            int ageSlt2 = 0;
            int ageSlt3 = 0;
            int ageSlt4 = 0;
            int ageSlt5 = 0;
            int UseAgeSlot = 0;
            int UseBalanceTables = 0;
            int BalSeqNo = 0;
            int DateDiff = 0;

            DataTable dt1;
            DataTable dtReport = new DataTable();
            DataTable dtReport1 = new DataTable();
            DataTable _tabAgeMon = new DataTable();

            TimeSpan _diffDate = _currentDate - _asatDate;
            DateDiff = _diffDate.Days;

            if (_currentDate < _asatDate)
            {
                _err = "As at date cannot be greater than today.";
                return _filePath;
            }

            foreach (DataRow _dr in _ageslot.Rows)
            {
                ageSlt1 = Convert.ToInt16(_dr["rags_slot_l1"]);
                ageSlt2 = Convert.ToInt16(_dr["rags_slot_l2"]);
                ageSlt3 = Convert.ToInt16(_dr["rags_slot_l3"]);
                ageSlt4 = Convert.ToInt16(_dr["rags_slot_l4"]);
                ageSlt5 = Convert.ToInt16(_dr["rags_slot_l5"]);
                UseAgeSlot = Convert.ToInt16(_dr["usenewcat"]);
            }

            if (UseAgeSlot == 0)
            {
                DataTable ageslot = _generalDAL.GET_REF_AGE_SLOT(_com);
                if (ageslot.Rows.Count > 0)
                {
                    foreach (DataRow _dr in ageslot.Rows)
                    {
                        ageSlt1 = Convert.ToInt16(_dr["rags_slot_l1"]);
                        ageSlt2 = Convert.ToInt16(_dr["rags_slot_l2"]);
                        ageSlt3 = Convert.ToInt16(_dr["rags_slot_l3"]);
                        ageSlt4 = Convert.ToInt16(_dr["rags_slot_l4"]);
                        ageSlt5 = Convert.ToInt16(_dr["rags_slot_l5"]);
                    }
                }

            }

            UseBalanceTables = 0;
            DateTime _nextDate = _asatDate.Date.AddDays(-_asatDate.Day + 1);
            DateTime _nextDate1 = _asatDate.Date.AddDays(1);
            if (_nextDate1.Day == 1)
            {
                UseBalanceTables = 1;
            }

            _reportDAL.ConnectionOpen();
            _inventoryDAL.ConnectionOpen();
            int inEff = 0;
            inEff = _inventoryDAL.update_age_slt(_userID, ageSlt1, ageSlt2, ageSlt3, ageSlt4, ageSlt5);

            if (_securityDAL.Is_Report_DR("AgeMonitoringDtl") == true) _inventoryDAL.ConnectionOpen_DR();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_userID);

            if (isAllPC == true)
            {
                DataTable tmp_user_pc1 = tmp_user_pc.DefaultView.ToTable(true, "tpl_com");

                if (tmp_user_pc1.Rows.Count > 0)
                {
                    foreach (DataRow drow in tmp_user_pc1.Rows)
                    {
                    if (isComAge == true)
                    {
                            dt1 = new DataTable();
                            dt1 = _inventoryDAL.getAgeMonCurrAge(drow["tpl_com"].ToString(), "", _cat1, _cat2, _cat3, _itmcode, _brand, _model, UseAgeSlot, _userID);
                            dtReport.Merge(dt1);

                            dt1 = new DataTable();
                            dt1 = _inventoryDAL.getAgeMonCurrAgeGIT(drow["tpl_com"].ToString(), "", _cat1, _cat2, _cat3, _itmcode, _brand, _model, UseAgeSlot, _userID, _currentDate.Date);
                            dtReport.Merge(dt1);
                    }
                    else
                    { 
                            dt1 = new DataTable();
                            dt1 = _inventoryDAL.getAgeMonCurrAgeLoc(drow["tpl_com"].ToString(), "", _cat1, _cat2, _cat3, _itmcode, _brand, _model, UseAgeSlot, _userID);
                            dtReport.Merge(dt1);

                            dt1 = new DataTable();
                            dt1 = _inventoryDAL.getAgeMonCurrAgeGITLoc(drow["tpl_com"].ToString(), "", _cat1, _cat2, _cat3, _itmcode, _brand, _model, UseAgeSlot, _userID, _currentDate.Date);
                            dtReport.Merge(dt1);
                    }

                        if (UseBalanceTables == 1)
                        {
                            DataTable _dtprd = _financialDAL.getPeriodDetails(_asatDate.Date, drow["tpl_com"].ToString());

                            if (_dtprd.Rows.Count > 0)
                            {
                                foreach (DataRow drow1 in _dtprd.Rows)
                                {
                                    BalSeqNo = Convert.ToInt16(drow1["prd_seq_no"]);
                                }
                            }

                            if (isComAge == true)
                            {
                                dt1 = new DataTable();
                                dt1 = _inventoryDAL.getAgeMonAsatAgeSumm(drow["tpl_com"].ToString(), "", _cat1, _cat2, _cat3, _itmcode, _brand, _model, UseAgeSlot, _userID, BalSeqNo);
                                dtReport1.Merge(dt1);
                            }
                            else
                            {
                                dt1 = new DataTable();
                                dt1 = _inventoryDAL.getAgeMonAsatAgeSummLoc(drow["tpl_com"].ToString(), "", _cat1, _cat2, _cat3, _itmcode, _brand, _model, UseAgeSlot, _userID, BalSeqNo);
                                dtReport1.Merge(dt1);

                                dt1 = new DataTable();
                                dt1 = _inventoryDAL.getAgeMonAsatAgeSummLocGit(drow["tpl_com"].ToString(), "", _cat1, _cat2, _cat3, _itmcode, _brand, _model, UseAgeSlot, _userID, BalSeqNo);
                                dtReport1.Merge(dt1);
                            }

                        }
                    else
                    {
                            string userid = _userID;
                            bool mnthEnd = true;
                            bool unComPath = true;
                            string error = string.Empty;
                            Int32 newseq = 0;
                            string type = "1";
                            List<string> companyList = new List<string>();

                            companyList.Add(drow["tpl_com"].ToString());
                            string location = "";

                            DateTime runStrtDt = Convert.ToDateTime(_nextDate.Date);
                            DateTime runEndDt = Convert.ToDateTime(_asatDate.Date);

                            foreach (string com in companyList)
                            {
                                Int32 seq = _inventoryDAL.getNearestSeqNo(com, runStrtDt, runEndDt);

                                Int32 deletetemp = _reportDAL.deleteTempTable(userid, com, seq, "GIT", location);

                                Int32 resp = processGitData(com, type, runStrtDt, runEndDt, seq, location, ageSlt1, ageSlt2, ageSlt3, ageSlt4, ageSlt5, out newseq);

                                bool res = valuationProcess(runStrtDt, runEndDt, com, location, mnthEnd, userid, "", ageSlt1, ageSlt2, ageSlt3, ageSlt4, ageSlt5, out error, unComPath);

                    }                  

                            if (isComAge == true)
                            {
                                dt1 = new DataTable();
                                dt1 = _inventoryDAL.getAgeMonAsatAgeSummBal(drow["tpl_com"].ToString(), "", _cat1, _cat2, _cat3, _itmcode, _brand, _model, UseAgeSlot, _userID, newseq);
                                dtReport1.Merge(dt1);
                }            
                            else
                            {
                                dt1 = new DataTable();
                                dt1 = _inventoryDAL.getAgeMonAsatAgeSummLocBal(drow["tpl_com"].ToString(), "", _cat1, _cat2, _cat3, _itmcode, _brand, _model, UseAgeSlot, _userID, newseq);
                                dtReport1.Merge(dt1);

                                dt1 = new DataTable();
                                dt1 = _inventoryDAL.getAgeMonAsatAgeSummLocGitBal(drow["tpl_com"].ToString(), "", _cat1, _cat2, _cat3, _itmcode, _brand, _model, UseAgeSlot, _userID, newseq);
                                dtReport1.Merge(dt1);
                            }

                        }
                    }
                }
            }
            else
	{

                if (tmp_user_pc.Rows.Count > 0)
                {
                    foreach (DataRow drow in tmp_user_pc.Rows)
                    {
                        if (isComAge == true)
                        {
                            dt1 = new DataTable();
                            dt1 = _inventoryDAL.getAgeMonCurrAge(drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), _cat1, _cat2, _cat3, _itmcode, _brand, _model, UseAgeSlot, _userID);
                            dtReport.Merge(dt1);

                            dt1 = new DataTable();
                            dt1 = _inventoryDAL.getAgeMonCurrAgeGIT(drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), _cat1, _cat2, _cat3, _itmcode, _brand, _model, UseAgeSlot, _userID, _currentDate.Date);
                            dtReport.Merge(dt1);
	}
                        else
                        {
                            dt1 = new DataTable();
                            dt1 = _inventoryDAL.getAgeMonCurrAgeLoc(drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), _cat1, _cat2, _cat3, _itmcode, _brand, _model, UseAgeSlot, _userID);
                            dtReport.Merge(dt1);

                            dt1 = new DataTable();
                            dt1 = _inventoryDAL.getAgeMonCurrAgeGITLoc(drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), _cat1, _cat2, _cat3, _itmcode, _brand, _model, UseAgeSlot, _userID, _currentDate.Date);
                            dtReport.Merge(dt1);
                        }

                        if (UseBalanceTables == 1)
                        {
                            DataTable _dtprd = _financialDAL.getPeriodDetails(_asatDate.Date, drow["tpl_com"].ToString());
                
                            if (_dtprd.Rows.Count > 0)
                            {
                                foreach (DataRow drow1 in _dtprd.Rows)
                                {
                                    BalSeqNo = Convert.ToInt16(drow1["prd_seq_no"]);
                                }
                            }

                            if (isComAge == true)
                            {
                                dt1 = new DataTable();
                                dt1 = _inventoryDAL.getAgeMonAsatAgeSumm(drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), _cat1, _cat2, _cat3, _itmcode, _brand, _model, UseAgeSlot, _userID, BalSeqNo);
                                dtReport1.Merge(dt1);
                            }
                            else
                            {
                                dt1 = new DataTable();
                                dt1 = _inventoryDAL.getAgeMonAsatAgeSummLoc(drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), _cat1, _cat2, _cat3, _itmcode, _brand, _model, UseAgeSlot, _userID, BalSeqNo);
                                dtReport1.Merge(dt1);

                                dt1 = new DataTable();
                                dt1 = _inventoryDAL.getAgeMonAsatAgeSummLocGit(drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), _cat1, _cat2, _cat3, _itmcode, _brand, _model, UseAgeSlot, _userID, BalSeqNo);
                                dtReport1.Merge(dt1);
                            }

                        }
                        else
                        {
                            string userid = _userID;
                            bool mnthEnd = true;
                            bool unComPath = true;
                            string error = string.Empty;
                            Int32 newseq = 0;
                            string type = "1";
                            List<string> companyList = new List<string>();

                            companyList.Add(drow["tpl_com"].ToString());
                            string location = drow["tpl_pc"].ToString();

                            DateTime runStrtDt = Convert.ToDateTime(_nextDate.Date);
                            DateTime runEndDt = Convert.ToDateTime(_asatDate.Date);

                            foreach (string com in companyList)
                            {
                                Int32 seq = _inventoryDAL.getNearestSeqNo(com, runStrtDt, runEndDt);

                                Int32 deletetemp = _reportDAL.deleteTempTable(userid, com, seq, "GIT", location);

                                Int32 resp = processGitData(com, type, runStrtDt, runEndDt, seq, location, ageSlt1, ageSlt2, ageSlt3, ageSlt4, ageSlt5, out newseq);

                                bool res = valuationProcess(runStrtDt, runEndDt, com, location, mnthEnd, userid, "", ageSlt1, ageSlt2, ageSlt3, ageSlt4, ageSlt5, out error, unComPath);

                            }

                            if (isComAge == true)
                            {
                                dt1 = new DataTable();
                                dt1 = _inventoryDAL.getAgeMonAsatAgeSummBal(drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), _cat1, _cat2, _cat3, _itmcode, _brand, _model, UseAgeSlot, _userID, newseq);
                                dtReport1.Merge(dt1);
                            }
                            else
                            {
                                dt1 = new DataTable();
                                dt1 = _inventoryDAL.getAgeMonAsatAgeSummLocBal(drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), _cat1, _cat2, _cat3, _itmcode, _brand, _model, UseAgeSlot, _userID, newseq);
                                dtReport1.Merge(dt1);

                                dt1 = new DataTable();
                                dt1 = _inventoryDAL.getAgeMonAsatAgeSummLocGitBal(drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), _cat1, _cat2, _cat3, _itmcode, _brand, _model, UseAgeSlot, _userID, newseq);
                                dtReport1.Merge(dt1);
                            }
                        }
                    }
                }
            }

            var _tabAgeMontemp_1 = (from x in dtReport.AsEnumerable()
                                   select new
                                   {
                                       Company = x.Field<string>("com_cd"),
                                       Location = x.Field<string>("loc_cd"),
                                       LocationDescription = x.Field<string>("loc_desc"),
                                       Category1 = x.Field<string>("itm_cat1"),
                                       Category1Description = x.Field<string>("itm_cat1_desc"),
                                       Category2 = x.Field<string>("itm_cat2"),
                                       Category2Description = x.Field<string>("itm_cat2_desc"),
                                       Category3 = x.Field<string>("itm_cat3"),
                                       Category3Description = x.Field<string>("itm_cat3_desc"),
                                       ItemCode = x.Field<string>("itm_cd"),
                                       Descriptin = x.Field<string>("itm_desc"),
                                       Model = x.Field<string>("itm_model"),
                                       Brand = x.Field<string>("brand_desc"),
                                       ItemStatus = x.Field<string>("itm_status"),
                                       CurAgeQuantity1 = x.Field<decimal>("sec1_qty"),
                                       CurAgeValue1 = x.Field<decimal>("sec1_val"),
                                       CurAgeQuantity2 = x.Field<decimal>("sec2_qty"),
                                       CurAgeValue2 = x.Field<decimal>("sec2_val"),
                                       CurAgeQuantity3 = x.Field<decimal>("sec3_qty"),
                                       CurAgeValue3 = x.Field<decimal>("sec3_val"),
                                       CurAgeQuantity4 = x.Field<decimal>("sec4_qty"),
                                       CurAgeValue4 = x.Field<decimal>("sec4_val"),
                                       CurAgeQuantity5 = x.Field<decimal>("sec5_qty"),
                                       CurAgeValue5 = x.Field<decimal>("sec5_val"),
                                       CurAgeQuantity6 = x.Field<decimal>("sec6_qty"),
                                       CurAgeValue6 = x.Field<decimal>("sec6_val"),
                                       PreAgeQuantity1 = x.Field<decimal>("sec7_qty"),
                                       PreAgeValue1 = x.Field<decimal>("sec7_val"),
                                       PreAgeQuantity2 = x.Field<decimal>("sec8_qty"),
                                       PreAgeValue2 = x.Field<decimal>("sec8_val"),
                                       PreAgeQuantity3 = x.Field<decimal>("sec9_qty"),
                                       PreAgeValue3 = x.Field<decimal>("sec9_val"),
                                       PreAgeQuantity4 = x.Field<decimal>("sec10_qty"),
                                       PreAgeValue4 = x.Field<decimal>("sec10_val"),
                                       PreAgeQuantity5 = x.Field<decimal>("sec11_qty"),
                                       PreAgeValue5 = x.Field<decimal>("sec11_val"),
                                       PreAgeQuantity6 = x.Field<decimal>("sec12_qty"),
                                       PreAgeValue6 = x.Field<decimal>("sec12_val")
                                   }
                                          ).ToList();

            var _tabAgeMontemp_2 = (from y in dtReport1.AsEnumerable()
                                   select new
                                   {
                                       Company = y.Field<string>("com_cd"),
                                       Location = y.Field<string>("loc_cd"),
                                       LocationDescription = y.Field<string>("loc_desc"),
                                       Category1 = y.Field<string>("itm_cat1"),
                                       Category1Description = y.Field<string>("itm_cat1_desc"),
                                       Category2 = y.Field<string>("itm_cat2"),
                                       Category2Description = y.Field<string>("itm_cat2_desc"),
                                       Category3 = y.Field<string>("itm_cat3"),
                                       Category3Description = y.Field<string>("itm_cat3_desc"),
                                       ItemCode = y.Field<string>("itm_cd"),
                                       Descriptin = y.Field<string>("itm_desc"),
                                       Model = y.Field<string>("itm_model"),
                                       Brand = y.Field<string>("brand_desc"),
                                       ItemStatus = y.Field<string>("itm_status"),
                                       CurAgeQuantity1 = y.Field<decimal>("sec7_qty"),
                                       CurAgeValue1 = y.Field<decimal>("sec7_val"),
                                       CurAgeQuantity2 = y.Field<decimal>("sec8_qty"),
                                       CurAgeValue2 = y.Field<decimal>("sec8_val"),
                                       CurAgeQuantity3 = y.Field<decimal>("sec9_qty"),
                                       CurAgeValue3 = y.Field<decimal>("sec9_val"),
                                       CurAgeQuantity4 = y.Field<decimal>("sec10_qty"),
                                       CurAgeValue4 = y.Field<decimal>("sec10_val"),
                                       CurAgeQuantity5 = y.Field<decimal>("sec11_qty"),
                                       CurAgeValue5 = y.Field<decimal>("sec11_val"),
                                       CurAgeQuantity6 = y.Field<decimal>("sec12_qty"),
                                       CurAgeValue6 = y.Field<decimal>("sec12_val"),
                                       PreAgeQuantity1 = y.Field<decimal>("sec1_qty"),
                                       PreAgeValue1 = y.Field<decimal>("sec1_val"),
                                       PreAgeQuantity2 = y.Field<decimal>("sec2_qty"),
                                       PreAgeValue2 = y.Field<decimal>("sec2_val"),
                                       PreAgeQuantity3 = y.Field<decimal>("sec3_qty"),
                                       PreAgeValue3 = y.Field<decimal>("sec3_val"),
                                       PreAgeQuantity4 = y.Field<decimal>("sec4_qty"),
                                       PreAgeValue4 = y.Field<decimal>("sec4_val"),
                                       PreAgeQuantity5 = y.Field<decimal>("sec5_qty"),
                                       PreAgeValue5 = y.Field<decimal>("sec5_val"),
                                       PreAgeQuantity6 = y.Field<decimal>("sec6_qty"),
                                       PreAgeValue6 = y.Field<decimal>("sec6_val")
                                   }
                                          ).ToList();

            var _tabAgeMontemp = _tabAgeMontemp_1.Concat(_tabAgeMontemp_2)                                    
                                    .ToList();

            //var _tabAgeMontemp = _tabAgeMontemp_1.AddRange(_tabAgeMontemp_2);

            //var _tabAgeMontemp = (from x in dtReport.AsEnumerable()
            //                      join y in dtReport1.AsEnumerable()
            //                      on new
            //                      {
            //                          A = x.Field<string>("com_cd"),
            //                          B = x.Field<string>("loc_cd"),
            //                          C = x.Field<string>("itm_cd"),
            //                          D = x.Field<string>("itm_status")
            //                      }
            //                      equals new
            //                      {
            //                          A = y.Field<string>("com_cd"),
            //                          B = y.Field<string>("loc_cd"),
            //                          C = y.Field<string>("itm_cd"),
            //                          D = y.Field<string>("itm_status")
            //                      }
            //                      select new
            //                      {
            //                          Company = x.Field<string>("com_cd"),
            //                          Location = x.Field<string>("loc_cd"),
            //                          LocationDescription = x.Field<string>("loc_desc"),
            //                          Category1 = x.Field<string>("itm_cat1"),
            //                          Category1Description = x.Field<string>("itm_cat1_desc"),
            //                          Category2 = x.Field<string>("itm_cat2"),
            //                          Category2Description = x.Field<string>("itm_cat2_desc"),
            //                          Category3 = x.Field<string>("itm_cat3"),
            //                          Category3Description = x.Field<string>("itm_cat3_desc"),
            //                          ItemCode = x.Field<string>("itm_cd"),
            //                          Descriptin = x.Field<string>("itm_desc"),
            //                          Model = x.Field<string>("itm_model"),
            //                          Brand = x.Field<string>("brand_desc"),
            //                          ItemStatus = x.Field<string>("itm_status"),
            //                          CurAgeQuantity1 = x.Field<decimal>("sec1_qty"),
            //                          CurAgeValue1 = x.Field<decimal>("sec1_val"),
            //                          CurAgeQuantity2 = x.Field<decimal>("sec2_qty"),
            //                          CurAgeValue2 = x.Field<decimal>("sec2_val"),
            //                          CurAgeQuantity3 = x.Field<decimal>("sec3_qty"),
            //                          CurAgeValue3 = x.Field<decimal>("sec3_val"),
            //                          CurAgeQuantity4 = x.Field<decimal>("sec4_qty"),
            //                          CurAgeValue4 = x.Field<decimal>("sec4_val"),
            //                          CurAgeQuantity5 = x.Field<decimal>("sec5_qty"),
            //                          CurAgeValue5 = x.Field<decimal>("sec5_val"),
            //                          CurAgeQuantity6 = x.Field<decimal>("sec6_qty"),
            //                          CurAgeValue6 = x.Field<decimal>("sec6_val"),
            //                          PreAgeQuantity1 = y.Field<decimal>("sec1_qty"),
            //                          PreAgeValue1 = y.Field<decimal>("sec1_val"),
            //                          PreAgeQuantity2 = y.Field<decimal>("sec2_qty"),
            //                          PreAgeValue2 = y.Field<decimal>("sec2_val"),
            //                          PreAgeQuantity3 = y.Field<decimal>("sec3_qty"),
            //                          PreAgeValue3 = y.Field<decimal>("sec3_val"),
            //                          PreAgeQuantity4 = y.Field<decimal>("sec4_qty"),
            //                          PreAgeValue4 = y.Field<decimal>("sec4_val"),
            //                          PreAgeQuantity5 = y.Field<decimal>("sec5_qty"),
            //                          PreAgeValue5 = y.Field<decimal>("sec5_val"),
            //                          PreAgeQuantity6 = y.Field<decimal>("sec6_qty"),
            //                          PreAgeValue6 = y.Field<decimal>("sec6_val")
            //                      }
            //                              ).ToList();


            //DataTable _tabAgeMon1 = _tabAgeMontemp.ToDataTable();
            //DataTable _tabAgeMon3 = LINQResultToDataTable(_tabAgeMontemp);

            //var _tabAgeMontemp1 =_tabAgeMon1.AsEnumerable()
            var _tabAgeMontemp1 = _tabAgeMontemp.GroupBy(grp => new
            {
                //Category1 = grp.Field<string>("Category1").ToString(),
                //Category1Description = grp.Field<string>("Category1Description").ToString() 
                Category1 = grp.Category1,
                Category1Description = grp.Category1Description
            }).Select(g => new
            {
                g.Key.Category1,
                g.Key.Category1Description,
                PreAgeValue1 = FormatDecimal(g.Sum(x => x.PreAgeValue1), 2),
                CurAgeValue1 = FormatDecimal(g.Sum(x => x.CurAgeValue1), 2),
                Variance1 = FormatDecimal(g.Sum(x => x.PreAgeValue1) == 0 ? 0 : (((g.Sum(x => x.CurAgeValue1) - g.Sum(x => x.PreAgeValue1)) / g.Sum(x => x.PreAgeValue1)) * 100), 2),
                PreAgeQty1 = FormatDecimal(g.Sum(x => x.PreAgeQuantity1), 2),
                CurAgeQty1 = FormatDecimal(g.Sum(x => x.CurAgeQuantity1), 2),
                VarianceQty1 = FormatDecimal(g.Sum(x => x.PreAgeQuantity1) == 0 ? 0 : (((g.Sum(x => x.CurAgeQuantity1) - g.Sum(x => x.PreAgeQuantity1)) / g.Sum(x => x.PreAgeQuantity1)) * 100), 2),
                PreAgeValue2 = FormatDecimal(g.Sum(x => x.PreAgeValue2), 2),
                CurAgeValue2 = FormatDecimal(g.Sum(x => x.CurAgeValue2), 2),
                Variance2 = FormatDecimal(g.Sum(x => x.PreAgeValue2) == 0 ? 0 : (((g.Sum(x => x.CurAgeValue2) - g.Sum(x => x.PreAgeValue2)) / g.Sum(x => x.PreAgeValue2)) * 100), 2),
                PreAgeQty2 = FormatDecimal(g.Sum(x => x.PreAgeQuantity2), 2),
                CurAgeQty2 = FormatDecimal(g.Sum(x => x.CurAgeQuantity2), 2),
                VarianceQty2 = FormatDecimal(g.Sum(x => x.PreAgeQuantity2) == 0 ? 0 : (((g.Sum(x => x.CurAgeQuantity2) - g.Sum(x => x.PreAgeQuantity2)) / g.Sum(x => x.PreAgeQuantity2)) * 100), 2),
                PreAgeValue3 = FormatDecimal(g.Sum(x => x.PreAgeValue3), 2),
                CurAgeValue3 = FormatDecimal(g.Sum(x => x.CurAgeValue3), 2),
                Variance3 = FormatDecimal(g.Sum(x => x.PreAgeValue3) == 0 ? 0 : (((g.Sum(x => x.CurAgeValue3) - g.Sum(x => x.PreAgeValue3)) / g.Sum(x => x.PreAgeValue3)) * 100), 2),
                PreAgeQty3 = FormatDecimal(g.Sum(x => x.PreAgeQuantity3), 2),
                CurAgeQty3 = FormatDecimal(g.Sum(x => x.CurAgeQuantity3), 2),
                VarianceQty3 = FormatDecimal(g.Sum(x => x.PreAgeQuantity3) == 0 ? 0 : (((g.Sum(x => x.CurAgeQuantity3) - g.Sum(x => x.PreAgeQuantity3)) / g.Sum(x => x.PreAgeQuantity3)) * 100), 2),
                PreAgeValue4 = FormatDecimal(g.Sum(x => x.PreAgeValue4), 2),
                CurAgeValue4 = FormatDecimal(g.Sum(x => x.CurAgeValue4), 2),
                Variance4 = FormatDecimal(g.Sum(x => x.PreAgeValue4) == 0 ? 0 : (((g.Sum(x => x.CurAgeValue4) - g.Sum(x => x.PreAgeValue4)) / g.Sum(x => x.PreAgeValue4)) * 100), 2),
                PreAgeQty4 = FormatDecimal(g.Sum(x => x.PreAgeQuantity4), 2),
                CurAgeQty4 = FormatDecimal(g.Sum(x => x.CurAgeQuantity4), 2),
                VarianceQty4 = FormatDecimal(g.Sum(x => x.PreAgeQuantity4) == 0 ? 0 : (((g.Sum(x => x.CurAgeQuantity4) - g.Sum(x => x.PreAgeQuantity4)) / g.Sum(x => x.PreAgeQuantity4)) * 100), 2),
                PreAgeValue5 = FormatDecimal(g.Sum(x => x.PreAgeValue5), 2),
                CurAgeValue5 = FormatDecimal(g.Sum(x => x.CurAgeValue5), 2),
                Variance5 = FormatDecimal(g.Sum(x => x.PreAgeValue5) == 0 ? 0 : (((g.Sum(x => x.CurAgeValue5) - g.Sum(x => x.PreAgeValue5)) / g.Sum(x => x.PreAgeValue5)) * 100), 2),
                PreAgeQty5 = FormatDecimal(g.Sum(x => x.PreAgeQuantity5), 2),
                CurAgeQty5 = FormatDecimal(g.Sum(x => x.CurAgeQuantity5), 2),
                VarianceQty5 = FormatDecimal(g.Sum(x => x.PreAgeQuantity5) == 0 ? 0 : (((g.Sum(x => x.CurAgeQuantity5) - g.Sum(x => x.PreAgeQuantity5)) / g.Sum(x => x.PreAgeQuantity5)) * 100), 2),
                PreAgeValue6 = FormatDecimal(g.Sum(x => x.PreAgeValue6), 2),
                CurAgeValue6 = FormatDecimal(g.Sum(x => x.CurAgeValue6), 2),
                Variance6 = FormatDecimal(g.Sum(x => x.PreAgeValue6) == 0 ? 0 : (((g.Sum(x => x.CurAgeValue6) - g.Sum(x => x.PreAgeValue6)) / g.Sum(x => x.PreAgeValue6)) * 100), 2),
                PreAgeQty6 = FormatDecimal(g.Sum(x => x.PreAgeQuantity6), 2),
                CurAgeQty6 = FormatDecimal(g.Sum(x => x.CurAgeQuantity6), 2),
                VarianceQty6 = FormatDecimal(g.Sum(x => x.PreAgeQuantity6) == 0 ? 0 : (((g.Sum(x => x.CurAgeQuantity6) - g.Sum(x => x.PreAgeQuantity6)) / g.Sum(x => x.PreAgeQuantity6)) * 100), 2)
            }
                              );

            DataTable _tabAgeMon2 = LINQResultToDataTable(_tabAgeMontemp1);

            for (int index = 0; index < _tabAgeMon2.Columns.Count; index++)
            {
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "Category1" ? "Category 1" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "Category1Description" ? "Category 1 Description" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "PreAgeValue1" ? "< " + ageSlt1 + " (C-" + DateDiff + ")" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "CurAgeValue1" ? "< " + ageSlt1 + " (C)" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "Variance1" ? "% Variance 1" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "PreAgeQty1" ? "Qty < " + ageSlt1 + " (C-" + DateDiff + ")" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "CurAgeQty1" ? "Qty < " + ageSlt1 + " (C)" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "VarianceQty1" ? "Qty % Variance 1" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "PreAgeValue2" ? "< " + ageSlt2 + " (C-" + DateDiff + ")" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "CurAgeValue2" ? "< " + ageSlt2 + " (C)" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "Variance2" ? "% Variance 2" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "PreAgeQty2" ? "Qty < " + ageSlt2 + " (C-" + DateDiff + ")" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "CurAgeQty2" ? "Qty < " + ageSlt2 + " (C)" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "VarianceQty2" ? "Qty % Variance 2" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "PreAgeValue3" ? "< " + ageSlt3 + " (C-" + DateDiff + ")" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "CurAgeValue3" ? "< " + ageSlt3 + " (C)" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "Variance3" ? "% Variance 3" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "PreAgeQty3" ? "Qty < " + ageSlt3 + " (C-" + DateDiff + ")" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "CurAgeQty3" ? "Qty < " + ageSlt3 + " (C)" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "VarianceQty3" ? "Qty % Variance 3" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "PreAgeValue4" ? "< " + ageSlt4 + " (C-" + DateDiff + ")" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "CurAgeValue4" ? "< " + ageSlt4 + " (C)" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "Variance4" ? "% Variance 4" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "PreAgeQty4" ? "Qty < " + ageSlt4 + " (C-" + DateDiff + ")" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "CurAgeQty4" ? "Qty < " + ageSlt4 + " (C)" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "VarianceQty4" ? "Qty % Variance 4" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "PreAgeValue5" ? "< " + ageSlt5 + " (C-" + DateDiff + ")" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "CurAgeValue5" ? "< " + ageSlt5 + " (C)" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "Variance5" ? "% Variance 5" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "PreAgeQty5" ? "Qty < " + ageSlt5 + " (C-" + DateDiff + ")" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "CurAgeQty5" ? "Qty < " + ageSlt5 + " (C)" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "VarianceQty5" ? "Qty % Variance 5" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "PreAgeValue6" ? "> " + ageSlt5 + " (C-" + DateDiff + ")" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "CurAgeValue6" ? "> " + ageSlt5 + " (C)" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "Variance6" ? "% Variance 6" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "PreAgeQty6" ? "Qty > " + ageSlt5 + " (C-" + DateDiff + ")" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "CurAgeQty6" ? "Qty > " + ageSlt5 + " (C)" : _tabAgeMon2.Columns[index].ColumnName;
                _tabAgeMon2.Columns[index].ColumnName = _tabAgeMon2.Columns[index].ColumnName == "VarianceQty6" ? "Qty % Variance 6" : _tabAgeMon2.Columns[index].ColumnName;
            }

            _tabAgeMon.Merge(_tabAgeMon2);
            _tabAgeMon.TableName = "tempage";

            _tabAgeMon.TableName = "XXXX";

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c8"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c5"] = _com; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c5"] = "Age Monitoring Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "As At Date :"; dataRow["c2"] = _asatDate.ToString("dd/MMM/yyyy");
            dataRow["c3"] = "Current Date :"; dataRow["c4"] = DateTime.Now.Date.ToString("dd/MMM/yyyy");
            dataRow["c6"] = "User : "; dataRow["c7"] = _userID + " , Printed on " + System.DateTime.Now;

            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _userID, TitleData, _tabAgeMon, out _err);

            if (_tabAgeMon.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }

        public string getSMIDetailsExcel(DateTime _fromDate, DateTime _toDate, string _Com, string _User,
            string _cat1, string _cat2, string _cat3, string _cat4, string _cat5, string _brand, string _model, string _itemcode,
            decimal FromSQty, decimal ToSQty, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults = new DataTable();
            _salesDAL = new SalesDAL();
            _reportDAL = new ReptCommonDAL();
            _inventoryDAL = new InventoryDAL();
            DataTable GLOB_DataTable = new DataTable();

            //DataTable dt = new DataTable();
            ////dt.Columns.Add("PC", typeof(string));
            //dt.Columns.Add("item_code", typeof(string));
            //dt.Columns.Add("item_description", typeof(string));
            //dt.Columns.Add("Sale_qty", typeof(decimal));           
            // dt.Columns.Add("RegisteredAt", typeof(string));//not a typo, sadly.

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("SMI_DET") == true) _salesDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    // _dtResults = _salesDAL.GetPLDetails(_fromDate, _toDate, drow["tpl_pc"].ToString(), drow["tpl_com"].ToString());
                    // _dtResults = _salesDAL.getSMIDetailsToDate(_Com, _fromDate, _toDate);
                    //DashboardBLL aa=new DashboardBLL();
                    DataTable dt = _inventoryDAL.getSlowMovingDetl(_Com, drow["tpl_pc"].ToString(), _fromDate, _toDate, _cat1, _cat2, _cat3, _cat4, _cat5, _brand, _model, _itemcode, FromSQty, ToSQty);
                    //foreach (var a in bb)
                    //{
                    //    if ((a.smi_sold_qty >= FromSQty) &&  (a.smi_sold_qty <= ToSQty))
                    //    {
                    //    DataRow row = dt.NewRow();
                    //    //dt.Columns.Add("PC", typeof(string));
                    //    //row["PC"] =a.smi_do_location;                             
                    //    row["item_code"] = a.smi_itm;
                    //    row["item_description"] = a.smi_des;
                    //    row["Sale_qty"] = a.smi_sold_qty;
                    //   // row["RegisteredAt"] = cust.RegisteredAt.ToShortDateString();
                    //    //... lot more properties
                    //    dt.Rows.Add(row);   
                    //    }
                    //}
                    GLOB_DataTable.Merge(dt);
                }
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c3"] = _Com; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c3"] = "Slow Moving item report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c2"] = "User : "; dataRow["c3"] = _User + " , Printed on " + System.DateTime.Now; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _toDate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Sale Qty From :"; dataRow["c2"] = FromSQty;
            dataRow["c4"] = "Sale Qty To :"; dataRow["c5"] = ToSQty;
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, TitleData, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public string get_Inv_WSelPrice(string _com, string _comDesc, string _whLoc, DateTime _fromDate, DateTime _toDate, DateTime _asatDate
     , string _cat1, string _cat2, string _cat3, string _cat4, string _cat5, string _model, string _brand, string _itmcode, string _itmStatus,
     string _userID, string _pb, string _pb_lvl, out string _err)
        {
            //Wimal 28/08/2018 Inventory With Selling price 
            DataTable _dtResults;
            DataTable GLOB_DataTable = new DataTable();
            DataTable dtheader = new DataTable();
            _err = string.Empty;
            string _filePath = string.Empty;
            string _Com = string.Empty;

            string loclist = "";
            DataTable _dtResultsNew = new DataTable();

            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_userID);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("Inv_with_price") == true) _financialDAL.ConnectionOpen_DR();

            if (tmp_user_pc.Rows.Count > 0)
            {
                dtheader = _financialDAL.DelTmpbyid(_userID);
                foreach (DataRow drow1 in tmp_user_pc.Rows)
                {
                    loclist += "'" + drow1["tpl_pc"].ToString() + "'" + ",";
                }
                loclist = loclist.Remove(loclist.Length - 1);
            }
            _Com = _com;

            if (tmp_user_pc.Rows.Count > 0)
            {

                dtheader = _financialDAL.DelTmpbyid(_userID);

                foreach (DataRow drow1 in tmp_user_pc.Rows)
                {
                    loclist += "'" + drow1["tpl_pc"].ToString() + "'" + ",";
                }
                loclist = loclist.Remove(loclist.Length - 1);

                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _Com = drow["tpl_com"].ToString();
                    _dtResults = _financialDAL.get_Inv_WSelPrice(_com, drow["tpl_pc"].ToString(), _fromDate, _toDate, _fromDate.AddDays(-1), _cat1, _cat2, _cat3, _cat4, _cat5, _model, _brand, _itmcode, _itmStatus, _userID, _pb, _pb_lvl);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            DataTable GP1 = new DataTable();
            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c8"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c5"] = _comDesc; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c5"] = "Selling price with current inventory Balance (IV7)"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Asat Date :"; dataRow["c2"] = _asatDate.ToString("dd/MMM/yyyy");
            // dataRow["c3"] = "Date To :"; dataRow["c4"] = _toDate.ToString("dd/MMM/yyyy");
            dataRow["c6"] = "User : "; dataRow["c7"] = _userID + " , Printed on " + System.DateTime.Now;

            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _userID, TitleData, GLOB_DataTable, out _err);

            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }

        public string get_InvRoll_Fwd(string _com, string _whLoc, DateTime _fromDate, DateTime _toDate, DateTime _asatDate
          , string _cat1, string _cat2, string _cat3, string _cat4, string _cat5, string _model, string _brand, string _itmcode, string _itmStatus,
          string _userID, out string _err)
        {
            //Wimal 28/08/2018 Inventory Roll forward 
            DataTable _dtResults;
            DataTable GLOB_DataTable = new DataTable();
            DataTable dtheader = new DataTable();
            _err = string.Empty;
            string _filePath = string.Empty;
            string _Com = string.Empty;

            string loclist = "";
            DataTable _dtResultsNew = new DataTable();

            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_userID);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("Inv_Roll_FWD") == true) _financialDAL.ConnectionOpen_DR();

            if (tmp_user_pc.Rows.Count > 0)
            {
                dtheader = _financialDAL.DelTmpbyid(_userID);
                foreach (DataRow drow1 in tmp_user_pc.Rows)
                {
                    loclist += "'" + drow1["tpl_pc"].ToString() + "'" + ",";
                }
                loclist = loclist.Remove(loclist.Length - 1);
            }
            _Com = _com;

            if (tmp_user_pc.Rows.Count > 0)
            {

                dtheader = _financialDAL.DelTmpbyid(_userID);

                foreach (DataRow drow1 in tmp_user_pc.Rows)
                {
                    loclist += "'" + drow1["tpl_pc"].ToString() + "'" + ",";
                }
                loclist = loclist.Remove(loclist.Length - 1);

                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _Com = drow["tpl_com"].ToString();
                    _dtResults = _financialDAL.get_InvRoll_Fwd(_com, drow["tpl_pc"].ToString(), _fromDate, _toDate, _fromDate.AddDays(-1), _cat1, _cat2, _cat3, _cat4, _cat5, _model, _brand, _itmcode, _itmStatus, _userID, false);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            DataTable GP1 = new DataTable();
            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c8"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c5"] = _Com; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c5"] = "Inventory Roll forward (IV6)"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From:"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c3"] = "Date To :"; dataRow["c4"] = _toDate.ToString("dd/MMM/yyyy");
            dataRow["c6"] = "User : "; dataRow["c7"] = _userID + " , Printed on " + System.DateTime.Now;

            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _userID, TitleData, GLOB_DataTable, out _err);

            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }
        

        //Dilshan 2018/09/03 
        public void GenarateDOSMS(string _com, string _docNo, string _cusNo, string _invNo)
        {
            if (string.IsNullOrEmpty(_docNo))
            {
                return;
            }
            _inventoryDAL = new InventoryDAL();
            _generalDAL = new GeneralDAL();            
            MasterLocationNew _mstInLoc = new MasterLocationNew();
            InventoryHeader _intHdr = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = _docNo, Ith_com = _com }).FirstOrDefault();
            List<InventoryBatchN> _batchList = _inventoryDAL.GET_INT_BATCH_DATA(new InventoryBatchN() { Inb_doc_no = _docNo });
            DataTable _grnDtls = _inventoryDAL.SP_GETINVAMT(_com, _invNo);
            //int invamt = Convert.ToInt32(_grnDtls.Rows[0]["sah_anal_7"].ToString());
            decimal invamt = Convert.ToDecimal(_grnDtls.Rows[0]["sah_anal_7"].ToString());
            if (_docNo != null)
            {                
             //_mstInLoc = _generalDAL.GetMasterLocationDataNew(new MasterLocationNew() { Ml_loc_cd = _intHdr.Ith_oth_loc, Ml_com_cd = _intHdr.Ith_oth_com }).FirstOrDefault();
                DataTable mobileNo = _generalDAL.userMobileNoList(_cusNo);
                string smsno = "";
                if (mobileNo.Rows.Count > 0)
                {
                    smsno = mobileNo.Rows[0]["mbe_mob"].ToString();
                    if (IsValidMobileOrLandNo(smsno))
                    {
                        #region sms
                        string errMSG = "";
                        OutSMS _out = new OutSMS();
                        if (smsno != "N/A" && !string.IsNullOrEmpty(smsno))
                        {
                            //string _tmpB = " for " + _intHdr.Ith_sub_tp + " : " + _intHdr.Ith_oth_docno;
                            //if (_intHdr.Ith_sub_tp == "0")
                            //{
                            //    _tmpB = "";
                            //}

                            _custServiceDAL = new CustServiceDAL();
                            //String msg = "Dear Customer, \nYou have created a enquiry.\nEnquiry Id - " + oItem.GCE_ENQ_ID;
                            String msg = "DO has generated. " +
                                         " . DO # " + _docNo +
                                         " . Invoice # " + _invNo +
                                         " . Invoice Amount Rs. " + invamt +
                                         " on " + DateTime.Now.ToString("dd/MMM/yyyy HH:mm:ss");
                            String mobi = smsno;
                            if (smsno.Length == 9)
                            {
                                mobi = "+94" + smsno;
                            }
                            //mobi = "+94" + "713737272";//by dilshan
                            _out.Msgstatus = 0;
                            _out.Msgtype = "S";
                            _out.Receivedtime = DateTime.Now;
                            _out.Receiver = mobi;
                            _out.Msg = msg;
                            _out.Receiverphno = mobi;
                            _out.Senderphno = mobi;
                            _out.Refdocno = "0";
                            _out.Sender = "Message Agent";
                            _out.Createtime = DateTime.Now;
                            Int32 _res = SendSMSAod(_out, out errMSG);
                        }
                        #endregion
                    }
                }
            }
        }
        //Dilshan 2018/09/04 
        public void GenarateSOSMS(string _com, string _docNo, string _cusNo, string _invNo)
        {
            if (string.IsNullOrEmpty(_docNo))
            {
                return;
            }
            _inventoryDAL = new InventoryDAL();
            _generalDAL = new GeneralDAL();
            MasterLocationNew _mstInLoc = new MasterLocationNew();
            InventoryHeader _intHdr = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = _docNo, Ith_com = _com }).FirstOrDefault();
            List<InventoryBatchN> _batchList = _inventoryDAL.GET_INT_BATCH_DATA(new InventoryBatchN() { Inb_doc_no = _docNo });
            if (_docNo != null)
            {
                //_mstInLoc = _generalDAL.GetMasterLocationDataNew(new MasterLocationNew() { Ml_loc_cd = _intHdr.Ith_oth_loc, Ml_com_cd = _intHdr.Ith_oth_com }).FirstOrDefault();
                DataTable mobileNo = _generalDAL.ExMobileNoList(_cusNo, _com);
                string smsno = "";
                if (mobileNo.Rows.Count > 0)
                {
                    smsno = mobileNo.Rows[0]["mbe_mob"].ToString();
                    if (IsValidMobileOrLandNo(smsno))
                    {
                        #region sms
                        string errMSG = "";
                        OutSMS _out = new OutSMS();
                        if (smsno != "N/A" && !string.IsNullOrEmpty(smsno))
                        {
                            //string _tmpB = " for " + _intHdr.Ith_sub_tp + " : " + _intHdr.Ith_oth_docno;
                            //if (_intHdr.Ith_sub_tp == "0")
                            //{
                            //    _tmpB = "";
                            //}

                            _custServiceDAL = new CustServiceDAL();
                            //String msg = "Dear Customer, \nYou have created a enquiry.\nEnquiry Id - " + oItem.GCE_ENQ_ID;
                            String msg = "Sales Order has approved. " +
                                         " . SO # " + _docNo +
                                         " on " + DateTime.Now.ToString("dd/MMM/yyyy HH:mm:ss");
                            String mobi = smsno;
                            if (smsno.Length == 9)
                            {
                                mobi = "+94" + smsno;
                            }
                            //mobi = "+94" + "713737272";//by dilshan
                            _out.Msgstatus = 0;
                            _out.Msgtype = "S";
                            _out.Receivedtime = DateTime.Now;
                            _out.Receiver = mobi;
                            _out.Msg = msg;
                            _out.Receiverphno = mobi;
                            _out.Senderphno = mobi;
                            _out.Refdocno = "0";
                            _out.Sender = "Message Agent";
                            _out.Createtime = DateTime.Now;
                            Int32 _res = SendSMSAod(_out, out errMSG);
                        }
                        #endregion
                    }
                }
            }
        }
        //Dilshan 2018/09/04 
        public void GenaratePaymentSMS(string _com, string _docNo, string _cusNo, string _invNo, string _invamt, string _pc)
        {
            if (string.IsNullOrEmpty(_docNo))
            {
                return;
            }
            _inventoryDAL = new InventoryDAL();
            _generalDAL = new GeneralDAL();
            MasterLocationNew _mstInLoc = new MasterLocationNew();
            InventoryHeader _intHdr = _inventoryDAL.GET_INT_HDR_DATA(new InventoryHeader() { Ith_doc_no = _docNo, Ith_com = _com }).FirstOrDefault();
            List<InventoryBatchN> _batchList = _inventoryDAL.GET_INT_BATCH_DATA(new InventoryBatchN() { Inb_doc_no = _docNo });
            if (_docNo != null)
            {
                //_mstInLoc = _generalDAL.GetMasterLocationDataNew(new MasterLocationNew() { Ml_loc_cd = _intHdr.Ith_oth_loc, Ml_com_cd = _intHdr.Ith_oth_com }).FirstOrDefault();
                DataTable mobileNo = _generalDAL.ExMobileNoList(_cusNo, _com);
                string smsno = "";
                if (mobileNo.Rows.Count > 0)
                {
                    smsno = mobileNo.Rows[0]["mbe_mob"].ToString();
                    if (IsValidMobileOrLandNo(smsno))
                    {
                        #region sms
                        string errMSG = "";
                        OutSMS _out = new OutSMS();
                        if (smsno != "N/A" && !string.IsNullOrEmpty(smsno))
                        {
                            //string _tmpB = " for " + _intHdr.Ith_sub_tp + " : " + _intHdr.Ith_oth_docno;
                            //if (_intHdr.Ith_sub_tp == "0")
                            //{
                            //    _tmpB = "";
                            //}

                            string _pcName = "";
                            string _chanl = "";
                            string _comdes = "";
                            DataTable dt = _generalDAL.CheckProfitCenter(_com, _pc);
                            if (dt.Rows.Count > 0)
                            {
                                _pcName = Convert.ToString(dt.Rows[0]["mpc_desc"]);
                                _chanl = Convert.ToString(dt.Rows[0]["mpc_chnl"]);
                            }
                            DataTable _defaultParameters = new DataTable();
                            _defaultParameters = _generalDAL.GetSysParaDetails(_com, _chanl, "HPCOL");


                            string _pnno = string.Empty;
                            if (_defaultParameters.Rows.Count > 0)
                            {

                                _pnno = _defaultParameters.Rows[0]["msp_rest_desc"] == DBNull.Value ? string.Empty : _defaultParameters.Rows[0]["msp_rest_desc"].ToString();

                            }
                            DataTable mst_com = _generalDAL.GetCompanyByCode(_com);
                            if (mst_com.Rows.Count > 0)
                            {
                                _comdes = mst_com.Rows[0]["mc_desc"] == DBNull.Value ? string.Empty : mst_com.Rows[0]["mc_desc"].ToString();

                            }

                            string _mg1 = "";
                            //thank u for buying [product] on Hire purchase [loc] S/R on [date]  (A/c [accNo]).Tot value [total] & diriya [diriya]-[com]-0112565293
                            //string _mg = "Thank you for the payment of LKR " + _totPay + " received to the " + _pcName + " on " + receiptHeaderList[0].Sar_acc_no + " account,R/N " + receiptHeaderList[0].Sar_manual_ref_no;// "Thank u for the purchased items on HP A/C: " + _AccountNo + " @ " + _pcName + " S/R. HP value Rs.: " + _HPAccount.Hpa_hp_val + " and " + _smsInsu + " Rs.: " + _insuAmt + "-" + _generalDAL.GetHPCustContactPhoneNo();


                            //For RC 1 / RC 4 & Mobile Customers,
                            string msg = "Dear Customer, Thank you for your payment of Rs. " + _invamt + "/- made on " + DateTime.Now.ToString("dd/MMM/yyyy HH:mm:ss") + " for receipt No-" + _docNo + " at (" + _pcName + " )" + _comdes + " " + _pnno;
                            //For RC 2 & Auto Customers,,


                            _custServiceDAL = new CustServiceDAL();
                            //String msg = "Dear Customer, \nYou have created a enquiry.\nEnquiry Id - " + oItem.GCE_ENQ_ID;
                            //String msg = "Sales Order has approved. " +
                            //             " . SO # " + _docNo +
                            //             " on " + DateTime.Now.ToString("dd/MMM/yyyy HH:mm:ss");
                            String mobi = smsno;
                            if (smsno.Length == 9)
                            {
                                mobi = "+94" + smsno;
                            }
                            //mobi = "+94" + "713737272";//by dilshan
                            _out.Msgstatus = 0;
                            _out.Msgtype = "S";
                            _out.Receivedtime = DateTime.Now;
                            _out.Receiver = mobi;
                            _out.Msg = msg;
                            _out.Receiverphno = mobi;
                            _out.Senderphno = mobi;
                            _out.Refdocno = "0";
                            _out.Sender = "Message Agent";
                            _out.Createtime = DateTime.Now;
                            Int32 _res = SendSMSAod(_out, out errMSG);
                        }
                        #endregion
                    }
                }
            }
        }

        public string get_voucherDetails(string _com, string _comDesc, string _whLoc, DateTime _fromDate, DateTime _toDate, DateTime _asatDate
, string _cat1, string _cat2, string _cat3, string _cat4, string _cat5, string _model, string _brand, string _itmcode, string _itmStatus,
string _userID,string _redeemType, out string _err)
        {
            //Wimal 28/08/2018 Inventory With Selling price 
            DataTable _dtResults;
            DataTable GLOB_DataTable = new DataTable();
            DataTable dtheader = new DataTable();
            _err = string.Empty;
            string _filePath = string.Empty;
            string _Com = string.Empty;

            string loclist = "";
            DataTable _dtResultsNew = new DataTable();

            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_userID);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("vocherdtl") == true) _financialDAL.ConnectionOpen_DR();

            if (tmp_user_pc.Rows.Count > 0)
            {
                //dtheader = _financialDAL.DelTmpbyid(_userID);
                foreach (DataRow drow1 in tmp_user_pc.Rows)
                {
                    loclist += "'" + drow1["tpl_pc"].ToString() + "'" + ",";
                }
                loclist = loclist.Remove(loclist.Length - 1);
            }
            _Com = _com;

            if (tmp_user_pc.Rows.Count > 0)
            {

                //dtheader = _financialDAL.DelTmpbyid(_userID);
                foreach (DataRow drow1 in tmp_user_pc.Rows)
                {
                    loclist += "'" + drow1["tpl_pc"].ToString() + "'" + ",";
                }
                loclist = loclist.Remove(loclist.Length - 1);

                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _Com = drow["tpl_com"].ToString();
                    _dtResults = _financialDAL.get_voucherDetl(_com, drow["tpl_pc"].ToString(), _fromDate, _toDate, _fromDate.AddDays(-1), _cat1, _cat2, _cat3, _cat4, _cat5, _model, _brand, _itmcode, _itmStatus, _userID, _redeemType);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            //DataTable _dtResults_format = new DataTable();
            //_dtResults_format.Columns.Add("Gift_Voucher_Number", typeof(string));
            ////_dtResults_format.Columns.Add("gv_no", typeof(string));
            //_dtResults_format.Columns.Add("Issue_Location", typeof(string));
            //_dtResults_format.Columns.Add("Issue_Do", typeof(string));
            //_dtResults_format.Columns.Add("Issue_Do_Date", typeof(string));
            //_dtResults_format.Columns.Add("Issue_Invoice_Number", typeof(string));
            //_dtResults_format.Columns.Add("Issued_Product_Model", typeof(string));
            //_dtResults_format.Columns.Add("Issued_Product_Category_1", typeof(string));
            //_dtResults_format.Columns.Add("gv_amt", typeof(decimal));            
            //_dtResults_format.Columns.Add("Redeem_Location", typeof(string));
            //_dtResults_format.Columns.Add("Redeem_Do", typeof(string));
            //_dtResults_format.Columns.Add("Redeem_Do_Date", typeof(string));
            //_dtResults_format.Columns.Add("Redeem_Invoice_Number", typeof(string));
            //_dtResults_format.Columns.Add("Redeem_Date", typeof(string));
            //_dtResults_format.Columns.Add("Redeem_Product_Category_1", typeof(string));
            //_dtResults_format.Columns.Add("Reddem_Product_Model", typeof(string));
            //_dtResults_format.Columns.Add("Redeem_Method", typeof(string));
            // _dtResults_format.Columns.Add("Redeem_Amount", typeof(decimal));
            // _dtResults_format.Columns.Add("Expired_Voucher", typeof(string));
            // _dtResults_format.Columns.Add("Expire_Date", typeof(string));
            // _dtResults_format.Columns.Add("Not_Redeem_Gift_Vouchers", typeof(string));

            // if (GLOB_DataTable.Rows.Count > 0)
            //{
            //    _dtResults_format = GLOB_DataTable.AsEnumerable()
            //     //.OrderBy(r => r.Field<string>("SUPPLIER_CODE")).ToList()
            //      .Select(g =>
            //      {
            //          var row = _dtResults_format.NewRow();
            //          row["Gift_Voucher_Number"] = g.Field<string>("Gift_Voucher_Number");
            //          row["Issue_Location"] = g.Field<string>("Issue_Location");
            //          row["Issue_Do"] = g.Field<string>("Issue_Do");
            //          row["Issue_Do_Date"] = g.Field<DateTime>("Issue_Do_Date") == null ? string.Empty : g.Field<DateTime>("Issue_Do_Date").ToString("dd/MMM/yyyy");
            //          row["Issue_Invoice_Number"] = g.Field<string>("Issue_Invoice_Number");
            //         // row["Issue_Date"] = g.Field<DateTime>("Issue_Date") == null ? string.Empty : g.Field<DateTime>("Issue_Date").ToString("dd/MMM/yyyy");
            //          row["Issued_Product_Category_1"] = g.Field<string>("Issued_Product_Category_1");
            //          row["Issued_Product_Model"] = g.Field<string>("Issued_Product_Model");
            //          row["gv_amt"] = g.Field<decimal>("Amount");
            //          row["Redeem_Location"] = g.Field<string>("Redeem_Location");
            //          row["Redeem_Do"] = g.Field<string>("Redeem_Do");
            //          row["Redeem_Do_Date"] = g.Field<DateTime>("Redeem_Do_Date") == null ? string.Empty : g.Field<DateTime>("Redeem_Do_Date").ToString("dd/MMM/yyyy");
            //          row["Redeem_Invoice_Number"] = g.Field<string>("Redeem_Invoice_Number");
            //          row["Redeem_Date"] = g.Field<DateTime>("Redeem_Date") == null ? string.Empty : g.Field<DateTime>("Redeem_Date").ToString("dd/MMM/yyyy");
            //          row["Redeem_Product_Category_1"] = g.Field<string>("Redeem_Product_Category_1");
            //          row["Reddem_Product_Model"] = g.Field<string>("Reddem_Product_Model");
            //          row["Redeem_Method"] = g.Field<string>("Redeem_Method");
            //          row["Redeem_Amount"] = g.Field<decimal>("Redeem_Amount");
            //          row["Expired_Voucher"] = g.Field<string>("Expired_Voucher");
            //          row["Expire_Date"] = g.Field<DateTime>("Expire_Date") == null ? string.Empty : g.Field<DateTime>("Expire_Date").ToString("dd/MMM/yyyy");
            //          row["Not_Redeem_Gift_Vouchers"] = g.Field<string>("Not_Redeem_Gift_Vouchers");                    

            //          return row;
            //      }).CopyToDataTable();
            //}

            //var _totAmt = (GLOB_DataTable.Rows.Count > 0) ? GLOB_DataTable.AsEnumerable().Sum(r => r.Field<decimal>("Amount")) : 0;
            //var _ridiAmt = (GLOB_DataTable.Rows.Count > 0) ? GLOB_DataTable.AsEnumerable().Sum(r => r.Field<decimal>("Redeem_Amount")) : 0;

            ////_dtResults_format.Rows.Add(_dtResults_format.NewRow());
            //if (GLOB_DataTable.Rows.Count > 0)
            //{
            //    var _rowSum = GLOB_DataTable.NewRow();
            //    _rowSum["Gift_Voucher_Number"] = "Total";
            //    _rowSum["AMOUNT"] = (decimal)_totAmt;
            //    _rowSum["Redeem_Amount"] = (decimal)_ridiAmt;
            //    GLOB_DataTable.Rows.Add(_rowSum);
            //}

            DataTable GP1 = new DataTable();
            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c8"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c5"] = _comDesc; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c5"] = "Voucher Details Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c3"] = "Date To :"; dataRow["c4"] = _toDate.ToString("dd/MMM/yyyy");
            dataRow["c6"] = "User : "; dataRow["c7"] = _userID + " , Printed on " + System.DateTime.Now;

            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007_xls(_Com, _userID, TitleData, GLOB_DataTable, out _err);

            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }

        public string get_BinCardReport(string _com, string _comDesc, string _whLoc, 
                                        DateTime _fromDate, DateTime _toDate
                                      , string _cat1, string _cat2, string _cat3, string _cat4, string _cat5, string _model, string _brand, string _itmcode, string _itmStatus,
                                         string _userID,string _reportType, out string _err)
        {
            //Wimal 31/10/2018 Bin Card Report
            DataTable _dtResults;
            DataTable GLOB_DataTable = new DataTable();
            DataTable dtheader = new DataTable();
            _err = string.Empty;
            string _filePath = string.Empty;
            string _Com = string.Empty;

            string loclist = "";
            DataTable _dtResultsNew = new DataTable();

            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_userID);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("Bin_card") == true) _financialDAL.ConnectionOpen_DR();

            _Com = _com;
            if (tmp_user_pc.Rows.Count > 0)
            {         
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _Com = drow["tpl_com"].ToString();
                    loclist = drow["tpl_pc"].ToString();
                    _dtResults = _financialDAL.get_BinCardReport(_com, drow["tpl_pc"].ToString(), _fromDate, _toDate, _fromDate.AddDays(-1), _cat1, _cat2, _cat3, _cat4, _cat5, _model, _brand, _itmcode, _itmStatus, _userID, _reportType);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }
            _inventoryDAL = new InventoryDAL();
            MasterItem _mstItem = _inventoryDAL.GetItem(_com, _itmcode);

            DataTable GP1 = new DataTable();
            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c8"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c5"] = _comDesc; TitleData.Rows.Add(dataRow);
            if (_reportType == "SERIAL" )
            {
            dataRow = TitleData.NewRow(); dataRow["c5"] = "System Bin Card - With serial"; TitleData.Rows.Add(dataRow);
            }
            else
            {
                dataRow = TitleData.NewRow(); dataRow["c5"] = "System Bin Card - Without Serial "; TitleData.Rows.Add(dataRow);
            }         

            
            dataRow = TitleData.NewRow();
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "From Date :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c3"] = "To Date:"; dataRow["c4"] = _toDate.ToString("dd/MMM/yyyy");
            dataRow["c6"] = "User : "; dataRow["c7"] = _userID + " , Printed on " + System.DateTime.Now;
            TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Location :"; dataRow["c2"] = loclist;
            TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Itemcode :"; dataRow["c2"] = _itmcode;
            TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Item Description :"; dataRow["c2"] = _mstItem.Mi_shortdesc ;
            TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _userID, TitleData, GLOB_DataTable, out _err);

            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }
        //THARANGA 2018/10/19
        public string HP_intrest_report(string _com, string _loc, string userid, DateTime in_FromDate, DateTime in_ToDate, string _pc, Int16 _issum, Int16 _isSch, string _rtp_heading, out string _err)
        {
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            _inventoryDAL = new InventoryDAL();
            if (_securityDAL.Is_Report_DR("GetReduceBalInterest") == true) _salesDAL.ConnectionOpen_DR();
            #region Get data
            DataTable GLB_REDUCE_BAL_REP = new DataTable();
            DataTable tmp_user_pc = new DataTable();
            tmp_user_pc = _salesDAL.GetTempUserPc(_com, userid);
            int _loccount = 0;
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    DataTable tmp_GLB_REDUCE_BAL_REP = new DataTable();

                    tmp_GLB_REDUCE_BAL_REP = _salesDAL.CALC_REDUCE_BAL_RPT_NEW(in_FromDate, in_ToDate, _com, drow["tpl_pc"].ToString(), _issum, _isSch);

                    GLB_REDUCE_BAL_REP.Merge(tmp_GLB_REDUCE_BAL_REP);
                    _loccount++;
                    _loc = drow["tpl_pc"].ToString();
                }
            }
            if (_loccount > 1)
            {
                _loc = "ALL";
            }
            #endregion



            #region Adding Grand total row
            var _Future_Capital_Sys = (GLB_REDUCE_BAL_REP.Rows.Count > 0) ? GLB_REDUCE_BAL_REP.AsEnumerable().Sum(r => r.Field<decimal>("Future Capital Sys")) : 0; //Get sum of table if have any rows
            var Future_Interest_Sys = (GLB_REDUCE_BAL_REP.Rows.Count > 0) ? GLB_REDUCE_BAL_REP.AsEnumerable().Sum(r => r.Field<decimal>("Future Interest Sys")) : 0; //Get sum of table if have any rows
            var Closing_Balance = (GLB_REDUCE_BAL_REP.Rows.Count > 0) ? GLB_REDUCE_BAL_REP.AsEnumerable().Sum(r => r.Field<decimal>("Closing Balance")) : 0; //Get sum of table if have any rows
            var _Installmenet_Value = (GLB_REDUCE_BAL_REP.Rows.Count > 0) ? GLB_REDUCE_BAL_REP.AsEnumerable().Sum(r => r.Field<decimal>("Installment Value")) : 0; //Get sum of table if have any rows
            var _Amount_Finance = (GLB_REDUCE_BAL_REP.Rows.Count > 0) ? GLB_REDUCE_BAL_REP.AsEnumerable().Sum(r => r.Field<decimal>("Amount Finance")) : 0; //Get sum of table if have any rows
            var _CLB_Ledger = (GLB_REDUCE_BAL_REP.Rows.Count > 0) ? GLB_REDUCE_BAL_REP.AsEnumerable().Sum(r => r.Field<decimal>("CLB Ledger")) : 0; //Get sum of table if have any rows
            var _Difference = (GLB_REDUCE_BAL_REP.Rows.Count > 0) ? GLB_REDUCE_BAL_REP.AsEnumerable().Sum(r => r.Field<decimal>("Difference")) : 0; //Get sum of table if have any rows
            var _Arears_Amount = (GLB_REDUCE_BAL_REP.Rows.Count > 0) ? GLB_REDUCE_BAL_REP.AsEnumerable().Sum(r => r.Field<decimal>("Arrears Amount")) : 0; //Get sum of table if have any rows
            var _Advance_Amount = (GLB_REDUCE_BAL_REP.Rows.Count > 0) ? GLB_REDUCE_BAL_REP.AsEnumerable().Sum(r => r.Field<decimal>("Advance Amount")) : 0; //Get sum of table if have any rows

            GLB_REDUCE_BAL_REP.Rows.Add(GLB_REDUCE_BAL_REP.NewRow());
            var _rowSum = GLB_REDUCE_BAL_REP.NewRow();
            _rowSum["Future Capital Sys"] = (decimal)_Future_Capital_Sys;
            _rowSum["Future Interest Sys"] = (decimal)Future_Interest_Sys;
            _rowSum["Closing Balance"] = (decimal)Closing_Balance;
            _rowSum["Installment Value"] = (decimal)_Installmenet_Value;
            _rowSum["Amount Finance"] = (decimal)_Amount_Finance;
            _rowSum["CLB Ledger"] = (decimal)_CLB_Ledger;
            _rowSum["Difference"] = (decimal)_Difference;
            _rowSum["Arrears Amount"] = (decimal)_Arears_Amount;
            _rowSum["Advance Amount"] = (decimal)_Advance_Amount;
            GLB_REDUCE_BAL_REP.Rows.Add(_rowSum);





            #endregion

            _err = string.Empty;
            string _filePath = string.Empty;

            MasterCompany _mstComp = _inventoryDAL.GetCompByCode(_com);

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = _mstComp.Mc_desc; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = _rtp_heading; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Between :"; dataRow["c2"] = in_FromDate.ToString("dd/MMM/yyyy") + " and " + in_ToDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Location"; dataRow["c5"] = _loc;
            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, userid + "int_rep", TitleData, GLB_REDUCE_BAL_REP, out _err);
            //if (purchaseOrderSumm.Rows.Count == 0)
            //{
            //    _err = "No Records Found.";
            //}

            return _filePath;
        }
        //THARANGA 2018/10/19
        public string GetRCV_AGE_CURRRNT(string userid, string _com, string _pc, string _loc, string _rtp_heading, SalesDAL _SalesDAL,DateTime _todate, out string _err)//, DateTime _fromdt, DateTime _todate, SalesDAL _SalesDAL, out string _err)
        {
           
            #region Get data
            DataTable tbGetRCV_AGE_CURRRNT = new DataTable();
            tbGetRCV_AGE_CURRRNT = _salesDAL.GetRCV_AGE_CURRRNT(userid, _todate);
                        #endregion
            DataTable SUMMARYTABLE = new DataTable();

            SUMMARYTABLE.Columns.Add("PROFIT CENTER");
            SUMMARYTABLE.Columns.Add("ACCOUNT NUMBER");
            SUMMARYTABLE.Columns.Add("ACCOUNT CREATED DATE");
            SUMMARYTABLE.Columns.Add("AGE YEAR");
            SUMMARYTABLE.Columns.Add("AGE MONTH");
            SUMMARYTABLE.Columns.Add("CLOSING BALANCE",typeof(decimal));
            SUMMARYTABLE.Columns.Add("COLLECTIONS", typeof(decimal));
            SUMMARYTABLE.Columns.Add("REVERTED DATE");
            SUMMARYTABLE.Columns.Add("REVERTED CAPITAL", typeof(decimal));
            SUMMARYTABLE.Columns.Add("RELEASED DATE");
            SUMMARYTABLE.Columns.Add("RELESE CAPITAL", typeof(decimal));
            SUMMARYTABLE.Columns.Add("RE-SALE DATE");
            SUMMARYTABLE.Columns.Add("RE-SALE VALUE", typeof(decimal));
            SUMMARYTABLE.Columns.Add("ACCOUNT DEPT ADJUSTMENT (CR)", typeof(decimal));
            SUMMARYTABLE.Columns.Add("ACCOUNT DEPT ADJUSTMENT (DR)", typeof(decimal));
            SUMMARYTABLE.Columns.Add("SUBSEQUENT COLLECTIONS AFTER TRANSFERRED TO ESD", typeof(decimal));
            SUMMARYTABLE.Columns.Add("CURRENT CLOSING BALANCE", typeof(decimal));
            SUMMARYTABLE.Columns.Add("LGD", typeof(decimal));
            if (tbGetRCV_AGE_CURRRNT.Rows.Count > 0)
            {


                SUMMARYTABLE = tbGetRCV_AGE_CURRRNT.AsEnumerable()
                      .Select(g =>
                      {
                          var row = SUMMARYTABLE.NewRow();
                          row["PROFIT CENTER"] = g.Field<string>("HARA_PC");// +"-" + g.Field<string>("hara_pc_name");
                          row["ACCOUNT NUMBER"] = g.Field<string>("HARA_ACC_NO");
                          row["ACCOUNT CREATED DATE"] = g.Field<DateTime>("HARA_ACC_CRE_DT").ToString("dd/MMM/yyyy");
                          row["AGE YEAR"] = g.Field<Int16>("HARA_YEAR");
                          row["AGE MONTH"] = g.Field<Int16>("HARA_MONTH");
                          row["CLOSING BALANCE"] = g.Field<decimal>("HARA_CLS_BAL").ToString("#,#.00");
                          row["COLLECTIONS"] = g.Field<decimal>("HARA_COLL").ToString("#,#.00");
                          //if (g.Field<DateTime>("HARA_RVT_DT") == null)
                          //{
                          //    row["REVERTED DATE"] = DateTime.MinValue.ToString("dd/MMM/yyyy");
                          //}
                          //else
                          //{
                          //    row["REVERTED DATE"] = g.Field<DateTime>("HARA_RVT_DT").ToString("dd/MMM/yyyy");
                          //}
                          var x = g.Field<DateTime?>("HARA_RVT_DT");
                          if (x == null)
                          {
                              row["REVERTED DATE"] = string.Empty;
                          }
                          else
                          {
                              row["REVERTED DATE"] = g.Field<DateTime>("HARA_RVT_DT").ToString("dd/MMM/yyyy");
                          }
                          //row["REVERTED DATE"] = x == null ? row["HARA_RVT_DT"] = g.Field<DateTime>("HARA_RVT_DT").ToString("dd/MMM/yyyy") : row["HARA_RVT_DT"] = DateTime.MinValue.ToString("dd/MMM/yyyy");
                          row["REVERTED CAPITAL"] = g.Field<decimal>("HARA_RVT_CAP");

                          x = g.Field<DateTime?>("HARA_RLS_DT");
                          if (x == null)
                          {
                              row["RELEASED DATE"] = string.Empty;
                          }
                          else
                          {
                              row["RELEASED DATE"] = g.Field<DateTime>("HARA_RLS_DT").ToString("dd/MMM/yyyy");
                          }
                          // row["RELEASED DATE"] = x == null ? row["HARA_RLS_DT"] = g.Field<DateTime>("HARA_RLS_DT").ToString("dd/MMM/yyyy") : row["HARA_RLS_DT"] = DateTime.MinValue.ToString("dd/MMM/yyyy");
                          row["RELESE CAPITAL"] = g.Field<decimal>("HARA_RLS_CAP").ToString("#,#.00");

                          x = g.Field<DateTime?>("HARA_RESALE_DT");
                          if (x == null)
                          {
                              row["RE-SALE VALUE"] = 0;
                          }
                          else
                          {
                              // row["RE-SALE VALUE"] = g.Field<DateTime>("HARA_RLS_DT").ToString("dd/MMM/yyyy");
                          }

                          // row["RE-SALE DATE"] = x == null ? row["HARA_RESALE_DT"] = g.Field<DateTime>("HARA_RESALE_DT").ToString("dd/MMM/yyyy") : row["HARA_RESALE_DT"] = DateTime.MinValue.ToString("dd/MMM/yyyy");
                          // row["RE-SALE VALUE"] = g.Field<decimal>("hara_cls_bal").ToString("#,#.00"); 
                          row["ACCOUNT DEPT ADJUSTMENT (CR)"] = g.Field<decimal>("HARA_ACC_ADJ_CR").ToString("#,#.00");
                          row["ACCOUNT DEPT ADJUSTMENT (DR)"] = g.Field<decimal>("HARA_ACC_ADJ_DR").ToString("#,#.00");

                          var _val = g.Field<decimal?>("HARA_ESD");
                          if (_val == null)
                          {
                              row["SUBSEQUENT COLLECTIONS AFTER TRANSFERRED TO ESD"] = 0;
                          }
                          else
                          {
                              row["SUBSEQUENT COLLECTIONS AFTER TRANSFERRED TO ESD"] = g.Field<decimal>("HARA_ESD").ToString("#,#.00");
                          }
                          //row["SUBSEQUENT COLLECTIONS AFTER TRANSFERRED TO ESD"] = g.Field<decimal>("HARA_ESD").ToString("#,#.00");
                          var CLS_BAL_CURR = g.Field<decimal>("HARA_CLS_BAL_CURR").ToString("#,#.00");
                          if (CLS_BAL_CURR == null)
                          {
                              row["CURRENT CLOSING BALANCE"] = 0;
                          }
                          else
                          {
                              row["CURRENT CLOSING BALANCE"] = Convert.ToDecimal(g.Field<decimal>("HARA_CLS_BAL_CURR").ToString("#,#.00"));
                          }
                          //row["CURRENT CLOSING BALANCE"] = g.Field<decimal>("HARA_CLS_BAL_CURR").ToString("#,#.00");
                          _val = g.Field<decimal?>("HARA_LGD");

                          if (_val == null)
                          {
                              row["LGD"] =0;
                          }
                          else
                          {
                              row["LGD"] = g.Field<decimal>("HARA_LGD").ToString("#,#.00");
                          }

                          // row["LGD"] = g.Field<decimal>("HARA_LGD").ToString("#,#.00");


                          return row;
                      }).CopyToDataTable();

            }




            //#endregion

            _err = string.Empty;
            string _filePath = string.Empty;

            MasterCompany _mstComp = _inventoryDAL.GetCompByCode(_com);

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = _mstComp.Mc_desc; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = _rtp_heading; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
           // dataRow["c1"] = "Between :"; dataRow["c2"] = _fromdt.ToString("dd/MMM/yyyy") + " and " + _todate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Location"; dataRow["c5"] = _loc;
            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, userid + "LGDRPT", TitleData, SUMMARYTABLE, out _err);
            //if (purchaseOrderSumm.Rows.Count == 0)
            //{
            //    _err = "No Records Found.";
            //}

            return _filePath;
        }

        public string get_commsionComparioson(string _com, string _comDesc, DateTime _fromDate, DateTime _toDate,
 string _cat1, string _cat2, string _cat3, string _cat4, string _cat5, string _model, string _brand, string _itmcode, string _saleType,
string _userID, out string _err)
        {
            //Wimal 05/Nov/2018 commision Comparioson report
            DataTable _dtResults;
            DataTable GLOB_DataTable = new DataTable();
            DataTable dtheader = new DataTable();
            _err = string.Empty;
            string _filePath = string.Empty;
            string _Com = string.Empty;

            string loclist = "";
            DataTable _dtResultsNew = new DataTable();

            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_userID);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("vocherdtl") == true) _financialDAL.ConnectionOpen_DR();

            if (tmp_user_pc.Rows.Count > 0)
            {              
                foreach (DataRow drow1 in tmp_user_pc.Rows)
                {
                    loclist += "'" + drow1["tpl_pc"].ToString() + "'" + ",";
                }
                loclist = loclist.Remove(loclist.Length - 1);
            }
            _Com = _com;

            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow1 in tmp_user_pc.Rows)
                {
                    loclist += "'" + drow1["tpl_pc"].ToString() + "'" + ",";
                }
                loclist = loclist.Remove(loclist.Length - 1);

                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _Com = drow["tpl_com"].ToString();
                    _dtResults = _financialDAL.get_commissionComparison(_com, drow["tpl_pc"].ToString(), _fromDate, _toDate, _fromDate.AddDays(-1), _cat1, _cat2, _cat3, _cat4, _cat5, _model, _brand, _itmcode, _saleType, _userID);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            DataTable GP1 = new DataTable();
            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c8"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c5"] = _comDesc; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c5"] = "Commision Comparison Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c3"] = "Date To :"; dataRow["c4"] = _toDate.ToString("dd/MMM/yyyy");
            dataRow["c6"] = "User : "; dataRow["c7"] = _userID + " , Printed on " + System.DateTime.Now;

            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007_xls(_Com, _userID, TitleData, GLOB_DataTable, out _err);

            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }

        public string getExpireItem(string _com, string _comDesc, DateTime _fromDate, DateTime _toDate,
string _cat1, string _cat2, string _cat3, string _cat4, string _cat5, string _model, string _brand, string _itmcode,
string _userID, out string _err)
        {
            //Wimal @ 26/Nov/2018
            DataTable _dtResults;
            DataTable GLOB_DataTable = new DataTable();
            DataTable dtheader = new DataTable();
            _err = string.Empty;
            string _filePath = string.Empty;
            string _Com = string.Empty;
            string _Loc = string.Empty;

            string loclist = "";
            DataTable _dtResultsNew = new DataTable();

            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();

            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_userID);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("vocherdtl") == true) _financialDAL.ConnectionOpen_DR();

            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow1 in tmp_user_pc.Rows)
                {
                    loclist += "'" + drow1["tpl_pc"].ToString() + "'" + ",";
                }
                loclist = loclist.Remove(loclist.Length - 1);
            }
            _Com = _com;

            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow1 in tmp_user_pc.Rows)
                {
                    loclist += "'" + drow1["tpl_pc"].ToString() + "'" + ",";
                }
                loclist = loclist.Remove(loclist.Length - 1);

                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _Com = drow["tpl_com"].ToString();
                    _Loc = drow["tpl_pc"].ToString();
                    _dtResults = _financialDAL.getExpireItem(_com, _fromDate, _toDate, _Loc, _cat1, _cat2, _cat3, _cat4, _cat5, _brand, _model, _itmcode);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            DataTable GP1 = new DataTable();
            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c8"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c5"] = _comDesc; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c5"] = "Item Expiry Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromDate.ToString("dd/MMM/yyyy");
            dataRow["c3"] = "Date To :"; dataRow["c4"] = _toDate.ToString("dd/MMM/yyyy");
            dataRow["c6"] = "User : "; dataRow["c7"] = _userID + " , Printed on " + System.DateTime.Now;

            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007_xls(_Com, _userID, TitleData, GLOB_DataTable, out _err);

            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
            return _filePath;
        }

        //Wimal @ 12/Nov/2018
        public DataTable SearchCustomer(string p_mbe_com, string p_mbe_cd)
        {
            _salesDAL = new SalesDAL();
            return _salesDAL.SearchCustomer(p_mbe_com, p_mbe_cd);
        }
        public DataTable Get_Custom_Assmnt_Det(string com, DateTime from, DateTime to, string type)
        {
            DataTable dt = new DataTable();
            _generalDAL = new GeneralDAL();
            dt = _generalDAL.Get_Custom_Assmnt_Det(com, from, to, type);
            return dt;
        }
        public DataTable Get_Shipment_Data(string com, DateTime from, DateTime to, string doc)
        {
            DataTable dt = new DataTable();
            _generalDAL = new GeneralDAL();
            dt = _generalDAL.Get_Shipment_Data(com,from,to,doc);
            return dt;
        }
        public DataTable Get_Clr_usr(string com, DateTime from, DateTime to, string doc)
        {
            DataTable dt = new DataTable();
            _generalDAL = new GeneralDAL();
            dt = _generalDAL.Get_Clr_usr(com, from, to, doc);
            return dt;
        }
        public DataTable Get_Clr_Com(string com, DateTime from, DateTime to, string doc)
        {
            DataTable dt = new DataTable();
            _generalDAL = new GeneralDAL();
            dt = _generalDAL.Get_Clr_Com(com, from, to, doc);
            return dt;
        }
        public DataTable Get_Clr_ShippingLine(string com, DateTime from, DateTime to, string doc)
        {
            DataTable dt = new DataTable();
            _generalDAL = new GeneralDAL();
            dt = _generalDAL.Get_Clr_ShippingLine(com, from, to, doc);
            return dt;
        }

        public string get_account_det(DataTable _accDet, string _userID,string com, out string _err)
        {

            _salesDAL = new SalesDAL();

            DataTable GLOB_DataTable = new DataTable("ABC");
            DataTable dtheader = new DataTable();
            _err = string.Empty;
            string _filePath = string.Empty;
            string _Com = com;


            DataTable _dtResultsNew = new DataTable();


            DataTable SUMMARYTABLE = new DataTable();
            SUMMARYTABLE.Columns.Add("Account Number");
            SUMMARYTABLE.Columns.Add("Reschedule effect from date");
            SUMMARYTABLE.Columns.Add("No of extending months");
            SUMMARYTABLE.Columns.Add("Scheme");


            if (_accDet.Rows.Count > 0)
            {
                foreach (DataRow drow1 in _accDet.Rows)
                {
                    string ACCNO = drow1["acc"].ToString();
                    DataRow _drn;
                    DataTable ODT = _salesDAL.GetHPSaleswithDO(ACCNO);
                    List<HpAccount> _HpAccount = _salesDAL.GetHP_Accounts(com, null, ACCNO, "A");
                    if (_HpAccount != null)
                    {
                        if (_HpAccount.Count > 0)
                    {

                        _drn = SUMMARYTABLE.NewRow();
                            _drn["Account Number"] = _HpAccount.First().Hpa_acc_no.ToString();// ODT.Rows[0]["hpa_acc_no"].ToString();
                            _drn["Scheme"] = _HpAccount.First().Hpa_sch_cd.ToString();// ODT.Rows[0]["hpa_sch_cd"].ToString();
                        SUMMARYTABLE.Rows.Add(_drn);
                    }
                    }

                    //if (ODT.Rows.Count > 0)
                    //{
                    //    _drn = SUMMARYTABLE.NewRow();
                    //    _drn["Account Number"] = ODT.Rows[0]["hpa_acc_no"].ToString();
                    //    _drn["Scheme"] = ODT.Rows[0]["hpa_sch_cd"].ToString();
                    //    SUMMARYTABLE.Rows.Add(_drn);
                    //}

                }

            }



            _err = "";
            _filePath = "";
            DataTable odt = new DataTable("Temp");
            _filePath = ExportExcel2007_xls(_Com, _userID, odt, SUMMARYTABLE, out _err);

            if (SUMMARYTABLE.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }


        public string get_depreciation_Summery(string _com, string _loc, DateTime _asatDate,
                                          string _cat1, string _cat2, string _cat3, string _cat4, string _cat5, string _brand, string _model, string _itemcode,
                                                string _user_id, out string _err)
        {
             //Wimal @ 19/Sep/2018
            _inventoryDAL = new InventoryDAL();
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();
            if (_securityDAL.Is_Report_DR("depreciationsummery") == true) _inventoryDAL.ConnectionOpen_DR();
            DataTable tmp_user_pc = new DataTable();
            DataTable purchaseOrderSumm = new DataTable();
            tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user_id);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    DataTable tmp_Table = new DataTable();                    
                    tmp_Table = _inventoryDAL.get_depreciation_Summery(_com, drow["tpl_pc"].ToString(), _asatDate, _cat1,  _cat2,  _cat3,  _cat4,  _cat5,  _brand, _model, _itemcode, _user_id);
                    purchaseOrderSumm.Merge(tmp_Table);
                }
            }
            
            _err = string.Empty;
            string _filePath = string.Empty;

            MasterCompany _mstComp = _inventoryDAL.GetCompByCode(_com);

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = _mstComp.Mc_desc; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Stock Depreciation Summery - Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Asat :"; dataRow["c2"] = _asatDate  ;
            dataRow["c6"] = "User : "; dataRow["c7"] = _user_id + " , Printed on " + System.DateTime.Now;
            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user_id, TitleData, purchaseOrderSumm, out _err);
            if (purchaseOrderSumm.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
            return _filePath;
        }

        public string get_depreciation_PPNote(string _com, string _loc, DateTime _FDate, DateTime _TDate,string _cat1, string _cat2, string _cat3, string _cat4, string _cat5, string _brand, string _model, string _itemcode,string _user_id, out string _err)
        {
            //Wimal @ 19/Sep/2018
            _inventoryDAL = new InventoryDAL();          
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();
            if (_securityDAL.Is_Report_DR("depreciationPPN") == true) _inventoryDAL.ConnectionOpen_DR();          
            DataTable tmp_user_pc = new DataTable();
            DataTable purchaseOrderSumm = new DataTable();
            tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user_id);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    DataTable tmp_Table = new DataTable();                   
                    tmp_Table = _inventoryDAL.get_depreciation_PPNote(_com, drow["tpl_pc"].ToString(), _FDate, _TDate, _cat1,  _cat2,  _cat3,  _cat4,  _cat5,  _brand,  _model, _itemcode,_user_id);
                    purchaseOrderSumm.Merge(tmp_Table);
                }
            }
            _err = string.Empty;
            string _filePath = string.Empty;

            decimal valuation_open_balance = purchaseOrderSumm.AsEnumerable().Sum(r => r.Field<decimal>("valuation_open_balance"));
            decimal valuation_addition = purchaseOrderSumm.AsEnumerable().Sum(r => r.Field<decimal>("valuation_addition"));
           decimal valuation_disposal = purchaseOrderSumm.AsEnumerable().Sum(r => r.Field<decimal>("valuation_disposal"));
            decimal valuation_revaluation_transfer = purchaseOrderSumm.AsEnumerable().Sum(r => r.Field<decimal>("valuation_revaluation_transfer"));
           decimal valuation_revaluation = purchaseOrderSumm.AsEnumerable().Sum(r => r.Field<decimal>("valuation_revaluation"));
            decimal valuation_clsbal = purchaseOrderSumm.AsEnumerable().Sum(r => r.Field<decimal>("valuation_clsbal"));
            decimal depreciation_opbal = purchaseOrderSumm.AsEnumerable().Sum(r => r.Field<decimal>("depreciation_opbal"));
            decimal depreciation_tot = purchaseOrderSumm.AsEnumerable().Sum(r => r.Field<decimal>("depreciation_tot"));
            decimal depreciation_disposl = purchaseOrderSumm.AsEnumerable().Sum(r => r.Field<decimal>("depreciation_disposl"));
           decimal depreciation_revalu_transfer = purchaseOrderSumm.AsEnumerable().Sum(r => r.Field<decimal>("depreciation_revalu_transfer"));
            decimal depreciation_revaluation = purchaseOrderSumm.AsEnumerable().Sum(r => r.Field<decimal>("depreciation_revaluation"));
           decimal depreciation_close_balance = purchaseOrderSumm.AsEnumerable().Sum(r => r.Field<decimal>("depreciation_close_balance"));

            DataRow dr =  purchaseOrderSumm.NewRow();
            dr["item_cat1"] = "Total";
            dr["item_cat1_desc"] = " ";
            dr["valuation_open_balance"] = valuation_open_balance;
            dr["valuation_addition"] = valuation_addition;
            dr["valuation_disposal"] = valuation_disposal;
            dr["valuation_revaluation_transfer"] = valuation_revaluation_transfer;
            dr["valuation_revaluation"] = valuation_revaluation;
            dr["valuation_clsbal"] = valuation_clsbal;
            dr["depreciation_opbal"] = depreciation_opbal;
            dr["depreciation_tot"] = depreciation_tot;
            dr["depreciation_disposl"] = depreciation_disposl;
            dr["depreciation_revalu_transfer"] = depreciation_revalu_transfer;
            dr["depreciation_revaluation"] = depreciation_revaluation;
            dr["depreciation_close_balance"] = depreciation_close_balance;
            purchaseOrderSumm.Rows.Add(dr);

            DataRow drNB = purchaseOrderSumm.NewRow();
            drNB["item_cat1"] = "Net Book Value";
            drNB["item_cat1_desc"] = " ";
            drNB["valuation_open_balance"] =valuation_open_balance - depreciation_opbal;
            drNB["valuation_addition"] = valuation_addition - depreciation_tot;
            drNB["valuation_disposal"] = valuation_disposal -depreciation_disposl;
            drNB["valuation_revaluation_transfer"] = valuation_revaluation_transfer - depreciation_revalu_transfer;
            drNB["valuation_revaluation"] = valuation_revaluation - depreciation_revaluation;
            drNB["valuation_clsbal"] = valuation_clsbal - depreciation_close_balance;
            purchaseOrderSumm.Rows.Add(drNB);
            purchaseOrderSumm.Columns[0].ColumnName ="Asset Cat1";
            purchaseOrderSumm.Columns[1].ColumnName = "Asset Cat1-Desc";
            purchaseOrderSumm.Columns[2].ColumnName = "Valuation " + System.Environment.NewLine + "Balance As at " + _FDate.ToString("MM/dd/yyyy") + " (LKR )";
            purchaseOrderSumm.Columns[3].ColumnName = "Valuation " + System.Environment.NewLine + "Additions/Acquisitions  (LKR )";
            purchaseOrderSumm.Columns[4].ColumnName = "Valuation " + System.Environment.NewLine + "Disposals/Transfer   (LKR )";
            purchaseOrderSumm.Columns[5].ColumnName = "Valuation " + System.Environment.NewLine + "Transfer for Revaluation    (LKR )";
            purchaseOrderSumm.Columns[6].ColumnName = "Valuation " + System.Environment.NewLine + "Revaluation    (LKR )";
            purchaseOrderSumm.Columns[7].ColumnName = "Valuation " + System.Environment.NewLine + "_Balance As at " + _TDate.ToString("MM/dd/yyyy") + " (LKR )";
            purchaseOrderSumm.Columns[8].ColumnName = "Depreciation " + System.Environment.NewLine + "Balance As at " + _FDate.ToString("MM/dd/yyyy") + " (LKR )";
            purchaseOrderSumm.Columns[9].ColumnName = "Depreciation " + System.Environment.NewLine + "Charge for the Year  (LKR )";
            purchaseOrderSumm.Columns[10].ColumnName = "Depreciation " + System.Environment.NewLine + "Disposals/Transfer  (LKR )";
            purchaseOrderSumm.Columns[11].ColumnName = "Depreciation " + System.Environment.NewLine + "Transfer for Revaluation    (LKR )";
            purchaseOrderSumm.Columns[12].ColumnName = "Depreciation " + System.Environment.NewLine + "Revaluation    (LKR )";
            purchaseOrderSumm.Columns[13].ColumnName = "Depreciation " + System.Environment.NewLine + " Balance As at " + _TDate.ToString("MM/dd/yyyy") + " (LKR )";

            MasterCompany _mstComp = _inventoryDAL.GetCompByCode(_com);
            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = _mstComp.Mc_desc; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Fixed Assets PPNOTE"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From  :"; dataRow["c2"] = _FDate;
            dataRow["c4"] = "Date To  :"; dataRow["c5"] = _TDate;
            dataRow["c6"] = "User : "; dataRow["c7"] = _user_id + " , Printed on " + System.DateTime.Now;
            //dataRow["c4"] = "Location"; dataRow["c5"] = _inLoc;
            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user_id, TitleData, purchaseOrderSumm, out _err);
            if (purchaseOrderSumm.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
            return _filePath;          
        }

        public string get_depreciation_Disposal(string _com, string _loc, DateTime _FDate, DateTime _TDate, string _user_id, out string _err)
        {
            //Wimal @ 19/Sep/2018
            _inventoryDAL = new InventoryDAL();
            //DataTable _dt = new DataTable();
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();
            if (_securityDAL.Is_Report_DR("depreciationDisposal") == true) _inventoryDAL.ConnectionOpen_DR();
            //////////////////////////////////////////////////////////////////////////////////////////////////
            DataTable tmp_user_pc = new DataTable();
            DataTable purchaseOrderSumm = new DataTable();
            tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user_id);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    DataTable tmp_Table = new DataTable();                    
                    tmp_Table = _inventoryDAL.get_depreciation_Disposal(_com, drow["tpl_pc"].ToString(), _FDate, _TDate, _user_id);
                    purchaseOrderSumm.Merge(tmp_Table);
                }
            }

            if (purchaseOrderSumm.Rows.Count > 0)
            {
                DataRow drNB = purchaseOrderSumm.NewRow();
                drNB["ASSETS_CODE"] = "Total";
                drNB["COST_OF_ASSETS"] = purchaseOrderSumm.AsEnumerable().Sum(r => r.Field<decimal>("COST_OF_ASSETS"));
                drNB["ACC_DEPRE"] = purchaseOrderSumm.AsEnumerable().Sum(r => r.Field<decimal>("ACC_DEPRE"));
                drNB["WRITTEN_DOWN_VALUE"] = purchaseOrderSumm.AsEnumerable().Sum(r => r.Field<decimal>("WRITTEN_DOWN_VALUE"));
                drNB["SALES_NET"] = purchaseOrderSumm.AsEnumerable().Sum(r => r.Field<decimal>("SALES_NET"));
                drNB["SALES_VAT"] = purchaseOrderSumm.AsEnumerable().Sum(r => r.Field<decimal>("SALES_VAT"));
                drNB["SALES_GROSS"] = purchaseOrderSumm.AsEnumerable().Sum(r => r.Field<decimal>("SALES_GROSS"));
                drNB["PROFIT_LOSS"] = purchaseOrderSumm.AsEnumerable().Sum(r => r.Field<decimal>("PROFIT_LOSS"));
                purchaseOrderSumm.Rows.Add(drNB);
            }
        //     sum(item_cost) COST_OF_ASSETS ,sum(accu_depre) ACC_DEPRE,sum(depre_aamount) WRITTEN_DOWN_VALUE,
        //sum(sale_net)SALES_NET,sum(sale_vat) SALES_VAT,sum(sale_gross) SALES_GROSS,
        //sum(profit) PROFIT_LOSS

            _err = string.Empty;
            string _filePath = string.Empty;     

            MasterCompany _mstComp = _inventoryDAL.GetCompByCode(_com);

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = _mstComp.Mc_desc; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Disposal Depreciation Details - Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From  :"; dataRow["c2"] = _FDate;
            dataRow["c4"] = "Date To  :"; dataRow["c5"] = _TDate;
            dataRow["c6"] = "User : "; dataRow["c6"] = _user_id + " , Printed on " + System.DateTime.Now;
            //dataRow["c4"] = "Location"; dataRow["c5"] = _inLoc;
            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user_id, TitleData, purchaseOrderSumm, out _err);
            if (purchaseOrderSumm.Rows.Count == 0)
            {
                _err = "No Records Found.";
        }

            return _filePath;
            //////////////////////////////////////////////////////////////////////////////////////////////////
        }
        public DataTable ConvertToDataTable<T>(IEnumerable<T> varlist)
        {
            DataTable dtReturn = new DataTable();


            // column names
            PropertyInfo[] oProps = null;


            if (varlist == null) return dtReturn;


            foreach (T rec in varlist)
            {
                // Use reflection to get property names, to create table, Only first time, others will follow
                if (oProps == null)
                {
                    oProps = ((Type)rec.GetType()).GetProperties();
                    foreach (PropertyInfo pi in oProps)
                    {
                        Type colType = pi.PropertyType;


                        if ((colType.IsGenericType) && (colType.GetGenericTypeDefinition() == typeof(Nullable<>)))
                        {
                            colType = colType.GetGenericArguments()[0];
                        }


                        dtReturn.Columns.Add(new DataColumn(pi.Name, colType));
                    }
                }


                DataRow dr = dtReturn.NewRow();


                foreach (PropertyInfo pi in oProps)
                {
                    dr[pi.Name] = pi.GetValue(rec, null) == null ? DBNull.Value : pi.GetValue
                    (rec, null);
                }


                dtReturn.Rows.Add(dr);
            }
            return dtReturn;
        }

        public string getSalesRegistor(DateTime _fromtDate, DateTime _totDate, string _ItemClasif, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _Cat4, string _Cat5, string _Stktype, string _Group, string _CostOrValue, string _Com, string _User, out string _err)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();
            if (_securityDAL.Is_Report_DR("ValuationDetail") == true) _financialDAL.ConnectionOpen_DR();

            _err = string.Empty;
            string _filePath = string.Empty;
            int i = 0;

            DataTable _dtResults = new DataTable();
            DataTable _dtValuation = new DataTable();
            DataTable _period = new DataTable();
            DataTable _opbal = new DataTable();
            DataTable _closebal = new DataTable();

            //DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User).DefaultView.ToTable();
            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    i = i + 1;

                    //if (i==1)
                    //{
                    //    _period = _financialDAL.getPeriodDetails(_fromtDate,drow["tpl_com"].ToString());
                    //}

                    //if (_period.Rows.Count > 0)
                    //{
                    //    foreach (DataRow _rperiod in _period.Rows)
                    //    {
                    //        _opbal = GetClosingBalanceWithValueProcess(drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), Convert.ToDateTime(_rperiod["prd_to"]).AddDays(1), _fromtDate.AddDays(-1), Convert.ToInt16(_rperiod["prd_seq_no"]), "0", _User);
                    //        _closebal = GetClosingBalanceWithValueProcess(drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), Convert.ToDateTime(_rperiod["prd_to"]).AddDays(1), _totDate, Convert.ToInt16(_rperiod["prd_seq_no"]), "0", _User);
                    //    }
                    //}
                    
                    //_dtResults = _financialDAL.getSalesRegistor(_fromtDate, _totDate, _ItemClasif, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _Stktype, drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), _User);
                    _dtResults = _financialDAL.getSalesRegistor(drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(),_fromtDate, _totDate);
                    _dtValuation = _dtResults;
                    //_dtResults = _financialDAL.getValuationDetails(_fromtDate, _totDate, _ItemClasif, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _Stktype, drow["tpl_com"].ToString(), "", _User);

                    //string _Group, string _CostOrValue
                    //if (_CostOrValue == "QTY")
                    //{
                    //    if (_Group == "ITM")
                    //    {
                    //        var valuation = from b in _dtResults.AsEnumerable()
                    //                        group b by new { Itemcode = b.Field<string>("ITEM_CODE"), Itemdesc = b.Field<string>("ITEM_DESC"), Itemstatus = b.Field<string>("ITEMS_STATUS") } into g
                    //                        select new
                    //                        {
                    //                            ITEM_CODE = g.Key.Itemcode,
                    //                            ITEM_DESCRIPTION = g.Key.Itemdesc,
                    //                            ITEM_SATUS = g.Key.Itemstatus,
                    //                            OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                    //                            //OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                    //                            OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                    //                            //OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                    //                            GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                    //                            //GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                    //                            SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                    //                            //SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                    //                            AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                    //                            //AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                    //                            ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                    //                            //ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                    //                            //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                    //                            //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                    //                            TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                    //                            //TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                    //                            DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                    //                            //DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                    //                            PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                    //                            //PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                    //                            AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                    //                            //AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                    //                            ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                    //                            //ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                    //                            //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                    //                            //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                    //                            TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                    //                            //TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                    //                            GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                    //                            //GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                    //                            CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                    //                            //CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                    //                            //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                    //                            //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                    //                            //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                    //                            //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                    //                            //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                    //                            //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                    //                        };

                    //        DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                    //        _dtValuation.Merge(_dtValuation1);
                    //    }
                    //}

                }
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Sales Register Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromtDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _totDate.ToString("dd/MMM/yyyy");
            //if (tmp_user_pc.Rows.Count > 0)
            //{
            //    int a = 0;
            //    foreach (DataRow drow in tmp_user_pc.Rows)
            //    {
            //        a = a + 1;
            //        if (a == 1)
            //        {
            //            if (tmp_user_pc.Rows.Count == 1)
            //            { dataRow = TitleData.NewRow(); dataRow["c6"] = drow["tpl_pc"].ToString(); TitleData.Rows.Add(dataRow); }
            //            else
            //            { dataRow = TitleData.NewRow(); dataRow["c6"] = "All Locations based on User Rights"; TitleData.Rows.Add(dataRow); }
            //        }
            //    }
            //}
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, TitleData, _dtValuation, out _err);

            if (_dtValuation.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }
        //dilshan on 15/02/2019
        public string getExciseSchedules(DateTime _fromtDate, DateTime _totDate, string _ItemClasif, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _Cat4, string _Cat5, string _Stktype, string _Group, string _CostOrValue, string _Com, string _User, out string _err)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            _reportDAL = new ReptCommonDAL();
            if (_securityDAL.Is_Report_DR("ValuationDetail") == true) _financialDAL.ConnectionOpen_DR();

            _err = string.Empty;
            string _filePath = string.Empty;
            int i = 0;

            DataTable _dtResults = new DataTable();
            DataTable _dtValuation = new DataTable();
            DataTable _period = new DataTable();
            DataTable _opbal = new DataTable();
            DataTable _closebal = new DataTable();

            //DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User).DefaultView.ToTable();
            DataTable tmp_user_pc = _reportDAL.GetTempUserPcRptDB_AllCom(_User);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    i = i + 1;

                    //if (i==1)
                    //{
                    //    _period = _financialDAL.getPeriodDetails(_fromtDate,drow["tpl_com"].ToString());
                    //}

                    //if (_period.Rows.Count > 0)
                    //{
                    //    foreach (DataRow _rperiod in _period.Rows)
                    //    {
                    //        _opbal = GetClosingBalanceWithValueProcess(drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), Convert.ToDateTime(_rperiod["prd_to"]).AddDays(1), _fromtDate.AddDays(-1), Convert.ToInt16(_rperiod["prd_seq_no"]), "0", _User);
                    //        _closebal = GetClosingBalanceWithValueProcess(drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), Convert.ToDateTime(_rperiod["prd_to"]).AddDays(1), _totDate, Convert.ToInt16(_rperiod["prd_seq_no"]), "0", _User);
                    //    }
                    //}

                    //_dtResults = _financialDAL.getSalesRegistor(_fromtDate, _totDate, _ItemClasif, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _Stktype, drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), _User);
                    _dtResults = _financialDAL.getExciseSchedules(drow["tpl_com"].ToString(), drow["tpl_pc"].ToString(), _fromtDate, _totDate);
                    _dtValuation = _dtResults;
                    //_dtResults = _financialDAL.getValuationDetails(_fromtDate, _totDate, _ItemClasif, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _Stktype, drow["tpl_com"].ToString(), "", _User);

                    //string _Group, string _CostOrValue
                    //if (_CostOrValue == "QTY")
                    //{
                    //    if (_Group == "ITM")
                    //    {
                    //        var valuation = from b in _dtResults.AsEnumerable()
                    //                        group b by new { Itemcode = b.Field<string>("ITEM_CODE"), Itemdesc = b.Field<string>("ITEM_DESC"), Itemstatus = b.Field<string>("ITEMS_STATUS") } into g
                    //                        select new
                    //                        {
                    //                            ITEM_CODE = g.Key.Itemcode,
                    //                            ITEM_DESCRIPTION = g.Key.Itemdesc,
                    //                            ITEM_SATUS = g.Key.Itemstatus,
                    //                            OP_BAL_QTY = g.Sum(x => x.Field<Decimal>("OP_BAL_QTY")),
                    //                            //OP_BAL_VAL = g.Sum(x => x.Field<Decimal>("OP_BAL_VAL")),
                    //                            OP_GIT_QTY = g.Sum(x => x.Field<Decimal>("OP_GIT_QTY")),
                    //                            //OP_GIT_VAL = g.Sum(x => x.Field<Decimal>("OP_GIT_VAL")),
                    //                            GRN_QTY = g.Sum(x => x.Field<Decimal>("GRN_QTY")),
                    //                            //GRN_VAL = g.Sum(x => x.Field<Decimal>("GRN_VAL")),
                    //                            SRN_QTY = g.Sum(x => x.Field<Decimal>("SRN_QTY")),
                    //                            //SRN_VAL = g.Sum(x => x.Field<Decimal>("SRN_VAL")),
                    //                            AOD_IN_QTY = g.Sum(x => x.Field<Decimal>("AOD_IN_QTY")),
                    //                            //AOD_IN_VAL = g.Sum(x => x.Field<Decimal>("AOD_IN_VAL")),
                    //                            ADJ_IN_QTY = g.Sum(x => x.Field<Decimal>("ADJ_IN_QTY")),
                    //                            //ADJ_IN_VAL = g.Sum(x => x.Field<Decimal>("ADJ_IN_VAL")),
                    //                            //OTH_IN_QTY = g.Sum(x => x.Field<Decimal>("OTH_IN_QTY")),
                    //                            //OTH_IN_VAL = g.Sum(x => x.Field<Decimal>("OTH_IN_VAL")),
                    //                            TOT_IN_QTY = g.Sum(x => x.Field<Decimal>("TOT_IN_QTY")),
                    //                            //TOT_IN_VAL = g.Sum(x => x.Field<Decimal>("TOT_IN_VAL")),
                    //                            DO_QTY = g.Sum(x => x.Field<Decimal>("DO_QTY")),
                    //                            //DO_VAL = g.Sum(x => x.Field<Decimal>("DO_VAL")),
                    //                            PRN_QTY = g.Sum(x => x.Field<Decimal>("PRN_QTY")),
                    //                            //PRN_VAL = g.Sum(x => x.Field<Decimal>("PRN_VAL")),
                    //                            AOD_OUT_QTY = g.Sum(x => x.Field<Decimal>("AOD_OUT_QTY")),
                    //                            //AOD_OUT_VAL = g.Sum(x => x.Field<Decimal>("AOD_OUT_VAL")),
                    //                            ADJ_OUT_QTY = g.Sum(x => x.Field<Decimal>("ADJ_OUT_QTY")),
                    //                            //ADJ_OUT_VAL = g.Sum(x => x.Field<Decimal>("ADJ_OUT_VAL")),
                    //                            //OTH_OUT_QTY = g.Sum(x => x.Field<Decimal>("OTH_OUT_QTY")),
                    //                            //OTH_OUT_VAL = g.Sum(x => x.Field<Decimal>("OTH_OUT_VAL")),
                    //                            TOT_OUT_QTY = g.Sum(x => x.Field<Decimal>("TOT_OUT_QTY")),
                    //                            //TOT_OUT_VAL = g.Sum(x => x.Field<Decimal>("TOT_OUT_VAL")),
                    //                            GIT_QTY = g.Sum(x => x.Field<Decimal>("GIT_QTY")),
                    //                            //GIT_VAL = g.Sum(x => x.Field<Decimal>("GIT_VAL")),
                    //                            CLOSE_QTY = g.Sum(x => x.Field<Decimal>("CLOSE_QTY")),
                    //                            //CLOSE_VAL = g.Sum(x => x.Field<Decimal>("CLOSE_VAL"))
                    //                            //DO_NO_INV_QTY = g.Sum(x => x.Field<Decimal>("DO_NO_INV_QTY")),
                    //                            //DO_NO_INV_VAL = g.Sum(x => x.Field<Decimal>("DO_NO_INV_VAL")),
                    //                            //DO_SAME_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_QTY")),
                    //                            //DO_SAME_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_SAME_PC_VAL")),
                    //                            //DO_OTH_PC_QTY = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_QTY")),
                    //                            //DO_OTH_PC_VAL = g.Sum(x => x.Field<Decimal>("DO_OTH_PC_VAL"))
                    //                        };

                    //        DataTable _dtValuation1 = LINQResultToDataTable(valuation);
                    //        _dtValuation.Merge(_dtValuation1);
                    //    }
                    //}

                }
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Excise Schedules"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = _fromtDate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = _totDate.ToString("dd/MMM/yyyy");
            //if (tmp_user_pc.Rows.Count > 0)
            //{
            //    int a = 0;
            //    foreach (DataRow drow in tmp_user_pc.Rows)
            //    {
            //        a = a + 1;
            //        if (a == 1)
            //        {
            //            if (tmp_user_pc.Rows.Count == 1)
            //            { dataRow = TitleData.NewRow(); dataRow["c6"] = drow["tpl_pc"].ToString(); TitleData.Rows.Add(dataRow); }
            //            else
            //            { dataRow = TitleData.NewRow(); dataRow["c6"] = "All Locations based on User Rights"; TitleData.Rows.Add(dataRow); }
            //        }
            //    }
            //}
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_Com, _User, TitleData, _dtValuation, out _err);

            if (_dtValuation.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }
        public string getpurchaseRegister(string _com, string _loc, string _purType, string _supplier, string _itemcode, string _cat1, string _cat2, DateTime _fromDate, DateTime _toDate, string doctype, string docno, string userid, out string _err)
        {
            //public string ItemBufferStatusReport_Excel(string in_user_id, string in_Company, string in_item, string in_Brand, string in_cat1, string in_cat2, string in_cat3, string in_cat4, string in_cat5, string in_model, string in_loc, string _in_subtp, out string _err)
            //Wimal @ 19/Sep/2018
            _inventoryDAL = new InventoryDAL();
            //DataTable _dt = new DataTable();
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();
            _salesDAL = new SalesDAL();


            //_inventoryDAL = new InventoryDAL();
            //_inventoryDAL.ConnectionOpen();
            //_inventoryDAL.BeginTransaction();


            if (_securityDAL.Is_Report_DR("purchaseRegister") == true) _inventoryDAL.ConnectionOpen_DR();
            //return _inventoryDAL.getpurchaseOrderSummery(_com, _loc, _purType, _supplier, _itemcode, _cat1, _cat2, _fromDate, _toDate, doctype, docno);

            //////////////////////////////////////////////////////////////////////////////////////////////////

            DataTable tmp_user_pc = new DataTable();
            DataTable purchaseOrderSumm = new DataTable();
            tmp_user_pc = _salesDAL.GetTempUserPc(_com, userid);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    DataTable tmp_Table = new DataTable();
                    //tmp_Table = bsObj.CHNLSVC.MsgPortal.GetStockBalanceCurrent_SCM(_objRepPara._GlbUserID, _objRepPara._GlbReportChannel, _objRepPara._GlbReportBrand, _objRepPara._GlbReportModel, _objRepPara._GlbReportItemCode, _objRepPara._GlbReportItemStatus, _objRepPara._GlbReportItemCat1, _objRepPara._GlbReportItemCat2, _objRepPara._GlbReportItemCat3, _objRepPara._GlbReportItemCat4, _objRepPara._GlbReportItemCat5, _objRepPara._GlbReportWithCost, _objRepPara._GlbReportWithSerial, _objRepPara._GlbReportCompCode, drow["tpl_pc"].ToString(), _objRepPara._GlbReportWithRCC, _objRepPara._GlbReportWithJob, _objRepPara._GlbReportWithGIT);
                    tmp_Table = _inventoryDAL.getpurchaseRegister(_com, drow["tpl_pc"].ToString(), _purType, _supplier, _itemcode, _cat1, _cat2, _fromDate, _toDate, doctype, docno);
                    purchaseOrderSumm.Merge(tmp_Table);

                }
            }

            //int in_ISlast;
            //string _inLoc = "";
            _err = string.Empty;
            string _filePath = string.Empty;
            MasterCompany _mstComp = _inventoryDAL.GetCompByCode(_com);

            //_inventoryDAL.TransactionCommit();
            //_inventoryDAL.ConnectionClose();
            //in_ISlast = 1;

            //DataTable _dtResults;
            //_salesDAL = new SalesDAL();
            //_inventoryDAL = new InventoryDAL();
            //_securityDAL = new SecurityDAL();
            //if (_securityDAL.Is_Report_DR("Itembufferstatus") == true) _inventoryDAL.ConnectionOpen_DR();
            //DataTable GLOB_DataTable = new DataTable();

            //DataTable tmp_user_pc = _salesDAL.GetTempUserPc(in_Company, in_user_id);
            //if (tmp_user_pc.Rows.Count > 0)
            //{
            //    foreach (DataRow drow in tmp_user_pc.Rows)
            //    {
            //        _inLoc = drow["tpl_pc"].ToString();
            //        //_securityDAL = new SecurityDAL();
            //        //if (_securityDAL.Is_Report_DR("CustomerDetails") == true) _salesDAL.ConnectionOpen_DR();
            //        _dtResults = _inventoryDAL.ItemBufferStatusReport(in_user_id, in_Company, in_item, in_Brand, in_cat1, in_cat2, in_cat3, in_cat4, in_cat5, in_model, drow["tpl_pc"].ToString(), _in_subtp);
            //        if (_dtResults != null)
            //        {
            //            GLOB_DataTable.Merge(_dtResults);
            //            in_ISlast = in_ISlast + 1;
            //        }
            //    }
            //}



            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = _mstComp.Mc_desc; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "PO Detail (IV4)"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Between :"; dataRow["c2"] = _fromDate + " and " + _toDate;
            //dataRow["c4"] = "Location"; dataRow["c5"] = _inLoc;
            TitleData.Rows.Add(dataRow);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, userid, TitleData, purchaseOrderSumm, out _err);
            if (purchaseOrderSumm.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
            //////////////////////////////////////////////////////////////////////////////////////////////////
        }
    }
}